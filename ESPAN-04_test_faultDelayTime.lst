CCS PCH C Compiler, Version 5.091, 5967               13-¡.Â.-21 14:07

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - SMS\ESPAN-04_test_faultDelayTime.lst

               ROM used:   50732 bytes (77%)
                           Largest free fragment is 14800
               RAM used:   3527 (91%) at main() level
                           3553 (91%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   BA88
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   0592
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   0582
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
*
00636:  DATA 41,54
00638:  DATA 2B,43
0063A:  DATA 4D,47
0063C:  DATA 46,3D
0063E:  DATA 31,00
00640:  DATA 41,54
00642:  DATA 2B,43
00644:  DATA 4D,47
00646:  DATA 53,3D
00648:  DATA 22,00
0064A:  DATA 41,54
0064C:  DATA 2B,43
0064E:  DATA 4D,47
00650:  DATA 46,3D
00652:  DATA 31,00
00654:  DATA 41,54
00656:  DATA 2B,43
00658:  DATA 4D,47
0065A:  DATA 53,3D
0065C:  DATA 22,00
0065E:  DATA 41,54
00660:  DATA 2B,43
00662:  DATA 4D,47
00664:  DATA 46,3D
00666:  DATA 31,00
00668:  DATA 41,54
0066A:  DATA 2B,43
0066C:  DATA 4D,47
0066E:  DATA 53,3D
00670:  DATA 22,00
00672:  DATA 41,54
00674:  DATA 2B,43
00676:  DATA 4D,47
00678:  DATA 46,3D
0067A:  DATA 31,00
0067C:  DATA 41,54
0067E:  DATA 2B,43
00680:  DATA 4D,47
00682:  DATA 53,3D
00684:  DATA 22,00
00686:  DATA 41,54
00688:  DATA 2B,43
0068A:  DATA 4D,47
0068C:  DATA 46,3D
0068E:  DATA 31,00
00690:  DATA 41,54
00692:  DATA 2B,43
00694:  DATA 4D,47
00696:  DATA 53,3D
00698:  DATA 22,00
0069A:  DATA 41,54
0069C:  DATA 2B,43
0069E:  DATA 4D,47
006A0:  DATA 46,3D
006A2:  DATA 31,00
006A4:  DATA 41,54
006A6:  DATA 2B,43
006A8:  DATA 4D,47
006AA:  DATA 53,3D
006AC:  DATA 22,00
006AE:  DATA 41,54
006B0:  DATA 2B,43
006B2:  DATA 4D,47
006B4:  DATA 46,3D
006B6:  DATA 31,00
006B8:  DATA 41,54
006BA:  DATA 2B,43
006BC:  DATA 4D,47
006BE:  DATA 53,3D
006C0:  DATA 22,00
006C2:  DATA 41,54
006C4:  DATA 2B,43
006C6:  DATA 4D,47
006C8:  DATA 46,3D
006CA:  DATA 31,00
006CC:  DATA 41,54
006CE:  DATA 2B,43
006D0:  DATA 4D,47
006D2:  DATA 53,3D
006D4:  DATA 22,00
006D6:  DATA 41,54
006D8:  DATA 2B,43
006DA:  DATA 4D,47
006DC:  DATA 46,3D
006DE:  DATA 31,00
006E0:  DATA 41,54
006E2:  DATA 2B,43
006E4:  DATA 4D,47
006E6:  DATA 53,3D
006E8:  DATA 22,00
006EA:  DATA 41,54
006EC:  DATA 2B,43
006EE:  DATA 4D,47
006F0:  DATA 46,3D
006F2:  DATA 31,00
006F4:  DATA 41,54
006F6:  DATA 2B,43
006F8:  DATA 4D,47
006FA:  DATA 53,3D
006FC:  DATA 22,00
006FE:  DATA 41,54
00700:  DATA 2B,43
00702:  DATA 4D,47
00704:  DATA 46,3D
00706:  DATA 31,00
00708:  DATA 41,54
0070A:  DATA 2B,43
0070C:  DATA 4D,47
0070E:  DATA 53,3D
00710:  DATA 22,00
00712:  DATA 41,54
00714:  DATA 2B,43
00716:  DATA 4D,47
00718:  DATA 46,3D
0071A:  DATA 31,00
0071C:  DATA 41,54
0071E:  DATA 2B,43
00720:  DATA 4D,47
00722:  DATA 53,3D
00724:  DATA 22,00
00726:  DATA 41,54
00728:  DATA 2B,43
0072A:  DATA 4D,47
0072C:  DATA 46,3D
0072E:  DATA 31,00
00730:  DATA 41,54
00732:  DATA 2B,43
00734:  DATA 4D,47
00736:  DATA 53,3D
00738:  DATA 22,00
0073A:  DATA 41,54
0073C:  DATA 2B,43
0073E:  DATA 4D,47
00740:  DATA 46,3D
00742:  DATA 31,00
00744:  DATA 41,54
00746:  DATA 2B,43
00748:  DATA 4D,47
0074A:  DATA 53,3D
0074C:  DATA 22,00
0074E:  DATA 41,54
00750:  DATA 2B,43
00752:  DATA 4D,47
00754:  DATA 46,3D
00756:  DATA 31,00
00758:  DATA 41,54
0075A:  DATA 2B,43
0075C:  DATA 4D,47
0075E:  DATA 53,3D
00760:  DATA 22,00
00762:  DATA 41,54
00764:  DATA 2B,43
00766:  DATA 4D,47
00768:  DATA 46,3D
0076A:  DATA 31,00
0076C:  DATA 41,54
0076E:  DATA 2B,43
00770:  DATA 4D,47
00772:  DATA 53,3D
00774:  DATA 22,00
00776:  DATA 41,54
00778:  DATA 2B,43
0077A:  DATA 4D,47
0077C:  DATA 46,3D
0077E:  DATA 31,00
00780:  DATA 41,54
00782:  DATA 2B,43
00784:  DATA 4D,47
00786:  DATA 53,3D
00788:  DATA 22,00
0078A:  DATA 41,54
0078C:  DATA 2B,43
0078E:  DATA 4D,47
00790:  DATA 46,3D
00792:  DATA 31,00
00794:  DATA 41,54
00796:  DATA 2B,43
00798:  DATA 4D,47
0079A:  DATA 53,3D
0079C:  DATA 22,00
0079E:  DATA 41,54
007A0:  DATA 2B,43
007A2:  DATA 4D,47
007A4:  DATA 46,3D
007A6:  DATA 31,00
007A8:  DATA 41,54
007AA:  DATA 2B,43
007AC:  DATA 4D,47
007AE:  DATA 53,3D
007B0:  DATA 22,00
007B2:  DATA 41,54
007B4:  DATA 2B,43
007B6:  DATA 4D,47
007B8:  DATA 46,3D
007BA:  DATA 31,00
007BC:  DATA 41,54
007BE:  DATA 2B,43
007C0:  DATA 4D,47
007C2:  DATA 53,3D
007C4:  DATA 22,00
007C6:  DATA 41,54
007C8:  DATA 2B,43
007CA:  DATA 4D,47
007CC:  DATA 46,3D
007CE:  DATA 31,00
007D0:  DATA 41,54
007D2:  DATA 2B,43
007D4:  DATA 4D,47
007D6:  DATA 53,3D
007D8:  DATA 22,00
007DA:  DATA 41,54
007DC:  DATA 2B,43
007DE:  DATA 4D,47
007E0:  DATA 46,3D
007E2:  DATA 31,00
007E4:  DATA 41,54
007E6:  DATA 2B,43
007E8:  DATA 4D,47
007EA:  DATA 53,3D
007EC:  DATA 22,00
007EE:  DATA 41,54
007F0:  DATA 2B,43
007F2:  DATA 4D,47
007F4:  DATA 46,3D
007F6:  DATA 31,00
007F8:  DATA 41,54
007FA:  DATA 2B,43
007FC:  DATA 4D,47
007FE:  DATA 53,3D
00800:  DATA 22,00
00802:  DATA 41,54
00804:  DATA 2B,43
00806:  DATA 4D,47
00808:  DATA 46,3D
0080A:  DATA 31,00
0080C:  DATA 41,54
0080E:  DATA 2B,43
00810:  DATA 4D,47
00812:  DATA 53,3D
00814:  DATA 22,00
00816:  DATA 41,54
00818:  DATA 2B,43
0081A:  DATA 4D,47
0081C:  DATA 46,3D
0081E:  DATA 31,00
00820:  DATA 41,54
00822:  DATA 2B,43
00824:  DATA 4D,47
00826:  DATA 53,3D
00828:  DATA 22,00
0082A:  DATA 41,54
0082C:  DATA 2B,43
0082E:  DATA 4D,47
00830:  DATA 46,3D
00832:  DATA 31,00
00834:  DATA 41,54
00836:  DATA 2B,43
00838:  DATA 4D,47
0083A:  DATA 53,3D
0083C:  DATA 22,00
0083E:  DATA 41,54
00840:  DATA 2B,43
00842:  DATA 4D,47
00844:  DATA 46,3D
00846:  DATA 31,00
00848:  DATA 41,54
0084A:  DATA 2B,43
0084C:  DATA 4D,47
0084E:  DATA 53,3D
00850:  DATA 22,00
00852:  DATA 41,54
00854:  DATA 2B,43
00856:  DATA 4D,47
00858:  DATA 46,3D
0085A:  DATA 31,00
0085C:  DATA 41,54
0085E:  DATA 2B,43
00860:  DATA 4D,47
00862:  DATA 53,3D
00864:  DATA 22,00
00866:  DATA 41,54
00868:  DATA 2B,43
0086A:  DATA 4D,47
0086C:  DATA 46,3D
0086E:  DATA 31,00
00870:  DATA 41,54
00872:  DATA 2B,43
00874:  DATA 4D,47
00876:  DATA 53,3D
00878:  DATA 22,00
0087A:  DATA 41,54
0087C:  DATA 2B,43
0087E:  DATA 4D,47
00880:  DATA 46,3D
00882:  DATA 31,00
00884:  DATA 41,54
00886:  DATA 2B,43
00888:  DATA 4D,47
0088A:  DATA 53,3D
0088C:  DATA 22,00
0088E:  DATA 41,54
00890:  DATA 2B,43
00892:  DATA 4D,47
00894:  DATA 46,3D
00896:  DATA 31,00
00898:  DATA 41,54
0089A:  DATA 2B,43
0089C:  DATA 4D,47
0089E:  DATA 53,3D
008A0:  DATA 22,00
008A2:  DATA 41,54
008A4:  DATA 2B,43
008A6:  DATA 4D,47
008A8:  DATA 46,3D
008AA:  DATA 31,00
008AC:  DATA 41,54
008AE:  DATA 2B,43
008B0:  DATA 4D,47
008B2:  DATA 53,3D
008B4:  DATA 22,00
008B6:  DATA 41,54
008B8:  DATA 2B,43
008BA:  DATA 4D,47
008BC:  DATA 46,3D
008BE:  DATA 31,00
008C0:  DATA 41,54
008C2:  DATA 2B,43
008C4:  DATA 4D,47
008C6:  DATA 53,3D
008C8:  DATA 22,00
008CA:  DATA 41,54
008CC:  DATA 2B,43
008CE:  DATA 4D,47
008D0:  DATA 46,3D
008D2:  DATA 31,00
008D4:  DATA 41,54
008D6:  DATA 2B,43
008D8:  DATA 4D,47
008DA:  DATA 53,3D
008DC:  DATA 22,00
008DE:  DATA 41,54
008E0:  DATA 2B,43
008E2:  DATA 4D,47
008E4:  DATA 46,3D
008E6:  DATA 31,00
008E8:  DATA 41,54
008EA:  DATA 2B,43
008EC:  DATA 4D,47
008EE:  DATA 53,3D
008F0:  DATA 22,00
008F2:  DATA 41,54
008F4:  DATA 2B,43
008F6:  DATA 4D,47
008F8:  DATA 46,3D
008FA:  DATA 31,00
008FC:  DATA 41,54
008FE:  DATA 2B,43
00900:  DATA 4D,47
00902:  DATA 53,3D
00904:  DATA 22,00
00906:  DATA 41,54
00908:  DATA 2B,43
0090A:  DATA 4D,47
0090C:  DATA 46,3D
0090E:  DATA 31,00
00910:  DATA 41,54
00912:  DATA 2B,43
00914:  DATA 4D,47
00916:  DATA 53,3D
00918:  DATA 22,00
0091A:  DATA 41,54
0091C:  DATA 2B,43
0091E:  DATA 4D,47
00920:  DATA 46,3D
00922:  DATA 31,00
00924:  DATA 41,54
00926:  DATA 2B,43
00928:  DATA 4D,47
0092A:  DATA 53,3D
0092C:  DATA 22,00
0092E:  DATA 41,54
00930:  DATA 2B,43
00932:  DATA 4D,47
00934:  DATA 46,3D
00936:  DATA 31,00
00938:  DATA 41,54
0093A:  DATA 2B,43
0093C:  DATA 4D,47
0093E:  DATA 53,3D
00940:  DATA 22,00
00942:  DATA 41,54
00944:  DATA 2B,43
00946:  DATA 4D,47
00948:  DATA 46,3D
0094A:  DATA 31,00
0094C:  DATA 41,54
0094E:  DATA 2B,43
00950:  DATA 4D,47
00952:  DATA 53,3D
00954:  DATA 22,00
00956:  DATA 41,54
00958:  DATA 2B,43
0095A:  DATA 4D,47
0095C:  DATA 53,3D
0095E:  DATA 22,00
00960:  DATA 41,54
00962:  DATA 2B,43
00964:  DATA 4D,47
00966:  DATA 53,3D
00968:  DATA 22,00
0096A:  DATA 41,54
0096C:  DATA 2B,43
0096E:  DATA 4D,47
00970:  DATA 53,3D
00972:  DATA 22,00
00974:  DATA 41,54
00976:  DATA 2B,43
00978:  DATA 4D,47
0097A:  DATA 53,3D
0097C:  DATA 22,00
0097E:  DATA 41,54
00980:  DATA 2B,43
00982:  DATA 4D,47
00984:  DATA 53,3D
00986:  DATA 22,00
00988:  DATA 41,54
0098A:  DATA 2B,43
0098C:  DATA 4D,47
0098E:  DATA 53,3D
00990:  DATA 22,00
00992:  DATA 41,54
00994:  DATA 2B,43
00996:  DATA 4D,47
00998:  DATA 53,3D
0099A:  DATA 22,00
0099C:  DATA 41,54
0099E:  DATA 2B,43
009A0:  DATA 4D,47
009A2:  DATA 53,3D
009A4:  DATA 22,00
009A6:  DATA 41,54
009A8:  DATA 2B,43
009AA:  DATA 4D,47
009AC:  DATA 53,3D
009AE:  DATA 22,00
009B0:  DATA 41,54
009B2:  DATA 2B,43
009B4:  DATA 4D,47
009B6:  DATA 53,3D
009B8:  DATA 22,00
009BA:  DATA 41,54
009BC:  DATA 2B,43
009BE:  DATA 4D,47
009C0:  DATA 53,3D
009C2:  DATA 22,00
009C4:  DATA 41,54
009C6:  DATA 2B,43
009C8:  DATA 4D,47
009CA:  DATA 53,3D
009CC:  DATA 22,00
009CE:  DATA 41,54
009D0:  DATA 2B,43
009D2:  DATA 4D,47
009D4:  DATA 53,3D
009D6:  DATA 22,00
009D8:  DATA 41,54
009DA:  DATA 2B,43
009DC:  DATA 4D,47
009DE:  DATA 53,3D
009E0:  DATA 22,00
009E2:  DATA 41,54
009E4:  DATA 2B,43
009E6:  DATA 4D,47
009E8:  DATA 53,3D
009EA:  DATA 22,00
009EC:  DATA 41,54
009EE:  DATA 2B,43
009F0:  DATA 4D,47
009F2:  DATA 53,3D
009F4:  DATA 22,00
009F6:  DATA 41,54
009F8:  DATA 2B,43
009FA:  DATA 4D,47
009FC:  DATA 53,3D
009FE:  DATA 22,00
00A00:  DATA 41,54
00A02:  DATA 2B,43
00A04:  DATA 4D,47
00A06:  DATA 53,3D
00A08:  DATA 22,00
00A0A:  DATA 41,54
00A0C:  DATA 2B,43
00A0E:  DATA 4D,47
00A10:  DATA 53,3D
00A12:  DATA 22,00
00A14:  DATA 41,54
00A16:  DATA 2B,43
00A18:  DATA 4D,47
00A1A:  DATA 53,3D
00A1C:  DATA 22,00
00A1E:  DATA 41,54
00A20:  DATA 2B,43
00A22:  DATA 4D,47
00A24:  DATA 46,3D
00A26:  DATA 31,00
*
02468:  MOVLB  D
0246A:  MOVF   xD0,W
0246C:  ANDLW  07
0246E:  MOVWF  00
02470:  RRCF   xD0,W
02472:  MOVWF  01
02474:  RRCF   01,F
02476:  RRCF   01,F
02478:  MOVLW  1F
0247A:  ANDWF  01,F
0247C:  MOVF   01,W
0247E:  ADDWF  xD2,W
02480:  MOVWF  FE9
02482:  MOVLW  00
02484:  ADDWFC xD3,W
02486:  MOVWF  FEA
02488:  CLRF   01
0248A:  INCF   01,F
0248C:  INCF   00,F
0248E:  BRA    2492
02490:  RLCF   01,F
02492:  DECFSZ 00,F
02494:  BRA    2490
02496:  MOVF   xD1,F
02498:  BZ    24A0
0249A:  MOVF   01,W
0249C:  IORWF  FEF,F
0249E:  BRA    24A6
024A0:  COMF   01,F
024A2:  MOVF   01,W
024A4:  ANDWF  FEF,F
024A6:  MOVLB  0
024A8:  RETURN 0
024AA:  MOVLB  D
024AC:  MOVF   xD0,W
024AE:  ANDLW  07
024B0:  MOVWF  00
024B2:  RRCF   xD0,W
024B4:  MOVWF  01
024B6:  RRCF   01,F
024B8:  RRCF   01,F
024BA:  MOVLW  1F
024BC:  ANDWF  01,F
024BE:  MOVF   01,W
024C0:  ADDWF  xD1,W
024C2:  MOVWF  FE9
024C4:  MOVLW  00
024C6:  ADDWFC xD2,W
024C8:  MOVWF  FEA
024CA:  MOVFF  FEF,01
024CE:  INCF   00,F
024D0:  BRA    24D4
024D2:  RRCF   01,F
024D4:  DECFSZ 00,F
024D6:  BRA    24D2
024D8:  MOVLW  01
024DA:  ANDWF  01,F
024DC:  MOVLB  0
024DE:  RETURN 0
*
02526:  TBLRD*+
02528:  MOVF   FF5,F
0252A:  BZ    2544
0252C:  MOVFF  FF6,DCB
02530:  MOVFF  FF7,DCC
02534:  MOVFF  FF5,DCD
02538:  RCALL  24E0
0253A:  MOVFF  DCB,FF6
0253E:  MOVFF  DCC,FF7
02542:  BRA    2526
02544:  RETURN 0
*
02A10:  MOVLB  D
02A12:  MOVF   xD1,W
02A14:  MULWF  xD3
02A16:  MOVFF  FF3,01
02A1A:  MOVFF  FF4,00
02A1E:  MULWF  xD4
02A20:  MOVF   FF3,W
02A22:  ADDWF  00,F
02A24:  MOVF   xD2,W
02A26:  MULWF  xD3
02A28:  MOVF   FF3,W
02A2A:  ADDWFC 00,W
02A2C:  MOVWF  02
02A2E:  MOVLB  0
02A30:  RETURN 0
*
0344A:  ADDWF  FE8,W
0344C:  CLRF   FF7
0344E:  RLCF   FF7,F
03450:  ADDLW  65
03452:  MOVWF  FF6
03454:  MOVLW  34
03456:  ADDWFC FF7,F
03458:  TBLRD*-
0345A:  MOVF   FF5,W
0345C:  MOVWF  FFA
0345E:  TBLRD*
03460:  MOVF   FF5,W
03462:  MOVWF  FF9
03464:  DATA 3C,2D
03466:  DATA 42,2D
03468:  DATA 48,2D
0346A:  DATA 4E,2D
0346C:  DATA 54,2D
0346E:  DATA 5A,2D
03470:  DATA 60,2D
03472:  DATA 66,2D
03474:  DATA 6C,2D
03476:  DATA 72,2D
03478:  DATA 78,2D
0347A:  DATA 7E,2D
0347C:  DATA 84,2D
0347E:  DATA 8A,2D
03480:  DATA 90,2D
03482:  DATA 96,2D
03484:  DATA 9C,2D
03486:  DATA A2,2D
03488:  DATA A8,2D
0348A:  DATA AE,2D
0348C:  ADDWF  FE8,W
0348E:  CLRF   FF7
03490:  RLCF   FF7,F
03492:  ADDLW  A7
03494:  MOVWF  FF6
03496:  MOVLW  34
03498:  ADDWFC FF7,F
0349A:  TBLRD*-
0349C:  MOVF   FF5,W
0349E:  MOVWF  FFA
034A0:  TBLRD*
034A2:  MOVF   FF5,W
034A4:  MOVWF  FF9
034A6:  DATA 96,2E
034A8:  DATA 9C,2E
034AA:  DATA A2,2E
034AC:  DATA A8,2E
034AE:  DATA AE,2E
034B0:  DATA B4,2E
034B2:  DATA BA,2E
034B4:  DATA C0,2E
034B6:  DATA C6,2E
034B8:  DATA CC,2E
034BA:  DATA D2,2E
034BC:  DATA D8,2E
034BE:  DATA DE,2E
034C0:  DATA E4,2E
034C2:  DATA EA,2E
034C4:  DATA F0,2E
034C6:  DATA F6,2E
034C8:  DATA FC,2E
034CA:  DATA 02,2F
034CC:  DATA 08,2F
034CE:  ADDWF  FE8,W
034D0:  CLRF   FF7
034D2:  RLCF   FF7,F
034D4:  ADDLW  E9
034D6:  MOVWF  FF6
034D8:  MOVLW  34
034DA:  ADDWFC FF7,F
034DC:  TBLRD*-
034DE:  MOVF   FF5,W
034E0:  MOVWF  FFA
034E2:  TBLRD*
034E4:  MOVF   FF5,W
034E6:  MOVWF  FF9
034E8:  DATA 28,30
034EA:  DATA 2E,30
034EC:  DATA 34,30
034EE:  DATA 3A,30
034F0:  DATA 40,30
034F2:  DATA 46,30
034F4:  DATA 4C,30
034F6:  DATA 52,30
034F8:  DATA 58,30
034FA:  DATA 5E,30
034FC:  DATA 64,30
034FE:  DATA 6A,30
03500:  DATA 70,30
03502:  DATA 76,30
03504:  DATA 7C,30
03506:  DATA 82,30
03508:  DATA 88,30
0350A:  DATA 8E,30
0350C:  DATA 94,30
0350E:  DATA 9A,30
03510:  ADDWF  FE8,W
03512:  CLRF   FF7
03514:  RLCF   FF7,F
03516:  ADDLW  2B
03518:  MOVWF  FF6
0351A:  MOVLW  35
0351C:  ADDWFC FF7,F
0351E:  TBLRD*-
03520:  MOVF   FF5,W
03522:  MOVWF  FFA
03524:  TBLRD*
03526:  MOVF   FF5,W
03528:  MOVWF  FF9
0352A:  DATA 80,31
0352C:  DATA 86,31
0352E:  DATA 8C,31
03530:  DATA 92,31
03532:  DATA 98,31
03534:  DATA 9E,31
03536:  DATA A4,31
03538:  DATA AA,31
0353A:  DATA B0,31
0353C:  DATA B6,31
0353E:  DATA BC,31
03540:  DATA C2,31
03542:  DATA C8,31
03544:  DATA CE,31
03546:  DATA D4,31
03548:  DATA DA,31
0354A:  DATA E0,31
0354C:  DATA E6,31
0354E:  DATA EC,31
03550:  DATA F2,31
*
06824:  MOVF   FEF,F
06826:  BZ    6848
06828:  MOVFF  FEA,DCC
0682C:  MOVFF  FE9,DCB
06830:  MOVFF  FEF,DCD
06834:  CALL   24E0
06838:  MOVFF  DCC,FEA
0683C:  MOVFF  DCB,FE9
06840:  INCF   FE9,F
06842:  BTFSC  FD8.2
06844:  INCF   FEA,F
06846:  BRA    6824
06848:  RETURN 0
*
0C5AC:  ADDWF  FE8,W
0C5AE:  CLRF   FF7
0C5B0:  RLCF   FF7,F
0C5B2:  ADDLW  C7
0C5B4:  MOVWF  FF6
0C5B6:  MOVLW  C5
0C5B8:  ADDWFC FF7,F
0C5BA:  TBLRD*-
0C5BC:  MOVF   FF5,W
0C5BE:  MOVWF  FFA
0C5C0:  TBLRD*
0C5C2:  MOVF   FF5,W
0C5C4:  MOVWF  FF9
0C5C6:  DATA 8A,C2
0C5C8:  DATA 90,C2
0C5CA:  DATA 96,C2
0C5CC:  DATA 9C,C2
0C5CE:  DATA A2,C2
0C5D0:  DATA A8,C2
0C5D2:  DATA AE,C2
0C5D4:  DATA B4,C2
0C5D6:  DATA BA,C2
0C5D8:  DATA C0,C2
0C5DA:  DATA C6,C2
0C5DC:  DATA CC,C2
0C5DE:  DATA D2,C2
0C5E0:  DATA D8,C2
0C5E2:  DATA DE,C2
0C5E4:  DATA E4,C2
0C5E6:  DATA EA,C2
0C5E8:  DATA F0,C2
0C5EA:  DATA F6,C2
0C5EC:  DATA FC,C2
0C5EE:  ADDWF  FE8,W
0C5F0:  CLRF   FF7
0C5F2:  RLCF   FF7,F
0C5F4:  ADDLW  09
0C5F6:  MOVWF  FF6
0C5F8:  MOVLW  C6
0C5FA:  ADDWFC FF7,F
0C5FC:  TBLRD*-
0C5FE:  MOVF   FF5,W
0C600:  MOVWF  FFA
0C602:  TBLRD*
0C604:  MOVF   FF5,W
0C606:  MOVWF  FF9
0C608:  DATA 1A,C3
0C60A:  DATA 20,C3
0C60C:  DATA 26,C3
0C60E:  DATA 2C,C3
0C610:  DATA 32,C3
0C612:  DATA 38,C3
0C614:  DATA 3E,C3
0C616:  DATA 44,C3
0C618:  DATA 4A,C3
0C61A:  DATA 50,C3
0C61C:  DATA 56,C3
0C61E:  DATA 5C,C3
0C620:  DATA 62,C3
0C622:  DATA 68,C3
0C624:  DATA 6E,C3
0C626:  DATA 74,C3
0C628:  DATA 7A,C3
0C62A:  DATA 80,C3
0C62C:  DATA 86,C3
0C62E:  DATA 8C,C3
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#device icd = true
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
00A28:  MOVLW  0D
00A2A:  MOVWF  FEA
00A2C:  MOVLW  CC
00A2E:  MOVWF  FE9
00A30:  MOVF   FEF,W
00A32:  BZ    0A56
00A34:  MOVLW  05
00A36:  MOVWF  01
00A38:  MOVLW  BF
00A3A:  MOVWF  00
00A3C:  CLRWDT
00A3E:  DECFSZ 00,F
00A40:  BRA    0A3C
00A42:  DECFSZ 01,F
00A44:  BRA    0A38
00A46:  MOVLW  2E
00A48:  MOVWF  00
00A4A:  DECFSZ 00,F
00A4C:  BRA    0A4A
00A4E:  NOP   
00A50:  CLRWDT
00A52:  DECFSZ FEF,F
00A54:  BRA    0A34
00A56:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
00A8A:  BCF    F92.5
00A8C:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
00A8E:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
00A90:  MOVLB  D
00A92:  CLRF   xCD
00A94:  MOVLW  0A
00A96:  MOVWF  xCE
00A98:  MOVLW  AA
00A9A:  MOVWF  xCF
00A9C:  MOVLB  0
00A9E:  RCALL  0A58
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
00AA0:  MOVLW  02
00AA2:  MOVLB  D
00AA4:  MOVWF  xCD
00AA6:  MOVLW  0A
00AA8:  MOVWF  xCE
00AAA:  MOVLW  AA
00AAC:  MOVWF  xCF
00AAE:  MOVLB  0
00AB0:  RCALL  0A58
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
00AB2:  MOVLW  04
00AB4:  MOVLB  D
00AB6:  MOVWF  xCD
00AB8:  MOVLW  0A
00ABA:  MOVWF  xCE
00ABC:  MOVLW  AA
00ABE:  MOVWF  xCF
00AC0:  MOVLB  0
00AC2:  RCALL  0A58
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
00AC4:  MOVLW  06
00AC6:  MOVLB  D
00AC8:  MOVWF  xCD
00ACA:  MOVLW  0A
00ACC:  MOVWF  xCE
00ACE:  MOVLW  AA
00AD0:  MOVWF  xCF
00AD2:  MOVLB  0
00AD4:  RCALL  0A58
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
00AD6:  MOVLW  08
00AD8:  MOVLB  D
00ADA:  MOVWF  xCD
00ADC:  MOVLW  0A
00ADE:  MOVWF  xCE
00AE0:  MOVLW  AA
00AE2:  MOVWF  xCF
00AE4:  MOVLB  0
00AE6:  RCALL  0A58
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
00AE8:  MOVLW  0A
00AEA:  MOVLB  D
00AEC:  MOVWF  xCD
00AEE:  MOVWF  xCE
00AF0:  MOVLW  AA
00AF2:  MOVWF  xCF
00AF4:  MOVLB  0
00AF6:  RCALL  0A58
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
00AF8:  MOVLW  0C
00AFA:  MOVLB  D
00AFC:  MOVWF  xCD
00AFE:  MOVLW  0A
00B00:  MOVWF  xCE
00B02:  MOVLW  AA
00B04:  MOVWF  xCF
00B06:  MOVLB  0
00B08:  RCALL  0A58
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
00B0A:  MOVLW  0E
00B0C:  MOVLB  D
00B0E:  MOVWF  xCD
00B10:  MOVLW  0A
00B12:  MOVWF  xCE
00B14:  MOVLW  AA
00B16:  MOVWF  xCF
00B18:  MOVLB  0
00B1A:  RCALL  0A58
....................    #endif
00B1C:  GOTO   BB92 (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
00A58:  BCF    F92.5
00A5A:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
00A5C:  MOVLB  D
00A5E:  MOVF   xCD,W
00A60:  IORLW  40
00A62:  MOVWF  xD0
00A64:  MOVF   FC9,W
00A66:  MOVFF  DD0,FC9
00A6A:  RRCF   FC7,W
00A6C:  BNC   0A6A
....................    #endif
....................    
....................    spi_write(reg);
00A6E:  MOVF   FC9,W
00A70:  MOVFF  DCE,FC9
00A74:  RRCF   FC7,W
00A76:  BNC   0A74
....................    spi_write(data);
00A78:  MOVF   FC9,W
00A7A:  MOVFF  DCF,FC9
00A7E:  RRCF   FC7,W
00A80:  BNC   0A7E
....................    
....................    output_high(IO_CS_PIN);
00A82:  BCF    F92.5
00A84:  BSF    F89.5
00A86:  MOVLB  0
00A88:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
029A0:  BCF    F92.5
029A2:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
029A4:  MOVLB  D
029A6:  MOVF   xCF,W
029A8:  IORLW  41
029AA:  MOVWF  xD2
029AC:  MOVF   FC9,W
029AE:  MOVFF  DD2,FC9
029B2:  RRCF   FC7,W
029B4:  BNC   29B2
....................    #endif
....................    
....................    spi_write(reg);
029B6:  MOVF   FC9,W
029B8:  MOVFF  DD0,FC9
029BC:  RRCF   FC7,W
029BE:  BNC   29BC
....................    retVal = spi_read(0);
029C0:  MOVF   FC9,W
029C2:  CLRF   FC9
029C4:  RRCF   FC7,W
029C6:  BNC   29C4
029C8:  MOVFF  FC9,DD1
....................    
....................    output_high(IO_CS_PIN);
029CC:  BCF    F92.5
029CE:  BSF    F89.5
....................    
....................    return retVal;
029D0:  MOVFF  DD1,01
029D4:  MOVLB  0
029D6:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
0243C:  MOVFF  DCB,DCD
02440:  MOVLW  0A
02442:  MOVLB  D
02444:  MOVWF  xCE
02446:  MOVFF  DCC,DCF
0244A:  MOVLB  0
0244C:  CALL   0A58
....................    #endif
02450:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
02452:  MOVFF  DCB,DCD
02456:  MOVLW  1A
02458:  MOVLB  D
0245A:  MOVWF  xCE
0245C:  MOVFF  DCC,DCF
02460:  MOVLB  0
02462:  CALL   0A58
....................    #endif
02466:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
029D8:  MOVFF  DCD,DCF
029DC:  MOVLW  09
029DE:  MOVLB  D
029E0:  MOVWF  xD0
029E2:  MOVLB  0
029E4:  RCALL  29A0
029E6:  MOVFF  01,DCE
....................    #endif
....................    
....................    return retVal;
029EA:  MOVLB  D
029EC:  MOVFF  DCE,01
029F0:  MOVLB  0
029F2:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
029F4:  MOVFF  DCD,DCF
029F8:  MOVLW  19
029FA:  MOVLB  D
029FC:  MOVWF  xD0
029FE:  MOVLB  0
02A00:  RCALL  29A0
02A02:  MOVFF  01,DCE
....................    #endif
....................    
....................    return retVal;
02A06:  MOVLB  D
02A08:  MOVFF  DCE,01
02A0C:  MOVLB  0
02A0E:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
00B20:  MOVFF  DC3,DCD
00B24:  MOVLB  D
00B26:  CLRF   xCE
00B28:  MOVFF  DC4,DCF
00B2C:  MOVLB  0
00B2E:  RCALL  0A58
....................    #endif
00B30:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
00B32:  MOVFF  DC3,DCD
00B36:  MOVLW  10
00B38:  MOVLB  D
00B3A:  MOVWF  xCE
00B3C:  MOVFF  DC4,DCF
00B40:  MOVLB  0
00B42:  RCALL  0A58
....................    #endif
00B44:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define OnRelay   1
.................... #define OffRelay   0
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
0259C:  BTFSS  F9E.4
0259E:  BRA    259C
025A0:  MOVWF  FAD
025A2:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
024E0:  BCF    F93.0
024E2:  BCF    F8A.0
024E4:  MOVLW  08
024E6:  MOVWF  01
024E8:  BRA    24EA
024EA:  NOP   
024EC:  BSF    01.7
024EE:  BRA    2510
024F0:  BCF    01.7
024F2:  MOVLB  D
024F4:  RRCF   xCD,F
024F6:  MOVLB  0
024F8:  BTFSC  FD8.0
024FA:  BSF    F8A.0
024FC:  BTFSS  FD8.0
024FE:  BCF    F8A.0
02500:  BSF    01.6
02502:  BRA    2510
02504:  BCF    01.6
02506:  DECFSZ 01,F
02508:  BRA    24F2
0250A:  BRA    250C
0250C:  NOP   
0250E:  BSF    F8A.0
02510:  MOVLW  84
02512:  MOVWF  FE9
02514:  DECFSZ FE9,F
02516:  BRA    2514
02518:  BRA    251A
0251A:  NOP   
0251C:  BTFSC  01.7
0251E:  BRA    24F0
02520:  BTFSC  01.6
02522:  BRA    2504
02524:  RETURN 0
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... void initialIC(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... int8 Output595[4];
.................... 
.................... int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Input9_16;
.................... int8 Input17_24;
.................... int8 Input25_32;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... int8 Green1_8 ;
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... 
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... int8 MasterSlaveSync;
.................... 
.................... int1 StartRead = 0;
.................... volatile int8 StartReadCount;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15,ubyte_lo_sq = 0x16,crc_hi_sq = 0x17, second_numofdata = 0x18,byte_count_sq = 0x19,data_sq = 0x20;      //serial sequnce
.................... 
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[512];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[1024];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... 
.................... int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;    //use for calculate RxD timeout
.................... int16 index = 0x00; //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... unsigned char SMS_Massage9[32];
.................... unsigned char SMS_Massage10[32];
.................... unsigned char SMS_Massage11[32];
.................... unsigned char SMS_Massage12[32];
.................... unsigned char SMS_Massage13[32];
.................... unsigned char SMS_Massage14[32];
.................... unsigned char SMS_Massage15[32];
.................... unsigned char SMS_Massage16[32];
.................... unsigned char SMS_Massage17[32];
.................... unsigned char SMS_Massage18[32];
.................... unsigned char SMS_Massage19[32];
.................... unsigned char SMS_Massage20[32];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... }; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Inputt
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    int1 B11,B12,B13,B14,B15,B16,B17,B18,B19,B20;
....................    int1 B21,B22,B23,B24,B25,B26,B27,B28,B29,B30;
....................    //int1 B31,B32,B33,B34,B35,B36,B37,B38,B39,B40;
....................    //int1 B41,B42,B43,B44,B45,B46,B47,B48,B49,B50;
....................    //int1 B51,B52,B53,B54,B55,B56,B57,B58,B59,B60;
....................    //int1 B61,B62,B63,B64;
.................... };
.................... 
....................    //Output   (LED Lit = "0")
....................    //Inputt Type NO/NC (NO = "1" , NC = "0")
....................    //Fault Type Manual/Auto (Manual = "1" , Auto = "0")
....................    //Output Type Buz/Bell (Buzzer = "1" , Bell = "0")
....................    //Output Both (Normal = "1" , Both = "0")
....................    //Acknowledge flag (Acked = "1" , non Ack = "0")
.................... 
.................... struct Bit64 Inputt;//,Output,InputType;//,FaultType,OutputType,OutputBoth;
.................... struct Bit64 Output,InputType;
.................... struct Bit64 FaultType,OutputType,OutputBoth;
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 LED_Colour,AckSend,RED_Colour,GREEN_Colour;
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[21];
.................... int1 FaultNow[21];
.................... int16 ReleaseTime[21];
.................... int16 FaultDelayTime[21];
.................... 
.................... int1 FaultNCNO[21];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //volatile int16 ReadIn_Count =0;
.................... //int1 ReadIn_flag = 0;
.................... 
.................... int8 DelayTime1 = 0;
.................... int8 DelayTime2 = 0;
.................... int8 DelayTime3 = 0;
.................... int8 DelayTime4 = 0;
.................... int8 DelayTime5 = 0;
.................... int8 DelayTime6 = 0;
.................... int8 DelayTime7 = 0;
.................... int8 DelayTime8 = 0;
.................... int8 DelayTime9 = 0;
.................... int8 DelayTime10 = 0;
.................... int8 DelayTime11 = 0;
.................... int8 DelayTime12 = 0;
.................... int8 DelayTime13 = 0;
.................... int8 DelayTime14 = 0;
.................... int8 DelayTime15 = 0;
.................... int8 DelayTime16 = 0;
.................... int8 DelayTime17 = 0;
.................... int8 DelayTime18 = 0;
.................... int8 DelayTime19 = 0;
.................... int8 DelayTime20 = 0;
.................... 
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
025A4:  CLRF   1E
....................    Input9_16_Send = 0x00;
025A6:  CLRF   1F
....................    Input17_24_Send = 0x00;
025A8:  CLRF   20
....................    
....................    
....................    Ack1_8_Send = 0x00;
025AA:  CLRF   26
....................    Ack9_16_Send = 0x00;
025AC:  CLRF   27
....................    Ack17_24_Send = 0x00;
025AE:  CLRF   28
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
025B0:  MOVLB  D
025B2:  BTFSC  x30.0
025B4:  BRA    25BE
025B6:  BTFSC  x14.0
025B8:  BRA    25BE
....................       AckSend.B1 = 1;
025BA:  BSF    x3C.0
025BC:  BRA    25C0
....................    else
....................       AckSend.B1 = 0;
025BE:  BCF    x3C.0
....................       
....................    if((In.B2 == 0) && (Output.B2 ==0))
025C0:  BTFSC  x30.1
025C2:  BRA    25CC
025C4:  BTFSC  x14.1
025C6:  BRA    25CC
....................       AckSend.B2 = 1;
025C8:  BSF    x3C.1
025CA:  BRA    25CE
....................    else
....................       AckSend.B2 = 0;
025CC:  BCF    x3C.1
....................       
....................    if((In.B3 == 0) && (Output.B3 ==0))
025CE:  BTFSC  x30.2
025D0:  BRA    25DA
025D2:  BTFSC  x14.2
025D4:  BRA    25DA
....................       AckSend.B3 = 1;
025D6:  BSF    x3C.2
025D8:  BRA    25DC
....................    else
....................       AckSend.B3 = 0;
025DA:  BCF    x3C.2
....................       
....................    if((In.B4 == 0) && (Output.B4 ==0))
025DC:  BTFSC  x30.3
025DE:  BRA    25E8
025E0:  BTFSC  x14.3
025E2:  BRA    25E8
....................       AckSend.B4 = 1;
025E4:  BSF    x3C.3
025E6:  BRA    25EA
....................    else
....................       AckSend.B4 = 0;
025E8:  BCF    x3C.3
....................       
....................    if((In.B5 == 0) && (Output.B5 ==0))
025EA:  BTFSC  x30.4
025EC:  BRA    25F6
025EE:  BTFSC  x14.4
025F0:  BRA    25F6
....................       AckSend.B5 = 1;
025F2:  BSF    x3C.4
025F4:  BRA    25F8
....................    else
....................       AckSend.B5 = 0;
025F6:  BCF    x3C.4
....................       
....................    if((In.B6 == 0) && (Output.B6 ==0))
025F8:  BTFSC  x30.5
025FA:  BRA    2604
025FC:  BTFSC  x14.5
025FE:  BRA    2604
....................       AckSend.B6 = 1;
02600:  BSF    x3C.5
02602:  BRA    2606
....................    else
....................       AckSend.B6 = 0;
02604:  BCF    x3C.5
....................       
....................    if((In.B7 == 0) && (Output.B7 ==0))
02606:  BTFSC  x30.6
02608:  BRA    2612
0260A:  BTFSC  x14.6
0260C:  BRA    2612
....................       AckSend.B7 = 1;
0260E:  BSF    x3C.6
02610:  BRA    2614
....................    else
....................       AckSend.B7 = 0;
02612:  BCF    x3C.6
....................       
....................    if((In.B8 == 0) && (Output.B8 ==0))
02614:  BTFSC  x30.7
02616:  BRA    2620
02618:  BTFSC  x14.7
0261A:  BRA    2620
....................       AckSend.B8 = 1;
0261C:  BSF    x3C.7
0261E:  BRA    2622
....................    else
....................       AckSend.B8 = 0;
02620:  BCF    x3C.7
....................       
....................    if((In.B9 == 0) && (Output.B9 ==0))
02622:  BTFSC  x31.0
02624:  BRA    262E
02626:  BTFSC  x15.0
02628:  BRA    262E
....................       AckSend.B9 = 1;
0262A:  BSF    x3D.0
0262C:  BRA    2630
....................    else
....................       AckSend.B9 = 0;
0262E:  BCF    x3D.0
....................       
....................    if((In.B10 == 0) && (Output.B10 ==0))
02630:  BTFSC  x31.1
02632:  BRA    263C
02634:  BTFSC  x15.1
02636:  BRA    263C
....................       AckSend.B10 = 1;
02638:  BSF    x3D.1
0263A:  BRA    263E
....................    else
....................       AckSend.B10 = 0;
0263C:  BCF    x3D.1
....................       
....................    if((In.B11 == 0) && (Output.B11 ==0))
0263E:  BTFSC  x31.2
02640:  BRA    264A
02642:  BTFSC  x15.2
02644:  BRA    264A
....................       AckSend.B11 = 1;
02646:  BSF    x3D.2
02648:  BRA    264C
....................    else
....................       AckSend.B11 = 0;
0264A:  BCF    x3D.2
....................       
....................    if((In.B12 == 0) && (Output.B12 ==0))
0264C:  BTFSC  x31.3
0264E:  BRA    2658
02650:  BTFSC  x15.3
02652:  BRA    2658
....................       AckSend.B12 = 1;
02654:  BSF    x3D.3
02656:  BRA    265A
....................    else
....................       AckSend.B12 = 0;
02658:  BCF    x3D.3
....................       
....................    if((In.B13 == 0) && (Output.B13 ==0))
0265A:  BTFSC  x31.4
0265C:  BRA    2666
0265E:  BTFSC  x15.4
02660:  BRA    2666
....................       AckSend.B13 = 1;
02662:  BSF    x3D.4
02664:  BRA    2668
....................    else
....................       AckSend.B13 = 0;
02666:  BCF    x3D.4
....................       
....................    if((In.B14 == 0) && (Output.B14 ==0))
02668:  BTFSC  x31.5
0266A:  BRA    2674
0266C:  BTFSC  x15.5
0266E:  BRA    2674
....................       AckSend.B14 = 1;
02670:  BSF    x3D.5
02672:  BRA    2676
....................    else
....................       AckSend.B14 = 0;
02674:  BCF    x3D.5
....................       
....................    if((In.B15 == 0) && (Output.B15 ==0))
02676:  BTFSC  x31.6
02678:  BRA    2682
0267A:  BTFSC  x15.6
0267C:  BRA    2682
....................       AckSend.B15 = 1;
0267E:  BSF    x3D.6
02680:  BRA    2684
....................    else
....................       AckSend.B15 = 0;
02682:  BCF    x3D.6
....................       
....................    if((In.B16 == 0) && (Output.B16 ==0))
02684:  BTFSC  x31.7
02686:  BRA    2690
02688:  BTFSC  x15.7
0268A:  BRA    2690
....................       AckSend.B16 = 1;
0268C:  BSF    x3D.7
0268E:  BRA    2692
....................    else
....................       AckSend.B16 = 0;
02690:  BCF    x3D.7
....................       
....................    if((In.B17 == 0) && (Output.B17 ==0))
02692:  BTFSC  x32.0
02694:  BRA    269E
02696:  BTFSC  x16.0
02698:  BRA    269E
....................       AckSend.B17 = 1;
0269A:  BSF    x3E.0
0269C:  BRA    26A0
....................    else
....................       AckSend.B17 = 0;
0269E:  BCF    x3E.0
....................       
....................    if((In.B18 == 0) && (Output.B18 ==0))
026A0:  BTFSC  x32.1
026A2:  BRA    26AC
026A4:  BTFSC  x16.1
026A6:  BRA    26AC
....................       AckSend.B18 = 1;
026A8:  BSF    x3E.1
026AA:  BRA    26AE
....................    else
....................       AckSend.B18 = 0;
026AC:  BCF    x3E.1
....................       
....................    if((In.B19 == 0) && (Output.B19 ==0))
026AE:  BTFSC  x32.2
026B0:  BRA    26BA
026B2:  BTFSC  x16.2
026B4:  BRA    26BA
....................       AckSend.B19 = 1;
026B6:  BSF    x3E.2
026B8:  BRA    26BC
....................    else
....................       AckSend.B19 = 0;
026BA:  BCF    x3E.2
....................       
....................    if((In.B20 == 0) && (Output.B20 ==0))
026BC:  BTFSC  x32.3
026BE:  BRA    26C8
026C0:  BTFSC  x16.3
026C2:  BRA    26C8
....................       AckSend.B20 = 1;
026C4:  BSF    x3E.3
026C6:  BRA    26CA
....................    else
....................       AckSend.B20 = 0;
026C8:  BCF    x3E.3
....................    
....................    
....................    
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
026CA:  MOVLW  00
026CC:  BTFSC  x3C.7
026CE:  MOVLW  01
026D0:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
026D2:  BCF    FD8.0
026D4:  RLCF   26,W
026D6:  MOVWF  xCD
026D8:  MOVLW  00
026DA:  BTFSC  x3C.6
026DC:  MOVLW  01
026DE:  IORWF  xCD,W
026E0:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
026E2:  BCF    FD8.0
026E4:  RLCF   26,W
026E6:  MOVWF  xCD
026E8:  MOVLW  00
026EA:  BTFSC  x3C.5
026EC:  MOVLW  01
026EE:  IORWF  xCD,W
026F0:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
026F2:  BCF    FD8.0
026F4:  RLCF   26,W
026F6:  MOVWF  xCD
026F8:  MOVLW  00
026FA:  BTFSC  x3C.4
026FC:  MOVLW  01
026FE:  IORWF  xCD,W
02700:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
02702:  BCF    FD8.0
02704:  RLCF   26,W
02706:  MOVWF  xCD
02708:  MOVLW  00
0270A:  BTFSC  x3C.3
0270C:  MOVLW  01
0270E:  IORWF  xCD,W
02710:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
02712:  BCF    FD8.0
02714:  RLCF   26,W
02716:  MOVWF  xCD
02718:  MOVLW  00
0271A:  BTFSC  x3C.2
0271C:  MOVLW  01
0271E:  IORWF  xCD,W
02720:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
02722:  BCF    FD8.0
02724:  RLCF   26,W
02726:  MOVWF  xCD
02728:  MOVLW  00
0272A:  BTFSC  x3C.1
0272C:  MOVLW  01
0272E:  IORWF  xCD,W
02730:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
02732:  BCF    FD8.0
02734:  RLCF   26,W
02736:  MOVWF  xCD
02738:  MOVLW  00
0273A:  BTFSC  x3C.0
0273C:  MOVLW  01
0273E:  IORWF  xCD,W
02740:  MOVWF  26
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B16;
02742:  MOVLW  00
02744:  BTFSC  x3D.7
02746:  MOVLW  01
02748:  IORWF  27,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B15;
0274A:  BCF    FD8.0
0274C:  RLCF   27,W
0274E:  MOVWF  xCD
02750:  MOVLW  00
02752:  BTFSC  x3D.6
02754:  MOVLW  01
02756:  IORWF  xCD,W
02758:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B14;
0275A:  BCF    FD8.0
0275C:  RLCF   27,W
0275E:  MOVWF  xCD
02760:  MOVLW  00
02762:  BTFSC  x3D.5
02764:  MOVLW  01
02766:  IORWF  xCD,W
02768:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B13;
0276A:  BCF    FD8.0
0276C:  RLCF   27,W
0276E:  MOVWF  xCD
02770:  MOVLW  00
02772:  BTFSC  x3D.4
02774:  MOVLW  01
02776:  IORWF  xCD,W
02778:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B12;
0277A:  BCF    FD8.0
0277C:  RLCF   27,W
0277E:  MOVWF  xCD
02780:  MOVLW  00
02782:  BTFSC  x3D.3
02784:  MOVLW  01
02786:  IORWF  xCD,W
02788:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B11;
0278A:  BCF    FD8.0
0278C:  RLCF   27,W
0278E:  MOVWF  xCD
02790:  MOVLW  00
02792:  BTFSC  x3D.2
02794:  MOVLW  01
02796:  IORWF  xCD,W
02798:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B10;
0279A:  BCF    FD8.0
0279C:  RLCF   27,W
0279E:  MOVWF  xCD
027A0:  MOVLW  00
027A2:  BTFSC  x3D.1
027A4:  MOVLW  01
027A6:  IORWF  xCD,W
027A8:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
027AA:  BCF    FD8.0
027AC:  RLCF   27,W
027AE:  MOVWF  xCD
027B0:  MOVLW  00
027B2:  BTFSC  x3D.0
027B4:  MOVLW  01
027B6:  IORWF  xCD,W
027B8:  MOVWF  27
....................    
....................    Ack17_24_Send = Ack17_24_Send | AckSend.B24;
027BA:  MOVLW  00
027BC:  BTFSC  x3E.7
027BE:  MOVLW  01
027C0:  IORWF  28,F
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B23;
027C2:  BCF    FD8.0
027C4:  RLCF   28,W
027C6:  MOVWF  xCD
027C8:  MOVLW  00
027CA:  BTFSC  x3E.6
027CC:  MOVLW  01
027CE:  IORWF  xCD,W
027D0:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B22;
027D2:  BCF    FD8.0
027D4:  RLCF   28,W
027D6:  MOVWF  xCD
027D8:  MOVLW  00
027DA:  BTFSC  x3E.5
027DC:  MOVLW  01
027DE:  IORWF  xCD,W
027E0:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B21;
027E2:  BCF    FD8.0
027E4:  RLCF   28,W
027E6:  MOVWF  xCD
027E8:  MOVLW  00
027EA:  BTFSC  x3E.4
027EC:  MOVLW  01
027EE:  IORWF  xCD,W
027F0:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B20;
027F2:  BCF    FD8.0
027F4:  RLCF   28,W
027F6:  MOVWF  xCD
027F8:  MOVLW  00
027FA:  BTFSC  x3E.3
027FC:  MOVLW  01
027FE:  IORWF  xCD,W
02800:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B19;
02802:  BCF    FD8.0
02804:  RLCF   28,W
02806:  MOVWF  xCD
02808:  MOVLW  00
0280A:  BTFSC  x3E.2
0280C:  MOVLW  01
0280E:  IORWF  xCD,W
02810:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B18;
02812:  BCF    FD8.0
02814:  RLCF   28,W
02816:  MOVWF  xCD
02818:  MOVLW  00
0281A:  BTFSC  x3E.1
0281C:  MOVLW  01
0281E:  IORWF  xCD,W
02820:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B17;
02822:  BCF    FD8.0
02824:  RLCF   28,W
02826:  MOVWF  xCD
02828:  MOVLW  00
0282A:  BTFSC  x3E.0
0282C:  MOVLW  01
0282E:  IORWF  xCD,W
02830:  MOVWF  28
....................    
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
02832:  MOVLW  00
02834:  BTFSC  x30.7
02836:  MOVLW  01
02838:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
0283A:  BCF    FD8.0
0283C:  RLCF   1E,W
0283E:  MOVWF  xCD
02840:  MOVLW  00
02842:  BTFSC  x30.6
02844:  MOVLW  01
02846:  IORWF  xCD,W
02848:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
0284A:  BCF    FD8.0
0284C:  RLCF   1E,W
0284E:  MOVWF  xCD
02850:  MOVLW  00
02852:  BTFSC  x30.5
02854:  MOVLW  01
02856:  IORWF  xCD,W
02858:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
0285A:  BCF    FD8.0
0285C:  RLCF   1E,W
0285E:  MOVWF  xCD
02860:  MOVLW  00
02862:  BTFSC  x30.4
02864:  MOVLW  01
02866:  IORWF  xCD,W
02868:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
0286A:  BCF    FD8.0
0286C:  RLCF   1E,W
0286E:  MOVWF  xCD
02870:  MOVLW  00
02872:  BTFSC  x30.3
02874:  MOVLW  01
02876:  IORWF  xCD,W
02878:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
0287A:  BCF    FD8.0
0287C:  RLCF   1E,W
0287E:  MOVWF  xCD
02880:  MOVLW  00
02882:  BTFSC  x30.2
02884:  MOVLW  01
02886:  IORWF  xCD,W
02888:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
0288A:  BCF    FD8.0
0288C:  RLCF   1E,W
0288E:  MOVWF  xCD
02890:  MOVLW  00
02892:  BTFSC  x30.1
02894:  MOVLW  01
02896:  IORWF  xCD,W
02898:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
0289A:  BCF    FD8.0
0289C:  RLCF   1E,W
0289E:  MOVWF  xCD
028A0:  MOVLW  00
028A2:  BTFSC  x30.0
028A4:  MOVLW  01
028A6:  IORWF  xCD,W
028A8:  MOVWF  1E
....................    
....................    Input9_16_Send = Input9_16_Send | In.B16;
028AA:  MOVLW  00
028AC:  BTFSC  x31.7
028AE:  MOVLW  01
028B0:  IORWF  1F,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B15;
028B2:  BCF    FD8.0
028B4:  RLCF   1F,W
028B6:  MOVWF  xCD
028B8:  MOVLW  00
028BA:  BTFSC  x31.6
028BC:  MOVLW  01
028BE:  IORWF  xCD,W
028C0:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B14;
028C2:  BCF    FD8.0
028C4:  RLCF   1F,W
028C6:  MOVWF  xCD
028C8:  MOVLW  00
028CA:  BTFSC  x31.5
028CC:  MOVLW  01
028CE:  IORWF  xCD,W
028D0:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B13;
028D2:  BCF    FD8.0
028D4:  RLCF   1F,W
028D6:  MOVWF  xCD
028D8:  MOVLW  00
028DA:  BTFSC  x31.4
028DC:  MOVLW  01
028DE:  IORWF  xCD,W
028E0:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B12;
028E2:  BCF    FD8.0
028E4:  RLCF   1F,W
028E6:  MOVWF  xCD
028E8:  MOVLW  00
028EA:  BTFSC  x31.3
028EC:  MOVLW  01
028EE:  IORWF  xCD,W
028F0:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B11;
028F2:  BCF    FD8.0
028F4:  RLCF   1F,W
028F6:  MOVWF  xCD
028F8:  MOVLW  00
028FA:  BTFSC  x31.2
028FC:  MOVLW  01
028FE:  IORWF  xCD,W
02900:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B10;
02902:  BCF    FD8.0
02904:  RLCF   1F,W
02906:  MOVWF  xCD
02908:  MOVLW  00
0290A:  BTFSC  x31.1
0290C:  MOVLW  01
0290E:  IORWF  xCD,W
02910:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
02912:  BCF    FD8.0
02914:  RLCF   1F,W
02916:  MOVWF  xCD
02918:  MOVLW  00
0291A:  BTFSC  x31.0
0291C:  MOVLW  01
0291E:  IORWF  xCD,W
02920:  MOVWF  1F
....................    
....................    Input17_24_Send = Input17_24_Send | In.B24;
02922:  MOVLW  00
02924:  BTFSC  x32.7
02926:  MOVLW  01
02928:  IORWF  20,F
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B23;
0292A:  BCF    FD8.0
0292C:  RLCF   20,W
0292E:  MOVWF  xCD
02930:  MOVLW  00
02932:  BTFSC  x32.6
02934:  MOVLW  01
02936:  IORWF  xCD,W
02938:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B22;
0293A:  BCF    FD8.0
0293C:  RLCF   20,W
0293E:  MOVWF  xCD
02940:  MOVLW  00
02942:  BTFSC  x32.5
02944:  MOVLW  01
02946:  IORWF  xCD,W
02948:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B21;
0294A:  BCF    FD8.0
0294C:  RLCF   20,W
0294E:  MOVWF  xCD
02950:  MOVLW  00
02952:  BTFSC  x32.4
02954:  MOVLW  01
02956:  IORWF  xCD,W
02958:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B20;
0295A:  BCF    FD8.0
0295C:  RLCF   20,W
0295E:  MOVWF  xCD
02960:  MOVLW  00
02962:  BTFSC  x32.3
02964:  MOVLW  01
02966:  IORWF  xCD,W
02968:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B19;
0296A:  BCF    FD8.0
0296C:  RLCF   20,W
0296E:  MOVWF  xCD
02970:  MOVLW  00
02972:  BTFSC  x32.2
02974:  MOVLW  01
02976:  IORWF  xCD,W
02978:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B18;
0297A:  BCF    FD8.0
0297C:  RLCF   20,W
0297E:  MOVWF  xCD
02980:  MOVLW  00
02982:  BTFSC  x32.1
02984:  MOVLW  01
02986:  IORWF  xCD,W
02988:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B17;
0298A:  BCF    FD8.0
0298C:  RLCF   20,W
0298E:  MOVWF  xCD
02990:  MOVLW  00
02992:  BTFSC  x32.0
02994:  MOVLW  01
02996:  IORWF  xCD,W
02998:  MOVWF  20
0299A:  MOVLB  0
0299C:  GOTO   4180 (RETURN)
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void StoreReleaseFault()
*
02A32:  MOVLB  D
02A34:  CLRF   xCD
.................... {
....................    Signed int8 i=0;
....................    for(i=0;i<30;i++)
02A36:  CLRF   xCD
02A38:  BTFSC  xCD.7
02A3A:  BRA    2A42
02A3C:  MOVF   xCD,W
02A3E:  SUBLW  1D
02A40:  BNC   2A88
....................    {
....................       FaultAgo[i] = FaultNow[i];
02A42:  CLRF   03
02A44:  MOVF   xCD,W
02A46:  MOVWF  00
02A48:  BTFSC  FE8.7
02A4A:  DECF   03,F
02A4C:  MOVWF  xCE
02A4E:  MOVFF  03,DCF
02A52:  CLRF   03
02A54:  MOVF   xCD,W
02A56:  MOVWF  00
02A58:  BTFSC  FE8.7
02A5A:  DECF   03,F
02A5C:  MOVWF  xD0
02A5E:  MOVLW  0D
02A60:  MOVWF  xD2
02A62:  MOVLW  4F
02A64:  MOVWF  xD1
02A66:  MOVLB  0
02A68:  RCALL  24AA
02A6A:  MOVFF  DCE,DD0
02A6E:  MOVLB  D
02A70:  CLRF   xD1
02A72:  BTFSC  01.0
02A74:  INCF   xD1,F
02A76:  MOVLW  0D
02A78:  MOVWF  xD3
02A7A:  MOVLW  4C
02A7C:  MOVWF  xD2
02A7E:  MOVLB  0
02A80:  RCALL  2468
02A82:  MOVLB  D
02A84:  INCF   xCD,F
02A86:  BRA    2A38
....................    }
02A88:  MOVLB  0
02A8A:  GOTO   3222 (RETURN)
.................... }
.................... 
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
02546:  MOVLB  6
02548:  SETF   x73
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
0254A:  SETF   x72
.................... 
....................    for(i = 0;i < usDataLen;i++)
0254C:  MOVLB  D
0254E:  CLRF   xD1
02550:  MOVF   xCF,W
02552:  SUBWF  xD1,W
02554:  BC    2598
....................    {
....................       restart_wdt();
02556:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
02558:  MOVF   xD1,W
0255A:  ADDWF  xCD,W
0255C:  MOVWF  FE9
0255E:  MOVLW  00
02560:  ADDWFC xCE,W
02562:  MOVWF  FEA
02564:  MOVF   FEF,W
02566:  MOVLB  6
02568:  XORWF  x73,W
0256A:  MOVLB  D
0256C:  MOVWF  xD0
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
0256E:  CLRF   03
02570:  MOVF   xD0,W
02572:  MOVLB  0
02574:  CALL   00BA
02578:  MOVWF  01
0257A:  MOVLB  6
0257C:  MOVF   x72,W
0257E:  XORWF  01,W
02580:  MOVWF  x73
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
02582:  CLRF   03
02584:  MOVLB  D
02586:  MOVF   xD0,W
02588:  MOVLB  0
0258A:  CALL   01CA
0258E:  MOVFF  FE8,672
02592:  MOVLB  D
02594:  INCF   xD1,F
02596:  BRA    2550
....................    }
02598:  MOVLB  0
0259A:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... /*
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................    
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  // } 
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... */
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002DA:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002DC:  MOVF   x66,W
002DE:  SUBWF  x6F,W
002E0:  BNZ   0308
....................    {
....................      RxD_DataLen = 0x00 ;
002E2:  CLRF   x71
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002E4:  MOVLW  72
002E6:  ADDWF  x71,W
002E8:  MOVWF  FE9
002EA:  MOVLW  02
002EC:  MOVWF  FEA
002EE:  BTFSC  FD8.0
002F0:  INCF   FEA,F
002F2:  MOVFF  2E,FEF
....................      restart_wdt();
002F6:  CLRWDT
....................      RxD_DataLen ++ ;
002F8:  INCF   x71,F
....................      sequence = addr_sq;
002FA:  MOVLW  10
002FC:  MOVWF  x6F
....................      T_timeout = 0x14; //200ms
002FE:  MOVLW  14
00300:  MOVLB  A
00302:  MOVWF  x7D
....................    }
00304:  BRA    057C
00306:  MOVLB  0
....................    else if(sequence == addr_sq)
00308:  MOVF   x6F,W
0030A:  SUBLW  10
0030C:  BNZ   03C6
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
0030E:  MOVLW  72
00310:  ADDWF  x71,W
00312:  MOVWF  FE9
00314:  MOVLW  02
00316:  MOVWF  FEA
00318:  BTFSC  FD8.0
0031A:  INCF   FEA,F
0031C:  MOVFF  2E,FEF
....................       restart_wdt();
00320:  CLRWDT
....................       RxD_DataLen ++ ;
00322:  INCF   x71,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00324:  MOVLW  01
00326:  SUBWF  x71,W
00328:  ADDLW  72
0032A:  MOVWF  FE9
0032C:  MOVLW  02
0032E:  MOVWF  FEA
00330:  BTFSC  FD8.0
00332:  INCF   FEA,F
00334:  MOVF   FEF,W
00336:  SUBLW  16
00338:  BNC   0348
....................        {
....................            sequence = code_sq;
0033A:  MOVFF  67,6F
....................            T_timeout = 0x14; //200ms
0033E:  MOVLW  14
00340:  MOVLB  A
00342:  MOVWF  x7D
....................        }
00344:  BRA    03C2
00346:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
00348:  MOVLW  01
0034A:  SUBWF  x71,W
0034C:  ADDLW  72
0034E:  MOVWF  FE9
00350:  MOVLW  02
00352:  MOVWF  FEA
00354:  BTFSC  FD8.0
00356:  INCF   FEA,F
00358:  MOVF   FEF,W
0035A:  SUBLW  20
0035C:  BNZ   036C
....................        {
....................           sequence = ubyte_lo_sq;
0035E:  MOVFF  6A,6F
....................           T_timeout = 0x14; //200ms
00362:  MOVLW  14
00364:  MOVLB  A
00366:  MOVWF  x7D
....................        }
00368:  BRA    03C2
0036A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
0036C:  MOVLW  01
0036E:  SUBWF  x71,W
00370:  ADDLW  72
00372:  MOVWF  FE9
00374:  MOVLW  02
00376:  MOVWF  FEA
00378:  BTFSC  FD8.0
0037A:  INCF   FEA,F
0037C:  MOVF   FEF,W
0037E:  SUBLW  21
00380:  BNZ   0390
....................        {
....................           sequence = byte_count_sq ;
00382:  MOVFF  6D,6F
....................           T_timeout = 0x14; //200ms
00386:  MOVLW  14
00388:  MOVLB  A
0038A:  MOVWF  x7D
....................        }
0038C:  BRA    03C2
0038E:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
00390:  MOVLW  01
00392:  SUBWF  x71,W
00394:  ADDLW  72
00396:  MOVWF  FE9
00398:  MOVLW  02
0039A:  MOVWF  FEA
0039C:  BTFSC  FD8.0
0039E:  INCF   FEA,F
003A0:  MOVF   FEF,W
003A2:  SUBLW  22
003A4:  BNZ   03B4
....................        {
....................           sequence = second_numofdata ;
003A6:  MOVFF  6C,6F
....................           T_timeout = 0x14; //200ms
003AA:  MOVLW  14
003AC:  MOVLB  A
003AE:  MOVWF  x7D
....................        }
003B0:  BRA    03C2
003B2:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003B4:  CLRF   x71
....................           sequence = end_sq;
003B6:  MOVFF  66,6F
....................           T_timeout = 0x00;
003BA:  MOVLB  A
003BC:  CLRF   x7D
....................           output_bit(P485ctrl,0);
003BE:  BCF    F8A.3
003C0:  BCF    F93.3
....................        }
....................    }
003C2:  BRA    057C
003C4:  MOVLB  0
....................    else if(sequence == second_numofdata)
003C6:  MOVF   x6C,W
003C8:  SUBWF  x6F,W
003CA:  BNZ   03F0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
003CC:  MOVLW  72
003CE:  ADDWF  x71,W
003D0:  MOVWF  FE9
003D2:  MOVLW  02
003D4:  MOVWF  FEA
003D6:  BTFSC  FD8.0
003D8:  INCF   FEA,F
003DA:  MOVFF  2E,FEF
....................       restart_wdt();
003DE:  CLRWDT
....................       RxD_DataLen ++ ;
003E0:  INCF   x71,F
....................       sequence = byte_count_sq;
003E2:  MOVFF  6D,6F
....................       T_timeout = 0x14; //200ms
003E6:  MOVLW  14
003E8:  MOVLB  A
003EA:  MOVWF  x7D
....................    }
003EC:  BRA    057C
003EE:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003F0:  MOVF   x6D,W
003F2:  SUBWF  x6F,W
003F4:  BNZ   044C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003F6:  MOVLW  72
003F8:  ADDWF  x71,W
003FA:  MOVWF  FE9
003FC:  MOVLW  02
003FE:  MOVWF  FEA
00400:  BTFSC  FD8.0
00402:  INCF   FEA,F
00404:  MOVFF  2E,FEF
....................       restart_wdt();
00408:  CLRWDT
....................       RxD_DataLen ++ ;
0040A:  INCF   x71,F
....................       if(RxD_Buff[1] == 0x22)   /////SMS setting/////
0040C:  MOVLB  2
0040E:  MOVF   x73,W
00410:  SUBLW  22
00412:  BNZ   0426
....................       {
....................          index = (RxD_Buff[2] * 0x64) + RxD_Buff[3];
00414:  MOVF   x74,W
00416:  MULLW  64
00418:  MOVF   FF3,W
0041A:  ADDWF  x75,W
0041C:  MOVLB  A
0041E:  MOVWF  x7E
00420:  CLRF   x7F
....................       }
00422:  BRA    0440
00424:  MOVLB  2
....................       else{
....................          index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
00426:  MOVLW  01
00428:  MOVLB  0
0042A:  SUBWF  x71,W
0042C:  ADDLW  72
0042E:  MOVWF  FE9
00430:  MOVLW  02
00432:  MOVWF  FEA
00434:  BTFSC  FD8.0
00436:  INCF   FEA,F
00438:  MOVLB  A
0043A:  CLRF   x7F
0043C:  MOVFF  FEF,A7E
....................       }
....................       T_timeout = 0x14; //200ms
00440:  MOVLW  14
00442:  MOVWF  x7D
....................       sequence = data_sq ;
00444:  MOVFF  6E,6F
....................    }
00448:  BRA    057C
0044A:  MOVLB  0
....................    else if(sequence == data_sq)
0044C:  MOVF   x6E,W
0044E:  SUBWF  x6F,W
00450:  BNZ   0486
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00452:  MOVLW  72
00454:  ADDWF  x71,W
00456:  MOVWF  FE9
00458:  MOVLW  02
0045A:  MOVWF  FEA
0045C:  BTFSC  FD8.0
0045E:  INCF   FEA,F
00460:  MOVFF  2E,FEF
....................       restart_wdt();
00464:  CLRWDT
....................       RxD_DataLen ++ ;
00466:  INCF   x71,F
....................       index -- ;                     //Data Byte Count
00468:  MOVLB  A
0046A:  MOVF   x7E,W
0046C:  BTFSC  FD8.2
0046E:  DECF   x7F,F
00470:  DECF   x7E,F
....................       if(index == 0x00)
00472:  MOVF   x7E,F
00474:  BNZ   047E
00476:  MOVF   x7F,F
00478:  BNZ   047E
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
0047A:  MOVFF  6A,6F
....................       }
....................       T_timeout = 0x14; //200ms
0047E:  MOVLW  14
00480:  MOVWF  x7D
....................    }
00482:  BRA    057C
00484:  MOVLB  0
....................    else if(sequence == code_sq)
00486:  MOVF   x67,W
00488:  SUBWF  x6F,W
0048A:  BNZ   04B0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
0048C:  MOVLW  72
0048E:  ADDWF  x71,W
00490:  MOVWF  FE9
00492:  MOVLW  02
00494:  MOVWF  FEA
00496:  BTFSC  FD8.0
00498:  INCF   FEA,F
0049A:  MOVFF  2E,FEF
....................       restart_wdt();
0049E:  CLRWDT
....................       RxD_DataLen ++ ;
004A0:  INCF   x71,F
....................       sequence = start_addr_hi_sq;
004A2:  MOVFF  68,6F
....................       T_timeout = 0x14; //200ms
004A6:  MOVLW  14
004A8:  MOVLB  A
004AA:  MOVWF  x7D
.................... 
....................    }
004AC:  BRA    057C
004AE:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
004B0:  MOVF   x68,W
004B2:  SUBWF  x6F,W
004B4:  BNZ   04DA
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
004B6:  MOVLW  72
004B8:  ADDWF  x71,W
004BA:  MOVWF  FE9
004BC:  MOVLW  02
004BE:  MOVWF  FEA
004C0:  BTFSC  FD8.0
004C2:  INCF   FEA,F
004C4:  MOVFF  2E,FEF
....................       restart_wdt();
004C8:  CLRWDT
....................       RxD_DataLen ++ ;
004CA:  INCF   x71,F
....................       sequence = start_addr_lo_sq;
004CC:  MOVFF  69,6F
....................       T_timeout = 0x14; //200ms
004D0:  MOVLW  14
004D2:  MOVLB  A
004D4:  MOVWF  x7D
....................    }
004D6:  BRA    057C
004D8:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
004DA:  MOVF   x69,W
004DC:  SUBWF  x6F,W
004DE:  BNZ   0504
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
004E0:  MOVLW  72
004E2:  ADDWF  x71,W
004E4:  MOVWF  FE9
004E6:  MOVLW  02
004E8:  MOVWF  FEA
004EA:  BTFSC  FD8.0
004EC:  INCF   FEA,F
004EE:  MOVFF  2E,FEF
....................       restart_wdt();
004F2:  CLRWDT
....................       RxD_DataLen ++ ;
004F4:  INCF   x71,F
....................       sequence = ubyte_hi_sq;
004F6:  MOVLW  15
004F8:  MOVWF  x6F
....................       T_timeout = 0x14; //200ms
004FA:  MOVLW  14
004FC:  MOVLB  A
004FE:  MOVWF  x7D
....................    }
00500:  BRA    057C
00502:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
00504:  MOVF   x6F,W
00506:  SUBLW  15
00508:  BNZ   052E
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
0050A:  MOVLW  72
0050C:  ADDWF  x71,W
0050E:  MOVWF  FE9
00510:  MOVLW  02
00512:  MOVWF  FEA
00514:  BTFSC  FD8.0
00516:  INCF   FEA,F
00518:  MOVFF  2E,FEF
....................       restart_wdt();
0051C:  CLRWDT
....................       RxD_DataLen ++ ;
0051E:  INCF   x71,F
....................       sequence = ubyte_lo_sq;
00520:  MOVFF  6A,6F
....................       T_timeout = 0x14; //200ms
00524:  MOVLW  14
00526:  MOVLB  A
00528:  MOVWF  x7D
....................    }
0052A:  BRA    057C
0052C:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
0052E:  MOVF   x6A,W
00530:  SUBWF  x6F,W
00532:  BNZ   0558
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
00534:  MOVLW  72
00536:  ADDWF  x71,W
00538:  MOVWF  FE9
0053A:  MOVLW  02
0053C:  MOVWF  FEA
0053E:  BTFSC  FD8.0
00540:  INCF   FEA,F
00542:  MOVFF  2E,FEF
....................       restart_wdt();
00546:  CLRWDT
....................       RxD_DataLen ++ ;
00548:  INCF   x71,F
....................       sequence = crc_hi_sq;
0054A:  MOVFF  6B,6F
....................       T_timeout = 0x14; //200ms
0054E:  MOVLW  14
00550:  MOVLB  A
00552:  MOVWF  x7D
....................    }
00554:  BRA    057C
00556:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
00558:  MOVF   x6B,W
0055A:  SUBWF  x6F,W
0055C:  BNZ   057C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
0055E:  MOVLW  72
00560:  ADDWF  x71,W
00562:  MOVWF  FE9
00564:  MOVLW  02
00566:  MOVWF  FEA
00568:  BTFSC  FD8.0
0056A:  INCF   FEA,F
0056C:  MOVFF  2E,FEF
....................       restart_wdt();
00570:  CLRWDT
....................       sequence = end_sq;
00572:  MOVFF  66,6F
....................       T_timeout = 0x00;
00576:  MOVLB  A
00578:  CLRF   x7D
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
0057A:  BSF    30.6
0057C:  MOVLB  0
....................    }
0057E:  GOTO   058C (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
03904:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
03906:  MOVLW  01
03908:  SUBWF  x71,W
0390A:  MOVLB  D
0390C:  MOVWF  xCC
0390E:  MOVLW  02
03910:  MOVWF  xCE
03912:  MOVLW  72
03914:  MOVWF  xCD
03916:  MOVFF  DCC,DCF
0391A:  MOVLB  0
0391C:  CALL   2546
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
03920:  MOVLW  01
03922:  SUBWF  x71,W
03924:  ADDLW  72
03926:  MOVWF  FE9
03928:  MOVLW  02
0392A:  MOVWF  FEA
0392C:  BTFSC  FD8.0
0392E:  INCF   FEA,F
03930:  MOVF   FEF,W
03932:  MOVLB  6
03934:  SUBWF  x73,W
03936:  BTFSS  FD8.2
03938:  GOTO   6752
0393C:  MOVLW  72
0393E:  MOVLB  0
03940:  ADDWF  x71,W
03942:  MOVWF  FE9
03944:  MOVLW  02
03946:  MOVWF  FEA
03948:  BTFSC  FD8.0
0394A:  INCF   FEA,F
0394C:  MOVF   FEF,W
0394E:  MOVLB  6
03950:  SUBWF  x72,W
03952:  BTFSS  FD8.2
03954:  GOTO   6752
....................    {
....................    
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
03958:  MOVLB  2
0395A:  MOVF   x72,W
0395C:  SUBLW  AA
0395E:  BTFSS  FD8.2
03960:  BRA    3C8C
03962:  MOVF   x73,W
03964:  SUBLW  20
03966:  BTFSS  FD8.2
03968:  BRA    3C8C
....................       {
....................          TxD_Buff[0] = Address ;         //Address
0396A:  MOVFF  70,72
....................          TxD_Buff[1] = 0x20 ;            //function code
0396E:  MOVLW  20
03970:  MOVLB  0
03972:  MOVWF  x73
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
03974:  MOVLW  1C
03976:  MOVWF  x74
....................          TxD_Buff[3] = InputType1_8 ;    //1
03978:  MOVFF  3A,75
....................          TxD_Buff[4] = InputType9_16 ;  //2
0397C:  MOVFF  3B,76
....................          TxD_Buff[5] = InputType17_24 ;//3
03980:  MOVFF  3C,77
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
03984:  MOVFF  3D,78
....................          TxD_Buff[7] = FaultType9_16 ; //5
03988:  MOVFF  3E,79
....................          TxD_Buff[8] = FaultType17_24 ;   //6
0398C:  MOVFF  3F,7A
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
03990:  MOVFF  40,7B
....................          TxD_Buff[10] = OutputType9_16 ;  //8
03994:  MOVFF  41,7C
....................          TxD_Buff[11] = OutputType17_24 ; //9
03998:  MOVFF  42,7D
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
0399C:  MOVFF  43,7E
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
039A0:  MOVFF  44,7F
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
039A4:  MOVFF  45,80
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
039A8:  MOVFF  46,81
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
039AC:  MOVFF  47,82
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
039B0:  MOVFF  48,83
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
039B4:  MOVFF  FF2,DCC
039B8:  BCF    FF2.7
039BA:  CLRF   FAA
039BC:  MOVLW  10
039BE:  MOVWF  FA9
039C0:  BCF    FA6.6
039C2:  BCF    FA6.7
039C4:  BSF    FA6.0
039C6:  MOVF   FA8,W
039C8:  MOVLB  D
039CA:  BTFSC  xCC.7
039CC:  BSF    FF2.7
039CE:  MOVLB  0
039D0:  MOVWF  x84
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
039D2:  MOVFF  FF2,DCC
039D6:  BCF    FF2.7
039D8:  CLRF   FAA
039DA:  MOVLW  11
039DC:  MOVWF  FA9
039DE:  BCF    FA6.6
039E0:  BCF    FA6.7
039E2:  BSF    FA6.0
039E4:  MOVF   FA8,W
039E6:  MOVLB  D
039E8:  BTFSC  xCC.7
039EA:  BSF    FF2.7
039EC:  MOVLB  0
039EE:  MOVWF  x85
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
039F0:  MOVFF  FF2,DCC
039F4:  BCF    FF2.7
039F6:  CLRF   FAA
039F8:  MOVLW  12
039FA:  MOVWF  FA9
039FC:  BCF    FA6.6
039FE:  BCF    FA6.7
03A00:  BSF    FA6.0
03A02:  MOVF   FA8,W
03A04:  MOVLB  D
03A06:  BTFSC  xCC.7
03A08:  BSF    FF2.7
03A0A:  MOVLB  0
03A0C:  MOVWF  x86
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
03A0E:  MOVFF  FF2,DCC
03A12:  BCF    FF2.7
03A14:  CLRF   FAA
03A16:  MOVLW  13
03A18:  MOVWF  FA9
03A1A:  BCF    FA6.6
03A1C:  BCF    FA6.7
03A1E:  BSF    FA6.0
03A20:  MOVF   FA8,W
03A22:  MOVLB  D
03A24:  BTFSC  xCC.7
03A26:  BSF    FF2.7
03A28:  MOVLB  0
03A2A:  MOVWF  x87
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
03A2C:  MOVFF  FF2,DCC
03A30:  BCF    FF2.7
03A32:  CLRF   FAA
03A34:  MOVLW  14
03A36:  MOVWF  FA9
03A38:  BCF    FA6.6
03A3A:  BCF    FA6.7
03A3C:  BSF    FA6.0
03A3E:  MOVF   FA8,W
03A40:  MOVLB  D
03A42:  BTFSC  xCC.7
03A44:  BSF    FF2.7
03A46:  MOVLB  0
03A48:  MOVWF  x88
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
03A4A:  MOVFF  FF2,DCC
03A4E:  BCF    FF2.7
03A50:  CLRF   FAA
03A52:  MOVLW  15
03A54:  MOVWF  FA9
03A56:  BCF    FA6.6
03A58:  BCF    FA6.7
03A5A:  BSF    FA6.0
03A5C:  MOVF   FA8,W
03A5E:  MOVLB  D
03A60:  BTFSC  xCC.7
03A62:  BSF    FF2.7
03A64:  MOVLB  0
03A66:  MOVWF  x89
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
03A68:  MOVFF  FF2,DCC
03A6C:  BCF    FF2.7
03A6E:  CLRF   FAA
03A70:  MOVLW  16
03A72:  MOVWF  FA9
03A74:  BCF    FA6.6
03A76:  BCF    FA6.7
03A78:  BSF    FA6.0
03A7A:  MOVF   FA8,W
03A7C:  MOVLB  D
03A7E:  BTFSC  xCC.7
03A80:  BSF    FF2.7
03A82:  MOVLB  0
03A84:  MOVWF  x8A
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
03A86:  MOVFF  FF2,DCC
03A8A:  BCF    FF2.7
03A8C:  CLRF   FAA
03A8E:  MOVLW  17
03A90:  MOVWF  FA9
03A92:  BCF    FA6.6
03A94:  BCF    FA6.7
03A96:  BSF    FA6.0
03A98:  MOVF   FA8,W
03A9A:  MOVLB  D
03A9C:  BTFSC  xCC.7
03A9E:  BSF    FF2.7
03AA0:  MOVLB  0
03AA2:  MOVWF  x8B
....................        
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
03AA4:  MOVFF  60,8C
....................          TxD_Buff[27] = AutoAckTime ;        //25
03AA8:  MOVFF  61,8D
....................          TxD_Buff[28] = FlashingRate ;       //26
03AAC:  MOVFF  62,8E
....................          TxD_Buff[29] = NoOfPoint ;          //27
03AB0:  MOVFF  63,8F
....................          TxD_Buff[30] = FaultDelayTime[0] ;    //28
03AB4:  MOVFF  D7C,90
....................          TxD_Buff[31] = Address ;            //29
03AB8:  MOVFF  70,91
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
03ABC:  MOVFF  D7E,92
....................          TxD_Buff[33] = FaultDelayTime[2] ;
03AC0:  MOVFF  D80,93
....................          TxD_Buff[34] = FaultDelayTime[3] ;
03AC4:  MOVFF  D82,94
....................          TxD_Buff[35] = FaultDelayTime[4] ;
03AC8:  MOVFF  D84,95
....................          TxD_Buff[36] = FaultDelayTime[5] ;
03ACC:  MOVFF  D86,96
....................          TxD_Buff[37] = FaultDelayTime[6] ;
03AD0:  MOVFF  D88,97
....................          TxD_Buff[38] = FaultDelayTime[7] ;
03AD4:  MOVFF  D8A,98
....................          TxD_Buff[39] = FaultDelayTime[8] ;
03AD8:  MOVFF  D8C,99
....................          TxD_Buff[40] = FaultDelayTime[9] ;
03ADC:  MOVFF  D8E,9A
....................          TxD_Buff[41] = FaultDelayTime[10] ;
03AE0:  MOVFF  D90,9B
....................          TxD_Buff[42] = FaultDelayTime[11] ;
03AE4:  MOVFF  D92,9C
....................          TxD_Buff[43] = FaultDelayTime[12] ;
03AE8:  MOVFF  D94,9D
....................          TxD_Buff[44] = FaultDelayTime[13] ;
03AEC:  MOVFF  D96,9E
....................          TxD_Buff[45] = FaultDelayTime[14] ;
03AF0:  MOVFF  D98,9F
....................          TxD_Buff[46] = FaultDelayTime[15] ;
03AF4:  MOVFF  D9A,A0
....................          TxD_Buff[47] = FaultDelayTime[16] ;
03AF8:  MOVFF  D9C,A1
....................          TxD_Buff[48] = FaultDelayTime[17] ;
03AFC:  MOVFF  D9E,A2
....................          TxD_Buff[49] = FaultDelayTime[18] ;
03B00:  MOVFF  DA0,A3
....................          TxD_Buff[50] = FaultDelayTime[19] ;
03B04:  MOVFF  DA2,A4
....................          TxD_Buff[51] = FaultDelayTime[20] ;
03B08:  MOVFF  DA4,A5
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
03B0C:  MOVLB  D
03B0E:  CLRF   xCE
03B10:  MOVLW  72
03B12:  MOVWF  xCD
03B14:  MOVLW  34
03B16:  MOVWF  xCF
03B18:  MOVLB  0
03B1A:  CALL   2546
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
03B1E:  MOVFF  673,A6
....................          TxD_Buff[53] = CRC_Lo ;
03B22:  MOVFF  672,A7
.................... 
....................          output_bit(P485ctrl,1);
03B26:  BSF    F8A.3
03B28:  BCF    F93.3
....................          delay_ms(10);
03B2A:  MOVLW  0A
03B2C:  MOVLB  D
03B2E:  MOVWF  xCC
03B30:  MOVLB  0
03B32:  CALL   0A28
.................... 
....................          putc(Txd_Buff[0]);
03B36:  MOVF   x72,W
03B38:  CALL   259C
....................          putc(Txd_Buff[1]);
03B3C:  MOVF   x73,W
03B3E:  CALL   259C
....................          putc(Txd_Buff[2]);
03B42:  MOVF   x74,W
03B44:  CALL   259C
....................          putc(Txd_Buff[3]);
03B48:  MOVF   x75,W
03B4A:  CALL   259C
....................          putc(Txd_Buff[4]);
03B4E:  MOVF   x76,W
03B50:  CALL   259C
....................          putc(Txd_Buff[5]);
03B54:  MOVF   x77,W
03B56:  CALL   259C
....................          putc(Txd_Buff[6]);
03B5A:  MOVF   x78,W
03B5C:  CALL   259C
....................          putc(Txd_Buff[7]);
03B60:  MOVF   x79,W
03B62:  CALL   259C
....................          putc(Txd_Buff[8]);
03B66:  MOVF   x7A,W
03B68:  CALL   259C
....................          putc(Txd_Buff[9]);
03B6C:  MOVF   x7B,W
03B6E:  CALL   259C
....................          putc(Txd_Buff[10]);
03B72:  MOVF   x7C,W
03B74:  CALL   259C
....................          putc(Txd_Buff[11]);
03B78:  MOVF   x7D,W
03B7A:  CALL   259C
....................          putc(Txd_Buff[12]);
03B7E:  MOVF   x7E,W
03B80:  CALL   259C
....................          putc(Txd_Buff[13]);
03B84:  MOVF   x7F,W
03B86:  CALL   259C
....................          putc(Txd_Buff[14]);
03B8A:  MOVF   x80,W
03B8C:  CALL   259C
....................          putc(Txd_Buff[15]);
03B90:  MOVF   x81,W
03B92:  CALL   259C
....................          putc(Txd_Buff[16]);
03B96:  MOVF   x82,W
03B98:  CALL   259C
....................          putc(Txd_Buff[17]);
03B9C:  MOVF   x83,W
03B9E:  CALL   259C
....................          putc(Txd_Buff[18]);
03BA2:  MOVF   x84,W
03BA4:  CALL   259C
....................          putc(Txd_Buff[19]);
03BA8:  MOVF   x85,W
03BAA:  CALL   259C
....................          putc(Txd_Buff[20]);
03BAE:  MOVF   x86,W
03BB0:  CALL   259C
....................          putc(Txd_Buff[21]);
03BB4:  MOVF   x87,W
03BB6:  CALL   259C
....................          putc(Txd_Buff[22]);
03BBA:  MOVF   x88,W
03BBC:  CALL   259C
....................          putc(Txd_Buff[23]);
03BC0:  MOVF   x89,W
03BC2:  CALL   259C
....................          putc(Txd_Buff[24]);
03BC6:  MOVF   x8A,W
03BC8:  CALL   259C
....................          putc(Txd_Buff[25]);
03BCC:  MOVF   x8B,W
03BCE:  CALL   259C
....................          putc(Txd_Buff[26]);
03BD2:  MOVF   x8C,W
03BD4:  CALL   259C
....................          putc(Txd_Buff[27]);
03BD8:  MOVF   x8D,W
03BDA:  CALL   259C
....................          putc(Txd_Buff[28]);
03BDE:  MOVF   x8E,W
03BE0:  CALL   259C
....................          putc(Txd_Buff[29]);
03BE4:  MOVF   x8F,W
03BE6:  CALL   259C
....................          putc(Txd_Buff[30]);
03BEA:  MOVF   x90,W
03BEC:  CALL   259C
....................          putc(Txd_Buff[31]);
03BF0:  MOVF   x91,W
03BF2:  CALL   259C
....................          
....................          putc(Txd_Buff[32]);
03BF6:  MOVF   x92,W
03BF8:  CALL   259C
....................          putc(Txd_Buff[33]);
03BFC:  MOVF   x93,W
03BFE:  CALL   259C
....................          putc(Txd_Buff[34]);
03C02:  MOVF   x94,W
03C04:  CALL   259C
....................          putc(Txd_Buff[35]);
03C08:  MOVF   x95,W
03C0A:  CALL   259C
....................          putc(Txd_Buff[36]);
03C0E:  MOVF   x96,W
03C10:  CALL   259C
....................          putc(Txd_Buff[37]);
03C14:  MOVF   x97,W
03C16:  CALL   259C
....................          putc(Txd_Buff[38]);
03C1A:  MOVF   x98,W
03C1C:  CALL   259C
....................          putc(Txd_Buff[39]);
03C20:  MOVF   x99,W
03C22:  CALL   259C
....................          putc(Txd_Buff[40]);
03C26:  MOVF   x9A,W
03C28:  CALL   259C
....................          putc(Txd_Buff[41]);
03C2C:  MOVF   x9B,W
03C2E:  CALL   259C
....................          
....................          putc(Txd_Buff[42]);
03C32:  MOVF   x9C,W
03C34:  CALL   259C
....................          putc(Txd_Buff[43]);
03C38:  MOVF   x9D,W
03C3A:  CALL   259C
....................          putc(Txd_Buff[44]);
03C3E:  MOVF   x9E,W
03C40:  CALL   259C
....................          putc(Txd_Buff[45]);
03C44:  MOVF   x9F,W
03C46:  CALL   259C
....................          putc(Txd_Buff[46]);
03C4A:  MOVF   xA0,W
03C4C:  CALL   259C
....................          putc(Txd_Buff[47]);
03C50:  MOVF   xA1,W
03C52:  CALL   259C
....................          putc(Txd_Buff[48]);
03C56:  MOVF   xA2,W
03C58:  CALL   259C
....................          putc(Txd_Buff[49]);
03C5C:  MOVF   xA3,W
03C5E:  CALL   259C
....................          putc(Txd_Buff[50]);
03C62:  MOVF   xA4,W
03C64:  CALL   259C
....................          putc(Txd_Buff[51]);
03C68:  MOVF   xA5,W
03C6A:  CALL   259C
....................          
....................          putc(Txd_Buff[52]);
03C6E:  MOVF   xA6,W
03C70:  CALL   259C
....................          putc(Txd_Buff[53]);
03C74:  MOVF   xA7,W
03C76:  CALL   259C
....................        
....................          delay_ms(3);
03C7A:  MOVLW  03
03C7C:  MOVLB  D
03C7E:  MOVWF  xCC
03C80:  MOVLB  0
03C82:  CALL   0A28
....................          output_bit(P485ctrl,0);
03C86:  BCF    F8A.3
03C88:  BCF    F93.3
03C8A:  MOVLB  2
....................          
....................       }
....................      
....................    ///////////////////////////////////////////////////////////////
....................    if(RxD_Buff[0] == Address)
03C8C:  MOVLB  0
03C8E:  MOVF   x70,W
03C90:  MOVLB  2
03C92:  SUBWF  x72,W
03C94:  BTFSS  FD8.2
03C96:  GOTO   6748
....................    {
....................          
....................       if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
03C9A:  DECFSZ x73,W
03C9C:  BRA    4172
....................          {
....................             //Do Read Coil
....................             Start_Address = RxD_Buff[2] ;
03C9E:  MOVLB  6
03CA0:  CLRF   x77
03CA2:  MOVFF  274,676
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
03CA6:  MOVFF  676,677
03CAA:  MOVLB  D
03CAC:  CLRF   xCC
03CAE:  MOVF   xCC,W
03CB0:  MOVLB  2
03CB2:  IORWF  x75,W
03CB4:  MOVLB  6
03CB6:  MOVWF  x76
03CB8:  MOVLB  6
....................             No_PointCount = RxD_Buff[4] ;
03CBA:  CLRF   x79
03CBC:  MOVFF  276,678
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;      //No. of Point 16 bit
03CC0:  MOVFF  678,679
03CC4:  MOVLB  D
03CC6:  CLRF   xCC
03CC8:  MOVF   xCC,W
03CCA:  MOVLB  2
03CCC:  IORWF  x77,W
03CCE:  MOVLB  6
03CD0:  MOVWF  x78
03CD2:  MOVLB  6
.................... 
....................             if(Start_Address < 0x10 && (Start_Address + No_PointCount) <= 0x14)  //Valid point 0-20
03CD4:  MOVF   x77,F
03CD6:  BTFSS  FD8.2
03CD8:  BRA    4100
03CDA:  MOVF   x76,W
03CDC:  SUBLW  0F
03CDE:  BTFSS  FD8.0
03CE0:  BRA    4100
03CE2:  MOVF   x78,W
03CE4:  ADDWF  x76,W
03CE6:  MOVLB  D
03CE8:  MOVWF  xCC
03CEA:  MOVLB  6
03CEC:  MOVF   x79,W
03CEE:  ADDWFC x77,W
03CF0:  MOVLB  D
03CF2:  MOVWF  xCD
03CF4:  MOVF   xCD,F
03CF6:  BTFSC  FD8.2
03CF8:  BRA    3CFE
03CFA:  MOVLB  6
03CFC:  BRA    4100
03CFE:  MOVF   xCC,W
03D00:  SUBLW  14
03D02:  BTFSC  FD8.0
03D04:  BRA    3D0A
03D06:  MOVLB  6
03D08:  BRA    4100
....................             {
....................                if(No_PointCount < 9) Data_ByteCount = 0x01;
03D0A:  MOVLB  6
03D0C:  MOVF   x79,F
03D0E:  BNZ   3D1C
03D10:  MOVF   x78,W
03D12:  SUBLW  08
03D14:  BNC   3D1C
03D16:  MOVLW  01
03D18:  MOVWF  x7A
03D1A:  BRA    3D40
....................                else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
03D1C:  MOVF   x79,F
03D1E:  BNZ   3D2C
03D20:  MOVF   x78,W
03D22:  SUBLW  10
03D24:  BNC   3D2C
03D26:  MOVLW  02
03D28:  MOVWF  x7A
03D2A:  BRA    3D40
....................                else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
03D2C:  MOVF   x79,F
03D2E:  BNZ   3D3C
03D30:  MOVF   x78,W
03D32:  SUBLW  18
03D34:  BNC   3D3C
03D36:  MOVLW  03
03D38:  MOVWF  x7A
03D3A:  BRA    3D40
....................                else   Data_ByteCount = 0x01 ; //----Jack
03D3C:  MOVLW  01
03D3E:  MOVWF  x7A
.................... 
....................                if(Data_ByteCount == 0x01)
03D40:  DECFSZ x7A,W
03D42:  BRA    3E88
....................                {
.................... 
....................                   if(Start_Address < 0x09)
03D44:  MOVF   x77,F
03D46:  BNZ   3D62
03D48:  MOVF   x76,W
03D4A:  SUBLW  08
03D4C:  BNC   3D62
....................                   {
....................                      //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                       Data_Buff[0] = Input1_8 >> Start_Address ;
03D4E:  MOVFF  49,67B
03D52:  MOVF   x76,W
03D54:  MOVWF  01
03D56:  BZ    3D60
03D58:  BCF    FD8.0
03D5A:  RRCF   x7B,F
03D5C:  DECFSZ 01,F
03D5E:  BRA    3D58
....................                       //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                       //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                   }
03D60:  BRA    3D96
....................                   else if(Start_Address > 0x08 && Start_Address < 0x10)
03D62:  MOVF   x77,F
03D64:  BNZ   3D6C
03D66:  MOVF   x76,W
03D68:  SUBLW  08
03D6A:  BC    3D96
03D6C:  MOVF   x77,F
03D6E:  BNZ   3D96
03D70:  MOVF   x76,W
03D72:  SUBLW  0F
03D74:  BNC   3D96
....................                   {
....................                      //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                      Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
03D76:  MOVLW  08
03D78:  SUBWF  x76,W
03D7A:  MOVWF  00
03D7C:  MOVLW  00
03D7E:  SUBWFB x77,W
03D80:  MOVWF  03
03D82:  MOVFF  00,01
03D86:  MOVFF  4D,67B
03D8A:  MOVF   01,F
03D8C:  BZ    3D96
03D8E:  BCF    FD8.0
03D90:  RRCF   x7B,F
03D92:  DECFSZ 01,F
03D94:  BRA    3D8E
....................                   }
.................... 
.................... 
....................                   if(No_PointCount == 0x08)
03D96:  MOVF   x78,W
03D98:  SUBLW  08
03D9A:  BNZ   3DA2
03D9C:  MOVF   x79,F
03D9E:  BNZ   3DA2
....................                   {
....................                      Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                   }
03DA0:  BRA    3E0C
....................                   else if(No_PointCount == 0x07)
03DA2:  MOVF   x78,W
03DA4:  SUBLW  07
03DA6:  BNZ   3DB0
03DA8:  MOVF   x79,F
03DAA:  BNZ   3DB0
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
03DAC:  BCF    x7B.7
....................                   }
03DAE:  BRA    3E0C
....................                   else if(No_PointCount == 0x06)
03DB0:  MOVF   x78,W
03DB2:  SUBLW  06
03DB4:  BNZ   3DC0
03DB6:  MOVF   x79,F
03DB8:  BNZ   3DC0
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
03DBA:  MOVLW  3F
03DBC:  ANDWF  x7B,F
....................                   }
03DBE:  BRA    3E0C
....................                   else if(No_PointCount == 0x05)
03DC0:  MOVF   x78,W
03DC2:  SUBLW  05
03DC4:  BNZ   3DD0
03DC6:  MOVF   x79,F
03DC8:  BNZ   3DD0
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
03DCA:  MOVLW  1F
03DCC:  ANDWF  x7B,F
....................                   }
03DCE:  BRA    3E0C
....................                   else if(No_PointCount == 0x04)
03DD0:  MOVF   x78,W
03DD2:  SUBLW  04
03DD4:  BNZ   3DE0
03DD6:  MOVF   x79,F
03DD8:  BNZ   3DE0
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
03DDA:  MOVLW  0F
03DDC:  ANDWF  x7B,F
....................                   }
03DDE:  BRA    3E0C
....................                   else if(No_PointCount == 0x03)
03DE0:  MOVF   x78,W
03DE2:  SUBLW  03
03DE4:  BNZ   3DF0
03DE6:  MOVF   x79,F
03DE8:  BNZ   3DF0
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
03DEA:  MOVLW  07
03DEC:  ANDWF  x7B,F
....................                   }
03DEE:  BRA    3E0C
....................                   else if(No_PointCount == 0x02)
03DF0:  MOVF   x78,W
03DF2:  SUBLW  02
03DF4:  BNZ   3E00
03DF6:  MOVF   x79,F
03DF8:  BNZ   3E00
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
03DFA:  MOVLW  03
03DFC:  ANDWF  x7B,F
....................                   }
03DFE:  BRA    3E0C
....................                   else if(No_PointCount == 0x01)
03E00:  DECFSZ x78,W
03E02:  BRA    3E0C
03E04:  MOVF   x79,F
03E06:  BNZ   3E0C
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
03E08:  MOVLW  01
03E0A:  ANDWF  x7B,F
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
03E0C:  MOVFF  70,72
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
03E10:  MOVLW  01
03E12:  MOVLB  0
03E14:  MOVWF  x73
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
03E16:  MOVFF  67A,74
....................                   TxD_Buff[3] = Data_Buff[0] ;   //Data
03E1A:  MOVFF  67B,75
.................... 
....................                   CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
03E1E:  MOVLB  D
03E20:  CLRF   xCE
03E22:  MOVLW  72
03E24:  MOVWF  xCD
03E26:  MOVLW  04
03E28:  MOVWF  xCF
03E2A:  MOVLB  0
03E2C:  CALL   2546
.................... 
....................                   TxD_Buff[4] = CRC_Hi ;
03E30:  MOVFF  673,76
....................                   TxD_Buff[5] = CRC_Lo ;
03E34:  MOVFF  672,77
.................... 
....................                   //TxD_DataLen = 0x06 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
03E38:  BSF    F8A.3
03E3A:  BCF    F93.3
....................                   restart_wdt();
03E3C:  CLRWDT
....................                   delay_ms(4);
03E3E:  MOVLW  04
03E40:  MOVLB  D
03E42:  MOVWF  xCC
03E44:  MOVLB  0
03E46:  CALL   0A28
....................                   restart_wdt();
03E4A:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
03E4C:  MOVF   x72,W
03E4E:  CALL   259C
....................                   putc(TxD_Buff[1]) ;               //Function Code
03E52:  MOVF   x73,W
03E54:  CALL   259C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
03E58:  MOVF   x74,W
03E5A:  CALL   259C
....................                   putc(TxD_Buff[3]) ;
03E5E:  MOVF   x75,W
03E60:  CALL   259C
....................                   putc(TxD_Buff[4]) ;
03E64:  MOVF   x76,W
03E66:  CALL   259C
....................                   putc(TxD_Buff[5]) ;
03E6A:  MOVF   x77,W
03E6C:  CALL   259C
....................                   //putc(TxD_Buff[6]) ;
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................                
....................                   restart_wdt();
03E70:  CLRWDT
....................                   delay_ms(3);
03E72:  MOVLW  03
03E74:  MOVLB  D
03E76:  MOVWF  xCC
03E78:  MOVLB  0
03E7A:  CALL   0A28
....................                   restart_wdt();
03E7E:  CLRWDT
....................                   output_bit(P485ctrl,0);
03E80:  BCF    F8A.3
03E82:  BCF    F93.3
....................               
....................                }
03E84:  BRA    40FC
03E86:  MOVLB  6
....................                else if(Data_ByteCount == 0x02)
03E88:  MOVF   x7A,W
03E8A:  SUBLW  02
03E8C:  BTFSS  FD8.2
03E8E:  BRA    4050
....................                {
....................                   //Data_Buff[1] = ~output[1] >> Start_Address ;
....................                   //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                   //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                   
....................                   //Data_Buff[1] = Output9_16 >> Start_Address ;//jj
....................                   //DataTemp = Output9_16 << (0x08 - Start_Address) ;//jj
....................                   //Data_Buff[0] = (Output1_8 >> Start_Address) | DataTemp;   //Low Byte//jj
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
03E90:  MOVFF  49,67B
03E94:  MOVF   x76,W
03E96:  MOVWF  01
03E98:  BZ    3EA2
03E9A:  BCF    FD8.0
03E9C:  RRCF   x7B,F
03E9E:  DECFSZ 01,F
03EA0:  BRA    3E9A
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
03EA2:  MOVFF  4D,67C
.................... 
.................... 
....................                   if((No_PointCount - 0x07) == 0x08)
03EA6:  MOVLW  07
03EA8:  SUBWF  x78,W
03EAA:  MOVLB  D
03EAC:  MOVWF  xCC
03EAE:  MOVLW  00
03EB0:  MOVLB  6
03EB2:  SUBWFB x79,W
03EB4:  MOVLB  D
03EB6:  MOVWF  xCD
03EB8:  MOVF   xCC,W
03EBA:  SUBLW  08
03EBC:  BNZ   3EC4
03EBE:  MOVF   xCD,F
03EC0:  BNZ   3EC4
....................                   {
....................                      Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                   }
03EC2:  BRA    3FCA
....................                   else if((No_PointCount - 0x07) == 0x07)
03EC4:  MOVLW  07
03EC6:  MOVLB  6
03EC8:  SUBWF  x78,W
03ECA:  MOVLB  D
03ECC:  MOVWF  xCC
03ECE:  MOVLW  00
03ED0:  MOVLB  6
03ED2:  SUBWFB x79,W
03ED4:  MOVLB  D
03ED6:  MOVWF  xCD
03ED8:  MOVF   xCC,W
03EDA:  SUBLW  07
03EDC:  BNZ   3EE8
03EDE:  MOVF   xCD,F
03EE0:  BNZ   3EE8
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
03EE2:  MOVLB  6
03EE4:  BCF    x7C.7
....................                   }
03EE6:  BRA    3FC8
....................                   else if((No_PointCount - 0x07) == 0x06)
03EE8:  MOVLW  07
03EEA:  MOVLB  6
03EEC:  SUBWF  x78,W
03EEE:  MOVLB  D
03EF0:  MOVWF  xCC
03EF2:  MOVLW  00
03EF4:  MOVLB  6
03EF6:  SUBWFB x79,W
03EF8:  MOVLB  D
03EFA:  MOVWF  xCD
03EFC:  MOVF   xCC,W
03EFE:  SUBLW  06
03F00:  BNZ   3F0E
03F02:  MOVF   xCD,F
03F04:  BNZ   3F0E
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
03F06:  MOVLW  3F
03F08:  MOVLB  6
03F0A:  ANDWF  x7C,F
....................                   }
03F0C:  BRA    3FC8
....................                   else if((No_PointCount - 0x07) == 0x05)
03F0E:  MOVLW  07
03F10:  MOVLB  6
03F12:  SUBWF  x78,W
03F14:  MOVLB  D
03F16:  MOVWF  xCC
03F18:  MOVLW  00
03F1A:  MOVLB  6
03F1C:  SUBWFB x79,W
03F1E:  MOVLB  D
03F20:  MOVWF  xCD
03F22:  MOVF   xCC,W
03F24:  SUBLW  05
03F26:  BNZ   3F34
03F28:  MOVF   xCD,F
03F2A:  BNZ   3F34
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
03F2C:  MOVLW  1F
03F2E:  MOVLB  6
03F30:  ANDWF  x7C,F
....................                   }
03F32:  BRA    3FC8
....................                   else if((No_PointCount - 0x07) == 0x04)
03F34:  MOVLW  07
03F36:  MOVLB  6
03F38:  SUBWF  x78,W
03F3A:  MOVLB  D
03F3C:  MOVWF  xCC
03F3E:  MOVLW  00
03F40:  MOVLB  6
03F42:  SUBWFB x79,W
03F44:  MOVLB  D
03F46:  MOVWF  xCD
03F48:  MOVF   xCC,W
03F4A:  SUBLW  04
03F4C:  BNZ   3F5A
03F4E:  MOVF   xCD,F
03F50:  BNZ   3F5A
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
03F52:  MOVLW  0F
03F54:  MOVLB  6
03F56:  ANDWF  x7C,F
....................                   }
03F58:  BRA    3FC8
....................                   else if((No_PointCount - 0x07) == 0x03)
03F5A:  MOVLW  07
03F5C:  MOVLB  6
03F5E:  SUBWF  x78,W
03F60:  MOVLB  D
03F62:  MOVWF  xCC
03F64:  MOVLW  00
03F66:  MOVLB  6
03F68:  SUBWFB x79,W
03F6A:  MOVLB  D
03F6C:  MOVWF  xCD
03F6E:  MOVF   xCC,W
03F70:  SUBLW  03
03F72:  BNZ   3F80
03F74:  MOVF   xCD,F
03F76:  BNZ   3F80
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
03F78:  MOVLW  07
03F7A:  MOVLB  6
03F7C:  ANDWF  x7C,F
....................                   }
03F7E:  BRA    3FC8
....................                   else if((No_PointCount - 0x07) == 0x02)
03F80:  MOVLW  07
03F82:  MOVLB  6
03F84:  SUBWF  x78,W
03F86:  MOVLB  D
03F88:  MOVWF  xCC
03F8A:  MOVLW  00
03F8C:  MOVLB  6
03F8E:  SUBWFB x79,W
03F90:  MOVLB  D
03F92:  MOVWF  xCD
03F94:  MOVF   xCC,W
03F96:  SUBLW  02
03F98:  BNZ   3FA6
03F9A:  MOVF   xCD,F
03F9C:  BNZ   3FA6
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
03F9E:  MOVLW  03
03FA0:  MOVLB  6
03FA2:  ANDWF  x7C,F
....................                   }
03FA4:  BRA    3FC8
....................                   else if((No_PointCount - 0x07) == 0x01)
03FA6:  MOVLW  07
03FA8:  MOVLB  6
03FAA:  SUBWF  x78,W
03FAC:  MOVLB  D
03FAE:  MOVWF  xCC
03FB0:  MOVLW  00
03FB2:  MOVLB  6
03FB4:  SUBWFB x79,W
03FB6:  MOVLB  D
03FB8:  MOVWF  xCD
03FBA:  DECFSZ xCC,W
03FBC:  BRA    3FCA
03FBE:  MOVF   xCD,F
03FC0:  BNZ   3FCA
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
03FC2:  MOVLW  01
03FC4:  MOVLB  6
03FC6:  ANDWF  x7C,F
03FC8:  MOVLB  D
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
03FCA:  MOVFF  70,72
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
03FCE:  MOVLW  01
03FD0:  MOVLB  0
03FD2:  MOVWF  x73
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
03FD4:  MOVFF  67A,74
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
03FD8:  MOVFF  67B,75
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
03FDC:  MOVFF  67C,76
.................... 
....................                   CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
03FE0:  MOVLB  D
03FE2:  CLRF   xCE
03FE4:  MOVLW  72
03FE6:  MOVWF  xCD
03FE8:  MOVLW  05
03FEA:  MOVWF  xCF
03FEC:  MOVLB  0
03FEE:  CALL   2546
.................... 
....................                   TxD_Buff[5] = CRC_Hi ;
03FF2:  MOVFF  673,77
....................                   TxD_Buff[6] = CRC_Lo ;
03FF6:  MOVFF  672,78
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
03FFA:  BSF    F8A.3
03FFC:  BCF    F93.3
....................                   restart_wdt();
03FFE:  CLRWDT
....................                   delay_ms(4);
04000:  MOVLW  04
04002:  MOVLB  D
04004:  MOVWF  xCC
04006:  MOVLB  0
04008:  CALL   0A28
....................                   restart_wdt();
0400C:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
0400E:  MOVF   x72,W
04010:  CALL   259C
....................                   putc(TxD_Buff[1]) ;               //Function Code
04014:  MOVF   x73,W
04016:  CALL   259C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
0401A:  MOVF   x74,W
0401C:  CALL   259C
....................                   putc(TxD_Buff[3]) ;
04020:  MOVF   x75,W
04022:  CALL   259C
....................                   putc(TxD_Buff[4]) ;
04026:  MOVF   x76,W
04028:  CALL   259C
....................                   putc(TxD_Buff[5]) ;
0402C:  MOVF   x77,W
0402E:  CALL   259C
....................                   putc(TxD_Buff[6]) ;
04032:  MOVF   x78,W
04034:  CALL   259C
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04038:  CLRWDT
....................                   delay_ms(3);
0403A:  MOVLW  03
0403C:  MOVLB  D
0403E:  MOVWF  xCC
04040:  MOVLB  0
04042:  CALL   0A28
....................                   restart_wdt();
04046:  CLRWDT
....................                   output_bit(P485ctrl,0);
04048:  BCF    F8A.3
0404A:  BCF    F93.3
....................               
....................                }
0404C:  BRA    40FC
0404E:  MOVLB  6
....................                else if(Data_ByteCount == 0x03)
04050:  MOVF   x7A,W
04052:  SUBLW  03
04054:  BNZ   40FE
....................                {
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
04056:  MOVFF  49,67B
0405A:  MOVF   x76,W
0405C:  MOVWF  01
0405E:  BZ    4068
04060:  BCF    FD8.0
04062:  RRCF   x7B,F
04064:  DECFSZ 01,F
04066:  BRA    4060
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
04068:  MOVFF  4D,67C
....................                   Data_Buff[2] = Input17_24 ;// >> Start_Address ;
0406C:  MOVFF  4E,67D
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
04070:  MOVFF  70,72
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
04074:  MOVLW  01
04076:  MOVLB  0
04078:  MOVWF  x73
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
0407A:  MOVFF  67A,74
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
0407E:  MOVFF  67B,75
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
04082:  MOVFF  67C,76
....................                   TxD_Buff[5] = Data_Buff[2] ;  
04086:  MOVFF  67D,77
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 5 Byte
0408A:  MOVLB  D
0408C:  CLRF   xCE
0408E:  MOVLW  72
04090:  MOVWF  xCD
04092:  MOVLW  06
04094:  MOVWF  xCF
04096:  MOVLB  0
04098:  CALL   2546
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
0409C:  MOVFF  673,78
....................                   TxD_Buff[7] = CRC_Lo ;
040A0:  MOVFF  672,79
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
040A4:  BSF    F8A.3
040A6:  BCF    F93.3
....................                   restart_wdt();
040A8:  CLRWDT
....................                   delay_ms(4);
040AA:  MOVLW  04
040AC:  MOVLB  D
040AE:  MOVWF  xCC
040B0:  MOVLB  0
040B2:  CALL   0A28
....................                   restart_wdt();
040B6:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
040B8:  MOVF   x72,W
040BA:  CALL   259C
....................                   putc(TxD_Buff[1]) ;               //Function Code
040BE:  MOVF   x73,W
040C0:  CALL   259C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
040C4:  MOVF   x74,W
040C6:  CALL   259C
....................                   putc(TxD_Buff[3]) ;
040CA:  MOVF   x75,W
040CC:  CALL   259C
....................                   putc(TxD_Buff[4]) ;
040D0:  MOVF   x76,W
040D2:  CALL   259C
....................                   putc(TxD_Buff[5]) ;
040D6:  MOVF   x77,W
040D8:  CALL   259C
....................                   putc(TxD_Buff[6]) ;
040DC:  MOVF   x78,W
040DE:  CALL   259C
....................                   putc(TxD_Buff[7]) ;
040E2:  MOVF   x79,W
040E4:  CALL   259C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
040E8:  CLRWDT
....................                   delay_ms(3);
040EA:  MOVLW  03
040EC:  MOVLB  D
040EE:  MOVWF  xCC
040F0:  MOVLB  0
040F2:  CALL   0A28
....................                   restart_wdt();
040F6:  CLRWDT
....................                   output_bit(P485ctrl,0);
040F8:  BCF    F8A.3
040FA:  BCF    F93.3
040FC:  MOVLB  6
....................                
....................                }
....................             }
040FE:  BRA    4170
....................             else
....................             {
....................                //invalid parameter
....................                TxD_Buff[0] = Address ;         //Address
04100:  MOVFF  70,72
....................                TxD_Buff[1] = 0x81 ;         //Function Code
04104:  MOVLW  81
04106:  MOVLB  0
04108:  MOVWF  x73
....................                TxD_Buff[2] = 0x02 ;         //illegal data address
0410A:  MOVLW  02
0410C:  MOVWF  x74
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
0410E:  MOVLB  D
04110:  CLRF   xCE
04112:  MOVLW  72
04114:  MOVWF  xCD
04116:  MOVLW  03
04118:  MOVWF  xCF
0411A:  MOVLB  0
0411C:  CALL   2546
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
04120:  MOVFF  673,75
....................                TxD_Buff[4] = CRC_Lo ;
04124:  MOVFF  672,76
.................... 
....................                //TxD_DataLen = 0x05 ;
....................                //rs485_ctrl = 1;
....................                //restart_wdt();
....................                //dmsec(4);
....................                //restart_wdt();
....................                //send = 1;
....................                //TI=1;
....................                output_bit(P485ctrl,1);
04128:  BSF    F8A.3
0412A:  BCF    F93.3
....................                restart_wdt();
0412C:  CLRWDT
....................                delay_ms(4);
0412E:  MOVLW  04
04130:  MOVLB  D
04132:  MOVWF  xCC
04134:  MOVLB  0
04136:  CALL   0A28
....................                restart_wdt();
0413A:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
0413C:  MOVF   x72,W
0413E:  CALL   259C
....................                putc(TxD_Buff[1]) ;               //Function Code
04142:  MOVF   x73,W
04144:  CALL   259C
....................                putc(TxD_Buff[2]) ;               //Byte Count
04148:  MOVF   x74,W
0414A:  CALL   259C
....................                putc(TxD_Buff[3]) ;
0414E:  MOVF   x75,W
04150:  CALL   259C
....................                putc(TxD_Buff[4]) ;
04154:  MOVF   x76,W
04156:  CALL   259C
.................... 
....................                restart_wdt();
0415A:  CLRWDT
....................                delay_ms(3);
0415C:  MOVLW  03
0415E:  MOVLB  D
04160:  MOVWF  xCC
04162:  MOVLB  0
04164:  CALL   0A28
....................                restart_wdt();
04168:  CLRWDT
....................                output_bit(P485ctrl,0);
0416A:  BCF    F8A.3
0416C:  BCF    F93.3
0416E:  MOVLB  6
04170:  MOVLB  2
....................                
....................             }
....................          }
.................... ////\*/
....................                  /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
04172:  MOVF   x73,W
04174:  SUBLW  07
04176:  BTFSS  FD8.2
04178:  BRA    42DC
....................       {
....................          Alarmtosend();
0417A:  MOVLB  0
0417C:  GOTO   25A4
....................          
....................          disable_interrupts(INT_TIMER2);
04180:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
04182:  MOVFF  1E,67B
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
04186:  MOVFF  1F,67C
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
0418A:  MOVFF  20,67D
....................             Data_Buff[3] = Input25_32_Send ;
0418E:  MOVFF  21,67E
....................             Data_Buff[4] = Input33_40_Send ;
04192:  MOVFF  22,67F
....................             Data_Buff[5] = Input41_48_Send ;
04196:  MOVFF  23,680
....................             Data_Buff[6] = Input49_56_Send ;
0419A:  MOVFF  24,681
....................             Data_Buff[7] = Input57_64_Send ;
0419E:  MOVFF  25,682
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
041A2:  MOVFF  26,683
....................             Data_Buff[9] = Ack9_16_Send ;
041A6:  MOVFF  27,684
....................             Data_Buff[10] = Ack17_24_Send ;
041AA:  MOVFF  28,685
....................             Data_Buff[11] = Ack25_32_Send ;
041AE:  MOVFF  29,686
....................             Data_Buff[12] = Ack33_40_Send ;
041B2:  MOVFF  2A,687
....................             Data_Buff[13] = Ack41_48_Send ;
041B6:  MOVFF  2B,688
....................             Data_Buff[14] = Ack49_56_Send ;
041BA:  MOVFF  2C,689
....................             Data_Buff[15] = Ack57_64_Send ;
041BE:  MOVFF  2D,68A
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
041C2:  MOVFF  70,72
....................             TxD_Buff[1] = 0x07 ;         //Function Code
041C6:  MOVLW  07
041C8:  MOVWF  x73
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
041CA:  MOVLW  10
041CC:  MOVLB  6
041CE:  MOVWF  x7A
041D0:  MOVFF  67A,74
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
041D4:  MOVFF  67B,75
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
041D8:  MOVFF  67C,76
....................             TxD_Buff[5] = Data_Buff[2] ;  
041DC:  MOVFF  67D,77
....................             TxD_Buff[6] = Data_Buff[3] ;
041E0:  MOVFF  67E,78
....................             TxD_Buff[7] = Data_Buff[4] ;
041E4:  MOVFF  67F,79
....................             TxD_Buff[8] = Data_Buff[5] ;
041E8:  MOVFF  680,7A
....................             TxD_Buff[9] = Data_Buff[6] ;
041EC:  MOVFF  681,7B
....................             TxD_Buff[10] = Data_Buff[7] ;
041F0:  MOVFF  682,7C
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
041F4:  MOVFF  683,7D
....................            TxD_Buff[12] = Data_Buff[9] ;
041F8:  MOVFF  684,7E
....................            TxD_Buff[13] = Data_Buff[10] ;
041FC:  MOVFF  685,7F
....................            TxD_Buff[14] = Data_Buff[11] ;
04200:  MOVFF  686,80
....................            TxD_Buff[15] = Data_Buff[12] ;
04204:  MOVFF  687,81
....................            TxD_Buff[16] = Data_Buff[13] ;
04208:  MOVFF  688,82
....................            TxD_Buff[17] = Data_Buff[14] ;
0420C:  MOVFF  689,83
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
04210:  MOVFF  68A,84
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
04214:  MOVLB  D
04216:  CLRF   xCE
04218:  MOVLW  72
0421A:  MOVWF  xCD
0421C:  MOVLW  13
0421E:  MOVWF  xCF
04220:  MOVLB  0
04222:  CALL   2546
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
04226:  MOVFF  673,85
....................           TxD_Buff[20] = CRC_Lo ;
0422A:  MOVFF  672,86
.................... 
....................         
....................          output_bit(P485ctrl,1);
0422E:  BSF    F8A.3
04230:  BCF    F93.3
....................          restart_wdt();
04232:  CLRWDT
....................          delay_ms(4);
04234:  MOVLW  04
04236:  MOVLB  D
04238:  MOVWF  xCC
0423A:  MOVLB  0
0423C:  CALL   0A28
....................          restart_wdt();
04240:  CLRWDT
....................                
....................          putc(TxD_Buff[0]) ;               //Address
04242:  MOVF   x72,W
04244:  CALL   259C
....................          putc(TxD_Buff[1]) ;               //Function Code
04248:  MOVF   x73,W
0424A:  CALL   259C
....................          putc(TxD_Buff[2]) ;               //Byte Count
0424E:  MOVF   x74,W
04250:  CALL   259C
....................          putc(TxD_Buff[3]) ;
04254:  MOVF   x75,W
04256:  CALL   259C
....................          putc(TxD_Buff[4]) ;
0425A:  MOVF   x76,W
0425C:  CALL   259C
....................          putc(TxD_Buff[5]) ;
04260:  MOVF   x77,W
04262:  CALL   259C
....................          putc(TxD_Buff[6]) ;
04266:  MOVF   x78,W
04268:  CALL   259C
....................          putc(TxD_Buff[7]) ;
0426C:  MOVF   x79,W
0426E:  CALL   259C
....................          putc(TxD_Buff[8]) ;
04272:  MOVF   x7A,W
04274:  CALL   259C
....................          putc(TxD_Buff[9]) ;
04278:  MOVF   x7B,W
0427A:  CALL   259C
....................          putc(TxD_Buff[10]) ;
0427E:  MOVF   x7C,W
04280:  CALL   259C
....................          putc(TxD_Buff[11]) ;
04284:  MOVF   x7D,W
04286:  CALL   259C
....................          putc(TxD_Buff[12]) ;
0428A:  MOVF   x7E,W
0428C:  CALL   259C
....................          putc(TxD_Buff[13]) ;
04290:  MOVF   x7F,W
04292:  CALL   259C
....................          putc(TxD_Buff[14]) ;
04296:  MOVF   x80,W
04298:  CALL   259C
....................          putc(TxD_Buff[15]) ;
0429C:  MOVF   x81,W
0429E:  CALL   259C
....................          putc(TxD_Buff[16]) ;
042A2:  MOVF   x82,W
042A4:  CALL   259C
....................          putc(TxD_Buff[17]) ;
042A8:  MOVF   x83,W
042AA:  CALL   259C
....................          putc(TxD_Buff[18]) ;
042AE:  MOVF   x84,W
042B0:  CALL   259C
....................          putc(TxD_Buff[19]) ;
042B4:  MOVF   x85,W
042B6:  CALL   259C
....................          putc(TxD_Buff[20]) ;
042BA:  MOVF   x86,W
042BC:  CALL   259C
.................... 
....................          restart_wdt();
042C0:  CLRWDT
....................          delay_ms(3);
042C2:  MOVLW  03
042C4:  MOVLB  D
042C6:  MOVWF  xCC
042C8:  MOVLB  0
042CA:  CALL   0A28
....................          restart_wdt();
042CE:  CLRWDT
....................          output_bit(P485ctrl,0);
042D0:  BCF    F8A.3
042D2:  BCF    F93.3
....................            
....................         
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
042D4:  BSF    F9D.1
....................      
....................        }
042D6:  GOTO   6696
042DA:  MOVLB  2
....................       /////////////////////////////////////////////////////////////////
.................... 
....................        else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
042DC:  MOVF   x73,W
042DE:  SUBLW  05
042E0:  BTFSS  FD8.2
042E2:  BRA    47D0
....................          {
....................             //Do Force Coil
....................             Start_Address = RxD_Buff[2] ;
042E4:  MOVLB  6
042E6:  CLRF   x77
042E8:  MOVFF  274,676
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
042EC:  MOVFF  676,677
042F0:  MOVLB  D
042F2:  CLRF   xCC
042F4:  MOVF   xCC,W
042F6:  MOVLB  2
042F8:  IORWF  x75,W
042FA:  MOVLB  6
042FC:  MOVWF  x76
042FE:  MOVLB  6
....................             No_PointCount = RxD_Buff[4] ;
04300:  CLRF   x79
04302:  MOVFF  276,678
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
04306:  MOVFF  678,679
0430A:  MOVLB  D
0430C:  CLRF   xCC
0430E:  MOVF   xCC,W
04310:  MOVLB  2
04312:  IORWF  x77,W
04314:  MOVLB  6
04316:  MOVWF  x78
04318:  MOVLB  6
.................... 
....................             if(Start_Address == 0x00)   ////// Acknowlegde //////
0431A:  MOVF   x76,F
0431C:  BNZ   43BC
0431E:  MOVF   x77,F
04320:  BNZ   43BC
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
04322:  MOVF   x78,F
04324:  BNZ   43BA
04326:  INCFSZ x79,W
04328:  BRA    43BA
....................                {
....................                   //Modbus_ACK = 1 ;
....................                   AutoAckFlag = 1;
0432A:  BSF    1A.2
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
0432C:  MOVFF  70,72
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04330:  MOVLW  05
04332:  MOVLB  0
04334:  MOVWF  x73
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04336:  MOVFF  274,74
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0433A:  MOVFF  275,75
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
0433E:  MOVFF  276,76
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04342:  MOVFF  277,77
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04346:  MOVLB  D
04348:  CLRF   xCE
0434A:  MOVLW  72
0434C:  MOVWF  xCD
0434E:  MOVLW  06
04350:  MOVWF  xCF
04352:  MOVLB  0
04354:  CALL   2546
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
04358:  MOVFF  673,78
....................                   TxD_Buff[7] = CRC_Lo ;
0435C:  MOVFF  672,79
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................               output_bit(P485ctrl,1);
04360:  BSF    F8A.3
04362:  BCF    F93.3
....................                   restart_wdt();
04364:  CLRWDT
....................                   delay_ms(4);
04366:  MOVLW  04
04368:  MOVLB  D
0436A:  MOVWF  xCC
0436C:  MOVLB  0
0436E:  CALL   0A28
....................                   restart_wdt();
04372:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04374:  MOVF   x72,W
04376:  CALL   259C
....................                   putc(TxD_Buff[1]) ;               //Function Code
0437A:  MOVF   x73,W
0437C:  CALL   259C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04380:  MOVF   x74,W
04382:  CALL   259C
....................                   putc(TxD_Buff[3]) ;
04386:  MOVF   x75,W
04388:  CALL   259C
....................                   putc(TxD_Buff[4]) ;
0438C:  MOVF   x76,W
0438E:  CALL   259C
....................                   putc(TxD_Buff[5]) ;
04392:  MOVF   x77,W
04394:  CALL   259C
....................                   putc(TxD_Buff[6]) ;
04398:  MOVF   x78,W
0439A:  CALL   259C
....................                   putc(TxD_Buff[7]) ;
0439E:  MOVF   x79,W
043A0:  CALL   259C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
043A4:  CLRWDT
....................                   delay_ms(3);
043A6:  MOVLW  03
043A8:  MOVLB  D
043AA:  MOVWF  xCC
043AC:  MOVLB  0
043AE:  CALL   0A28
....................                   restart_wdt();
043B2:  CLRWDT
....................                   output_bit(P485ctrl,0);
043B4:  BCF    F8A.3
043B6:  BCF    F93.3
043B8:  MOVLB  6
....................               
....................                }
....................             }
043BA:  BRA    47CA
....................             else if(Start_Address == 0x01)   ///// Reset //////
043BC:  DECFSZ x76,W
043BE:  BRA    445E
043C0:  MOVF   x77,F
043C2:  BNZ   445E
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
043C4:  MOVF   x78,F
043C6:  BNZ   445C
043C8:  INCFSZ x79,W
043CA:  BRA    445C
....................                {
....................                   //Modbus_RET = 1 ;
....................                   AutoResetFlag = 1;
043CC:  BSF    1A.3
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
043CE:  MOVFF  70,72
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
043D2:  MOVLW  05
043D4:  MOVLB  0
043D6:  MOVWF  x73
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
043D8:  MOVFF  274,74
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
043DC:  MOVFF  275,75
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
043E0:  MOVFF  276,76
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
043E4:  MOVFF  277,77
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
043E8:  MOVLB  D
043EA:  CLRF   xCE
043EC:  MOVLW  72
043EE:  MOVWF  xCD
043F0:  MOVLW  06
043F2:  MOVWF  xCF
043F4:  MOVLB  0
043F6:  CALL   2546
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
043FA:  MOVFF  673,78
....................                   TxD_Buff[7] = CRC_Lo ;
043FE:  MOVFF  672,79
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                  //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................               output_bit(P485ctrl,1);
04402:  BSF    F8A.3
04404:  BCF    F93.3
....................                   restart_wdt();
04406:  CLRWDT
....................                   delay_ms(4);
04408:  MOVLW  04
0440A:  MOVLB  D
0440C:  MOVWF  xCC
0440E:  MOVLB  0
04410:  CALL   0A28
....................                   restart_wdt();
04414:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04416:  MOVF   x72,W
04418:  CALL   259C
....................                   putc(TxD_Buff[1]) ;               //Function Code
0441C:  MOVF   x73,W
0441E:  CALL   259C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04422:  MOVF   x74,W
04424:  CALL   259C
....................                   putc(TxD_Buff[3]) ;
04428:  MOVF   x75,W
0442A:  CALL   259C
....................                   putc(TxD_Buff[4]) ;
0442E:  MOVF   x76,W
04430:  CALL   259C
....................                   putc(TxD_Buff[5]) ;
04434:  MOVF   x77,W
04436:  CALL   259C
....................                   putc(TxD_Buff[6]) ;
0443A:  MOVF   x78,W
0443C:  CALL   259C
....................                   putc(TxD_Buff[7]) ;
04440:  MOVF   x79,W
04442:  CALL   259C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04446:  CLRWDT
....................                   delay_ms(3);
04448:  MOVLW  03
0444A:  MOVLB  D
0444C:  MOVWF  xCC
0444E:  MOVLB  0
04450:  CALL   0A28
....................                   restart_wdt();
04454:  CLRWDT
....................                   output_bit(P485ctrl,0);
04456:  BCF    F8A.3
04458:  BCF    F93.3
0445A:  MOVLB  6
....................               
....................                }
....................             }
0445C:  BRA    47CA
....................             else if(Start_Address == 0x02)   ///// Test //////
0445E:  MOVF   x76,W
04460:  SUBLW  02
04462:  BTFSS  FD8.2
04464:  BRA    45B0
04466:  MOVF   x77,F
04468:  BTFSS  FD8.2
0446A:  BRA    45B0
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
0446C:  MOVF   x78,F
0446E:  BNZ   4506
04470:  INCFSZ x79,W
04472:  BRA    4506
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   AutoTestFlag = 1;
04474:  BSF    1A.4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04476:  MOVFF  70,72
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
0447A:  MOVLW  05
0447C:  MOVLB  0
0447E:  MOVWF  x73
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04480:  MOVFF  274,74
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04484:  MOVFF  275,75
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04488:  MOVFF  276,76
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
0448C:  MOVFF  277,77
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04490:  MOVLB  D
04492:  CLRF   xCE
04494:  MOVLW  72
04496:  MOVWF  xCD
04498:  MOVLW  06
0449A:  MOVWF  xCF
0449C:  MOVLB  0
0449E:  CALL   2546
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
044A2:  MOVFF  673,78
....................                   TxD_Buff[7] = CRC_Lo ;
044A6:  MOVFF  672,79
.................... 
....................                  //TxD_DataLen = 0x08 ;
....................                  //rs485_ctrl = 1;
....................                  //dmsec(4);
....................                  //send = 1;
....................                  //TI=1;
....................                   output_bit(P485ctrl,1);
044AA:  BSF    F8A.3
044AC:  BCF    F93.3
....................                   restart_wdt();
044AE:  CLRWDT
....................                   delay_ms(4);
044B0:  MOVLW  04
044B2:  MOVLB  D
044B4:  MOVWF  xCC
044B6:  MOVLB  0
044B8:  CALL   0A28
....................                   restart_wdt();
044BC:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
044BE:  MOVF   x72,W
044C0:  CALL   259C
....................                   putc(TxD_Buff[1]) ;               //Function Code
044C4:  MOVF   x73,W
044C6:  CALL   259C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
044CA:  MOVF   x74,W
044CC:  CALL   259C
....................                   putc(TxD_Buff[3]) ;
044D0:  MOVF   x75,W
044D2:  CALL   259C
....................                   putc(TxD_Buff[4]) ;
044D6:  MOVF   x76,W
044D8:  CALL   259C
....................                   putc(TxD_Buff[5]) ;
044DC:  MOVF   x77,W
044DE:  CALL   259C
....................                   putc(TxD_Buff[6]) ;
044E2:  MOVF   x78,W
044E4:  CALL   259C
....................                   putc(TxD_Buff[7]) ;
044E8:  MOVF   x79,W
044EA:  CALL   259C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
044EE:  CLRWDT
....................                   delay_ms(3);
044F0:  MOVLW  03
044F2:  MOVLB  D
044F4:  MOVWF  xCC
044F6:  MOVLB  0
044F8:  CALL   0A28
....................                   restart_wdt();
044FC:  CLRWDT
....................                   output_bit(P485ctrl,0);
044FE:  BCF    F8A.3
04500:  BCF    F93.3
....................              
....................                }
04502:  BRA    45AC
04504:  MOVLB  6
....................                else if(No_PointCount == 0x00)   //OFF
04506:  MOVF   x78,F
04508:  BNZ   45AE
0450A:  MOVF   x79,F
0450C:  BNZ   45AE
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   AutoTestFlag = 0;
0450E:  BCF    1A.4
....................                   Read_input();
04510:  MOVLB  0
04512:  CALL   2A8E
....................                   AutoAckFlag = 1;
04516:  BSF    1A.2
....................                   check_ack();
04518:  CALL   3552
....................                   AutoResetFlag = 1;
0451C:  BSF    1A.3
....................                   check_reset();
0451E:  CALL   36E0
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04522:  MOVFF  70,72
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04526:  MOVLW  05
04528:  MOVWF  x73
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0452A:  MOVFF  274,74
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0452E:  MOVFF  275,75
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04532:  MOVFF  276,76
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04536:  MOVFF  277,77
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0453A:  MOVLB  D
0453C:  CLRF   xCE
0453E:  MOVLW  72
04540:  MOVWF  xCD
04542:  MOVLW  06
04544:  MOVWF  xCF
04546:  MOVLB  0
04548:  CALL   2546
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
0454C:  MOVFF  673,78
....................                   TxD_Buff[7] = CRC_Lo ;
04550:  MOVFF  672,79
.................... 
....................                   output_bit(P485ctrl,1);
04554:  BSF    F8A.3
04556:  BCF    F93.3
....................                   restart_wdt();
04558:  CLRWDT
....................                   delay_ms(4);
0455A:  MOVLW  04
0455C:  MOVLB  D
0455E:  MOVWF  xCC
04560:  MOVLB  0
04562:  CALL   0A28
....................                   restart_wdt();
04566:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04568:  MOVF   x72,W
0456A:  CALL   259C
....................                   putc(TxD_Buff[1]) ;               //Function Code
0456E:  MOVF   x73,W
04570:  CALL   259C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04574:  MOVF   x74,W
04576:  CALL   259C
....................                   putc(TxD_Buff[3]) ;
0457A:  MOVF   x75,W
0457C:  CALL   259C
....................                   putc(TxD_Buff[4]) ;
04580:  MOVF   x76,W
04582:  CALL   259C
....................                   putc(TxD_Buff[5]) ;
04586:  MOVF   x77,W
04588:  CALL   259C
....................                   putc(TxD_Buff[6]) ;
0458C:  MOVF   x78,W
0458E:  CALL   259C
....................                   putc(TxD_Buff[7]) ;
04592:  MOVF   x79,W
04594:  CALL   259C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04598:  CLRWDT
....................                   delay_ms(3);
0459A:  MOVLW  03
0459C:  MOVLB  D
0459E:  MOVWF  xCC
045A0:  MOVLB  0
045A2:  CALL   0A28
....................                   restart_wdt();
045A6:  CLRWDT
....................                   output_bit(P485ctrl,0);
045A8:  BCF    F8A.3
045AA:  BCF    F93.3
045AC:  MOVLB  6
....................                   
....................                }
....................             }
045AE:  BRA    47CA
....................             else if(Start_Address == 0x03)   ///// Function Test //////
045B0:  MOVF   x76,W
045B2:  SUBLW  03
045B4:  BTFSS  FD8.2
045B6:  BRA    4702
045B8:  MOVF   x77,F
045BA:  BTFSS  FD8.2
045BC:  BRA    4702
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
045BE:  MOVF   x78,F
045C0:  BNZ   4658
045C2:  INCFSZ x79,W
045C4:  BRA    4658
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   Test_fault = 1 ;
045C6:  BSF    1A.5
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
045C8:  MOVFF  70,72
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
045CC:  MOVLW  05
045CE:  MOVLB  0
045D0:  MOVWF  x73
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
045D2:  MOVFF  274,74
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
045D6:  MOVFF  275,75
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
045DA:  MOVFF  276,76
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
045DE:  MOVFF  277,77
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
045E2:  MOVLB  D
045E4:  CLRF   xCE
045E6:  MOVLW  72
045E8:  MOVWF  xCD
045EA:  MOVLW  06
045EC:  MOVWF  xCF
045EE:  MOVLB  0
045F0:  CALL   2546
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
045F4:  MOVFF  673,78
....................                   TxD_Buff[7] = CRC_Lo ;
045F8:  MOVFF  672,79
.................... 
....................                   output_bit(P485ctrl,1);
045FC:  BSF    F8A.3
045FE:  BCF    F93.3
....................                   restart_wdt();
04600:  CLRWDT
....................                   delay_ms(8);
04602:  MOVLW  08
04604:  MOVLB  D
04606:  MOVWF  xCC
04608:  MOVLB  0
0460A:  CALL   0A28
....................                   restart_wdt();
0460E:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04610:  MOVF   x72,W
04612:  CALL   259C
....................                   putc(TxD_Buff[1]) ;               //Function Code
04616:  MOVF   x73,W
04618:  CALL   259C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
0461C:  MOVF   x74,W
0461E:  CALL   259C
....................                   putc(TxD_Buff[3]) ;
04622:  MOVF   x75,W
04624:  CALL   259C
....................                   putc(TxD_Buff[4]) ;
04628:  MOVF   x76,W
0462A:  CALL   259C
....................                   putc(TxD_Buff[5]) ;
0462E:  MOVF   x77,W
04630:  CALL   259C
....................                   putc(TxD_Buff[6]) ;
04634:  MOVF   x78,W
04636:  CALL   259C
....................                   putc(TxD_Buff[7]) ;
0463A:  MOVF   x79,W
0463C:  CALL   259C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04640:  CLRWDT
....................                   delay_ms(8);
04642:  MOVLW  08
04644:  MOVLB  D
04646:  MOVWF  xCC
04648:  MOVLB  0
0464A:  CALL   0A28
....................                   restart_wdt();
0464E:  CLRWDT
....................                   output_bit(P485ctrl,0);
04650:  BCF    F8A.3
04652:  BCF    F93.3
....................               
....................                }
04654:  BRA    46FE
04656:  MOVLB  6
....................                else if(No_PointCount == 0x00)   //OFF
04658:  MOVF   x78,F
0465A:  BNZ   4700
0465C:  MOVF   x79,F
0465E:  BNZ   4700
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   Test_fault = 0;
04660:  BCF    1A.5
....................                   Read_input();
04662:  MOVLB  0
04664:  CALL   2A8E
....................                   AutoAckFlag = 1;
04668:  BSF    1A.2
....................                   check_ack();
0466A:  CALL   3552
....................                   AutoResetFlag = 1;
0466E:  BSF    1A.3
....................                   check_reset();
04670:  CALL   36E0
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04674:  MOVFF  70,72
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04678:  MOVLW  05
0467A:  MOVWF  x73
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0467C:  MOVFF  274,74
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04680:  MOVFF  275,75
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04684:  MOVFF  276,76
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04688:  MOVFF  277,77
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0468C:  MOVLB  D
0468E:  CLRF   xCE
04690:  MOVLW  72
04692:  MOVWF  xCD
04694:  MOVLW  06
04696:  MOVWF  xCF
04698:  MOVLB  0
0469A:  CALL   2546
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
0469E:  MOVFF  673,78
....................                   TxD_Buff[7] = CRC_Lo ;
046A2:  MOVFF  672,79
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
046A6:  BSF    F8A.3
046A8:  BCF    F93.3
....................                   restart_wdt();
046AA:  CLRWDT
....................                   delay_ms(4);
046AC:  MOVLW  04
046AE:  MOVLB  D
046B0:  MOVWF  xCC
046B2:  MOVLB  0
046B4:  CALL   0A28
....................                   restart_wdt();
046B8:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
046BA:  MOVF   x72,W
046BC:  CALL   259C
....................                   putc(TxD_Buff[1]) ;               //Function Code
046C0:  MOVF   x73,W
046C2:  CALL   259C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
046C6:  MOVF   x74,W
046C8:  CALL   259C
....................                   putc(TxD_Buff[3]) ;
046CC:  MOVF   x75,W
046CE:  CALL   259C
....................                   putc(TxD_Buff[4]) ;
046D2:  MOVF   x76,W
046D4:  CALL   259C
....................                   putc(TxD_Buff[5]) ;
046D8:  MOVF   x77,W
046DA:  CALL   259C
....................                   putc(TxD_Buff[6]) ;
046DE:  MOVF   x78,W
046E0:  CALL   259C
....................                   putc(TxD_Buff[7]) ;
046E4:  MOVF   x79,W
046E6:  CALL   259C
.................... 
....................                   restart_wdt();
046EA:  CLRWDT
....................                   delay_ms(3);
046EC:  MOVLW  03
046EE:  MOVLB  D
046F0:  MOVWF  xCC
046F2:  MOVLB  0
046F4:  CALL   0A28
....................                   restart_wdt();
046F8:  CLRWDT
....................                   output_bit(P485ctrl,0);
046FA:  BCF    F8A.3
046FC:  BCF    F93.3
046FE:  MOVLB  6
....................                   
....................                }
....................             }
04700:  BRA    47CA
....................             else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
04702:  MOVF   x76,W
04704:  SUBLW  64
04706:  BNZ   47CA
04708:  MOVF   x77,F
0470A:  BNZ   47CA
....................             {
....................                Address = No_PointCount;
0470C:  MOVFF  678,70
....................                write_eeprom(0x1D,Address);   //Communication Address
04710:  MOVF   FF2,W
04712:  MOVWF  00
04714:  BCF    FF2.7
04716:  CLRF   FAA
04718:  MOVLW  1D
0471A:  MOVWF  FA9
0471C:  MOVFF  70,FA8
04720:  BCF    FA6.6
04722:  BCF    FA6.7
04724:  BSF    FA6.2
04726:  MOVLB  F
04728:  MOVLW  55
0472A:  MOVWF  FA7
0472C:  MOVLW  AA
0472E:  MOVWF  FA7
04730:  BSF    FA6.1
04732:  BTFSC  FA6.1
04734:  BRA    4732
04736:  BCF    FA6.2
04738:  MOVF   00,W
0473A:  IORWF  FF2,F
....................                
....................                TxD_Buff[0] = Address ;         //Address
0473C:  MOVFF  70,72
....................                TxD_Buff[1] = 0x05 ;         //Function Code
04740:  MOVLW  05
04742:  MOVLB  0
04744:  MOVWF  x73
....................                TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04746:  MOVFF  274,74
....................                TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0474A:  MOVFF  275,75
....................                TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
0474E:  MOVFF  276,76
....................                TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04752:  MOVFF  277,77
.................... 
....................                CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04756:  MOVLB  D
04758:  CLRF   xCE
0475A:  MOVLW  72
0475C:  MOVWF  xCD
0475E:  MOVLW  06
04760:  MOVWF  xCF
04762:  MOVLB  0
04764:  CALL   2546
.................... 
....................                TxD_Buff[6] = CRC_Hi ;
04768:  MOVFF  673,78
....................                TxD_Buff[7] = CRC_Lo ;
0476C:  MOVFF  672,79
.................... 
....................                output_bit(P485ctrl,1);
04770:  BSF    F8A.3
04772:  BCF    F93.3
....................                restart_wdt();
04774:  CLRWDT
....................                delay_ms(4);
04776:  MOVLW  04
04778:  MOVLB  D
0477A:  MOVWF  xCC
0477C:  MOVLB  0
0477E:  CALL   0A28
....................                restart_wdt();
04782:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
04784:  MOVF   x72,W
04786:  CALL   259C
....................                putc(TxD_Buff[1]) ;               //Function Code
0478A:  MOVF   x73,W
0478C:  CALL   259C
....................                putc(TxD_Buff[2]) ;               //Byte Count
04790:  MOVF   x74,W
04792:  CALL   259C
....................                putc(TxD_Buff[3]) ;
04796:  MOVF   x75,W
04798:  CALL   259C
....................                putc(TxD_Buff[4]) ;
0479C:  MOVF   x76,W
0479E:  CALL   259C
....................                putc(TxD_Buff[5]) ;
047A2:  MOVF   x77,W
047A4:  CALL   259C
....................                putc(TxD_Buff[6]) ;
047A8:  MOVF   x78,W
047AA:  CALL   259C
....................                putc(TxD_Buff[7]) ;
047AE:  MOVF   x79,W
047B0:  CALL   259C
....................                //putc(TxD_Buff[8]) ;
....................                //putc(TxD_Buff[9]) ;
.................... 
....................                restart_wdt();
047B4:  CLRWDT
....................                delay_ms(3);
047B6:  MOVLW  03
047B8:  MOVLB  D
047BA:  MOVWF  xCC
047BC:  MOVLB  0
047BE:  CALL   0A28
....................                restart_wdt();
047C2:  CLRWDT
....................                output_bit(P485ctrl,0);
047C4:  BCF    F8A.3
047C6:  BCF    F93.3
047C8:  MOVLB  6
.................... 
.................... 
....................                //save_addr();
....................             }
....................          }
047CA:  GOTO   6698
047CE:  MOVLB  2
....................          //--------------------------------------------------//
....................          
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
047D0:  MOVF   x73,W
047D2:  SUBLW  21
047D4:  BTFSS  FD8.2
047D6:  GOTO   513E
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
047DA:  MOVF   FF2,W
047DC:  MOVWF  00
047DE:  BCF    FF2.7
047E0:  CLRF   FAA
047E2:  CLRF   FA9
047E4:  MOVLW  0F
047E6:  MOVWF  FA8
047E8:  BCF    FA6.6
047EA:  BCF    FA6.7
047EC:  BSF    FA6.2
047EE:  MOVLB  F
047F0:  MOVLW  55
047F2:  MOVWF  FA7
047F4:  MOVLW  AA
047F6:  MOVWF  FA7
047F8:  BSF    FA6.1
047FA:  BTFSC  FA6.1
047FC:  BRA    47FA
047FE:  BCF    FA6.2
04800:  MOVF   00,W
04802:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Inputt Type
04804:  MOVFF  FF2,00
04808:  BCF    FF2.7
0480A:  CLRF   FAA
0480C:  MOVLW  01
0480E:  MOVWF  FA9
04810:  MOVFF  275,FA8
04814:  BCF    FA6.6
04816:  BCF    FA6.7
04818:  BSF    FA6.2
0481A:  MOVLW  55
0481C:  MOVWF  FA7
0481E:  MOVLW  AA
04820:  MOVWF  FA7
04822:  BSF    FA6.1
04824:  BTFSC  FA6.1
04826:  BRA    4824
04828:  BCF    FA6.2
0482A:  MOVF   00,W
0482C:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
0482E:  MOVFF  FF2,00
04832:  BCF    FF2.7
04834:  CLRF   FAA
04836:  MOVLW  02
04838:  MOVWF  FA9
0483A:  MOVFF  276,FA8
0483E:  BCF    FA6.6
04840:  BCF    FA6.7
04842:  BSF    FA6.2
04844:  MOVLW  55
04846:  MOVWF  FA7
04848:  MOVLW  AA
0484A:  MOVWF  FA7
0484C:  BSF    FA6.1
0484E:  BTFSC  FA6.1
04850:  BRA    484E
04852:  BCF    FA6.2
04854:  MOVF   00,W
04856:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
04858:  MOVFF  FF2,00
0485C:  BCF    FF2.7
0485E:  CLRF   FAA
04860:  MOVLW  03
04862:  MOVWF  FA9
04864:  MOVFF  277,FA8
04868:  BCF    FA6.6
0486A:  BCF    FA6.7
0486C:  BSF    FA6.2
0486E:  MOVLW  55
04870:  MOVWF  FA7
04872:  MOVLW  AA
04874:  MOVWF  FA7
04876:  BSF    FA6.1
04878:  BTFSC  FA6.1
0487A:  BRA    4878
0487C:  BCF    FA6.2
0487E:  MOVF   00,W
04880:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
04882:  MOVFF  FF2,00
04886:  BCF    FF2.7
04888:  CLRF   FAA
0488A:  MOVLW  04
0488C:  MOVWF  FA9
0488E:  MOVFF  278,FA8
04892:  BCF    FA6.6
04894:  BCF    FA6.7
04896:  BSF    FA6.2
04898:  MOVLW  55
0489A:  MOVWF  FA7
0489C:  MOVLW  AA
0489E:  MOVWF  FA7
048A0:  BSF    FA6.1
048A2:  BTFSC  FA6.1
048A4:  BRA    48A2
048A6:  BCF    FA6.2
048A8:  MOVF   00,W
048AA:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
048AC:  MOVFF  FF2,00
048B0:  BCF    FF2.7
048B2:  CLRF   FAA
048B4:  MOVLW  05
048B6:  MOVWF  FA9
048B8:  MOVFF  279,FA8
048BC:  BCF    FA6.6
048BE:  BCF    FA6.7
048C0:  BSF    FA6.2
048C2:  MOVLW  55
048C4:  MOVWF  FA7
048C6:  MOVLW  AA
048C8:  MOVWF  FA7
048CA:  BSF    FA6.1
048CC:  BTFSC  FA6.1
048CE:  BRA    48CC
048D0:  BCF    FA6.2
048D2:  MOVF   00,W
048D4:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
048D6:  MOVFF  FF2,00
048DA:  BCF    FF2.7
048DC:  CLRF   FAA
048DE:  MOVLW  06
048E0:  MOVWF  FA9
048E2:  MOVFF  27A,FA8
048E6:  BCF    FA6.6
048E8:  BCF    FA6.7
048EA:  BSF    FA6.2
048EC:  MOVLW  55
048EE:  MOVWF  FA7
048F0:  MOVLW  AA
048F2:  MOVWF  FA7
048F4:  BSF    FA6.1
048F6:  BTFSC  FA6.1
048F8:  BRA    48F6
048FA:  BCF    FA6.2
048FC:  MOVF   00,W
048FE:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
04900:  MOVFF  FF2,00
04904:  BCF    FF2.7
04906:  CLRF   FAA
04908:  MOVLW  07
0490A:  MOVWF  FA9
0490C:  MOVFF  27B,FA8
04910:  BCF    FA6.6
04912:  BCF    FA6.7
04914:  BSF    FA6.2
04916:  MOVLW  55
04918:  MOVWF  FA7
0491A:  MOVLW  AA
0491C:  MOVWF  FA7
0491E:  BSF    FA6.1
04920:  BTFSC  FA6.1
04922:  BRA    4920
04924:  BCF    FA6.2
04926:  MOVF   00,W
04928:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
0492A:  MOVFF  FF2,00
0492E:  BCF    FF2.7
04930:  CLRF   FAA
04932:  MOVLW  08
04934:  MOVWF  FA9
04936:  MOVFF  27C,FA8
0493A:  BCF    FA6.6
0493C:  BCF    FA6.7
0493E:  BSF    FA6.2
04940:  MOVLW  55
04942:  MOVWF  FA7
04944:  MOVLW  AA
04946:  MOVWF  FA7
04948:  BSF    FA6.1
0494A:  BTFSC  FA6.1
0494C:  BRA    494A
0494E:  BCF    FA6.2
04950:  MOVF   00,W
04952:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
04954:  MOVFF  FF2,00
04958:  BCF    FF2.7
0495A:  CLRF   FAA
0495C:  MOVLW  09
0495E:  MOVWF  FA9
04960:  MOVFF  27D,FA8
04964:  BCF    FA6.6
04966:  BCF    FA6.7
04968:  BSF    FA6.2
0496A:  MOVLW  55
0496C:  MOVWF  FA7
0496E:  MOVLW  AA
04970:  MOVWF  FA7
04972:  BSF    FA6.1
04974:  BTFSC  FA6.1
04976:  BRA    4974
04978:  BCF    FA6.2
0497A:  MOVF   00,W
0497C:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
0497E:  MOVFF  FF2,00
04982:  BCF    FF2.7
04984:  CLRF   FAA
04986:  MOVLW  0A
04988:  MOVWF  FA9
0498A:  MOVFF  27E,FA8
0498E:  BCF    FA6.6
04990:  BCF    FA6.7
04992:  BSF    FA6.2
04994:  MOVLW  55
04996:  MOVWF  FA7
04998:  MOVLW  AA
0499A:  MOVWF  FA7
0499C:  BSF    FA6.1
0499E:  BTFSC  FA6.1
049A0:  BRA    499E
049A2:  BCF    FA6.2
049A4:  MOVF   00,W
049A6:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
049A8:  MOVFF  FF2,00
049AC:  BCF    FF2.7
049AE:  CLRF   FAA
049B0:  MOVLW  0B
049B2:  MOVWF  FA9
049B4:  MOVFF  27F,FA8
049B8:  BCF    FA6.6
049BA:  BCF    FA6.7
049BC:  BSF    FA6.2
049BE:  MOVLW  55
049C0:  MOVWF  FA7
049C2:  MOVLW  AA
049C4:  MOVWF  FA7
049C6:  BSF    FA6.1
049C8:  BTFSC  FA6.1
049CA:  BRA    49C8
049CC:  BCF    FA6.2
049CE:  MOVF   00,W
049D0:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
049D2:  MOVFF  FF2,00
049D6:  BCF    FF2.7
049D8:  CLRF   FAA
049DA:  MOVLW  0C
049DC:  MOVWF  FA9
049DE:  MOVFF  280,FA8
049E2:  BCF    FA6.6
049E4:  BCF    FA6.7
049E6:  BSF    FA6.2
049E8:  MOVLW  55
049EA:  MOVWF  FA7
049EC:  MOVLW  AA
049EE:  MOVWF  FA7
049F0:  BSF    FA6.1
049F2:  BTFSC  FA6.1
049F4:  BRA    49F2
049F6:  BCF    FA6.2
049F8:  MOVF   00,W
049FA:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
049FC:  MOVFF  FF2,00
04A00:  BCF    FF2.7
04A02:  CLRF   FAA
04A04:  MOVLW  0D
04A06:  MOVWF  FA9
04A08:  MOVFF  281,FA8
04A0C:  BCF    FA6.6
04A0E:  BCF    FA6.7
04A10:  BSF    FA6.2
04A12:  MOVLW  55
04A14:  MOVWF  FA7
04A16:  MOVLW  AA
04A18:  MOVWF  FA7
04A1A:  BSF    FA6.1
04A1C:  BTFSC  FA6.1
04A1E:  BRA    4A1C
04A20:  BCF    FA6.2
04A22:  MOVF   00,W
04A24:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
04A26:  MOVFF  FF2,00
04A2A:  BCF    FF2.7
04A2C:  CLRF   FAA
04A2E:  MOVLW  0E
04A30:  MOVWF  FA9
04A32:  MOVFF  282,FA8
04A36:  BCF    FA6.6
04A38:  BCF    FA6.7
04A3A:  BSF    FA6.2
04A3C:  MOVLW  55
04A3E:  MOVWF  FA7
04A40:  MOVLW  AA
04A42:  MOVWF  FA7
04A44:  BSF    FA6.1
04A46:  BTFSC  FA6.1
04A48:  BRA    4A46
04A4A:  BCF    FA6.2
04A4C:  MOVF   00,W
04A4E:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
04A50:  MOVFF  FF2,00
04A54:  BCF    FF2.7
04A56:  CLRF   FAA
04A58:  MOVLW  0F
04A5A:  MOVWF  FA9
04A5C:  MOVFF  283,FA8
04A60:  BCF    FA6.6
04A62:  BCF    FA6.7
04A64:  BSF    FA6.2
04A66:  MOVLW  55
04A68:  MOVWF  FA7
04A6A:  MOVLW  AA
04A6C:  MOVWF  FA7
04A6E:  BSF    FA6.1
04A70:  BTFSC  FA6.1
04A72:  BRA    4A70
04A74:  BCF    FA6.2
04A76:  MOVF   00,W
04A78:  IORWF  FF2,F
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
04A7A:  MOVFF  FF2,00
04A7E:  BCF    FF2.7
04A80:  CLRF   FAA
04A82:  MOVLW  10
04A84:  MOVWF  FA9
04A86:  MOVFF  284,FA8
04A8A:  BCF    FA6.6
04A8C:  BCF    FA6.7
04A8E:  BSF    FA6.2
04A90:  MOVLW  55
04A92:  MOVWF  FA7
04A94:  MOVLW  AA
04A96:  MOVWF  FA7
04A98:  BSF    FA6.1
04A9A:  BTFSC  FA6.1
04A9C:  BRA    4A9A
04A9E:  BCF    FA6.2
04AA0:  MOVF   00,W
04AA2:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
04AA4:  MOVFF  FF2,00
04AA8:  BCF    FF2.7
04AAA:  CLRF   FAA
04AAC:  MOVLW  11
04AAE:  MOVWF  FA9
04AB0:  MOVFF  285,FA8
04AB4:  BCF    FA6.6
04AB6:  BCF    FA6.7
04AB8:  BSF    FA6.2
04ABA:  MOVLW  55
04ABC:  MOVWF  FA7
04ABE:  MOVLW  AA
04AC0:  MOVWF  FA7
04AC2:  BSF    FA6.1
04AC4:  BTFSC  FA6.1
04AC6:  BRA    4AC4
04AC8:  BCF    FA6.2
04ACA:  MOVF   00,W
04ACC:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
04ACE:  MOVFF  FF2,00
04AD2:  BCF    FF2.7
04AD4:  CLRF   FAA
04AD6:  MOVLW  12
04AD8:  MOVWF  FA9
04ADA:  MOVFF  286,FA8
04ADE:  BCF    FA6.6
04AE0:  BCF    FA6.7
04AE2:  BSF    FA6.2
04AE4:  MOVLW  55
04AE6:  MOVWF  FA7
04AE8:  MOVLW  AA
04AEA:  MOVWF  FA7
04AEC:  BSF    FA6.1
04AEE:  BTFSC  FA6.1
04AF0:  BRA    4AEE
04AF2:  BCF    FA6.2
04AF4:  MOVF   00,W
04AF6:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
04AF8:  MOVFF  FF2,00
04AFC:  BCF    FF2.7
04AFE:  CLRF   FAA
04B00:  MOVLW  13
04B02:  MOVWF  FA9
04B04:  MOVFF  287,FA8
04B08:  BCF    FA6.6
04B0A:  BCF    FA6.7
04B0C:  BSF    FA6.2
04B0E:  MOVLW  55
04B10:  MOVWF  FA7
04B12:  MOVLW  AA
04B14:  MOVWF  FA7
04B16:  BSF    FA6.1
04B18:  BTFSC  FA6.1
04B1A:  BRA    4B18
04B1C:  BCF    FA6.2
04B1E:  MOVF   00,W
04B20:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
04B22:  MOVFF  FF2,00
04B26:  BCF    FF2.7
04B28:  CLRF   FAA
04B2A:  MOVLW  14
04B2C:  MOVWF  FA9
04B2E:  MOVFF  288,FA8
04B32:  BCF    FA6.6
04B34:  BCF    FA6.7
04B36:  BSF    FA6.2
04B38:  MOVLW  55
04B3A:  MOVWF  FA7
04B3C:  MOVLW  AA
04B3E:  MOVWF  FA7
04B40:  BSF    FA6.1
04B42:  BTFSC  FA6.1
04B44:  BRA    4B42
04B46:  BCF    FA6.2
04B48:  MOVF   00,W
04B4A:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
04B4C:  MOVFF  FF2,00
04B50:  BCF    FF2.7
04B52:  CLRF   FAA
04B54:  MOVLW  15
04B56:  MOVWF  FA9
04B58:  MOVFF  289,FA8
04B5C:  BCF    FA6.6
04B5E:  BCF    FA6.7
04B60:  BSF    FA6.2
04B62:  MOVLW  55
04B64:  MOVWF  FA7
04B66:  MOVLW  AA
04B68:  MOVWF  FA7
04B6A:  BSF    FA6.1
04B6C:  BTFSC  FA6.1
04B6E:  BRA    4B6C
04B70:  BCF    FA6.2
04B72:  MOVF   00,W
04B74:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
04B76:  MOVFF  FF2,00
04B7A:  BCF    FF2.7
04B7C:  CLRF   FAA
04B7E:  MOVLW  16
04B80:  MOVWF  FA9
04B82:  MOVFF  28A,FA8
04B86:  BCF    FA6.6
04B88:  BCF    FA6.7
04B8A:  BSF    FA6.2
04B8C:  MOVLW  55
04B8E:  MOVWF  FA7
04B90:  MOVLW  AA
04B92:  MOVWF  FA7
04B94:  BSF    FA6.1
04B96:  BTFSC  FA6.1
04B98:  BRA    4B96
04B9A:  BCF    FA6.2
04B9C:  MOVF   00,W
04B9E:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
04BA0:  MOVFF  FF2,00
04BA4:  BCF    FF2.7
04BA6:  CLRF   FAA
04BA8:  MOVLW  17
04BAA:  MOVWF  FA9
04BAC:  MOVFF  28B,FA8
04BB0:  BCF    FA6.6
04BB2:  BCF    FA6.7
04BB4:  BSF    FA6.2
04BB6:  MOVLW  55
04BB8:  MOVWF  FA7
04BBA:  MOVLW  AA
04BBC:  MOVWF  FA7
04BBE:  BSF    FA6.1
04BC0:  BTFSC  FA6.1
04BC2:  BRA    4BC0
04BC4:  BCF    FA6.2
04BC6:  MOVF   00,W
04BC8:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
04BCA:  MOVFF  FF2,00
04BCE:  BCF    FF2.7
04BD0:  CLRF   FAA
04BD2:  MOVLW  18
04BD4:  MOVWF  FA9
04BD6:  MOVFF  28C,FA8
04BDA:  BCF    FA6.6
04BDC:  BCF    FA6.7
04BDE:  BSF    FA6.2
04BE0:  MOVLW  55
04BE2:  MOVWF  FA7
04BE4:  MOVLW  AA
04BE6:  MOVWF  FA7
04BE8:  BSF    FA6.1
04BEA:  BTFSC  FA6.1
04BEC:  BRA    4BEA
04BEE:  BCF    FA6.2
04BF0:  MOVF   00,W
04BF2:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
04BF4:  MOVFF  FF2,00
04BF8:  BCF    FF2.7
04BFA:  CLRF   FAA
04BFC:  MOVLW  19
04BFE:  MOVWF  FA9
04C00:  MOVFF  28D,FA8
04C04:  BCF    FA6.6
04C06:  BCF    FA6.7
04C08:  BSF    FA6.2
04C0A:  MOVLW  55
04C0C:  MOVWF  FA7
04C0E:  MOVLW  AA
04C10:  MOVWF  FA7
04C12:  BSF    FA6.1
04C14:  BTFSC  FA6.1
04C16:  BRA    4C14
04C18:  BCF    FA6.2
04C1A:  MOVF   00,W
04C1C:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
04C1E:  MOVFF  FF2,00
04C22:  BCF    FF2.7
04C24:  CLRF   FAA
04C26:  MOVLW  1A
04C28:  MOVWF  FA9
04C2A:  MOVFF  28E,FA8
04C2E:  BCF    FA6.6
04C30:  BCF    FA6.7
04C32:  BSF    FA6.2
04C34:  MOVLW  55
04C36:  MOVWF  FA7
04C38:  MOVLW  AA
04C3A:  MOVWF  FA7
04C3C:  BSF    FA6.1
04C3E:  BTFSC  FA6.1
04C40:  BRA    4C3E
04C42:  BCF    FA6.2
04C44:  MOVF   00,W
04C46:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
04C48:  MOVFF  FF2,00
04C4C:  BCF    FF2.7
04C4E:  CLRF   FAA
04C50:  MOVLW  1B
04C52:  MOVWF  FA9
04C54:  MOVFF  28F,FA8
04C58:  BCF    FA6.6
04C5A:  BCF    FA6.7
04C5C:  BSF    FA6.2
04C5E:  MOVLW  55
04C60:  MOVWF  FA7
04C62:  MOVLW  AA
04C64:  MOVWF  FA7
04C66:  BSF    FA6.1
04C68:  BTFSC  FA6.1
04C6A:  BRA    4C68
04C6C:  BCF    FA6.2
04C6E:  MOVF   00,W
04C70:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //FaultDelayTime
04C72:  MOVFF  FF2,00
04C76:  BCF    FF2.7
04C78:  CLRF   FAA
04C7A:  MOVLW  1C
04C7C:  MOVWF  FA9
04C7E:  MOVFF  290,FA8
04C82:  BCF    FA6.6
04C84:  BCF    FA6.7
04C86:  BSF    FA6.2
04C88:  MOVLW  55
04C8A:  MOVWF  FA7
04C8C:  MOVLW  AA
04C8E:  MOVWF  FA7
04C90:  BSF    FA6.1
04C92:  BTFSC  FA6.1
04C94:  BRA    4C92
04C96:  BCF    FA6.2
04C98:  MOVF   00,W
04C9A:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
04C9C:  MOVFF  FF2,00
04CA0:  BCF    FF2.7
04CA2:  CLRF   FAA
04CA4:  MOVLW  1D
04CA6:  MOVWF  FA9
04CA8:  MOVFF  291,FA8
04CAC:  BCF    FA6.6
04CAE:  BCF    FA6.7
04CB0:  BSF    FA6.2
04CB2:  MOVLW  55
04CB4:  MOVWF  FA7
04CB6:  MOVLW  AA
04CB8:  MOVWF  FA7
04CBA:  BSF    FA6.1
04CBC:  BTFSC  FA6.1
04CBE:  BRA    4CBC
04CC0:  BCF    FA6.2
04CC2:  MOVF   00,W
04CC4:  IORWF  FF2,F
....................             
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Communication Address
04CC6:  MOVFF  FF2,00
04CCA:  BCF    FF2.7
04CCC:  CLRF   FAA
04CCE:  MOVLW  1E
04CD0:  MOVWF  FA9
04CD2:  MOVFF  292,FA8
04CD6:  BCF    FA6.6
04CD8:  BCF    FA6.7
04CDA:  BSF    FA6.2
04CDC:  MOVLW  55
04CDE:  MOVWF  FA7
04CE0:  MOVLW  AA
04CE2:  MOVWF  FA7
04CE4:  BSF    FA6.1
04CE6:  BTFSC  FA6.1
04CE8:  BRA    4CE6
04CEA:  BCF    FA6.2
04CEC:  MOVF   00,W
04CEE:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Communication Address
04CF0:  MOVFF  FF2,00
04CF4:  BCF    FF2.7
04CF6:  CLRF   FAA
04CF8:  MOVLW  1F
04CFA:  MOVWF  FA9
04CFC:  MOVFF  293,FA8
04D00:  BCF    FA6.6
04D02:  BCF    FA6.7
04D04:  BSF    FA6.2
04D06:  MOVLW  55
04D08:  MOVWF  FA7
04D0A:  MOVLW  AA
04D0C:  MOVWF  FA7
04D0E:  BSF    FA6.1
04D10:  BTFSC  FA6.1
04D12:  BRA    4D10
04D14:  BCF    FA6.2
04D16:  MOVF   00,W
04D18:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Communication Address
04D1A:  MOVFF  FF2,00
04D1E:  BCF    FF2.7
04D20:  CLRF   FAA
04D22:  MOVLW  20
04D24:  MOVWF  FA9
04D26:  MOVFF  294,FA8
04D2A:  BCF    FA6.6
04D2C:  BCF    FA6.7
04D2E:  BSF    FA6.2
04D30:  MOVLW  55
04D32:  MOVWF  FA7
04D34:  MOVLW  AA
04D36:  MOVWF  FA7
04D38:  BSF    FA6.1
04D3A:  BTFSC  FA6.1
04D3C:  BRA    4D3A
04D3E:  BCF    FA6.2
04D40:  MOVF   00,W
04D42:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Communication Address
04D44:  MOVFF  FF2,00
04D48:  BCF    FF2.7
04D4A:  CLRF   FAA
04D4C:  MOVLW  21
04D4E:  MOVWF  FA9
04D50:  MOVFF  295,FA8
04D54:  BCF    FA6.6
04D56:  BCF    FA6.7
04D58:  BSF    FA6.2
04D5A:  MOVLW  55
04D5C:  MOVWF  FA7
04D5E:  MOVLW  AA
04D60:  MOVWF  FA7
04D62:  BSF    FA6.1
04D64:  BTFSC  FA6.1
04D66:  BRA    4D64
04D68:  BCF    FA6.2
04D6A:  MOVF   00,W
04D6C:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Communication Address
04D6E:  MOVFF  FF2,00
04D72:  BCF    FF2.7
04D74:  CLRF   FAA
04D76:  MOVLW  22
04D78:  MOVWF  FA9
04D7A:  MOVFF  296,FA8
04D7E:  BCF    FA6.6
04D80:  BCF    FA6.7
04D82:  BSF    FA6.2
04D84:  MOVLW  55
04D86:  MOVWF  FA7
04D88:  MOVLW  AA
04D8A:  MOVWF  FA7
04D8C:  BSF    FA6.1
04D8E:  BTFSC  FA6.1
04D90:  BRA    4D8E
04D92:  BCF    FA6.2
04D94:  MOVF   00,W
04D96:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Communication Address
04D98:  MOVFF  FF2,00
04D9C:  BCF    FF2.7
04D9E:  CLRF   FAA
04DA0:  MOVLW  23
04DA2:  MOVWF  FA9
04DA4:  MOVFF  297,FA8
04DA8:  BCF    FA6.6
04DAA:  BCF    FA6.7
04DAC:  BSF    FA6.2
04DAE:  MOVLW  55
04DB0:  MOVWF  FA7
04DB2:  MOVLW  AA
04DB4:  MOVWF  FA7
04DB6:  BSF    FA6.1
04DB8:  BTFSC  FA6.1
04DBA:  BRA    4DB8
04DBC:  BCF    FA6.2
04DBE:  MOVF   00,W
04DC0:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Communication Address
04DC2:  MOVFF  FF2,00
04DC6:  BCF    FF2.7
04DC8:  CLRF   FAA
04DCA:  MOVLW  24
04DCC:  MOVWF  FA9
04DCE:  MOVFF  298,FA8
04DD2:  BCF    FA6.6
04DD4:  BCF    FA6.7
04DD6:  BSF    FA6.2
04DD8:  MOVLW  55
04DDA:  MOVWF  FA7
04DDC:  MOVLW  AA
04DDE:  MOVWF  FA7
04DE0:  BSF    FA6.1
04DE2:  BTFSC  FA6.1
04DE4:  BRA    4DE2
04DE6:  BCF    FA6.2
04DE8:  MOVF   00,W
04DEA:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Communication Address
04DEC:  MOVFF  FF2,00
04DF0:  BCF    FF2.7
04DF2:  CLRF   FAA
04DF4:  MOVLW  25
04DF6:  MOVWF  FA9
04DF8:  MOVFF  299,FA8
04DFC:  BCF    FA6.6
04DFE:  BCF    FA6.7
04E00:  BSF    FA6.2
04E02:  MOVLW  55
04E04:  MOVWF  FA7
04E06:  MOVLW  AA
04E08:  MOVWF  FA7
04E0A:  BSF    FA6.1
04E0C:  BTFSC  FA6.1
04E0E:  BRA    4E0C
04E10:  BCF    FA6.2
04E12:  MOVF   00,W
04E14:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Communication Address
04E16:  MOVFF  FF2,00
04E1A:  BCF    FF2.7
04E1C:  CLRF   FAA
04E1E:  MOVLW  26
04E20:  MOVWF  FA9
04E22:  MOVFF  29A,FA8
04E26:  BCF    FA6.6
04E28:  BCF    FA6.7
04E2A:  BSF    FA6.2
04E2C:  MOVLW  55
04E2E:  MOVWF  FA7
04E30:  MOVLW  AA
04E32:  MOVWF  FA7
04E34:  BSF    FA6.1
04E36:  BTFSC  FA6.1
04E38:  BRA    4E36
04E3A:  BCF    FA6.2
04E3C:  MOVF   00,W
04E3E:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Communication Address
04E40:  MOVFF  FF2,00
04E44:  BCF    FF2.7
04E46:  CLRF   FAA
04E48:  MOVLW  27
04E4A:  MOVWF  FA9
04E4C:  MOVFF  29B,FA8
04E50:  BCF    FA6.6
04E52:  BCF    FA6.7
04E54:  BSF    FA6.2
04E56:  MOVLW  55
04E58:  MOVWF  FA7
04E5A:  MOVLW  AA
04E5C:  MOVWF  FA7
04E5E:  BSF    FA6.1
04E60:  BTFSC  FA6.1
04E62:  BRA    4E60
04E64:  BCF    FA6.2
04E66:  MOVF   00,W
04E68:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Communication Address
04E6A:  MOVFF  FF2,00
04E6E:  BCF    FF2.7
04E70:  CLRF   FAA
04E72:  MOVLW  28
04E74:  MOVWF  FA9
04E76:  MOVFF  29C,FA8
04E7A:  BCF    FA6.6
04E7C:  BCF    FA6.7
04E7E:  BSF    FA6.2
04E80:  MOVLW  55
04E82:  MOVWF  FA7
04E84:  MOVLW  AA
04E86:  MOVWF  FA7
04E88:  BSF    FA6.1
04E8A:  BTFSC  FA6.1
04E8C:  BRA    4E8A
04E8E:  BCF    FA6.2
04E90:  MOVF   00,W
04E92:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Communication Address
04E94:  MOVFF  FF2,00
04E98:  BCF    FF2.7
04E9A:  CLRF   FAA
04E9C:  MOVLW  29
04E9E:  MOVWF  FA9
04EA0:  MOVFF  29D,FA8
04EA4:  BCF    FA6.6
04EA6:  BCF    FA6.7
04EA8:  BSF    FA6.2
04EAA:  MOVLW  55
04EAC:  MOVWF  FA7
04EAE:  MOVLW  AA
04EB0:  MOVWF  FA7
04EB2:  BSF    FA6.1
04EB4:  BTFSC  FA6.1
04EB6:  BRA    4EB4
04EB8:  BCF    FA6.2
04EBA:  MOVF   00,W
04EBC:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Communication Address
04EBE:  MOVFF  FF2,00
04EC2:  BCF    FF2.7
04EC4:  CLRF   FAA
04EC6:  MOVLW  2A
04EC8:  MOVWF  FA9
04ECA:  MOVFF  29E,FA8
04ECE:  BCF    FA6.6
04ED0:  BCF    FA6.7
04ED2:  BSF    FA6.2
04ED4:  MOVLW  55
04ED6:  MOVWF  FA7
04ED8:  MOVLW  AA
04EDA:  MOVWF  FA7
04EDC:  BSF    FA6.1
04EDE:  BTFSC  FA6.1
04EE0:  BRA    4EDE
04EE2:  BCF    FA6.2
04EE4:  MOVF   00,W
04EE6:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Communication Address
04EE8:  MOVFF  FF2,00
04EEC:  BCF    FF2.7
04EEE:  CLRF   FAA
04EF0:  MOVLW  2B
04EF2:  MOVWF  FA9
04EF4:  MOVFF  29F,FA8
04EF8:  BCF    FA6.6
04EFA:  BCF    FA6.7
04EFC:  BSF    FA6.2
04EFE:  MOVLW  55
04F00:  MOVWF  FA7
04F02:  MOVLW  AA
04F04:  MOVWF  FA7
04F06:  BSF    FA6.1
04F08:  BTFSC  FA6.1
04F0A:  BRA    4F08
04F0C:  BCF    FA6.2
04F0E:  MOVF   00,W
04F10:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Communication Address
04F12:  MOVFF  FF2,00
04F16:  BCF    FF2.7
04F18:  CLRF   FAA
04F1A:  MOVLW  2C
04F1C:  MOVWF  FA9
04F1E:  MOVFF  2A0,FA8
04F22:  BCF    FA6.6
04F24:  BCF    FA6.7
04F26:  BSF    FA6.2
04F28:  MOVLW  55
04F2A:  MOVWF  FA7
04F2C:  MOVLW  AA
04F2E:  MOVWF  FA7
04F30:  BSF    FA6.1
04F32:  BTFSC  FA6.1
04F34:  BRA    4F32
04F36:  BCF    FA6.2
04F38:  MOVF   00,W
04F3A:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Communication Address
04F3C:  MOVFF  FF2,00
04F40:  BCF    FF2.7
04F42:  CLRF   FAA
04F44:  MOVLW  2D
04F46:  MOVWF  FA9
04F48:  MOVFF  2A1,FA8
04F4C:  BCF    FA6.6
04F4E:  BCF    FA6.7
04F50:  BSF    FA6.2
04F52:  MOVLW  55
04F54:  MOVWF  FA7
04F56:  MOVLW  AA
04F58:  MOVWF  FA7
04F5A:  BSF    FA6.1
04F5C:  BTFSC  FA6.1
04F5E:  BRA    4F5C
04F60:  BCF    FA6.2
04F62:  MOVF   00,W
04F64:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Communication Address
04F66:  MOVFF  FF2,00
04F6A:  BCF    FF2.7
04F6C:  CLRF   FAA
04F6E:  MOVLW  2E
04F70:  MOVWF  FA9
04F72:  MOVFF  2A2,FA8
04F76:  BCF    FA6.6
04F78:  BCF    FA6.7
04F7A:  BSF    FA6.2
04F7C:  MOVLW  55
04F7E:  MOVWF  FA7
04F80:  MOVLW  AA
04F82:  MOVWF  FA7
04F84:  BSF    FA6.1
04F86:  BTFSC  FA6.1
04F88:  BRA    4F86
04F8A:  BCF    FA6.2
04F8C:  MOVF   00,W
04F8E:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Communication Address
04F90:  MOVFF  FF2,00
04F94:  BCF    FF2.7
04F96:  CLRF   FAA
04F98:  MOVLW  2F
04F9A:  MOVWF  FA9
04F9C:  MOVFF  2A3,FA8
04FA0:  BCF    FA6.6
04FA2:  BCF    FA6.7
04FA4:  BSF    FA6.2
04FA6:  MOVLW  55
04FA8:  MOVWF  FA7
04FAA:  MOVLW  AA
04FAC:  MOVWF  FA7
04FAE:  BSF    FA6.1
04FB0:  BTFSC  FA6.1
04FB2:  BRA    4FB0
04FB4:  BCF    FA6.2
04FB6:  MOVF   00,W
04FB8:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Communication Address
04FBA:  MOVFF  FF2,00
04FBE:  BCF    FF2.7
04FC0:  CLRF   FAA
04FC2:  MOVLW  30
04FC4:  MOVWF  FA9
04FC6:  MOVFF  2A4,FA8
04FCA:  BCF    FA6.6
04FCC:  BCF    FA6.7
04FCE:  BSF    FA6.2
04FD0:  MOVLW  55
04FD2:  MOVWF  FA7
04FD4:  MOVLW  AA
04FD6:  MOVWF  FA7
04FD8:  BSF    FA6.1
04FDA:  BTFSC  FA6.1
04FDC:  BRA    4FDA
04FDE:  BCF    FA6.2
04FE0:  MOVF   00,W
04FE2:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Communication Address
04FE4:  MOVFF  FF2,00
04FE8:  BCF    FF2.7
04FEA:  CLRF   FAA
04FEC:  MOVLW  31
04FEE:  MOVWF  FA9
04FF0:  MOVFF  2A5,FA8
04FF4:  BCF    FA6.6
04FF6:  BCF    FA6.7
04FF8:  BSF    FA6.2
04FFA:  MOVLW  55
04FFC:  MOVWF  FA7
04FFE:  MOVLW  AA
05000:  MOVWF  FA7
05002:  BSF    FA6.1
05004:  BTFSC  FA6.1
05006:  BRA    5004
05008:  BCF    FA6.2
0500A:  MOVF   00,W
0500C:  IORWF  FF2,F
....................             
....................             int16  a = 0; 
....................             unsigned char  phonenum;
0500E:  MOVLB  D
05010:  CLRF   xC4
05012:  CLRF   xC3
....................             for(; ; a++)
....................             {
....................                restart_wdt();
05014:  CLRWDT
....................                phonenum = RxD_Buff[52 + a];
05016:  MOVLW  A6
05018:  ADDWF  xC3,W
0501A:  MOVWF  FE9
0501C:  MOVLW  02
0501E:  ADDWFC xC4,W
05020:  MOVWF  FEA
05022:  MOVFF  FEF,DC5
....................                if((phonenum == 0x0D) || (a > 15))
05026:  MOVF   xC5,W
05028:  SUBLW  0D
0502A:  BZ    5036
0502C:  MOVF   xC4,F
0502E:  BNZ   5036
05030:  MOVF   xC3,W
05032:  SUBLW  0F
05034:  BC    5084
....................                {
....................                   sms_phonenumber[a] =  '\0' ;
05036:  MOVLW  81
05038:  ADDWF  xC3,W
0503A:  MOVWF  FE9
0503C:  MOVLW  0A
0503E:  ADDWFC xC4,W
05040:  MOVWF  FEA
05042:  CLRF   FEF
....................                   write_eeprom(0x32+a,phonenum);
05044:  MOVLW  32
05046:  ADDWF  xC3,W
05048:  MOVWF  xCC
0504A:  MOVLW  00
0504C:  ADDWFC xC4,W
0504E:  MOVWF  xCD
05050:  MOVF   FF2,W
05052:  MOVWF  00
05054:  BCF    FF2.7
05056:  MOVFF  DCD,FAA
0505A:  MOVFF  DCC,FA9
0505E:  MOVFF  DC5,FA8
05062:  BCF    FA6.6
05064:  BCF    FA6.7
05066:  BSF    FA6.2
05068:  MOVLB  F
0506A:  MOVLW  55
0506C:  MOVWF  FA7
0506E:  MOVLW  AA
05070:  MOVWF  FA7
05072:  BSF    FA6.1
05074:  BTFSC  FA6.1
05076:  BRA    5074
05078:  BCF    FA6.2
0507A:  MOVF   00,W
0507C:  IORWF  FF2,F
....................                   break;
0507E:  BRA    50DA
....................                }
05080:  BRA    50CE
05082:  MOVLB  D
....................                else
....................                {
....................                   sms_phonenumber[a] = phonenum;
05084:  MOVLW  81
05086:  ADDWF  xC3,W
05088:  MOVWF  FE9
0508A:  MOVLW  0A
0508C:  ADDWFC xC4,W
0508E:  MOVWF  FEA
05090:  MOVFF  DC5,FEF
....................                   
....................                   write_eeprom(0x32+a,phonenum);
05094:  MOVLW  32
05096:  ADDWF  xC3,W
05098:  MOVWF  xCC
0509A:  MOVLW  00
0509C:  ADDWFC xC4,W
0509E:  MOVWF  xCD
050A0:  MOVF   FF2,W
050A2:  MOVWF  00
050A4:  BCF    FF2.7
050A6:  MOVFF  DCD,FAA
050AA:  MOVFF  DCC,FA9
050AE:  MOVFF  DC5,FA8
050B2:  BCF    FA6.6
050B4:  BCF    FA6.7
050B6:  BSF    FA6.2
050B8:  MOVLB  F
050BA:  MOVLW  55
050BC:  MOVWF  FA7
050BE:  MOVLW  AA
050C0:  MOVWF  FA7
050C2:  BSF    FA6.1
050C4:  BTFSC  FA6.1
050C6:  BRA    50C4
050C8:  BCF    FA6.2
050CA:  MOVF   00,W
050CC:  IORWF  FF2,F
....................                }
050CE:  MOVLB  D
050D0:  INCF   xC3,F
050D2:  BTFSC  FD8.2
050D4:  INCF   xC4,F
050D6:  BRA    5014
050D8:  MOVLB  F
....................             }
....................             
....................             TxD_Buff[0] = Address ;         //Address
050DA:  MOVFF  70,72
....................             TxD_Buff[1] = 0x21 ;            //return function code
050DE:  MOVLW  21
050E0:  MOVLB  0
050E2:  MOVWF  x73
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
050E4:  MOVLB  D
050E6:  CLRF   xCE
050E8:  MOVLW  72
050EA:  MOVWF  xCD
050EC:  MOVLW  02
050EE:  MOVWF  xCF
050F0:  MOVLB  0
050F2:  CALL   2546
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
050F6:  MOVFF  673,74
....................             TxD_Buff[3] = CRC_Lo ;
050FA:  MOVFF  672,75
.................... 
....................             output_bit(P485ctrl,1);
050FE:  BSF    F8A.3
05100:  BCF    F93.3
....................             delay_ms(10);
05102:  MOVLW  0A
05104:  MOVLB  D
05106:  MOVWF  xCC
05108:  MOVLB  0
0510A:  CALL   0A28
.................... 
....................             putc(Txd_Buff[0]);
0510E:  MOVF   x72,W
05110:  CALL   259C
....................             putc(Txd_Buff[1]);
05114:  MOVF   x73,W
05116:  CALL   259C
....................             putc(Txd_Buff[2]);
0511A:  MOVF   x74,W
0511C:  CALL   259C
....................             putc(Txd_Buff[3]);
05120:  MOVF   x75,W
05122:  CALL   259C
.................... 
....................             delay_ms(3);
05126:  MOVLW  03
05128:  MOVLB  D
0512A:  MOVWF  xCC
0512C:  MOVLB  0
0512E:  CALL   0A28
....................             output_bit(P485ctrl,0);
05132:  BCF    F8A.3
05134:  BCF    F93.3
....................             
....................             reset_cpu();
05136:  RESET
....................             //Read_Config(); //jj
....................          }
05138:  GOTO   6696
0513C:  MOVLB  2
....................          
....................          else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
0513E:  MOVF   x73,W
05140:  SUBLW  22
05142:  BTFSS  FD8.2
05144:  GOTO   6696
....................             {
....................                
....................                //SMS_Massage
....................                int16  i =4,j=0,k=0; //i =4 are first data from RxD_Buff[]
05148:  MOVLB  D
0514A:  CLRF   xC7
0514C:  MOVLW  04
0514E:  MOVWF  xC6
05150:  CLRF   xC9
05152:  CLRF   xC8
05154:  CLRF   xCB
05156:  CLRF   xCA
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05158:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0515A:  MOVLW  72
0515C:  ADDWF  xC6,W
0515E:  MOVWF  FE9
05160:  MOVLW  02
05162:  ADDWFC xC7,W
05164:  MOVWF  FEA
05166:  MOVF   FEF,W
05168:  SUBLW  0D
0516A:  BZ    5176
0516C:  MOVF   xC9,F
0516E:  BNZ   5176
05170:  MOVF   xC8,W
05172:  SUBLW  1E
05174:  BC    51B6
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05176:  MOVLW  5D
05178:  ADDWF  xC6,W
0517A:  MOVWF  xCC
0517C:  MOVLW  00
0517E:  ADDWFC xC7,W
05180:  MOVWF  xCD
05182:  MOVF   FF2,W
05184:  MOVWF  00
05186:  BCF    FF2.7
05188:  MOVFF  DCD,FAA
0518C:  MOVFF  DCC,FA9
05190:  MOVLW  0D
05192:  MOVWF  FA8
05194:  BCF    FA6.6
05196:  BCF    FA6.7
05198:  BSF    FA6.2
0519A:  MOVLB  F
0519C:  MOVLW  55
0519E:  MOVWF  FA7
051A0:  MOVLW  AA
051A2:  MOVWF  FA7
051A4:  BSF    FA6.1
051A6:  BTFSC  FA6.1
051A8:  BRA    51A6
051AA:  BCF    FA6.2
051AC:  MOVF   00,W
051AE:  IORWF  FF2,F
....................                      break;
051B0:  BRA    5240
....................                   }
051B2:  BRA    5228
051B4:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage1[j] = RxD_Buff[i];
051B6:  MOVLW  90
051B8:  ADDWF  xC8,W
051BA:  MOVWF  01
051BC:  MOVLW  0A
051BE:  ADDWFC xC9,W
051C0:  MOVWF  03
051C2:  MOVLW  72
051C4:  ADDWF  xC6,W
051C6:  MOVWF  FE9
051C8:  MOVLW  02
051CA:  ADDWFC xC7,W
051CC:  MOVWF  FEA
051CE:  MOVFF  FEF,DCE
051D2:  MOVFF  03,FEA
051D6:  MOVFF  01,FE9
051DA:  MOVFF  DCE,FEF
....................                      
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
051DE:  MOVLW  5D
051E0:  ADDWF  xC6,W
051E2:  MOVWF  xCC
051E4:  MOVLW  00
051E6:  ADDWFC xC7,W
051E8:  MOVWF  xCD
051EA:  MOVLW  72
051EC:  ADDWF  xC6,W
051EE:  MOVWF  FE9
051F0:  MOVLW  02
051F2:  ADDWFC xC7,W
051F4:  MOVWF  FEA
051F6:  MOVFF  FEF,DCE
051FA:  MOVF   FF2,W
051FC:  MOVWF  00
051FE:  BCF    FF2.7
05200:  MOVFF  DCD,FAA
05204:  MOVFF  DCC,FA9
05208:  MOVFF  DCE,FA8
0520C:  BCF    FA6.6
0520E:  BCF    FA6.7
05210:  BSF    FA6.2
05212:  MOVLB  F
05214:  MOVLW  55
05216:  MOVWF  FA7
05218:  MOVLW  AA
0521A:  MOVWF  FA7
0521C:  BSF    FA6.1
0521E:  BTFSC  FA6.1
05220:  BRA    521E
05222:  BCF    FA6.2
05224:  MOVF   00,W
05226:  IORWF  FF2,F
....................                   }
05228:  MOVLB  D
0522A:  MOVFF  DC7,03
0522E:  MOVF   xC6,W
05230:  INCF   xC6,F
05232:  BTFSC  FD8.2
05234:  INCF   xC7,F
05236:  INCF   xC8,F
05238:  BTFSC  FD8.2
0523A:  INCF   xC9,F
0523C:  BRA    5158
0523E:  MOVLB  F
....................                }
....................                SMS_Massage1[j] = '\0' ; // end string
05240:  MOVLW  90
05242:  MOVLB  D
05244:  ADDWF  xC8,W
05246:  MOVWF  FE9
05248:  MOVLW  0A
0524A:  ADDWFC xC9,W
0524C:  MOVWF  FEA
0524E:  CLRF   FEF
....................                
....................                j=0;
05250:  CLRF   xC9
05252:  CLRF   xC8
....................                i++;
05254:  INCF   xC6,F
05256:  BTFSC  FD8.2
05258:  INCF   xC7,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0525A:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0525C:  MOVLW  72
0525E:  ADDWF  xC6,W
05260:  MOVWF  FE9
05262:  MOVLW  02
05264:  ADDWFC xC7,W
05266:  MOVWF  FEA
05268:  MOVF   FEF,W
0526A:  SUBLW  0D
0526C:  BZ    5278
0526E:  MOVF   xC9,F
05270:  BNZ   5278
05272:  MOVF   xC8,W
05274:  SUBLW  1E
05276:  BC    52B8
....................                   {  
....................                      write_eeprom(0x5D+i,0x0D);
05278:  MOVLW  5D
0527A:  ADDWF  xC6,W
0527C:  MOVWF  xCC
0527E:  MOVLW  00
05280:  ADDWFC xC7,W
05282:  MOVWF  xCD
05284:  MOVF   FF2,W
05286:  MOVWF  00
05288:  BCF    FF2.7
0528A:  MOVFF  DCD,FAA
0528E:  MOVFF  DCC,FA9
05292:  MOVLW  0D
05294:  MOVWF  FA8
05296:  BCF    FA6.6
05298:  BCF    FA6.7
0529A:  BSF    FA6.2
0529C:  MOVLB  F
0529E:  MOVLW  55
052A0:  MOVWF  FA7
052A2:  MOVLW  AA
052A4:  MOVWF  FA7
052A6:  BSF    FA6.1
052A8:  BTFSC  FA6.1
052AA:  BRA    52A8
052AC:  BCF    FA6.2
052AE:  MOVF   00,W
052B0:  IORWF  FF2,F
....................                      break;
052B2:  BRA    5342
....................                   }
052B4:  BRA    532A
052B6:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage2[j] = RxD_Buff[i];
052B8:  MOVLW  B0
052BA:  ADDWF  xC8,W
052BC:  MOVWF  01
052BE:  MOVLW  0A
052C0:  ADDWFC xC9,W
052C2:  MOVWF  03
052C4:  MOVLW  72
052C6:  ADDWF  xC6,W
052C8:  MOVWF  FE9
052CA:  MOVLW  02
052CC:  ADDWFC xC7,W
052CE:  MOVWF  FEA
052D0:  MOVFF  FEF,DCE
052D4:  MOVFF  03,FEA
052D8:  MOVFF  01,FE9
052DC:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
052E0:  MOVLW  5D
052E2:  ADDWF  xC6,W
052E4:  MOVWF  xCC
052E6:  MOVLW  00
052E8:  ADDWFC xC7,W
052EA:  MOVWF  xCD
052EC:  MOVLW  72
052EE:  ADDWF  xC6,W
052F0:  MOVWF  FE9
052F2:  MOVLW  02
052F4:  ADDWFC xC7,W
052F6:  MOVWF  FEA
052F8:  MOVFF  FEF,DCE
052FC:  MOVF   FF2,W
052FE:  MOVWF  00
05300:  BCF    FF2.7
05302:  MOVFF  DCD,FAA
05306:  MOVFF  DCC,FA9
0530A:  MOVFF  DCE,FA8
0530E:  BCF    FA6.6
05310:  BCF    FA6.7
05312:  BSF    FA6.2
05314:  MOVLB  F
05316:  MOVLW  55
05318:  MOVWF  FA7
0531A:  MOVLW  AA
0531C:  MOVWF  FA7
0531E:  BSF    FA6.1
05320:  BTFSC  FA6.1
05322:  BRA    5320
05324:  BCF    FA6.2
05326:  MOVF   00,W
05328:  IORWF  FF2,F
....................                   }
0532A:  MOVLB  D
0532C:  MOVFF  DC7,03
05330:  MOVF   xC6,W
05332:  INCF   xC6,F
05334:  BTFSC  FD8.2
05336:  INCF   xC7,F
05338:  INCF   xC8,F
0533A:  BTFSC  FD8.2
0533C:  INCF   xC9,F
0533E:  BRA    525A
05340:  MOVLB  F
....................                }
....................                SMS_Massage2[j] = '\0' ; // end string
05342:  MOVLW  B0
05344:  MOVLB  D
05346:  ADDWF  xC8,W
05348:  MOVWF  FE9
0534A:  MOVLW  0A
0534C:  ADDWFC xC9,W
0534E:  MOVWF  FEA
05350:  CLRF   FEF
....................                
....................                j=0;
05352:  CLRF   xC9
05354:  CLRF   xC8
....................                i++;
05356:  INCF   xC6,F
05358:  BTFSC  FD8.2
0535A:  INCF   xC7,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0535C:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0535E:  MOVLW  72
05360:  ADDWF  xC6,W
05362:  MOVWF  FE9
05364:  MOVLW  02
05366:  ADDWFC xC7,W
05368:  MOVWF  FEA
0536A:  MOVF   FEF,W
0536C:  SUBLW  0D
0536E:  BZ    537A
05370:  MOVF   xC9,F
05372:  BNZ   537A
05374:  MOVF   xC8,W
05376:  SUBLW  1E
05378:  BC    53BA
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
0537A:  MOVLW  5D
0537C:  ADDWF  xC6,W
0537E:  MOVWF  xCC
05380:  MOVLW  00
05382:  ADDWFC xC7,W
05384:  MOVWF  xCD
05386:  MOVF   FF2,W
05388:  MOVWF  00
0538A:  BCF    FF2.7
0538C:  MOVFF  DCD,FAA
05390:  MOVFF  DCC,FA9
05394:  MOVLW  0D
05396:  MOVWF  FA8
05398:  BCF    FA6.6
0539A:  BCF    FA6.7
0539C:  BSF    FA6.2
0539E:  MOVLB  F
053A0:  MOVLW  55
053A2:  MOVWF  FA7
053A4:  MOVLW  AA
053A6:  MOVWF  FA7
053A8:  BSF    FA6.1
053AA:  BTFSC  FA6.1
053AC:  BRA    53AA
053AE:  BCF    FA6.2
053B0:  MOVF   00,W
053B2:  IORWF  FF2,F
....................                      break;
053B4:  BRA    5444
....................                   }
053B6:  BRA    542C
053B8:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage3[j] = RxD_Buff[i];
053BA:  MOVLW  D0
053BC:  ADDWF  xC8,W
053BE:  MOVWF  01
053C0:  MOVLW  0A
053C2:  ADDWFC xC9,W
053C4:  MOVWF  03
053C6:  MOVLW  72
053C8:  ADDWF  xC6,W
053CA:  MOVWF  FE9
053CC:  MOVLW  02
053CE:  ADDWFC xC7,W
053D0:  MOVWF  FEA
053D2:  MOVFF  FEF,DCE
053D6:  MOVFF  03,FEA
053DA:  MOVFF  01,FE9
053DE:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
053E2:  MOVLW  5D
053E4:  ADDWF  xC6,W
053E6:  MOVWF  xCC
053E8:  MOVLW  00
053EA:  ADDWFC xC7,W
053EC:  MOVWF  xCD
053EE:  MOVLW  72
053F0:  ADDWF  xC6,W
053F2:  MOVWF  FE9
053F4:  MOVLW  02
053F6:  ADDWFC xC7,W
053F8:  MOVWF  FEA
053FA:  MOVFF  FEF,DCE
053FE:  MOVF   FF2,W
05400:  MOVWF  00
05402:  BCF    FF2.7
05404:  MOVFF  DCD,FAA
05408:  MOVFF  DCC,FA9
0540C:  MOVFF  DCE,FA8
05410:  BCF    FA6.6
05412:  BCF    FA6.7
05414:  BSF    FA6.2
05416:  MOVLB  F
05418:  MOVLW  55
0541A:  MOVWF  FA7
0541C:  MOVLW  AA
0541E:  MOVWF  FA7
05420:  BSF    FA6.1
05422:  BTFSC  FA6.1
05424:  BRA    5422
05426:  BCF    FA6.2
05428:  MOVF   00,W
0542A:  IORWF  FF2,F
....................                   }
0542C:  MOVLB  D
0542E:  MOVFF  DC7,03
05432:  MOVF   xC6,W
05434:  INCF   xC6,F
05436:  BTFSC  FD8.2
05438:  INCF   xC7,F
0543A:  INCF   xC8,F
0543C:  BTFSC  FD8.2
0543E:  INCF   xC9,F
05440:  BRA    535C
05442:  MOVLB  F
....................                }
....................                SMS_Massage3[j] = '\0' ; // end string
05444:  MOVLW  D0
05446:  MOVLB  D
05448:  ADDWF  xC8,W
0544A:  MOVWF  FE9
0544C:  MOVLW  0A
0544E:  ADDWFC xC9,W
05450:  MOVWF  FEA
05452:  CLRF   FEF
....................                
....................                j=0;
05454:  CLRF   xC9
05456:  CLRF   xC8
....................                i++;
05458:  INCF   xC6,F
0545A:  BTFSC  FD8.2
0545C:  INCF   xC7,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0545E:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05460:  MOVLW  72
05462:  ADDWF  xC6,W
05464:  MOVWF  FE9
05466:  MOVLW  02
05468:  ADDWFC xC7,W
0546A:  MOVWF  FEA
0546C:  MOVF   FEF,W
0546E:  SUBLW  0D
05470:  BZ    547C
05472:  MOVF   xC9,F
05474:  BNZ   547C
05476:  MOVF   xC8,W
05478:  SUBLW  1E
0547A:  BC    54BC
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
0547C:  MOVLW  5D
0547E:  ADDWF  xC6,W
05480:  MOVWF  xCC
05482:  MOVLW  00
05484:  ADDWFC xC7,W
05486:  MOVWF  xCD
05488:  MOVF   FF2,W
0548A:  MOVWF  00
0548C:  BCF    FF2.7
0548E:  MOVFF  DCD,FAA
05492:  MOVFF  DCC,FA9
05496:  MOVLW  0D
05498:  MOVWF  FA8
0549A:  BCF    FA6.6
0549C:  BCF    FA6.7
0549E:  BSF    FA6.2
054A0:  MOVLB  F
054A2:  MOVLW  55
054A4:  MOVWF  FA7
054A6:  MOVLW  AA
054A8:  MOVWF  FA7
054AA:  BSF    FA6.1
054AC:  BTFSC  FA6.1
054AE:  BRA    54AC
054B0:  BCF    FA6.2
054B2:  MOVF   00,W
054B4:  IORWF  FF2,F
....................                      break;
054B6:  BRA    5546
....................                   }
054B8:  BRA    552E
054BA:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage4[j] = RxD_Buff[i];
054BC:  MOVLW  F0
054BE:  ADDWF  xC8,W
054C0:  MOVWF  01
054C2:  MOVLW  0A
054C4:  ADDWFC xC9,W
054C6:  MOVWF  03
054C8:  MOVLW  72
054CA:  ADDWF  xC6,W
054CC:  MOVWF  FE9
054CE:  MOVLW  02
054D0:  ADDWFC xC7,W
054D2:  MOVWF  FEA
054D4:  MOVFF  FEF,DCE
054D8:  MOVFF  03,FEA
054DC:  MOVFF  01,FE9
054E0:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
054E4:  MOVLW  5D
054E6:  ADDWF  xC6,W
054E8:  MOVWF  xCC
054EA:  MOVLW  00
054EC:  ADDWFC xC7,W
054EE:  MOVWF  xCD
054F0:  MOVLW  72
054F2:  ADDWF  xC6,W
054F4:  MOVWF  FE9
054F6:  MOVLW  02
054F8:  ADDWFC xC7,W
054FA:  MOVWF  FEA
054FC:  MOVFF  FEF,DCE
05500:  MOVF   FF2,W
05502:  MOVWF  00
05504:  BCF    FF2.7
05506:  MOVFF  DCD,FAA
0550A:  MOVFF  DCC,FA9
0550E:  MOVFF  DCE,FA8
05512:  BCF    FA6.6
05514:  BCF    FA6.7
05516:  BSF    FA6.2
05518:  MOVLB  F
0551A:  MOVLW  55
0551C:  MOVWF  FA7
0551E:  MOVLW  AA
05520:  MOVWF  FA7
05522:  BSF    FA6.1
05524:  BTFSC  FA6.1
05526:  BRA    5524
05528:  BCF    FA6.2
0552A:  MOVF   00,W
0552C:  IORWF  FF2,F
....................                   }
0552E:  MOVLB  D
05530:  MOVFF  DC7,03
05534:  MOVF   xC6,W
05536:  INCF   xC6,F
05538:  BTFSC  FD8.2
0553A:  INCF   xC7,F
0553C:  INCF   xC8,F
0553E:  BTFSC  FD8.2
05540:  INCF   xC9,F
05542:  BRA    545E
05544:  MOVLB  F
....................                }
....................                SMS_Massage4[j] = '\0' ; // end string
05546:  MOVLW  F0
05548:  MOVLB  D
0554A:  ADDWF  xC8,W
0554C:  MOVWF  FE9
0554E:  MOVLW  0A
05550:  ADDWFC xC9,W
05552:  MOVWF  FEA
05554:  CLRF   FEF
....................                
....................                j=0;
05556:  CLRF   xC9
05558:  CLRF   xC8
....................                i++;
0555A:  INCF   xC6,F
0555C:  BTFSC  FD8.2
0555E:  INCF   xC7,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05560:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05562:  MOVLW  72
05564:  ADDWF  xC6,W
05566:  MOVWF  FE9
05568:  MOVLW  02
0556A:  ADDWFC xC7,W
0556C:  MOVWF  FEA
0556E:  MOVF   FEF,W
05570:  SUBLW  0D
05572:  BZ    557E
05574:  MOVF   xC9,F
05576:  BNZ   557E
05578:  MOVF   xC8,W
0557A:  SUBLW  1E
0557C:  BC    55BE
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
0557E:  MOVLW  5D
05580:  ADDWF  xC6,W
05582:  MOVWF  xCC
05584:  MOVLW  00
05586:  ADDWFC xC7,W
05588:  MOVWF  xCD
0558A:  MOVF   FF2,W
0558C:  MOVWF  00
0558E:  BCF    FF2.7
05590:  MOVFF  DCD,FAA
05594:  MOVFF  DCC,FA9
05598:  MOVLW  0D
0559A:  MOVWF  FA8
0559C:  BCF    FA6.6
0559E:  BCF    FA6.7
055A0:  BSF    FA6.2
055A2:  MOVLB  F
055A4:  MOVLW  55
055A6:  MOVWF  FA7
055A8:  MOVLW  AA
055AA:  MOVWF  FA7
055AC:  BSF    FA6.1
055AE:  BTFSC  FA6.1
055B0:  BRA    55AE
055B2:  BCF    FA6.2
055B4:  MOVF   00,W
055B6:  IORWF  FF2,F
....................                      break;
055B8:  BRA    5648
....................                   }
055BA:  BRA    5630
055BC:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage5[j] = RxD_Buff[i];
055BE:  MOVLW  10
055C0:  ADDWF  xC8,W
055C2:  MOVWF  01
055C4:  MOVLW  0B
055C6:  ADDWFC xC9,W
055C8:  MOVWF  03
055CA:  MOVLW  72
055CC:  ADDWF  xC6,W
055CE:  MOVWF  FE9
055D0:  MOVLW  02
055D2:  ADDWFC xC7,W
055D4:  MOVWF  FEA
055D6:  MOVFF  FEF,DCE
055DA:  MOVFF  03,FEA
055DE:  MOVFF  01,FE9
055E2:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
055E6:  MOVLW  5D
055E8:  ADDWF  xC6,W
055EA:  MOVWF  xCC
055EC:  MOVLW  00
055EE:  ADDWFC xC7,W
055F0:  MOVWF  xCD
055F2:  MOVLW  72
055F4:  ADDWF  xC6,W
055F6:  MOVWF  FE9
055F8:  MOVLW  02
055FA:  ADDWFC xC7,W
055FC:  MOVWF  FEA
055FE:  MOVFF  FEF,DCE
05602:  MOVF   FF2,W
05604:  MOVWF  00
05606:  BCF    FF2.7
05608:  MOVFF  DCD,FAA
0560C:  MOVFF  DCC,FA9
05610:  MOVFF  DCE,FA8
05614:  BCF    FA6.6
05616:  BCF    FA6.7
05618:  BSF    FA6.2
0561A:  MOVLB  F
0561C:  MOVLW  55
0561E:  MOVWF  FA7
05620:  MOVLW  AA
05622:  MOVWF  FA7
05624:  BSF    FA6.1
05626:  BTFSC  FA6.1
05628:  BRA    5626
0562A:  BCF    FA6.2
0562C:  MOVF   00,W
0562E:  IORWF  FF2,F
....................                   }
05630:  MOVLB  D
05632:  MOVFF  DC7,03
05636:  MOVF   xC6,W
05638:  INCF   xC6,F
0563A:  BTFSC  FD8.2
0563C:  INCF   xC7,F
0563E:  INCF   xC8,F
05640:  BTFSC  FD8.2
05642:  INCF   xC9,F
05644:  BRA    5560
05646:  MOVLB  F
....................                }
....................                SMS_Massage5[j] = '\0' ; // end string
05648:  MOVLW  10
0564A:  MOVLB  D
0564C:  ADDWF  xC8,W
0564E:  MOVWF  FE9
05650:  MOVLW  0B
05652:  ADDWFC xC9,W
05654:  MOVWF  FEA
05656:  CLRF   FEF
....................                
....................                j=0;
05658:  CLRF   xC9
0565A:  CLRF   xC8
....................                i++;
0565C:  INCF   xC6,F
0565E:  BTFSC  FD8.2
05660:  INCF   xC7,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05662:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05664:  MOVLW  72
05666:  ADDWF  xC6,W
05668:  MOVWF  FE9
0566A:  MOVLW  02
0566C:  ADDWFC xC7,W
0566E:  MOVWF  FEA
05670:  MOVF   FEF,W
05672:  SUBLW  0D
05674:  BZ    5680
05676:  MOVF   xC9,F
05678:  BNZ   5680
0567A:  MOVF   xC8,W
0567C:  SUBLW  1E
0567E:  BC    56C0
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05680:  MOVLW  5D
05682:  ADDWF  xC6,W
05684:  MOVWF  xCC
05686:  MOVLW  00
05688:  ADDWFC xC7,W
0568A:  MOVWF  xCD
0568C:  MOVF   FF2,W
0568E:  MOVWF  00
05690:  BCF    FF2.7
05692:  MOVFF  DCD,FAA
05696:  MOVFF  DCC,FA9
0569A:  MOVLW  0D
0569C:  MOVWF  FA8
0569E:  BCF    FA6.6
056A0:  BCF    FA6.7
056A2:  BSF    FA6.2
056A4:  MOVLB  F
056A6:  MOVLW  55
056A8:  MOVWF  FA7
056AA:  MOVLW  AA
056AC:  MOVWF  FA7
056AE:  BSF    FA6.1
056B0:  BTFSC  FA6.1
056B2:  BRA    56B0
056B4:  BCF    FA6.2
056B6:  MOVF   00,W
056B8:  IORWF  FF2,F
....................                      break;
056BA:  BRA    574E
....................                   }
056BC:  BRA    5736
056BE:  MOVLB  D
....................                   else
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
056C0:  MOVLW  5D
056C2:  ADDWF  xC6,W
056C4:  MOVWF  xCC
056C6:  MOVLW  00
056C8:  ADDWFC xC7,W
056CA:  MOVWF  xCD
056CC:  MOVLW  72
056CE:  ADDWF  xC6,W
056D0:  MOVWF  FE9
056D2:  MOVLW  02
056D4:  ADDWFC xC7,W
056D6:  MOVWF  FEA
056D8:  MOVFF  FEF,DCE
056DC:  MOVF   FF2,W
056DE:  MOVWF  00
056E0:  BCF    FF2.7
056E2:  MOVFF  DCD,FAA
056E6:  MOVFF  DCC,FA9
056EA:  MOVFF  DCE,FA8
056EE:  BCF    FA6.6
056F0:  BCF    FA6.7
056F2:  BSF    FA6.2
056F4:  MOVLB  F
056F6:  MOVLW  55
056F8:  MOVWF  FA7
056FA:  MOVLW  AA
056FC:  MOVWF  FA7
056FE:  BSF    FA6.1
05700:  BTFSC  FA6.1
05702:  BRA    5700
05704:  BCF    FA6.2
05706:  MOVF   00,W
05708:  IORWF  FF2,F
....................                      SMS_Massage6[j] = RxD_Buff[i];
0570A:  MOVLW  30
0570C:  MOVLB  D
0570E:  ADDWF  xC8,W
05710:  MOVWF  01
05712:  MOVLW  0B
05714:  ADDWFC xC9,W
05716:  MOVWF  03
05718:  MOVLW  72
0571A:  ADDWF  xC6,W
0571C:  MOVWF  FE9
0571E:  MOVLW  02
05720:  ADDWFC xC7,W
05722:  MOVWF  FEA
05724:  MOVFF  FEF,DCE
05728:  MOVFF  03,FEA
0572C:  MOVFF  01,FE9
05730:  MOVFF  DCE,FEF
05734:  MOVLB  F
....................                   }
05736:  MOVLB  D
05738:  MOVFF  DC7,03
0573C:  MOVF   xC6,W
0573E:  INCF   xC6,F
05740:  BTFSC  FD8.2
05742:  INCF   xC7,F
05744:  INCF   xC8,F
05746:  BTFSC  FD8.2
05748:  INCF   xC9,F
0574A:  BRA    5662
0574C:  MOVLB  F
....................                }
....................                SMS_Massage6[j] = '\0' ; // end string
0574E:  MOVLW  30
05750:  MOVLB  D
05752:  ADDWF  xC8,W
05754:  MOVWF  FE9
05756:  MOVLW  0B
05758:  ADDWFC xC9,W
0575A:  MOVWF  FEA
0575C:  CLRF   FEF
....................                
....................                j=0;
0575E:  CLRF   xC9
05760:  CLRF   xC8
....................                i++;
05762:  INCF   xC6,F
05764:  BTFSC  FD8.2
05766:  INCF   xC7,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05768:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0576A:  MOVLW  72
0576C:  ADDWF  xC6,W
0576E:  MOVWF  FE9
05770:  MOVLW  02
05772:  ADDWFC xC7,W
05774:  MOVWF  FEA
05776:  MOVF   FEF,W
05778:  SUBLW  0D
0577A:  BZ    5786
0577C:  MOVF   xC9,F
0577E:  BNZ   5786
05780:  MOVF   xC8,W
05782:  SUBLW  1E
05784:  BC    57C6
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05786:  MOVLW  5D
05788:  ADDWF  xC6,W
0578A:  MOVWF  xCC
0578C:  MOVLW  00
0578E:  ADDWFC xC7,W
05790:  MOVWF  xCD
05792:  MOVF   FF2,W
05794:  MOVWF  00
05796:  BCF    FF2.7
05798:  MOVFF  DCD,FAA
0579C:  MOVFF  DCC,FA9
057A0:  MOVLW  0D
057A2:  MOVWF  FA8
057A4:  BCF    FA6.6
057A6:  BCF    FA6.7
057A8:  BSF    FA6.2
057AA:  MOVLB  F
057AC:  MOVLW  55
057AE:  MOVWF  FA7
057B0:  MOVLW  AA
057B2:  MOVWF  FA7
057B4:  BSF    FA6.1
057B6:  BTFSC  FA6.1
057B8:  BRA    57B6
057BA:  BCF    FA6.2
057BC:  MOVF   00,W
057BE:  IORWF  FF2,F
....................                      break;
057C0:  BRA    5850
....................                   }
057C2:  BRA    5838
057C4:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage7[j] = RxD_Buff[i];
057C6:  MOVLW  50
057C8:  ADDWF  xC8,W
057CA:  MOVWF  01
057CC:  MOVLW  0B
057CE:  ADDWFC xC9,W
057D0:  MOVWF  03
057D2:  MOVLW  72
057D4:  ADDWF  xC6,W
057D6:  MOVWF  FE9
057D8:  MOVLW  02
057DA:  ADDWFC xC7,W
057DC:  MOVWF  FEA
057DE:  MOVFF  FEF,DCE
057E2:  MOVFF  03,FEA
057E6:  MOVFF  01,FE9
057EA:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
057EE:  MOVLW  5D
057F0:  ADDWF  xC6,W
057F2:  MOVWF  xCC
057F4:  MOVLW  00
057F6:  ADDWFC xC7,W
057F8:  MOVWF  xCD
057FA:  MOVLW  72
057FC:  ADDWF  xC6,W
057FE:  MOVWF  FE9
05800:  MOVLW  02
05802:  ADDWFC xC7,W
05804:  MOVWF  FEA
05806:  MOVFF  FEF,DCE
0580A:  MOVF   FF2,W
0580C:  MOVWF  00
0580E:  BCF    FF2.7
05810:  MOVFF  DCD,FAA
05814:  MOVFF  DCC,FA9
05818:  MOVFF  DCE,FA8
0581C:  BCF    FA6.6
0581E:  BCF    FA6.7
05820:  BSF    FA6.2
05822:  MOVLB  F
05824:  MOVLW  55
05826:  MOVWF  FA7
05828:  MOVLW  AA
0582A:  MOVWF  FA7
0582C:  BSF    FA6.1
0582E:  BTFSC  FA6.1
05830:  BRA    582E
05832:  BCF    FA6.2
05834:  MOVF   00,W
05836:  IORWF  FF2,F
....................                   }
05838:  MOVLB  D
0583A:  MOVFF  DC7,03
0583E:  MOVF   xC6,W
05840:  INCF   xC6,F
05842:  BTFSC  FD8.2
05844:  INCF   xC7,F
05846:  INCF   xC8,F
05848:  BTFSC  FD8.2
0584A:  INCF   xC9,F
0584C:  BRA    5768
0584E:  MOVLB  F
....................                }
....................                SMS_Massage7[j] = '\0' ; // end string
05850:  MOVLW  50
05852:  MOVLB  D
05854:  ADDWF  xC8,W
05856:  MOVWF  FE9
05858:  MOVLW  0B
0585A:  ADDWFC xC9,W
0585C:  MOVWF  FEA
0585E:  CLRF   FEF
....................                
....................                j=0;
05860:  CLRF   xC9
05862:  CLRF   xC8
....................                i++;
05864:  INCF   xC6,F
05866:  BTFSC  FD8.2
05868:  INCF   xC7,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0586A:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0586C:  MOVLW  72
0586E:  ADDWF  xC6,W
05870:  MOVWF  FE9
05872:  MOVLW  02
05874:  ADDWFC xC7,W
05876:  MOVWF  FEA
05878:  MOVF   FEF,W
0587A:  SUBLW  0D
0587C:  BZ    5888
0587E:  MOVF   xC9,F
05880:  BNZ   5888
05882:  MOVF   xC8,W
05884:  SUBLW  1E
05886:  BC    58C8
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05888:  MOVLW  5D
0588A:  ADDWF  xC6,W
0588C:  MOVWF  xCC
0588E:  MOVLW  00
05890:  ADDWFC xC7,W
05892:  MOVWF  xCD
05894:  MOVF   FF2,W
05896:  MOVWF  00
05898:  BCF    FF2.7
0589A:  MOVFF  DCD,FAA
0589E:  MOVFF  DCC,FA9
058A2:  MOVLW  0D
058A4:  MOVWF  FA8
058A6:  BCF    FA6.6
058A8:  BCF    FA6.7
058AA:  BSF    FA6.2
058AC:  MOVLB  F
058AE:  MOVLW  55
058B0:  MOVWF  FA7
058B2:  MOVLW  AA
058B4:  MOVWF  FA7
058B6:  BSF    FA6.1
058B8:  BTFSC  FA6.1
058BA:  BRA    58B8
058BC:  BCF    FA6.2
058BE:  MOVF   00,W
058C0:  IORWF  FF2,F
....................                      break;
058C2:  BRA    5952
....................                   }
058C4:  BRA    593A
058C6:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage8[j] = RxD_Buff[i];
058C8:  MOVLW  70
058CA:  ADDWF  xC8,W
058CC:  MOVWF  01
058CE:  MOVLW  0B
058D0:  ADDWFC xC9,W
058D2:  MOVWF  03
058D4:  MOVLW  72
058D6:  ADDWF  xC6,W
058D8:  MOVWF  FE9
058DA:  MOVLW  02
058DC:  ADDWFC xC7,W
058DE:  MOVWF  FEA
058E0:  MOVFF  FEF,DCE
058E4:  MOVFF  03,FEA
058E8:  MOVFF  01,FE9
058EC:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
058F0:  MOVLW  5D
058F2:  ADDWF  xC6,W
058F4:  MOVWF  xCC
058F6:  MOVLW  00
058F8:  ADDWFC xC7,W
058FA:  MOVWF  xCD
058FC:  MOVLW  72
058FE:  ADDWF  xC6,W
05900:  MOVWF  FE9
05902:  MOVLW  02
05904:  ADDWFC xC7,W
05906:  MOVWF  FEA
05908:  MOVFF  FEF,DCE
0590C:  MOVF   FF2,W
0590E:  MOVWF  00
05910:  BCF    FF2.7
05912:  MOVFF  DCD,FAA
05916:  MOVFF  DCC,FA9
0591A:  MOVFF  DCE,FA8
0591E:  BCF    FA6.6
05920:  BCF    FA6.7
05922:  BSF    FA6.2
05924:  MOVLB  F
05926:  MOVLW  55
05928:  MOVWF  FA7
0592A:  MOVLW  AA
0592C:  MOVWF  FA7
0592E:  BSF    FA6.1
05930:  BTFSC  FA6.1
05932:  BRA    5930
05934:  BCF    FA6.2
05936:  MOVF   00,W
05938:  IORWF  FF2,F
....................                   }
0593A:  MOVLB  D
0593C:  MOVFF  DC7,03
05940:  MOVF   xC6,W
05942:  INCF   xC6,F
05944:  BTFSC  FD8.2
05946:  INCF   xC7,F
05948:  INCF   xC8,F
0594A:  BTFSC  FD8.2
0594C:  INCF   xC9,F
0594E:  BRA    586A
05950:  MOVLB  F
....................                }
....................                SMS_Massage8[j] = '\0' ; // end string
05952:  MOVLW  70
05954:  MOVLB  D
05956:  ADDWF  xC8,W
05958:  MOVWF  FE9
0595A:  MOVLW  0B
0595C:  ADDWFC xC9,W
0595E:  MOVWF  FEA
05960:  CLRF   FEF
....................                
....................                /////////////////////////////////////////////
....................                j=0;
05962:  CLRF   xC9
05964:  CLRF   xC8
....................                i++;
05966:  INCF   xC6,F
05968:  BTFSC  FD8.2
0596A:  INCF   xC7,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0596C:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0596E:  MOVLW  72
05970:  ADDWF  xC6,W
05972:  MOVWF  FE9
05974:  MOVLW  02
05976:  ADDWFC xC7,W
05978:  MOVWF  FEA
0597A:  MOVF   FEF,W
0597C:  SUBLW  0D
0597E:  BZ    598A
05980:  MOVF   xC9,F
05982:  BNZ   598A
05984:  MOVF   xC8,W
05986:  SUBLW  1E
05988:  BC    59DA
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0598A:  MOVLW  5D
0598C:  ADDWF  xC6,W
0598E:  MOVWF  xCC
05990:  MOVLW  00
05992:  ADDWFC xC7,W
05994:  MOVWF  xCD
05996:  MOVLW  72
05998:  ADDWF  xC6,W
0599A:  MOVWF  FE9
0599C:  MOVLW  02
0599E:  ADDWFC xC7,W
059A0:  MOVWF  FEA
059A2:  MOVFF  FEF,DCE
059A6:  MOVF   FF2,W
059A8:  MOVWF  00
059AA:  BCF    FF2.7
059AC:  MOVFF  DCD,FAA
059B0:  MOVFF  DCC,FA9
059B4:  MOVFF  DCE,FA8
059B8:  BCF    FA6.6
059BA:  BCF    FA6.7
059BC:  BSF    FA6.2
059BE:  MOVLB  F
059C0:  MOVLW  55
059C2:  MOVWF  FA7
059C4:  MOVLW  AA
059C6:  MOVWF  FA7
059C8:  BSF    FA6.1
059CA:  BTFSC  FA6.1
059CC:  BRA    59CA
059CE:  BCF    FA6.2
059D0:  MOVF   00,W
059D2:  IORWF  FF2,F
....................                      break;
059D4:  BRA    5A64
....................                   }
059D6:  BRA    5A4C
059D8:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage9[j] = RxD_Buff[i];
059DA:  MOVLW  90
059DC:  ADDWF  xC8,W
059DE:  MOVWF  01
059E0:  MOVLW  0B
059E2:  ADDWFC xC9,W
059E4:  MOVWF  03
059E6:  MOVLW  72
059E8:  ADDWF  xC6,W
059EA:  MOVWF  FE9
059EC:  MOVLW  02
059EE:  ADDWFC xC7,W
059F0:  MOVWF  FEA
059F2:  MOVFF  FEF,DCE
059F6:  MOVFF  03,FEA
059FA:  MOVFF  01,FE9
059FE:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05A02:  MOVLW  5D
05A04:  ADDWF  xC6,W
05A06:  MOVWF  xCC
05A08:  MOVLW  00
05A0A:  ADDWFC xC7,W
05A0C:  MOVWF  xCD
05A0E:  MOVLW  72
05A10:  ADDWF  xC6,W
05A12:  MOVWF  FE9
05A14:  MOVLW  02
05A16:  ADDWFC xC7,W
05A18:  MOVWF  FEA
05A1A:  MOVFF  FEF,DCE
05A1E:  MOVF   FF2,W
05A20:  MOVWF  00
05A22:  BCF    FF2.7
05A24:  MOVFF  DCD,FAA
05A28:  MOVFF  DCC,FA9
05A2C:  MOVFF  DCE,FA8
05A30:  BCF    FA6.6
05A32:  BCF    FA6.7
05A34:  BSF    FA6.2
05A36:  MOVLB  F
05A38:  MOVLW  55
05A3A:  MOVWF  FA7
05A3C:  MOVLW  AA
05A3E:  MOVWF  FA7
05A40:  BSF    FA6.1
05A42:  BTFSC  FA6.1
05A44:  BRA    5A42
05A46:  BCF    FA6.2
05A48:  MOVF   00,W
05A4A:  IORWF  FF2,F
....................                   }
05A4C:  MOVLB  D
05A4E:  MOVFF  DC7,03
05A52:  MOVF   xC6,W
05A54:  INCF   xC6,F
05A56:  BTFSC  FD8.2
05A58:  INCF   xC7,F
05A5A:  INCF   xC8,F
05A5C:  BTFSC  FD8.2
05A5E:  INCF   xC9,F
05A60:  BRA    596C
05A62:  MOVLB  F
....................                }
....................                SMS_Massage9[j] = '\0' ; // end string
05A64:  MOVLW  90
05A66:  MOVLB  D
05A68:  ADDWF  xC8,W
05A6A:  MOVWF  FE9
05A6C:  MOVLW  0B
05A6E:  ADDWFC xC9,W
05A70:  MOVWF  FEA
05A72:  CLRF   FEF
....................                j=0;
05A74:  CLRF   xC9
05A76:  CLRF   xC8
....................                i++;
05A78:  INCF   xC6,F
05A7A:  BTFSC  FD8.2
05A7C:  INCF   xC7,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05A7E:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05A80:  MOVLW  72
05A82:  ADDWF  xC6,W
05A84:  MOVWF  FE9
05A86:  MOVLW  02
05A88:  ADDWFC xC7,W
05A8A:  MOVWF  FEA
05A8C:  MOVF   FEF,W
05A8E:  SUBLW  0D
05A90:  BZ    5A9C
05A92:  MOVF   xC9,F
05A94:  BNZ   5A9C
05A96:  MOVF   xC8,W
05A98:  SUBLW  1E
05A9A:  BC    5AEC
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05A9C:  MOVLW  5D
05A9E:  ADDWF  xC6,W
05AA0:  MOVWF  xCC
05AA2:  MOVLW  00
05AA4:  ADDWFC xC7,W
05AA6:  MOVWF  xCD
05AA8:  MOVLW  72
05AAA:  ADDWF  xC6,W
05AAC:  MOVWF  FE9
05AAE:  MOVLW  02
05AB0:  ADDWFC xC7,W
05AB2:  MOVWF  FEA
05AB4:  MOVFF  FEF,DCE
05AB8:  MOVF   FF2,W
05ABA:  MOVWF  00
05ABC:  BCF    FF2.7
05ABE:  MOVFF  DCD,FAA
05AC2:  MOVFF  DCC,FA9
05AC6:  MOVFF  DCE,FA8
05ACA:  BCF    FA6.6
05ACC:  BCF    FA6.7
05ACE:  BSF    FA6.2
05AD0:  MOVLB  F
05AD2:  MOVLW  55
05AD4:  MOVWF  FA7
05AD6:  MOVLW  AA
05AD8:  MOVWF  FA7
05ADA:  BSF    FA6.1
05ADC:  BTFSC  FA6.1
05ADE:  BRA    5ADC
05AE0:  BCF    FA6.2
05AE2:  MOVF   00,W
05AE4:  IORWF  FF2,F
....................                      break;
05AE6:  BRA    5B76
....................                   }
05AE8:  BRA    5B5E
05AEA:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage10[j] = RxD_Buff[i];
05AEC:  MOVLW  B0
05AEE:  ADDWF  xC8,W
05AF0:  MOVWF  01
05AF2:  MOVLW  0B
05AF4:  ADDWFC xC9,W
05AF6:  MOVWF  03
05AF8:  MOVLW  72
05AFA:  ADDWF  xC6,W
05AFC:  MOVWF  FE9
05AFE:  MOVLW  02
05B00:  ADDWFC xC7,W
05B02:  MOVWF  FEA
05B04:  MOVFF  FEF,DCE
05B08:  MOVFF  03,FEA
05B0C:  MOVFF  01,FE9
05B10:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05B14:  MOVLW  5D
05B16:  ADDWF  xC6,W
05B18:  MOVWF  xCC
05B1A:  MOVLW  00
05B1C:  ADDWFC xC7,W
05B1E:  MOVWF  xCD
05B20:  MOVLW  72
05B22:  ADDWF  xC6,W
05B24:  MOVWF  FE9
05B26:  MOVLW  02
05B28:  ADDWFC xC7,W
05B2A:  MOVWF  FEA
05B2C:  MOVFF  FEF,DCE
05B30:  MOVF   FF2,W
05B32:  MOVWF  00
05B34:  BCF    FF2.7
05B36:  MOVFF  DCD,FAA
05B3A:  MOVFF  DCC,FA9
05B3E:  MOVFF  DCE,FA8
05B42:  BCF    FA6.6
05B44:  BCF    FA6.7
05B46:  BSF    FA6.2
05B48:  MOVLB  F
05B4A:  MOVLW  55
05B4C:  MOVWF  FA7
05B4E:  MOVLW  AA
05B50:  MOVWF  FA7
05B52:  BSF    FA6.1
05B54:  BTFSC  FA6.1
05B56:  BRA    5B54
05B58:  BCF    FA6.2
05B5A:  MOVF   00,W
05B5C:  IORWF  FF2,F
....................                   }
05B5E:  MOVLB  D
05B60:  MOVFF  DC7,03
05B64:  MOVF   xC6,W
05B66:  INCF   xC6,F
05B68:  BTFSC  FD8.2
05B6A:  INCF   xC7,F
05B6C:  INCF   xC8,F
05B6E:  BTFSC  FD8.2
05B70:  INCF   xC9,F
05B72:  BRA    5A7E
05B74:  MOVLB  F
....................                }
....................                SMS_Massage10[j] = '\0' ; // end string
05B76:  MOVLW  B0
05B78:  MOVLB  D
05B7A:  ADDWF  xC8,W
05B7C:  MOVWF  FE9
05B7E:  MOVLW  0B
05B80:  ADDWFC xC9,W
05B82:  MOVWF  FEA
05B84:  CLRF   FEF
....................                
....................                j=0;
05B86:  CLRF   xC9
05B88:  CLRF   xC8
....................                i++;
05B8A:  INCF   xC6,F
05B8C:  BTFSC  FD8.2
05B8E:  INCF   xC7,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05B90:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05B92:  MOVLW  72
05B94:  ADDWF  xC6,W
05B96:  MOVWF  FE9
05B98:  MOVLW  02
05B9A:  ADDWFC xC7,W
05B9C:  MOVWF  FEA
05B9E:  MOVF   FEF,W
05BA0:  SUBLW  0D
05BA2:  BZ    5BAE
05BA4:  MOVF   xC9,F
05BA6:  BNZ   5BAE
05BA8:  MOVF   xC8,W
05BAA:  SUBLW  1E
05BAC:  BC    5BFE
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05BAE:  MOVLW  5D
05BB0:  ADDWF  xC6,W
05BB2:  MOVWF  xCC
05BB4:  MOVLW  00
05BB6:  ADDWFC xC7,W
05BB8:  MOVWF  xCD
05BBA:  MOVLW  72
05BBC:  ADDWF  xC6,W
05BBE:  MOVWF  FE9
05BC0:  MOVLW  02
05BC2:  ADDWFC xC7,W
05BC4:  MOVWF  FEA
05BC6:  MOVFF  FEF,DCE
05BCA:  MOVF   FF2,W
05BCC:  MOVWF  00
05BCE:  BCF    FF2.7
05BD0:  MOVFF  DCD,FAA
05BD4:  MOVFF  DCC,FA9
05BD8:  MOVFF  DCE,FA8
05BDC:  BCF    FA6.6
05BDE:  BCF    FA6.7
05BE0:  BSF    FA6.2
05BE2:  MOVLB  F
05BE4:  MOVLW  55
05BE6:  MOVWF  FA7
05BE8:  MOVLW  AA
05BEA:  MOVWF  FA7
05BEC:  BSF    FA6.1
05BEE:  BTFSC  FA6.1
05BF0:  BRA    5BEE
05BF2:  BCF    FA6.2
05BF4:  MOVF   00,W
05BF6:  IORWF  FF2,F
....................                      break;
05BF8:  BRA    5C88
....................                   }
05BFA:  BRA    5C70
05BFC:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage11[j] = RxD_Buff[i];
05BFE:  MOVLW  D0
05C00:  ADDWF  xC8,W
05C02:  MOVWF  01
05C04:  MOVLW  0B
05C06:  ADDWFC xC9,W
05C08:  MOVWF  03
05C0A:  MOVLW  72
05C0C:  ADDWF  xC6,W
05C0E:  MOVWF  FE9
05C10:  MOVLW  02
05C12:  ADDWFC xC7,W
05C14:  MOVWF  FEA
05C16:  MOVFF  FEF,DCE
05C1A:  MOVFF  03,FEA
05C1E:  MOVFF  01,FE9
05C22:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05C26:  MOVLW  5D
05C28:  ADDWF  xC6,W
05C2A:  MOVWF  xCC
05C2C:  MOVLW  00
05C2E:  ADDWFC xC7,W
05C30:  MOVWF  xCD
05C32:  MOVLW  72
05C34:  ADDWF  xC6,W
05C36:  MOVWF  FE9
05C38:  MOVLW  02
05C3A:  ADDWFC xC7,W
05C3C:  MOVWF  FEA
05C3E:  MOVFF  FEF,DCE
05C42:  MOVF   FF2,W
05C44:  MOVWF  00
05C46:  BCF    FF2.7
05C48:  MOVFF  DCD,FAA
05C4C:  MOVFF  DCC,FA9
05C50:  MOVFF  DCE,FA8
05C54:  BCF    FA6.6
05C56:  BCF    FA6.7
05C58:  BSF    FA6.2
05C5A:  MOVLB  F
05C5C:  MOVLW  55
05C5E:  MOVWF  FA7
05C60:  MOVLW  AA
05C62:  MOVWF  FA7
05C64:  BSF    FA6.1
05C66:  BTFSC  FA6.1
05C68:  BRA    5C66
05C6A:  BCF    FA6.2
05C6C:  MOVF   00,W
05C6E:  IORWF  FF2,F
....................                   }
05C70:  MOVLB  D
05C72:  MOVFF  DC7,03
05C76:  MOVF   xC6,W
05C78:  INCF   xC6,F
05C7A:  BTFSC  FD8.2
05C7C:  INCF   xC7,F
05C7E:  INCF   xC8,F
05C80:  BTFSC  FD8.2
05C82:  INCF   xC9,F
05C84:  BRA    5B90
05C86:  MOVLB  F
....................                }
....................                SMS_Massage11[j] = '\0' ; // end string
05C88:  MOVLW  D0
05C8A:  MOVLB  D
05C8C:  ADDWF  xC8,W
05C8E:  MOVWF  FE9
05C90:  MOVLW  0B
05C92:  ADDWFC xC9,W
05C94:  MOVWF  FEA
05C96:  CLRF   FEF
....................                
....................                j=0;
05C98:  CLRF   xC9
05C9A:  CLRF   xC8
....................                i++;
05C9C:  INCF   xC6,F
05C9E:  BTFSC  FD8.2
05CA0:  INCF   xC7,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05CA2:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05CA4:  MOVLW  72
05CA6:  ADDWF  xC6,W
05CA8:  MOVWF  FE9
05CAA:  MOVLW  02
05CAC:  ADDWFC xC7,W
05CAE:  MOVWF  FEA
05CB0:  MOVF   FEF,W
05CB2:  SUBLW  0D
05CB4:  BZ    5CC0
05CB6:  MOVF   xC9,F
05CB8:  BNZ   5CC0
05CBA:  MOVF   xC8,W
05CBC:  SUBLW  1E
05CBE:  BC    5D10
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05CC0:  MOVLW  5D
05CC2:  ADDWF  xC6,W
05CC4:  MOVWF  xCC
05CC6:  MOVLW  00
05CC8:  ADDWFC xC7,W
05CCA:  MOVWF  xCD
05CCC:  MOVLW  72
05CCE:  ADDWF  xC6,W
05CD0:  MOVWF  FE9
05CD2:  MOVLW  02
05CD4:  ADDWFC xC7,W
05CD6:  MOVWF  FEA
05CD8:  MOVFF  FEF,DCE
05CDC:  MOVF   FF2,W
05CDE:  MOVWF  00
05CE0:  BCF    FF2.7
05CE2:  MOVFF  DCD,FAA
05CE6:  MOVFF  DCC,FA9
05CEA:  MOVFF  DCE,FA8
05CEE:  BCF    FA6.6
05CF0:  BCF    FA6.7
05CF2:  BSF    FA6.2
05CF4:  MOVLB  F
05CF6:  MOVLW  55
05CF8:  MOVWF  FA7
05CFA:  MOVLW  AA
05CFC:  MOVWF  FA7
05CFE:  BSF    FA6.1
05D00:  BTFSC  FA6.1
05D02:  BRA    5D00
05D04:  BCF    FA6.2
05D06:  MOVF   00,W
05D08:  IORWF  FF2,F
....................                      break;
05D0A:  BRA    5D9A
....................                   }
05D0C:  BRA    5D82
05D0E:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage12[j] = RxD_Buff[i];
05D10:  MOVLW  F0
05D12:  ADDWF  xC8,W
05D14:  MOVWF  01
05D16:  MOVLW  0B
05D18:  ADDWFC xC9,W
05D1A:  MOVWF  03
05D1C:  MOVLW  72
05D1E:  ADDWF  xC6,W
05D20:  MOVWF  FE9
05D22:  MOVLW  02
05D24:  ADDWFC xC7,W
05D26:  MOVWF  FEA
05D28:  MOVFF  FEF,DCE
05D2C:  MOVFF  03,FEA
05D30:  MOVFF  01,FE9
05D34:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05D38:  MOVLW  5D
05D3A:  ADDWF  xC6,W
05D3C:  MOVWF  xCC
05D3E:  MOVLW  00
05D40:  ADDWFC xC7,W
05D42:  MOVWF  xCD
05D44:  MOVLW  72
05D46:  ADDWF  xC6,W
05D48:  MOVWF  FE9
05D4A:  MOVLW  02
05D4C:  ADDWFC xC7,W
05D4E:  MOVWF  FEA
05D50:  MOVFF  FEF,DCE
05D54:  MOVF   FF2,W
05D56:  MOVWF  00
05D58:  BCF    FF2.7
05D5A:  MOVFF  DCD,FAA
05D5E:  MOVFF  DCC,FA9
05D62:  MOVFF  DCE,FA8
05D66:  BCF    FA6.6
05D68:  BCF    FA6.7
05D6A:  BSF    FA6.2
05D6C:  MOVLB  F
05D6E:  MOVLW  55
05D70:  MOVWF  FA7
05D72:  MOVLW  AA
05D74:  MOVWF  FA7
05D76:  BSF    FA6.1
05D78:  BTFSC  FA6.1
05D7A:  BRA    5D78
05D7C:  BCF    FA6.2
05D7E:  MOVF   00,W
05D80:  IORWF  FF2,F
....................                   }
05D82:  MOVLB  D
05D84:  MOVFF  DC7,03
05D88:  MOVF   xC6,W
05D8A:  INCF   xC6,F
05D8C:  BTFSC  FD8.2
05D8E:  INCF   xC7,F
05D90:  INCF   xC8,F
05D92:  BTFSC  FD8.2
05D94:  INCF   xC9,F
05D96:  BRA    5CA2
05D98:  MOVLB  F
....................                }
....................                SMS_Massage12[j] = '\0' ; // end string
05D9A:  MOVLW  F0
05D9C:  MOVLB  D
05D9E:  ADDWF  xC8,W
05DA0:  MOVWF  FE9
05DA2:  MOVLW  0B
05DA4:  ADDWFC xC9,W
05DA6:  MOVWF  FEA
05DA8:  CLRF   FEF
....................                
....................                j=0;
05DAA:  CLRF   xC9
05DAC:  CLRF   xC8
....................                i++;
05DAE:  INCF   xC6,F
05DB0:  BTFSC  FD8.2
05DB2:  INCF   xC7,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05DB4:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05DB6:  MOVLW  72
05DB8:  ADDWF  xC6,W
05DBA:  MOVWF  FE9
05DBC:  MOVLW  02
05DBE:  ADDWFC xC7,W
05DC0:  MOVWF  FEA
05DC2:  MOVF   FEF,W
05DC4:  SUBLW  0D
05DC6:  BZ    5DD2
05DC8:  MOVF   xC9,F
05DCA:  BNZ   5DD2
05DCC:  MOVF   xC8,W
05DCE:  SUBLW  1E
05DD0:  BC    5E22
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05DD2:  MOVLW  5D
05DD4:  ADDWF  xC6,W
05DD6:  MOVWF  xCC
05DD8:  MOVLW  00
05DDA:  ADDWFC xC7,W
05DDC:  MOVWF  xCD
05DDE:  MOVLW  72
05DE0:  ADDWF  xC6,W
05DE2:  MOVWF  FE9
05DE4:  MOVLW  02
05DE6:  ADDWFC xC7,W
05DE8:  MOVWF  FEA
05DEA:  MOVFF  FEF,DCE
05DEE:  MOVF   FF2,W
05DF0:  MOVWF  00
05DF2:  BCF    FF2.7
05DF4:  MOVFF  DCD,FAA
05DF8:  MOVFF  DCC,FA9
05DFC:  MOVFF  DCE,FA8
05E00:  BCF    FA6.6
05E02:  BCF    FA6.7
05E04:  BSF    FA6.2
05E06:  MOVLB  F
05E08:  MOVLW  55
05E0A:  MOVWF  FA7
05E0C:  MOVLW  AA
05E0E:  MOVWF  FA7
05E10:  BSF    FA6.1
05E12:  BTFSC  FA6.1
05E14:  BRA    5E12
05E16:  BCF    FA6.2
05E18:  MOVF   00,W
05E1A:  IORWF  FF2,F
....................                      break;
05E1C:  BRA    5EAC
....................                   }
05E1E:  BRA    5E94
05E20:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage13[j] = RxD_Buff[i];
05E22:  MOVLW  10
05E24:  ADDWF  xC8,W
05E26:  MOVWF  01
05E28:  MOVLW  0C
05E2A:  ADDWFC xC9,W
05E2C:  MOVWF  03
05E2E:  MOVLW  72
05E30:  ADDWF  xC6,W
05E32:  MOVWF  FE9
05E34:  MOVLW  02
05E36:  ADDWFC xC7,W
05E38:  MOVWF  FEA
05E3A:  MOVFF  FEF,DCE
05E3E:  MOVFF  03,FEA
05E42:  MOVFF  01,FE9
05E46:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05E4A:  MOVLW  5D
05E4C:  ADDWF  xC6,W
05E4E:  MOVWF  xCC
05E50:  MOVLW  00
05E52:  ADDWFC xC7,W
05E54:  MOVWF  xCD
05E56:  MOVLW  72
05E58:  ADDWF  xC6,W
05E5A:  MOVWF  FE9
05E5C:  MOVLW  02
05E5E:  ADDWFC xC7,W
05E60:  MOVWF  FEA
05E62:  MOVFF  FEF,DCE
05E66:  MOVF   FF2,W
05E68:  MOVWF  00
05E6A:  BCF    FF2.7
05E6C:  MOVFF  DCD,FAA
05E70:  MOVFF  DCC,FA9
05E74:  MOVFF  DCE,FA8
05E78:  BCF    FA6.6
05E7A:  BCF    FA6.7
05E7C:  BSF    FA6.2
05E7E:  MOVLB  F
05E80:  MOVLW  55
05E82:  MOVWF  FA7
05E84:  MOVLW  AA
05E86:  MOVWF  FA7
05E88:  BSF    FA6.1
05E8A:  BTFSC  FA6.1
05E8C:  BRA    5E8A
05E8E:  BCF    FA6.2
05E90:  MOVF   00,W
05E92:  IORWF  FF2,F
....................                   }
05E94:  MOVLB  D
05E96:  MOVFF  DC7,03
05E9A:  MOVF   xC6,W
05E9C:  INCF   xC6,F
05E9E:  BTFSC  FD8.2
05EA0:  INCF   xC7,F
05EA2:  INCF   xC8,F
05EA4:  BTFSC  FD8.2
05EA6:  INCF   xC9,F
05EA8:  BRA    5DB4
05EAA:  MOVLB  F
....................                }
....................                SMS_Massage13[j] = '\0' ; // end string
05EAC:  MOVLW  10
05EAE:  MOVLB  D
05EB0:  ADDWF  xC8,W
05EB2:  MOVWF  FE9
05EB4:  MOVLW  0C
05EB6:  ADDWFC xC9,W
05EB8:  MOVWF  FEA
05EBA:  CLRF   FEF
....................                
....................                j=0;
05EBC:  CLRF   xC9
05EBE:  CLRF   xC8
....................                i++;
05EC0:  INCF   xC6,F
05EC2:  BTFSC  FD8.2
05EC4:  INCF   xC7,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05EC6:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05EC8:  MOVLW  72
05ECA:  ADDWF  xC6,W
05ECC:  MOVWF  FE9
05ECE:  MOVLW  02
05ED0:  ADDWFC xC7,W
05ED2:  MOVWF  FEA
05ED4:  MOVF   FEF,W
05ED6:  SUBLW  0D
05ED8:  BZ    5EE4
05EDA:  MOVF   xC9,F
05EDC:  BNZ   5EE4
05EDE:  MOVF   xC8,W
05EE0:  SUBLW  1E
05EE2:  BC    5F34
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05EE4:  MOVLW  5D
05EE6:  ADDWF  xC6,W
05EE8:  MOVWF  xCC
05EEA:  MOVLW  00
05EEC:  ADDWFC xC7,W
05EEE:  MOVWF  xCD
05EF0:  MOVLW  72
05EF2:  ADDWF  xC6,W
05EF4:  MOVWF  FE9
05EF6:  MOVLW  02
05EF8:  ADDWFC xC7,W
05EFA:  MOVWF  FEA
05EFC:  MOVFF  FEF,DCE
05F00:  MOVF   FF2,W
05F02:  MOVWF  00
05F04:  BCF    FF2.7
05F06:  MOVFF  DCD,FAA
05F0A:  MOVFF  DCC,FA9
05F0E:  MOVFF  DCE,FA8
05F12:  BCF    FA6.6
05F14:  BCF    FA6.7
05F16:  BSF    FA6.2
05F18:  MOVLB  F
05F1A:  MOVLW  55
05F1C:  MOVWF  FA7
05F1E:  MOVLW  AA
05F20:  MOVWF  FA7
05F22:  BSF    FA6.1
05F24:  BTFSC  FA6.1
05F26:  BRA    5F24
05F28:  BCF    FA6.2
05F2A:  MOVF   00,W
05F2C:  IORWF  FF2,F
....................                      break;
05F2E:  BRA    5FBE
....................                   }
05F30:  BRA    5FA6
05F32:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage14[j] = RxD_Buff[i];
05F34:  MOVLW  30
05F36:  ADDWF  xC8,W
05F38:  MOVWF  01
05F3A:  MOVLW  0C
05F3C:  ADDWFC xC9,W
05F3E:  MOVWF  03
05F40:  MOVLW  72
05F42:  ADDWF  xC6,W
05F44:  MOVWF  FE9
05F46:  MOVLW  02
05F48:  ADDWFC xC7,W
05F4A:  MOVWF  FEA
05F4C:  MOVFF  FEF,DCE
05F50:  MOVFF  03,FEA
05F54:  MOVFF  01,FE9
05F58:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05F5C:  MOVLW  5D
05F5E:  ADDWF  xC6,W
05F60:  MOVWF  xCC
05F62:  MOVLW  00
05F64:  ADDWFC xC7,W
05F66:  MOVWF  xCD
05F68:  MOVLW  72
05F6A:  ADDWF  xC6,W
05F6C:  MOVWF  FE9
05F6E:  MOVLW  02
05F70:  ADDWFC xC7,W
05F72:  MOVWF  FEA
05F74:  MOVFF  FEF,DCE
05F78:  MOVF   FF2,W
05F7A:  MOVWF  00
05F7C:  BCF    FF2.7
05F7E:  MOVFF  DCD,FAA
05F82:  MOVFF  DCC,FA9
05F86:  MOVFF  DCE,FA8
05F8A:  BCF    FA6.6
05F8C:  BCF    FA6.7
05F8E:  BSF    FA6.2
05F90:  MOVLB  F
05F92:  MOVLW  55
05F94:  MOVWF  FA7
05F96:  MOVLW  AA
05F98:  MOVWF  FA7
05F9A:  BSF    FA6.1
05F9C:  BTFSC  FA6.1
05F9E:  BRA    5F9C
05FA0:  BCF    FA6.2
05FA2:  MOVF   00,W
05FA4:  IORWF  FF2,F
....................                   }
05FA6:  MOVLB  D
05FA8:  MOVFF  DC7,03
05FAC:  MOVF   xC6,W
05FAE:  INCF   xC6,F
05FB0:  BTFSC  FD8.2
05FB2:  INCF   xC7,F
05FB4:  INCF   xC8,F
05FB6:  BTFSC  FD8.2
05FB8:  INCF   xC9,F
05FBA:  BRA    5EC6
05FBC:  MOVLB  F
....................                }
....................                SMS_Massage14[j] = '\0' ; // end string
05FBE:  MOVLW  30
05FC0:  MOVLB  D
05FC2:  ADDWF  xC8,W
05FC4:  MOVWF  FE9
05FC6:  MOVLW  0C
05FC8:  ADDWFC xC9,W
05FCA:  MOVWF  FEA
05FCC:  CLRF   FEF
....................                
....................                j=0;
05FCE:  CLRF   xC9
05FD0:  CLRF   xC8
....................                i++;
05FD2:  INCF   xC6,F
05FD4:  BTFSC  FD8.2
05FD6:  INCF   xC7,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05FD8:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05FDA:  MOVLW  72
05FDC:  ADDWF  xC6,W
05FDE:  MOVWF  FE9
05FE0:  MOVLW  02
05FE2:  ADDWFC xC7,W
05FE4:  MOVWF  FEA
05FE6:  MOVF   FEF,W
05FE8:  SUBLW  0D
05FEA:  BZ    5FF6
05FEC:  MOVF   xC9,F
05FEE:  BNZ   5FF6
05FF0:  MOVF   xC8,W
05FF2:  SUBLW  1E
05FF4:  BC    6046
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05FF6:  MOVLW  5D
05FF8:  ADDWF  xC6,W
05FFA:  MOVWF  xCC
05FFC:  MOVLW  00
05FFE:  ADDWFC xC7,W
06000:  MOVWF  xCD
06002:  MOVLW  72
06004:  ADDWF  xC6,W
06006:  MOVWF  FE9
06008:  MOVLW  02
0600A:  ADDWFC xC7,W
0600C:  MOVWF  FEA
0600E:  MOVFF  FEF,DCE
06012:  MOVF   FF2,W
06014:  MOVWF  00
06016:  BCF    FF2.7
06018:  MOVFF  DCD,FAA
0601C:  MOVFF  DCC,FA9
06020:  MOVFF  DCE,FA8
06024:  BCF    FA6.6
06026:  BCF    FA6.7
06028:  BSF    FA6.2
0602A:  MOVLB  F
0602C:  MOVLW  55
0602E:  MOVWF  FA7
06030:  MOVLW  AA
06032:  MOVWF  FA7
06034:  BSF    FA6.1
06036:  BTFSC  FA6.1
06038:  BRA    6036
0603A:  BCF    FA6.2
0603C:  MOVF   00,W
0603E:  IORWF  FF2,F
....................                      break;
06040:  BRA    60D0
....................                   }
06042:  BRA    60B8
06044:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage15[j] = RxD_Buff[i];
06046:  MOVLW  50
06048:  ADDWF  xC8,W
0604A:  MOVWF  01
0604C:  MOVLW  0C
0604E:  ADDWFC xC9,W
06050:  MOVWF  03
06052:  MOVLW  72
06054:  ADDWF  xC6,W
06056:  MOVWF  FE9
06058:  MOVLW  02
0605A:  ADDWFC xC7,W
0605C:  MOVWF  FEA
0605E:  MOVFF  FEF,DCE
06062:  MOVFF  03,FEA
06066:  MOVFF  01,FE9
0606A:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0606E:  MOVLW  5D
06070:  ADDWF  xC6,W
06072:  MOVWF  xCC
06074:  MOVLW  00
06076:  ADDWFC xC7,W
06078:  MOVWF  xCD
0607A:  MOVLW  72
0607C:  ADDWF  xC6,W
0607E:  MOVWF  FE9
06080:  MOVLW  02
06082:  ADDWFC xC7,W
06084:  MOVWF  FEA
06086:  MOVFF  FEF,DCE
0608A:  MOVF   FF2,W
0608C:  MOVWF  00
0608E:  BCF    FF2.7
06090:  MOVFF  DCD,FAA
06094:  MOVFF  DCC,FA9
06098:  MOVFF  DCE,FA8
0609C:  BCF    FA6.6
0609E:  BCF    FA6.7
060A0:  BSF    FA6.2
060A2:  MOVLB  F
060A4:  MOVLW  55
060A6:  MOVWF  FA7
060A8:  MOVLW  AA
060AA:  MOVWF  FA7
060AC:  BSF    FA6.1
060AE:  BTFSC  FA6.1
060B0:  BRA    60AE
060B2:  BCF    FA6.2
060B4:  MOVF   00,W
060B6:  IORWF  FF2,F
....................                   }
060B8:  MOVLB  D
060BA:  MOVFF  DC7,03
060BE:  MOVF   xC6,W
060C0:  INCF   xC6,F
060C2:  BTFSC  FD8.2
060C4:  INCF   xC7,F
060C6:  INCF   xC8,F
060C8:  BTFSC  FD8.2
060CA:  INCF   xC9,F
060CC:  BRA    5FD8
060CE:  MOVLB  F
....................                }
....................                SMS_Massage15[j] = '\0' ; // end string
060D0:  MOVLW  50
060D2:  MOVLB  D
060D4:  ADDWF  xC8,W
060D6:  MOVWF  FE9
060D8:  MOVLW  0C
060DA:  ADDWFC xC9,W
060DC:  MOVWF  FEA
060DE:  CLRF   FEF
....................                
....................                j=0;
060E0:  CLRF   xC9
060E2:  CLRF   xC8
....................                i++;
060E4:  INCF   xC6,F
060E6:  BTFSC  FD8.2
060E8:  INCF   xC7,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
060EA:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
060EC:  MOVLW  72
060EE:  ADDWF  xC6,W
060F0:  MOVWF  FE9
060F2:  MOVLW  02
060F4:  ADDWFC xC7,W
060F6:  MOVWF  FEA
060F8:  MOVF   FEF,W
060FA:  SUBLW  0D
060FC:  BZ    6108
060FE:  MOVF   xC9,F
06100:  BNZ   6108
06102:  MOVF   xC8,W
06104:  SUBLW  1E
06106:  BC    6158
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06108:  MOVLW  5D
0610A:  ADDWF  xC6,W
0610C:  MOVWF  xCC
0610E:  MOVLW  00
06110:  ADDWFC xC7,W
06112:  MOVWF  xCD
06114:  MOVLW  72
06116:  ADDWF  xC6,W
06118:  MOVWF  FE9
0611A:  MOVLW  02
0611C:  ADDWFC xC7,W
0611E:  MOVWF  FEA
06120:  MOVFF  FEF,DCE
06124:  MOVF   FF2,W
06126:  MOVWF  00
06128:  BCF    FF2.7
0612A:  MOVFF  DCD,FAA
0612E:  MOVFF  DCC,FA9
06132:  MOVFF  DCE,FA8
06136:  BCF    FA6.6
06138:  BCF    FA6.7
0613A:  BSF    FA6.2
0613C:  MOVLB  F
0613E:  MOVLW  55
06140:  MOVWF  FA7
06142:  MOVLW  AA
06144:  MOVWF  FA7
06146:  BSF    FA6.1
06148:  BTFSC  FA6.1
0614A:  BRA    6148
0614C:  BCF    FA6.2
0614E:  MOVF   00,W
06150:  IORWF  FF2,F
....................                      break;
06152:  BRA    61E2
....................                   }
06154:  BRA    61CA
06156:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage16[j] = RxD_Buff[i];
06158:  MOVLW  70
0615A:  ADDWF  xC8,W
0615C:  MOVWF  01
0615E:  MOVLW  0C
06160:  ADDWFC xC9,W
06162:  MOVWF  03
06164:  MOVLW  72
06166:  ADDWF  xC6,W
06168:  MOVWF  FE9
0616A:  MOVLW  02
0616C:  ADDWFC xC7,W
0616E:  MOVWF  FEA
06170:  MOVFF  FEF,DCE
06174:  MOVFF  03,FEA
06178:  MOVFF  01,FE9
0617C:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06180:  MOVLW  5D
06182:  ADDWF  xC6,W
06184:  MOVWF  xCC
06186:  MOVLW  00
06188:  ADDWFC xC7,W
0618A:  MOVWF  xCD
0618C:  MOVLW  72
0618E:  ADDWF  xC6,W
06190:  MOVWF  FE9
06192:  MOVLW  02
06194:  ADDWFC xC7,W
06196:  MOVWF  FEA
06198:  MOVFF  FEF,DCE
0619C:  MOVF   FF2,W
0619E:  MOVWF  00
061A0:  BCF    FF2.7
061A2:  MOVFF  DCD,FAA
061A6:  MOVFF  DCC,FA9
061AA:  MOVFF  DCE,FA8
061AE:  BCF    FA6.6
061B0:  BCF    FA6.7
061B2:  BSF    FA6.2
061B4:  MOVLB  F
061B6:  MOVLW  55
061B8:  MOVWF  FA7
061BA:  MOVLW  AA
061BC:  MOVWF  FA7
061BE:  BSF    FA6.1
061C0:  BTFSC  FA6.1
061C2:  BRA    61C0
061C4:  BCF    FA6.2
061C6:  MOVF   00,W
061C8:  IORWF  FF2,F
....................                   }
061CA:  MOVLB  D
061CC:  MOVFF  DC7,03
061D0:  MOVF   xC6,W
061D2:  INCF   xC6,F
061D4:  BTFSC  FD8.2
061D6:  INCF   xC7,F
061D8:  INCF   xC8,F
061DA:  BTFSC  FD8.2
061DC:  INCF   xC9,F
061DE:  BRA    60EA
061E0:  MOVLB  F
....................                }
....................                SMS_Massage16[j] = '\0' ; // end string
061E2:  MOVLW  70
061E4:  MOVLB  D
061E6:  ADDWF  xC8,W
061E8:  MOVWF  FE9
061EA:  MOVLW  0C
061EC:  ADDWFC xC9,W
061EE:  MOVWF  FEA
061F0:  CLRF   FEF
....................                
....................                j=0;
061F2:  CLRF   xC9
061F4:  CLRF   xC8
....................                i++;
061F6:  INCF   xC6,F
061F8:  BTFSC  FD8.2
061FA:  INCF   xC7,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
061FC:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
061FE:  MOVLW  72
06200:  ADDWF  xC6,W
06202:  MOVWF  FE9
06204:  MOVLW  02
06206:  ADDWFC xC7,W
06208:  MOVWF  FEA
0620A:  MOVF   FEF,W
0620C:  SUBLW  0D
0620E:  BZ    621A
06210:  MOVF   xC9,F
06212:  BNZ   621A
06214:  MOVF   xC8,W
06216:  SUBLW  1E
06218:  BC    626A
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0621A:  MOVLW  5D
0621C:  ADDWF  xC6,W
0621E:  MOVWF  xCC
06220:  MOVLW  00
06222:  ADDWFC xC7,W
06224:  MOVWF  xCD
06226:  MOVLW  72
06228:  ADDWF  xC6,W
0622A:  MOVWF  FE9
0622C:  MOVLW  02
0622E:  ADDWFC xC7,W
06230:  MOVWF  FEA
06232:  MOVFF  FEF,DCE
06236:  MOVF   FF2,W
06238:  MOVWF  00
0623A:  BCF    FF2.7
0623C:  MOVFF  DCD,FAA
06240:  MOVFF  DCC,FA9
06244:  MOVFF  DCE,FA8
06248:  BCF    FA6.6
0624A:  BCF    FA6.7
0624C:  BSF    FA6.2
0624E:  MOVLB  F
06250:  MOVLW  55
06252:  MOVWF  FA7
06254:  MOVLW  AA
06256:  MOVWF  FA7
06258:  BSF    FA6.1
0625A:  BTFSC  FA6.1
0625C:  BRA    625A
0625E:  BCF    FA6.2
06260:  MOVF   00,W
06262:  IORWF  FF2,F
....................                      break;
06264:  BRA    62F4
....................                   }
06266:  BRA    62DC
06268:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage17[j] = RxD_Buff[i];
0626A:  MOVLW  90
0626C:  ADDWF  xC8,W
0626E:  MOVWF  01
06270:  MOVLW  0C
06272:  ADDWFC xC9,W
06274:  MOVWF  03
06276:  MOVLW  72
06278:  ADDWF  xC6,W
0627A:  MOVWF  FE9
0627C:  MOVLW  02
0627E:  ADDWFC xC7,W
06280:  MOVWF  FEA
06282:  MOVFF  FEF,DCE
06286:  MOVFF  03,FEA
0628A:  MOVFF  01,FE9
0628E:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06292:  MOVLW  5D
06294:  ADDWF  xC6,W
06296:  MOVWF  xCC
06298:  MOVLW  00
0629A:  ADDWFC xC7,W
0629C:  MOVWF  xCD
0629E:  MOVLW  72
062A0:  ADDWF  xC6,W
062A2:  MOVWF  FE9
062A4:  MOVLW  02
062A6:  ADDWFC xC7,W
062A8:  MOVWF  FEA
062AA:  MOVFF  FEF,DCE
062AE:  MOVF   FF2,W
062B0:  MOVWF  00
062B2:  BCF    FF2.7
062B4:  MOVFF  DCD,FAA
062B8:  MOVFF  DCC,FA9
062BC:  MOVFF  DCE,FA8
062C0:  BCF    FA6.6
062C2:  BCF    FA6.7
062C4:  BSF    FA6.2
062C6:  MOVLB  F
062C8:  MOVLW  55
062CA:  MOVWF  FA7
062CC:  MOVLW  AA
062CE:  MOVWF  FA7
062D0:  BSF    FA6.1
062D2:  BTFSC  FA6.1
062D4:  BRA    62D2
062D6:  BCF    FA6.2
062D8:  MOVF   00,W
062DA:  IORWF  FF2,F
....................                   }
062DC:  MOVLB  D
062DE:  MOVFF  DC7,03
062E2:  MOVF   xC6,W
062E4:  INCF   xC6,F
062E6:  BTFSC  FD8.2
062E8:  INCF   xC7,F
062EA:  INCF   xC8,F
062EC:  BTFSC  FD8.2
062EE:  INCF   xC9,F
062F0:  BRA    61FC
062F2:  MOVLB  F
....................                }
....................                SMS_Massage17[j] = '\0' ; // end string
062F4:  MOVLW  90
062F6:  MOVLB  D
062F8:  ADDWF  xC8,W
062FA:  MOVWF  FE9
062FC:  MOVLW  0C
062FE:  ADDWFC xC9,W
06300:  MOVWF  FEA
06302:  CLRF   FEF
....................                
....................                j=0;
06304:  CLRF   xC9
06306:  CLRF   xC8
....................                i++;
06308:  INCF   xC6,F
0630A:  BTFSC  FD8.2
0630C:  INCF   xC7,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0630E:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06310:  MOVLW  72
06312:  ADDWF  xC6,W
06314:  MOVWF  FE9
06316:  MOVLW  02
06318:  ADDWFC xC7,W
0631A:  MOVWF  FEA
0631C:  MOVF   FEF,W
0631E:  SUBLW  0D
06320:  BZ    632C
06322:  MOVF   xC9,F
06324:  BNZ   632C
06326:  MOVF   xC8,W
06328:  SUBLW  1E
0632A:  BC    637C
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0632C:  MOVLW  5D
0632E:  ADDWF  xC6,W
06330:  MOVWF  xCC
06332:  MOVLW  00
06334:  ADDWFC xC7,W
06336:  MOVWF  xCD
06338:  MOVLW  72
0633A:  ADDWF  xC6,W
0633C:  MOVWF  FE9
0633E:  MOVLW  02
06340:  ADDWFC xC7,W
06342:  MOVWF  FEA
06344:  MOVFF  FEF,DCE
06348:  MOVF   FF2,W
0634A:  MOVWF  00
0634C:  BCF    FF2.7
0634E:  MOVFF  DCD,FAA
06352:  MOVFF  DCC,FA9
06356:  MOVFF  DCE,FA8
0635A:  BCF    FA6.6
0635C:  BCF    FA6.7
0635E:  BSF    FA6.2
06360:  MOVLB  F
06362:  MOVLW  55
06364:  MOVWF  FA7
06366:  MOVLW  AA
06368:  MOVWF  FA7
0636A:  BSF    FA6.1
0636C:  BTFSC  FA6.1
0636E:  BRA    636C
06370:  BCF    FA6.2
06372:  MOVF   00,W
06374:  IORWF  FF2,F
....................                      break;
06376:  BRA    6406
....................                   }
06378:  BRA    63EE
0637A:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage18[j] = RxD_Buff[i];
0637C:  MOVLW  B0
0637E:  ADDWF  xC8,W
06380:  MOVWF  01
06382:  MOVLW  0C
06384:  ADDWFC xC9,W
06386:  MOVWF  03
06388:  MOVLW  72
0638A:  ADDWF  xC6,W
0638C:  MOVWF  FE9
0638E:  MOVLW  02
06390:  ADDWFC xC7,W
06392:  MOVWF  FEA
06394:  MOVFF  FEF,DCE
06398:  MOVFF  03,FEA
0639C:  MOVFF  01,FE9
063A0:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
063A4:  MOVLW  5D
063A6:  ADDWF  xC6,W
063A8:  MOVWF  xCC
063AA:  MOVLW  00
063AC:  ADDWFC xC7,W
063AE:  MOVWF  xCD
063B0:  MOVLW  72
063B2:  ADDWF  xC6,W
063B4:  MOVWF  FE9
063B6:  MOVLW  02
063B8:  ADDWFC xC7,W
063BA:  MOVWF  FEA
063BC:  MOVFF  FEF,DCE
063C0:  MOVF   FF2,W
063C2:  MOVWF  00
063C4:  BCF    FF2.7
063C6:  MOVFF  DCD,FAA
063CA:  MOVFF  DCC,FA9
063CE:  MOVFF  DCE,FA8
063D2:  BCF    FA6.6
063D4:  BCF    FA6.7
063D6:  BSF    FA6.2
063D8:  MOVLB  F
063DA:  MOVLW  55
063DC:  MOVWF  FA7
063DE:  MOVLW  AA
063E0:  MOVWF  FA7
063E2:  BSF    FA6.1
063E4:  BTFSC  FA6.1
063E6:  BRA    63E4
063E8:  BCF    FA6.2
063EA:  MOVF   00,W
063EC:  IORWF  FF2,F
....................                   }
063EE:  MOVLB  D
063F0:  MOVFF  DC7,03
063F4:  MOVF   xC6,W
063F6:  INCF   xC6,F
063F8:  BTFSC  FD8.2
063FA:  INCF   xC7,F
063FC:  INCF   xC8,F
063FE:  BTFSC  FD8.2
06400:  INCF   xC9,F
06402:  BRA    630E
06404:  MOVLB  F
....................                }
....................                SMS_Massage18[j] = '\0' ; // end string
06406:  MOVLW  B0
06408:  MOVLB  D
0640A:  ADDWF  xC8,W
0640C:  MOVWF  FE9
0640E:  MOVLW  0C
06410:  ADDWFC xC9,W
06412:  MOVWF  FEA
06414:  CLRF   FEF
....................                
....................                j=0;
06416:  CLRF   xC9
06418:  CLRF   xC8
....................                i++;
0641A:  INCF   xC6,F
0641C:  BTFSC  FD8.2
0641E:  INCF   xC7,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06420:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06422:  MOVLW  72
06424:  ADDWF  xC6,W
06426:  MOVWF  FE9
06428:  MOVLW  02
0642A:  ADDWFC xC7,W
0642C:  MOVWF  FEA
0642E:  MOVF   FEF,W
06430:  SUBLW  0D
06432:  BZ    643E
06434:  MOVF   xC9,F
06436:  BNZ   643E
06438:  MOVF   xC8,W
0643A:  SUBLW  1E
0643C:  BC    648E
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0643E:  MOVLW  5D
06440:  ADDWF  xC6,W
06442:  MOVWF  xCC
06444:  MOVLW  00
06446:  ADDWFC xC7,W
06448:  MOVWF  xCD
0644A:  MOVLW  72
0644C:  ADDWF  xC6,W
0644E:  MOVWF  FE9
06450:  MOVLW  02
06452:  ADDWFC xC7,W
06454:  MOVWF  FEA
06456:  MOVFF  FEF,DCE
0645A:  MOVF   FF2,W
0645C:  MOVWF  00
0645E:  BCF    FF2.7
06460:  MOVFF  DCD,FAA
06464:  MOVFF  DCC,FA9
06468:  MOVFF  DCE,FA8
0646C:  BCF    FA6.6
0646E:  BCF    FA6.7
06470:  BSF    FA6.2
06472:  MOVLB  F
06474:  MOVLW  55
06476:  MOVWF  FA7
06478:  MOVLW  AA
0647A:  MOVWF  FA7
0647C:  BSF    FA6.1
0647E:  BTFSC  FA6.1
06480:  BRA    647E
06482:  BCF    FA6.2
06484:  MOVF   00,W
06486:  IORWF  FF2,F
....................                      break;
06488:  BRA    6518
....................                   }
0648A:  BRA    6500
0648C:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage19[j] = RxD_Buff[i];
0648E:  MOVLW  D0
06490:  ADDWF  xC8,W
06492:  MOVWF  01
06494:  MOVLW  0C
06496:  ADDWFC xC9,W
06498:  MOVWF  03
0649A:  MOVLW  72
0649C:  ADDWF  xC6,W
0649E:  MOVWF  FE9
064A0:  MOVLW  02
064A2:  ADDWFC xC7,W
064A4:  MOVWF  FEA
064A6:  MOVFF  FEF,DCE
064AA:  MOVFF  03,FEA
064AE:  MOVFF  01,FE9
064B2:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
064B6:  MOVLW  5D
064B8:  ADDWF  xC6,W
064BA:  MOVWF  xCC
064BC:  MOVLW  00
064BE:  ADDWFC xC7,W
064C0:  MOVWF  xCD
064C2:  MOVLW  72
064C4:  ADDWF  xC6,W
064C6:  MOVWF  FE9
064C8:  MOVLW  02
064CA:  ADDWFC xC7,W
064CC:  MOVWF  FEA
064CE:  MOVFF  FEF,DCE
064D2:  MOVF   FF2,W
064D4:  MOVWF  00
064D6:  BCF    FF2.7
064D8:  MOVFF  DCD,FAA
064DC:  MOVFF  DCC,FA9
064E0:  MOVFF  DCE,FA8
064E4:  BCF    FA6.6
064E6:  BCF    FA6.7
064E8:  BSF    FA6.2
064EA:  MOVLB  F
064EC:  MOVLW  55
064EE:  MOVWF  FA7
064F0:  MOVLW  AA
064F2:  MOVWF  FA7
064F4:  BSF    FA6.1
064F6:  BTFSC  FA6.1
064F8:  BRA    64F6
064FA:  BCF    FA6.2
064FC:  MOVF   00,W
064FE:  IORWF  FF2,F
....................                   }
06500:  MOVLB  D
06502:  MOVFF  DC7,03
06506:  MOVF   xC6,W
06508:  INCF   xC6,F
0650A:  BTFSC  FD8.2
0650C:  INCF   xC7,F
0650E:  INCF   xC8,F
06510:  BTFSC  FD8.2
06512:  INCF   xC9,F
06514:  BRA    6420
06516:  MOVLB  F
....................                }
....................                SMS_Massage19[j] = '\0' ; // end string
06518:  MOVLW  D0
0651A:  MOVLB  D
0651C:  ADDWF  xC8,W
0651E:  MOVWF  FE9
06520:  MOVLW  0C
06522:  ADDWFC xC9,W
06524:  MOVWF  FEA
06526:  CLRF   FEF
....................                
....................                j=0;
06528:  CLRF   xC9
0652A:  CLRF   xC8
....................                i++;
0652C:  INCF   xC6,F
0652E:  BTFSC  FD8.2
06530:  INCF   xC7,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06532:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06534:  MOVLW  72
06536:  ADDWF  xC6,W
06538:  MOVWF  FE9
0653A:  MOVLW  02
0653C:  ADDWFC xC7,W
0653E:  MOVWF  FEA
06540:  MOVF   FEF,W
06542:  SUBLW  0D
06544:  BZ    6550
06546:  MOVF   xC9,F
06548:  BNZ   6550
0654A:  MOVF   xC8,W
0654C:  SUBLW  1E
0654E:  BC    65A0
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06550:  MOVLW  5D
06552:  ADDWF  xC6,W
06554:  MOVWF  xCC
06556:  MOVLW  00
06558:  ADDWFC xC7,W
0655A:  MOVWF  xCD
0655C:  MOVLW  72
0655E:  ADDWF  xC6,W
06560:  MOVWF  FE9
06562:  MOVLW  02
06564:  ADDWFC xC7,W
06566:  MOVWF  FEA
06568:  MOVFF  FEF,DCE
0656C:  MOVF   FF2,W
0656E:  MOVWF  00
06570:  BCF    FF2.7
06572:  MOVFF  DCD,FAA
06576:  MOVFF  DCC,FA9
0657A:  MOVFF  DCE,FA8
0657E:  BCF    FA6.6
06580:  BCF    FA6.7
06582:  BSF    FA6.2
06584:  MOVLB  F
06586:  MOVLW  55
06588:  MOVWF  FA7
0658A:  MOVLW  AA
0658C:  MOVWF  FA7
0658E:  BSF    FA6.1
06590:  BTFSC  FA6.1
06592:  BRA    6590
06594:  BCF    FA6.2
06596:  MOVF   00,W
06598:  IORWF  FF2,F
....................                      break;
0659A:  BRA    662A
....................                   }
0659C:  BRA    6612
0659E:  MOVLB  D
....................                   else
....................                   {
....................                      SMS_Massage20[j] = RxD_Buff[i];
065A0:  MOVLW  F0
065A2:  ADDWF  xC8,W
065A4:  MOVWF  01
065A6:  MOVLW  0C
065A8:  ADDWFC xC9,W
065AA:  MOVWF  03
065AC:  MOVLW  72
065AE:  ADDWF  xC6,W
065B0:  MOVWF  FE9
065B2:  MOVLW  02
065B4:  ADDWFC xC7,W
065B6:  MOVWF  FEA
065B8:  MOVFF  FEF,DCE
065BC:  MOVFF  03,FEA
065C0:  MOVFF  01,FE9
065C4:  MOVFF  DCE,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
065C8:  MOVLW  5D
065CA:  ADDWF  xC6,W
065CC:  MOVWF  xCC
065CE:  MOVLW  00
065D0:  ADDWFC xC7,W
065D2:  MOVWF  xCD
065D4:  MOVLW  72
065D6:  ADDWF  xC6,W
065D8:  MOVWF  FE9
065DA:  MOVLW  02
065DC:  ADDWFC xC7,W
065DE:  MOVWF  FEA
065E0:  MOVFF  FEF,DCE
065E4:  MOVF   FF2,W
065E6:  MOVWF  00
065E8:  BCF    FF2.7
065EA:  MOVFF  DCD,FAA
065EE:  MOVFF  DCC,FA9
065F2:  MOVFF  DCE,FA8
065F6:  BCF    FA6.6
065F8:  BCF    FA6.7
065FA:  BSF    FA6.2
065FC:  MOVLB  F
065FE:  MOVLW  55
06600:  MOVWF  FA7
06602:  MOVLW  AA
06604:  MOVWF  FA7
06606:  BSF    FA6.1
06608:  BTFSC  FA6.1
0660A:  BRA    6608
0660C:  BCF    FA6.2
0660E:  MOVF   00,W
06610:  IORWF  FF2,F
....................                   }
06612:  MOVLB  D
06614:  MOVFF  DC7,03
06618:  MOVF   xC6,W
0661A:  INCF   xC6,F
0661C:  BTFSC  FD8.2
0661E:  INCF   xC7,F
06620:  INCF   xC8,F
06622:  BTFSC  FD8.2
06624:  INCF   xC9,F
06626:  BRA    6532
06628:  MOVLB  F
....................                }
....................                SMS_Massage20[j] = '\0' ; // end string
0662A:  MOVLW  F0
0662C:  MOVLB  D
0662E:  ADDWF  xC8,W
06630:  MOVWF  FE9
06632:  MOVLW  0C
06634:  ADDWFC xC9,W
06636:  MOVWF  FEA
06638:  CLRF   FEF
....................                
....................             
....................                TxD_Buff[0] = Address ;         //Address
0663A:  MOVFF  70,72
....................                TxD_Buff[1] = 0x22 ;            //return function code
0663E:  MOVLW  22
06640:  MOVLB  0
06642:  MOVWF  x73
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
06644:  MOVLB  D
06646:  CLRF   xCE
06648:  MOVLW  72
0664A:  MOVWF  xCD
0664C:  MOVLW  02
0664E:  MOVWF  xCF
06650:  MOVLB  0
06652:  CALL   2546
....................    
....................                TxD_Buff[2] = CRC_Hi ;
06656:  MOVFF  673,74
....................                TxD_Buff[3] = CRC_Lo ;
0665A:  MOVFF  672,75
....................    
....................                output_bit(P485ctrl,1);
0665E:  BSF    F8A.3
06660:  BCF    F93.3
....................                delay_ms(10);
06662:  MOVLW  0A
06664:  MOVLB  D
06666:  MOVWF  xCC
06668:  MOVLB  0
0666A:  CALL   0A28
....................    
....................                putc(Txd_Buff[0]);
0666E:  MOVF   x72,W
06670:  CALL   259C
....................                putc(Txd_Buff[1]);
06674:  MOVF   x73,W
06676:  CALL   259C
....................                putc(Txd_Buff[2]);
0667A:  MOVF   x74,W
0667C:  CALL   259C
....................                putc(Txd_Buff[3]);
06680:  MOVF   x75,W
06682:  CALL   259C
....................    
....................                delay_ms(3);
06686:  MOVLW  03
06688:  MOVLB  D
0668A:  MOVWF  xCC
0668C:  MOVLB  0
0668E:  CALL   0A28
....................                output_bit(P485ctrl,0);
06692:  BCF    F8A.3
06694:  BCF    F93.3
06696:  MOVLB  6
....................             }
....................             ////////////////////////////// WRITE Faultname //////////////////////////
.................... 
....................          
....................                   if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
06698:  MOVLB  2
0669A:  MOVF   x73,W
0669C:  SUBLW  03
0669E:  BNZ   6748
....................          {
....................             Data_Buff[0] = Input9_16; //>> Start_Address ;
066A0:  MOVFF  4D,67B
....................             Data_Buff[1] = Input1_8;// >> Start_Address ;
066A4:  MOVFF  49,67C
....................             Data_Buff[2] = Input25_32;
066A8:  MOVFF  4F,67D
....................             Data_Buff[3] = Input17_24;// >> Start_Address ;
066AC:  MOVFF  4E,67E
....................             
....................             TxD_Buff[0] = Address ;         //Address
066B0:  MOVFF  70,72
....................             TxD_Buff[1] = 0x03 ;           //Function Code
066B4:  MOVLW  03
066B6:  MOVLB  0
066B8:  MOVWF  x73
....................             TxD_Buff[2] = 0x04 ;          //Byte Count
066BA:  MOVLW  04
066BC:  MOVWF  x74
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
066BE:  MOVFF  67B,75
....................             TxD_Buff[4] = Data_Buff[1];  //second byte Data
066C2:  MOVFF  67C,76
....................             TxD_Buff[5] = Data_Buff[2]; 
066C6:  MOVFF  67D,77
....................             TxD_Buff[6] = Data_Buff[3]; 
066CA:  MOVFF  67E,78
.................... 
....................             CRC(TxD_Buff,7)   ;            //Cal CRC 5 Byte
066CE:  MOVLB  D
066D0:  CLRF   xCE
066D2:  MOVLW  72
066D4:  MOVWF  xCD
066D6:  MOVLW  07
066D8:  MOVWF  xCF
066DA:  MOVLB  0
066DC:  CALL   2546
.................... 
....................             TxD_Buff[7] = CRC_Hi ;
066E0:  MOVFF  673,79
....................             TxD_Buff[8] = CRC_Lo ;
066E4:  MOVFF  672,7A
.................... 
....................             output_bit(P485ctrl,1);
066E8:  BSF    F8A.3
066EA:  BCF    F93.3
....................             restart_wdt();
066EC:  CLRWDT
....................             delay_ms(4);
066EE:  MOVLW  04
066F0:  MOVLB  D
066F2:  MOVWF  xCC
066F4:  MOVLB  0
066F6:  CALL   0A28
....................             restart_wdt();
066FA:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
066FC:  MOVF   x72,W
066FE:  CALL   259C
....................             putc(TxD_Buff[1]) ;               //Function Code
06702:  MOVF   x73,W
06704:  CALL   259C
....................             putc(TxD_Buff[2]) ;               //Byte Count
06708:  MOVF   x74,W
0670A:  CALL   259C
....................             putc(TxD_Buff[3]) ;
0670E:  MOVF   x75,W
06710:  CALL   259C
....................             putc(TxD_Buff[4]) ;
06714:  MOVF   x76,W
06716:  CALL   259C
....................             putc(TxD_Buff[5]) ;
0671A:  MOVF   x77,W
0671C:  CALL   259C
....................             putc(TxD_Buff[6]) ;
06720:  MOVF   x78,W
06722:  CALL   259C
....................             putc(TxD_Buff[7]) ;
06726:  MOVF   x79,W
06728:  CALL   259C
....................             putc(TxD_Buff[8]) ;
0672C:  MOVF   x7A,W
0672E:  CALL   259C
....................             //putc(TxD_Buff[9]) ;
.................... 
....................             restart_wdt();
06732:  CLRWDT
....................             delay_ms(3);
06734:  MOVLW  03
06736:  MOVLB  D
06738:  MOVWF  xCC
0673A:  MOVLB  0
0673C:  CALL   0A28
....................             restart_wdt();
06740:  CLRWDT
....................             output_bit(P485ctrl,0);
06742:  BCF    F8A.3
06744:  BCF    F93.3
06746:  MOVLB  2
.................... 
....................          }
....................        
....................       }  
.................... 
....................       Send_check_Time = 500; //5 Second
06748:  MOVLW  01
0674A:  MOVLB  6
0674C:  MOVWF  x75
0674E:  MOVLW  F4
06750:  MOVWF  x74
....................    }
.................... 
....................    recieve_completed = 0 ;
06752:  BCF    30.6
....................    sequence = end_sq ;
06754:  MOVFF  66,6F
....................    T_timeout = 0x00;
06758:  MOVLB  A
0675A:  CLRF   x7D
....................    RxD_DataLen = 0x00 ;
0675C:  MOVLB  0
0675E:  CLRF   x71
....................    output_bit(P485ctrl,0);
06760:  BCF    F8A.3
06762:  BCF    F93.3
06764:  GOTO   C48E (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................     ///////////////////////--Edit--///////////////////
....................     //unsigned char MCP23s17_dat1=0;
....................     //unsigned char MCP23s17_dat2=0;
....................     //unsigned char MCP23s17_dat3=0;
....................     //unsigned char MCP23s17_dat4=0;
....................     
....................     /*
....................     MCP23s17_dat1 = IO_INPUT_A(IO_DEVICE_0);
....................     MCP23s17_dat2 = IO_INPUT_B(IO_DEVICE_0);
....................     MCP23s17_dat3 = IO_INPUT_A(IO_DEVICE_1);
....................     MCP23s17_dat4 = IO_INPUT_B(IO_DEVICE_1);
....................     if((MCP23s17_dat1==0)&&(MCP23s17_dat2==0)&&(MCP23s17_dat3==0)&&(MCP23s17_dat4==0))
....................      return;
....................      */
....................     /*
....................     do
....................     {
....................       MCP23s17_dat1 = IO_INPUT_A(IO_DEVICE_0);
....................       //MCP23s17_dat2 = IO_INPUT_B(IO_DEVICE_0);
....................       MCP23s17_dat3 = IO_INPUT_A(IO_DEVICE_1);
....................       //MCP23s17_dat4 = IO_INPUT_B(IO_DEVICE_1);
....................       restart_wdt();
....................     }while((MCP23s17_dat1==0)&&(MCP23s17_dat3==0));
....................     */
....................      
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
*
02A8E:  MOVLB  D
02A90:  CLRF   xCD
02A92:  MOVLB  0
02A94:  RCALL  29D8
02A96:  MOVFF  01,A7B
....................         
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02A9A:  BTFSS  1A.4
02A9C:  BRA    2AA4
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
02A9E:  MOVLB  A
02AA0:  COMF   x7B,F
02AA2:  MOVLB  0
....................       }
....................       
....................       FaultNow[11] = MCP23s17_Ip_dat;
02AA4:  MOVLB  D
02AA6:  BCF    x50.3
02AA8:  MOVLB  A
02AAA:  BTFSS  x7B.0
02AAC:  BRA    2AB4
02AAE:  MOVLB  D
02AB0:  BSF    x50.3
02AB2:  MOVLB  A
....................       FaultNow[12] = MCP23s17_Ip_dat >> 1;
02AB4:  BCF    FD8.0
02AB6:  RRCF   x7B,W
02AB8:  MOVLB  D
02ABA:  BCF    x50.4
02ABC:  BTFSC  FE8.0
02ABE:  BSF    x50.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 2;
02AC0:  MOVLB  A
02AC2:  RRCF   x7B,W
02AC4:  MOVWF  00
02AC6:  RRCF   00,F
02AC8:  MOVLW  3F
02ACA:  ANDWF  00,F
02ACC:  MOVLB  D
02ACE:  BCF    x50.5
02AD0:  BTFSC  00.0
02AD2:  BSF    x50.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 3;
02AD4:  MOVLB  A
02AD6:  RRCF   x7B,W
02AD8:  MOVWF  00
02ADA:  RRCF   00,F
02ADC:  RRCF   00,F
02ADE:  MOVLW  1F
02AE0:  ANDWF  00,F
02AE2:  MOVLB  D
02AE4:  BCF    x50.6
02AE6:  BTFSC  00.0
02AE8:  BSF    x50.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 4;
02AEA:  MOVLB  A
02AEC:  SWAPF  x7B,W
02AEE:  MOVWF  00
02AF0:  MOVLW  0F
02AF2:  ANDWF  00,F
02AF4:  MOVLB  D
02AF6:  BCF    x50.7
02AF8:  BTFSC  00.0
02AFA:  BSF    x50.7
....................       FaultNow[16] = MCP23s17_Ip_dat >> 5;
02AFC:  MOVLB  A
02AFE:  SWAPF  x7B,W
02B00:  MOVWF  00
02B02:  RRCF   00,F
02B04:  MOVLW  07
02B06:  ANDWF  00,F
02B08:  MOVLB  D
02B0A:  BCF    x51.0
02B0C:  BTFSC  00.0
02B0E:  BSF    x51.0
....................       FaultNow[17] = MCP23s17_Ip_dat >> 6;
02B10:  MOVLB  A
02B12:  SWAPF  x7B,W
02B14:  MOVWF  00
02B16:  RRCF   00,F
02B18:  RRCF   00,F
02B1A:  MOVLW  03
02B1C:  ANDWF  00,F
02B1E:  MOVLB  D
02B20:  BCF    x51.1
02B22:  BTFSC  00.0
02B24:  BSF    x51.1
....................       FaultNow[18] = MCP23s17_Ip_dat >> 7;
02B26:  CLRF   00
02B28:  MOVLB  A
02B2A:  BTFSC  x7B.7
02B2C:  BSF    00.0
02B2E:  MOVLB  D
02B30:  BCF    x51.2
02B32:  BTFSC  00.0
02B34:  BSF    x51.2
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
02B36:  CLRF   xCD
02B38:  MOVLB  0
02B3A:  RCALL  29F4
02B3C:  MOVFF  01,A7B
....................       
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02B40:  BTFSS  1A.4
02B42:  BRA    2B4A
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
02B44:  MOVLB  A
02B46:  COMF   x7B,F
02B48:  MOVLB  0
....................       }
....................       
....................       FaultNow[19] = MCP23s17_Ip_dat;
02B4A:  MOVLB  D
02B4C:  BCF    x51.3
02B4E:  MOVLB  A
02B50:  BTFSS  x7B.0
02B52:  BRA    2B5A
02B54:  MOVLB  D
02B56:  BSF    x51.3
02B58:  MOVLB  A
....................       FaultNow[20] = MCP23s17_Ip_dat >> 1;
02B5A:  BCF    FD8.0
02B5C:  RRCF   x7B,W
02B5E:  MOVLB  D
02B60:  BCF    x51.4
02B62:  BTFSC  FE8.0
02B64:  BSF    x51.4
....................       
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
02B66:  MOVLW  02
02B68:  MOVWF  xCD
02B6A:  MOVLB  0
02B6C:  RCALL  29D8
02B6E:  MOVFF  01,A7B
....................       
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02B72:  BTFSS  1A.4
02B74:  BRA    2B7C
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
02B76:  MOVLB  A
02B78:  COMF   x7B,F
02B7A:  MOVLB  0
....................          
....................       }
....................       
....................       FaultNow[1] = MCP23s17_Ip_dat;
02B7C:  MOVLB  D
02B7E:  BCF    x4F.1
02B80:  MOVLB  A
02B82:  BTFSS  x7B.0
02B84:  BRA    2B8C
02B86:  MOVLB  D
02B88:  BSF    x4F.1
02B8A:  MOVLB  A
....................       FaultNow[2] = MCP23s17_Ip_dat >> 1;
02B8C:  BCF    FD8.0
02B8E:  RRCF   x7B,W
02B90:  MOVLB  D
02B92:  BCF    x4F.2
02B94:  BTFSC  FE8.0
02B96:  BSF    x4F.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 2;
02B98:  MOVLB  A
02B9A:  RRCF   x7B,W
02B9C:  MOVWF  00
02B9E:  RRCF   00,F
02BA0:  MOVLW  3F
02BA2:  ANDWF  00,F
02BA4:  MOVLB  D
02BA6:  BCF    x4F.3
02BA8:  BTFSC  00.0
02BAA:  BSF    x4F.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 3;
02BAC:  MOVLB  A
02BAE:  RRCF   x7B,W
02BB0:  MOVWF  00
02BB2:  RRCF   00,F
02BB4:  RRCF   00,F
02BB6:  MOVLW  1F
02BB8:  ANDWF  00,F
02BBA:  MOVLB  D
02BBC:  BCF    x4F.4
02BBE:  BTFSC  00.0
02BC0:  BSF    x4F.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 4;
02BC2:  MOVLB  A
02BC4:  SWAPF  x7B,W
02BC6:  MOVWF  00
02BC8:  MOVLW  0F
02BCA:  ANDWF  00,F
02BCC:  MOVLB  D
02BCE:  BCF    x4F.5
02BD0:  BTFSC  00.0
02BD2:  BSF    x4F.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 5;
02BD4:  MOVLB  A
02BD6:  SWAPF  x7B,W
02BD8:  MOVWF  00
02BDA:  RRCF   00,F
02BDC:  MOVLW  07
02BDE:  ANDWF  00,F
02BE0:  MOVLB  D
02BE2:  BCF    x4F.6
02BE4:  BTFSC  00.0
02BE6:  BSF    x4F.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 6;
02BE8:  MOVLB  A
02BEA:  SWAPF  x7B,W
02BEC:  MOVWF  00
02BEE:  RRCF   00,F
02BF0:  RRCF   00,F
02BF2:  MOVLW  03
02BF4:  ANDWF  00,F
02BF6:  MOVLB  D
02BF8:  BCF    x4F.7
02BFA:  BTFSC  00.0
02BFC:  BSF    x4F.7
....................       FaultNow[8] = MCP23s17_Ip_dat >> 7;
02BFE:  CLRF   00
02C00:  MOVLB  A
02C02:  BTFSC  x7B.7
02C04:  BSF    00.0
02C06:  MOVLB  D
02C08:  BCF    x50.0
02C0A:  BTFSC  00.0
02C0C:  BSF    x50.0
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
02C0E:  MOVLW  02
02C10:  MOVWF  xCD
02C12:  MOVLB  0
02C14:  RCALL  29F4
02C16:  MOVFF  01,A7B
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02C1A:  BTFSS  1A.4
02C1C:  BRA    2C24
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
02C1E:  MOVLB  A
02C20:  COMF   x7B,F
02C22:  MOVLB  0
....................       }
....................       
....................       FaultNow[9] = MCP23s17_Ip_dat;
02C24:  MOVLB  D
02C26:  BCF    x50.1
02C28:  MOVLB  A
02C2A:  BTFSS  x7B.0
02C2C:  BRA    2C34
02C2E:  MOVLB  D
02C30:  BSF    x50.1
02C32:  MOVLB  A
....................       FaultNow[10] = MCP23s17_Ip_dat >> 1;
02C34:  BCF    FD8.0
02C36:  RRCF   x7B,W
02C38:  MOVLB  D
02C3A:  BCF    x50.2
02C3C:  BTFSC  FE8.0
02C3E:  BSF    x50.2
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=20; i++)
02C40:  MOVLW  01
02C42:  MOVWF  xCC
02C44:  MOVF   xCC,W
02C46:  SUBLW  14
02C48:  BTFSS  FD8.0
02C4A:  BRA    321E
....................       {
....................          if(FaultNCNO[i] ==NO)
02C4C:  MOVFF  DCC,DD0
02C50:  MOVLW  0D
02C52:  MOVWF  xD2
02C54:  MOVLW  A6
02C56:  MOVWF  xD1
02C58:  MOVLB  0
02C5A:  RCALL  24AA
02C5C:  MOVF   01,W
02C5E:  ANDLW  01
02C60:  SUBLW  01
02C62:  BTFSS  FD8.2
02C64:  BRA    2F2E
....................          {
....................              if(FaultNow[i]==0)
02C66:  MOVFF  DCC,DD0
02C6A:  MOVLW  0D
02C6C:  MOVLB  D
02C6E:  MOVWF  xD2
02C70:  MOVLW  4F
02C72:  MOVWF  xD1
02C74:  MOVLB  0
02C76:  RCALL  24AA
02C78:  MOVF   01,W
02C7A:  ANDLW  01
02C7C:  BTFSS  FD8.2
02C7E:  BRA    2DD6
....................              {   
....................                if(FaultAgo[i]==0)
02C80:  MOVFF  DCC,DD0
02C84:  MOVLW  0D
02C86:  MOVLB  D
02C88:  MOVWF  xD2
02C8A:  MOVLW  4C
02C8C:  MOVWF  xD1
02C8E:  MOVLB  0
02C90:  RCALL  24AA
02C92:  MOVF   01,W
02C94:  ANDLW  01
02C96:  BTFSS  FD8.2
02C98:  BRA    2DBA
....................                {
....................                    ReleaseTime[i]++;
02C9A:  BCF    FD8.0
02C9C:  MOVLB  D
02C9E:  RLCF   xCC,W
02CA0:  CLRF   03
02CA2:  ADDLW  52
02CA4:  MOVWF  FE9
02CA6:  MOVLW  0D
02CA8:  ADDWFC 03,W
02CAA:  MOVWF  FEA
02CAC:  MOVLW  01
02CAE:  ADDWF  FEE,F
02CB0:  BNC   2CB4
02CB2:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
02CB4:  BCF    FD8.0
02CB6:  RLCF   xCC,W
02CB8:  CLRF   03
02CBA:  ADDLW  52
02CBC:  MOVWF  FE9
02CBE:  MOVLW  0D
02CC0:  ADDWFC 03,W
02CC2:  MOVWF  FEA
02CC4:  MOVFF  FEC,DCE
02CC8:  MOVF   FED,F
02CCA:  MOVFF  FEF,DCD
02CCE:  BCF    FD8.0
02CD0:  RLCF   xCC,W
02CD2:  CLRF   03
02CD4:  ADDLW  7C
02CD6:  MOVWF  FE9
02CD8:  MOVLW  0D
02CDA:  ADDWFC 03,W
02CDC:  MOVWF  FEA
02CDE:  MOVFF  FEC,DD2
02CE2:  MOVF   FED,F
02CE4:  MOVFF  FEF,DD1
02CE8:  CLRF   xD4
02CEA:  MOVLW  4B
02CEC:  MOVWF  xD3
02CEE:  MOVLB  0
02CF0:  RCALL  2A10
02CF2:  MOVFF  02,DD0
02CF6:  MOVFF  01,DCF
02CFA:  MOVLW  0F
02CFC:  MOVLB  D
02CFE:  ADDWF  01,W
02D00:  MOVWF  01
02D02:  MOVLW  00
02D04:  ADDWFC 02,W
02D06:  MOVWF  03
02D08:  MOVF   03,W
02D0A:  SUBWF  xCE,W
02D0C:  BNC   2DB6
02D0E:  BNZ   2D16
02D10:  MOVF   01,W
02D12:  SUBWF  xCD,W
02D14:  BNC   2DB6
....................                    {   
....................                      ReleaseTime[i] = 0;
02D16:  BCF    FD8.0
02D18:  RLCF   xCC,W
02D1A:  CLRF   03
02D1C:  ADDLW  52
02D1E:  MOVWF  FE9
02D20:  MOVLW  0D
02D22:  ADDWFC 03,W
02D24:  MOVWF  FEA
02D26:  CLRF   FEC
02D28:  MOVF   FED,F
02D2A:  CLRF   FEF
....................                      switch(i)
02D2C:  MOVLW  01
02D2E:  SUBWF  xCC,W
02D30:  ADDLW  EC
02D32:  BC    2DB6
02D34:  ADDLW  14
02D36:  MOVLB  0
02D38:  GOTO   344A
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
02D3C:  MOVLB  D
02D3E:  BCF    x10.0
....................                         break;
02D40:  BRA    2DB6
....................                         case 2:
....................                            Inputt.B2 = 0; 
02D42:  MOVLB  D
02D44:  BCF    x10.1
....................                         break;
02D46:  BRA    2DB6
....................                         case 3:
....................                            Inputt.B3 = 0; 
02D48:  MOVLB  D
02D4A:  BCF    x10.2
....................                         break;
02D4C:  BRA    2DB6
....................                         case 4:
....................                            Inputt.B4 = 0; 
02D4E:  MOVLB  D
02D50:  BCF    x10.3
....................                         break;
02D52:  BRA    2DB6
....................                         case 5:
....................                            Inputt.B5 = 0; 
02D54:  MOVLB  D
02D56:  BCF    x10.4
....................                         break;
02D58:  BRA    2DB6
....................                         case 6:
....................                            Inputt.B6 = 0; 
02D5A:  MOVLB  D
02D5C:  BCF    x10.5
....................                         break;
02D5E:  BRA    2DB6
....................                         case 7:
....................                            Inputt.B7 = 0; 
02D60:  MOVLB  D
02D62:  BCF    x10.6
....................                          break;
02D64:  BRA    2DB6
....................                          case 8:
....................                            Inputt.B8 = 0; 
02D66:  MOVLB  D
02D68:  BCF    x10.7
....................                         break;
02D6A:  BRA    2DB6
....................                         case 9:
....................                            Inputt.B9 = 0; 
02D6C:  MOVLB  D
02D6E:  BCF    x11.0
....................                         break;
02D70:  BRA    2DB6
....................                         case 10:
....................                            Inputt.B10 = 0; 
02D72:  MOVLB  D
02D74:  BCF    x11.1
....................                         break;
02D76:  BRA    2DB6
....................                         case 11:
....................                            Inputt.B11 = 0; 
02D78:  MOVLB  D
02D7A:  BCF    x11.2
....................                         break;
02D7C:  BRA    2DB6
....................                         case 12:
....................                            Inputt.B12 = 0; 
02D7E:  MOVLB  D
02D80:  BCF    x11.3
....................                         break;
02D82:  BRA    2DB6
....................                         case 13:
....................                            Inputt.B13 = 0; 
02D84:  MOVLB  D
02D86:  BCF    x11.4
....................                         break;
02D88:  BRA    2DB6
....................                         case 14:
....................                            Inputt.B14 = 0; 
02D8A:  MOVLB  D
02D8C:  BCF    x11.5
....................                         break;
02D8E:  BRA    2DB6
....................                         case 15:
....................                            Inputt.B15 = 0; 
02D90:  MOVLB  D
02D92:  BCF    x11.6
....................                         break;
02D94:  BRA    2DB6
....................                         case 16:
....................                             Inputt.B16 = 0; 
02D96:  MOVLB  D
02D98:  BCF    x11.7
....................                          break; 
02D9A:  BRA    2DB6
....................                         case 17:
....................                            Inputt.B17 = 0; 
02D9C:  MOVLB  D
02D9E:  BCF    x12.0
....................                          break;
02DA0:  BRA    2DB6
....................                          case 18:
....................                            Inputt.B18 = 0; 
02DA2:  MOVLB  D
02DA4:  BCF    x12.1
....................                         break;
02DA6:  BRA    2DB6
....................                         case 19:
....................                            Inputt.B19 = 0; 
02DA8:  MOVLB  D
02DAA:  BCF    x12.2
....................                         break;
02DAC:  BRA    2DB6
....................                         case 20:
....................                            Inputt.B20 = 0; 
02DAE:  MOVLB  D
02DB0:  BCF    x12.3
....................                         break;
02DB2:  BRA    2DB6
02DB4:  MOVLB  D
....................                                    
....................                      }                 
....................                    }
....................                }
02DB6:  BRA    2DD2
02DB8:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02DBA:  BCF    FD8.0
02DBC:  MOVLB  D
02DBE:  RLCF   xCC,W
02DC0:  CLRF   03
02DC2:  ADDLW  52
02DC4:  MOVWF  FE9
02DC6:  MOVLW  0D
02DC8:  ADDWFC 03,W
02DCA:  MOVWF  FEA
02DCC:  CLRF   FEC
02DCE:  MOVF   FED,F
02DD0:  CLRF   FEF
....................                }
....................              }
02DD2:  BRA    2F2C
02DD4:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
02DD6:  MOVFF  DCC,DD0
02DDA:  MOVLW  0D
02DDC:  MOVLB  D
02DDE:  MOVWF  xD2
02DE0:  MOVLW  4C
02DE2:  MOVWF  xD1
02DE4:  MOVLB  0
02DE6:  CALL   24AA
02DEA:  MOVF   01,W
02DEC:  ANDLW  01
02DEE:  SUBLW  01
02DF0:  BTFSS  FD8.2
02DF2:  BRA    2F14
....................                {
....................                    ReleaseTime[i]++;
02DF4:  BCF    FD8.0
02DF6:  MOVLB  D
02DF8:  RLCF   xCC,W
02DFA:  CLRF   03
02DFC:  ADDLW  52
02DFE:  MOVWF  FE9
02E00:  MOVLW  0D
02E02:  ADDWFC 03,W
02E04:  MOVWF  FEA
02E06:  MOVLW  01
02E08:  ADDWF  FEE,F
02E0A:  BNC   2E0E
02E0C:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
02E0E:  BCF    FD8.0
02E10:  RLCF   xCC,W
02E12:  CLRF   03
02E14:  ADDLW  52
02E16:  MOVWF  FE9
02E18:  MOVLW  0D
02E1A:  ADDWFC 03,W
02E1C:  MOVWF  FEA
02E1E:  MOVFF  FEC,DCE
02E22:  MOVF   FED,F
02E24:  MOVFF  FEF,DCD
02E28:  BCF    FD8.0
02E2A:  RLCF   xCC,W
02E2C:  CLRF   03
02E2E:  ADDLW  7C
02E30:  MOVWF  FE9
02E32:  MOVLW  0D
02E34:  ADDWFC 03,W
02E36:  MOVWF  FEA
02E38:  MOVFF  FEC,DD2
02E3C:  MOVF   FED,F
02E3E:  MOVFF  FEF,DD1
02E42:  CLRF   xD4
02E44:  MOVLW  4B
02E46:  MOVWF  xD3
02E48:  MOVLB  0
02E4A:  RCALL  2A10
02E4C:  MOVFF  02,DD0
02E50:  MOVFF  01,DCF
02E54:  MOVLW  0F
02E56:  MOVLB  D
02E58:  ADDWF  01,W
02E5A:  MOVWF  01
02E5C:  MOVLW  00
02E5E:  ADDWFC 02,W
02E60:  MOVWF  03
02E62:  MOVF   03,W
02E64:  SUBWF  xCE,W
02E66:  BNC   2F10
02E68:  BNZ   2E70
02E6A:  MOVF   01,W
02E6C:  SUBWF  xCD,W
02E6E:  BNC   2F10
....................                    {   
....................                      ReleaseTime[i] = 1;
02E70:  BCF    FD8.0
02E72:  RLCF   xCC,W
02E74:  CLRF   03
02E76:  ADDLW  52
02E78:  MOVWF  FE9
02E7A:  MOVLW  0D
02E7C:  ADDWFC 03,W
02E7E:  MOVWF  FEA
02E80:  CLRF   FEC
02E82:  MOVF   FED,F
02E84:  MOVLW  01
02E86:  MOVWF  FEF
....................                      switch(i)
02E88:  SUBWF  xCC,W
02E8A:  ADDLW  EC
02E8C:  BC    2F10
02E8E:  ADDLW  14
02E90:  MOVLB  0
02E92:  GOTO   348C
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
02E96:  MOVLB  D
02E98:  BSF    x10.0
....................                         break;
02E9A:  BRA    2F10
....................                         case 2:
....................                            Inputt.B2 = 1; 
02E9C:  MOVLB  D
02E9E:  BSF    x10.1
....................                         break;
02EA0:  BRA    2F10
....................                         case 3:
....................                            Inputt.B3 = 1; 
02EA2:  MOVLB  D
02EA4:  BSF    x10.2
....................                         break;
02EA6:  BRA    2F10
....................                         case 4:
....................                            Inputt.B4 = 1; 
02EA8:  MOVLB  D
02EAA:  BSF    x10.3
....................                         break;
02EAC:  BRA    2F10
....................                         case 5:
....................                            Inputt.B5 = 1; 
02EAE:  MOVLB  D
02EB0:  BSF    x10.4
....................                         break;
02EB2:  BRA    2F10
....................                         case 6:
....................                            Inputt.B6 = 1; 
02EB4:  MOVLB  D
02EB6:  BSF    x10.5
....................                         break;
02EB8:  BRA    2F10
....................                         case 7:
....................                            Inputt.B7 = 1; 
02EBA:  MOVLB  D
02EBC:  BSF    x10.6
....................                          break;
02EBE:  BRA    2F10
....................                          case 8:
....................                            Inputt.B8 = 1; 
02EC0:  MOVLB  D
02EC2:  BSF    x10.7
....................                         break;
02EC4:  BRA    2F10
....................                         case 9:
....................                            Inputt.B9 = 1; 
02EC6:  MOVLB  D
02EC8:  BSF    x11.0
....................                         break;
02ECA:  BRA    2F10
....................                         case 10:
....................                            Inputt.B10 = 1; 
02ECC:  MOVLB  D
02ECE:  BSF    x11.1
....................                         break;
02ED0:  BRA    2F10
....................                         case 11:
....................                            Inputt.B11 = 1; 
02ED2:  MOVLB  D
02ED4:  BSF    x11.2
....................                         break;
02ED6:  BRA    2F10
....................                         case 12:
....................                            Inputt.B12 = 1; 
02ED8:  MOVLB  D
02EDA:  BSF    x11.3
....................                         break;
02EDC:  BRA    2F10
....................                         case 13:
....................                            Inputt.B13 = 1; 
02EDE:  MOVLB  D
02EE0:  BSF    x11.4
....................                         break;
02EE2:  BRA    2F10
....................                         case 14:
....................                            Inputt.B14 = 1; 
02EE4:  MOVLB  D
02EE6:  BSF    x11.5
....................                         break;
02EE8:  BRA    2F10
....................                         case 15:
....................                            Inputt.B15 = 1; 
02EEA:  MOVLB  D
02EEC:  BSF    x11.6
....................                         break;
02EEE:  BRA    2F10
....................                         case 16:
....................                             Inputt.B16 = 1;
02EF0:  MOVLB  D
02EF2:  BSF    x11.7
....................                          break;
02EF4:  BRA    2F10
....................                          
....................                          case 17:
....................                            Inputt.B17 = 1; 
02EF6:  MOVLB  D
02EF8:  BSF    x12.0
....................                          break;
02EFA:  BRA    2F10
....................                          case 18:
....................                            Inputt.B18 = 1; 
02EFC:  MOVLB  D
02EFE:  BSF    x12.1
....................                         break;
02F00:  BRA    2F10
....................                         case 19:
....................                            Inputt.B19 = 1; 
02F02:  MOVLB  D
02F04:  BSF    x12.2
....................                         break;
02F06:  BRA    2F10
....................                         case 20:
....................                            Inputt.B20 = 1; 
02F08:  MOVLB  D
02F0A:  BSF    x12.3
....................                         break;
02F0C:  BRA    2F10
02F0E:  MOVLB  D
....................                                    
....................                      }                 
....................                    }
....................                }
02F10:  BRA    2F2C
02F12:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02F14:  BCF    FD8.0
02F16:  MOVLB  D
02F18:  RLCF   xCC,W
02F1A:  CLRF   03
02F1C:  ADDLW  52
02F1E:  MOVWF  FE9
02F20:  MOVLW  0D
02F22:  ADDWFC 03,W
02F24:  MOVWF  FEA
02F26:  CLRF   FEC
02F28:  MOVF   FED,F
02F2A:  CLRF   FEF
....................                }
....................              
....................              /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Input.B1 = 1; 
....................                       break;
....................                       case 2:
....................                          Input.B2 = 1; 
....................                       break;
....................                       case 3:
....................                          Input.B3 = 1; 
....................                       break;
....................                       case 4:
....................                          Input.B4 = 1; 
....................                       break;
....................                       case 5:
....................                          Input.B5 = 1; 
....................                       break;
....................                       case 6:
....................                          Input.B6 = 1; 
....................                       break;
....................                       case 7:
....................                          Input.B7 = 1; 
....................                       break;
....................                       case 8:
....................                          Input.B8 = 1; 
....................                       break;
....................                       case 9:
....................                          Input.B9 = 1; 
....................                       break;
....................                       case 10:
....................                          Input.B10 = 1; 
....................                       break;
....................                       case 11:
....................                          Input.B11 = 1; 
....................                       break;
....................                       case 12:
....................                          Input.B12 = 1; 
....................                       break;
....................                       case 13:
....................                          Input.B13 = 1; 
....................                       break;
....................                       case 14:
....................                          Input.B14 = 1; 
....................                       break;
....................                       case 15:
....................                          Input.B15 = 1; 
....................                       break;
....................                       case 16:
....................                          Input.B16 = 1; 
....................                       break;
....................                          
....................                   }
....................                   */
....................              }
....................           }
02F2C:  BRA    3216
....................           else if(FaultNCNO[i] ==NC)
02F2E:  MOVFF  DCC,DD0
02F32:  MOVLW  0D
02F34:  MOVLB  D
02F36:  MOVWF  xD2
02F38:  MOVLW  A6
02F3A:  MOVWF  xD1
02F3C:  MOVLB  0
02F3E:  CALL   24AA
02F42:  MOVF   01,W
02F44:  ANDLW  01
02F46:  BTFSS  FD8.2
02F48:  BRA    3218
....................           {
....................              if(FaultNow[i]==1)
02F4A:  MOVFF  DCC,DD0
02F4E:  MOVLW  0D
02F50:  MOVLB  D
02F52:  MOVWF  xD2
02F54:  MOVLW  4F
02F56:  MOVWF  xD1
02F58:  MOVLB  0
02F5A:  CALL   24AA
02F5E:  MOVF   01,W
02F60:  ANDLW  01
02F62:  SUBLW  01
02F64:  BTFSS  FD8.2
02F66:  BRA    30C2
....................              {
....................                if(FaultAgo[i]==1)
02F68:  MOVFF  DCC,DD0
02F6C:  MOVLW  0D
02F6E:  MOVLB  D
02F70:  MOVWF  xD2
02F72:  MOVLW  4C
02F74:  MOVWF  xD1
02F76:  MOVLB  0
02F78:  CALL   24AA
02F7C:  MOVF   01,W
02F7E:  ANDLW  01
02F80:  SUBLW  01
02F82:  BTFSS  FD8.2
02F84:  BRA    30A6
....................                {
....................                    ReleaseTime[i]++;
02F86:  BCF    FD8.0
02F88:  MOVLB  D
02F8A:  RLCF   xCC,W
02F8C:  CLRF   03
02F8E:  ADDLW  52
02F90:  MOVWF  FE9
02F92:  MOVLW  0D
02F94:  ADDWFC 03,W
02F96:  MOVWF  FEA
02F98:  MOVLW  01
02F9A:  ADDWF  FEE,F
02F9C:  BNC   2FA0
02F9E:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
02FA0:  BCF    FD8.0
02FA2:  RLCF   xCC,W
02FA4:  CLRF   03
02FA6:  ADDLW  52
02FA8:  MOVWF  FE9
02FAA:  MOVLW  0D
02FAC:  ADDWFC 03,W
02FAE:  MOVWF  FEA
02FB0:  MOVFF  FEC,DCE
02FB4:  MOVF   FED,F
02FB6:  MOVFF  FEF,DCD
02FBA:  BCF    FD8.0
02FBC:  RLCF   xCC,W
02FBE:  CLRF   03
02FC0:  ADDLW  7C
02FC2:  MOVWF  FE9
02FC4:  MOVLW  0D
02FC6:  ADDWFC 03,W
02FC8:  MOVWF  FEA
02FCA:  MOVFF  FEC,DD2
02FCE:  MOVF   FED,F
02FD0:  MOVFF  FEF,DD1
02FD4:  CLRF   xD4
02FD6:  MOVLW  4B
02FD8:  MOVWF  xD3
02FDA:  MOVLB  0
02FDC:  RCALL  2A10
02FDE:  MOVFF  02,DD0
02FE2:  MOVFF  01,DCF
02FE6:  MOVLW  0F
02FE8:  MOVLB  D
02FEA:  ADDWF  01,W
02FEC:  MOVWF  01
02FEE:  MOVLW  00
02FF0:  ADDWFC 02,W
02FF2:  MOVWF  03
02FF4:  MOVF   03,W
02FF6:  SUBWF  xCE,W
02FF8:  BNC   30A2
02FFA:  BNZ   3002
02FFC:  MOVF   01,W
02FFE:  SUBWF  xCD,W
03000:  BNC   30A2
....................                    {   
....................                      ReleaseTime[i] = 0;
03002:  BCF    FD8.0
03004:  RLCF   xCC,W
03006:  CLRF   03
03008:  ADDLW  52
0300A:  MOVWF  FE9
0300C:  MOVLW  0D
0300E:  ADDWFC 03,W
03010:  MOVWF  FEA
03012:  CLRF   FEC
03014:  MOVF   FED,F
03016:  CLRF   FEF
....................                      switch(i)
03018:  MOVLW  01
0301A:  SUBWF  xCC,W
0301C:  ADDLW  EC
0301E:  BC    30A2
03020:  ADDLW  14
03022:  MOVLB  0
03024:  GOTO   34CE
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
03028:  MOVLB  D
0302A:  BSF    x10.0
....................                         break;
0302C:  BRA    30A2
....................                         case 2:
....................                            Inputt.B2 = 1; 
0302E:  MOVLB  D
03030:  BSF    x10.1
....................                         break;
03032:  BRA    30A2
....................                         case 3:
....................                            Inputt.B3 = 1; 
03034:  MOVLB  D
03036:  BSF    x10.2
....................                         break;
03038:  BRA    30A2
....................                         case 4:
....................                            Inputt.B4 = 1; 
0303A:  MOVLB  D
0303C:  BSF    x10.3
....................                         break;
0303E:  BRA    30A2
....................                         case 5:
....................                            Inputt.B5 = 1; 
03040:  MOVLB  D
03042:  BSF    x10.4
....................                         break;
03044:  BRA    30A2
....................                         case 6:
....................                            Inputt.B6 = 1; 
03046:  MOVLB  D
03048:  BSF    x10.5
....................                         break;
0304A:  BRA    30A2
....................                         case 7:
....................                            Inputt.B7 = 1; 
0304C:  MOVLB  D
0304E:  BSF    x10.6
....................                          break;
03050:  BRA    30A2
....................                          case 8:
....................                            Inputt.B8 = 1; 
03052:  MOVLB  D
03054:  BSF    x10.7
....................                         break;
03056:  BRA    30A2
....................                         case 9:
....................                            Inputt.B9 = 1; 
03058:  MOVLB  D
0305A:  BSF    x11.0
....................                         break;
0305C:  BRA    30A2
....................                         case 10:
....................                            Inputt.B10 = 1; 
0305E:  MOVLB  D
03060:  BSF    x11.1
....................                         break;
03062:  BRA    30A2
....................                         case 11:
....................                            Inputt.B11 = 1; 
03064:  MOVLB  D
03066:  BSF    x11.2
....................                         break;
03068:  BRA    30A2
....................                         case 12:
....................                            Inputt.B12 = 1; 
0306A:  MOVLB  D
0306C:  BSF    x11.3
....................                         break;
0306E:  BRA    30A2
....................                         case 13:
....................                            Inputt.B13 = 1; 
03070:  MOVLB  D
03072:  BSF    x11.4
....................                         break;
03074:  BRA    30A2
....................                         case 14:
....................                            Inputt.B14 = 1; 
03076:  MOVLB  D
03078:  BSF    x11.5
....................                         break;
0307A:  BRA    30A2
....................                         case 15:
....................                            Inputt.B15 = 1; 
0307C:  MOVLB  D
0307E:  BSF    x11.6
....................                         break;
03080:  BRA    30A2
....................                         case 16:
....................                             Inputt.B16 = 1; 
03082:  MOVLB  D
03084:  BSF    x11.7
....................                          break;
03086:  BRA    30A2
....................                          
....................                          case 17:
....................                            Inputt.B17 = 1; 
03088:  MOVLB  D
0308A:  BSF    x12.0
....................                          break;
0308C:  BRA    30A2
....................                          case 18:
....................                            Inputt.B18 = 1; 
0308E:  MOVLB  D
03090:  BSF    x12.1
....................                         break;
03092:  BRA    30A2
....................                         case 19:
....................                            Inputt.B19 = 1; 
03094:  MOVLB  D
03096:  BSF    x12.2
....................                         break;
03098:  BRA    30A2
....................                         case 20:
....................                            Inputt.B20 = 1; 
0309A:  MOVLB  D
0309C:  BSF    x12.3
....................                         break;
0309E:  BRA    30A2
030A0:  MOVLB  D
....................                                                                    
....................                      }                 
....................                   }
....................                }
030A2:  BRA    30BE
030A4:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
030A6:  BCF    FD8.0
030A8:  MOVLB  D
030AA:  RLCF   xCC,W
030AC:  CLRF   03
030AE:  ADDLW  52
030B0:  MOVWF  FE9
030B2:  MOVLW  0D
030B4:  ADDWFC 03,W
030B6:  MOVWF  FEA
030B8:  CLRF   FEC
030BA:  MOVF   FED,F
030BC:  CLRF   FEF
....................                }
....................              }
030BE:  BRA    3216
030C0:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
030C2:  MOVFF  DCC,DD0
030C6:  MOVLW  0D
030C8:  MOVLB  D
030CA:  MOVWF  xD2
030CC:  MOVLW  4C
030CE:  MOVWF  xD1
030D0:  MOVLB  0
030D2:  CALL   24AA
030D6:  MOVF   01,W
030D8:  ANDLW  01
030DA:  BTFSS  FD8.2
030DC:  BRA    31FE
....................                {
....................                    ReleaseTime[i]++;
030DE:  BCF    FD8.0
030E0:  MOVLB  D
030E2:  RLCF   xCC,W
030E4:  CLRF   03
030E6:  ADDLW  52
030E8:  MOVWF  FE9
030EA:  MOVLW  0D
030EC:  ADDWFC 03,W
030EE:  MOVWF  FEA
030F0:  MOVLW  01
030F2:  ADDWF  FEE,F
030F4:  BNC   30F8
030F6:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
030F8:  BCF    FD8.0
030FA:  RLCF   xCC,W
030FC:  CLRF   03
030FE:  ADDLW  52
03100:  MOVWF  FE9
03102:  MOVLW  0D
03104:  ADDWFC 03,W
03106:  MOVWF  FEA
03108:  MOVFF  FEC,DCE
0310C:  MOVF   FED,F
0310E:  MOVFF  FEF,DCD
03112:  BCF    FD8.0
03114:  RLCF   xCC,W
03116:  CLRF   03
03118:  ADDLW  7C
0311A:  MOVWF  FE9
0311C:  MOVLW  0D
0311E:  ADDWFC 03,W
03120:  MOVWF  FEA
03122:  MOVFF  FEC,DD2
03126:  MOVF   FED,F
03128:  MOVFF  FEF,DD1
0312C:  CLRF   xD4
0312E:  MOVLW  4B
03130:  MOVWF  xD3
03132:  MOVLB  0
03134:  RCALL  2A10
03136:  MOVFF  02,DD0
0313A:  MOVFF  01,DCF
0313E:  MOVLW  0F
03140:  MOVLB  D
03142:  ADDWF  01,W
03144:  MOVWF  01
03146:  MOVLW  00
03148:  ADDWFC 02,W
0314A:  MOVWF  03
0314C:  MOVF   03,W
0314E:  SUBWF  xCE,W
03150:  BNC   31FA
03152:  BNZ   315A
03154:  MOVF   01,W
03156:  SUBWF  xCD,W
03158:  BNC   31FA
....................                    {   
....................                      ReleaseTime[i] = 0;
0315A:  BCF    FD8.0
0315C:  RLCF   xCC,W
0315E:  CLRF   03
03160:  ADDLW  52
03162:  MOVWF  FE9
03164:  MOVLW  0D
03166:  ADDWFC 03,W
03168:  MOVWF  FEA
0316A:  CLRF   FEC
0316C:  MOVF   FED,F
0316E:  CLRF   FEF
....................                      switch(i)
03170:  MOVLW  01
03172:  SUBWF  xCC,W
03174:  ADDLW  EC
03176:  BC    31FA
03178:  ADDLW  14
0317A:  MOVLB  0
0317C:  GOTO   3510
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
03180:  MOVLB  D
03182:  BCF    x10.0
....................                         break;
03184:  BRA    31FA
....................                         case 2:
....................                            Inputt.B2 = 0; 
03186:  MOVLB  D
03188:  BCF    x10.1
....................                         break;
0318A:  BRA    31FA
....................                         case 3:
....................                            Inputt.B3 = 0; 
0318C:  MOVLB  D
0318E:  BCF    x10.2
....................                         break;
03190:  BRA    31FA
....................                         case 4:
....................                            Inputt.B4 = 0; 
03192:  MOVLB  D
03194:  BCF    x10.3
....................                         break;
03196:  BRA    31FA
....................                         case 5:
....................                            Inputt.B5 = 0; 
03198:  MOVLB  D
0319A:  BCF    x10.4
....................                         break;
0319C:  BRA    31FA
....................                         case 6:
....................                            Inputt.B6 = 0; 
0319E:  MOVLB  D
031A0:  BCF    x10.5
....................                         break;
031A2:  BRA    31FA
....................                         case 7:
....................                            Inputt.B7 = 0; 
031A4:  MOVLB  D
031A6:  BCF    x10.6
....................                          break;
031A8:  BRA    31FA
....................                          case 8:
....................                            Inputt.B8 = 0; 
031AA:  MOVLB  D
031AC:  BCF    x10.7
....................                         break;
031AE:  BRA    31FA
....................                         case 9:
....................                            Inputt.B9 = 0; 
031B0:  MOVLB  D
031B2:  BCF    x11.0
....................                         break;
031B4:  BRA    31FA
....................                         case 10:
....................                            Inputt.B10 = 0; 
031B6:  MOVLB  D
031B8:  BCF    x11.1
....................                         break;
031BA:  BRA    31FA
....................                         case 11:
....................                            Inputt.B11 = 0; 
031BC:  MOVLB  D
031BE:  BCF    x11.2
....................                         break;
031C0:  BRA    31FA
....................                         case 12:
....................                            Inputt.B12 = 0; 
031C2:  MOVLB  D
031C4:  BCF    x11.3
....................                         break;
031C6:  BRA    31FA
....................                         case 13:
....................                            Inputt.B13 = 0; 
031C8:  MOVLB  D
031CA:  BCF    x11.4
....................                         break;
031CC:  BRA    31FA
....................                         case 14:
....................                            Inputt.B14 = 0; 
031CE:  MOVLB  D
031D0:  BCF    x11.5
....................                         break;
031D2:  BRA    31FA
....................                         case 15:
....................                            Inputt.B15 = 0; 
031D4:  MOVLB  D
031D6:  BCF    x11.6
....................                         break;
031D8:  BRA    31FA
....................                         case 16:
....................                             Inputt.B16 = 0;
031DA:  MOVLB  D
031DC:  BCF    x11.7
....................                          break;
031DE:  BRA    31FA
....................                          
....................                          case 17:
....................                            Inputt.B17 = 0; 
031E0:  MOVLB  D
031E2:  BCF    x12.0
....................                          break;
031E4:  BRA    31FA
....................                          case 18:
....................                            Inputt.B18 = 0; 
031E6:  MOVLB  D
031E8:  BCF    x12.1
....................                         break;
031EA:  BRA    31FA
....................                         case 19:
....................                            Inputt.B19 = 0; 
031EC:  MOVLB  D
031EE:  BCF    x12.2
....................                         break;
031F0:  BRA    31FA
....................                         case 20:
....................                            Inputt.B20 = 0; 
031F2:  MOVLB  D
031F4:  BCF    x12.3
....................                         break;
031F6:  BRA    31FA
031F8:  MOVLB  D
....................                                    
....................                      }                 
....................                    }
....................                }
031FA:  BRA    3216
031FC:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
031FE:  BCF    FD8.0
03200:  MOVLB  D
03202:  RLCF   xCC,W
03204:  CLRF   03
03206:  ADDLW  52
03208:  MOVWF  FE9
0320A:  MOVLW  0D
0320C:  ADDWFC 03,W
0320E:  MOVWF  FEA
03210:  CLRF   FEC
03212:  MOVF   FED,F
03214:  CLRF   FEF
03216:  MOVLB  0
....................                }
.................... 
....................              }
....................           }
03218:  MOVLB  D
0321A:  INCF   xCC,F
0321C:  BRA    2C44
....................       }
....................       
....................       
....................       StoreReleaseFault();
0321E:  MOVLB  0
03220:  BRA    2A32
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       
....................       ///////////////////////--Edit--///////////////////
....................            
....................       Input11_18 = 0x00;
03222:  CLRF   4B
....................       Input11_18 = Input11_18 | ~Inputt.B18;
03224:  MOVLW  00
03226:  MOVLB  D
03228:  BTFSS  x12.1
0322A:  MOVLW  01
0322C:  IORWF  4B,F
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B17;
0322E:  BCF    FD8.0
03230:  RLCF   4B,W
03232:  MOVWF  xCD
03234:  MOVLW  00
03236:  BTFSS  x12.0
03238:  MOVLW  01
0323A:  IORWF  xCD,W
0323C:  MOVWF  4B
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
0323E:  BCF    FD8.0
03240:  RLCF   4B,W
03242:  MOVWF  xCD
03244:  MOVLW  00
03246:  BTFSS  x11.7
03248:  MOVLW  01
0324A:  IORWF  xCD,W
0324C:  MOVWF  4B
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B15;
0324E:  BCF    FD8.0
03250:  RLCF   4B,W
03252:  MOVWF  xCD
03254:  MOVLW  00
03256:  BTFSS  x11.6
03258:  MOVLW  01
0325A:  IORWF  xCD,W
0325C:  MOVWF  4B
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B14;
0325E:  BCF    FD8.0
03260:  RLCF   4B,W
03262:  MOVWF  xCD
03264:  MOVLW  00
03266:  BTFSS  x11.5
03268:  MOVLW  01
0326A:  IORWF  xCD,W
0326C:  MOVWF  4B
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B13;
0326E:  BCF    FD8.0
03270:  RLCF   4B,W
03272:  MOVWF  xCD
03274:  MOVLW  00
03276:  BTFSS  x11.4
03278:  MOVLW  01
0327A:  IORWF  xCD,W
0327C:  MOVWF  4B
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B12;
0327E:  BCF    FD8.0
03280:  RLCF   4B,W
03282:  MOVWF  xCD
03284:  MOVLW  00
03286:  BTFSS  x11.3
03288:  MOVLW  01
0328A:  IORWF  xCD,W
0328C:  MOVWF  4B
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B11;
0328E:  BCF    FD8.0
03290:  RLCF   4B,W
03292:  MOVWF  xCD
03294:  MOVLW  00
03296:  BTFSS  x11.2
03298:  MOVLW  01
0329A:  IORWF  xCD,W
0329C:  MOVWF  4B
....................       
....................      
....................    
....................       Input19_20 = 0x00;
0329E:  CLRF   4C
....................       Input19_20 = Input19_20 | ~Inputt.B20;
032A0:  MOVLW  00
032A2:  BTFSS  x12.3
032A4:  MOVLW  01
032A6:  IORWF  4C,F
....................       Input19_20 = (Input19_20 << 1) | ~Inputt.B19;
032A8:  BCF    FD8.0
032AA:  RLCF   4C,W
032AC:  MOVWF  xCD
032AE:  MOVLW  00
032B0:  BTFSS  x12.2
032B2:  MOVLW  01
032B4:  IORWF  xCD,W
032B6:  MOVWF  4C
....................       //}
....................    
....................       Input1_8 = 0x00;
032B8:  CLRF   49
....................       Input1_8 = Input1_8 | ~Inputt.B8;
032BA:  MOVLW  00
032BC:  BTFSS  x10.7
032BE:  MOVLW  01
032C0:  IORWF  49,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
032C2:  BCF    FD8.0
032C4:  RLCF   49,W
032C6:  MOVWF  xCD
032C8:  MOVLW  00
032CA:  BTFSS  x10.6
032CC:  MOVLW  01
032CE:  IORWF  xCD,W
032D0:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
032D2:  BCF    FD8.0
032D4:  RLCF   49,W
032D6:  MOVWF  xCD
032D8:  MOVLW  00
032DA:  BTFSS  x10.5
032DC:  MOVLW  01
032DE:  IORWF  xCD,W
032E0:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
032E2:  BCF    FD8.0
032E4:  RLCF   49,W
032E6:  MOVWF  xCD
032E8:  MOVLW  00
032EA:  BTFSS  x10.4
032EC:  MOVLW  01
032EE:  IORWF  xCD,W
032F0:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
032F2:  BCF    FD8.0
032F4:  RLCF   49,W
032F6:  MOVWF  xCD
032F8:  MOVLW  00
032FA:  BTFSS  x10.3
032FC:  MOVLW  01
032FE:  IORWF  xCD,W
03300:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
03302:  BCF    FD8.0
03304:  RLCF   49,W
03306:  MOVWF  xCD
03308:  MOVLW  00
0330A:  BTFSS  x10.2
0330C:  MOVLW  01
0330E:  IORWF  xCD,W
03310:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
03312:  BCF    FD8.0
03314:  RLCF   49,W
03316:  MOVWF  xCD
03318:  MOVLW  00
0331A:  BTFSS  x10.1
0331C:  MOVLW  01
0331E:  IORWF  xCD,W
03320:  MOVWF  49
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
03322:  BCF    FD8.0
03324:  RLCF   49,W
03326:  MOVWF  xCD
03328:  MOVLW  00
0332A:  BTFSS  x10.0
0332C:  MOVLW  01
0332E:  IORWF  xCD,W
03330:  MOVWF  49
....................       
....................       Input9_16 = 0x00;
03332:  CLRF   4D
....................       Input9_16 = Input9_16 | ~Inputt.B16;
03334:  MOVLW  00
03336:  BTFSS  x11.7
03338:  MOVLW  01
0333A:  IORWF  4D,F
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B15;
0333C:  BCF    FD8.0
0333E:  RLCF   4D,W
03340:  MOVWF  xCD
03342:  MOVLW  00
03344:  BTFSS  x11.6
03346:  MOVLW  01
03348:  IORWF  xCD,W
0334A:  MOVWF  4D
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B14;
0334C:  BCF    FD8.0
0334E:  RLCF   4D,W
03350:  MOVWF  xCD
03352:  MOVLW  00
03354:  BTFSS  x11.5
03356:  MOVLW  01
03358:  IORWF  xCD,W
0335A:  MOVWF  4D
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B13;
0335C:  BCF    FD8.0
0335E:  RLCF   4D,W
03360:  MOVWF  xCD
03362:  MOVLW  00
03364:  BTFSS  x11.4
03366:  MOVLW  01
03368:  IORWF  xCD,W
0336A:  MOVWF  4D
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B12;
0336C:  BCF    FD8.0
0336E:  RLCF   4D,W
03370:  MOVWF  xCD
03372:  MOVLW  00
03374:  BTFSS  x11.3
03376:  MOVLW  01
03378:  IORWF  xCD,W
0337A:  MOVWF  4D
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B11;
0337C:  BCF    FD8.0
0337E:  RLCF   4D,W
03380:  MOVWF  xCD
03382:  MOVLW  00
03384:  BTFSS  x11.2
03386:  MOVLW  01
03388:  IORWF  xCD,W
0338A:  MOVWF  4D
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B10;
0338C:  BCF    FD8.0
0338E:  RLCF   4D,W
03390:  MOVWF  xCD
03392:  MOVLW  00
03394:  BTFSS  x11.1
03396:  MOVLW  01
03398:  IORWF  xCD,W
0339A:  MOVWF  4D
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B9;
0339C:  BCF    FD8.0
0339E:  RLCF   4D,W
033A0:  MOVWF  xCD
033A2:  MOVLW  00
033A4:  BTFSS  x11.0
033A6:  MOVLW  01
033A8:  IORWF  xCD,W
033AA:  MOVWF  4D
....................       
....................       Input17_24 = 0x00;
033AC:  CLRF   4E
....................       Input17_24 = Input17_24 | ~Inputt.B24;
033AE:  MOVLW  00
033B0:  BTFSS  x12.7
033B2:  MOVLW  01
033B4:  IORWF  4E,F
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B23;
033B6:  BCF    FD8.0
033B8:  RLCF   4E,W
033BA:  MOVWF  xCD
033BC:  MOVLW  00
033BE:  BTFSS  x12.6
033C0:  MOVLW  01
033C2:  IORWF  xCD,W
033C4:  MOVWF  4E
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B22;
033C6:  BCF    FD8.0
033C8:  RLCF   4E,W
033CA:  MOVWF  xCD
033CC:  MOVLW  00
033CE:  BTFSS  x12.5
033D0:  MOVLW  01
033D2:  IORWF  xCD,W
033D4:  MOVWF  4E
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B21;
033D6:  BCF    FD8.0
033D8:  RLCF   4E,W
033DA:  MOVWF  xCD
033DC:  MOVLW  00
033DE:  BTFSS  x12.4
033E0:  MOVLW  01
033E2:  IORWF  xCD,W
033E4:  MOVWF  4E
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B20;
033E6:  BCF    FD8.0
033E8:  RLCF   4E,W
033EA:  MOVWF  xCD
033EC:  MOVLW  00
033EE:  BTFSS  x12.3
033F0:  MOVLW  01
033F2:  IORWF  xCD,W
033F4:  MOVWF  4E
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B19;
033F6:  BCF    FD8.0
033F8:  RLCF   4E,W
033FA:  MOVWF  xCD
033FC:  MOVLW  00
033FE:  BTFSS  x12.2
03400:  MOVLW  01
03402:  IORWF  xCD,W
03404:  MOVWF  4E
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B18;
03406:  BCF    FD8.0
03408:  RLCF   4E,W
0340A:  MOVWF  xCD
0340C:  MOVLW  00
0340E:  BTFSS  x12.1
03410:  MOVLW  01
03412:  IORWF  xCD,W
03414:  MOVWF  4E
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B17;
03416:  BCF    FD8.0
03418:  RLCF   4E,W
0341A:  MOVWF  xCD
0341C:  MOVLW  00
0341E:  BTFSS  x12.0
03420:  MOVLW  01
03422:  IORWF  xCD,W
03424:  MOVWF  4E
....................     
....................    
.................... 
....................       Input9_10 = 0x00;
03426:  CLRF   4A
....................       Input9_10 = Input9_10 | ~Inputt.B10;
03428:  MOVLW  00
0342A:  BTFSS  x11.1
0342C:  MOVLW  01
0342E:  IORWF  4A,F
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
03430:  BCF    FD8.0
03432:  RLCF   4A,W
03434:  MOVWF  xCD
03436:  MOVLW  00
03438:  BTFSS  x11.0
0343A:  MOVLW  01
0343C:  IORWF  xCD,W
0343E:  MOVWF  4A
....................       
....................       Input17_24 &= 0x0F;
03440:  MOVLW  0F
03442:  ANDWF  4E,F
....................       Input25_32 = 0x00;
03444:  CLRF   4F
03446:  MOVLB  0
03448:  RETURN 0
....................       //+++++++++++++++++++++++++++++++++++++++++++
.................... 
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Inputt type 1-8
*
00B46:  MOVFF  FF2,DCD
00B4A:  BCF    FF2.7
00B4C:  CLRF   FAA
00B4E:  MOVLW  01
00B50:  MOVWF  FA9
00B52:  BCF    FA6.6
00B54:  BCF    FA6.7
00B56:  BSF    FA6.0
00B58:  MOVF   FA8,W
00B5A:  MOVLB  D
00B5C:  BTFSC  xCD.7
00B5E:  BSF    FF2.7
00B60:  MOVWF  39
....................    InputType1_8 = EEpDat;
00B62:  MOVFF  39,3A
.................... 
....................    InputType.B1 = EEpDat;
00B66:  BCF    x18.0
00B68:  BTFSC  39.0
00B6A:  BSF    x18.0
....................    InputType.B2 = EEpDat >> 1;
00B6C:  BCF    FD8.0
00B6E:  RRCF   39,W
00B70:  BCF    x18.1
00B72:  BTFSC  FE8.0
00B74:  BSF    x18.1
....................    InputType.B3 = EEpDat >> 2;
00B76:  RRCF   39,W
00B78:  MOVWF  00
00B7A:  RRCF   00,F
00B7C:  MOVLW  3F
00B7E:  ANDWF  00,F
00B80:  BCF    x18.2
00B82:  BTFSC  00.0
00B84:  BSF    x18.2
....................    InputType.B4 = EEpDat >> 3;
00B86:  RRCF   39,W
00B88:  MOVWF  00
00B8A:  RRCF   00,F
00B8C:  RRCF   00,F
00B8E:  MOVLW  1F
00B90:  ANDWF  00,F
00B92:  BCF    x18.3
00B94:  BTFSC  00.0
00B96:  BSF    x18.3
....................    InputType.B5 = EEpDat >> 4;
00B98:  SWAPF  39,W
00B9A:  MOVWF  00
00B9C:  MOVLW  0F
00B9E:  ANDWF  00,F
00BA0:  BCF    x18.4
00BA2:  BTFSC  00.0
00BA4:  BSF    x18.4
....................    InputType.B6 = EEpDat >> 5;
00BA6:  SWAPF  39,W
00BA8:  MOVWF  00
00BAA:  RRCF   00,F
00BAC:  MOVLW  07
00BAE:  ANDWF  00,F
00BB0:  BCF    x18.5
00BB2:  BTFSC  00.0
00BB4:  BSF    x18.5
....................    InputType.B7 = EEpDat >> 6;
00BB6:  SWAPF  39,W
00BB8:  MOVWF  00
00BBA:  RRCF   00,F
00BBC:  RRCF   00,F
00BBE:  MOVLW  03
00BC0:  ANDWF  00,F
00BC2:  BCF    x18.6
00BC4:  BTFSC  00.0
00BC6:  BSF    x18.6
....................    InputType.B8 = EEpDat >> 7;
00BC8:  CLRF   00
00BCA:  BTFSC  39.7
00BCC:  BSF    00.0
00BCE:  BCF    x18.7
00BD0:  BTFSC  00.0
00BD2:  BSF    x18.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Inputt type 9-16
00BD4:  MOVFF  FF2,DCD
00BD8:  BCF    FF2.7
00BDA:  CLRF   FAA
00BDC:  MOVLW  02
00BDE:  MOVWF  FA9
00BE0:  BCF    FA6.6
00BE2:  BCF    FA6.7
00BE4:  BSF    FA6.0
00BE6:  MOVF   FA8,W
00BE8:  BTFSC  xCD.7
00BEA:  BSF    FF2.7
00BEC:  MOVWF  39
....................    InputType9_16 = EEpDat;
00BEE:  MOVFF  39,3B
.................... 
....................    InputType.B9 = EEpDat;
00BF2:  BCF    x19.0
00BF4:  BTFSC  39.0
00BF6:  BSF    x19.0
....................    InputType.B10 = EEpDat >> 1;
00BF8:  BCF    FD8.0
00BFA:  RRCF   39,W
00BFC:  BCF    x19.1
00BFE:  BTFSC  FE8.0
00C00:  BSF    x19.1
....................    InputType.B11 = EEpDat >> 2;
00C02:  RRCF   39,W
00C04:  MOVWF  00
00C06:  RRCF   00,F
00C08:  MOVLW  3F
00C0A:  ANDWF  00,F
00C0C:  BCF    x19.2
00C0E:  BTFSC  00.0
00C10:  BSF    x19.2
....................    InputType.B12 = EEpDat >> 3;
00C12:  RRCF   39,W
00C14:  MOVWF  00
00C16:  RRCF   00,F
00C18:  RRCF   00,F
00C1A:  MOVLW  1F
00C1C:  ANDWF  00,F
00C1E:  BCF    x19.3
00C20:  BTFSC  00.0
00C22:  BSF    x19.3
....................    InputType.B13 = EEpDat >> 4;
00C24:  SWAPF  39,W
00C26:  MOVWF  00
00C28:  MOVLW  0F
00C2A:  ANDWF  00,F
00C2C:  BCF    x19.4
00C2E:  BTFSC  00.0
00C30:  BSF    x19.4
....................    InputType.B14 = EEpDat >> 5;
00C32:  SWAPF  39,W
00C34:  MOVWF  00
00C36:  RRCF   00,F
00C38:  MOVLW  07
00C3A:  ANDWF  00,F
00C3C:  BCF    x19.5
00C3E:  BTFSC  00.0
00C40:  BSF    x19.5
....................    InputType.B15 = EEpDat >> 6;
00C42:  SWAPF  39,W
00C44:  MOVWF  00
00C46:  RRCF   00,F
00C48:  RRCF   00,F
00C4A:  MOVLW  03
00C4C:  ANDWF  00,F
00C4E:  BCF    x19.6
00C50:  BTFSC  00.0
00C52:  BSF    x19.6
....................    InputType.B16 = EEpDat >> 7;
00C54:  CLRF   00
00C56:  BTFSC  39.7
00C58:  BSF    00.0
00C5A:  BCF    x19.7
00C5C:  BTFSC  00.0
00C5E:  BSF    x19.7
....................    
....................    EEpDat = read_eeprom(0x03);   // Inputt type 9-16
00C60:  MOVFF  FF2,DCD
00C64:  BCF    FF2.7
00C66:  CLRF   FAA
00C68:  MOVLW  03
00C6A:  MOVWF  FA9
00C6C:  BCF    FA6.6
00C6E:  BCF    FA6.7
00C70:  BSF    FA6.0
00C72:  MOVF   FA8,W
00C74:  BTFSC  xCD.7
00C76:  BSF    FF2.7
00C78:  MOVWF  39
....................    InputType17_24 = EEpDat;
00C7A:  MOVFF  39,3C
.................... 
....................    InputType.B17 = EEpDat;
00C7E:  BCF    x1A.0
00C80:  BTFSC  39.0
00C82:  BSF    x1A.0
....................    InputType.B18 = EEpDat >> 1;
00C84:  BCF    FD8.0
00C86:  RRCF   39,W
00C88:  BCF    x1A.1
00C8A:  BTFSC  FE8.0
00C8C:  BSF    x1A.1
....................    InputType.B19 = EEpDat >> 2;
00C8E:  RRCF   39,W
00C90:  MOVWF  00
00C92:  RRCF   00,F
00C94:  MOVLW  3F
00C96:  ANDWF  00,F
00C98:  BCF    x1A.2
00C9A:  BTFSC  00.0
00C9C:  BSF    x1A.2
....................    InputType.B20 = EEpDat >> 3;
00C9E:  RRCF   39,W
00CA0:  MOVWF  00
00CA2:  RRCF   00,F
00CA4:  RRCF   00,F
00CA6:  MOVLW  1F
00CA8:  ANDWF  00,F
00CAA:  BCF    x1A.3
00CAC:  BTFSC  00.0
00CAE:  BSF    x1A.3
....................    InputType.B21 = EEpDat >> 4;
00CB0:  SWAPF  39,W
00CB2:  MOVWF  00
00CB4:  MOVLW  0F
00CB6:  ANDWF  00,F
00CB8:  BCF    x1A.4
00CBA:  BTFSC  00.0
00CBC:  BSF    x1A.4
....................    InputType.B22 = EEpDat >> 5;
00CBE:  SWAPF  39,W
00CC0:  MOVWF  00
00CC2:  RRCF   00,F
00CC4:  MOVLW  07
00CC6:  ANDWF  00,F
00CC8:  BCF    x1A.5
00CCA:  BTFSC  00.0
00CCC:  BSF    x1A.5
....................    InputType.B23 = EEpDat >> 6;
00CCE:  SWAPF  39,W
00CD0:  MOVWF  00
00CD2:  RRCF   00,F
00CD4:  RRCF   00,F
00CD6:  MOVLW  03
00CD8:  ANDWF  00,F
00CDA:  BCF    x1A.6
00CDC:  BTFSC  00.0
00CDE:  BSF    x1A.6
....................    InputType.B24 = EEpDat >> 7;
00CE0:  CLRF   00
00CE2:  BTFSC  39.7
00CE4:  BSF    00.0
00CE6:  BCF    x1A.7
00CE8:  BTFSC  00.0
00CEA:  BSF    x1A.7
....................    
....................    FaultNCNO[1] = InputType.B1;
00CEC:  BCF    xA6.1
00CEE:  BTFSC  x18.0
00CF0:  BSF    xA6.1
....................    FaultNCNO[2] = InputType.B2;
00CF2:  BCF    xA6.2
00CF4:  BTFSC  x18.1
00CF6:  BSF    xA6.2
....................    FaultNCNO[3] = InputType.B3;
00CF8:  BCF    xA6.3
00CFA:  BTFSC  x18.2
00CFC:  BSF    xA6.3
....................    FaultNCNO[4] = InputType.B4;
00CFE:  BCF    xA6.4
00D00:  BTFSC  x18.3
00D02:  BSF    xA6.4
....................    FaultNCNO[5] = InputType.B5;
00D04:  BCF    xA6.5
00D06:  BTFSC  x18.4
00D08:  BSF    xA6.5
....................    FaultNCNO[6] = InputType.B6;
00D0A:  BCF    xA6.6
00D0C:  BTFSC  x18.5
00D0E:  BSF    xA6.6
....................    FaultNCNO[7] = InputType.B7;
00D10:  BCF    xA6.7
00D12:  BTFSC  x18.6
00D14:  BSF    xA6.7
....................    FaultNCNO[8] = InputType.B8;
00D16:  BCF    xA7.0
00D18:  BTFSC  x18.7
00D1A:  BSF    xA7.0
....................    FaultNCNO[9] = InputType.B9;
00D1C:  BCF    xA7.1
00D1E:  BTFSC  x19.0
00D20:  BSF    xA7.1
....................    FaultNCNO[10] = InputType.B10;
00D22:  BCF    xA7.2
00D24:  BTFSC  x19.1
00D26:  BSF    xA7.2
....................    FaultNCNO[11] = InputType.B11;
00D28:  BCF    xA7.3
00D2A:  BTFSC  x19.2
00D2C:  BSF    xA7.3
....................    FaultNCNO[12] = InputType.B12;
00D2E:  BCF    xA7.4
00D30:  BTFSC  x19.3
00D32:  BSF    xA7.4
....................    FaultNCNO[13] = InputType.B13;
00D34:  BCF    xA7.5
00D36:  BTFSC  x19.4
00D38:  BSF    xA7.5
....................    FaultNCNO[14] = InputType.B14;
00D3A:  BCF    xA7.6
00D3C:  BTFSC  x19.5
00D3E:  BSF    xA7.6
....................    FaultNCNO[15] = InputType.B15;
00D40:  BCF    xA7.7
00D42:  BTFSC  x19.6
00D44:  BSF    xA7.7
....................    FaultNCNO[16] = InputType.B16;
00D46:  BCF    xA8.0
00D48:  BTFSC  x19.7
00D4A:  BSF    xA8.0
....................    FaultNCNO[17] = InputType.B17;
00D4C:  BCF    xA8.1
00D4E:  BTFSC  x1A.0
00D50:  BSF    xA8.1
....................    FaultNCNO[18] = InputType.B18;
00D52:  BCF    xA8.2
00D54:  BTFSC  x1A.1
00D56:  BSF    xA8.2
....................    FaultNCNO[19] = InputType.B19;
00D58:  BCF    xA8.3
00D5A:  BTFSC  x1A.2
00D5C:  BSF    xA8.3
....................    FaultNCNO[20] = InputType.B20;
00D5E:  BCF    xA8.4
00D60:  BTFSC  x1A.3
00D62:  BSF    xA8.4
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
00D64:  MOVFF  FF2,DCD
00D68:  BCF    FF2.7
00D6A:  CLRF   FAA
00D6C:  MOVLW  04
00D6E:  MOVWF  FA9
00D70:  BCF    FA6.6
00D72:  BCF    FA6.7
00D74:  BSF    FA6.0
00D76:  MOVF   FA8,W
00D78:  BTFSC  xCD.7
00D7A:  BSF    FF2.7
00D7C:  MOVWF  39
....................    FaultType1_8 = EEpDat;
00D7E:  MOVFF  39,3D
.................... 
....................    FaultType.B1 = EEpDat;
00D82:  BCF    x1C.0
00D84:  BTFSC  39.0
00D86:  BSF    x1C.0
....................    FaultType.B2 = EEpDat >> 1;
00D88:  BCF    FD8.0
00D8A:  RRCF   39,W
00D8C:  BCF    x1C.1
00D8E:  BTFSC  FE8.0
00D90:  BSF    x1C.1
....................    FaultType.B3 = EEpDat >> 2;
00D92:  RRCF   39,W
00D94:  MOVWF  00
00D96:  RRCF   00,F
00D98:  MOVLW  3F
00D9A:  ANDWF  00,F
00D9C:  BCF    x1C.2
00D9E:  BTFSC  00.0
00DA0:  BSF    x1C.2
....................    FaultType.B4 = EEpDat >> 3;
00DA2:  RRCF   39,W
00DA4:  MOVWF  00
00DA6:  RRCF   00,F
00DA8:  RRCF   00,F
00DAA:  MOVLW  1F
00DAC:  ANDWF  00,F
00DAE:  BCF    x1C.3
00DB0:  BTFSC  00.0
00DB2:  BSF    x1C.3
....................    FaultType.B5 = EEpDat >> 4;
00DB4:  SWAPF  39,W
00DB6:  MOVWF  00
00DB8:  MOVLW  0F
00DBA:  ANDWF  00,F
00DBC:  BCF    x1C.4
00DBE:  BTFSC  00.0
00DC0:  BSF    x1C.4
....................    FaultType.B6 = EEpDat >> 5;
00DC2:  SWAPF  39,W
00DC4:  MOVWF  00
00DC6:  RRCF   00,F
00DC8:  MOVLW  07
00DCA:  ANDWF  00,F
00DCC:  BCF    x1C.5
00DCE:  BTFSC  00.0
00DD0:  BSF    x1C.5
....................    FaultType.B7 = EEpDat >> 6;
00DD2:  SWAPF  39,W
00DD4:  MOVWF  00
00DD6:  RRCF   00,F
00DD8:  RRCF   00,F
00DDA:  MOVLW  03
00DDC:  ANDWF  00,F
00DDE:  BCF    x1C.6
00DE0:  BTFSC  00.0
00DE2:  BSF    x1C.6
....................    FaultType.B8 = EEpDat >> 7;
00DE4:  CLRF   00
00DE6:  BTFSC  39.7
00DE8:  BSF    00.0
00DEA:  BCF    x1C.7
00DEC:  BTFSC  00.0
00DEE:  BSF    x1C.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
00DF0:  MOVFF  FF2,DCD
00DF4:  BCF    FF2.7
00DF6:  CLRF   FAA
00DF8:  MOVLW  05
00DFA:  MOVWF  FA9
00DFC:  BCF    FA6.6
00DFE:  BCF    FA6.7
00E00:  BSF    FA6.0
00E02:  MOVF   FA8,W
00E04:  BTFSC  xCD.7
00E06:  BSF    FF2.7
00E08:  MOVWF  39
....................    FaultType9_16 = EEpDat;
00E0A:  MOVFF  39,3E
.................... 
....................    FaultType.B9 = EEpDat;
00E0E:  BCF    x1D.0
00E10:  BTFSC  39.0
00E12:  BSF    x1D.0
....................    FaultType.B10 = EEpDat >> 1;
00E14:  BCF    FD8.0
00E16:  RRCF   39,W
00E18:  BCF    x1D.1
00E1A:  BTFSC  FE8.0
00E1C:  BSF    x1D.1
....................    FaultType.B11 = EEpDat >> 2;
00E1E:  RRCF   39,W
00E20:  MOVWF  00
00E22:  RRCF   00,F
00E24:  MOVLW  3F
00E26:  ANDWF  00,F
00E28:  BCF    x1D.2
00E2A:  BTFSC  00.0
00E2C:  BSF    x1D.2
....................    FaultType.B12 = EEpDat >> 3;
00E2E:  RRCF   39,W
00E30:  MOVWF  00
00E32:  RRCF   00,F
00E34:  RRCF   00,F
00E36:  MOVLW  1F
00E38:  ANDWF  00,F
00E3A:  BCF    x1D.3
00E3C:  BTFSC  00.0
00E3E:  BSF    x1D.3
....................    FaultType.B13 = EEpDat >> 4;
00E40:  SWAPF  39,W
00E42:  MOVWF  00
00E44:  MOVLW  0F
00E46:  ANDWF  00,F
00E48:  BCF    x1D.4
00E4A:  BTFSC  00.0
00E4C:  BSF    x1D.4
....................    FaultType.B14 = EEpDat >> 5;
00E4E:  SWAPF  39,W
00E50:  MOVWF  00
00E52:  RRCF   00,F
00E54:  MOVLW  07
00E56:  ANDWF  00,F
00E58:  BCF    x1D.5
00E5A:  BTFSC  00.0
00E5C:  BSF    x1D.5
....................    FaultType.B15 = EEpDat >> 6;
00E5E:  SWAPF  39,W
00E60:  MOVWF  00
00E62:  RRCF   00,F
00E64:  RRCF   00,F
00E66:  MOVLW  03
00E68:  ANDWF  00,F
00E6A:  BCF    x1D.6
00E6C:  BTFSC  00.0
00E6E:  BSF    x1D.6
....................    FaultType.B16 = EEpDat >> 7;
00E70:  CLRF   00
00E72:  BTFSC  39.7
00E74:  BSF    00.0
00E76:  BCF    x1D.7
00E78:  BTFSC  00.0
00E7A:  BSF    x1D.7
....................    
....................    EEpDat = read_eeprom(0x06);   // Fault type 9-16
00E7C:  MOVFF  FF2,DCD
00E80:  BCF    FF2.7
00E82:  CLRF   FAA
00E84:  MOVLW  06
00E86:  MOVWF  FA9
00E88:  BCF    FA6.6
00E8A:  BCF    FA6.7
00E8C:  BSF    FA6.0
00E8E:  MOVF   FA8,W
00E90:  BTFSC  xCD.7
00E92:  BSF    FF2.7
00E94:  MOVWF  39
....................    FaultType17_24 = EEpDat;
00E96:  MOVFF  39,3F
.................... 
....................    FaultType.B17 = EEpDat;
00E9A:  BCF    x1E.0
00E9C:  BTFSC  39.0
00E9E:  BSF    x1E.0
....................    FaultType.B18 = EEpDat >> 1;
00EA0:  BCF    FD8.0
00EA2:  RRCF   39,W
00EA4:  BCF    x1E.1
00EA6:  BTFSC  FE8.0
00EA8:  BSF    x1E.1
....................    FaultType.B19 = EEpDat >> 2;
00EAA:  RRCF   39,W
00EAC:  MOVWF  00
00EAE:  RRCF   00,F
00EB0:  MOVLW  3F
00EB2:  ANDWF  00,F
00EB4:  BCF    x1E.2
00EB6:  BTFSC  00.0
00EB8:  BSF    x1E.2
....................    FaultType.B20 = EEpDat >> 3;
00EBA:  RRCF   39,W
00EBC:  MOVWF  00
00EBE:  RRCF   00,F
00EC0:  RRCF   00,F
00EC2:  MOVLW  1F
00EC4:  ANDWF  00,F
00EC6:  BCF    x1E.3
00EC8:  BTFSC  00.0
00ECA:  BSF    x1E.3
....................    FaultType.B21 = EEpDat >> 4;
00ECC:  SWAPF  39,W
00ECE:  MOVWF  00
00ED0:  MOVLW  0F
00ED2:  ANDWF  00,F
00ED4:  BCF    x1E.4
00ED6:  BTFSC  00.0
00ED8:  BSF    x1E.4
....................    FaultType.B22 = EEpDat >> 5;
00EDA:  SWAPF  39,W
00EDC:  MOVWF  00
00EDE:  RRCF   00,F
00EE0:  MOVLW  07
00EE2:  ANDWF  00,F
00EE4:  BCF    x1E.5
00EE6:  BTFSC  00.0
00EE8:  BSF    x1E.5
....................    FaultType.B23 = EEpDat >> 6;
00EEA:  SWAPF  39,W
00EEC:  MOVWF  00
00EEE:  RRCF   00,F
00EF0:  RRCF   00,F
00EF2:  MOVLW  03
00EF4:  ANDWF  00,F
00EF6:  BCF    x1E.6
00EF8:  BTFSC  00.0
00EFA:  BSF    x1E.6
....................    FaultType.B24 = EEpDat >> 7;
00EFC:  CLRF   00
00EFE:  BTFSC  39.7
00F00:  BSF    00.0
00F02:  BCF    x1E.7
00F04:  BTFSC  00.0
00F06:  BSF    x1E.7
.................... 
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00F08:  MOVFF  FF2,DCD
00F0C:  BCF    FF2.7
00F0E:  CLRF   FAA
00F10:  MOVLW  07
00F12:  MOVWF  FA9
00F14:  BCF    FA6.6
00F16:  BCF    FA6.7
00F18:  BSF    FA6.0
00F1A:  MOVF   FA8,W
00F1C:  BTFSC  xCD.7
00F1E:  BSF    FF2.7
00F20:  MOVWF  39
....................    OutputType1_8 = EEpDat;
00F22:  MOVFF  39,40
.................... 
....................    OutputType.B1 = EEpDat;
00F26:  BCF    x20.0
00F28:  BTFSC  39.0
00F2A:  BSF    x20.0
....................    OutputType.B2 = EEpDat >> 1;
00F2C:  BCF    FD8.0
00F2E:  RRCF   39,W
00F30:  BCF    x20.1
00F32:  BTFSC  FE8.0
00F34:  BSF    x20.1
....................    OutputType.B3 = EEpDat >> 2;
00F36:  RRCF   39,W
00F38:  MOVWF  00
00F3A:  RRCF   00,F
00F3C:  MOVLW  3F
00F3E:  ANDWF  00,F
00F40:  BCF    x20.2
00F42:  BTFSC  00.0
00F44:  BSF    x20.2
....................    OutputType.B4 = EEpDat >> 3;
00F46:  RRCF   39,W
00F48:  MOVWF  00
00F4A:  RRCF   00,F
00F4C:  RRCF   00,F
00F4E:  MOVLW  1F
00F50:  ANDWF  00,F
00F52:  BCF    x20.3
00F54:  BTFSC  00.0
00F56:  BSF    x20.3
....................    OutputType.B5 = EEpDat >> 4;
00F58:  SWAPF  39,W
00F5A:  MOVWF  00
00F5C:  MOVLW  0F
00F5E:  ANDWF  00,F
00F60:  BCF    x20.4
00F62:  BTFSC  00.0
00F64:  BSF    x20.4
....................    OutputType.B6 = EEpDat >> 5;
00F66:  SWAPF  39,W
00F68:  MOVWF  00
00F6A:  RRCF   00,F
00F6C:  MOVLW  07
00F6E:  ANDWF  00,F
00F70:  BCF    x20.5
00F72:  BTFSC  00.0
00F74:  BSF    x20.5
....................    OutputType.B7 = EEpDat >> 6;
00F76:  SWAPF  39,W
00F78:  MOVWF  00
00F7A:  RRCF   00,F
00F7C:  RRCF   00,F
00F7E:  MOVLW  03
00F80:  ANDWF  00,F
00F82:  BCF    x20.6
00F84:  BTFSC  00.0
00F86:  BSF    x20.6
....................    OutputType.B8 = EEpDat >> 7;
00F88:  CLRF   00
00F8A:  BTFSC  39.7
00F8C:  BSF    00.0
00F8E:  BCF    x20.7
00F90:  BTFSC  00.0
00F92:  BSF    x20.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
00F94:  MOVFF  FF2,DCD
00F98:  BCF    FF2.7
00F9A:  CLRF   FAA
00F9C:  MOVLW  08
00F9E:  MOVWF  FA9
00FA0:  BCF    FA6.6
00FA2:  BCF    FA6.7
00FA4:  BSF    FA6.0
00FA6:  MOVF   FA8,W
00FA8:  BTFSC  xCD.7
00FAA:  BSF    FF2.7
00FAC:  MOVWF  39
....................    OutputType9_16 = EEpDat;
00FAE:  MOVFF  39,41
.................... 
....................    OutputType.B9 = EEpDat;
00FB2:  BCF    x21.0
00FB4:  BTFSC  39.0
00FB6:  BSF    x21.0
....................    OutputType.B10 = EEpDat >> 1;
00FB8:  BCF    FD8.0
00FBA:  RRCF   39,W
00FBC:  BCF    x21.1
00FBE:  BTFSC  FE8.0
00FC0:  BSF    x21.1
....................    OutputType.B11 = EEpDat >> 2;
00FC2:  RRCF   39,W
00FC4:  MOVWF  00
00FC6:  RRCF   00,F
00FC8:  MOVLW  3F
00FCA:  ANDWF  00,F
00FCC:  BCF    x21.2
00FCE:  BTFSC  00.0
00FD0:  BSF    x21.2
....................    OutputType.B12 = EEpDat >> 3;
00FD2:  RRCF   39,W
00FD4:  MOVWF  00
00FD6:  RRCF   00,F
00FD8:  RRCF   00,F
00FDA:  MOVLW  1F
00FDC:  ANDWF  00,F
00FDE:  BCF    x21.3
00FE0:  BTFSC  00.0
00FE2:  BSF    x21.3
....................    OutputType.B13 = EEpDat >> 4;
00FE4:  SWAPF  39,W
00FE6:  MOVWF  00
00FE8:  MOVLW  0F
00FEA:  ANDWF  00,F
00FEC:  BCF    x21.4
00FEE:  BTFSC  00.0
00FF0:  BSF    x21.4
....................    OutputType.B14 = EEpDat >> 5;
00FF2:  SWAPF  39,W
00FF4:  MOVWF  00
00FF6:  RRCF   00,F
00FF8:  MOVLW  07
00FFA:  ANDWF  00,F
00FFC:  BCF    x21.5
00FFE:  BTFSC  00.0
01000:  BSF    x21.5
....................    OutputType.B15 = EEpDat >> 6;
01002:  SWAPF  39,W
01004:  MOVWF  00
01006:  RRCF   00,F
01008:  RRCF   00,F
0100A:  MOVLW  03
0100C:  ANDWF  00,F
0100E:  BCF    x21.6
01010:  BTFSC  00.0
01012:  BSF    x21.6
....................    OutputType.B16 = EEpDat >> 7;
01014:  CLRF   00
01016:  BTFSC  39.7
01018:  BSF    00.0
0101A:  BCF    x21.7
0101C:  BTFSC  00.0
0101E:  BSF    x21.7
....................    
....................    EEpDat = read_eeprom(0x09);   // Output type 9-16
01020:  MOVFF  FF2,DCD
01024:  BCF    FF2.7
01026:  CLRF   FAA
01028:  MOVLW  09
0102A:  MOVWF  FA9
0102C:  BCF    FA6.6
0102E:  BCF    FA6.7
01030:  BSF    FA6.0
01032:  MOVF   FA8,W
01034:  BTFSC  xCD.7
01036:  BSF    FF2.7
01038:  MOVWF  39
....................    OutputType17_24 = EEpDat;
0103A:  MOVFF  39,42
.................... 
....................    OutputType.B17 = EEpDat;
0103E:  BCF    x22.0
01040:  BTFSC  39.0
01042:  BSF    x22.0
....................    OutputType.B18 = EEpDat >> 1;
01044:  BCF    FD8.0
01046:  RRCF   39,W
01048:  BCF    x22.1
0104A:  BTFSC  FE8.0
0104C:  BSF    x22.1
....................    OutputType.B19 = EEpDat >> 2;
0104E:  RRCF   39,W
01050:  MOVWF  00
01052:  RRCF   00,F
01054:  MOVLW  3F
01056:  ANDWF  00,F
01058:  BCF    x22.2
0105A:  BTFSC  00.0
0105C:  BSF    x22.2
....................    OutputType.B20 = EEpDat >> 3;
0105E:  RRCF   39,W
01060:  MOVWF  00
01062:  RRCF   00,F
01064:  RRCF   00,F
01066:  MOVLW  1F
01068:  ANDWF  00,F
0106A:  BCF    x22.3
0106C:  BTFSC  00.0
0106E:  BSF    x22.3
....................    OutputType.B21 = EEpDat >> 4;
01070:  SWAPF  39,W
01072:  MOVWF  00
01074:  MOVLW  0F
01076:  ANDWF  00,F
01078:  BCF    x22.4
0107A:  BTFSC  00.0
0107C:  BSF    x22.4
....................    OutputType.B22 = EEpDat >> 5;
0107E:  SWAPF  39,W
01080:  MOVWF  00
01082:  RRCF   00,F
01084:  MOVLW  07
01086:  ANDWF  00,F
01088:  BCF    x22.5
0108A:  BTFSC  00.0
0108C:  BSF    x22.5
....................    OutputType.B23 = EEpDat >> 6;
0108E:  SWAPF  39,W
01090:  MOVWF  00
01092:  RRCF   00,F
01094:  RRCF   00,F
01096:  MOVLW  03
01098:  ANDWF  00,F
0109A:  BCF    x22.6
0109C:  BTFSC  00.0
0109E:  BSF    x22.6
....................    OutputType.B24 = EEpDat >> 7;
010A0:  CLRF   00
010A2:  BTFSC  39.7
010A4:  BSF    00.0
010A6:  BCF    x22.7
010A8:  BTFSC  00.0
010AA:  BSF    x22.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
010AC:  MOVFF  FF2,DCD
010B0:  BCF    FF2.7
010B2:  CLRF   FAA
010B4:  MOVLW  0A
010B6:  MOVWF  FA9
010B8:  BCF    FA6.6
010BA:  BCF    FA6.7
010BC:  BSF    FA6.0
010BE:  MOVF   FA8,W
010C0:  BTFSC  xCD.7
010C2:  BSF    FF2.7
010C4:  MOVWF  39
....................    OutputBoth1_8 = EEpDat;
010C6:  MOVFF  39,43
.................... 
....................    OutputBoth.B1 = EEpDat;
010CA:  BCF    x24.0
010CC:  BTFSC  39.0
010CE:  BSF    x24.0
....................    OutputBoth.B2 = EEpDat >> 1;
010D0:  BCF    FD8.0
010D2:  RRCF   39,W
010D4:  BCF    x24.1
010D6:  BTFSC  FE8.0
010D8:  BSF    x24.1
....................    OutputBoth.B3 = EEpDat >> 2;
010DA:  RRCF   39,W
010DC:  MOVWF  00
010DE:  RRCF   00,F
010E0:  MOVLW  3F
010E2:  ANDWF  00,F
010E4:  BCF    x24.2
010E6:  BTFSC  00.0
010E8:  BSF    x24.2
....................    OutputBoth.B4 = EEpDat >> 3;
010EA:  RRCF   39,W
010EC:  MOVWF  00
010EE:  RRCF   00,F
010F0:  RRCF   00,F
010F2:  MOVLW  1F
010F4:  ANDWF  00,F
010F6:  BCF    x24.3
010F8:  BTFSC  00.0
010FA:  BSF    x24.3
....................    OutputBoth.B5 = EEpDat >> 4;
010FC:  SWAPF  39,W
010FE:  MOVWF  00
01100:  MOVLW  0F
01102:  ANDWF  00,F
01104:  BCF    x24.4
01106:  BTFSC  00.0
01108:  BSF    x24.4
....................    OutputBoth.B6 = EEpDat >> 5;
0110A:  SWAPF  39,W
0110C:  MOVWF  00
0110E:  RRCF   00,F
01110:  MOVLW  07
01112:  ANDWF  00,F
01114:  BCF    x24.5
01116:  BTFSC  00.0
01118:  BSF    x24.5
....................    OutputBoth.B7 = EEpDat >> 6;
0111A:  SWAPF  39,W
0111C:  MOVWF  00
0111E:  RRCF   00,F
01120:  RRCF   00,F
01122:  MOVLW  03
01124:  ANDWF  00,F
01126:  BCF    x24.6
01128:  BTFSC  00.0
0112A:  BSF    x24.6
....................    OutputBoth.B8 = EEpDat >> 7;
0112C:  CLRF   00
0112E:  BTFSC  39.7
01130:  BSF    00.0
01132:  BCF    x24.7
01134:  BTFSC  00.0
01136:  BSF    x24.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
01138:  MOVFF  FF2,DCD
0113C:  BCF    FF2.7
0113E:  CLRF   FAA
01140:  MOVLW  0B
01142:  MOVWF  FA9
01144:  BCF    FA6.6
01146:  BCF    FA6.7
01148:  BSF    FA6.0
0114A:  MOVF   FA8,W
0114C:  BTFSC  xCD.7
0114E:  BSF    FF2.7
01150:  MOVWF  39
....................    OutputBoth9_16 = EEpDat;
01152:  MOVFF  39,44
.................... 
....................    OutputBoth.B9 = EEpDat;
01156:  BCF    x25.0
01158:  BTFSC  39.0
0115A:  BSF    x25.0
....................    OutputBoth.B10 = EEpDat >> 1;
0115C:  BCF    FD8.0
0115E:  RRCF   39,W
01160:  BCF    x25.1
01162:  BTFSC  FE8.0
01164:  BSF    x25.1
....................    OutputBoth.B11 = EEpDat >> 2;
01166:  RRCF   39,W
01168:  MOVWF  00
0116A:  RRCF   00,F
0116C:  MOVLW  3F
0116E:  ANDWF  00,F
01170:  BCF    x25.2
01172:  BTFSC  00.0
01174:  BSF    x25.2
....................    OutputBoth.B12 = EEpDat >> 3;
01176:  RRCF   39,W
01178:  MOVWF  00
0117A:  RRCF   00,F
0117C:  RRCF   00,F
0117E:  MOVLW  1F
01180:  ANDWF  00,F
01182:  BCF    x25.3
01184:  BTFSC  00.0
01186:  BSF    x25.3
....................    OutputBoth.B13 = EEpDat >> 4;
01188:  SWAPF  39,W
0118A:  MOVWF  00
0118C:  MOVLW  0F
0118E:  ANDWF  00,F
01190:  BCF    x25.4
01192:  BTFSC  00.0
01194:  BSF    x25.4
....................    OutputBoth.B14 = EEpDat >> 5;
01196:  SWAPF  39,W
01198:  MOVWF  00
0119A:  RRCF   00,F
0119C:  MOVLW  07
0119E:  ANDWF  00,F
011A0:  BCF    x25.5
011A2:  BTFSC  00.0
011A4:  BSF    x25.5
....................    OutputBoth.B15 = EEpDat >> 6;
011A6:  SWAPF  39,W
011A8:  MOVWF  00
011AA:  RRCF   00,F
011AC:  RRCF   00,F
011AE:  MOVLW  03
011B0:  ANDWF  00,F
011B2:  BCF    x25.6
011B4:  BTFSC  00.0
011B6:  BSF    x25.6
....................    OutputBoth.B16 = EEpDat >> 7;
011B8:  CLRF   00
011BA:  BTFSC  39.7
011BC:  BSF    00.0
011BE:  BCF    x25.7
011C0:  BTFSC  00.0
011C2:  BSF    x25.7
....................    
....................    EEpDat = read_eeprom(0x0C);   // Output Both 9-16
011C4:  MOVFF  FF2,DCD
011C8:  BCF    FF2.7
011CA:  CLRF   FAA
011CC:  MOVLW  0C
011CE:  MOVWF  FA9
011D0:  BCF    FA6.6
011D2:  BCF    FA6.7
011D4:  BSF    FA6.0
011D6:  MOVF   FA8,W
011D8:  BTFSC  xCD.7
011DA:  BSF    FF2.7
011DC:  MOVWF  39
....................    OutputBoth17_24 = EEpDat;
011DE:  MOVFF  39,45
.................... 
....................    OutputBoth.B17 = EEpDat;
011E2:  BCF    x26.0
011E4:  BTFSC  39.0
011E6:  BSF    x26.0
....................    OutputBoth.B18 = EEpDat >> 1;
011E8:  BCF    FD8.0
011EA:  RRCF   39,W
011EC:  BCF    x26.1
011EE:  BTFSC  FE8.0
011F0:  BSF    x26.1
....................    OutputBoth.B19 = EEpDat >> 2;
011F2:  RRCF   39,W
011F4:  MOVWF  00
011F6:  RRCF   00,F
011F8:  MOVLW  3F
011FA:  ANDWF  00,F
011FC:  BCF    x26.2
011FE:  BTFSC  00.0
01200:  BSF    x26.2
....................    OutputBoth.B20 = EEpDat >> 3;
01202:  RRCF   39,W
01204:  MOVWF  00
01206:  RRCF   00,F
01208:  RRCF   00,F
0120A:  MOVLW  1F
0120C:  ANDWF  00,F
0120E:  BCF    x26.3
01210:  BTFSC  00.0
01212:  BSF    x26.3
....................    OutputBoth.B21 = EEpDat >> 4;
01214:  SWAPF  39,W
01216:  MOVWF  00
01218:  MOVLW  0F
0121A:  ANDWF  00,F
0121C:  BCF    x26.4
0121E:  BTFSC  00.0
01220:  BSF    x26.4
....................    OutputBoth.B22 = EEpDat >> 5;
01222:  SWAPF  39,W
01224:  MOVWF  00
01226:  RRCF   00,F
01228:  MOVLW  07
0122A:  ANDWF  00,F
0122C:  BCF    x26.5
0122E:  BTFSC  00.0
01230:  BSF    x26.5
....................    OutputBoth.B23 = EEpDat >> 6;
01232:  SWAPF  39,W
01234:  MOVWF  00
01236:  RRCF   00,F
01238:  RRCF   00,F
0123A:  MOVLW  03
0123C:  ANDWF  00,F
0123E:  BCF    x26.6
01240:  BTFSC  00.0
01242:  BSF    x26.6
....................    OutputBoth.B24 = EEpDat >> 7;
01244:  CLRF   00
01246:  BTFSC  39.7
01248:  BSF    00.0
0124A:  BCF    x26.7
0124C:  BTFSC  00.0
0124E:  BSF    x26.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
01250:  MOVFF  FF2,DCD
01254:  BCF    FF2.7
01256:  CLRF   FAA
01258:  MOVLW  0D
0125A:  MOVWF  FA9
0125C:  BCF    FA6.6
0125E:  BCF    FA6.7
01260:  BSF    FA6.0
01262:  MOVF   FA8,W
01264:  BTFSC  xCD.7
01266:  BSF    FF2.7
01268:  MOVWF  39
....................    Alarm_Indicator1_8 = EEpDat;
0126A:  MOVFF  39,46
.................... 
....................    AlarmIndicator.B1 = EEpDat;
0126E:  BCF    x28.0
01270:  BTFSC  39.0
01272:  BSF    x28.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
01274:  BCF    FD8.0
01276:  RRCF   39,W
01278:  BCF    x28.1
0127A:  BTFSC  FE8.0
0127C:  BSF    x28.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
0127E:  RRCF   39,W
01280:  MOVWF  00
01282:  RRCF   00,F
01284:  MOVLW  3F
01286:  ANDWF  00,F
01288:  BCF    x28.2
0128A:  BTFSC  00.0
0128C:  BSF    x28.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
0128E:  RRCF   39,W
01290:  MOVWF  00
01292:  RRCF   00,F
01294:  RRCF   00,F
01296:  MOVLW  1F
01298:  ANDWF  00,F
0129A:  BCF    x28.3
0129C:  BTFSC  00.0
0129E:  BSF    x28.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
012A0:  SWAPF  39,W
012A2:  MOVWF  00
012A4:  MOVLW  0F
012A6:  ANDWF  00,F
012A8:  BCF    x28.4
012AA:  BTFSC  00.0
012AC:  BSF    x28.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
012AE:  SWAPF  39,W
012B0:  MOVWF  00
012B2:  RRCF   00,F
012B4:  MOVLW  07
012B6:  ANDWF  00,F
012B8:  BCF    x28.5
012BA:  BTFSC  00.0
012BC:  BSF    x28.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
012BE:  SWAPF  39,W
012C0:  MOVWF  00
012C2:  RRCF   00,F
012C4:  RRCF   00,F
012C6:  MOVLW  03
012C8:  ANDWF  00,F
012CA:  BCF    x28.6
012CC:  BTFSC  00.0
012CE:  BSF    x28.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
012D0:  CLRF   00
012D2:  BTFSC  39.7
012D4:  BSF    00.0
012D6:  BCF    x28.7
012D8:  BTFSC  00.0
012DA:  BSF    x28.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
012DC:  MOVFF  FF2,DCD
012E0:  BCF    FF2.7
012E2:  CLRF   FAA
012E4:  MOVLW  0E
012E6:  MOVWF  FA9
012E8:  BCF    FA6.6
012EA:  BCF    FA6.7
012EC:  BSF    FA6.0
012EE:  MOVF   FA8,W
012F0:  BTFSC  xCD.7
012F2:  BSF    FF2.7
012F4:  MOVWF  39
....................    Alarm_Indicator9_16 = EEpDat;
012F6:  MOVFF  39,47
.................... 
....................    AlarmIndicator.B9 = EEpDat;
012FA:  BCF    x29.0
012FC:  BTFSC  39.0
012FE:  BSF    x29.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
01300:  BCF    FD8.0
01302:  RRCF   39,W
01304:  BCF    x29.1
01306:  BTFSC  FE8.0
01308:  BSF    x29.1
....................    AlarmIndicator.B11 = EEpDat >> 2;
0130A:  RRCF   39,W
0130C:  MOVWF  00
0130E:  RRCF   00,F
01310:  MOVLW  3F
01312:  ANDWF  00,F
01314:  BCF    x29.2
01316:  BTFSC  00.0
01318:  BSF    x29.2
....................    AlarmIndicator.B12 = EEpDat >> 3;
0131A:  RRCF   39,W
0131C:  MOVWF  00
0131E:  RRCF   00,F
01320:  RRCF   00,F
01322:  MOVLW  1F
01324:  ANDWF  00,F
01326:  BCF    x29.3
01328:  BTFSC  00.0
0132A:  BSF    x29.3
....................    AlarmIndicator.B13 = EEpDat >> 4;
0132C:  SWAPF  39,W
0132E:  MOVWF  00
01330:  MOVLW  0F
01332:  ANDWF  00,F
01334:  BCF    x29.4
01336:  BTFSC  00.0
01338:  BSF    x29.4
....................    AlarmIndicator.B14 = EEpDat >> 5;
0133A:  SWAPF  39,W
0133C:  MOVWF  00
0133E:  RRCF   00,F
01340:  MOVLW  07
01342:  ANDWF  00,F
01344:  BCF    x29.5
01346:  BTFSC  00.0
01348:  BSF    x29.5
....................    AlarmIndicator.B15 = EEpDat >> 6;
0134A:  SWAPF  39,W
0134C:  MOVWF  00
0134E:  RRCF   00,F
01350:  RRCF   00,F
01352:  MOVLW  03
01354:  ANDWF  00,F
01356:  BCF    x29.6
01358:  BTFSC  00.0
0135A:  BSF    x29.6
....................    AlarmIndicator.B16 = EEpDat >> 7;
0135C:  CLRF   00
0135E:  BTFSC  39.7
01360:  BSF    00.0
01362:  BCF    x29.7
01364:  BTFSC  00.0
01366:  BSF    x29.7
....................    
....................    EEpDat = read_eeprom(0x0F);   // AlarmIndicator 9-16
01368:  MOVFF  FF2,DCD
0136C:  BCF    FF2.7
0136E:  CLRF   FAA
01370:  MOVLW  0F
01372:  MOVWF  FA9
01374:  BCF    FA6.6
01376:  BCF    FA6.7
01378:  BSF    FA6.0
0137A:  MOVF   FA8,W
0137C:  BTFSC  xCD.7
0137E:  BSF    FF2.7
01380:  MOVWF  39
....................    Alarm_Indicator17_24 = EEpDat;
01382:  MOVFF  39,48
.................... 
....................    AlarmIndicator.B17 = EEpDat;
01386:  BCF    x2A.0
01388:  BTFSC  39.0
0138A:  BSF    x2A.0
....................    AlarmIndicator.B18 = EEpDat >> 1;
0138C:  BCF    FD8.0
0138E:  RRCF   39,W
01390:  BCF    x2A.1
01392:  BTFSC  FE8.0
01394:  BSF    x2A.1
....................    AlarmIndicator.B19 = EEpDat >> 2;
01396:  RRCF   39,W
01398:  MOVWF  00
0139A:  RRCF   00,F
0139C:  MOVLW  3F
0139E:  ANDWF  00,F
013A0:  BCF    x2A.2
013A2:  BTFSC  00.0
013A4:  BSF    x2A.2
....................    AlarmIndicator.B20 = EEpDat >> 3;
013A6:  RRCF   39,W
013A8:  MOVWF  00
013AA:  RRCF   00,F
013AC:  RRCF   00,F
013AE:  MOVLW  1F
013B0:  ANDWF  00,F
013B2:  BCF    x2A.3
013B4:  BTFSC  00.0
013B6:  BSF    x2A.3
....................    AlarmIndicator.B21 = EEpDat >> 4;
013B8:  SWAPF  39,W
013BA:  MOVWF  00
013BC:  MOVLW  0F
013BE:  ANDWF  00,F
013C0:  BCF    x2A.4
013C2:  BTFSC  00.0
013C4:  BSF    x2A.4
....................    AlarmIndicator.B22 = EEpDat >> 5;
013C6:  SWAPF  39,W
013C8:  MOVWF  00
013CA:  RRCF   00,F
013CC:  MOVLW  07
013CE:  ANDWF  00,F
013D0:  BCF    x2A.5
013D2:  BTFSC  00.0
013D4:  BSF    x2A.5
....................    AlarmIndicator.B23 = EEpDat >> 6;
013D6:  SWAPF  39,W
013D8:  MOVWF  00
013DA:  RRCF   00,F
013DC:  RRCF   00,F
013DE:  MOVLW  03
013E0:  ANDWF  00,F
013E2:  BCF    x2A.6
013E4:  BTFSC  00.0
013E6:  BSF    x2A.6
....................    AlarmIndicator.B24 = EEpDat >> 7;
013E8:  CLRF   00
013EA:  BTFSC  39.7
013EC:  BSF    00.0
013EE:  BCF    x2A.7
013F0:  BTFSC  00.0
013F2:  BSF    x2A.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
013F4:  MOVFF  FF2,DCD
013F8:  BCF    FF2.7
013FA:  CLRF   FAA
013FC:  MOVLW  10
013FE:  MOVWF  FA9
01400:  BCF    FA6.6
01402:  BCF    FA6.7
01404:  BSF    FA6.0
01406:  MOVF   FA8,W
01408:  BTFSC  xCD.7
0140A:  BSF    FF2.7
0140C:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
0140E:  BCF    x40.0
01410:  BTFSC  39.0
01412:  BSF    x40.0
....................    RED_Colour.B2 = EEpDat >> 1;
01414:  BCF    FD8.0
01416:  RRCF   39,W
01418:  BCF    x40.1
0141A:  BTFSC  FE8.0
0141C:  BSF    x40.1
....................    RED_Colour.B3 = EEpDat >> 2;
0141E:  RRCF   39,W
01420:  MOVWF  00
01422:  RRCF   00,F
01424:  MOVLW  3F
01426:  ANDWF  00,F
01428:  BCF    x40.2
0142A:  BTFSC  00.0
0142C:  BSF    x40.2
....................    RED_Colour.B4 = EEpDat >> 3;
0142E:  RRCF   39,W
01430:  MOVWF  00
01432:  RRCF   00,F
01434:  RRCF   00,F
01436:  MOVLW  1F
01438:  ANDWF  00,F
0143A:  BCF    x40.3
0143C:  BTFSC  00.0
0143E:  BSF    x40.3
....................    RED_Colour.B5 = EEpDat >> 4;
01440:  SWAPF  39,W
01442:  MOVWF  00
01444:  MOVLW  0F
01446:  ANDWF  00,F
01448:  BCF    x40.4
0144A:  BTFSC  00.0
0144C:  BSF    x40.4
....................    RED_Colour.B6 = EEpDat >> 5;
0144E:  SWAPF  39,W
01450:  MOVWF  00
01452:  RRCF   00,F
01454:  MOVLW  07
01456:  ANDWF  00,F
01458:  BCF    x40.5
0145A:  BTFSC  00.0
0145C:  BSF    x40.5
....................    RED_Colour.B7 = EEpDat >> 6;
0145E:  SWAPF  39,W
01460:  MOVWF  00
01462:  RRCF   00,F
01464:  RRCF   00,F
01466:  MOVLW  03
01468:  ANDWF  00,F
0146A:  BCF    x40.6
0146C:  BTFSC  00.0
0146E:  BSF    x40.6
....................    RED_Colour.B8 = EEpDat >> 7;
01470:  CLRF   00
01472:  BTFSC  39.7
01474:  BSF    00.0
01476:  BCF    x40.7
01478:  BTFSC  00.0
0147A:  BSF    x40.7
....................    
....................    EEpDat = read_eeprom(0x11);
0147C:  MOVFF  FF2,DCD
01480:  BCF    FF2.7
01482:  CLRF   FAA
01484:  MOVLW  11
01486:  MOVWF  FA9
01488:  BCF    FA6.6
0148A:  BCF    FA6.7
0148C:  BSF    FA6.0
0148E:  MOVF   FA8,W
01490:  BTFSC  xCD.7
01492:  BSF    FF2.7
01494:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
01496:  BCF    x41.0
01498:  BTFSC  39.0
0149A:  BSF    x41.0
....................    RED_Colour.B10 = EEpDat >> 1;
0149C:  BCF    FD8.0
0149E:  RRCF   39,W
014A0:  BCF    x41.1
014A2:  BTFSC  FE8.0
014A4:  BSF    x41.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
014A6:  MOVFF  FF2,DCD
014AA:  BCF    FF2.7
014AC:  CLRF   FAA
014AE:  MOVLW  12
014B0:  MOVWF  FA9
014B2:  BCF    FA6.6
014B4:  BCF    FA6.7
014B6:  BSF    FA6.0
014B8:  MOVF   FA8,W
014BA:  BTFSC  xCD.7
014BC:  BSF    FF2.7
014BE:  MOVWF  39
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
014C0:  BCF    x41.2
014C2:  BTFSC  39.0
014C4:  BSF    x41.2
....................    RED_Colour.B12 = EEpDat >> 1;
014C6:  BCF    FD8.0
014C8:  RRCF   39,W
014CA:  BCF    x41.3
014CC:  BTFSC  FE8.0
014CE:  BSF    x41.3
....................    RED_Colour.B13 = EEpDat >> 2;
014D0:  RRCF   39,W
014D2:  MOVWF  00
014D4:  RRCF   00,F
014D6:  MOVLW  3F
014D8:  ANDWF  00,F
014DA:  BCF    x41.4
014DC:  BTFSC  00.0
014DE:  BSF    x41.4
....................    RED_Colour.B14 = EEpDat >> 3;
014E0:  RRCF   39,W
014E2:  MOVWF  00
014E4:  RRCF   00,F
014E6:  RRCF   00,F
014E8:  MOVLW  1F
014EA:  ANDWF  00,F
014EC:  BCF    x41.5
014EE:  BTFSC  00.0
014F0:  BSF    x41.5
....................    RED_Colour.B15 = EEpDat >> 4;
014F2:  SWAPF  39,W
014F4:  MOVWF  00
014F6:  MOVLW  0F
014F8:  ANDWF  00,F
014FA:  BCF    x41.6
014FC:  BTFSC  00.0
014FE:  BSF    x41.6
....................    RED_Colour.B16 = EEpDat >> 5;
01500:  SWAPF  39,W
01502:  MOVWF  00
01504:  RRCF   00,F
01506:  MOVLW  07
01508:  ANDWF  00,F
0150A:  BCF    x41.7
0150C:  BTFSC  00.0
0150E:  BSF    x41.7
....................    RED_Colour.B17 = EEpDat >> 6;
01510:  SWAPF  39,W
01512:  MOVWF  00
01514:  RRCF   00,F
01516:  RRCF   00,F
01518:  MOVLW  03
0151A:  ANDWF  00,F
0151C:  BCF    x42.0
0151E:  BTFSC  00.0
01520:  BSF    x42.0
....................    RED_Colour.B18 = EEpDat >> 7;
01522:  CLRF   00
01524:  BTFSC  39.7
01526:  BSF    00.0
01528:  BCF    x42.1
0152A:  BTFSC  00.0
0152C:  BSF    x42.1
....................    
....................    EEpDat = read_eeprom(0x13);
0152E:  MOVFF  FF2,DCD
01532:  BCF    FF2.7
01534:  CLRF   FAA
01536:  MOVLW  13
01538:  MOVWF  FA9
0153A:  BCF    FA6.6
0153C:  BCF    FA6.7
0153E:  BSF    FA6.0
01540:  MOVF   FA8,W
01542:  BTFSC  xCD.7
01544:  BSF    FF2.7
01546:  MOVWF  39
....................    //Red19_20 = EEpDat;
....................    RED_Colour.B19 = EEpDat;
01548:  BCF    x42.2
0154A:  BTFSC  39.0
0154C:  BSF    x42.2
....................    RED_Colour.B20 = EEpDat >> 1;
0154E:  BCF    FD8.0
01550:  RRCF   39,W
01552:  BCF    x42.3
01554:  BTFSC  FE8.0
01556:  BSF    x42.3
....................    
....................    
....................    EEpDat = read_eeprom(0x14);
01558:  MOVFF  FF2,DCD
0155C:  BCF    FF2.7
0155E:  CLRF   FAA
01560:  MOVLW  14
01562:  MOVWF  FA9
01564:  BCF    FA6.6
01566:  BCF    FA6.7
01568:  BSF    FA6.0
0156A:  MOVF   FA8,W
0156C:  BTFSC  xCD.7
0156E:  BSF    FF2.7
01570:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
01572:  BCF    x44.0
01574:  BTFSC  39.0
01576:  BSF    x44.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
01578:  BCF    FD8.0
0157A:  RRCF   39,W
0157C:  BCF    x44.1
0157E:  BTFSC  FE8.0
01580:  BSF    x44.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
01582:  RRCF   39,W
01584:  MOVWF  00
01586:  RRCF   00,F
01588:  MOVLW  3F
0158A:  ANDWF  00,F
0158C:  BCF    x44.2
0158E:  BTFSC  00.0
01590:  BSF    x44.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
01592:  RRCF   39,W
01594:  MOVWF  00
01596:  RRCF   00,F
01598:  RRCF   00,F
0159A:  MOVLW  1F
0159C:  ANDWF  00,F
0159E:  BCF    x44.3
015A0:  BTFSC  00.0
015A2:  BSF    x44.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
015A4:  SWAPF  39,W
015A6:  MOVWF  00
015A8:  MOVLW  0F
015AA:  ANDWF  00,F
015AC:  BCF    x44.4
015AE:  BTFSC  00.0
015B0:  BSF    x44.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
015B2:  SWAPF  39,W
015B4:  MOVWF  00
015B6:  RRCF   00,F
015B8:  MOVLW  07
015BA:  ANDWF  00,F
015BC:  BCF    x44.5
015BE:  BTFSC  00.0
015C0:  BSF    x44.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
015C2:  SWAPF  39,W
015C4:  MOVWF  00
015C6:  RRCF   00,F
015C8:  RRCF   00,F
015CA:  MOVLW  03
015CC:  ANDWF  00,F
015CE:  BCF    x44.6
015D0:  BTFSC  00.0
015D2:  BSF    x44.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
015D4:  CLRF   00
015D6:  BTFSC  39.7
015D8:  BSF    00.0
015DA:  BCF    x44.7
015DC:  BTFSC  00.0
015DE:  BSF    x44.7
....................    
....................    EEpDat = read_eeprom(0x15);
015E0:  MOVFF  FF2,DCD
015E4:  BCF    FF2.7
015E6:  CLRF   FAA
015E8:  MOVLW  15
015EA:  MOVWF  FA9
015EC:  BCF    FA6.6
015EE:  BCF    FA6.7
015F0:  BSF    FA6.0
015F2:  MOVF   FA8,W
015F4:  BTFSC  xCD.7
015F6:  BSF    FF2.7
015F8:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
015FA:  BCF    x45.0
015FC:  BTFSC  39.0
015FE:  BSF    x45.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
01600:  BCF    FD8.0
01602:  RRCF   39,W
01604:  BCF    x45.1
01606:  BTFSC  FE8.0
01608:  BSF    x45.1
....................    
....................    EEpDat = read_eeprom(0x16);
0160A:  MOVFF  FF2,DCD
0160E:  BCF    FF2.7
01610:  CLRF   FAA
01612:  MOVLW  16
01614:  MOVWF  FA9
01616:  BCF    FA6.6
01618:  BCF    FA6.7
0161A:  BSF    FA6.0
0161C:  MOVF   FA8,W
0161E:  BTFSC  xCD.7
01620:  BSF    FF2.7
01622:  MOVWF  39
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
01624:  BCF    x45.2
01626:  BTFSC  39.0
01628:  BSF    x45.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
0162A:  BCF    FD8.0
0162C:  RRCF   39,W
0162E:  BCF    x45.3
01630:  BTFSC  FE8.0
01632:  BSF    x45.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
01634:  RRCF   39,W
01636:  MOVWF  00
01638:  RRCF   00,F
0163A:  MOVLW  3F
0163C:  ANDWF  00,F
0163E:  BCF    x45.4
01640:  BTFSC  00.0
01642:  BSF    x45.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
01644:  RRCF   39,W
01646:  MOVWF  00
01648:  RRCF   00,F
0164A:  RRCF   00,F
0164C:  MOVLW  1F
0164E:  ANDWF  00,F
01650:  BCF    x45.5
01652:  BTFSC  00.0
01654:  BSF    x45.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
01656:  SWAPF  39,W
01658:  MOVWF  00
0165A:  MOVLW  0F
0165C:  ANDWF  00,F
0165E:  BCF    x45.6
01660:  BTFSC  00.0
01662:  BSF    x45.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
01664:  SWAPF  39,W
01666:  MOVWF  00
01668:  RRCF   00,F
0166A:  MOVLW  07
0166C:  ANDWF  00,F
0166E:  BCF    x45.7
01670:  BTFSC  00.0
01672:  BSF    x45.7
....................    GREEN_Colour.B17 = EEpDat >> 6;
01674:  SWAPF  39,W
01676:  MOVWF  00
01678:  RRCF   00,F
0167A:  RRCF   00,F
0167C:  MOVLW  03
0167E:  ANDWF  00,F
01680:  BCF    x46.0
01682:  BTFSC  00.0
01684:  BSF    x46.0
....................    GREEN_Colour.B18 = EEpDat >> 7;
01686:  CLRF   00
01688:  BTFSC  39.7
0168A:  BSF    00.0
0168C:  BCF    x46.1
0168E:  BTFSC  00.0
01690:  BSF    x46.1
....................    
....................    EEpDat = read_eeprom(0x17);
01692:  MOVFF  FF2,DCD
01696:  BCF    FF2.7
01698:  CLRF   FAA
0169A:  MOVLW  17
0169C:  MOVWF  FA9
0169E:  BCF    FA6.6
016A0:  BCF    FA6.7
016A2:  BSF    FA6.0
016A4:  MOVF   FA8,W
016A6:  BTFSC  xCD.7
016A8:  BSF    FF2.7
016AA:  MOVWF  39
....................    //Green19_20 = EEpDat;
....................    GREEN_Colour.B19 = EEpDat;
016AC:  BCF    x46.2
016AE:  BTFSC  39.0
016B0:  BSF    x46.2
....................    GREEN_Colour.B20 = EEpDat >> 1;
016B2:  BCF    FD8.0
016B4:  RRCF   39,W
016B6:  BCF    x46.3
016B8:  BTFSC  FE8.0
016BA:  BSF    x46.3
....................    
....................   
.................... 
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
016BC:  MOVFF  FF2,DCD
016C0:  BCF    FF2.7
016C2:  CLRF   FAA
016C4:  MOVLW  18
016C6:  MOVWF  FA9
016C8:  BCF    FA6.6
016CA:  BCF    FA6.7
016CC:  BSF    FA6.0
016CE:  MOVF   FA8,W
016D0:  BTFSC  xCD.7
016D2:  BSF    FF2.7
016D4:  MOVLB  0
016D6:  MOVWF  x60
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
016D8:  MOVFF  FF2,DCD
016DC:  BCF    FF2.7
016DE:  CLRF   FAA
016E0:  MOVLW  19
016E2:  MOVWF  FA9
016E4:  BCF    FA6.6
016E6:  BCF    FA6.7
016E8:  BSF    FA6.0
016EA:  MOVF   FA8,W
016EC:  MOVLB  D
016EE:  BTFSC  xCD.7
016F0:  BSF    FF2.7
016F2:  MOVLB  0
016F4:  MOVWF  x61
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
016F6:  MOVFF  FF2,DCD
016FA:  BCF    FF2.7
016FC:  CLRF   FAA
016FE:  MOVLW  1A
01700:  MOVWF  FA9
01702:  BCF    FA6.6
01704:  BCF    FA6.7
01706:  BSF    FA6.0
01708:  MOVF   FA8,W
0170A:  MOVLB  D
0170C:  BTFSC  xCD.7
0170E:  BSF    FF2.7
01710:  MOVLB  0
01712:  MOVWF  x62
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
01714:  MOVFF  FF2,DCD
01718:  BCF    FF2.7
0171A:  CLRF   FAA
0171C:  MOVLW  1B
0171E:  MOVWF  FA9
01720:  BCF    FA6.6
01722:  BCF    FA6.7
01724:  BSF    FA6.0
01726:  MOVF   FA8,W
01728:  MOVLB  D
0172A:  BTFSC  xCD.7
0172C:  BSF    FF2.7
0172E:  MOVLB  0
01730:  MOVWF  x63
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
01732:  MOVFF  FF2,DCD
01736:  BCF    FF2.7
01738:  CLRF   FAA
0173A:  MOVLW  1C
0173C:  MOVWF  FA9
0173E:  BCF    FA6.6
01740:  BCF    FA6.7
01742:  BSF    FA6.0
01744:  MOVF   FA8,W
01746:  MOVLB  D
01748:  BTFSC  xCD.7
0174A:  BSF    FF2.7
0174C:  CLRF   x7D
0174E:  MOVWF  x7C
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
01750:  MOVFF  FF2,DCD
01754:  BCF    FF2.7
01756:  CLRF   FAA
01758:  MOVLW  1D
0175A:  MOVWF  FA9
0175C:  BCF    FA6.6
0175E:  BCF    FA6.7
01760:  BSF    FA6.0
01762:  MOVF   FA8,W
01764:  BTFSC  xCD.7
01766:  BSF    FF2.7
01768:  MOVLB  0
0176A:  MOVWF  x70
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
0176C:  MOVFF  FF2,DCD
01770:  BCF    FF2.7
01772:  CLRF   FAA
01774:  MOVLW  1E
01776:  MOVWF  FA9
01778:  BCF    FA6.6
0177A:  BCF    FA6.7
0177C:  BSF    FA6.0
0177E:  MOVF   FA8,W
01780:  MOVLB  D
01782:  BTFSC  xCD.7
01784:  BSF    FF2.7
01786:  CLRF   x7F
01788:  MOVWF  x7E
....................    FaultDelayTime[2] = read_eeprom(0x1F);
0178A:  MOVFF  FF2,DCD
0178E:  BCF    FF2.7
01790:  CLRF   FAA
01792:  MOVLW  1F
01794:  MOVWF  FA9
01796:  BCF    FA6.6
01798:  BCF    FA6.7
0179A:  BSF    FA6.0
0179C:  MOVF   FA8,W
0179E:  BTFSC  xCD.7
017A0:  BSF    FF2.7
017A2:  CLRF   x81
017A4:  MOVWF  x80
....................    FaultDelayTime[3] = read_eeprom(0x20);
017A6:  MOVFF  FF2,DCD
017AA:  BCF    FF2.7
017AC:  CLRF   FAA
017AE:  MOVLW  20
017B0:  MOVWF  FA9
017B2:  BCF    FA6.6
017B4:  BCF    FA6.7
017B6:  BSF    FA6.0
017B8:  MOVF   FA8,W
017BA:  BTFSC  xCD.7
017BC:  BSF    FF2.7
017BE:  CLRF   x83
017C0:  MOVWF  x82
....................    FaultDelayTime[4] = read_eeprom(0x21);
017C2:  MOVFF  FF2,DCD
017C6:  BCF    FF2.7
017C8:  CLRF   FAA
017CA:  MOVLW  21
017CC:  MOVWF  FA9
017CE:  BCF    FA6.6
017D0:  BCF    FA6.7
017D2:  BSF    FA6.0
017D4:  MOVF   FA8,W
017D6:  BTFSC  xCD.7
017D8:  BSF    FF2.7
017DA:  CLRF   x85
017DC:  MOVWF  x84
....................    FaultDelayTime[5] = read_eeprom(0x22);
017DE:  MOVFF  FF2,DCD
017E2:  BCF    FF2.7
017E4:  CLRF   FAA
017E6:  MOVLW  22
017E8:  MOVWF  FA9
017EA:  BCF    FA6.6
017EC:  BCF    FA6.7
017EE:  BSF    FA6.0
017F0:  MOVF   FA8,W
017F2:  BTFSC  xCD.7
017F4:  BSF    FF2.7
017F6:  CLRF   x87
017F8:  MOVWF  x86
....................    FaultDelayTime[6] = read_eeprom(0x23);
017FA:  MOVFF  FF2,DCD
017FE:  BCF    FF2.7
01800:  CLRF   FAA
01802:  MOVLW  23
01804:  MOVWF  FA9
01806:  BCF    FA6.6
01808:  BCF    FA6.7
0180A:  BSF    FA6.0
0180C:  MOVF   FA8,W
0180E:  BTFSC  xCD.7
01810:  BSF    FF2.7
01812:  CLRF   x89
01814:  MOVWF  x88
....................    FaultDelayTime[7] = read_eeprom(0x24);
01816:  MOVFF  FF2,DCD
0181A:  BCF    FF2.7
0181C:  CLRF   FAA
0181E:  MOVLW  24
01820:  MOVWF  FA9
01822:  BCF    FA6.6
01824:  BCF    FA6.7
01826:  BSF    FA6.0
01828:  MOVF   FA8,W
0182A:  BTFSC  xCD.7
0182C:  BSF    FF2.7
0182E:  CLRF   x8B
01830:  MOVWF  x8A
....................    FaultDelayTime[8] = read_eeprom(0x25);
01832:  MOVFF  FF2,DCD
01836:  BCF    FF2.7
01838:  CLRF   FAA
0183A:  MOVLW  25
0183C:  MOVWF  FA9
0183E:  BCF    FA6.6
01840:  BCF    FA6.7
01842:  BSF    FA6.0
01844:  MOVF   FA8,W
01846:  BTFSC  xCD.7
01848:  BSF    FF2.7
0184A:  CLRF   x8D
0184C:  MOVWF  x8C
....................    FaultDelayTime[9] = read_eeprom(0x26);
0184E:  MOVFF  FF2,DCD
01852:  BCF    FF2.7
01854:  CLRF   FAA
01856:  MOVLW  26
01858:  MOVWF  FA9
0185A:  BCF    FA6.6
0185C:  BCF    FA6.7
0185E:  BSF    FA6.0
01860:  MOVF   FA8,W
01862:  BTFSC  xCD.7
01864:  BSF    FF2.7
01866:  CLRF   x8F
01868:  MOVWF  x8E
....................    FaultDelayTime[10] = read_eeprom(0x27);
0186A:  MOVFF  FF2,DCD
0186E:  BCF    FF2.7
01870:  CLRF   FAA
01872:  MOVLW  27
01874:  MOVWF  FA9
01876:  BCF    FA6.6
01878:  BCF    FA6.7
0187A:  BSF    FA6.0
0187C:  MOVF   FA8,W
0187E:  BTFSC  xCD.7
01880:  BSF    FF2.7
01882:  CLRF   x91
01884:  MOVWF  x90
....................    FaultDelayTime[11] = read_eeprom(0x28);
01886:  MOVFF  FF2,DCD
0188A:  BCF    FF2.7
0188C:  CLRF   FAA
0188E:  MOVLW  28
01890:  MOVWF  FA9
01892:  BCF    FA6.6
01894:  BCF    FA6.7
01896:  BSF    FA6.0
01898:  MOVF   FA8,W
0189A:  BTFSC  xCD.7
0189C:  BSF    FF2.7
0189E:  CLRF   x93
018A0:  MOVWF  x92
....................    FaultDelayTime[12] = read_eeprom(0x29);
018A2:  MOVFF  FF2,DCD
018A6:  BCF    FF2.7
018A8:  CLRF   FAA
018AA:  MOVLW  29
018AC:  MOVWF  FA9
018AE:  BCF    FA6.6
018B0:  BCF    FA6.7
018B2:  BSF    FA6.0
018B4:  MOVF   FA8,W
018B6:  BTFSC  xCD.7
018B8:  BSF    FF2.7
018BA:  CLRF   x95
018BC:  MOVWF  x94
....................    FaultDelayTime[13] = read_eeprom(0x2A);
018BE:  MOVFF  FF2,DCD
018C2:  BCF    FF2.7
018C4:  CLRF   FAA
018C6:  MOVLW  2A
018C8:  MOVWF  FA9
018CA:  BCF    FA6.6
018CC:  BCF    FA6.7
018CE:  BSF    FA6.0
018D0:  MOVF   FA8,W
018D2:  BTFSC  xCD.7
018D4:  BSF    FF2.7
018D6:  CLRF   x97
018D8:  MOVWF  x96
....................    FaultDelayTime[14] = read_eeprom(0x2B);
018DA:  MOVFF  FF2,DCD
018DE:  BCF    FF2.7
018E0:  CLRF   FAA
018E2:  MOVLW  2B
018E4:  MOVWF  FA9
018E6:  BCF    FA6.6
018E8:  BCF    FA6.7
018EA:  BSF    FA6.0
018EC:  MOVF   FA8,W
018EE:  BTFSC  xCD.7
018F0:  BSF    FF2.7
018F2:  CLRF   x99
018F4:  MOVWF  x98
....................    FaultDelayTime[15] = read_eeprom(0x2C);
018F6:  MOVFF  FF2,DCD
018FA:  BCF    FF2.7
018FC:  CLRF   FAA
018FE:  MOVLW  2C
01900:  MOVWF  FA9
01902:  BCF    FA6.6
01904:  BCF    FA6.7
01906:  BSF    FA6.0
01908:  MOVF   FA8,W
0190A:  BTFSC  xCD.7
0190C:  BSF    FF2.7
0190E:  CLRF   x9B
01910:  MOVWF  x9A
....................    FaultDelayTime[16] = read_eeprom(0x2D);
01912:  MOVFF  FF2,DCD
01916:  BCF    FF2.7
01918:  CLRF   FAA
0191A:  MOVLW  2D
0191C:  MOVWF  FA9
0191E:  BCF    FA6.6
01920:  BCF    FA6.7
01922:  BSF    FA6.0
01924:  MOVF   FA8,W
01926:  BTFSC  xCD.7
01928:  BSF    FF2.7
0192A:  CLRF   x9D
0192C:  MOVWF  x9C
....................    FaultDelayTime[17] = read_eeprom(0x2E);
0192E:  MOVFF  FF2,DCD
01932:  BCF    FF2.7
01934:  CLRF   FAA
01936:  MOVLW  2E
01938:  MOVWF  FA9
0193A:  BCF    FA6.6
0193C:  BCF    FA6.7
0193E:  BSF    FA6.0
01940:  MOVF   FA8,W
01942:  BTFSC  xCD.7
01944:  BSF    FF2.7
01946:  CLRF   x9F
01948:  MOVWF  x9E
....................    FaultDelayTime[18] = read_eeprom(0x2F);
0194A:  MOVFF  FF2,DCD
0194E:  BCF    FF2.7
01950:  CLRF   FAA
01952:  MOVLW  2F
01954:  MOVWF  FA9
01956:  BCF    FA6.6
01958:  BCF    FA6.7
0195A:  BSF    FA6.0
0195C:  MOVF   FA8,W
0195E:  BTFSC  xCD.7
01960:  BSF    FF2.7
01962:  CLRF   xA1
01964:  MOVWF  xA0
....................    FaultDelayTime[19] = read_eeprom(0x30);
01966:  MOVFF  FF2,DCD
0196A:  BCF    FF2.7
0196C:  CLRF   FAA
0196E:  MOVLW  30
01970:  MOVWF  FA9
01972:  BCF    FA6.6
01974:  BCF    FA6.7
01976:  BSF    FA6.0
01978:  MOVF   FA8,W
0197A:  BTFSC  xCD.7
0197C:  BSF    FF2.7
0197E:  CLRF   xA3
01980:  MOVWF  xA2
....................    FaultDelayTime[20] = read_eeprom(0x31);
01982:  MOVFF  FF2,DCD
01986:  BCF    FF2.7
01988:  CLRF   FAA
0198A:  MOVLW  31
0198C:  MOVWF  FA9
0198E:  BCF    FA6.6
01990:  BCF    FA6.7
01992:  BSF    FA6.0
01994:  MOVF   FA8,W
01996:  BTFSC  xCD.7
01998:  BSF    FF2.7
0199A:  CLRF   xA5
0199C:  MOVWF  xA4
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
0199E:  CLRF   xC3
....................    for(; ; a++)
....................    {
....................       restart_wdt();
019A0:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
019A2:  MOVLW  32
019A4:  ADDWF  xC3,W
019A6:  MOVWF  xCD
019A8:  MOVFF  FF2,DCE
019AC:  BCF    FF2.7
019AE:  CLRF   FAA
019B0:  MOVFF  DCD,FA9
019B4:  BCF    FA6.6
019B6:  BCF    FA6.7
019B8:  BSF    FA6.0
019BA:  MOVF   FA8,W
019BC:  BTFSC  xCE.7
019BE:  BSF    FF2.7
019C0:  MOVWF  xC4
....................       if((phonenum == 0x0D) || (a > 15))
019C2:  MOVF   xC4,W
019C4:  SUBLW  0D
019C6:  BZ    19CE
019C8:  MOVF   xC3,W
019CA:  SUBLW  0F
019CC:  BC    1A16
....................       {
....................          sms_phonenumber[a] =  '\0';
019CE:  CLRF   03
019D0:  MOVF   xC3,W
019D2:  ADDLW  81
019D4:  MOVWF  FE9
019D6:  MOVLW  0A
019D8:  ADDWFC 03,W
019DA:  MOVWF  FEA
019DC:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
019DE:  MOVLW  32
019E0:  ADDWF  xC3,W
019E2:  MOVWF  xCD
019E4:  MOVF   FF2,W
019E6:  MOVWF  00
019E8:  BCF    FF2.7
019EA:  CLRF   FAA
019EC:  MOVFF  DCD,FA9
019F0:  MOVFF  DC4,FA8
019F4:  BCF    FA6.6
019F6:  BCF    FA6.7
019F8:  BSF    FA6.2
019FA:  MOVLB  F
019FC:  MOVLW  55
019FE:  MOVWF  FA7
01A00:  MOVLW  AA
01A02:  MOVWF  FA7
01A04:  BSF    FA6.1
01A06:  BTFSC  FA6.1
01A08:  BRA    1A06
01A0A:  BCF    FA6.2
01A0C:  MOVF   00,W
01A0E:  IORWF  FF2,F
....................          break;
01A10:  BRA    1A32
....................       }
01A12:  BRA    1A2A
01A14:  MOVLB  D
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
01A16:  CLRF   03
01A18:  MOVF   xC3,W
01A1A:  ADDLW  81
01A1C:  MOVWF  FE9
01A1E:  MOVLW  0A
01A20:  ADDWFC 03,W
01A22:  MOVWF  FEA
01A24:  MOVFF  DC4,FEF
01A28:  MOVLB  F
....................       }
01A2A:  MOVLB  D
01A2C:  INCF   xC3,F
01A2E:  BRA    19A0
01A30:  MOVLB  F
....................    }
....................    
....................       
....................    int16  i =3,j=0,k=0 , buff;
01A32:  MOVLB  D
01A34:  CLRF   xC6
01A36:  MOVLW  03
01A38:  MOVWF  xC5
01A3A:  CLRF   xC8
01A3C:  CLRF   xC7
01A3E:  CLRF   xCA
01A40:  CLRF   xC9
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01A42:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01A44:  MOVLW  5D
01A46:  ADDWF  xC5,W
01A48:  MOVWF  xCD
01A4A:  MOVLW  00
01A4C:  ADDWFC xC6,W
01A4E:  MOVWF  xCE
01A50:  MOVFF  FF2,DCF
01A54:  BCF    FF2.7
01A56:  MOVFF  DCE,FAA
01A5A:  MOVFF  DCD,FA9
01A5E:  BCF    FA6.6
01A60:  BCF    FA6.7
01A62:  BSF    FA6.0
01A64:  MOVF   FA8,W
01A66:  BTFSC  xCF.7
01A68:  BSF    FF2.7
01A6A:  CLRF   xCC
01A6C:  MOVWF  xCB
....................       
....................       if((buff == 0x0D)|| (j>30))
01A6E:  MOVF   xCB,W
01A70:  SUBLW  0D
01A72:  BNZ   1A78
01A74:  MOVF   xCC,F
01A76:  BZ    1A82
01A78:  MOVF   xC8,F
01A7A:  BNZ   1A82
01A7C:  MOVF   xC7,W
01A7E:  SUBLW  1E
01A80:  BC    1A94
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
01A82:  MOVLW  90
01A84:  ADDWF  xC7,W
01A86:  MOVWF  FE9
01A88:  MOVLW  0A
01A8A:  ADDWFC xC8,W
01A8C:  MOVWF  FEA
01A8E:  CLRF   FEF
....................          break;
01A90:  BRA    1AB8
....................       }
01A92:  BRA    1AA4
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
01A94:  MOVLW  90
01A96:  ADDWF  xC7,W
01A98:  MOVWF  FE9
01A9A:  MOVLW  0A
01A9C:  ADDWFC xC8,W
01A9E:  MOVWF  FEA
01AA0:  MOVFF  DCB,FEF
....................       }
01AA4:  MOVFF  DC6,03
01AA8:  MOVF   xC5,W
01AAA:  INCF   xC5,F
01AAC:  BTFSC  FD8.2
01AAE:  INCF   xC6,F
01AB0:  INCF   xC7,F
01AB2:  BTFSC  FD8.2
01AB4:  INCF   xC8,F
01AB6:  BRA    1A42
....................    }
....................    
....................    i++;
01AB8:  INCF   xC5,F
01ABA:  BTFSC  FD8.2
01ABC:  INCF   xC6,F
....................    j=0;
01ABE:  CLRF   xC8
01AC0:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01AC2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01AC4:  MOVLW  5D
01AC6:  ADDWF  xC5,W
01AC8:  MOVWF  xCD
01ACA:  MOVLW  00
01ACC:  ADDWFC xC6,W
01ACE:  MOVWF  xCE
01AD0:  MOVFF  FF2,DCF
01AD4:  BCF    FF2.7
01AD6:  MOVFF  DCE,FAA
01ADA:  MOVFF  DCD,FA9
01ADE:  BCF    FA6.6
01AE0:  BCF    FA6.7
01AE2:  BSF    FA6.0
01AE4:  MOVF   FA8,W
01AE6:  BTFSC  xCF.7
01AE8:  BSF    FF2.7
01AEA:  CLRF   xCC
01AEC:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01AEE:  MOVF   xCB,W
01AF0:  SUBLW  0D
01AF2:  BNZ   1AF8
01AF4:  MOVF   xCC,F
01AF6:  BZ    1B02
01AF8:  MOVF   xC8,F
01AFA:  BNZ   1B02
01AFC:  MOVF   xC7,W
01AFE:  SUBLW  1E
01B00:  BC    1B14
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
01B02:  MOVLW  B0
01B04:  ADDWF  xC7,W
01B06:  MOVWF  FE9
01B08:  MOVLW  0A
01B0A:  ADDWFC xC8,W
01B0C:  MOVWF  FEA
01B0E:  CLRF   FEF
....................          break;
01B10:  BRA    1B38
....................       }
01B12:  BRA    1B24
....................       else
....................       {
....................          SMS_Massage2[j] = buff;         
01B14:  MOVLW  B0
01B16:  ADDWF  xC7,W
01B18:  MOVWF  FE9
01B1A:  MOVLW  0A
01B1C:  ADDWFC xC8,W
01B1E:  MOVWF  FEA
01B20:  MOVFF  DCB,FEF
....................       }
01B24:  MOVFF  DC6,03
01B28:  MOVF   xC5,W
01B2A:  INCF   xC5,F
01B2C:  BTFSC  FD8.2
01B2E:  INCF   xC6,F
01B30:  INCF   xC7,F
01B32:  BTFSC  FD8.2
01B34:  INCF   xC8,F
01B36:  BRA    1AC2
....................    }
....................    
....................    i++;
01B38:  INCF   xC5,F
01B3A:  BTFSC  FD8.2
01B3C:  INCF   xC6,F
....................    j=0;
01B3E:  CLRF   xC8
01B40:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01B42:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01B44:  MOVLW  5D
01B46:  ADDWF  xC5,W
01B48:  MOVWF  xCD
01B4A:  MOVLW  00
01B4C:  ADDWFC xC6,W
01B4E:  MOVWF  xCE
01B50:  MOVFF  FF2,DCF
01B54:  BCF    FF2.7
01B56:  MOVFF  DCE,FAA
01B5A:  MOVFF  DCD,FA9
01B5E:  BCF    FA6.6
01B60:  BCF    FA6.7
01B62:  BSF    FA6.0
01B64:  MOVF   FA8,W
01B66:  BTFSC  xCF.7
01B68:  BSF    FF2.7
01B6A:  CLRF   xCC
01B6C:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01B6E:  MOVF   xCB,W
01B70:  SUBLW  0D
01B72:  BNZ   1B78
01B74:  MOVF   xCC,F
01B76:  BZ    1B82
01B78:  MOVF   xC8,F
01B7A:  BNZ   1B82
01B7C:  MOVF   xC7,W
01B7E:  SUBLW  1E
01B80:  BC    1B94
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
01B82:  MOVLW  D0
01B84:  ADDWF  xC7,W
01B86:  MOVWF  FE9
01B88:  MOVLW  0A
01B8A:  ADDWFC xC8,W
01B8C:  MOVWF  FEA
01B8E:  CLRF   FEF
....................          break;
01B90:  BRA    1BB8
....................       }
01B92:  BRA    1BA4
....................       else
....................       {
....................          SMS_Massage3[j] = buff;         
01B94:  MOVLW  D0
01B96:  ADDWF  xC7,W
01B98:  MOVWF  FE9
01B9A:  MOVLW  0A
01B9C:  ADDWFC xC8,W
01B9E:  MOVWF  FEA
01BA0:  MOVFF  DCB,FEF
....................       }
01BA4:  MOVFF  DC6,03
01BA8:  MOVF   xC5,W
01BAA:  INCF   xC5,F
01BAC:  BTFSC  FD8.2
01BAE:  INCF   xC6,F
01BB0:  INCF   xC7,F
01BB2:  BTFSC  FD8.2
01BB4:  INCF   xC8,F
01BB6:  BRA    1B42
....................    }
....................    
....................    i++;
01BB8:  INCF   xC5,F
01BBA:  BTFSC  FD8.2
01BBC:  INCF   xC6,F
....................    j=0;
01BBE:  CLRF   xC8
01BC0:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01BC2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01BC4:  MOVLW  5D
01BC6:  ADDWF  xC5,W
01BC8:  MOVWF  xCD
01BCA:  MOVLW  00
01BCC:  ADDWFC xC6,W
01BCE:  MOVWF  xCE
01BD0:  MOVFF  FF2,DCF
01BD4:  BCF    FF2.7
01BD6:  MOVFF  DCE,FAA
01BDA:  MOVFF  DCD,FA9
01BDE:  BCF    FA6.6
01BE0:  BCF    FA6.7
01BE2:  BSF    FA6.0
01BE4:  MOVF   FA8,W
01BE6:  BTFSC  xCF.7
01BE8:  BSF    FF2.7
01BEA:  CLRF   xCC
01BEC:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01BEE:  MOVF   xCB,W
01BF0:  SUBLW  0D
01BF2:  BNZ   1BF8
01BF4:  MOVF   xCC,F
01BF6:  BZ    1C02
01BF8:  MOVF   xC8,F
01BFA:  BNZ   1C02
01BFC:  MOVF   xC7,W
01BFE:  SUBLW  1E
01C00:  BC    1C14
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
01C02:  MOVLW  F0
01C04:  ADDWF  xC7,W
01C06:  MOVWF  FE9
01C08:  MOVLW  0A
01C0A:  ADDWFC xC8,W
01C0C:  MOVWF  FEA
01C0E:  CLRF   FEF
....................          break;
01C10:  BRA    1C38
....................       }
01C12:  BRA    1C24
....................       else
....................       {
....................          SMS_Massage4[j] = buff;         
01C14:  MOVLW  F0
01C16:  ADDWF  xC7,W
01C18:  MOVWF  FE9
01C1A:  MOVLW  0A
01C1C:  ADDWFC xC8,W
01C1E:  MOVWF  FEA
01C20:  MOVFF  DCB,FEF
....................       }
01C24:  MOVFF  DC6,03
01C28:  MOVF   xC5,W
01C2A:  INCF   xC5,F
01C2C:  BTFSC  FD8.2
01C2E:  INCF   xC6,F
01C30:  INCF   xC7,F
01C32:  BTFSC  FD8.2
01C34:  INCF   xC8,F
01C36:  BRA    1BC2
....................    }
....................    
....................    i++;
01C38:  INCF   xC5,F
01C3A:  BTFSC  FD8.2
01C3C:  INCF   xC6,F
....................    j=0;
01C3E:  CLRF   xC8
01C40:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01C42:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01C44:  MOVLW  5D
01C46:  ADDWF  xC5,W
01C48:  MOVWF  xCD
01C4A:  MOVLW  00
01C4C:  ADDWFC xC6,W
01C4E:  MOVWF  xCE
01C50:  MOVFF  FF2,DCF
01C54:  BCF    FF2.7
01C56:  MOVFF  DCE,FAA
01C5A:  MOVFF  DCD,FA9
01C5E:  BCF    FA6.6
01C60:  BCF    FA6.7
01C62:  BSF    FA6.0
01C64:  MOVF   FA8,W
01C66:  BTFSC  xCF.7
01C68:  BSF    FF2.7
01C6A:  CLRF   xCC
01C6C:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01C6E:  MOVF   xCB,W
01C70:  SUBLW  0D
01C72:  BNZ   1C78
01C74:  MOVF   xCC,F
01C76:  BZ    1C82
01C78:  MOVF   xC8,F
01C7A:  BNZ   1C82
01C7C:  MOVF   xC7,W
01C7E:  SUBLW  1E
01C80:  BC    1C94
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
01C82:  MOVLW  10
01C84:  ADDWF  xC7,W
01C86:  MOVWF  FE9
01C88:  MOVLW  0B
01C8A:  ADDWFC xC8,W
01C8C:  MOVWF  FEA
01C8E:  CLRF   FEF
....................          break;
01C90:  BRA    1CB8
....................       }
01C92:  BRA    1CA4
....................       else
....................       {
....................          SMS_Massage5[j] = buff;         
01C94:  MOVLW  10
01C96:  ADDWF  xC7,W
01C98:  MOVWF  FE9
01C9A:  MOVLW  0B
01C9C:  ADDWFC xC8,W
01C9E:  MOVWF  FEA
01CA0:  MOVFF  DCB,FEF
....................       }
01CA4:  MOVFF  DC6,03
01CA8:  MOVF   xC5,W
01CAA:  INCF   xC5,F
01CAC:  BTFSC  FD8.2
01CAE:  INCF   xC6,F
01CB0:  INCF   xC7,F
01CB2:  BTFSC  FD8.2
01CB4:  INCF   xC8,F
01CB6:  BRA    1C42
....................    }
....................    
....................    i++;
01CB8:  INCF   xC5,F
01CBA:  BTFSC  FD8.2
01CBC:  INCF   xC6,F
....................    j=0;
01CBE:  CLRF   xC8
01CC0:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01CC2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01CC4:  MOVLW  5D
01CC6:  ADDWF  xC5,W
01CC8:  MOVWF  xCD
01CCA:  MOVLW  00
01CCC:  ADDWFC xC6,W
01CCE:  MOVWF  xCE
01CD0:  MOVFF  FF2,DCF
01CD4:  BCF    FF2.7
01CD6:  MOVFF  DCE,FAA
01CDA:  MOVFF  DCD,FA9
01CDE:  BCF    FA6.6
01CE0:  BCF    FA6.7
01CE2:  BSF    FA6.0
01CE4:  MOVF   FA8,W
01CE6:  BTFSC  xCF.7
01CE8:  BSF    FF2.7
01CEA:  CLRF   xCC
01CEC:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01CEE:  MOVF   xCB,W
01CF0:  SUBLW  0D
01CF2:  BNZ   1CF8
01CF4:  MOVF   xCC,F
01CF6:  BZ    1D02
01CF8:  MOVF   xC8,F
01CFA:  BNZ   1D02
01CFC:  MOVF   xC7,W
01CFE:  SUBLW  1E
01D00:  BC    1D14
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
01D02:  MOVLW  30
01D04:  ADDWF  xC7,W
01D06:  MOVWF  FE9
01D08:  MOVLW  0B
01D0A:  ADDWFC xC8,W
01D0C:  MOVWF  FEA
01D0E:  CLRF   FEF
....................          break;
01D10:  BRA    1D38
....................       }
01D12:  BRA    1D24
....................       else
....................       {
....................          SMS_Massage6[j] = buff;         
01D14:  MOVLW  30
01D16:  ADDWF  xC7,W
01D18:  MOVWF  FE9
01D1A:  MOVLW  0B
01D1C:  ADDWFC xC8,W
01D1E:  MOVWF  FEA
01D20:  MOVFF  DCB,FEF
....................       }
01D24:  MOVFF  DC6,03
01D28:  MOVF   xC5,W
01D2A:  INCF   xC5,F
01D2C:  BTFSC  FD8.2
01D2E:  INCF   xC6,F
01D30:  INCF   xC7,F
01D32:  BTFSC  FD8.2
01D34:  INCF   xC8,F
01D36:  BRA    1CC2
....................    }
....................    
....................    i++;
01D38:  INCF   xC5,F
01D3A:  BTFSC  FD8.2
01D3C:  INCF   xC6,F
....................    j=0;
01D3E:  CLRF   xC8
01D40:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01D42:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01D44:  MOVLW  5D
01D46:  ADDWF  xC5,W
01D48:  MOVWF  xCD
01D4A:  MOVLW  00
01D4C:  ADDWFC xC6,W
01D4E:  MOVWF  xCE
01D50:  MOVFF  FF2,DCF
01D54:  BCF    FF2.7
01D56:  MOVFF  DCE,FAA
01D5A:  MOVFF  DCD,FA9
01D5E:  BCF    FA6.6
01D60:  BCF    FA6.7
01D62:  BSF    FA6.0
01D64:  MOVF   FA8,W
01D66:  BTFSC  xCF.7
01D68:  BSF    FF2.7
01D6A:  CLRF   xCC
01D6C:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01D6E:  MOVF   xCB,W
01D70:  SUBLW  0D
01D72:  BNZ   1D78
01D74:  MOVF   xCC,F
01D76:  BZ    1D82
01D78:  MOVF   xC8,F
01D7A:  BNZ   1D82
01D7C:  MOVF   xC7,W
01D7E:  SUBLW  1E
01D80:  BC    1D94
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
01D82:  MOVLW  50
01D84:  ADDWF  xC7,W
01D86:  MOVWF  FE9
01D88:  MOVLW  0B
01D8A:  ADDWFC xC8,W
01D8C:  MOVWF  FEA
01D8E:  CLRF   FEF
....................          break;
01D90:  BRA    1DB8
....................       }
01D92:  BRA    1DA4
....................       else
....................       {
....................          SMS_Massage7[j] = buff;         
01D94:  MOVLW  50
01D96:  ADDWF  xC7,W
01D98:  MOVWF  FE9
01D9A:  MOVLW  0B
01D9C:  ADDWFC xC8,W
01D9E:  MOVWF  FEA
01DA0:  MOVFF  DCB,FEF
....................       }
01DA4:  MOVFF  DC6,03
01DA8:  MOVF   xC5,W
01DAA:  INCF   xC5,F
01DAC:  BTFSC  FD8.2
01DAE:  INCF   xC6,F
01DB0:  INCF   xC7,F
01DB2:  BTFSC  FD8.2
01DB4:  INCF   xC8,F
01DB6:  BRA    1D42
....................    }
....................    
....................    i++;
01DB8:  INCF   xC5,F
01DBA:  BTFSC  FD8.2
01DBC:  INCF   xC6,F
....................    j=0;
01DBE:  CLRF   xC8
01DC0:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01DC2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01DC4:  MOVLW  5D
01DC6:  ADDWF  xC5,W
01DC8:  MOVWF  xCD
01DCA:  MOVLW  00
01DCC:  ADDWFC xC6,W
01DCE:  MOVWF  xCE
01DD0:  MOVFF  FF2,DCF
01DD4:  BCF    FF2.7
01DD6:  MOVFF  DCE,FAA
01DDA:  MOVFF  DCD,FA9
01DDE:  BCF    FA6.6
01DE0:  BCF    FA6.7
01DE2:  BSF    FA6.0
01DE4:  MOVF   FA8,W
01DE6:  BTFSC  xCF.7
01DE8:  BSF    FF2.7
01DEA:  CLRF   xCC
01DEC:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01DEE:  MOVF   xCB,W
01DF0:  SUBLW  0D
01DF2:  BNZ   1DF8
01DF4:  MOVF   xCC,F
01DF6:  BZ    1E02
01DF8:  MOVF   xC8,F
01DFA:  BNZ   1E02
01DFC:  MOVF   xC7,W
01DFE:  SUBLW  1E
01E00:  BC    1E14
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01E02:  MOVLW  70
01E04:  ADDWF  xC7,W
01E06:  MOVWF  FE9
01E08:  MOVLW  0B
01E0A:  ADDWFC xC8,W
01E0C:  MOVWF  FEA
01E0E:  CLRF   FEF
....................          break;
01E10:  BRA    1E38
....................       }
01E12:  BRA    1E24
....................       else
....................       {
....................          SMS_Massage8[j] = buff;        
01E14:  MOVLW  70
01E16:  ADDWF  xC7,W
01E18:  MOVWF  FE9
01E1A:  MOVLW  0B
01E1C:  ADDWFC xC8,W
01E1E:  MOVWF  FEA
01E20:  MOVFF  DCB,FEF
....................       }
01E24:  MOVFF  DC6,03
01E28:  MOVF   xC5,W
01E2A:  INCF   xC5,F
01E2C:  BTFSC  FD8.2
01E2E:  INCF   xC6,F
01E30:  INCF   xC7,F
01E32:  BTFSC  FD8.2
01E34:  INCF   xC8,F
01E36:  BRA    1DC2
....................    }
....................    
....................    i++;
01E38:  INCF   xC5,F
01E3A:  BTFSC  FD8.2
01E3C:  INCF   xC6,F
....................    j=0;
01E3E:  CLRF   xC8
01E40:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01E42:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01E44:  MOVLW  5D
01E46:  ADDWF  xC5,W
01E48:  MOVWF  xCD
01E4A:  MOVLW  00
01E4C:  ADDWFC xC6,W
01E4E:  MOVWF  xCE
01E50:  MOVFF  FF2,DCF
01E54:  BCF    FF2.7
01E56:  MOVFF  DCE,FAA
01E5A:  MOVFF  DCD,FA9
01E5E:  BCF    FA6.6
01E60:  BCF    FA6.7
01E62:  BSF    FA6.0
01E64:  MOVF   FA8,W
01E66:  BTFSC  xCF.7
01E68:  BSF    FF2.7
01E6A:  CLRF   xCC
01E6C:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01E6E:  MOVF   xCB,W
01E70:  SUBLW  0D
01E72:  BNZ   1E78
01E74:  MOVF   xCC,F
01E76:  BZ    1E82
01E78:  MOVF   xC8,F
01E7A:  BNZ   1E82
01E7C:  MOVF   xC7,W
01E7E:  SUBLW  1E
01E80:  BC    1E94
....................       {
....................          SMS_Massage9[j] = '\0' ; // end string
01E82:  MOVLW  90
01E84:  ADDWF  xC7,W
01E86:  MOVWF  FE9
01E88:  MOVLW  0B
01E8A:  ADDWFC xC8,W
01E8C:  MOVWF  FEA
01E8E:  CLRF   FEF
....................          break;
01E90:  BRA    1EB8
....................       }
01E92:  BRA    1EA4
....................       else
....................       {
....................          SMS_Massage9[j] = buff;         
01E94:  MOVLW  90
01E96:  ADDWF  xC7,W
01E98:  MOVWF  FE9
01E9A:  MOVLW  0B
01E9C:  ADDWFC xC8,W
01E9E:  MOVWF  FEA
01EA0:  MOVFF  DCB,FEF
....................       }
01EA4:  MOVFF  DC6,03
01EA8:  MOVF   xC5,W
01EAA:  INCF   xC5,F
01EAC:  BTFSC  FD8.2
01EAE:  INCF   xC6,F
01EB0:  INCF   xC7,F
01EB2:  BTFSC  FD8.2
01EB4:  INCF   xC8,F
01EB6:  BRA    1E42
....................    }
....................    
....................    i++;
01EB8:  INCF   xC5,F
01EBA:  BTFSC  FD8.2
01EBC:  INCF   xC6,F
....................    j=0;
01EBE:  CLRF   xC8
01EC0:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01EC2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01EC4:  MOVLW  5D
01EC6:  ADDWF  xC5,W
01EC8:  MOVWF  xCD
01ECA:  MOVLW  00
01ECC:  ADDWFC xC6,W
01ECE:  MOVWF  xCE
01ED0:  MOVFF  FF2,DCF
01ED4:  BCF    FF2.7
01ED6:  MOVFF  DCE,FAA
01EDA:  MOVFF  DCD,FA9
01EDE:  BCF    FA6.6
01EE0:  BCF    FA6.7
01EE2:  BSF    FA6.0
01EE4:  MOVF   FA8,W
01EE6:  BTFSC  xCF.7
01EE8:  BSF    FF2.7
01EEA:  CLRF   xCC
01EEC:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01EEE:  MOVF   xCB,W
01EF0:  SUBLW  0D
01EF2:  BNZ   1EF8
01EF4:  MOVF   xCC,F
01EF6:  BZ    1F02
01EF8:  MOVF   xC8,F
01EFA:  BNZ   1F02
01EFC:  MOVF   xC7,W
01EFE:  SUBLW  1E
01F00:  BC    1F14
....................       {
....................          SMS_Massage10[j] = '\0' ; // end string
01F02:  MOVLW  B0
01F04:  ADDWF  xC7,W
01F06:  MOVWF  FE9
01F08:  MOVLW  0B
01F0A:  ADDWFC xC8,W
01F0C:  MOVWF  FEA
01F0E:  CLRF   FEF
....................          break;
01F10:  BRA    1F38
....................       }
01F12:  BRA    1F24
....................       else
....................       {
....................          SMS_Massage10[j] = buff;        
01F14:  MOVLW  B0
01F16:  ADDWF  xC7,W
01F18:  MOVWF  FE9
01F1A:  MOVLW  0B
01F1C:  ADDWFC xC8,W
01F1E:  MOVWF  FEA
01F20:  MOVFF  DCB,FEF
....................       }
01F24:  MOVFF  DC6,03
01F28:  MOVF   xC5,W
01F2A:  INCF   xC5,F
01F2C:  BTFSC  FD8.2
01F2E:  INCF   xC6,F
01F30:  INCF   xC7,F
01F32:  BTFSC  FD8.2
01F34:  INCF   xC8,F
01F36:  BRA    1EC2
....................    }
....................       
....................    i++;
01F38:  INCF   xC5,F
01F3A:  BTFSC  FD8.2
01F3C:  INCF   xC6,F
....................    j=0;
01F3E:  CLRF   xC8
01F40:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01F42:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01F44:  MOVLW  5D
01F46:  ADDWF  xC5,W
01F48:  MOVWF  xCD
01F4A:  MOVLW  00
01F4C:  ADDWFC xC6,W
01F4E:  MOVWF  xCE
01F50:  MOVFF  FF2,DCF
01F54:  BCF    FF2.7
01F56:  MOVFF  DCE,FAA
01F5A:  MOVFF  DCD,FA9
01F5E:  BCF    FA6.6
01F60:  BCF    FA6.7
01F62:  BSF    FA6.0
01F64:  MOVF   FA8,W
01F66:  BTFSC  xCF.7
01F68:  BSF    FF2.7
01F6A:  CLRF   xCC
01F6C:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01F6E:  MOVF   xCB,W
01F70:  SUBLW  0D
01F72:  BNZ   1F78
01F74:  MOVF   xCC,F
01F76:  BZ    1F82
01F78:  MOVF   xC8,F
01F7A:  BNZ   1F82
01F7C:  MOVF   xC7,W
01F7E:  SUBLW  1E
01F80:  BC    1F94
....................       {
....................          SMS_Massage11[j] = '\0' ; // end string
01F82:  MOVLW  D0
01F84:  ADDWF  xC7,W
01F86:  MOVWF  FE9
01F88:  MOVLW  0B
01F8A:  ADDWFC xC8,W
01F8C:  MOVWF  FEA
01F8E:  CLRF   FEF
....................          break;
01F90:  BRA    1FB8
....................       }
01F92:  BRA    1FA4
....................       else
....................       {
....................          SMS_Massage11[j] = buff;        
01F94:  MOVLW  D0
01F96:  ADDWF  xC7,W
01F98:  MOVWF  FE9
01F9A:  MOVLW  0B
01F9C:  ADDWFC xC8,W
01F9E:  MOVWF  FEA
01FA0:  MOVFF  DCB,FEF
....................       }
01FA4:  MOVFF  DC6,03
01FA8:  MOVF   xC5,W
01FAA:  INCF   xC5,F
01FAC:  BTFSC  FD8.2
01FAE:  INCF   xC6,F
01FB0:  INCF   xC7,F
01FB2:  BTFSC  FD8.2
01FB4:  INCF   xC8,F
01FB6:  BRA    1F42
....................    }
....................       
....................    i++;
01FB8:  INCF   xC5,F
01FBA:  BTFSC  FD8.2
01FBC:  INCF   xC6,F
....................    j=0;
01FBE:  CLRF   xC8
01FC0:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01FC2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01FC4:  MOVLW  5D
01FC6:  ADDWF  xC5,W
01FC8:  MOVWF  xCD
01FCA:  MOVLW  00
01FCC:  ADDWFC xC6,W
01FCE:  MOVWF  xCE
01FD0:  MOVFF  FF2,DCF
01FD4:  BCF    FF2.7
01FD6:  MOVFF  DCE,FAA
01FDA:  MOVFF  DCD,FA9
01FDE:  BCF    FA6.6
01FE0:  BCF    FA6.7
01FE2:  BSF    FA6.0
01FE4:  MOVF   FA8,W
01FE6:  BTFSC  xCF.7
01FE8:  BSF    FF2.7
01FEA:  CLRF   xCC
01FEC:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
01FEE:  MOVF   xCB,W
01FF0:  SUBLW  0D
01FF2:  BNZ   1FF8
01FF4:  MOVF   xCC,F
01FF6:  BZ    2002
01FF8:  MOVF   xC8,F
01FFA:  BNZ   2002
01FFC:  MOVF   xC7,W
01FFE:  SUBLW  1E
02000:  BC    2014
....................       {
....................          SMS_Massage12[j] = '\0' ; // end string
02002:  MOVLW  F0
02004:  ADDWF  xC7,W
02006:  MOVWF  FE9
02008:  MOVLW  0B
0200A:  ADDWFC xC8,W
0200C:  MOVWF  FEA
0200E:  CLRF   FEF
....................          break;
02010:  BRA    2038
....................       }
02012:  BRA    2024
....................       else
....................       {
....................          SMS_Massage12[j] = buff;         
02014:  MOVLW  F0
02016:  ADDWF  xC7,W
02018:  MOVWF  FE9
0201A:  MOVLW  0B
0201C:  ADDWFC xC8,W
0201E:  MOVWF  FEA
02020:  MOVFF  DCB,FEF
....................       }
02024:  MOVFF  DC6,03
02028:  MOVF   xC5,W
0202A:  INCF   xC5,F
0202C:  BTFSC  FD8.2
0202E:  INCF   xC6,F
02030:  INCF   xC7,F
02032:  BTFSC  FD8.2
02034:  INCF   xC8,F
02036:  BRA    1FC2
....................    }
....................       
....................    i++;
02038:  INCF   xC5,F
0203A:  BTFSC  FD8.2
0203C:  INCF   xC6,F
....................    j=0;
0203E:  CLRF   xC8
02040:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02042:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02044:  MOVLW  5D
02046:  ADDWF  xC5,W
02048:  MOVWF  xCD
0204A:  MOVLW  00
0204C:  ADDWFC xC6,W
0204E:  MOVWF  xCE
02050:  MOVFF  FF2,DCF
02054:  BCF    FF2.7
02056:  MOVFF  DCE,FAA
0205A:  MOVFF  DCD,FA9
0205E:  BCF    FA6.6
02060:  BCF    FA6.7
02062:  BSF    FA6.0
02064:  MOVF   FA8,W
02066:  BTFSC  xCF.7
02068:  BSF    FF2.7
0206A:  CLRF   xCC
0206C:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
0206E:  MOVF   xCB,W
02070:  SUBLW  0D
02072:  BNZ   2078
02074:  MOVF   xCC,F
02076:  BZ    2082
02078:  MOVF   xC8,F
0207A:  BNZ   2082
0207C:  MOVF   xC7,W
0207E:  SUBLW  1E
02080:  BC    2094
....................       {
....................          SMS_Massage13[j] = '\0' ; // end string
02082:  MOVLW  10
02084:  ADDWF  xC7,W
02086:  MOVWF  FE9
02088:  MOVLW  0C
0208A:  ADDWFC xC8,W
0208C:  MOVWF  FEA
0208E:  CLRF   FEF
....................          break;
02090:  BRA    20B8
....................       }
02092:  BRA    20A4
....................       else
....................       {
....................          SMS_Massage13[j] = buff;       
02094:  MOVLW  10
02096:  ADDWF  xC7,W
02098:  MOVWF  FE9
0209A:  MOVLW  0C
0209C:  ADDWFC xC8,W
0209E:  MOVWF  FEA
020A0:  MOVFF  DCB,FEF
....................       }
020A4:  MOVFF  DC6,03
020A8:  MOVF   xC5,W
020AA:  INCF   xC5,F
020AC:  BTFSC  FD8.2
020AE:  INCF   xC6,F
020B0:  INCF   xC7,F
020B2:  BTFSC  FD8.2
020B4:  INCF   xC8,F
020B6:  BRA    2042
....................    }
....................       
....................    i++;
020B8:  INCF   xC5,F
020BA:  BTFSC  FD8.2
020BC:  INCF   xC6,F
....................    j=0;
020BE:  CLRF   xC8
020C0:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
020C2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
020C4:  MOVLW  5D
020C6:  ADDWF  xC5,W
020C8:  MOVWF  xCD
020CA:  MOVLW  00
020CC:  ADDWFC xC6,W
020CE:  MOVWF  xCE
020D0:  MOVFF  FF2,DCF
020D4:  BCF    FF2.7
020D6:  MOVFF  DCE,FAA
020DA:  MOVFF  DCD,FA9
020DE:  BCF    FA6.6
020E0:  BCF    FA6.7
020E2:  BSF    FA6.0
020E4:  MOVF   FA8,W
020E6:  BTFSC  xCF.7
020E8:  BSF    FF2.7
020EA:  CLRF   xCC
020EC:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
020EE:  MOVF   xCB,W
020F0:  SUBLW  0D
020F2:  BNZ   20F8
020F4:  MOVF   xCC,F
020F6:  BZ    2102
020F8:  MOVF   xC8,F
020FA:  BNZ   2102
020FC:  MOVF   xC7,W
020FE:  SUBLW  1E
02100:  BC    2114
....................       {
....................          SMS_Massage14[j] = '\0' ; // end string
02102:  MOVLW  30
02104:  ADDWF  xC7,W
02106:  MOVWF  FE9
02108:  MOVLW  0C
0210A:  ADDWFC xC8,W
0210C:  MOVWF  FEA
0210E:  CLRF   FEF
....................          break;
02110:  BRA    2138
....................       }
02112:  BRA    2124
....................       else
....................       {
....................          SMS_Massage14[j] = buff;        
02114:  MOVLW  30
02116:  ADDWF  xC7,W
02118:  MOVWF  FE9
0211A:  MOVLW  0C
0211C:  ADDWFC xC8,W
0211E:  MOVWF  FEA
02120:  MOVFF  DCB,FEF
....................       }
02124:  MOVFF  DC6,03
02128:  MOVF   xC5,W
0212A:  INCF   xC5,F
0212C:  BTFSC  FD8.2
0212E:  INCF   xC6,F
02130:  INCF   xC7,F
02132:  BTFSC  FD8.2
02134:  INCF   xC8,F
02136:  BRA    20C2
....................    }
....................       
....................    i++;
02138:  INCF   xC5,F
0213A:  BTFSC  FD8.2
0213C:  INCF   xC6,F
....................    j=0;
0213E:  CLRF   xC8
02140:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02142:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02144:  MOVLW  5D
02146:  ADDWF  xC5,W
02148:  MOVWF  xCD
0214A:  MOVLW  00
0214C:  ADDWFC xC6,W
0214E:  MOVWF  xCE
02150:  MOVFF  FF2,DCF
02154:  BCF    FF2.7
02156:  MOVFF  DCE,FAA
0215A:  MOVFF  DCD,FA9
0215E:  BCF    FA6.6
02160:  BCF    FA6.7
02162:  BSF    FA6.0
02164:  MOVF   FA8,W
02166:  BTFSC  xCF.7
02168:  BSF    FF2.7
0216A:  CLRF   xCC
0216C:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
0216E:  MOVF   xCB,W
02170:  SUBLW  0D
02172:  BNZ   2178
02174:  MOVF   xCC,F
02176:  BZ    2182
02178:  MOVF   xC8,F
0217A:  BNZ   2182
0217C:  MOVF   xC7,W
0217E:  SUBLW  1E
02180:  BC    2194
....................       {
....................          SMS_Massage15[j] = '\0' ; // end string
02182:  MOVLW  50
02184:  ADDWF  xC7,W
02186:  MOVWF  FE9
02188:  MOVLW  0C
0218A:  ADDWFC xC8,W
0218C:  MOVWF  FEA
0218E:  CLRF   FEF
....................          break;
02190:  BRA    21B8
....................       }
02192:  BRA    21A4
....................       else
....................       {
....................          SMS_Massage15[j] = buff;         
02194:  MOVLW  50
02196:  ADDWF  xC7,W
02198:  MOVWF  FE9
0219A:  MOVLW  0C
0219C:  ADDWFC xC8,W
0219E:  MOVWF  FEA
021A0:  MOVFF  DCB,FEF
....................       }
021A4:  MOVFF  DC6,03
021A8:  MOVF   xC5,W
021AA:  INCF   xC5,F
021AC:  BTFSC  FD8.2
021AE:  INCF   xC6,F
021B0:  INCF   xC7,F
021B2:  BTFSC  FD8.2
021B4:  INCF   xC8,F
021B6:  BRA    2142
....................    }
....................       
....................    i++;
021B8:  INCF   xC5,F
021BA:  BTFSC  FD8.2
021BC:  INCF   xC6,F
....................    j=0;
021BE:  CLRF   xC8
021C0:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
021C2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
021C4:  MOVLW  5D
021C6:  ADDWF  xC5,W
021C8:  MOVWF  xCD
021CA:  MOVLW  00
021CC:  ADDWFC xC6,W
021CE:  MOVWF  xCE
021D0:  MOVFF  FF2,DCF
021D4:  BCF    FF2.7
021D6:  MOVFF  DCE,FAA
021DA:  MOVFF  DCD,FA9
021DE:  BCF    FA6.6
021E0:  BCF    FA6.7
021E2:  BSF    FA6.0
021E4:  MOVF   FA8,W
021E6:  BTFSC  xCF.7
021E8:  BSF    FF2.7
021EA:  CLRF   xCC
021EC:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
021EE:  MOVF   xCB,W
021F0:  SUBLW  0D
021F2:  BNZ   21F8
021F4:  MOVF   xCC,F
021F6:  BZ    2202
021F8:  MOVF   xC8,F
021FA:  BNZ   2202
021FC:  MOVF   xC7,W
021FE:  SUBLW  1E
02200:  BC    2214
....................       {
....................          SMS_Massage16[j] = '\0' ; // end string
02202:  MOVLW  70
02204:  ADDWF  xC7,W
02206:  MOVWF  FE9
02208:  MOVLW  0C
0220A:  ADDWFC xC8,W
0220C:  MOVWF  FEA
0220E:  CLRF   FEF
....................          break;
02210:  BRA    2238
....................       }
02212:  BRA    2224
....................       else
....................       {
....................          SMS_Massage16[j] = buff;         
02214:  MOVLW  70
02216:  ADDWF  xC7,W
02218:  MOVWF  FE9
0221A:  MOVLW  0C
0221C:  ADDWFC xC8,W
0221E:  MOVWF  FEA
02220:  MOVFF  DCB,FEF
....................       }
02224:  MOVFF  DC6,03
02228:  MOVF   xC5,W
0222A:  INCF   xC5,F
0222C:  BTFSC  FD8.2
0222E:  INCF   xC6,F
02230:  INCF   xC7,F
02232:  BTFSC  FD8.2
02234:  INCF   xC8,F
02236:  BRA    21C2
....................    }
....................    
....................    i++;
02238:  INCF   xC5,F
0223A:  BTFSC  FD8.2
0223C:  INCF   xC6,F
....................    j=0;
0223E:  CLRF   xC8
02240:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02242:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02244:  MOVLW  5D
02246:  ADDWF  xC5,W
02248:  MOVWF  xCD
0224A:  MOVLW  00
0224C:  ADDWFC xC6,W
0224E:  MOVWF  xCE
02250:  MOVFF  FF2,DCF
02254:  BCF    FF2.7
02256:  MOVFF  DCE,FAA
0225A:  MOVFF  DCD,FA9
0225E:  BCF    FA6.6
02260:  BCF    FA6.7
02262:  BSF    FA6.0
02264:  MOVF   FA8,W
02266:  BTFSC  xCF.7
02268:  BSF    FF2.7
0226A:  CLRF   xCC
0226C:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
0226E:  MOVF   xCB,W
02270:  SUBLW  0D
02272:  BNZ   2278
02274:  MOVF   xCC,F
02276:  BZ    2282
02278:  MOVF   xC8,F
0227A:  BNZ   2282
0227C:  MOVF   xC7,W
0227E:  SUBLW  1E
02280:  BC    2294
....................       {
....................          SMS_Massage17[j] = '\0' ; // end string
02282:  MOVLW  90
02284:  ADDWF  xC7,W
02286:  MOVWF  FE9
02288:  MOVLW  0C
0228A:  ADDWFC xC8,W
0228C:  MOVWF  FEA
0228E:  CLRF   FEF
....................          break;
02290:  BRA    22B8
....................       }
02292:  BRA    22A4
....................       else
....................       {
....................          SMS_Massage17[j] = buff;         
02294:  MOVLW  90
02296:  ADDWF  xC7,W
02298:  MOVWF  FE9
0229A:  MOVLW  0C
0229C:  ADDWFC xC8,W
0229E:  MOVWF  FEA
022A0:  MOVFF  DCB,FEF
....................       }
022A4:  MOVFF  DC6,03
022A8:  MOVF   xC5,W
022AA:  INCF   xC5,F
022AC:  BTFSC  FD8.2
022AE:  INCF   xC6,F
022B0:  INCF   xC7,F
022B2:  BTFSC  FD8.2
022B4:  INCF   xC8,F
022B6:  BRA    2242
....................    }
....................    
....................    i++;
022B8:  INCF   xC5,F
022BA:  BTFSC  FD8.2
022BC:  INCF   xC6,F
....................    j=0;
022BE:  CLRF   xC8
022C0:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
022C2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
022C4:  MOVLW  5D
022C6:  ADDWF  xC5,W
022C8:  MOVWF  xCD
022CA:  MOVLW  00
022CC:  ADDWFC xC6,W
022CE:  MOVWF  xCE
022D0:  MOVFF  FF2,DCF
022D4:  BCF    FF2.7
022D6:  MOVFF  DCE,FAA
022DA:  MOVFF  DCD,FA9
022DE:  BCF    FA6.6
022E0:  BCF    FA6.7
022E2:  BSF    FA6.0
022E4:  MOVF   FA8,W
022E6:  BTFSC  xCF.7
022E8:  BSF    FF2.7
022EA:  CLRF   xCC
022EC:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
022EE:  MOVF   xCB,W
022F0:  SUBLW  0D
022F2:  BNZ   22F8
022F4:  MOVF   xCC,F
022F6:  BZ    2302
022F8:  MOVF   xC8,F
022FA:  BNZ   2302
022FC:  MOVF   xC7,W
022FE:  SUBLW  1E
02300:  BC    2314
....................       {
....................          SMS_Massage18[j] = '\0' ; // end string
02302:  MOVLW  B0
02304:  ADDWF  xC7,W
02306:  MOVWF  FE9
02308:  MOVLW  0C
0230A:  ADDWFC xC8,W
0230C:  MOVWF  FEA
0230E:  CLRF   FEF
....................          break;
02310:  BRA    2338
....................       }
02312:  BRA    2324
....................       else
....................       {
....................          SMS_Massage18[j] = buff;         
02314:  MOVLW  B0
02316:  ADDWF  xC7,W
02318:  MOVWF  FE9
0231A:  MOVLW  0C
0231C:  ADDWFC xC8,W
0231E:  MOVWF  FEA
02320:  MOVFF  DCB,FEF
....................       }
02324:  MOVFF  DC6,03
02328:  MOVF   xC5,W
0232A:  INCF   xC5,F
0232C:  BTFSC  FD8.2
0232E:  INCF   xC6,F
02330:  INCF   xC7,F
02332:  BTFSC  FD8.2
02334:  INCF   xC8,F
02336:  BRA    22C2
....................    }
....................    
....................    i++;
02338:  INCF   xC5,F
0233A:  BTFSC  FD8.2
0233C:  INCF   xC6,F
....................    j=0;
0233E:  CLRF   xC8
02340:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02342:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02344:  MOVLW  5D
02346:  ADDWF  xC5,W
02348:  MOVWF  xCD
0234A:  MOVLW  00
0234C:  ADDWFC xC6,W
0234E:  MOVWF  xCE
02350:  MOVFF  FF2,DCF
02354:  BCF    FF2.7
02356:  MOVFF  DCE,FAA
0235A:  MOVFF  DCD,FA9
0235E:  BCF    FA6.6
02360:  BCF    FA6.7
02362:  BSF    FA6.0
02364:  MOVF   FA8,W
02366:  BTFSC  xCF.7
02368:  BSF    FF2.7
0236A:  CLRF   xCC
0236C:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
0236E:  MOVF   xCB,W
02370:  SUBLW  0D
02372:  BNZ   2378
02374:  MOVF   xCC,F
02376:  BZ    2382
02378:  MOVF   xC8,F
0237A:  BNZ   2382
0237C:  MOVF   xC7,W
0237E:  SUBLW  1E
02380:  BC    2394
....................       {
....................          SMS_Massage19[j] = '\0' ; // end string
02382:  MOVLW  D0
02384:  ADDWF  xC7,W
02386:  MOVWF  FE9
02388:  MOVLW  0C
0238A:  ADDWFC xC8,W
0238C:  MOVWF  FEA
0238E:  CLRF   FEF
....................          break;
02390:  BRA    23B8
....................       }
02392:  BRA    23A4
....................       else
....................       {
....................          SMS_Massage19[j] = buff;        
02394:  MOVLW  D0
02396:  ADDWF  xC7,W
02398:  MOVWF  FE9
0239A:  MOVLW  0C
0239C:  ADDWFC xC8,W
0239E:  MOVWF  FEA
023A0:  MOVFF  DCB,FEF
....................       }
023A4:  MOVFF  DC6,03
023A8:  MOVF   xC5,W
023AA:  INCF   xC5,F
023AC:  BTFSC  FD8.2
023AE:  INCF   xC6,F
023B0:  INCF   xC7,F
023B2:  BTFSC  FD8.2
023B4:  INCF   xC8,F
023B6:  BRA    2342
....................    }
....................    
....................    i++;
023B8:  INCF   xC5,F
023BA:  BTFSC  FD8.2
023BC:  INCF   xC6,F
....................    j=0;
023BE:  CLRF   xC8
023C0:  CLRF   xC7
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
023C2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
023C4:  MOVLW  5D
023C6:  ADDWF  xC5,W
023C8:  MOVWF  xCD
023CA:  MOVLW  00
023CC:  ADDWFC xC6,W
023CE:  MOVWF  xCE
023D0:  MOVFF  FF2,DCF
023D4:  BCF    FF2.7
023D6:  MOVFF  DCE,FAA
023DA:  MOVFF  DCD,FA9
023DE:  BCF    FA6.6
023E0:  BCF    FA6.7
023E2:  BSF    FA6.0
023E4:  MOVF   FA8,W
023E6:  BTFSC  xCF.7
023E8:  BSF    FF2.7
023EA:  CLRF   xCC
023EC:  MOVWF  xCB
....................       
....................       if((buff == 0x0D) || (j>30))
023EE:  MOVF   xCB,W
023F0:  SUBLW  0D
023F2:  BNZ   23F8
023F4:  MOVF   xCC,F
023F6:  BZ    2402
023F8:  MOVF   xC8,F
023FA:  BNZ   2402
023FC:  MOVF   xC7,W
023FE:  SUBLW  1E
02400:  BC    2414
....................       {
....................          SMS_Massage20[j] = '\0' ; // end string
02402:  MOVLW  F0
02404:  ADDWF  xC7,W
02406:  MOVWF  FE9
02408:  MOVLW  0C
0240A:  ADDWFC xC8,W
0240C:  MOVWF  FEA
0240E:  CLRF   FEF
....................          break;
02410:  BRA    2438
....................       }
02412:  BRA    2424
....................       else
....................       {
....................          SMS_Massage20[j] = buff;         
02414:  MOVLW  F0
02416:  ADDWF  xC7,W
02418:  MOVWF  FE9
0241A:  MOVLW  0C
0241C:  ADDWFC xC8,W
0241E:  MOVWF  FEA
02420:  MOVFF  DCB,FEF
....................       }
02424:  MOVFF  DC6,03
02428:  MOVF   xC5,W
0242A:  INCF   xC5,F
0242C:  BTFSC  FD8.2
0242E:  INCF   xC6,F
02430:  INCF   xC7,F
02432:  BTFSC  FD8.2
02434:  INCF   xC8,F
02436:  BRA    23C2
....................    }
02438:  MOVLB  0
0243A:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
.................... 
....................    //Data = getc();
....................    //putc(Data);
....................    SBUF = getc();
*
00582:  BTFSS  F9E.5
00584:  BRA    0582
00586:  MOVFF  FAE,2E
....................    checkCommand();
0058A:  BRA    02DA
.................... }
.................... /*
.................... #int_TIMER1
.................... void  TIMER1_isr(void) 
.................... {
....................    //ReadIn_flag =1;
.................... }
.................... */
0058C:  BCF    F9E.5
0058E:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
00592:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
00594:  MOVLB  A
00596:  MOVF   x7D,F
00598:  BZ    05A8
....................    {
....................       T_timeout--;
0059A:  DECF   x7D,F
....................       if(T_timeout == 0)
0059C:  MOVF   x7D,F
0059E:  BNZ   05A8
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout 
005A0:  MOVFF  66,6F
....................          output_bit(P485ctrl,0);
005A4:  BCF    F8A.3
005A6:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
005A8:  MOVF   1C,F
005AA:  BZ    05D6
....................    {
....................       TimeBase1s--;
005AC:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
005AE:  MOVF   1C,F
005B0:  BNZ   05D6
....................       {
....................          if(AutoAckDelayTime != 0x00)
005B2:  MOVF   1D,F
005B4:  BZ    05BE
....................          {
....................             AutoAckDelayTime--;
005B6:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
005B8:  MOVF   1D,F
005BA:  BNZ   05BE
....................             {
....................                AutoAckFlag = 1 ;
005BC:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          
....................          if(++StartReadCount >=2)
005BE:  MOVLB  0
005C0:  INCF   x65,F
005C2:  MOVF   x65,W
005C4:  SUBLW  01
005C6:  BC    05CE
....................          {
....................             StartRead = 1;
005C8:  BSF    30.5
....................             StartReadCount =2;
005CA:  MOVLW  02
005CC:  MOVWF  x65
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
005CE:  BSF    30.3
....................          TimeBase1s = 100;
005D0:  MOVLW  64
005D2:  MOVWF  1C
005D4:  MOVLB  A
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 40)    //500mS
005D6:  MOVF   19,W
005D8:  SUBLW  28
005DA:  BNZ   0604
....................    {
....................       StatusTime = 0;
005DC:  CLRF   19
....................       if(HearthbeatInd == 0)
005DE:  BTFSC  1A.0
005E0:  BRA    05EA
....................       {
....................          HearthbeatInd = 1;
005E2:  BSF    1A.0
....................          output_bit(Pled,1);
005E4:  BSF    F8A.5
005E6:  BCF    F93.5
....................       }
005E8:  BRA    05F0
....................       else
....................       {
....................          HearthbeatInd = 0;
005EA:  BCF    1A.0
....................          output_bit(Pled,0);
005EC:  BCF    F8A.5
005EE:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................       if(Test == 1)            //Test function
005F0:  BTFSS  1A.6
005F2:  BRA    0602
....................          {
....................              if(T_test > 0x00) T_test --;
005F4:  MOVF   2F,F
005F6:  BZ    05FA
005F8:  DECF   2F,F
....................              if(T_test == 0x00) Test_fault = 1;
005FA:  MOVF   2F,F
005FC:  BNZ   0600
005FE:  BSF    1A.5
....................          }
00600:  BRA    0604
....................          else
....................          {
....................              //Test = 0;
....................              T_test = 0x00;
00602:  CLRF   2F
....................          }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
00604:  MOVF   1B,F
00606:  BZ    062E
....................    {
....................       FlashingRateTime--;
00608:  DECF   1B,F
....................       if(FlashingRateTime == 0)
0060A:  MOVF   1B,F
0060C:  BNZ   0622
....................       {
....................          outmcp23 = 0xff;
0060E:  SETF   x80
....................          
....................          if(SyncStatus == 0)
00610:  BTFSC  30.1
00612:  BRA    061E
....................          {
....................             if(FlashingFlag == 1)
00614:  BTFSS  1A.1
00616:  BRA    061C
....................             {
....................                FlashingFlag = 0;
00618:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
0061A:  BRA    061E
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
0061C:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
0061E:  MOVFF  62,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
00622:  MOVF   31,F
00624:  BZ    062E
....................       {
....................          Synctimer--;
00626:  DECF   31,F
....................          if(Synctimer == 0x00)
00628:  MOVF   31,F
0062A:  BNZ   062E
....................          {
....................             SyncStatus = 0;
0062C:  BCF    30.1
....................          }
....................       }
.................... 
....................    }
....................    /*
....................    ReadIn_Count=ReadIn_Count+1;
....................    if(ReadIn_Count==10)
....................    {
....................       ReadIn_Count=0;
....................       ReadIn_flag = 1;
....................    }
....................    */
0062E:  BCF    F9E.1
00630:  MOVLB  0
00632:  GOTO   006C
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
071B2:  MOVLB  D
071B4:  BTFSS  x28.0
071B6:  BRA    72C4
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
071B8:  MOVLW  00
071BA:  BTFSC  x10.0
071BC:  MOVLW  01
071BE:  MOVWF  xCC
071C0:  MOVLW  00
071C2:  BTFSC  x18.0
071C4:  MOVLW  01
071C6:  XORWF  xCC,W
071C8:  SUBLW  01
071CA:  BNZ   71D0
071CC:  BTFSC  x1C.0
071CE:  BRA    71D4
071D0:  BTFSS  x30.0
071D2:  BRA    72BC
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
071D4:  BTFSC  x2C.0
071D6:  BRA    72BA
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
071D8:  BTFSC  x30.0
071DA:  BRA    71F4
071DC:  MOVLB  0
071DE:  MOVF   x60,W
071E0:  SUBLW  0F
071E2:  BTFSC  FD8.2
071E4:  BRA    71EA
071E6:  MOVLB  D
071E8:  BRA    71F4
....................             {
....................                TimeBase1s = 100 ;            //reload again
071EA:  MOVLW  64
071EC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
071EE:  MOVFF  61,1D
071F2:  MOVLB  D
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
071F4:  BSF    x30.0
....................             if(FlashingFlag == 0)                                                                                                                                                                                                                                                                
071F6:  BTFSC  1A.1
071F8:  BRA    71FE
....................             {
....................                Output.B1 = 0;           //Flash output1
071FA:  BCF    x14.0
....................             }
071FC:  BRA    7200
....................             else
....................             {
....................                Output.B1 = 1;
071FE:  BSF    x14.0
....................             }
.................... 
....................             if (~AutoTestFlag)
07200:  BTFSC  1A.4
07202:  BRA    7220
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
07204:  BTFSC  x24.0
07206:  BRA    7212
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07208:  BSF    F89.4
0720A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0720C:  BSF    F89.3
0720E:  BCF    F92.3
....................                }
07210:  BRA    7220
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07212:  BTFSS  x20.0
07214:  BRA    721C
07216:  BSF    F89.4
07218:  BCF    F92.4
0721A:  BRA    7220
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0721C:  BSF    F89.3
0721E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending 
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
07220:  BTFSC  x48.0
07222:  BRA    72BA
07224:  BTFSC  30.4
07226:  BRA    72BA
07228:  BTFSC  x2C.0
0722A:  BRA    72BA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0722C:  MOVLW  36
0722E:  MOVWF  FF6
07230:  MOVLW  06
07232:  MOVWF  FF7
07234:  MOVLB  0
07236:  CALL   2526
....................                putc('\n',CH2);
0723A:  MOVLW  0A
0723C:  MOVLB  D
0723E:  MOVWF  xCD
07240:  MOVLB  0
07242:  CALL   24E0
....................                delay_ms(10);
07246:  MOVLW  0A
07248:  MOVLB  D
0724A:  MOVWF  xCC
0724C:  MOVLB  0
0724E:  CALL   0A28
....................             
....................                SendSMS.B1 =1;
07252:  MOVLB  D
07254:  BSF    x48.0
....................                fprintf(CH2,"AT+CMGS=\"");
07256:  MOVLW  40
07258:  MOVWF  FF6
0725A:  MOVLW  06
0725C:  MOVWF  FF7
0725E:  MOVLB  0
07260:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
07264:  MOVLW  0A
07266:  MOVWF  FEA
07268:  MOVLW  81
0726A:  MOVWF  FE9
0726C:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
07270:  MOVLW  22
07272:  MOVLB  D
07274:  MOVWF  xCD
07276:  MOVLB  0
07278:  CALL   24E0
....................                putc('\n',CH2);
0727C:  MOVLW  0A
0727E:  MOVLB  D
07280:  MOVWF  xCD
07282:  MOVLB  0
07284:  CALL   24E0
....................                delay_ms(50);
07288:  MOVLW  32
0728A:  MOVLB  D
0728C:  MOVWF  xCC
0728E:  MOVLB  0
07290:  CALL   0A28
....................               
....................               fprintf(CH2,SMS_Massage1);
07294:  MOVLW  0A
07296:  MOVWF  FEA
07298:  MOVLW  90
0729A:  MOVWF  FE9
0729C:  CALL   6824
....................               putc('\n',CH2);
072A0:  MOVLW  0A
072A2:  MOVLB  D
072A4:  MOVWF  xCD
072A6:  MOVLB  0
072A8:  CALL   24E0
....................               putc(26,CH2);
072AC:  MOVLW  1A
072AE:  MOVLB  D
072B0:  MOVWF  xCD
072B2:  MOVLB  0
072B4:  CALL   24E0
072B8:  MOVLB  D
....................             }
....................         }
....................       }
072BA:  BRA    72C2
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
072BC:  BTFSS  x1C.0
072BE:  BRA    72C2
072C0:  BCF    x2C.0
....................    }
072C2:  BRA    737C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
072C4:  MOVLW  00
072C6:  BTFSC  x10.0
072C8:  MOVLW  01
072CA:  MOVWF  xCC
072CC:  MOVLW  00
072CE:  BTFSC  x18.0
072D0:  MOVLW  01
072D2:  XORWF  xCC,W
072D4:  SUBLW  01
072D6:  BNZ   7376
....................       {
....................          Output.B1 = 0;
072D8:  BCF    x14.0
....................          // SMS Sending 
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
072DA:  BTFSC  x48.0
072DC:  BRA    7374
072DE:  BTFSC  30.4
072E0:  BRA    7374
072E2:  BTFSC  x2C.0
072E4:  BRA    7374
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
072E6:  MOVLW  4A
072E8:  MOVWF  FF6
072EA:  MOVLW  06
072EC:  MOVWF  FF7
072EE:  MOVLB  0
072F0:  CALL   2526
....................             putc('\n',CH2);
072F4:  MOVLW  0A
072F6:  MOVLB  D
072F8:  MOVWF  xCD
072FA:  MOVLB  0
072FC:  CALL   24E0
....................             delay_ms(10);
07300:  MOVLW  0A
07302:  MOVLB  D
07304:  MOVWF  xCC
07306:  MOVLB  0
07308:  CALL   0A28
....................          
....................             SendSMS.B1 =1;
0730C:  MOVLB  D
0730E:  BSF    x48.0
....................             fprintf(CH2,"AT+CMGS=\"");
07310:  MOVLW  54
07312:  MOVWF  FF6
07314:  MOVLW  06
07316:  MOVWF  FF7
07318:  MOVLB  0
0731A:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
0731E:  MOVLW  0A
07320:  MOVWF  FEA
07322:  MOVLW  81
07324:  MOVWF  FE9
07326:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
0732A:  MOVLW  22
0732C:  MOVLB  D
0732E:  MOVWF  xCD
07330:  MOVLB  0
07332:  CALL   24E0
....................             putc('\n',CH2);
07336:  MOVLW  0A
07338:  MOVLB  D
0733A:  MOVWF  xCD
0733C:  MOVLB  0
0733E:  CALL   24E0
....................             delay_ms(50);
07342:  MOVLW  32
07344:  MOVLB  D
07346:  MOVWF  xCC
07348:  MOVLB  0
0734A:  CALL   0A28
....................            
....................            fprintf(CH2,SMS_Massage1);
0734E:  MOVLW  0A
07350:  MOVWF  FEA
07352:  MOVLW  90
07354:  MOVWF  FE9
07356:  CALL   6824
....................            putc('\n',CH2);
0735A:  MOVLW  0A
0735C:  MOVLB  D
0735E:  MOVWF  xCD
07360:  MOVLB  0
07362:  CALL   24E0
....................            putc(26,CH2);
07366:  MOVLW  1A
07368:  MOVLB  D
0736A:  MOVWF  xCD
0736C:  MOVLB  0
0736E:  CALL   24E0
07372:  MOVLB  D
....................          }
....................       }
07374:  BRA    737C
....................       else
....................       {
....................          Output.B1 = 1;
07376:  BSF    x14.0
....................          SendSMS.B1 =0;
07378:  BCF    x48.0
....................          functointest_f =0;
0737A:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
0737C:  BTFSS  x28.1
0737E:  BRA    748C
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
07380:  MOVLW  00
07382:  BTFSC  x10.1
07384:  MOVLW  01
07386:  MOVWF  xCC
07388:  MOVLW  00
0738A:  BTFSC  x18.1
0738C:  MOVLW  01
0738E:  XORWF  xCC,W
07390:  SUBLW  01
07392:  BNZ   7398
07394:  BTFSC  x1C.1
07396:  BRA    739C
07398:  BTFSS  x30.1
0739A:  BRA    7484
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
0739C:  BTFSC  x2C.1
0739E:  BRA    7482
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
073A0:  BTFSC  x30.1
073A2:  BRA    73BC
073A4:  MOVLB  0
073A6:  MOVF   x60,W
073A8:  SUBLW  0F
073AA:  BTFSC  FD8.2
073AC:  BRA    73B2
073AE:  MOVLB  D
073B0:  BRA    73BC
....................             {
....................                TimeBase1s = 100 ;            //reload again
073B2:  MOVLW  64
073B4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
073B6:  MOVFF  61,1D
073BA:  MOVLB  D
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
073BC:  BSF    x30.1
....................             if(FlashingFlag == 0)
073BE:  BTFSC  1A.1
073C0:  BRA    73C6
....................             {
....................                Output.B2 = 0;           //Flash output1
073C2:  BCF    x14.1
....................             }
073C4:  BRA    73C8
....................             else
....................             {
....................                Output.B2 = 1;
073C6:  BSF    x14.1
....................             }
.................... 
....................             if (~AutoTestFlag)
073C8:  BTFSC  1A.4
073CA:  BRA    73E8
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
073CC:  BTFSC  x24.1
073CE:  BRA    73DA
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
073D0:  BSF    F89.4
073D2:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
073D4:  BSF    F89.3
073D6:  BCF    F92.3
....................                }
073D8:  BRA    73E8
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
073DA:  BTFSS  x20.1
073DC:  BRA    73E4
073DE:  BSF    F89.4
073E0:  BCF    F92.4
073E2:  BRA    73E8
....................                   else output_bit(Pbell,OnRelay);                          //Bell
073E4:  BSF    F89.3
073E6:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
073E8:  BTFSC  x48.1
073EA:  BRA    7482
073EC:  BTFSC  30.4
073EE:  BRA    7482
073F0:  BTFSC  x2C.1
073F2:  BRA    7482
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
073F4:  MOVLW  5E
073F6:  MOVWF  FF6
073F8:  MOVLW  06
073FA:  MOVWF  FF7
073FC:  MOVLB  0
073FE:  CALL   2526
....................                putc('\n',CH2);
07402:  MOVLW  0A
07404:  MOVLB  D
07406:  MOVWF  xCD
07408:  MOVLB  0
0740A:  CALL   24E0
....................                delay_ms(10);
0740E:  MOVLW  0A
07410:  MOVLB  D
07412:  MOVWF  xCC
07414:  MOVLB  0
07416:  CALL   0A28
....................                 
....................                SendSMS.B2 =1;
0741A:  MOVLB  D
0741C:  BSF    x48.1
....................                fprintf(CH2,"AT+CMGS=\"");
0741E:  MOVLW  68
07420:  MOVWF  FF6
07422:  MOVLW  06
07424:  MOVWF  FF7
07426:  MOVLB  0
07428:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
0742C:  MOVLW  0A
0742E:  MOVWF  FEA
07430:  MOVLW  81
07432:  MOVWF  FE9
07434:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
07438:  MOVLW  22
0743A:  MOVLB  D
0743C:  MOVWF  xCD
0743E:  MOVLB  0
07440:  CALL   24E0
....................                putc('\n',CH2);
07444:  MOVLW  0A
07446:  MOVLB  D
07448:  MOVWF  xCD
0744A:  MOVLB  0
0744C:  CALL   24E0
....................                delay_ms(50);
07450:  MOVLW  32
07452:  MOVLB  D
07454:  MOVWF  xCC
07456:  MOVLB  0
07458:  CALL   0A28
....................                
....................               fprintf(CH2,SMS_Massage2);
0745C:  MOVLW  0A
0745E:  MOVWF  FEA
07460:  MOVLW  B0
07462:  MOVWF  FE9
07464:  CALL   6824
....................               putc('\n',CH2);
07468:  MOVLW  0A
0746A:  MOVLB  D
0746C:  MOVWF  xCD
0746E:  MOVLB  0
07470:  CALL   24E0
....................              putc(26,CH2);
07474:  MOVLW  1A
07476:  MOVLB  D
07478:  MOVWF  xCD
0747A:  MOVLB  0
0747C:  CALL   24E0
07480:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
07482:  BRA    748A
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
07484:  BTFSS  x1C.1
07486:  BRA    748A
07488:  BCF    x2C.1
....................    }
0748A:  BRA    7544
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
0748C:  MOVLW  00
0748E:  BTFSC  x10.1
07490:  MOVLW  01
07492:  MOVWF  xCC
07494:  MOVLW  00
07496:  BTFSC  x18.1
07498:  MOVLW  01
0749A:  XORWF  xCC,W
0749C:  SUBLW  01
0749E:  BNZ   753E
....................       {
....................          Output.B2 = 0;
074A0:  BCF    x14.1
....................          // SMS Sending   
....................          if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
074A2:  BTFSC  x48.1
074A4:  BRA    753C
074A6:  BTFSC  30.4
074A8:  BRA    753C
074AA:  BTFSC  x2C.1
074AC:  BRA    753C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
074AE:  MOVLW  72
074B0:  MOVWF  FF6
074B2:  MOVLW  06
074B4:  MOVWF  FF7
074B6:  MOVLB  0
074B8:  CALL   2526
....................             putc('\n',CH2);
074BC:  MOVLW  0A
074BE:  MOVLB  D
074C0:  MOVWF  xCD
074C2:  MOVLB  0
074C4:  CALL   24E0
....................             delay_ms(10);
074C8:  MOVLW  0A
074CA:  MOVLB  D
074CC:  MOVWF  xCC
074CE:  MOVLB  0
074D0:  CALL   0A28
....................              
....................             SendSMS.B2 =1;
074D4:  MOVLB  D
074D6:  BSF    x48.1
....................             fprintf(CH2,"AT+CMGS=\"");
074D8:  MOVLW  7C
074DA:  MOVWF  FF6
074DC:  MOVLW  06
074DE:  MOVWF  FF7
074E0:  MOVLB  0
074E2:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
074E6:  MOVLW  0A
074E8:  MOVWF  FEA
074EA:  MOVLW  81
074EC:  MOVWF  FE9
074EE:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
074F2:  MOVLW  22
074F4:  MOVLB  D
074F6:  MOVWF  xCD
074F8:  MOVLB  0
074FA:  CALL   24E0
....................             putc('\n',CH2);
074FE:  MOVLW  0A
07500:  MOVLB  D
07502:  MOVWF  xCD
07504:  MOVLB  0
07506:  CALL   24E0
....................             delay_ms(50);
0750A:  MOVLW  32
0750C:  MOVLB  D
0750E:  MOVWF  xCC
07510:  MOVLB  0
07512:  CALL   0A28
....................             
....................            fprintf(CH2,SMS_Massage2);
07516:  MOVLW  0A
07518:  MOVWF  FEA
0751A:  MOVLW  B0
0751C:  MOVWF  FE9
0751E:  CALL   6824
....................            putc('\n',CH2);
07522:  MOVLW  0A
07524:  MOVLB  D
07526:  MOVWF  xCD
07528:  MOVLB  0
0752A:  CALL   24E0
....................           putc(26,CH2);
0752E:  MOVLW  1A
07530:  MOVLB  D
07532:  MOVWF  xCD
07534:  MOVLB  0
07536:  CALL   24E0
0753A:  MOVLB  D
....................          }
....................       }
0753C:  BRA    7544
....................       else
....................       {
....................          Output.B2 = 1;
0753E:  BSF    x14.1
....................          SendSMS.B2 =0;
07540:  BCF    x48.1
....................          functointest_f =0;
07542:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
07544:  BTFSS  x28.2
07546:  BRA    7654
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
07548:  MOVLW  00
0754A:  BTFSC  x10.2
0754C:  MOVLW  01
0754E:  MOVWF  xCC
07550:  MOVLW  00
07552:  BTFSC  x18.2
07554:  MOVLW  01
07556:  XORWF  xCC,W
07558:  SUBLW  01
0755A:  BNZ   7560
0755C:  BTFSC  x1C.2
0755E:  BRA    7564
07560:  BTFSS  x30.2
07562:  BRA    764C
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
07564:  BTFSC  x2C.2
07566:  BRA    764A
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07568:  BTFSC  x30.2
0756A:  BRA    7584
0756C:  MOVLB  0
0756E:  MOVF   x60,W
07570:  SUBLW  0F
07572:  BTFSC  FD8.2
07574:  BRA    757A
07576:  MOVLB  D
07578:  BRA    7584
....................             {
....................                TimeBase1s = 100 ;            //reload again
0757A:  MOVLW  64
0757C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0757E:  MOVFF  61,1D
07582:  MOVLB  D
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
07584:  BSF    x30.2
....................             if(FlashingFlag == 0)
07586:  BTFSC  1A.1
07588:  BRA    758E
....................             {
....................                Output.B3 = 0;           //Flash output1
0758A:  BCF    x14.2
....................             }
0758C:  BRA    7590
....................             else
....................             {
....................                Output.B3 = 1;
0758E:  BSF    x14.2
....................             }
.................... 
....................             if (~AutoTestFlag)
07590:  BTFSC  1A.4
07592:  BRA    75B0
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
07594:  BTFSC  x24.2
07596:  BRA    75A2
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07598:  BSF    F89.4
0759A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0759C:  BSF    F89.3
0759E:  BCF    F92.3
....................                }
075A0:  BRA    75B0
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
075A2:  BTFSS  x20.2
075A4:  BRA    75AC
075A6:  BSF    F89.4
075A8:  BCF    F92.4
075AA:  BRA    75B0
....................                   else output_bit(Pbell,OnRelay);                          //Bell
075AC:  BSF    F89.3
075AE:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
075B0:  BTFSC  x48.2
075B2:  BRA    764A
075B4:  BTFSC  30.4
075B6:  BRA    764A
075B8:  BTFSC  x2C.2
075BA:  BRA    764A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
075BC:  MOVLW  86
075BE:  MOVWF  FF6
075C0:  MOVLW  06
075C2:  MOVWF  FF7
075C4:  MOVLB  0
075C6:  CALL   2526
....................                putc('\n',CH2);
075CA:  MOVLW  0A
075CC:  MOVLB  D
075CE:  MOVWF  xCD
075D0:  MOVLB  0
075D2:  CALL   24E0
....................                delay_ms(10);
075D6:  MOVLW  0A
075D8:  MOVLB  D
075DA:  MOVWF  xCC
075DC:  MOVLB  0
075DE:  CALL   0A28
....................                
....................                SendSMS.B3 =1;
075E2:  MOVLB  D
075E4:  BSF    x48.2
....................                fprintf(CH2,"AT+CMGS=\"");
075E6:  MOVLW  90
075E8:  MOVWF  FF6
075EA:  MOVLW  06
075EC:  MOVWF  FF7
075EE:  MOVLB  0
075F0:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
075F4:  MOVLW  0A
075F6:  MOVWF  FEA
075F8:  MOVLW  81
075FA:  MOVWF  FE9
075FC:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
07600:  MOVLW  22
07602:  MOVLB  D
07604:  MOVWF  xCD
07606:  MOVLB  0
07608:  CALL   24E0
....................                putc('\n',CH2);
0760C:  MOVLW  0A
0760E:  MOVLB  D
07610:  MOVWF  xCD
07612:  MOVLB  0
07614:  CALL   24E0
....................                delay_ms(50);
07618:  MOVLW  32
0761A:  MOVLB  D
0761C:  MOVWF  xCC
0761E:  MOVLB  0
07620:  CALL   0A28
....................               
....................               fprintf(CH2,SMS_Massage3);
07624:  MOVLW  0A
07626:  MOVWF  FEA
07628:  MOVLW  D0
0762A:  MOVWF  FE9
0762C:  CALL   6824
....................               putc('\n',CH2);
07630:  MOVLW  0A
07632:  MOVLB  D
07634:  MOVWF  xCD
07636:  MOVLB  0
07638:  CALL   24E0
....................              putc(26,CH2);
0763C:  MOVLW  1A
0763E:  MOVLB  D
07640:  MOVWF  xCD
07642:  MOVLB  0
07644:  CALL   24E0
07648:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
0764A:  BRA    7652
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
0764C:  BTFSS  x1C.2
0764E:  BRA    7652
07650:  BCF    x2C.2
....................    }
07652:  BRA    770C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
07654:  MOVLW  00
07656:  BTFSC  x10.2
07658:  MOVLW  01
0765A:  MOVWF  xCC
0765C:  MOVLW  00
0765E:  BTFSC  x18.2
07660:  MOVLW  01
07662:  XORWF  xCC,W
07664:  SUBLW  01
07666:  BNZ   7706
....................       {
....................          Output.B3 = 0;
07668:  BCF    x14.2
....................          // SMS Sending   
....................          if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
0766A:  BTFSC  x48.2
0766C:  BRA    7704
0766E:  BTFSC  30.4
07670:  BRA    7704
07672:  BTFSC  x2C.2
07674:  BRA    7704
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07676:  MOVLW  9A
07678:  MOVWF  FF6
0767A:  MOVLW  06
0767C:  MOVWF  FF7
0767E:  MOVLB  0
07680:  CALL   2526
....................             putc('\n',CH2);
07684:  MOVLW  0A
07686:  MOVLB  D
07688:  MOVWF  xCD
0768A:  MOVLB  0
0768C:  CALL   24E0
....................             delay_ms(10);
07690:  MOVLW  0A
07692:  MOVLB  D
07694:  MOVWF  xCC
07696:  MOVLB  0
07698:  CALL   0A28
....................             
....................             SendSMS.B3 =1;
0769C:  MOVLB  D
0769E:  BSF    x48.2
....................             fprintf(CH2,"AT+CMGS=\"");
076A0:  MOVLW  A4
076A2:  MOVWF  FF6
076A4:  MOVLW  06
076A6:  MOVWF  FF7
076A8:  MOVLB  0
076AA:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
076AE:  MOVLW  0A
076B0:  MOVWF  FEA
076B2:  MOVLW  81
076B4:  MOVWF  FE9
076B6:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
076BA:  MOVLW  22
076BC:  MOVLB  D
076BE:  MOVWF  xCD
076C0:  MOVLB  0
076C2:  CALL   24E0
....................             putc('\n',CH2);
076C6:  MOVLW  0A
076C8:  MOVLB  D
076CA:  MOVWF  xCD
076CC:  MOVLB  0
076CE:  CALL   24E0
....................             delay_ms(50);
076D2:  MOVLW  32
076D4:  MOVLB  D
076D6:  MOVWF  xCC
076D8:  MOVLB  0
076DA:  CALL   0A28
....................            
....................            fprintf(CH2,SMS_Massage3);
076DE:  MOVLW  0A
076E0:  MOVWF  FEA
076E2:  MOVLW  D0
076E4:  MOVWF  FE9
076E6:  CALL   6824
....................            putc('\n',CH2);
076EA:  MOVLW  0A
076EC:  MOVLB  D
076EE:  MOVWF  xCD
076F0:  MOVLB  0
076F2:  CALL   24E0
....................           putc(26,CH2);
076F6:  MOVLW  1A
076F8:  MOVLB  D
076FA:  MOVWF  xCD
076FC:  MOVLB  0
076FE:  CALL   24E0
07702:  MOVLB  D
....................          }
....................       }
07704:  BRA    770C
....................       else
....................       {
....................          Output.B3 = 1;
07706:  BSF    x14.2
....................          SendSMS.B3 =0;
07708:  BCF    x48.2
....................          functointest_f =0;
0770A:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
0770C:  BTFSS  x28.3
0770E:  BRA    781C
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
07710:  MOVLW  00
07712:  BTFSC  x10.3
07714:  MOVLW  01
07716:  MOVWF  xCC
07718:  MOVLW  00
0771A:  BTFSC  x18.3
0771C:  MOVLW  01
0771E:  XORWF  xCC,W
07720:  SUBLW  01
07722:  BNZ   7728
07724:  BTFSC  x1C.3
07726:  BRA    772C
07728:  BTFSS  x30.3
0772A:  BRA    7814
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
0772C:  BTFSC  x2C.3
0772E:  BRA    7812
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07730:  BTFSC  x30.3
07732:  BRA    774C
07734:  MOVLB  0
07736:  MOVF   x60,W
07738:  SUBLW  0F
0773A:  BTFSC  FD8.2
0773C:  BRA    7742
0773E:  MOVLB  D
07740:  BRA    774C
....................             {
....................                TimeBase1s = 100 ;            //reload again
07742:  MOVLW  64
07744:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07746:  MOVFF  61,1D
0774A:  MOVLB  D
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
0774C:  BSF    x30.3
....................             if(FlashingFlag == 0)
0774E:  BTFSC  1A.1
07750:  BRA    7756
....................             {
....................                Output.B4 = 0;           //Flash output1
07752:  BCF    x14.3
....................             }
07754:  BRA    7758
....................             else
....................             {
....................                Output.B4 = 1;
07756:  BSF    x14.3
....................             }
.................... 
....................             if (~AutoTestFlag)
07758:  BTFSC  1A.4
0775A:  BRA    7778
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
0775C:  BTFSC  x24.3
0775E:  BRA    776A
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07760:  BSF    F89.4
07762:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07764:  BSF    F89.3
07766:  BCF    F92.3
....................                }
07768:  BRA    7778
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0776A:  BTFSS  x20.3
0776C:  BRA    7774
0776E:  BSF    F89.4
07770:  BCF    F92.4
07772:  BRA    7778
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07774:  BSF    F89.3
07776:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07778:  BTFSC  x48.3
0777A:  BRA    7812
0777C:  BTFSC  30.4
0777E:  BRA    7812
07780:  BTFSC  x2C.3
07782:  BRA    7812
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07784:  MOVLW  AE
07786:  MOVWF  FF6
07788:  MOVLW  06
0778A:  MOVWF  FF7
0778C:  MOVLB  0
0778E:  CALL   2526
....................                putc('\n',CH2);
07792:  MOVLW  0A
07794:  MOVLB  D
07796:  MOVWF  xCD
07798:  MOVLB  0
0779A:  CALL   24E0
....................                delay_ms(10);
0779E:  MOVLW  0A
077A0:  MOVLB  D
077A2:  MOVWF  xCC
077A4:  MOVLB  0
077A6:  CALL   0A28
....................                
....................                SendSMS.B4 =1;
077AA:  MOVLB  D
077AC:  BSF    x48.3
....................                fprintf(CH2,"AT+CMGS=\"");
077AE:  MOVLW  B8
077B0:  MOVWF  FF6
077B2:  MOVLW  06
077B4:  MOVWF  FF7
077B6:  MOVLB  0
077B8:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
077BC:  MOVLW  0A
077BE:  MOVWF  FEA
077C0:  MOVLW  81
077C2:  MOVWF  FE9
077C4:  CALL   6824
....................             
....................                fprintf(CH2,"\"");
077C8:  MOVLW  22
077CA:  MOVLB  D
077CC:  MOVWF  xCD
077CE:  MOVLB  0
077D0:  CALL   24E0
....................                putc('\n',CH2);
077D4:  MOVLW  0A
077D6:  MOVLB  D
077D8:  MOVWF  xCD
077DA:  MOVLB  0
077DC:  CALL   24E0
....................                delay_ms(50);
077E0:  MOVLW  32
077E2:  MOVLB  D
077E4:  MOVWF  xCC
077E6:  MOVLB  0
077E8:  CALL   0A28
....................               
....................               fprintf(CH2,SMS_Massage4);
077EC:  MOVLW  0A
077EE:  MOVWF  FEA
077F0:  MOVLW  F0
077F2:  MOVWF  FE9
077F4:  CALL   6824
....................               putc('\n',CH2);
077F8:  MOVLW  0A
077FA:  MOVLB  D
077FC:  MOVWF  xCD
077FE:  MOVLB  0
07800:  CALL   24E0
....................               putc(26,CH2);
07804:  MOVLW  1A
07806:  MOVLB  D
07808:  MOVWF  xCD
0780A:  MOVLB  0
0780C:  CALL   24E0
07810:  MOVLB  D
....................             }
....................           }
....................       }
07812:  BRA    781A
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
07814:  BTFSS  x1C.3
07816:  BRA    781A
07818:  BCF    x2C.3
....................    }
0781A:  BRA    78D4
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
0781C:  MOVLW  00
0781E:  BTFSC  x10.3
07820:  MOVLW  01
07822:  MOVWF  xCC
07824:  MOVLW  00
07826:  BTFSC  x18.3
07828:  MOVLW  01
0782A:  XORWF  xCC,W
0782C:  SUBLW  01
0782E:  BNZ   78CE
....................       {
....................          Output.B4 = 0;
07830:  BCF    x14.3
....................          // SMS Sending   
....................          if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07832:  BTFSC  x48.3
07834:  BRA    78CC
07836:  BTFSC  30.4
07838:  BRA    78CC
0783A:  BTFSC  x2C.3
0783C:  BRA    78CC
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0783E:  MOVLW  C2
07840:  MOVWF  FF6
07842:  MOVLW  06
07844:  MOVWF  FF7
07846:  MOVLB  0
07848:  CALL   2526
....................             putc('\n',CH2);
0784C:  MOVLW  0A
0784E:  MOVLB  D
07850:  MOVWF  xCD
07852:  MOVLB  0
07854:  CALL   24E0
....................             delay_ms(10);
07858:  MOVLW  0A
0785A:  MOVLB  D
0785C:  MOVWF  xCC
0785E:  MOVLB  0
07860:  CALL   0A28
....................             
....................             SendSMS.B4 =1;
07864:  MOVLB  D
07866:  BSF    x48.3
....................             fprintf(CH2,"AT+CMGS=\"");
07868:  MOVLW  CC
0786A:  MOVWF  FF6
0786C:  MOVLW  06
0786E:  MOVWF  FF7
07870:  MOVLB  0
07872:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
07876:  MOVLW  0A
07878:  MOVWF  FEA
0787A:  MOVLW  81
0787C:  MOVWF  FE9
0787E:  CALL   6824
....................          
....................             fprintf(CH2,"\"");
07882:  MOVLW  22
07884:  MOVLB  D
07886:  MOVWF  xCD
07888:  MOVLB  0
0788A:  CALL   24E0
....................             putc('\n',CH2);
0788E:  MOVLW  0A
07890:  MOVLB  D
07892:  MOVWF  xCD
07894:  MOVLB  0
07896:  CALL   24E0
....................             delay_ms(50);
0789A:  MOVLW  32
0789C:  MOVLB  D
0789E:  MOVWF  xCC
078A0:  MOVLB  0
078A2:  CALL   0A28
....................            
....................            fprintf(CH2,SMS_Massage4);
078A6:  MOVLW  0A
078A8:  MOVWF  FEA
078AA:  MOVLW  F0
078AC:  MOVWF  FE9
078AE:  CALL   6824
....................            putc('\n',CH2);
078B2:  MOVLW  0A
078B4:  MOVLB  D
078B6:  MOVWF  xCD
078B8:  MOVLB  0
078BA:  CALL   24E0
....................           putc(26,CH2);
078BE:  MOVLW  1A
078C0:  MOVLB  D
078C2:  MOVWF  xCD
078C4:  MOVLB  0
078C6:  CALL   24E0
078CA:  MOVLB  D
....................          }
....................       }
078CC:  BRA    78D4
....................       else
....................       {
....................          Output.B4 = 1;
078CE:  BSF    x14.3
....................          SendSMS.B4 =0;
078D0:  BCF    x48.3
....................          functointest_f =0;
078D2:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
078D4:  BTFSS  x28.4
078D6:  BRA    79E4
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
078D8:  MOVLW  00
078DA:  BTFSC  x10.4
078DC:  MOVLW  01
078DE:  MOVWF  xCC
078E0:  MOVLW  00
078E2:  BTFSC  x18.4
078E4:  MOVLW  01
078E6:  XORWF  xCC,W
078E8:  SUBLW  01
078EA:  BNZ   78F0
078EC:  BTFSC  x1C.4
078EE:  BRA    78F4
078F0:  BTFSS  x30.4
078F2:  BRA    79DC
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
078F4:  BTFSC  x2C.4
078F6:  BRA    79DA
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
078F8:  BTFSC  x30.4
078FA:  BRA    7914
078FC:  MOVLB  0
078FE:  MOVF   x60,W
07900:  SUBLW  0F
07902:  BTFSC  FD8.2
07904:  BRA    790A
07906:  MOVLB  D
07908:  BRA    7914
....................             {
....................                TimeBase1s = 100 ;            //reload again
0790A:  MOVLW  64
0790C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0790E:  MOVFF  61,1D
07912:  MOVLB  D
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
07914:  BSF    x30.4
....................             if(FlashingFlag == 0)
07916:  BTFSC  1A.1
07918:  BRA    791E
....................             {
....................                Output.B5 = 0;           //Flash output1
0791A:  BCF    x14.4
....................             }
0791C:  BRA    7920
....................             else
....................             {
....................                Output.B5 = 1;
0791E:  BSF    x14.4
....................             }
.................... 
....................             if (~AutoTestFlag)
07920:  BTFSC  1A.4
07922:  BRA    7940
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
07924:  BTFSC  x24.4
07926:  BRA    7932
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07928:  BSF    F89.4
0792A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0792C:  BSF    F89.3
0792E:  BCF    F92.3
....................                }
07930:  BRA    7940
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07932:  BTFSS  x20.4
07934:  BRA    793C
07936:  BSF    F89.4
07938:  BCF    F92.4
0793A:  BRA    7940
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0793C:  BSF    F89.3
0793E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
07940:  BTFSC  x48.4
07942:  BRA    79DA
07944:  BTFSC  30.4
07946:  BRA    79DA
07948:  BTFSC  x2C.4
0794A:  BRA    79DA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0794C:  MOVLW  D6
0794E:  MOVWF  FF6
07950:  MOVLW  06
07952:  MOVWF  FF7
07954:  MOVLB  0
07956:  CALL   2526
....................                putc('\n',CH2);
0795A:  MOVLW  0A
0795C:  MOVLB  D
0795E:  MOVWF  xCD
07960:  MOVLB  0
07962:  CALL   24E0
....................                delay_ms(10);
07966:  MOVLW  0A
07968:  MOVLB  D
0796A:  MOVWF  xCC
0796C:  MOVLB  0
0796E:  CALL   0A28
....................                
....................                SendSMS.B5 =1;
07972:  MOVLB  D
07974:  BSF    x48.4
....................                fprintf(CH2,"AT+CMGS=\"");
07976:  MOVLW  E0
07978:  MOVWF  FF6
0797A:  MOVLW  06
0797C:  MOVWF  FF7
0797E:  MOVLB  0
07980:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
07984:  MOVLW  0A
07986:  MOVWF  FEA
07988:  MOVLW  81
0798A:  MOVWF  FE9
0798C:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
07990:  MOVLW  22
07992:  MOVLB  D
07994:  MOVWF  xCD
07996:  MOVLB  0
07998:  CALL   24E0
....................                putc('\n',CH2);
0799C:  MOVLW  0A
0799E:  MOVLB  D
079A0:  MOVWF  xCD
079A2:  MOVLB  0
079A4:  CALL   24E0
....................                delay_ms(50);
079A8:  MOVLW  32
079AA:  MOVLB  D
079AC:  MOVWF  xCC
079AE:  MOVLB  0
079B0:  CALL   0A28
....................               
....................               fprintf(CH2,SMS_Massage5);
079B4:  MOVLW  0B
079B6:  MOVWF  FEA
079B8:  MOVLW  10
079BA:  MOVWF  FE9
079BC:  CALL   6824
....................               putc('\n',CH2);
079C0:  MOVLW  0A
079C2:  MOVLB  D
079C4:  MOVWF  xCD
079C6:  MOVLB  0
079C8:  CALL   24E0
....................              putc(26,CH2);
079CC:  MOVLW  1A
079CE:  MOVLB  D
079D0:  MOVWF  xCD
079D2:  MOVLB  0
079D4:  CALL   24E0
079D8:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
079DA:  BRA    79E2
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
079DC:  BTFSS  x1C.4
079DE:  BRA    79E2
079E0:  BCF    x2C.4
....................    }
079E2:  BRA    7A9C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
079E4:  MOVLW  00
079E6:  BTFSC  x10.4
079E8:  MOVLW  01
079EA:  MOVWF  xCC
079EC:  MOVLW  00
079EE:  BTFSC  x18.4
079F0:  MOVLW  01
079F2:  XORWF  xCC,W
079F4:  SUBLW  01
079F6:  BNZ   7A96
....................       {
....................          Output.B5 = 0;
079F8:  BCF    x14.4
....................          // SMS Sending   
....................          if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
079FA:  BTFSC  x48.4
079FC:  BRA    7A94
079FE:  BTFSC  30.4
07A00:  BRA    7A94
07A02:  BTFSC  x2C.4
07A04:  BRA    7A94
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07A06:  MOVLW  EA
07A08:  MOVWF  FF6
07A0A:  MOVLW  06
07A0C:  MOVWF  FF7
07A0E:  MOVLB  0
07A10:  CALL   2526
....................             putc('\n',CH2);
07A14:  MOVLW  0A
07A16:  MOVLB  D
07A18:  MOVWF  xCD
07A1A:  MOVLB  0
07A1C:  CALL   24E0
....................             delay_ms(10);
07A20:  MOVLW  0A
07A22:  MOVLB  D
07A24:  MOVWF  xCC
07A26:  MOVLB  0
07A28:  CALL   0A28
....................             
....................             SendSMS.B5 =1;
07A2C:  MOVLB  D
07A2E:  BSF    x48.4
....................             fprintf(CH2,"AT+CMGS=\"");
07A30:  MOVLW  F4
07A32:  MOVWF  FF6
07A34:  MOVLW  06
07A36:  MOVWF  FF7
07A38:  MOVLB  0
07A3A:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
07A3E:  MOVLW  0A
07A40:  MOVWF  FEA
07A42:  MOVLW  81
07A44:  MOVWF  FE9
07A46:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
07A4A:  MOVLW  22
07A4C:  MOVLB  D
07A4E:  MOVWF  xCD
07A50:  MOVLB  0
07A52:  CALL   24E0
....................             putc('\n',CH2);
07A56:  MOVLW  0A
07A58:  MOVLB  D
07A5A:  MOVWF  xCD
07A5C:  MOVLB  0
07A5E:  CALL   24E0
....................             delay_ms(50);
07A62:  MOVLW  32
07A64:  MOVLB  D
07A66:  MOVWF  xCC
07A68:  MOVLB  0
07A6A:  CALL   0A28
....................            
....................            fprintf(CH2,SMS_Massage5);
07A6E:  MOVLW  0B
07A70:  MOVWF  FEA
07A72:  MOVLW  10
07A74:  MOVWF  FE9
07A76:  CALL   6824
....................            putc('\n',CH2);
07A7A:  MOVLW  0A
07A7C:  MOVLB  D
07A7E:  MOVWF  xCD
07A80:  MOVLB  0
07A82:  CALL   24E0
....................           putc(26,CH2);
07A86:  MOVLW  1A
07A88:  MOVLB  D
07A8A:  MOVWF  xCD
07A8C:  MOVLB  0
07A8E:  CALL   24E0
07A92:  MOVLB  D
....................          }
....................       }
07A94:  BRA    7A9C
....................       else
....................       {
....................          Output.B5 = 1;
07A96:  BSF    x14.4
....................          SendSMS.B5 =0;
07A98:  BCF    x48.4
....................          functointest_f =0;
07A9A:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
07A9C:  BTFSS  x28.5
07A9E:  BRA    7BAC
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
07AA0:  MOVLW  00
07AA2:  BTFSC  x10.5
07AA4:  MOVLW  01
07AA6:  MOVWF  xCC
07AA8:  MOVLW  00
07AAA:  BTFSC  x18.5
07AAC:  MOVLW  01
07AAE:  XORWF  xCC,W
07AB0:  SUBLW  01
07AB2:  BNZ   7AB8
07AB4:  BTFSC  x1C.5
07AB6:  BRA    7ABC
07AB8:  BTFSS  x30.5
07ABA:  BRA    7BA4
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
07ABC:  BTFSC  x2C.5
07ABE:  BRA    7BA2
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07AC0:  BTFSC  x30.5
07AC2:  BRA    7ADC
07AC4:  MOVLB  0
07AC6:  MOVF   x60,W
07AC8:  SUBLW  0F
07ACA:  BTFSC  FD8.2
07ACC:  BRA    7AD2
07ACE:  MOVLB  D
07AD0:  BRA    7ADC
....................             {
....................                TimeBase1s = 100 ;            //reload again
07AD2:  MOVLW  64
07AD4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07AD6:  MOVFF  61,1D
07ADA:  MOVLB  D
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
07ADC:  BSF    x30.5
....................             if(FlashingFlag == 0)
07ADE:  BTFSC  1A.1
07AE0:  BRA    7AE6
....................             {
....................                Output.B6 = 0;           //Flash output1
07AE2:  BCF    x14.5
....................             }
07AE4:  BRA    7AE8
....................             else
....................             {
....................                Output.B6 = 1;
07AE6:  BSF    x14.5
....................             }
.................... 
....................             if (~AutoTestFlag)
07AE8:  BTFSC  1A.4
07AEA:  BRA    7B08
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
07AEC:  BTFSC  x24.5
07AEE:  BRA    7AFA
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07AF0:  BSF    F89.4
07AF2:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07AF4:  BSF    F89.3
07AF6:  BCF    F92.3
....................                }
07AF8:  BRA    7B08
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07AFA:  BTFSS  x20.5
07AFC:  BRA    7B04
07AFE:  BSF    F89.4
07B00:  BCF    F92.4
07B02:  BRA    7B08
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07B04:  BSF    F89.3
07B06:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
07B08:  BTFSC  x48.5
07B0A:  BRA    7BA2
07B0C:  BTFSC  30.4
07B0E:  BRA    7BA2
07B10:  BTFSC  x2C.5
07B12:  BRA    7BA2
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07B14:  MOVLW  FE
07B16:  MOVWF  FF6
07B18:  MOVLW  06
07B1A:  MOVWF  FF7
07B1C:  MOVLB  0
07B1E:  CALL   2526
....................                putc('\n',CH2);
07B22:  MOVLW  0A
07B24:  MOVLB  D
07B26:  MOVWF  xCD
07B28:  MOVLB  0
07B2A:  CALL   24E0
....................                delay_ms(10);
07B2E:  MOVLW  0A
07B30:  MOVLB  D
07B32:  MOVWF  xCC
07B34:  MOVLB  0
07B36:  CALL   0A28
....................                
....................                SendSMS.B6 =1;
07B3A:  MOVLB  D
07B3C:  BSF    x48.5
....................                fprintf(CH2,"AT+CMGS=\"");
07B3E:  MOVLW  08
07B40:  MOVWF  FF6
07B42:  MOVLW  07
07B44:  MOVWF  FF7
07B46:  MOVLB  0
07B48:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
07B4C:  MOVLW  0A
07B4E:  MOVWF  FEA
07B50:  MOVLW  81
07B52:  MOVWF  FE9
07B54:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
07B58:  MOVLW  22
07B5A:  MOVLB  D
07B5C:  MOVWF  xCD
07B5E:  MOVLB  0
07B60:  CALL   24E0
....................                putc('\n',CH2);
07B64:  MOVLW  0A
07B66:  MOVLB  D
07B68:  MOVWF  xCD
07B6A:  MOVLB  0
07B6C:  CALL   24E0
....................                delay_ms(50);
07B70:  MOVLW  32
07B72:  MOVLB  D
07B74:  MOVWF  xCC
07B76:  MOVLB  0
07B78:  CALL   0A28
....................               
....................               fprintf(CH2,SMS_Massage6);
07B7C:  MOVLW  0B
07B7E:  MOVWF  FEA
07B80:  MOVLW  30
07B82:  MOVWF  FE9
07B84:  CALL   6824
....................               putc('\n',CH2);
07B88:  MOVLW  0A
07B8A:  MOVLB  D
07B8C:  MOVWF  xCD
07B8E:  MOVLB  0
07B90:  CALL   24E0
....................               putc(26,CH2);
07B94:  MOVLW  1A
07B96:  MOVLB  D
07B98:  MOVWF  xCD
07B9A:  MOVLB  0
07B9C:  CALL   24E0
07BA0:  MOVLB  D
....................             }
....................           }
....................       }
07BA2:  BRA    7BAA
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
07BA4:  BTFSS  x1C.5
07BA6:  BRA    7BAA
07BA8:  BCF    x2C.5
....................    }
07BAA:  BRA    7C64
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
07BAC:  MOVLW  00
07BAE:  BTFSC  x10.5
07BB0:  MOVLW  01
07BB2:  MOVWF  xCC
07BB4:  MOVLW  00
07BB6:  BTFSC  x18.5
07BB8:  MOVLW  01
07BBA:  XORWF  xCC,W
07BBC:  SUBLW  01
07BBE:  BNZ   7C5E
....................       {
....................          Output.B6 = 0;
07BC0:  BCF    x14.5
....................          // SMS Sending   
....................          if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
07BC2:  BTFSC  x48.5
07BC4:  BRA    7C5C
07BC6:  BTFSC  30.4
07BC8:  BRA    7C5C
07BCA:  BTFSC  x2C.5
07BCC:  BRA    7C5C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07BCE:  MOVLW  12
07BD0:  MOVWF  FF6
07BD2:  MOVLW  07
07BD4:  MOVWF  FF7
07BD6:  MOVLB  0
07BD8:  CALL   2526
....................             putc('\n',CH2);
07BDC:  MOVLW  0A
07BDE:  MOVLB  D
07BE0:  MOVWF  xCD
07BE2:  MOVLB  0
07BE4:  CALL   24E0
....................             delay_ms(10);
07BE8:  MOVLW  0A
07BEA:  MOVLB  D
07BEC:  MOVWF  xCC
07BEE:  MOVLB  0
07BF0:  CALL   0A28
....................             
....................             SendSMS.B6 =1;
07BF4:  MOVLB  D
07BF6:  BSF    x48.5
....................             fprintf(CH2,"AT+CMGS=\"");
07BF8:  MOVLW  1C
07BFA:  MOVWF  FF6
07BFC:  MOVLW  07
07BFE:  MOVWF  FF7
07C00:  MOVLB  0
07C02:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
07C06:  MOVLW  0A
07C08:  MOVWF  FEA
07C0A:  MOVLW  81
07C0C:  MOVWF  FE9
07C0E:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
07C12:  MOVLW  22
07C14:  MOVLB  D
07C16:  MOVWF  xCD
07C18:  MOVLB  0
07C1A:  CALL   24E0
....................             putc('\n',CH2);
07C1E:  MOVLW  0A
07C20:  MOVLB  D
07C22:  MOVWF  xCD
07C24:  MOVLB  0
07C26:  CALL   24E0
....................             delay_ms(50);
07C2A:  MOVLW  32
07C2C:  MOVLB  D
07C2E:  MOVWF  xCC
07C30:  MOVLB  0
07C32:  CALL   0A28
....................            
....................            fprintf(CH2,SMS_Massage6);
07C36:  MOVLW  0B
07C38:  MOVWF  FEA
07C3A:  MOVLW  30
07C3C:  MOVWF  FE9
07C3E:  CALL   6824
....................            putc('\n',CH2);
07C42:  MOVLW  0A
07C44:  MOVLB  D
07C46:  MOVWF  xCD
07C48:  MOVLB  0
07C4A:  CALL   24E0
....................            putc(26,CH2);
07C4E:  MOVLW  1A
07C50:  MOVLB  D
07C52:  MOVWF  xCD
07C54:  MOVLB  0
07C56:  CALL   24E0
07C5A:  MOVLB  D
....................          }
....................       }
07C5C:  BRA    7C64
....................       else
....................       {
....................          Output.B6 = 1;
07C5E:  BSF    x14.5
....................          SendSMS.B6 =0;
07C60:  BCF    x48.5
....................          functointest_f =0;
07C62:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
07C64:  BTFSS  x28.6
07C66:  BRA    7D74
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
07C68:  MOVLW  00
07C6A:  BTFSC  x10.6
07C6C:  MOVLW  01
07C6E:  MOVWF  xCC
07C70:  MOVLW  00
07C72:  BTFSC  x18.6
07C74:  MOVLW  01
07C76:  XORWF  xCC,W
07C78:  SUBLW  01
07C7A:  BNZ   7C80
07C7C:  BTFSC  x1C.6
07C7E:  BRA    7C84
07C80:  BTFSS  x30.6
07C82:  BRA    7D6C
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
07C84:  BTFSC  x2C.6
07C86:  BRA    7D6A
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07C88:  BTFSC  x30.6
07C8A:  BRA    7CA4
07C8C:  MOVLB  0
07C8E:  MOVF   x60,W
07C90:  SUBLW  0F
07C92:  BTFSC  FD8.2
07C94:  BRA    7C9A
07C96:  MOVLB  D
07C98:  BRA    7CA4
....................             {
....................                TimeBase1s = 100 ;            //reload again
07C9A:  MOVLW  64
07C9C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07C9E:  MOVFF  61,1D
07CA2:  MOVLB  D
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
07CA4:  BSF    x30.6
....................             if(FlashingFlag == 0)
07CA6:  BTFSC  1A.1
07CA8:  BRA    7CAE
....................             {
....................                Output.B7 = 0;           //Flash output1
07CAA:  BCF    x14.6
....................             }
07CAC:  BRA    7CB0
....................             else
....................             {
....................                Output.B7 = 1;
07CAE:  BSF    x14.6
....................             }
.................... 
....................             if (~AutoTestFlag)
07CB0:  BTFSC  1A.4
07CB2:  BRA    7CD0
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
07CB4:  BTFSC  x24.6
07CB6:  BRA    7CC2
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07CB8:  BSF    F89.4
07CBA:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07CBC:  BSF    F89.3
07CBE:  BCF    F92.3
....................                }
07CC0:  BRA    7CD0
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07CC2:  BTFSS  x20.6
07CC4:  BRA    7CCC
07CC6:  BSF    F89.4
07CC8:  BCF    F92.4
07CCA:  BRA    7CD0
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07CCC:  BSF    F89.3
07CCE:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
07CD0:  BTFSC  x48.6
07CD2:  BRA    7D6A
07CD4:  BTFSC  30.4
07CD6:  BRA    7D6A
07CD8:  BTFSC  x2C.6
07CDA:  BRA    7D6A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07CDC:  MOVLW  26
07CDE:  MOVWF  FF6
07CE0:  MOVLW  07
07CE2:  MOVWF  FF7
07CE4:  MOVLB  0
07CE6:  CALL   2526
....................                putc('\n',CH2);
07CEA:  MOVLW  0A
07CEC:  MOVLB  D
07CEE:  MOVWF  xCD
07CF0:  MOVLB  0
07CF2:  CALL   24E0
....................                delay_ms(10);
07CF6:  MOVLW  0A
07CF8:  MOVLB  D
07CFA:  MOVWF  xCC
07CFC:  MOVLB  0
07CFE:  CALL   0A28
....................                
....................                SendSMS.B7 =1;
07D02:  MOVLB  D
07D04:  BSF    x48.6
....................                fprintf(CH2,"AT+CMGS=\"");
07D06:  MOVLW  30
07D08:  MOVWF  FF6
07D0A:  MOVLW  07
07D0C:  MOVWF  FF7
07D0E:  MOVLB  0
07D10:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
07D14:  MOVLW  0A
07D16:  MOVWF  FEA
07D18:  MOVLW  81
07D1A:  MOVWF  FE9
07D1C:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
07D20:  MOVLW  22
07D22:  MOVLB  D
07D24:  MOVWF  xCD
07D26:  MOVLB  0
07D28:  CALL   24E0
....................                putc('\n',CH2);
07D2C:  MOVLW  0A
07D2E:  MOVLB  D
07D30:  MOVWF  xCD
07D32:  MOVLB  0
07D34:  CALL   24E0
....................                delay_ms(50);
07D38:  MOVLW  32
07D3A:  MOVLB  D
07D3C:  MOVWF  xCC
07D3E:  MOVLB  0
07D40:  CALL   0A28
....................               
....................               fprintf(CH2,SMS_Massage7);  
07D44:  MOVLW  0B
07D46:  MOVWF  FEA
07D48:  MOVLW  50
07D4A:  MOVWF  FE9
07D4C:  CALL   6824
....................               putc('\n',CH2);
07D50:  MOVLW  0A
07D52:  MOVLB  D
07D54:  MOVWF  xCD
07D56:  MOVLB  0
07D58:  CALL   24E0
....................              putc(26,CH2);
07D5C:  MOVLW  1A
07D5E:  MOVLB  D
07D60:  MOVWF  xCD
07D62:  MOVLB  0
07D64:  CALL   24E0
07D68:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
07D6A:  BRA    7D72
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
07D6C:  BTFSS  x1C.6
07D6E:  BRA    7D72
07D70:  BCF    x2C.6
....................    }
07D72:  BRA    7E2C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
07D74:  MOVLW  00
07D76:  BTFSC  x10.6
07D78:  MOVLW  01
07D7A:  MOVWF  xCC
07D7C:  MOVLW  00
07D7E:  BTFSC  x18.6
07D80:  MOVLW  01
07D82:  XORWF  xCC,W
07D84:  SUBLW  01
07D86:  BNZ   7E26
....................       {
....................          Output.B7 = 0;
07D88:  BCF    x14.6
....................          // SMS Sending   
....................          if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
07D8A:  BTFSC  x48.6
07D8C:  BRA    7E24
07D8E:  BTFSC  30.4
07D90:  BRA    7E24
07D92:  BTFSC  x2C.6
07D94:  BRA    7E24
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07D96:  MOVLW  3A
07D98:  MOVWF  FF6
07D9A:  MOVLW  07
07D9C:  MOVWF  FF7
07D9E:  MOVLB  0
07DA0:  CALL   2526
....................             putc('\n',CH2);
07DA4:  MOVLW  0A
07DA6:  MOVLB  D
07DA8:  MOVWF  xCD
07DAA:  MOVLB  0
07DAC:  CALL   24E0
....................             delay_ms(10);
07DB0:  MOVLW  0A
07DB2:  MOVLB  D
07DB4:  MOVWF  xCC
07DB6:  MOVLB  0
07DB8:  CALL   0A28
....................             
....................             SendSMS.B7 =1;
07DBC:  MOVLB  D
07DBE:  BSF    x48.6
....................             fprintf(CH2,"AT+CMGS=\"");
07DC0:  MOVLW  44
07DC2:  MOVWF  FF6
07DC4:  MOVLW  07
07DC6:  MOVWF  FF7
07DC8:  MOVLB  0
07DCA:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
07DCE:  MOVLW  0A
07DD0:  MOVWF  FEA
07DD2:  MOVLW  81
07DD4:  MOVWF  FE9
07DD6:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
07DDA:  MOVLW  22
07DDC:  MOVLB  D
07DDE:  MOVWF  xCD
07DE0:  MOVLB  0
07DE2:  CALL   24E0
....................             putc('\n',CH2);
07DE6:  MOVLW  0A
07DE8:  MOVLB  D
07DEA:  MOVWF  xCD
07DEC:  MOVLB  0
07DEE:  CALL   24E0
....................             delay_ms(50);
07DF2:  MOVLW  32
07DF4:  MOVLB  D
07DF6:  MOVWF  xCC
07DF8:  MOVLB  0
07DFA:  CALL   0A28
....................            
....................            fprintf(CH2,SMS_Massage7);  
07DFE:  MOVLW  0B
07E00:  MOVWF  FEA
07E02:  MOVLW  50
07E04:  MOVWF  FE9
07E06:  CALL   6824
....................            putc('\n',CH2);
07E0A:  MOVLW  0A
07E0C:  MOVLB  D
07E0E:  MOVWF  xCD
07E10:  MOVLB  0
07E12:  CALL   24E0
....................           putc(26,CH2);
07E16:  MOVLW  1A
07E18:  MOVLB  D
07E1A:  MOVWF  xCD
07E1C:  MOVLB  0
07E1E:  CALL   24E0
07E22:  MOVLB  D
....................          }
....................       }
07E24:  BRA    7E2C
....................       else
....................       {
....................          Output.B7 = 1;
07E26:  BSF    x14.6
....................          SendSMS.B7 =0;
07E28:  BCF    x48.6
....................          functointest_f =0;
07E2A:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
07E2C:  BTFSS  x28.7
07E2E:  BRA    7F3C
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
07E30:  MOVLW  00
07E32:  BTFSC  x10.7
07E34:  MOVLW  01
07E36:  MOVWF  xCC
07E38:  MOVLW  00
07E3A:  BTFSC  x18.7
07E3C:  MOVLW  01
07E3E:  XORWF  xCC,W
07E40:  SUBLW  01
07E42:  BNZ   7E48
07E44:  BTFSC  x1C.7
07E46:  BRA    7E4C
07E48:  BTFSS  x30.7
07E4A:  BRA    7F34
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
07E4C:  BTFSC  x2C.7
07E4E:  BRA    7F32
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07E50:  BTFSC  x30.7
07E52:  BRA    7E6C
07E54:  MOVLB  0
07E56:  MOVF   x60,W
07E58:  SUBLW  0F
07E5A:  BTFSC  FD8.2
07E5C:  BRA    7E62
07E5E:  MOVLB  D
07E60:  BRA    7E6C
....................             {
....................                TimeBase1s = 100 ;            //reload again
07E62:  MOVLW  64
07E64:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07E66:  MOVFF  61,1D
07E6A:  MOVLB  D
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
07E6C:  BSF    x30.7
....................             if(FlashingFlag == 0)
07E6E:  BTFSC  1A.1
07E70:  BRA    7E76
....................             {
....................                Output.B8 = 0;           //Flash output1
07E72:  BCF    x14.7
....................             }
07E74:  BRA    7E78
....................             else
....................             {
....................                Output.B8 = 1;
07E76:  BSF    x14.7
....................             }
.................... 
....................             if (~AutoTestFlag)
07E78:  BTFSC  1A.4
07E7A:  BRA    7E98
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
07E7C:  BTFSC  x24.7
07E7E:  BRA    7E8A
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07E80:  BSF    F89.4
07E82:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07E84:  BSF    F89.3
07E86:  BCF    F92.3
....................                }
07E88:  BRA    7E98
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07E8A:  BTFSS  x20.7
07E8C:  BRA    7E94
07E8E:  BSF    F89.4
07E90:  BCF    F92.4
07E92:  BRA    7E98
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07E94:  BSF    F89.3
07E96:  BCF    F92.3
....................                }
....................             }
....................                   // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
07E98:  BTFSC  x48.7
07E9A:  BRA    7F32
07E9C:  BTFSC  30.4
07E9E:  BRA    7F32
07EA0:  BTFSC  x2C.7
07EA2:  BRA    7F32
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07EA4:  MOVLW  4E
07EA6:  MOVWF  FF6
07EA8:  MOVLW  07
07EAA:  MOVWF  FF7
07EAC:  MOVLB  0
07EAE:  CALL   2526
....................             putc('\n',CH2);
07EB2:  MOVLW  0A
07EB4:  MOVLB  D
07EB6:  MOVWF  xCD
07EB8:  MOVLB  0
07EBA:  CALL   24E0
....................             delay_ms(10);
07EBE:  MOVLW  0A
07EC0:  MOVLB  D
07EC2:  MOVWF  xCC
07EC4:  MOVLB  0
07EC6:  CALL   0A28
....................             
....................             SendSMS.B8 =1;
07ECA:  MOVLB  D
07ECC:  BSF    x48.7
....................             fprintf(CH2,"AT+CMGS=\"");
07ECE:  MOVLW  58
07ED0:  MOVWF  FF6
07ED2:  MOVLW  07
07ED4:  MOVWF  FF7
07ED6:  MOVLB  0
07ED8:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
07EDC:  MOVLW  0A
07EDE:  MOVWF  FEA
07EE0:  MOVLW  81
07EE2:  MOVWF  FE9
07EE4:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
07EE8:  MOVLW  22
07EEA:  MOVLB  D
07EEC:  MOVWF  xCD
07EEE:  MOVLB  0
07EF0:  CALL   24E0
....................             putc('\n',CH2);
07EF4:  MOVLW  0A
07EF6:  MOVLB  D
07EF8:  MOVWF  xCD
07EFA:  MOVLB  0
07EFC:  CALL   24E0
....................             delay_ms(50);
07F00:  MOVLW  32
07F02:  MOVLB  D
07F04:  MOVWF  xCC
07F06:  MOVLB  0
07F08:  CALL   0A28
....................            
....................            printf(SMS_Massage8);  
07F0C:  MOVLW  0B
07F0E:  MOVWF  FEA
07F10:  MOVLW  70
07F12:  MOVWF  FE9
07F14:  CALL   6824
....................            putc('\n',CH2);
07F18:  MOVLW  0A
07F1A:  MOVLB  D
07F1C:  MOVWF  xCD
07F1E:  MOVLB  0
07F20:  CALL   24E0
....................           putc(26,CH2);
07F24:  MOVLW  1A
07F26:  MOVLB  D
07F28:  MOVWF  xCD
07F2A:  MOVLB  0
07F2C:  CALL   24E0
07F30:  MOVLB  D
....................          }
....................        }
.................... 
....................       }
07F32:  BRA    7F3A
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
07F34:  BTFSS  x1C.7
07F36:  BRA    7F3A
07F38:  BCF    x2C.7
....................    }
07F3A:  BRA    7FF4
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
07F3C:  MOVLW  00
07F3E:  BTFSC  x10.7
07F40:  MOVLW  01
07F42:  MOVWF  xCC
07F44:  MOVLW  00
07F46:  BTFSC  x18.7
07F48:  MOVLW  01
07F4A:  XORWF  xCC,W
07F4C:  SUBLW  01
07F4E:  BNZ   7FEE
....................       {
....................          Output.B8 = 0;
07F50:  BCF    x14.7
....................                // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
07F52:  BTFSC  x48.7
07F54:  BRA    7FEC
07F56:  BTFSC  30.4
07F58:  BRA    7FEC
07F5A:  BTFSC  x2C.7
07F5C:  BRA    7FEC
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07F5E:  MOVLW  62
07F60:  MOVWF  FF6
07F62:  MOVLW  07
07F64:  MOVWF  FF7
07F66:  MOVLB  0
07F68:  CALL   2526
....................             putc('\n',CH2);
07F6C:  MOVLW  0A
07F6E:  MOVLB  D
07F70:  MOVWF  xCD
07F72:  MOVLB  0
07F74:  CALL   24E0
....................             delay_ms(10);
07F78:  MOVLW  0A
07F7A:  MOVLB  D
07F7C:  MOVWF  xCC
07F7E:  MOVLB  0
07F80:  CALL   0A28
....................             
....................             SendSMS.B8 =1;
07F84:  MOVLB  D
07F86:  BSF    x48.7
....................             fprintf(CH2,"AT+CMGS=\"");
07F88:  MOVLW  6C
07F8A:  MOVWF  FF6
07F8C:  MOVLW  07
07F8E:  MOVWF  FF7
07F90:  MOVLB  0
07F92:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
07F96:  MOVLW  0A
07F98:  MOVWF  FEA
07F9A:  MOVLW  81
07F9C:  MOVWF  FE9
07F9E:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
07FA2:  MOVLW  22
07FA4:  MOVLB  D
07FA6:  MOVWF  xCD
07FA8:  MOVLB  0
07FAA:  CALL   24E0
....................             putc('\n',CH2);
07FAE:  MOVLW  0A
07FB0:  MOVLB  D
07FB2:  MOVWF  xCD
07FB4:  MOVLB  0
07FB6:  CALL   24E0
....................             delay_ms(50);
07FBA:  MOVLW  32
07FBC:  MOVLB  D
07FBE:  MOVWF  xCC
07FC0:  MOVLB  0
07FC2:  CALL   0A28
....................            
....................            printf(SMS_Massage8);  
07FC6:  MOVLW  0B
07FC8:  MOVWF  FEA
07FCA:  MOVLW  70
07FCC:  MOVWF  FE9
07FCE:  CALL   6824
....................            putc('\n',CH2);
07FD2:  MOVLW  0A
07FD4:  MOVLB  D
07FD6:  MOVWF  xCD
07FD8:  MOVLB  0
07FDA:  CALL   24E0
....................           putc(26,CH2);
07FDE:  MOVLW  1A
07FE0:  MOVLB  D
07FE2:  MOVWF  xCD
07FE4:  MOVLB  0
07FE6:  CALL   24E0
07FEA:  MOVLB  D
....................          }
....................       }
07FEC:  BRA    7FF4
....................       else
....................       {
....................          Output.B8 = 1;
07FEE:  BSF    x14.7
....................          SendSMS.B8 =0;
07FF0:  BCF    x48.7
....................          functointest_f =0;
07FF2:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
07FF4:  BTFSS  x29.0
07FF6:  BRA    8104
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
07FF8:  MOVLW  00
07FFA:  BTFSC  x11.0
07FFC:  MOVLW  01
07FFE:  MOVWF  xCC
08000:  MOVLW  00
08002:  BTFSC  x19.0
08004:  MOVLW  01
08006:  XORWF  xCC,W
08008:  SUBLW  01
0800A:  BNZ   8010
0800C:  BTFSC  x1D.0
0800E:  BRA    8014
08010:  BTFSS  x31.0
08012:  BRA    80FC
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
08014:  BTFSC  x2D.0
08016:  BRA    80FA
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08018:  BTFSC  x31.0
0801A:  BRA    8034
0801C:  MOVLB  0
0801E:  MOVF   x60,W
08020:  SUBLW  0F
08022:  BTFSC  FD8.2
08024:  BRA    802A
08026:  MOVLB  D
08028:  BRA    8034
....................             {
....................                TimeBase1s = 100 ;            //reload again
0802A:  MOVLW  64
0802C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0802E:  MOVFF  61,1D
08032:  MOVLB  D
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
08034:  BSF    x31.0
....................             if(FlashingFlag == 0)
08036:  BTFSC  1A.1
08038:  BRA    803E
....................             {
....................                Output.B9 = 0;           //Flash output1
0803A:  BCF    x15.0
....................             }
0803C:  BRA    8040
....................             else
....................             {
....................                Output.B9 = 1;
0803E:  BSF    x15.0
....................             }
.................... 
....................             if (~AutoTestFlag)
08040:  BTFSC  1A.4
08042:  BRA    8060
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
08044:  BTFSC  x25.0
08046:  BRA    8052
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08048:  BSF    F89.4
0804A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0804C:  BSF    F89.3
0804E:  BCF    F92.3
....................                }
08050:  BRA    8060
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08052:  BTFSS  x21.0
08054:  BRA    805C
08056:  BSF    F89.4
08058:  BCF    F92.4
0805A:  BRA    8060
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0805C:  BSF    F89.3
0805E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
08060:  BTFSC  x49.0
08062:  BRA    80FA
08064:  BTFSC  30.4
08066:  BRA    80FA
08068:  BTFSC  x2D.0
0806A:  BRA    80FA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0806C:  MOVLW  76
0806E:  MOVWF  FF6
08070:  MOVLW  07
08072:  MOVWF  FF7
08074:  MOVLB  0
08076:  CALL   2526
....................                putc('\n',CH2);
0807A:  MOVLW  0A
0807C:  MOVLB  D
0807E:  MOVWF  xCD
08080:  MOVLB  0
08082:  CALL   24E0
....................                delay_ms(10);
08086:  MOVLW  0A
08088:  MOVLB  D
0808A:  MOVWF  xCC
0808C:  MOVLB  0
0808E:  CALL   0A28
....................                
....................                SendSMS.B9 =1;
08092:  MOVLB  D
08094:  BSF    x49.0
....................                fprintf(CH2,"AT+CMGS=\"");
08096:  MOVLW  80
08098:  MOVWF  FF6
0809A:  MOVLW  07
0809C:  MOVWF  FF7
0809E:  MOVLB  0
080A0:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
080A4:  MOVLW  0A
080A6:  MOVWF  FEA
080A8:  MOVLW  81
080AA:  MOVWF  FE9
080AC:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
080B0:  MOVLW  22
080B2:  MOVLB  D
080B4:  MOVWF  xCD
080B6:  MOVLB  0
080B8:  CALL   24E0
....................                putc('\n',CH2);
080BC:  MOVLW  0A
080BE:  MOVLB  D
080C0:  MOVWF  xCD
080C2:  MOVLB  0
080C4:  CALL   24E0
....................                delay_ms(50);
080C8:  MOVLW  32
080CA:  MOVLB  D
080CC:  MOVWF  xCC
080CE:  MOVLB  0
080D0:  CALL   0A28
....................               
....................               printf(SMS_Massage9);  
080D4:  MOVLW  0B
080D6:  MOVWF  FEA
080D8:  MOVLW  90
080DA:  MOVWF  FE9
080DC:  CALL   6824
....................               putc('\n',CH2);
080E0:  MOVLW  0A
080E2:  MOVLB  D
080E4:  MOVWF  xCD
080E6:  MOVLB  0
080E8:  CALL   24E0
....................               putc(26,CH2);
080EC:  MOVLW  1A
080EE:  MOVLB  D
080F0:  MOVWF  xCD
080F2:  MOVLB  0
080F4:  CALL   24E0
080F8:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
080FA:  BRA    8102
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
080FC:  BTFSS  x1D.0
080FE:  BRA    8102
08100:  BCF    x2D.0
....................    }
08102:  BRA    81BC
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
08104:  MOVLW  00
08106:  BTFSC  x11.0
08108:  MOVLW  01
0810A:  MOVWF  xCC
0810C:  MOVLW  00
0810E:  BTFSC  x19.0
08110:  MOVLW  01
08112:  XORWF  xCC,W
08114:  SUBLW  01
08116:  BNZ   81B6
....................       {
....................          Output.B9 = 0;
08118:  BCF    x15.0
....................          // SMS Sending   
....................          if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
0811A:  BTFSC  x49.0
0811C:  BRA    81B4
0811E:  BTFSC  30.4
08120:  BRA    81B4
08122:  BTFSC  x2D.0
08124:  BRA    81B4
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08126:  MOVLW  8A
08128:  MOVWF  FF6
0812A:  MOVLW  07
0812C:  MOVWF  FF7
0812E:  MOVLB  0
08130:  CALL   2526
....................             putc('\n',CH2);
08134:  MOVLW  0A
08136:  MOVLB  D
08138:  MOVWF  xCD
0813A:  MOVLB  0
0813C:  CALL   24E0
....................             delay_ms(10);
08140:  MOVLW  0A
08142:  MOVLB  D
08144:  MOVWF  xCC
08146:  MOVLB  0
08148:  CALL   0A28
....................             
....................             SendSMS.B9 =1;
0814C:  MOVLB  D
0814E:  BSF    x49.0
....................             fprintf(CH2,"AT+CMGS=\"");
08150:  MOVLW  94
08152:  MOVWF  FF6
08154:  MOVLW  07
08156:  MOVWF  FF7
08158:  MOVLB  0
0815A:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
0815E:  MOVLW  0A
08160:  MOVWF  FEA
08162:  MOVLW  81
08164:  MOVWF  FE9
08166:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
0816A:  MOVLW  22
0816C:  MOVLB  D
0816E:  MOVWF  xCD
08170:  MOVLB  0
08172:  CALL   24E0
....................             putc('\n',CH2);
08176:  MOVLW  0A
08178:  MOVLB  D
0817A:  MOVWF  xCD
0817C:  MOVLB  0
0817E:  CALL   24E0
....................             delay_ms(50);
08182:  MOVLW  32
08184:  MOVLB  D
08186:  MOVWF  xCC
08188:  MOVLB  0
0818A:  CALL   0A28
....................            
....................            printf(SMS_Massage9);  
0818E:  MOVLW  0B
08190:  MOVWF  FEA
08192:  MOVLW  90
08194:  MOVWF  FE9
08196:  CALL   6824
....................            putc('\n',CH2);
0819A:  MOVLW  0A
0819C:  MOVLB  D
0819E:  MOVWF  xCD
081A0:  MOVLB  0
081A2:  CALL   24E0
....................            putc(26,CH2);
081A6:  MOVLW  1A
081A8:  MOVLB  D
081AA:  MOVWF  xCD
081AC:  MOVLB  0
081AE:  CALL   24E0
081B2:  MOVLB  D
....................          }
....................       }
081B4:  BRA    81BC
....................       else
....................       {
....................          Output.B9 = 1;
081B6:  BSF    x15.0
....................          SendSMS.B9 =0;
081B8:  BCF    x49.0
....................          functointest_f =0;
081BA:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
081BC:  BTFSS  x29.1
081BE:  BRA    82CC
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
081C0:  MOVLW  00
081C2:  BTFSC  x11.1
081C4:  MOVLW  01
081C6:  MOVWF  xCC
081C8:  MOVLW  00
081CA:  BTFSC  x19.1
081CC:  MOVLW  01
081CE:  XORWF  xCC,W
081D0:  SUBLW  01
081D2:  BNZ   81D8
081D4:  BTFSC  x1D.1
081D6:  BRA    81DC
081D8:  BTFSS  x31.1
081DA:  BRA    82C4
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
081DC:  BTFSC  x2D.1
081DE:  BRA    82C2
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
081E0:  BTFSC  x31.1
081E2:  BRA    81FC
081E4:  MOVLB  0
081E6:  MOVF   x60,W
081E8:  SUBLW  0F
081EA:  BTFSC  FD8.2
081EC:  BRA    81F2
081EE:  MOVLB  D
081F0:  BRA    81FC
....................             {
....................                TimeBase1s = 100 ;            //reload again
081F2:  MOVLW  64
081F4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
081F6:  MOVFF  61,1D
081FA:  MOVLB  D
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
081FC:  BSF    x31.1
....................             if(FlashingFlag == 0)
081FE:  BTFSC  1A.1
08200:  BRA    8206
....................             {
....................                Output.B10 = 0;           //Flash output1
08202:  BCF    x15.1
....................             }
08204:  BRA    8208
....................             else
....................             {
....................                Output.B10 = 1;
08206:  BSF    x15.1
....................             }
.................... 
....................             if (~AutoTestFlag)
08208:  BTFSC  1A.4
0820A:  BRA    8228
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
0820C:  BTFSC  x25.1
0820E:  BRA    821A
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08210:  BSF    F89.4
08212:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08214:  BSF    F89.3
08216:  BCF    F92.3
....................                }
08218:  BRA    8228
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0821A:  BTFSS  x21.1
0821C:  BRA    8224
0821E:  BSF    F89.4
08220:  BCF    F92.4
08222:  BRA    8228
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08224:  BSF    F89.3
08226:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
08228:  BTFSC  x49.1
0822A:  BRA    82C2
0822C:  BTFSC  30.4
0822E:  BRA    82C2
08230:  BTFSC  x2D.1
08232:  BRA    82C2
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08234:  MOVLW  9E
08236:  MOVWF  FF6
08238:  MOVLW  07
0823A:  MOVWF  FF7
0823C:  MOVLB  0
0823E:  CALL   2526
....................                putc('\n',CH2);
08242:  MOVLW  0A
08244:  MOVLB  D
08246:  MOVWF  xCD
08248:  MOVLB  0
0824A:  CALL   24E0
....................                delay_ms(10);
0824E:  MOVLW  0A
08250:  MOVLB  D
08252:  MOVWF  xCC
08254:  MOVLB  0
08256:  CALL   0A28
....................                
....................                SendSMS.B10 =1;
0825A:  MOVLB  D
0825C:  BSF    x49.1
....................                fprintf(CH2,"AT+CMGS=\"");
0825E:  MOVLW  A8
08260:  MOVWF  FF6
08262:  MOVLW  07
08264:  MOVWF  FF7
08266:  MOVLB  0
08268:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
0826C:  MOVLW  0A
0826E:  MOVWF  FEA
08270:  MOVLW  81
08272:  MOVWF  FE9
08274:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
08278:  MOVLW  22
0827A:  MOVLB  D
0827C:  MOVWF  xCD
0827E:  MOVLB  0
08280:  CALL   24E0
....................                putc('\n',CH2);
08284:  MOVLW  0A
08286:  MOVLB  D
08288:  MOVWF  xCD
0828A:  MOVLB  0
0828C:  CALL   24E0
....................                delay_ms(50);
08290:  MOVLW  32
08292:  MOVLB  D
08294:  MOVWF  xCC
08296:  MOVLB  0
08298:  CALL   0A28
....................               
....................               printf(SMS_Massage10);  
0829C:  MOVLW  0B
0829E:  MOVWF  FEA
082A0:  MOVLW  B0
082A2:  MOVWF  FE9
082A4:  CALL   6824
....................               putc('\n',CH2);
082A8:  MOVLW  0A
082AA:  MOVLB  D
082AC:  MOVWF  xCD
082AE:  MOVLB  0
082B0:  CALL   24E0
....................               putc(26,CH2);
082B4:  MOVLW  1A
082B6:  MOVLB  D
082B8:  MOVWF  xCD
082BA:  MOVLB  0
082BC:  CALL   24E0
082C0:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
082C2:  BRA    82CA
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
082C4:  BTFSS  x1D.1
082C6:  BRA    82CA
082C8:  BCF    x2D.1
....................    }
082CA:  BRA    8384
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
082CC:  MOVLW  00
082CE:  BTFSC  x11.1
082D0:  MOVLW  01
082D2:  MOVWF  xCC
082D4:  MOVLW  00
082D6:  BTFSC  x19.1
082D8:  MOVLW  01
082DA:  XORWF  xCC,W
082DC:  SUBLW  01
082DE:  BNZ   837E
....................       {
....................          Output.B10 = 0;
082E0:  BCF    x15.1
....................          // SMS Sending   
....................          if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
082E2:  BTFSC  x49.1
082E4:  BRA    837C
082E6:  BTFSC  30.4
082E8:  BRA    837C
082EA:  BTFSC  x2D.1
082EC:  BRA    837C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
082EE:  MOVLW  B2
082F0:  MOVWF  FF6
082F2:  MOVLW  07
082F4:  MOVWF  FF7
082F6:  MOVLB  0
082F8:  CALL   2526
....................             putc('\n',CH2);
082FC:  MOVLW  0A
082FE:  MOVLB  D
08300:  MOVWF  xCD
08302:  MOVLB  0
08304:  CALL   24E0
....................             delay_ms(10);
08308:  MOVLW  0A
0830A:  MOVLB  D
0830C:  MOVWF  xCC
0830E:  MOVLB  0
08310:  CALL   0A28
....................             
....................             SendSMS.B10 =1;
08314:  MOVLB  D
08316:  BSF    x49.1
....................             fprintf(CH2,"AT+CMGS=\"");
08318:  MOVLW  BC
0831A:  MOVWF  FF6
0831C:  MOVLW  07
0831E:  MOVWF  FF7
08320:  MOVLB  0
08322:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
08326:  MOVLW  0A
08328:  MOVWF  FEA
0832A:  MOVLW  81
0832C:  MOVWF  FE9
0832E:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
08332:  MOVLW  22
08334:  MOVLB  D
08336:  MOVWF  xCD
08338:  MOVLB  0
0833A:  CALL   24E0
....................             putc('\n',CH2);
0833E:  MOVLW  0A
08340:  MOVLB  D
08342:  MOVWF  xCD
08344:  MOVLB  0
08346:  CALL   24E0
....................             delay_ms(50);
0834A:  MOVLW  32
0834C:  MOVLB  D
0834E:  MOVWF  xCC
08350:  MOVLB  0
08352:  CALL   0A28
....................            
....................            printf(SMS_Massage10);  
08356:  MOVLW  0B
08358:  MOVWF  FEA
0835A:  MOVLW  B0
0835C:  MOVWF  FE9
0835E:  CALL   6824
....................            putc('\n',CH2);
08362:  MOVLW  0A
08364:  MOVLB  D
08366:  MOVWF  xCD
08368:  MOVLB  0
0836A:  CALL   24E0
....................            putc(26,CH2);
0836E:  MOVLW  1A
08370:  MOVLB  D
08372:  MOVWF  xCD
08374:  MOVLB  0
08376:  CALL   24E0
0837A:  MOVLB  D
....................          }
....................       }
0837C:  BRA    8384
....................       else
....................       {
....................          Output.B10 = 1;
0837E:  BSF    x15.1
....................          SendSMS.B10 =0;
08380:  BCF    x49.1
....................          functointest_f =0;
08382:  BCF    30.4
....................       }
....................    }
.................... //}
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if(AlarmIndicator.B11 == 1)    // Alarm Function
08384:  BTFSS  x29.2
08386:  BRA    8494
....................    {
....................       if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 1))|| In.B11 == 1)    // alarm1 occure and "Lock type"
08388:  MOVLW  00
0838A:  BTFSC  x11.2
0838C:  MOVLW  01
0838E:  MOVWF  xCC
08390:  MOVLW  00
08392:  BTFSC  x19.2
08394:  MOVLW  01
08396:  XORWF  xCC,W
08398:  SUBLW  01
0839A:  BNZ   83A0
0839C:  BTFSC  x1D.2
0839E:  BRA    83A4
083A0:  BTFSS  x31.2
083A2:  BRA    848C
....................       //if(Inputt.B11 == 0)
....................       {
....................          if(Ack.B11 == 0)
083A4:  BTFSC  x2D.2
083A6:  BRA    848A
....................          {
....................             if(In.B11 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
083A8:  BTFSC  x31.2
083AA:  BRA    83C4
083AC:  MOVLB  0
083AE:  MOVF   x60,W
083B0:  SUBLW  0F
083B2:  BTFSC  FD8.2
083B4:  BRA    83BA
083B6:  MOVLB  D
083B8:  BRA    83C4
....................             {
....................                TimeBase1s = 100 ;            //reload again
083BA:  MOVLW  64
083BC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
083BE:  MOVFF  61,1D
083C2:  MOVLB  D
....................             }
.................... 
....................             In.B11 = 1;                                 // setbit in1
083C4:  BSF    x31.2
....................             if(FlashingFlag == 0)
083C6:  BTFSC  1A.1
083C8:  BRA    83CE
....................             {
....................                Output.B11 = 0;           //Flash output1
083CA:  BCF    x15.2
....................             }
083CC:  BRA    83D0
....................             else
....................             {
....................                Output.B11 = 1;
083CE:  BSF    x15.2
....................             }
.................... 
....................             if (~AutoTestFlag)
083D0:  BTFSC  1A.4
083D2:  BRA    83F0
....................             {
....................                if(OutputBoth.B11 == 0)                  //Both output
083D4:  BTFSC  x25.2
083D6:  BRA    83E2
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
083D8:  BSF    F89.4
083DA:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
083DC:  BSF    F89.3
083DE:  BCF    F92.3
....................                }
083E0:  BRA    83F0
....................                else
....................                {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
083E2:  BTFSS  x21.2
083E4:  BRA    83EC
083E6:  BSF    F89.4
083E8:  BCF    F92.4
083EA:  BRA    83F0
....................                   else output_bit(Pbell,OnRelay);                          //Bell
083EC:  BSF    F89.3
083EE:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
083F0:  BTFSC  x49.2
083F2:  BRA    848A
083F4:  BTFSC  30.4
083F6:  BRA    848A
083F8:  BTFSC  x2D.2
083FA:  BRA    848A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
083FC:  MOVLW  C6
083FE:  MOVWF  FF6
08400:  MOVLW  07
08402:  MOVWF  FF7
08404:  MOVLB  0
08406:  CALL   2526
....................                putc('\n',CH2);
0840A:  MOVLW  0A
0840C:  MOVLB  D
0840E:  MOVWF  xCD
08410:  MOVLB  0
08412:  CALL   24E0
....................                delay_ms(10);
08416:  MOVLW  0A
08418:  MOVLB  D
0841A:  MOVWF  xCC
0841C:  MOVLB  0
0841E:  CALL   0A28
....................                
....................                SendSMS.B11 =1;
08422:  MOVLB  D
08424:  BSF    x49.2
....................                fprintf(CH2,"AT+CMGS=\"");
08426:  MOVLW  D0
08428:  MOVWF  FF6
0842A:  MOVLW  07
0842C:  MOVWF  FF7
0842E:  MOVLB  0
08430:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
08434:  MOVLW  0A
08436:  MOVWF  FEA
08438:  MOVLW  81
0843A:  MOVWF  FE9
0843C:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
08440:  MOVLW  22
08442:  MOVLB  D
08444:  MOVWF  xCD
08446:  MOVLB  0
08448:  CALL   24E0
....................                putc('\n',CH2);
0844C:  MOVLW  0A
0844E:  MOVLB  D
08450:  MOVWF  xCD
08452:  MOVLB  0
08454:  CALL   24E0
....................                delay_ms(50);
08458:  MOVLW  32
0845A:  MOVLB  D
0845C:  MOVWF  xCC
0845E:  MOVLB  0
08460:  CALL   0A28
....................               
....................               printf(SMS_Massage11);  
08464:  MOVLW  0B
08466:  MOVWF  FEA
08468:  MOVLW  D0
0846A:  MOVWF  FE9
0846C:  CALL   6824
....................               putc('\n',CH2);
08470:  MOVLW  0A
08472:  MOVLB  D
08474:  MOVWF  xCD
08476:  MOVLB  0
08478:  CALL   24E0
....................               putc(26,CH2);
0847C:  MOVLW  1A
0847E:  MOVLB  D
08480:  MOVWF  xCD
08482:  MOVLB  0
08484:  CALL   24E0
08488:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
0848A:  BRA    8492
....................       else if(FaultType.B11 == 1) Ack.B11 = 0;
0848C:  BTFSS  x1D.2
0848E:  BRA    8492
08490:  BCF    x2D.2
....................    }
08492:  BRA    854C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B11 ^ InputType.B11) == 1)
08494:  MOVLW  00
08496:  BTFSC  x11.2
08498:  MOVLW  01
0849A:  MOVWF  xCC
0849C:  MOVLW  00
0849E:  BTFSC  x19.2
084A0:  MOVLW  01
084A2:  XORWF  xCC,W
084A4:  SUBLW  01
084A6:  BNZ   8546
....................       {
....................          Output.B11 = 0;
084A8:  BCF    x15.2
....................          // SMS Sending   
....................          if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
084AA:  BTFSC  x49.2
084AC:  BRA    8544
084AE:  BTFSC  30.4
084B0:  BRA    8544
084B2:  BTFSC  x2D.2
084B4:  BRA    8544
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
084B6:  MOVLW  DA
084B8:  MOVWF  FF6
084BA:  MOVLW  07
084BC:  MOVWF  FF7
084BE:  MOVLB  0
084C0:  CALL   2526
....................             putc('\n',CH2);
084C4:  MOVLW  0A
084C6:  MOVLB  D
084C8:  MOVWF  xCD
084CA:  MOVLB  0
084CC:  CALL   24E0
....................             delay_ms(10);
084D0:  MOVLW  0A
084D2:  MOVLB  D
084D4:  MOVWF  xCC
084D6:  MOVLB  0
084D8:  CALL   0A28
....................             
....................             SendSMS.B11 =1;
084DC:  MOVLB  D
084DE:  BSF    x49.2
....................             fprintf(CH2,"AT+CMGS=\"");
084E0:  MOVLW  E4
084E2:  MOVWF  FF6
084E4:  MOVLW  07
084E6:  MOVWF  FF7
084E8:  MOVLB  0
084EA:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
084EE:  MOVLW  0A
084F0:  MOVWF  FEA
084F2:  MOVLW  81
084F4:  MOVWF  FE9
084F6:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
084FA:  MOVLW  22
084FC:  MOVLB  D
084FE:  MOVWF  xCD
08500:  MOVLB  0
08502:  CALL   24E0
....................             putc('\n',CH2);
08506:  MOVLW  0A
08508:  MOVLB  D
0850A:  MOVWF  xCD
0850C:  MOVLB  0
0850E:  CALL   24E0
....................             delay_ms(50);
08512:  MOVLW  32
08514:  MOVLB  D
08516:  MOVWF  xCC
08518:  MOVLB  0
0851A:  CALL   0A28
....................            
....................            printf(SMS_Massage11);  
0851E:  MOVLW  0B
08520:  MOVWF  FEA
08522:  MOVLW  D0
08524:  MOVWF  FE9
08526:  CALL   6824
....................            putc('\n',CH2);
0852A:  MOVLW  0A
0852C:  MOVLB  D
0852E:  MOVWF  xCD
08530:  MOVLB  0
08532:  CALL   24E0
....................            putc(26,CH2);
08536:  MOVLW  1A
08538:  MOVLB  D
0853A:  MOVWF  xCD
0853C:  MOVLB  0
0853E:  CALL   24E0
08542:  MOVLB  D
....................          }
....................       }
08544:  BRA    854C
....................       else
....................       {
....................          Output.B11 = 1;
08546:  BSF    x15.2
....................          SendSMS.B11 =0;
08548:  BCF    x49.2
....................          functointest_f =0;
0854A:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if(AlarmIndicator.B12 == 1)    // Alarm Function
0854C:  BTFSS  x29.3
0854E:  BRA    865C
....................    {
....................       if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 1))|| In.B12 == 1)    // alarm1 occure and "Lock type"
08550:  MOVLW  00
08552:  BTFSC  x11.3
08554:  MOVLW  01
08556:  MOVWF  xCC
08558:  MOVLW  00
0855A:  BTFSC  x19.3
0855C:  MOVLW  01
0855E:  XORWF  xCC,W
08560:  SUBLW  01
08562:  BNZ   8568
08564:  BTFSC  x1D.3
08566:  BRA    856C
08568:  BTFSS  x31.3
0856A:  BRA    8654
....................       //if(Inputt.B12 == 0)
....................       {
....................          if(Ack.B12 == 0)
0856C:  BTFSC  x2D.3
0856E:  BRA    8652
....................          {
....................             if(In.B12 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08570:  BTFSC  x31.3
08572:  BRA    858C
08574:  MOVLB  0
08576:  MOVF   x60,W
08578:  SUBLW  0F
0857A:  BTFSC  FD8.2
0857C:  BRA    8582
0857E:  MOVLB  D
08580:  BRA    858C
....................             {
....................                TimeBase1s = 100 ;            //reload again
08582:  MOVLW  64
08584:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08586:  MOVFF  61,1D
0858A:  MOVLB  D
....................             }
.................... 
....................             In.B12 = 1;                                 // setbit in1
0858C:  BSF    x31.3
....................             if(FlashingFlag == 0)
0858E:  BTFSC  1A.1
08590:  BRA    8596
....................             {
....................                Output.B12 = 0;           //Flash output1
08592:  BCF    x15.3
....................             }
08594:  BRA    8598
....................             else
....................             {
....................                Output.B12 = 1;
08596:  BSF    x15.3
....................             }
.................... 
....................             if (~AutoTestFlag)
08598:  BTFSC  1A.4
0859A:  BRA    85B8
....................             {
....................                if(OutputBoth.B12 == 0)                  //Both output
0859C:  BTFSC  x25.3
0859E:  BRA    85AA
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
085A0:  BSF    F89.4
085A2:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
085A4:  BSF    F89.3
085A6:  BCF    F92.3
....................                }
085A8:  BRA    85B8
....................                else
....................                {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
085AA:  BTFSS  x21.3
085AC:  BRA    85B4
085AE:  BSF    F89.4
085B0:  BCF    F92.4
085B2:  BRA    85B8
....................                   else output_bit(Pbell,OnRelay);                          //Bell
085B4:  BSF    F89.3
085B6:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
085B8:  BTFSC  x49.3
085BA:  BRA    8652
085BC:  BTFSC  30.4
085BE:  BRA    8652
085C0:  BTFSC  x2D.3
085C2:  BRA    8652
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
085C4:  MOVLW  EE
085C6:  MOVWF  FF6
085C8:  MOVLW  07
085CA:  MOVWF  FF7
085CC:  MOVLB  0
085CE:  CALL   2526
....................                putc('\n',CH2);
085D2:  MOVLW  0A
085D4:  MOVLB  D
085D6:  MOVWF  xCD
085D8:  MOVLB  0
085DA:  CALL   24E0
....................                delay_ms(10);
085DE:  MOVLW  0A
085E0:  MOVLB  D
085E2:  MOVWF  xCC
085E4:  MOVLB  0
085E6:  CALL   0A28
....................                
....................                SendSMS.B12 =1;
085EA:  MOVLB  D
085EC:  BSF    x49.3
....................                fprintf(CH2,"AT+CMGS=\"");
085EE:  MOVLW  F8
085F0:  MOVWF  FF6
085F2:  MOVLW  07
085F4:  MOVWF  FF7
085F6:  MOVLB  0
085F8:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
085FC:  MOVLW  0A
085FE:  MOVWF  FEA
08600:  MOVLW  81
08602:  MOVWF  FE9
08604:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
08608:  MOVLW  22
0860A:  MOVLB  D
0860C:  MOVWF  xCD
0860E:  MOVLB  0
08610:  CALL   24E0
....................                putc('\n',CH2);
08614:  MOVLW  0A
08616:  MOVLB  D
08618:  MOVWF  xCD
0861A:  MOVLB  0
0861C:  CALL   24E0
....................                delay_ms(50);
08620:  MOVLW  32
08622:  MOVLB  D
08624:  MOVWF  xCC
08626:  MOVLB  0
08628:  CALL   0A28
....................               
....................               printf(SMS_Massage12);  
0862C:  MOVLW  0B
0862E:  MOVWF  FEA
08630:  MOVLW  F0
08632:  MOVWF  FE9
08634:  CALL   6824
....................               putc('\n',CH2);
08638:  MOVLW  0A
0863A:  MOVLB  D
0863C:  MOVWF  xCD
0863E:  MOVLB  0
08640:  CALL   24E0
....................               putc(26,CH2);
08644:  MOVLW  1A
08646:  MOVLB  D
08648:  MOVWF  xCD
0864A:  MOVLB  0
0864C:  CALL   24E0
08650:  MOVLB  D
....................             }
....................         }
.................... 
....................       }
08652:  BRA    865A
....................       else if(FaultType.B12 == 1) Ack.B12 = 0;
08654:  BTFSS  x1D.3
08656:  BRA    865A
08658:  BCF    x2D.3
....................    }
0865A:  BRA    8714
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B12 ^ InputType.B12) == 1)
0865C:  MOVLW  00
0865E:  BTFSC  x11.3
08660:  MOVLW  01
08662:  MOVWF  xCC
08664:  MOVLW  00
08666:  BTFSC  x19.3
08668:  MOVLW  01
0866A:  XORWF  xCC,W
0866C:  SUBLW  01
0866E:  BNZ   870E
....................       {
....................          Output.B12 = 0;
08670:  BCF    x15.3
....................          // SMS Sending   
....................          if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
08672:  BTFSC  x49.3
08674:  BRA    870C
08676:  BTFSC  30.4
08678:  BRA    870C
0867A:  BTFSC  x2D.3
0867C:  BRA    870C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0867E:  MOVLW  02
08680:  MOVWF  FF6
08682:  MOVLW  08
08684:  MOVWF  FF7
08686:  MOVLB  0
08688:  CALL   2526
....................             putc('\n',CH2);
0868C:  MOVLW  0A
0868E:  MOVLB  D
08690:  MOVWF  xCD
08692:  MOVLB  0
08694:  CALL   24E0
....................             delay_ms(10);
08698:  MOVLW  0A
0869A:  MOVLB  D
0869C:  MOVWF  xCC
0869E:  MOVLB  0
086A0:  CALL   0A28
....................             
....................             SendSMS.B12 =1;
086A4:  MOVLB  D
086A6:  BSF    x49.3
....................             fprintf(CH2,"AT+CMGS=\"");
086A8:  MOVLW  0C
086AA:  MOVWF  FF6
086AC:  MOVLW  08
086AE:  MOVWF  FF7
086B0:  MOVLB  0
086B2:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
086B6:  MOVLW  0A
086B8:  MOVWF  FEA
086BA:  MOVLW  81
086BC:  MOVWF  FE9
086BE:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
086C2:  MOVLW  22
086C4:  MOVLB  D
086C6:  MOVWF  xCD
086C8:  MOVLB  0
086CA:  CALL   24E0
....................             putc('\n',CH2);
086CE:  MOVLW  0A
086D0:  MOVLB  D
086D2:  MOVWF  xCD
086D4:  MOVLB  0
086D6:  CALL   24E0
....................             delay_ms(50);
086DA:  MOVLW  32
086DC:  MOVLB  D
086DE:  MOVWF  xCC
086E0:  MOVLB  0
086E2:  CALL   0A28
....................            
....................            printf(SMS_Massage12);  
086E6:  MOVLW  0B
086E8:  MOVWF  FEA
086EA:  MOVLW  F0
086EC:  MOVWF  FE9
086EE:  CALL   6824
....................            putc('\n',CH2);
086F2:  MOVLW  0A
086F4:  MOVLB  D
086F6:  MOVWF  xCD
086F8:  MOVLB  0
086FA:  CALL   24E0
....................            putc(26,CH2);
086FE:  MOVLW  1A
08700:  MOVLB  D
08702:  MOVWF  xCD
08704:  MOVLB  0
08706:  CALL   24E0
0870A:  MOVLB  D
....................          }
....................       }
0870C:  BRA    8714
....................       else
....................       {
....................          Output.B12 = 1;
0870E:  BSF    x15.3
....................          SendSMS.B12 =0;
08710:  BCF    x49.3
....................          functointest_f =0;
08712:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if(AlarmIndicator.B13 == 1)    // Alarm Function
08714:  BTFSS  x29.4
08716:  BRA    8824
....................    {
....................       if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 1))|| In.B13 == 1)    // alarm1 occure and "Lock type"
08718:  MOVLW  00
0871A:  BTFSC  x11.4
0871C:  MOVLW  01
0871E:  MOVWF  xCC
08720:  MOVLW  00
08722:  BTFSC  x19.4
08724:  MOVLW  01
08726:  XORWF  xCC,W
08728:  SUBLW  01
0872A:  BNZ   8730
0872C:  BTFSC  x1D.4
0872E:  BRA    8734
08730:  BTFSS  x31.4
08732:  BRA    881C
....................       //if(Inputt.B13 == 0)
....................       {
....................          if(Ack.B13 == 0)
08734:  BTFSC  x2D.4
08736:  BRA    881A
....................          {
....................             if(In.B13 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08738:  BTFSC  x31.4
0873A:  BRA    8754
0873C:  MOVLB  0
0873E:  MOVF   x60,W
08740:  SUBLW  0F
08742:  BTFSC  FD8.2
08744:  BRA    874A
08746:  MOVLB  D
08748:  BRA    8754
....................             {
....................                TimeBase1s = 100 ;            //reload again
0874A:  MOVLW  64
0874C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0874E:  MOVFF  61,1D
08752:  MOVLB  D
....................             }
.................... 
....................             In.B13 = 1;                                 // setbit in1
08754:  BSF    x31.4
....................             if(FlashingFlag == 0)
08756:  BTFSC  1A.1
08758:  BRA    875E
....................             {
....................                Output.B13 = 0;           //Flash output1
0875A:  BCF    x15.4
....................             }
0875C:  BRA    8760
....................             else
....................             {
....................                Output.B13 = 1;
0875E:  BSF    x15.4
....................             }
.................... 
....................             if (~AutoTestFlag)
08760:  BTFSC  1A.4
08762:  BRA    8780
....................             {
....................                if(OutputBoth.B13 == 0)                  //Both output
08764:  BTFSC  x25.4
08766:  BRA    8772
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08768:  BSF    F89.4
0876A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0876C:  BSF    F89.3
0876E:  BCF    F92.3
....................                }
08770:  BRA    8780
....................                else
....................                {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08772:  BTFSS  x21.4
08774:  BRA    877C
08776:  BSF    F89.4
08778:  BCF    F92.4
0877A:  BRA    8780
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0877C:  BSF    F89.3
0877E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
08780:  BTFSC  x49.4
08782:  BRA    881A
08784:  BTFSC  30.4
08786:  BRA    881A
08788:  BTFSC  x2D.4
0878A:  BRA    881A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0878C:  MOVLW  16
0878E:  MOVWF  FF6
08790:  MOVLW  08
08792:  MOVWF  FF7
08794:  MOVLB  0
08796:  CALL   2526
....................                putc('\n',CH2);
0879A:  MOVLW  0A
0879C:  MOVLB  D
0879E:  MOVWF  xCD
087A0:  MOVLB  0
087A2:  CALL   24E0
....................                delay_ms(10);
087A6:  MOVLW  0A
087A8:  MOVLB  D
087AA:  MOVWF  xCC
087AC:  MOVLB  0
087AE:  CALL   0A28
....................                
....................                SendSMS.B13 =1;
087B2:  MOVLB  D
087B4:  BSF    x49.4
....................                fprintf(CH2,"AT+CMGS=\"");
087B6:  MOVLW  20
087B8:  MOVWF  FF6
087BA:  MOVLW  08
087BC:  MOVWF  FF7
087BE:  MOVLB  0
087C0:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
087C4:  MOVLW  0A
087C6:  MOVWF  FEA
087C8:  MOVLW  81
087CA:  MOVWF  FE9
087CC:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
087D0:  MOVLW  22
087D2:  MOVLB  D
087D4:  MOVWF  xCD
087D6:  MOVLB  0
087D8:  CALL   24E0
....................                putc('\n',CH2);
087DC:  MOVLW  0A
087DE:  MOVLB  D
087E0:  MOVWF  xCD
087E2:  MOVLB  0
087E4:  CALL   24E0
....................                delay_ms(50);
087E8:  MOVLW  32
087EA:  MOVLB  D
087EC:  MOVWF  xCC
087EE:  MOVLB  0
087F0:  CALL   0A28
....................               
....................               printf(SMS_Massage13);  
087F4:  MOVLW  0C
087F6:  MOVWF  FEA
087F8:  MOVLW  10
087FA:  MOVWF  FE9
087FC:  CALL   6824
....................               putc('\n',CH2);
08800:  MOVLW  0A
08802:  MOVLB  D
08804:  MOVWF  xCD
08806:  MOVLB  0
08808:  CALL   24E0
....................               putc(26,CH2);
0880C:  MOVLW  1A
0880E:  MOVLB  D
08810:  MOVWF  xCD
08812:  MOVLB  0
08814:  CALL   24E0
08818:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
0881A:  BRA    8822
....................       else if(FaultType.B13 == 1) Ack.B13 = 0;
0881C:  BTFSS  x1D.4
0881E:  BRA    8822
08820:  BCF    x2D.4
....................    }
08822:  BRA    88DC
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B13 ^ InputType.B13) == 1)
08824:  MOVLW  00
08826:  BTFSC  x11.4
08828:  MOVLW  01
0882A:  MOVWF  xCC
0882C:  MOVLW  00
0882E:  BTFSC  x19.4
08830:  MOVLW  01
08832:  XORWF  xCC,W
08834:  SUBLW  01
08836:  BNZ   88D6
....................       {
....................          Output.B13 = 0;
08838:  BCF    x15.4
....................          // SMS Sending   
....................          if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
0883A:  BTFSC  x49.4
0883C:  BRA    88D4
0883E:  BTFSC  30.4
08840:  BRA    88D4
08842:  BTFSC  x2D.4
08844:  BRA    88D4
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08846:  MOVLW  2A
08848:  MOVWF  FF6
0884A:  MOVLW  08
0884C:  MOVWF  FF7
0884E:  MOVLB  0
08850:  CALL   2526
....................             putc('\n',CH2);
08854:  MOVLW  0A
08856:  MOVLB  D
08858:  MOVWF  xCD
0885A:  MOVLB  0
0885C:  CALL   24E0
....................             delay_ms(10);
08860:  MOVLW  0A
08862:  MOVLB  D
08864:  MOVWF  xCC
08866:  MOVLB  0
08868:  CALL   0A28
....................             
....................             SendSMS.B13 =1;
0886C:  MOVLB  D
0886E:  BSF    x49.4
....................             fprintf(CH2,"AT+CMGS=\"");
08870:  MOVLW  34
08872:  MOVWF  FF6
08874:  MOVLW  08
08876:  MOVWF  FF7
08878:  MOVLB  0
0887A:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
0887E:  MOVLW  0A
08880:  MOVWF  FEA
08882:  MOVLW  81
08884:  MOVWF  FE9
08886:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
0888A:  MOVLW  22
0888C:  MOVLB  D
0888E:  MOVWF  xCD
08890:  MOVLB  0
08892:  CALL   24E0
....................             putc('\n',CH2);
08896:  MOVLW  0A
08898:  MOVLB  D
0889A:  MOVWF  xCD
0889C:  MOVLB  0
0889E:  CALL   24E0
....................             delay_ms(50);
088A2:  MOVLW  32
088A4:  MOVLB  D
088A6:  MOVWF  xCC
088A8:  MOVLB  0
088AA:  CALL   0A28
....................            
....................            printf(SMS_Massage13);  
088AE:  MOVLW  0C
088B0:  MOVWF  FEA
088B2:  MOVLW  10
088B4:  MOVWF  FE9
088B6:  CALL   6824
....................            putc('\n',CH2);
088BA:  MOVLW  0A
088BC:  MOVLB  D
088BE:  MOVWF  xCD
088C0:  MOVLB  0
088C2:  CALL   24E0
....................            putc(26,CH2);
088C6:  MOVLW  1A
088C8:  MOVLB  D
088CA:  MOVWF  xCD
088CC:  MOVLB  0
088CE:  CALL   24E0
088D2:  MOVLB  D
....................          }
....................       }
088D4:  BRA    88DC
....................       else
....................       {
....................          Output.B13 = 1;
088D6:  BSF    x15.4
....................          SendSMS.B13 =0;
088D8:  BCF    x49.4
....................          functointest_f =0;
088DA:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if(AlarmIndicator.B14 == 1)    // Alarm Function
088DC:  BTFSS  x29.5
088DE:  BRA    89EC
....................    {
....................       if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 1))|| In.B14 == 1)    // alarm1 occure and "Lock type"
088E0:  MOVLW  00
088E2:  BTFSC  x11.5
088E4:  MOVLW  01
088E6:  MOVWF  xCC
088E8:  MOVLW  00
088EA:  BTFSC  x19.5
088EC:  MOVLW  01
088EE:  XORWF  xCC,W
088F0:  SUBLW  01
088F2:  BNZ   88F8
088F4:  BTFSC  x1D.5
088F6:  BRA    88FC
088F8:  BTFSS  x31.5
088FA:  BRA    89E4
....................       //if(Inputt.B14 == 0)
....................       {
....................          if(Ack.B14 == 0)
088FC:  BTFSC  x2D.5
088FE:  BRA    89E2
....................          {
....................             if(In.B14 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08900:  BTFSC  x31.5
08902:  BRA    891C
08904:  MOVLB  0
08906:  MOVF   x60,W
08908:  SUBLW  0F
0890A:  BTFSC  FD8.2
0890C:  BRA    8912
0890E:  MOVLB  D
08910:  BRA    891C
....................             {
....................                TimeBase1s = 100 ;            //reload again
08912:  MOVLW  64
08914:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08916:  MOVFF  61,1D
0891A:  MOVLB  D
....................             }
.................... 
....................             In.B14 = 1;                                 // setbit in1
0891C:  BSF    x31.5
....................             if(FlashingFlag == 0)
0891E:  BTFSC  1A.1
08920:  BRA    8926
....................             {
....................                Output.B14 = 0;           //Flash output1
08922:  BCF    x15.5
....................             }
08924:  BRA    8928
....................             else
....................             {
....................                Output.B14 = 1;
08926:  BSF    x15.5
....................             }
.................... 
....................             if (~AutoTestFlag)
08928:  BTFSC  1A.4
0892A:  BRA    8948
....................             {
....................                if(OutputBoth.B14 == 0)                  //Both output
0892C:  BTFSC  x25.5
0892E:  BRA    893A
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08930:  BSF    F89.4
08932:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08934:  BSF    F89.3
08936:  BCF    F92.3
....................                }
08938:  BRA    8948
....................                else
....................                {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0893A:  BTFSS  x21.5
0893C:  BRA    8944
0893E:  BSF    F89.4
08940:  BCF    F92.4
08942:  BRA    8948
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08944:  BSF    F89.3
08946:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
08948:  BTFSC  x49.5
0894A:  BRA    89E2
0894C:  BTFSC  30.4
0894E:  BRA    89E2
08950:  BTFSC  x2D.5
08952:  BRA    89E2
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08954:  MOVLW  3E
08956:  MOVWF  FF6
08958:  MOVLW  08
0895A:  MOVWF  FF7
0895C:  MOVLB  0
0895E:  CALL   2526
....................                putc('\n',CH2);
08962:  MOVLW  0A
08964:  MOVLB  D
08966:  MOVWF  xCD
08968:  MOVLB  0
0896A:  CALL   24E0
....................                delay_ms(10);
0896E:  MOVLW  0A
08970:  MOVLB  D
08972:  MOVWF  xCC
08974:  MOVLB  0
08976:  CALL   0A28
....................                
....................                SendSMS.B14 =1;
0897A:  MOVLB  D
0897C:  BSF    x49.5
....................                fprintf(CH2,"AT+CMGS=\"");
0897E:  MOVLW  48
08980:  MOVWF  FF6
08982:  MOVLW  08
08984:  MOVWF  FF7
08986:  MOVLB  0
08988:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
0898C:  MOVLW  0A
0898E:  MOVWF  FEA
08990:  MOVLW  81
08992:  MOVWF  FE9
08994:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
08998:  MOVLW  22
0899A:  MOVLB  D
0899C:  MOVWF  xCD
0899E:  MOVLB  0
089A0:  CALL   24E0
....................                putc('\n',CH2);
089A4:  MOVLW  0A
089A6:  MOVLB  D
089A8:  MOVWF  xCD
089AA:  MOVLB  0
089AC:  CALL   24E0
....................                delay_ms(50);
089B0:  MOVLW  32
089B2:  MOVLB  D
089B4:  MOVWF  xCC
089B6:  MOVLB  0
089B8:  CALL   0A28
....................               
....................               printf(SMS_Massage14);  
089BC:  MOVLW  0C
089BE:  MOVWF  FEA
089C0:  MOVLW  30
089C2:  MOVWF  FE9
089C4:  CALL   6824
....................               putc('\n',CH2);
089C8:  MOVLW  0A
089CA:  MOVLB  D
089CC:  MOVWF  xCD
089CE:  MOVLB  0
089D0:  CALL   24E0
....................               putc(26,CH2);
089D4:  MOVLW  1A
089D6:  MOVLB  D
089D8:  MOVWF  xCD
089DA:  MOVLB  0
089DC:  CALL   24E0
089E0:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
089E2:  BRA    89EA
....................       else if(FaultType.B14 == 1) Ack.B14 = 0;
089E4:  BTFSS  x1D.5
089E6:  BRA    89EA
089E8:  BCF    x2D.5
....................    }
089EA:  BRA    8AA4
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B14 ^ InputType.B14) == 1)
089EC:  MOVLW  00
089EE:  BTFSC  x11.5
089F0:  MOVLW  01
089F2:  MOVWF  xCC
089F4:  MOVLW  00
089F6:  BTFSC  x19.5
089F8:  MOVLW  01
089FA:  XORWF  xCC,W
089FC:  SUBLW  01
089FE:  BNZ   8A9E
....................       {
....................          Output.B14 = 0;
08A00:  BCF    x15.5
....................          // SMS Sending   
....................          if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
08A02:  BTFSC  x49.5
08A04:  BRA    8A9C
08A06:  BTFSC  30.4
08A08:  BRA    8A9C
08A0A:  BTFSC  x2D.5
08A0C:  BRA    8A9C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08A0E:  MOVLW  52
08A10:  MOVWF  FF6
08A12:  MOVLW  08
08A14:  MOVWF  FF7
08A16:  MOVLB  0
08A18:  CALL   2526
....................             putc('\n',CH2);
08A1C:  MOVLW  0A
08A1E:  MOVLB  D
08A20:  MOVWF  xCD
08A22:  MOVLB  0
08A24:  CALL   24E0
....................             delay_ms(10);
08A28:  MOVLW  0A
08A2A:  MOVLB  D
08A2C:  MOVWF  xCC
08A2E:  MOVLB  0
08A30:  CALL   0A28
....................             
....................             SendSMS.B14 =1;
08A34:  MOVLB  D
08A36:  BSF    x49.5
....................             fprintf(CH2,"AT+CMGS=\"");
08A38:  MOVLW  5C
08A3A:  MOVWF  FF6
08A3C:  MOVLW  08
08A3E:  MOVWF  FF7
08A40:  MOVLB  0
08A42:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
08A46:  MOVLW  0A
08A48:  MOVWF  FEA
08A4A:  MOVLW  81
08A4C:  MOVWF  FE9
08A4E:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
08A52:  MOVLW  22
08A54:  MOVLB  D
08A56:  MOVWF  xCD
08A58:  MOVLB  0
08A5A:  CALL   24E0
....................             putc('\n',CH2);
08A5E:  MOVLW  0A
08A60:  MOVLB  D
08A62:  MOVWF  xCD
08A64:  MOVLB  0
08A66:  CALL   24E0
....................             delay_ms(50);
08A6A:  MOVLW  32
08A6C:  MOVLB  D
08A6E:  MOVWF  xCC
08A70:  MOVLB  0
08A72:  CALL   0A28
....................            
....................            printf(SMS_Massage14);  
08A76:  MOVLW  0C
08A78:  MOVWF  FEA
08A7A:  MOVLW  30
08A7C:  MOVWF  FE9
08A7E:  CALL   6824
....................            putc('\n',CH2);
08A82:  MOVLW  0A
08A84:  MOVLB  D
08A86:  MOVWF  xCD
08A88:  MOVLB  0
08A8A:  CALL   24E0
....................            putc(26,CH2);
08A8E:  MOVLW  1A
08A90:  MOVLB  D
08A92:  MOVWF  xCD
08A94:  MOVLB  0
08A96:  CALL   24E0
08A9A:  MOVLB  D
....................          }
....................       }
08A9C:  BRA    8AA4
....................       else
....................       {
....................          Output.B14 = 1;
08A9E:  BSF    x15.5
....................          SendSMS.B14 =0;
08AA0:  BCF    x49.5
....................          functointest_f =0;
08AA2:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if(AlarmIndicator.B15 == 1)    // Alarm Function
08AA4:  BTFSS  x29.6
08AA6:  BRA    8BB4
....................    {
....................       if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 1))|| In.B15 == 1)    // alarm1 occure and "Lock type"
08AA8:  MOVLW  00
08AAA:  BTFSC  x11.6
08AAC:  MOVLW  01
08AAE:  MOVWF  xCC
08AB0:  MOVLW  00
08AB2:  BTFSC  x19.6
08AB4:  MOVLW  01
08AB6:  XORWF  xCC,W
08AB8:  SUBLW  01
08ABA:  BNZ   8AC0
08ABC:  BTFSC  x1D.6
08ABE:  BRA    8AC4
08AC0:  BTFSS  x31.6
08AC2:  BRA    8BAC
....................       //if(Inputt.B15 == 0)
....................       {
....................          if(Ack.B15 == 0)
08AC4:  BTFSC  x2D.6
08AC6:  BRA    8BAA
....................          {
....................             if(In.B15 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08AC8:  BTFSC  x31.6
08ACA:  BRA    8AE4
08ACC:  MOVLB  0
08ACE:  MOVF   x60,W
08AD0:  SUBLW  0F
08AD2:  BTFSC  FD8.2
08AD4:  BRA    8ADA
08AD6:  MOVLB  D
08AD8:  BRA    8AE4
....................             {
....................                TimeBase1s = 100 ;            //reload again
08ADA:  MOVLW  64
08ADC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08ADE:  MOVFF  61,1D
08AE2:  MOVLB  D
....................             }
.................... 
....................             In.B15 = 1;                                 // setbit in1
08AE4:  BSF    x31.6
....................             if(FlashingFlag == 0)
08AE6:  BTFSC  1A.1
08AE8:  BRA    8AEE
....................             {
....................                Output.B15 = 0;           //Flash output1
08AEA:  BCF    x15.6
....................             }
08AEC:  BRA    8AF0
....................             else
....................             {
....................                Output.B15 = 1;
08AEE:  BSF    x15.6
....................             }
.................... 
....................             if (~AutoTestFlag)
08AF0:  BTFSC  1A.4
08AF2:  BRA    8B10
....................             {
....................                if(OutputBoth.B15 == 0)                  //Both output
08AF4:  BTFSC  x25.6
08AF6:  BRA    8B02
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08AF8:  BSF    F89.4
08AFA:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08AFC:  BSF    F89.3
08AFE:  BCF    F92.3
....................                }
08B00:  BRA    8B10
....................                else
....................                {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08B02:  BTFSS  x21.6
08B04:  BRA    8B0C
08B06:  BSF    F89.4
08B08:  BCF    F92.4
08B0A:  BRA    8B10
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08B0C:  BSF    F89.3
08B0E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
08B10:  BTFSC  x49.6
08B12:  BRA    8BAA
08B14:  BTFSC  30.4
08B16:  BRA    8BAA
08B18:  BTFSC  x2D.6
08B1A:  BRA    8BAA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08B1C:  MOVLW  66
08B1E:  MOVWF  FF6
08B20:  MOVLW  08
08B22:  MOVWF  FF7
08B24:  MOVLB  0
08B26:  CALL   2526
....................                putc('\n',CH2);
08B2A:  MOVLW  0A
08B2C:  MOVLB  D
08B2E:  MOVWF  xCD
08B30:  MOVLB  0
08B32:  CALL   24E0
....................                delay_ms(10);
08B36:  MOVLW  0A
08B38:  MOVLB  D
08B3A:  MOVWF  xCC
08B3C:  MOVLB  0
08B3E:  CALL   0A28
....................                
....................                SendSMS.B15 =1;
08B42:  MOVLB  D
08B44:  BSF    x49.6
....................                fprintf(CH2,"AT+CMGS=\"");
08B46:  MOVLW  70
08B48:  MOVWF  FF6
08B4A:  MOVLW  08
08B4C:  MOVWF  FF7
08B4E:  MOVLB  0
08B50:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
08B54:  MOVLW  0A
08B56:  MOVWF  FEA
08B58:  MOVLW  81
08B5A:  MOVWF  FE9
08B5C:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
08B60:  MOVLW  22
08B62:  MOVLB  D
08B64:  MOVWF  xCD
08B66:  MOVLB  0
08B68:  CALL   24E0
....................                putc('\n',CH2);
08B6C:  MOVLW  0A
08B6E:  MOVLB  D
08B70:  MOVWF  xCD
08B72:  MOVLB  0
08B74:  CALL   24E0
....................                delay_ms(50);
08B78:  MOVLW  32
08B7A:  MOVLB  D
08B7C:  MOVWF  xCC
08B7E:  MOVLB  0
08B80:  CALL   0A28
....................               
....................               printf(SMS_Massage15);  
08B84:  MOVLW  0C
08B86:  MOVWF  FEA
08B88:  MOVLW  50
08B8A:  MOVWF  FE9
08B8C:  CALL   6824
....................               putc('\n',CH2);
08B90:  MOVLW  0A
08B92:  MOVLB  D
08B94:  MOVWF  xCD
08B96:  MOVLB  0
08B98:  CALL   24E0
....................               putc(26,CH2);
08B9C:  MOVLW  1A
08B9E:  MOVLB  D
08BA0:  MOVWF  xCD
08BA2:  MOVLB  0
08BA4:  CALL   24E0
08BA8:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
08BAA:  BRA    8BB2
....................       else if(FaultType.B15 == 1) Ack.B15 = 0;
08BAC:  BTFSS  x1D.6
08BAE:  BRA    8BB2
08BB0:  BCF    x2D.6
....................    }
08BB2:  BRA    8C6C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B15 ^ InputType.B15) == 1)
08BB4:  MOVLW  00
08BB6:  BTFSC  x11.6
08BB8:  MOVLW  01
08BBA:  MOVWF  xCC
08BBC:  MOVLW  00
08BBE:  BTFSC  x19.6
08BC0:  MOVLW  01
08BC2:  XORWF  xCC,W
08BC4:  SUBLW  01
08BC6:  BNZ   8C66
....................       {
....................          Output.B15 = 0; 
08BC8:  BCF    x15.6
....................          if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
08BCA:  BTFSC  x49.6
08BCC:  BRA    8C64
08BCE:  BTFSC  30.4
08BD0:  BRA    8C64
08BD2:  BTFSC  x2D.6
08BD4:  BRA    8C64
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08BD6:  MOVLW  7A
08BD8:  MOVWF  FF6
08BDA:  MOVLW  08
08BDC:  MOVWF  FF7
08BDE:  MOVLB  0
08BE0:  CALL   2526
....................             putc('\n',CH2);
08BE4:  MOVLW  0A
08BE6:  MOVLB  D
08BE8:  MOVWF  xCD
08BEA:  MOVLB  0
08BEC:  CALL   24E0
....................             delay_ms(10);
08BF0:  MOVLW  0A
08BF2:  MOVLB  D
08BF4:  MOVWF  xCC
08BF6:  MOVLB  0
08BF8:  CALL   0A28
....................             
....................             SendSMS.B15 =1;
08BFC:  MOVLB  D
08BFE:  BSF    x49.6
....................             fprintf(CH2,"AT+CMGS=\"");
08C00:  MOVLW  84
08C02:  MOVWF  FF6
08C04:  MOVLW  08
08C06:  MOVWF  FF7
08C08:  MOVLB  0
08C0A:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
08C0E:  MOVLW  0A
08C10:  MOVWF  FEA
08C12:  MOVLW  81
08C14:  MOVWF  FE9
08C16:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
08C1A:  MOVLW  22
08C1C:  MOVLB  D
08C1E:  MOVWF  xCD
08C20:  MOVLB  0
08C22:  CALL   24E0
....................             putc('\n',CH2);
08C26:  MOVLW  0A
08C28:  MOVLB  D
08C2A:  MOVWF  xCD
08C2C:  MOVLB  0
08C2E:  CALL   24E0
....................             delay_ms(50);
08C32:  MOVLW  32
08C34:  MOVLB  D
08C36:  MOVWF  xCC
08C38:  MOVLB  0
08C3A:  CALL   0A28
....................            
....................            printf(SMS_Massage15);  
08C3E:  MOVLW  0C
08C40:  MOVWF  FEA
08C42:  MOVLW  50
08C44:  MOVWF  FE9
08C46:  CALL   6824
....................            putc('\n',CH2);
08C4A:  MOVLW  0A
08C4C:  MOVLB  D
08C4E:  MOVWF  xCD
08C50:  MOVLB  0
08C52:  CALL   24E0
....................            putc(26,CH2);
08C56:  MOVLW  1A
08C58:  MOVLB  D
08C5A:  MOVWF  xCD
08C5C:  MOVLB  0
08C5E:  CALL   24E0
08C62:  MOVLB  D
....................          }
....................       }
08C64:  BRA    8C6C
....................       else
....................       {
....................          Output.B15 = 1;
08C66:  BSF    x15.6
....................          SendSMS.B15 =0;
08C68:  BCF    x49.6
....................          functointest_f =0;
08C6A:  BCF    30.4
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if(AlarmIndicator.B16 == 1)    // Alarm Function
08C6C:  BTFSS  x29.7
08C6E:  BRA    8D7C
....................    {
....................       if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 1))|| In.B16 == 1)    // alarm1 occure and "Lock type"
08C70:  MOVLW  00
08C72:  BTFSC  x11.7
08C74:  MOVLW  01
08C76:  MOVWF  xCC
08C78:  MOVLW  00
08C7A:  BTFSC  x19.7
08C7C:  MOVLW  01
08C7E:  XORWF  xCC,W
08C80:  SUBLW  01
08C82:  BNZ   8C88
08C84:  BTFSC  x1D.7
08C86:  BRA    8C8C
08C88:  BTFSS  x31.7
08C8A:  BRA    8D74
....................       //if(Inputt.B16 == 0)
....................       {
....................          if(Ack.B16 == 0)
08C8C:  BTFSC  x2D.7
08C8E:  BRA    8D72
....................          {
....................             if(In.B16 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08C90:  BTFSC  x31.7
08C92:  BRA    8CAC
08C94:  MOVLB  0
08C96:  MOVF   x60,W
08C98:  SUBLW  0F
08C9A:  BTFSC  FD8.2
08C9C:  BRA    8CA2
08C9E:  MOVLB  D
08CA0:  BRA    8CAC
....................             {
....................                TimeBase1s = 100 ;            //reload again
08CA2:  MOVLW  64
08CA4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08CA6:  MOVFF  61,1D
08CAA:  MOVLB  D
....................             }
.................... 
....................             In.B16 = 1;                                 // setbit in1
08CAC:  BSF    x31.7
....................             if(FlashingFlag == 0)
08CAE:  BTFSC  1A.1
08CB0:  BRA    8CB6
....................             {
....................                Output.B16 = 0;           //Flash output1
08CB2:  BCF    x15.7
....................             }
08CB4:  BRA    8CB8
....................             else
....................             {
....................                Output.B16 = 1;
08CB6:  BSF    x15.7
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
08CB8:  BTFSC  1A.4
08CBA:  BRA    8CD8
....................             {
....................                if(OutputBoth.B16 == 0)                  //Both output
08CBC:  BTFSC  x25.7
08CBE:  BRA    8CCA
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08CC0:  BSF    F89.4
08CC2:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08CC4:  BSF    F89.3
08CC6:  BCF    F92.3
....................                }
08CC8:  BRA    8CD8
....................                else
....................                {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08CCA:  BTFSS  x21.7
08CCC:  BRA    8CD4
08CCE:  BSF    F89.4
08CD0:  BCF    F92.4
08CD2:  BRA    8CD8
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08CD4:  BSF    F89.3
08CD6:  BCF    F92.3
....................                }
....................             }
....................  
....................             if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
08CD8:  BTFSC  x49.7
08CDA:  BRA    8D72
08CDC:  BTFSC  30.4
08CDE:  BRA    8D72
08CE0:  BTFSC  x2D.7
08CE2:  BRA    8D72
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08CE4:  MOVLW  8E
08CE6:  MOVWF  FF6
08CE8:  MOVLW  08
08CEA:  MOVWF  FF7
08CEC:  MOVLB  0
08CEE:  CALL   2526
....................                putc('\n',CH2);
08CF2:  MOVLW  0A
08CF4:  MOVLB  D
08CF6:  MOVWF  xCD
08CF8:  MOVLB  0
08CFA:  CALL   24E0
....................                delay_ms(10);
08CFE:  MOVLW  0A
08D00:  MOVLB  D
08D02:  MOVWF  xCC
08D04:  MOVLB  0
08D06:  CALL   0A28
....................                
....................                SendSMS.B16 =1;
08D0A:  MOVLB  D
08D0C:  BSF    x49.7
....................                fprintf(CH2,"AT+CMGS=\"");
08D0E:  MOVLW  98
08D10:  MOVWF  FF6
08D12:  MOVLW  08
08D14:  MOVWF  FF7
08D16:  MOVLB  0
08D18:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
08D1C:  MOVLW  0A
08D1E:  MOVWF  FEA
08D20:  MOVLW  81
08D22:  MOVWF  FE9
08D24:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
08D28:  MOVLW  22
08D2A:  MOVLB  D
08D2C:  MOVWF  xCD
08D2E:  MOVLB  0
08D30:  CALL   24E0
....................                putc('\n',CH2);
08D34:  MOVLW  0A
08D36:  MOVLB  D
08D38:  MOVWF  xCD
08D3A:  MOVLB  0
08D3C:  CALL   24E0
....................                delay_ms(50);
08D40:  MOVLW  32
08D42:  MOVLB  D
08D44:  MOVWF  xCC
08D46:  MOVLB  0
08D48:  CALL   0A28
....................               
....................               printf(SMS_Massage16);  
08D4C:  MOVLW  0C
08D4E:  MOVWF  FEA
08D50:  MOVLW  70
08D52:  MOVWF  FE9
08D54:  CALL   6824
....................               putc('\n',CH2);
08D58:  MOVLW  0A
08D5A:  MOVLB  D
08D5C:  MOVWF  xCD
08D5E:  MOVLB  0
08D60:  CALL   24E0
....................               putc(26,CH2);
08D64:  MOVLW  1A
08D66:  MOVLB  D
08D68:  MOVWF  xCD
08D6A:  MOVLB  0
08D6C:  CALL   24E0
08D70:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
08D72:  BRA    8D7A
....................       else if(FaultType.B16 == 1) Ack.B16 = 0;
08D74:  BTFSS  x1D.7
08D76:  BRA    8D7A
08D78:  BCF    x2D.7
....................    }
08D7A:  BRA    8E34
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B16 ^ InputType.B16) == 1)
08D7C:  MOVLW  00
08D7E:  BTFSC  x11.7
08D80:  MOVLW  01
08D82:  MOVWF  xCC
08D84:  MOVLW  00
08D86:  BTFSC  x19.7
08D88:  MOVLW  01
08D8A:  XORWF  xCC,W
08D8C:  SUBLW  01
08D8E:  BNZ   8E2E
....................       {
....................          Output.B16 = 0;  
08D90:  BCF    x15.7
....................          if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
08D92:  BTFSC  x49.7
08D94:  BRA    8E2C
08D96:  BTFSC  30.4
08D98:  BRA    8E2C
08D9A:  BTFSC  x2D.7
08D9C:  BRA    8E2C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08D9E:  MOVLW  A2
08DA0:  MOVWF  FF6
08DA2:  MOVLW  08
08DA4:  MOVWF  FF7
08DA6:  MOVLB  0
08DA8:  CALL   2526
....................             putc('\n',CH2);
08DAC:  MOVLW  0A
08DAE:  MOVLB  D
08DB0:  MOVWF  xCD
08DB2:  MOVLB  0
08DB4:  CALL   24E0
....................             delay_ms(10);
08DB8:  MOVLW  0A
08DBA:  MOVLB  D
08DBC:  MOVWF  xCC
08DBE:  MOVLB  0
08DC0:  CALL   0A28
....................             
....................             SendSMS.B16 =1;
08DC4:  MOVLB  D
08DC6:  BSF    x49.7
....................             fprintf(CH2,"AT+CMGS=\"");
08DC8:  MOVLW  AC
08DCA:  MOVWF  FF6
08DCC:  MOVLW  08
08DCE:  MOVWF  FF7
08DD0:  MOVLB  0
08DD2:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
08DD6:  MOVLW  0A
08DD8:  MOVWF  FEA
08DDA:  MOVLW  81
08DDC:  MOVWF  FE9
08DDE:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
08DE2:  MOVLW  22
08DE4:  MOVLB  D
08DE6:  MOVWF  xCD
08DE8:  MOVLB  0
08DEA:  CALL   24E0
....................             putc('\n',CH2);
08DEE:  MOVLW  0A
08DF0:  MOVLB  D
08DF2:  MOVWF  xCD
08DF4:  MOVLB  0
08DF6:  CALL   24E0
....................             delay_ms(50);
08DFA:  MOVLW  32
08DFC:  MOVLB  D
08DFE:  MOVWF  xCC
08E00:  MOVLB  0
08E02:  CALL   0A28
....................            
....................            printf(SMS_Massage16);  
08E06:  MOVLW  0C
08E08:  MOVWF  FEA
08E0A:  MOVLW  70
08E0C:  MOVWF  FE9
08E0E:  CALL   6824
....................            putc('\n',CH2);
08E12:  MOVLW  0A
08E14:  MOVLB  D
08E16:  MOVWF  xCD
08E18:  MOVLB  0
08E1A:  CALL   24E0
....................            putc(26,CH2);
08E1E:  MOVLW  1A
08E20:  MOVLB  D
08E22:  MOVWF  xCD
08E24:  MOVLB  0
08E26:  CALL   24E0
08E2A:  MOVLB  D
....................          }
....................       }
08E2C:  BRA    8E34
....................       else
....................       {
....................          Output.B16 = 1;
08E2E:  BSF    x15.7
....................          SendSMS.B16 =0;
08E30:  BCF    x49.7
....................          functointest_f =0;
08E32:  BCF    30.4
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input17
....................    
....................    if(AlarmIndicator.B17 == 1)    // Alarm Function
08E34:  BTFSS  x2A.0
08E36:  BRA    8F44
....................    {
....................       if((((Inputt.B17 ^ InputType.B17) == 1) && (FaultType.B17 == 1))|| In.B17 == 1)    // alarm1 occure and "Lock type"
08E38:  MOVLW  00
08E3A:  BTFSC  x12.0
08E3C:  MOVLW  01
08E3E:  MOVWF  xCC
08E40:  MOVLW  00
08E42:  BTFSC  x1A.0
08E44:  MOVLW  01
08E46:  XORWF  xCC,W
08E48:  SUBLW  01
08E4A:  BNZ   8E50
08E4C:  BTFSC  x1E.0
08E4E:  BRA    8E54
08E50:  BTFSS  x32.0
08E52:  BRA    8F3C
....................       {
....................          if(Ack.B17 == 0)
08E54:  BTFSC  x2E.0
08E56:  BRA    8F3A
....................          {
....................             if(In.B17 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08E58:  BTFSC  x32.0
08E5A:  BRA    8E74
08E5C:  MOVLB  0
08E5E:  MOVF   x60,W
08E60:  SUBLW  0F
08E62:  BTFSC  FD8.2
08E64:  BRA    8E6A
08E66:  MOVLB  D
08E68:  BRA    8E74
....................             {
....................                TimeBase1s = 100 ;            //reload again
08E6A:  MOVLW  64
08E6C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08E6E:  MOVFF  61,1D
08E72:  MOVLB  D
....................             }
.................... 
....................             In.B17 = 1;                                 // setbit in1
08E74:  BSF    x32.0
....................             if(FlashingFlag == 0)
08E76:  BTFSC  1A.1
08E78:  BRA    8E7E
....................             {
....................                Output.B17 = 0;           //Flash output1
08E7A:  BCF    x16.0
....................             }
08E7C:  BRA    8E80
....................             else
....................             {
....................                Output.B17 = 1;
08E7E:  BSF    x16.0
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
08E80:  BTFSC  1A.4
08E82:  BRA    8EA0
....................             {
....................                if(OutputBoth.B17 == 0)                  //Both output
08E84:  BTFSC  x26.0
08E86:  BRA    8E92
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08E88:  BSF    F89.4
08E8A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08E8C:  BSF    F89.3
08E8E:  BCF    F92.3
....................                }
08E90:  BRA    8EA0
....................                else
....................                {
....................                   if(OutputType.B17 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08E92:  BTFSS  x22.0
08E94:  BRA    8E9C
08E96:  BSF    F89.4
08E98:  BCF    F92.4
08E9A:  BRA    8EA0
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08E9C:  BSF    F89.3
08E9E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B17 ==0)&& (functointest_f ==0) && (Ack.B17 ==0))
08EA0:  BTFSC  x4A.0
08EA2:  BRA    8F3A
08EA4:  BTFSC  30.4
08EA6:  BRA    8F3A
08EA8:  BTFSC  x2E.0
08EAA:  BRA    8F3A
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08EAC:  MOVLW  B6
08EAE:  MOVWF  FF6
08EB0:  MOVLW  08
08EB2:  MOVWF  FF7
08EB4:  MOVLB  0
08EB6:  CALL   2526
....................                putc('\n',CH2);
08EBA:  MOVLW  0A
08EBC:  MOVLB  D
08EBE:  MOVWF  xCD
08EC0:  MOVLB  0
08EC2:  CALL   24E0
....................                delay_ms(10);
08EC6:  MOVLW  0A
08EC8:  MOVLB  D
08ECA:  MOVWF  xCC
08ECC:  MOVLB  0
08ECE:  CALL   0A28
....................                
....................                SendSMS.B17 =1;
08ED2:  MOVLB  D
08ED4:  BSF    x4A.0
....................                fprintf(CH2,"AT+CMGS=\"");
08ED6:  MOVLW  C0
08ED8:  MOVWF  FF6
08EDA:  MOVLW  08
08EDC:  MOVWF  FF7
08EDE:  MOVLB  0
08EE0:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
08EE4:  MOVLW  0A
08EE6:  MOVWF  FEA
08EE8:  MOVLW  81
08EEA:  MOVWF  FE9
08EEC:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
08EF0:  MOVLW  22
08EF2:  MOVLB  D
08EF4:  MOVWF  xCD
08EF6:  MOVLB  0
08EF8:  CALL   24E0
....................                putc('\n',CH2);
08EFC:  MOVLW  0A
08EFE:  MOVLB  D
08F00:  MOVWF  xCD
08F02:  MOVLB  0
08F04:  CALL   24E0
....................                delay_ms(50);
08F08:  MOVLW  32
08F0A:  MOVLB  D
08F0C:  MOVWF  xCC
08F0E:  MOVLB  0
08F10:  CALL   0A28
....................               
....................               printf(SMS_Massage17);  
08F14:  MOVLW  0C
08F16:  MOVWF  FEA
08F18:  MOVLW  90
08F1A:  MOVWF  FE9
08F1C:  CALL   6824
....................               putc('\n',CH2);
08F20:  MOVLW  0A
08F22:  MOVLB  D
08F24:  MOVWF  xCD
08F26:  MOVLB  0
08F28:  CALL   24E0
....................               putc(26,CH2);
08F2C:  MOVLW  1A
08F2E:  MOVLB  D
08F30:  MOVWF  xCD
08F32:  MOVLB  0
08F34:  CALL   24E0
08F38:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
08F3A:  BRA    8F42
....................       else if(FaultType.B17 == 1) Ack.B17 = 0;
08F3C:  BTFSS  x1E.0
08F3E:  BRA    8F42
08F40:  BCF    x2E.0
....................    }
08F42:  BRA    8FFC
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B17 ^ InputType.B17) == 1)
08F44:  MOVLW  00
08F46:  BTFSC  x12.0
08F48:  MOVLW  01
08F4A:  MOVWF  xCC
08F4C:  MOVLW  00
08F4E:  BTFSC  x1A.0
08F50:  MOVLW  01
08F52:  XORWF  xCC,W
08F54:  SUBLW  01
08F56:  BNZ   8FF6
....................       {
....................          Output.B17 = 0;
08F58:  BCF    x16.0
....................          if((SendSMS.B17 ==0)&& (functointest_f ==0) && (Ack.B17 ==0))
08F5A:  BTFSC  x4A.0
08F5C:  BRA    8FF4
08F5E:  BTFSC  30.4
08F60:  BRA    8FF4
08F62:  BTFSC  x2E.0
08F64:  BRA    8FF4
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08F66:  MOVLW  CA
08F68:  MOVWF  FF6
08F6A:  MOVLW  08
08F6C:  MOVWF  FF7
08F6E:  MOVLB  0
08F70:  CALL   2526
....................             putc('\n',CH2);
08F74:  MOVLW  0A
08F76:  MOVLB  D
08F78:  MOVWF  xCD
08F7A:  MOVLB  0
08F7C:  CALL   24E0
....................             delay_ms(10);
08F80:  MOVLW  0A
08F82:  MOVLB  D
08F84:  MOVWF  xCC
08F86:  MOVLB  0
08F88:  CALL   0A28
....................             
....................             SendSMS.B17 =1;
08F8C:  MOVLB  D
08F8E:  BSF    x4A.0
....................             fprintf(CH2,"AT+CMGS=\"");
08F90:  MOVLW  D4
08F92:  MOVWF  FF6
08F94:  MOVLW  08
08F96:  MOVWF  FF7
08F98:  MOVLB  0
08F9A:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
08F9E:  MOVLW  0A
08FA0:  MOVWF  FEA
08FA2:  MOVLW  81
08FA4:  MOVWF  FE9
08FA6:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
08FAA:  MOVLW  22
08FAC:  MOVLB  D
08FAE:  MOVWF  xCD
08FB0:  MOVLB  0
08FB2:  CALL   24E0
....................             putc('\n',CH2);
08FB6:  MOVLW  0A
08FB8:  MOVLB  D
08FBA:  MOVWF  xCD
08FBC:  MOVLB  0
08FBE:  CALL   24E0
....................             delay_ms(50);
08FC2:  MOVLW  32
08FC4:  MOVLB  D
08FC6:  MOVWF  xCC
08FC8:  MOVLB  0
08FCA:  CALL   0A28
....................            
....................            printf(SMS_Massage17);  
08FCE:  MOVLW  0C
08FD0:  MOVWF  FEA
08FD2:  MOVLW  90
08FD4:  MOVWF  FE9
08FD6:  CALL   6824
....................            putc('\n',CH2);
08FDA:  MOVLW  0A
08FDC:  MOVLB  D
08FDE:  MOVWF  xCD
08FE0:  MOVLB  0
08FE2:  CALL   24E0
....................            putc(26,CH2);
08FE6:  MOVLW  1A
08FE8:  MOVLB  D
08FEA:  MOVWF  xCD
08FEC:  MOVLB  0
08FEE:  CALL   24E0
08FF2:  MOVLB  D
....................          }
....................       }
08FF4:  BRA    8FFC
....................       else
....................       {
....................          Output.B17 = 1;
08FF6:  BSF    x16.0
....................          SendSMS.B17 =0;
08FF8:  BCF    x4A.0
....................          functointest_f =0;
08FFA:  BCF    30.4
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... //input18
....................    if(AlarmIndicator.B18 == 1)    // Alarm Function
08FFC:  BTFSS  x2A.1
08FFE:  BRA    910C
....................    {
....................       if((((Inputt.B18 ^ InputType.B18) == 1) && (FaultType.B18 == 1))|| In.B18 == 1)    // alarm1 occure and "Lock type"
09000:  MOVLW  00
09002:  BTFSC  x12.1
09004:  MOVLW  01
09006:  MOVWF  xCC
09008:  MOVLW  00
0900A:  BTFSC  x1A.1
0900C:  MOVLW  01
0900E:  XORWF  xCC,W
09010:  SUBLW  01
09012:  BNZ   9018
09014:  BTFSC  x1E.1
09016:  BRA    901C
09018:  BTFSS  x32.1
0901A:  BRA    9104
....................       //if(Inputt.B18 == 0)
....................       {
....................          if(Ack.B18 == 0)
0901C:  BTFSC  x2E.1
0901E:  BRA    9102
....................          {
....................             if(In.B18 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
09020:  BTFSC  x32.1
09022:  BRA    903C
09024:  MOVLB  0
09026:  MOVF   x60,W
09028:  SUBLW  0F
0902A:  BTFSC  FD8.2
0902C:  BRA    9032
0902E:  MOVLB  D
09030:  BRA    903C
....................             {
....................                TimeBase1s = 100 ;            //reload again
09032:  MOVLW  64
09034:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
09036:  MOVFF  61,1D
0903A:  MOVLB  D
....................             }
.................... 
....................             In.B18 = 1;                                 // setbit in1
0903C:  BSF    x32.1
....................             if(FlashingFlag == 0)
0903E:  BTFSC  1A.1
09040:  BRA    9046
....................             {
....................                Output.B18 = 0;           //Flash output1
09042:  BCF    x16.1
....................             }
09044:  BRA    9048
....................             else
....................             {
....................                Output.B18 = 1;
09046:  BSF    x16.1
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
09048:  BTFSC  1A.4
0904A:  BRA    9068
....................             {
....................                if(OutputBoth.B18 == 0)                  //Both output
0904C:  BTFSC  x26.1
0904E:  BRA    905A
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09050:  BSF    F89.4
09052:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09054:  BSF    F89.3
09056:  BCF    F92.3
....................                }
09058:  BRA    9068
....................                else
....................                {
....................                   if(OutputType.B18 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0905A:  BTFSS  x22.1
0905C:  BRA    9064
0905E:  BSF    F89.4
09060:  BCF    F92.4
09062:  BRA    9068
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09064:  BSF    F89.3
09066:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B18 ==0)&& (functointest_f ==0) && (Ack.B18 ==0))
09068:  BTFSC  x4A.1
0906A:  BRA    9102
0906C:  BTFSC  30.4
0906E:  BRA    9102
09070:  BTFSC  x2E.1
09072:  BRA    9102
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
09074:  MOVLW  DE
09076:  MOVWF  FF6
09078:  MOVLW  08
0907A:  MOVWF  FF7
0907C:  MOVLB  0
0907E:  CALL   2526
....................                putc('\n',CH2);
09082:  MOVLW  0A
09084:  MOVLB  D
09086:  MOVWF  xCD
09088:  MOVLB  0
0908A:  CALL   24E0
....................                delay_ms(10);
0908E:  MOVLW  0A
09090:  MOVLB  D
09092:  MOVWF  xCC
09094:  MOVLB  0
09096:  CALL   0A28
....................                
....................                SendSMS.B18 =1;
0909A:  MOVLB  D
0909C:  BSF    x4A.1
....................                fprintf(CH2,"AT+CMGS=\"");
0909E:  MOVLW  E8
090A0:  MOVWF  FF6
090A2:  MOVLW  08
090A4:  MOVWF  FF7
090A6:  MOVLB  0
090A8:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
090AC:  MOVLW  0A
090AE:  MOVWF  FEA
090B0:  MOVLW  81
090B2:  MOVWF  FE9
090B4:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
090B8:  MOVLW  22
090BA:  MOVLB  D
090BC:  MOVWF  xCD
090BE:  MOVLB  0
090C0:  CALL   24E0
....................                putc('\n',CH2);
090C4:  MOVLW  0A
090C6:  MOVLB  D
090C8:  MOVWF  xCD
090CA:  MOVLB  0
090CC:  CALL   24E0
....................                delay_ms(50);
090D0:  MOVLW  32
090D2:  MOVLB  D
090D4:  MOVWF  xCC
090D6:  MOVLB  0
090D8:  CALL   0A28
....................               
....................               printf(SMS_Massage18);  
090DC:  MOVLW  0C
090DE:  MOVWF  FEA
090E0:  MOVLW  B0
090E2:  MOVWF  FE9
090E4:  CALL   6824
....................               putc('\n',CH2);
090E8:  MOVLW  0A
090EA:  MOVLB  D
090EC:  MOVWF  xCD
090EE:  MOVLB  0
090F0:  CALL   24E0
....................               putc(26,CH2);
090F4:  MOVLW  1A
090F6:  MOVLB  D
090F8:  MOVWF  xCD
090FA:  MOVLB  0
090FC:  CALL   24E0
09100:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
09102:  BRA    910A
....................       else if(FaultType.B18 == 1) Ack.B18 = 0;
09104:  BTFSS  x1E.1
09106:  BRA    910A
09108:  BCF    x2E.1
....................    }
0910A:  BRA    91C4
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B18 ^ InputType.B18) == 1)
0910C:  MOVLW  00
0910E:  BTFSC  x12.1
09110:  MOVLW  01
09112:  MOVWF  xCC
09114:  MOVLW  00
09116:  BTFSC  x1A.1
09118:  MOVLW  01
0911A:  XORWF  xCC,W
0911C:  SUBLW  01
0911E:  BNZ   91BE
....................       {
....................          Output.B18 = 0;
09120:  BCF    x16.1
....................          // SMS Sending   
....................          if((SendSMS.B18 ==0)&& (functointest_f ==0) && (Ack.B18 ==0))
09122:  BTFSC  x4A.1
09124:  BRA    91BC
09126:  BTFSC  30.4
09128:  BRA    91BC
0912A:  BTFSC  x2E.1
0912C:  BRA    91BC
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0912E:  MOVLW  F2
09130:  MOVWF  FF6
09132:  MOVLW  08
09134:  MOVWF  FF7
09136:  MOVLB  0
09138:  CALL   2526
....................             putc('\n',CH2);
0913C:  MOVLW  0A
0913E:  MOVLB  D
09140:  MOVWF  xCD
09142:  MOVLB  0
09144:  CALL   24E0
....................             delay_ms(10);
09148:  MOVLW  0A
0914A:  MOVLB  D
0914C:  MOVWF  xCC
0914E:  MOVLB  0
09150:  CALL   0A28
....................             
....................             SendSMS.B18 =1;
09154:  MOVLB  D
09156:  BSF    x4A.1
....................             fprintf(CH2,"AT+CMGS=\"");
09158:  MOVLW  FC
0915A:  MOVWF  FF6
0915C:  MOVLW  08
0915E:  MOVWF  FF7
09160:  MOVLB  0
09162:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
09166:  MOVLW  0A
09168:  MOVWF  FEA
0916A:  MOVLW  81
0916C:  MOVWF  FE9
0916E:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
09172:  MOVLW  22
09174:  MOVLB  D
09176:  MOVWF  xCD
09178:  MOVLB  0
0917A:  CALL   24E0
....................             putc('\n',CH2);
0917E:  MOVLW  0A
09180:  MOVLB  D
09182:  MOVWF  xCD
09184:  MOVLB  0
09186:  CALL   24E0
....................             delay_ms(50);
0918A:  MOVLW  32
0918C:  MOVLB  D
0918E:  MOVWF  xCC
09190:  MOVLB  0
09192:  CALL   0A28
....................            
....................            printf(SMS_Massage18);  
09196:  MOVLW  0C
09198:  MOVWF  FEA
0919A:  MOVLW  B0
0919C:  MOVWF  FE9
0919E:  CALL   6824
....................            putc('\n',CH2);
091A2:  MOVLW  0A
091A4:  MOVLB  D
091A6:  MOVWF  xCD
091A8:  MOVLB  0
091AA:  CALL   24E0
....................            putc(26,CH2);
091AE:  MOVLW  1A
091B0:  MOVLB  D
091B2:  MOVWF  xCD
091B4:  MOVLB  0
091B6:  CALL   24E0
091BA:  MOVLB  D
....................          }
....................       }
091BC:  BRA    91C4
....................       else
....................       {
....................          Output.B18 = 1;
091BE:  BSF    x16.1
....................          SendSMS.B18 =0;
091C0:  BCF    x4A.1
....................          functointest_f =0;
091C2:  BCF    30.4
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input19
....................    if(AlarmIndicator.B19 == 1)    // Alarm Function
091C4:  BTFSS  x2A.2
091C6:  BRA    92D4
....................    {
....................       if((((Inputt.B19 ^ InputType.B19) == 1) && (FaultType.B19 == 1))|| In.B19 == 1)    // alarm1 occure and "Lock type"
091C8:  MOVLW  00
091CA:  BTFSC  x12.2
091CC:  MOVLW  01
091CE:  MOVWF  xCC
091D0:  MOVLW  00
091D2:  BTFSC  x1A.2
091D4:  MOVLW  01
091D6:  XORWF  xCC,W
091D8:  SUBLW  01
091DA:  BNZ   91E0
091DC:  BTFSC  x1E.2
091DE:  BRA    91E4
091E0:  BTFSS  x32.2
091E2:  BRA    92CC
....................       //if(Inputt.B19 == 0)
....................       {
....................          if(Ack.B19 == 0)
091E4:  BTFSC  x2E.2
091E6:  BRA    92CA
....................          {
....................             if(In.B19 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
091E8:  BTFSC  x32.2
091EA:  BRA    9204
091EC:  MOVLB  0
091EE:  MOVF   x60,W
091F0:  SUBLW  0F
091F2:  BTFSC  FD8.2
091F4:  BRA    91FA
091F6:  MOVLB  D
091F8:  BRA    9204
....................             {
....................                TimeBase1s = 100 ;            //reload again
091FA:  MOVLW  64
091FC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
091FE:  MOVFF  61,1D
09202:  MOVLB  D
....................             }
.................... 
....................             In.B19 = 1;                                 // setbit in1
09204:  BSF    x32.2
....................             if(FlashingFlag == 0)
09206:  BTFSC  1A.1
09208:  BRA    920E
....................             {
....................                Output.B19 = 0;           //Flash output1
0920A:  BCF    x16.2
....................             }
0920C:  BRA    9210
....................             else
....................             {
....................                Output.B19 = 1;
0920E:  BSF    x16.2
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
09210:  BTFSC  1A.4
09212:  BRA    9230
....................             {
....................                if(OutputBoth.B19 == 0)                  //Both output
09214:  BTFSC  x26.2
09216:  BRA    9222
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09218:  BSF    F89.4
0921A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0921C:  BSF    F89.3
0921E:  BCF    F92.3
....................                }
09220:  BRA    9230
....................                else
....................                {
....................                   if(OutputType.B19 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09222:  BTFSS  x22.2
09224:  BRA    922C
09226:  BSF    F89.4
09228:  BCF    F92.4
0922A:  BRA    9230
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0922C:  BSF    F89.3
0922E:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B19 ==0)&& (functointest_f ==0) && (Ack.B19 ==0))
09230:  BTFSC  x4A.2
09232:  BRA    92CA
09234:  BTFSC  30.4
09236:  BRA    92CA
09238:  BTFSC  x2E.2
0923A:  BRA    92CA
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0923C:  MOVLW  06
0923E:  MOVWF  FF6
09240:  MOVLW  09
09242:  MOVWF  FF7
09244:  MOVLB  0
09246:  CALL   2526
....................                putc('\n',CH2);
0924A:  MOVLW  0A
0924C:  MOVLB  D
0924E:  MOVWF  xCD
09250:  MOVLB  0
09252:  CALL   24E0
....................                delay_ms(10);
09256:  MOVLW  0A
09258:  MOVLB  D
0925A:  MOVWF  xCC
0925C:  MOVLB  0
0925E:  CALL   0A28
....................                
....................                SendSMS.B19 =1;
09262:  MOVLB  D
09264:  BSF    x4A.2
....................                fprintf(CH2,"AT+CMGS=\"");
09266:  MOVLW  10
09268:  MOVWF  FF6
0926A:  MOVLW  09
0926C:  MOVWF  FF7
0926E:  MOVLB  0
09270:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
09274:  MOVLW  0A
09276:  MOVWF  FEA
09278:  MOVLW  81
0927A:  MOVWF  FE9
0927C:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
09280:  MOVLW  22
09282:  MOVLB  D
09284:  MOVWF  xCD
09286:  MOVLB  0
09288:  CALL   24E0
....................                putc('\n',CH2);
0928C:  MOVLW  0A
0928E:  MOVLB  D
09290:  MOVWF  xCD
09292:  MOVLB  0
09294:  CALL   24E0
....................                delay_ms(50);
09298:  MOVLW  32
0929A:  MOVLB  D
0929C:  MOVWF  xCC
0929E:  MOVLB  0
092A0:  CALL   0A28
....................               
....................               printf(SMS_Massage19);  
092A4:  MOVLW  0C
092A6:  MOVWF  FEA
092A8:  MOVLW  D0
092AA:  MOVWF  FE9
092AC:  CALL   6824
....................               putc('\n',CH2);
092B0:  MOVLW  0A
092B2:  MOVLB  D
092B4:  MOVWF  xCD
092B6:  MOVLB  0
092B8:  CALL   24E0
....................               putc(26,CH2);
092BC:  MOVLW  1A
092BE:  MOVLB  D
092C0:  MOVWF  xCD
092C2:  MOVLB  0
092C4:  CALL   24E0
092C8:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
092CA:  BRA    92D2
....................       else if(FaultType.B19 == 1) Ack.B19 = 0;
092CC:  BTFSS  x1E.2
092CE:  BRA    92D2
092D0:  BCF    x2E.2
....................    }
092D2:  BRA    938C
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B19 ^ InputType.B19) == 1)
092D4:  MOVLW  00
092D6:  BTFSC  x12.2
092D8:  MOVLW  01
092DA:  MOVWF  xCC
092DC:  MOVLW  00
092DE:  BTFSC  x1A.2
092E0:  MOVLW  01
092E2:  XORWF  xCC,W
092E4:  SUBLW  01
092E6:  BNZ   9386
....................       {
....................          Output.B19 = 0;
092E8:  BCF    x16.2
....................          // SMS Sending   
....................          if((SendSMS.B19 ==0)&& (functointest_f ==0) && (Ack.B19 ==0))
092EA:  BTFSC  x4A.2
092EC:  BRA    9384
092EE:  BTFSC  30.4
092F0:  BRA    9384
092F2:  BTFSC  x2E.2
092F4:  BRA    9384
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
092F6:  MOVLW  1A
092F8:  MOVWF  FF6
092FA:  MOVLW  09
092FC:  MOVWF  FF7
092FE:  MOVLB  0
09300:  CALL   2526
....................             putc('\n',CH2);
09304:  MOVLW  0A
09306:  MOVLB  D
09308:  MOVWF  xCD
0930A:  MOVLB  0
0930C:  CALL   24E0
....................             delay_ms(10);
09310:  MOVLW  0A
09312:  MOVLB  D
09314:  MOVWF  xCC
09316:  MOVLB  0
09318:  CALL   0A28
....................             
....................             SendSMS.B19 =1;
0931C:  MOVLB  D
0931E:  BSF    x4A.2
....................             fprintf(CH2,"AT+CMGS=\"");
09320:  MOVLW  24
09322:  MOVWF  FF6
09324:  MOVLW  09
09326:  MOVWF  FF7
09328:  MOVLB  0
0932A:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
0932E:  MOVLW  0A
09330:  MOVWF  FEA
09332:  MOVLW  81
09334:  MOVWF  FE9
09336:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
0933A:  MOVLW  22
0933C:  MOVLB  D
0933E:  MOVWF  xCD
09340:  MOVLB  0
09342:  CALL   24E0
....................             putc('\n',CH2);
09346:  MOVLW  0A
09348:  MOVLB  D
0934A:  MOVWF  xCD
0934C:  MOVLB  0
0934E:  CALL   24E0
....................             delay_ms(50);
09352:  MOVLW  32
09354:  MOVLB  D
09356:  MOVWF  xCC
09358:  MOVLB  0
0935A:  CALL   0A28
....................            
....................            printf(SMS_Massage19);  
0935E:  MOVLW  0C
09360:  MOVWF  FEA
09362:  MOVLW  D0
09364:  MOVWF  FE9
09366:  CALL   6824
....................            putc('\n',CH2);
0936A:  MOVLW  0A
0936C:  MOVLB  D
0936E:  MOVWF  xCD
09370:  MOVLB  0
09372:  CALL   24E0
....................            putc(26,CH2);
09376:  MOVLW  1A
09378:  MOVLB  D
0937A:  MOVWF  xCD
0937C:  MOVLB  0
0937E:  CALL   24E0
09382:  MOVLB  D
....................          }
....................       }
09384:  BRA    938C
....................       else
....................       {
....................          Output.B19 = 1;
09386:  BSF    x16.2
....................          SendSMS.B19 =0;
09388:  BCF    x4A.2
....................          functointest_f =0;
0938A:  BCF    30.4
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input20
....................    if(AlarmIndicator.B20 == 1)    // Alarm Function
0938C:  BTFSS  x2A.3
0938E:  BRA    949C
....................    {
....................       if((((Inputt.B20 ^ InputType.B20) == 1) && (FaultType.B20 == 1))|| In.B20 == 1)    // alarm1 occure and "Lock type"
09390:  MOVLW  00
09392:  BTFSC  x12.3
09394:  MOVLW  01
09396:  MOVWF  xCC
09398:  MOVLW  00
0939A:  BTFSC  x1A.3
0939C:  MOVLW  01
0939E:  XORWF  xCC,W
093A0:  SUBLW  01
093A2:  BNZ   93A8
093A4:  BTFSC  x1E.3
093A6:  BRA    93AC
093A8:  BTFSS  x32.3
093AA:  BRA    9494
....................       //if(Inputt.B18 == 0)
....................       {
....................          if(Ack.B20 == 0)
093AC:  BTFSC  x2E.3
093AE:  BRA    9492
....................          {
....................             if(In.B20 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
093B0:  BTFSC  x32.3
093B2:  BRA    93CC
093B4:  MOVLB  0
093B6:  MOVF   x60,W
093B8:  SUBLW  0F
093BA:  BTFSC  FD8.2
093BC:  BRA    93C2
093BE:  MOVLB  D
093C0:  BRA    93CC
....................             {
....................                TimeBase1s = 100 ;            //reload again
093C2:  MOVLW  64
093C4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
093C6:  MOVFF  61,1D
093CA:  MOVLB  D
....................             }
.................... 
....................             In.B20 = 1;                                 // setbit in1
093CC:  BSF    x32.3
....................             if(FlashingFlag == 0)
093CE:  BTFSC  1A.1
093D0:  BRA    93D6
....................             {
....................                Output.B20 = 0;           //Flash output1
093D2:  BCF    x16.3
....................             }
093D4:  BRA    93D8
....................             else
....................             {
....................                Output.B20 = 1;
093D6:  BSF    x16.3
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
093D8:  BTFSC  1A.4
093DA:  BRA    93F8
....................             {
....................                if(OutputBoth.B20 == 0)                  //Both output
093DC:  BTFSC  x26.3
093DE:  BRA    93EA
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
093E0:  BSF    F89.4
093E2:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
093E4:  BSF    F89.3
093E6:  BCF    F92.3
....................                }
093E8:  BRA    93F8
....................                else
....................                {
....................                   if(OutputType.B20 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
093EA:  BTFSS  x22.3
093EC:  BRA    93F4
093EE:  BSF    F89.4
093F0:  BCF    F92.4
093F2:  BRA    93F8
....................                   else output_bit(Pbell,OnRelay);                          //Bell
093F4:  BSF    F89.3
093F6:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B20 ==0)&& (functointest_f ==0) && (Ack.B20 ==0))
093F8:  BTFSC  x4A.3
093FA:  BRA    9492
093FC:  BTFSC  30.4
093FE:  BRA    9492
09400:  BTFSC  x2E.3
09402:  BRA    9492
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
09404:  MOVLW  2E
09406:  MOVWF  FF6
09408:  MOVLW  09
0940A:  MOVWF  FF7
0940C:  MOVLB  0
0940E:  CALL   2526
....................                putc('\n',CH2);
09412:  MOVLW  0A
09414:  MOVLB  D
09416:  MOVWF  xCD
09418:  MOVLB  0
0941A:  CALL   24E0
....................                delay_ms(10);
0941E:  MOVLW  0A
09420:  MOVLB  D
09422:  MOVWF  xCC
09424:  MOVLB  0
09426:  CALL   0A28
....................                
....................                SendSMS.B20 =1;
0942A:  MOVLB  D
0942C:  BSF    x4A.3
....................                fprintf(CH2,"AT+CMGS=\"");
0942E:  MOVLW  38
09430:  MOVWF  FF6
09432:  MOVLW  09
09434:  MOVWF  FF7
09436:  MOVLB  0
09438:  CALL   2526
....................                fprintf(CH2,sms_phonenumber);
0943C:  MOVLW  0A
0943E:  MOVWF  FEA
09440:  MOVLW  81
09442:  MOVWF  FE9
09444:  CALL   6824
....................                
....................                fprintf(CH2,"\"");
09448:  MOVLW  22
0944A:  MOVLB  D
0944C:  MOVWF  xCD
0944E:  MOVLB  0
09450:  CALL   24E0
....................                putc('\n',CH2);
09454:  MOVLW  0A
09456:  MOVLB  D
09458:  MOVWF  xCD
0945A:  MOVLB  0
0945C:  CALL   24E0
....................                delay_ms(50);
09460:  MOVLW  32
09462:  MOVLB  D
09464:  MOVWF  xCC
09466:  MOVLB  0
09468:  CALL   0A28
....................               
....................               printf(SMS_Massage20);  
0946C:  MOVLW  0C
0946E:  MOVWF  FEA
09470:  MOVLW  F0
09472:  MOVWF  FE9
09474:  CALL   6824
....................               putc('\n',CH2);
09478:  MOVLW  0A
0947A:  MOVLB  D
0947C:  MOVWF  xCD
0947E:  MOVLB  0
09480:  CALL   24E0
....................               putc(26,CH2);
09484:  MOVLW  1A
09486:  MOVLB  D
09488:  MOVWF  xCD
0948A:  MOVLB  0
0948C:  CALL   24E0
09490:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
09492:  BRA    949A
....................       else if(FaultType.B20 == 1) Ack.B20 = 0;
09494:  BTFSS  x1E.3
09496:  BRA    949A
09498:  BCF    x2E.3
....................    }
0949A:  BRA    9554
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B20 ^ InputType.B20) == 1)
0949C:  MOVLW  00
0949E:  BTFSC  x12.3
094A0:  MOVLW  01
094A2:  MOVWF  xCC
094A4:  MOVLW  00
094A6:  BTFSC  x1A.3
094A8:  MOVLW  01
094AA:  XORWF  xCC,W
094AC:  SUBLW  01
094AE:  BNZ   954E
....................       {
....................          Output.B20 = 0;
094B0:  BCF    x16.3
....................          // SMS Sending   
....................          if((SendSMS.B20 ==0)&& (functointest_f ==0) && (Ack.B20 ==0))
094B2:  BTFSC  x4A.3
094B4:  BRA    954C
094B6:  BTFSC  30.4
094B8:  BRA    954C
094BA:  BTFSC  x2E.3
094BC:  BRA    954C
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
094BE:  MOVLW  42
094C0:  MOVWF  FF6
094C2:  MOVLW  09
094C4:  MOVWF  FF7
094C6:  MOVLB  0
094C8:  CALL   2526
....................             putc('\n',CH2);
094CC:  MOVLW  0A
094CE:  MOVLB  D
094D0:  MOVWF  xCD
094D2:  MOVLB  0
094D4:  CALL   24E0
....................             delay_ms(10);
094D8:  MOVLW  0A
094DA:  MOVLB  D
094DC:  MOVWF  xCC
094DE:  MOVLB  0
094E0:  CALL   0A28
....................             
....................             SendSMS.B20 =1;
094E4:  MOVLB  D
094E6:  BSF    x4A.3
....................             fprintf(CH2,"AT+CMGS=\"");
094E8:  MOVLW  4C
094EA:  MOVWF  FF6
094EC:  MOVLW  09
094EE:  MOVWF  FF7
094F0:  MOVLB  0
094F2:  CALL   2526
....................             fprintf(CH2,sms_phonenumber);
094F6:  MOVLW  0A
094F8:  MOVWF  FEA
094FA:  MOVLW  81
094FC:  MOVWF  FE9
094FE:  CALL   6824
....................             
....................             fprintf(CH2,"\"");
09502:  MOVLW  22
09504:  MOVLB  D
09506:  MOVWF  xCD
09508:  MOVLB  0
0950A:  CALL   24E0
....................             putc('\n',CH2);
0950E:  MOVLW  0A
09510:  MOVLB  D
09512:  MOVWF  xCD
09514:  MOVLB  0
09516:  CALL   24E0
....................             delay_ms(50);
0951A:  MOVLW  32
0951C:  MOVLB  D
0951E:  MOVWF  xCC
09520:  MOVLB  0
09522:  CALL   0A28
....................            
....................            printf(SMS_Massage20);  
09526:  MOVLW  0C
09528:  MOVWF  FEA
0952A:  MOVLW  F0
0952C:  MOVWF  FE9
0952E:  CALL   6824
....................            putc('\n',CH2);
09532:  MOVLW  0A
09534:  MOVLB  D
09536:  MOVWF  xCD
09538:  MOVLB  0
0953A:  CALL   24E0
....................            putc(26,CH2);
0953E:  MOVLW  1A
09540:  MOVLB  D
09542:  MOVWF  xCD
09544:  MOVLB  0
09546:  CALL   24E0
0954A:  MOVLB  D
....................          }
....................       }
0954C:  BRA    9554
....................       else
....................       {
....................          Output.B20 = 1;
0954E:  BSF    x16.3
....................          SendSMS.B20 =0;
09550:  BCF    x4A.3
....................          functointest_f =0;
09552:  BCF    30.4
....................       }
....................    }
....................     
.................... //}
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
09554:  MOVLW  00
09556:  BTFSC  x10.0
09558:  MOVLW  01
0955A:  MOVWF  xCC
0955C:  MOVLW  00
0955E:  BTFSC  x18.0
09560:  MOVLW  01
09562:  XORWF  xCC,W
09564:  SUBLW  01
09566:  BNZ   956C
09568:  BTFSS  x1C.0
0956A:  BRA    9570
0956C:  BTFSS  1A.5
0956E:  BRA    963C
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
09570:  BTFSC  x34.0
09572:  BRA    9590
09574:  MOVLB  0
09576:  MOVF   x60,W
09578:  SUBLW  0F
0957A:  BTFSC  FD8.2
0957C:  BRA    9582
0957E:  MOVLB  D
09580:  BRA    9590
09582:  MOVLB  D
09584:  BTFSC  x2C.0
09586:  BRA    9590
....................       {
....................             TimeBase1s = 100 ;            //reload again
09588:  MOVLW  64
0958A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0958C:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B1 = 1;
09590:  BSF    x34.0
....................       if(Ack.B1 == 0)
09592:  BTFSC  x2C.0
09594:  BRA    95C4
....................       {
....................          if(FlashingFlag == 0)
09596:  BTFSC  1A.1
09598:  BRA    959E
....................             {
....................                Output.B1 = 0;           //Flash output1
0959A:  BCF    x14.0
....................             }
0959C:  BRA    95A0
....................             else
....................             {
....................                Output.B1 = 1;
0959E:  BSF    x14.0
....................             }
....................          if (~AutoTestFlag)
095A0:  BTFSC  1A.4
095A2:  BRA    95C4
....................          {
....................             if(AlarmIndicator.B1 == 1){
095A4:  BTFSS  x28.0
095A6:  BRA    95C4
....................                 if(OutputBoth.B1 == 0)        //Both output
095A8:  BTFSC  x24.0
095AA:  BRA    95B6
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
095AC:  BSF    F89.4
095AE:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
095B0:  BSF    F89.3
095B2:  BCF    F92.3
....................                 }
095B4:  BRA    95C4
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
095B6:  BTFSS  x20.0
095B8:  BRA    95C0
095BA:  BSF    F89.4
095BC:  BCF    F92.4
095BE:  BRA    95C4
....................                   else output_bit(Pbell,OnRelay);                          //Bell
095C0:  BSF    F89.3
095C2:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................        inputflag =1;
095C4:  MOVLW  01
095C6:  MOVWF  xBF
....................        // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
095C8:  BTFSC  x48.0
095CA:  BRA    963A
095CC:  BTFSC  30.4
095CE:  BRA    963A
095D0:  BTFSC  x2C.0
095D2:  BRA    963A
....................       {
....................          SendSMS.B1 =1;
095D4:  BSF    x48.0
....................          fprintf(CH2,"AT+CMGS=\"");
095D6:  MOVLW  56
095D8:  MOVWF  FF6
095DA:  MOVLW  09
095DC:  MOVWF  FF7
095DE:  MOVLB  0
095E0:  CALL   2526
....................          fprintf(CH2,sms_phonenumber);
095E4:  MOVLW  0A
095E6:  MOVWF  FEA
095E8:  MOVLW  81
095EA:  MOVWF  FE9
095EC:  CALL   6824
....................          
....................          fprintf(CH2,"\"");
095F0:  MOVLW  22
095F2:  MOVLB  D
095F4:  MOVWF  xCD
095F6:  MOVLB  0
095F8:  CALL   24E0
....................          putc('\n',CH2);
095FC:  MOVLW  0A
095FE:  MOVLB  D
09600:  MOVWF  xCD
09602:  MOVLB  0
09604:  CALL   24E0
....................          delay_ms(50);
09608:  MOVLW  32
0960A:  MOVLB  D
0960C:  MOVWF  xCC
0960E:  MOVLB  0
09610:  CALL   0A28
....................         
....................         fprintf(CH2,SMS_Massage1);   
09614:  MOVLW  0A
09616:  MOVWF  FEA
09618:  MOVLW  90
0961A:  MOVWF  FE9
0961C:  CALL   6824
....................         putc('\n',CH2);
09620:  MOVLW  0A
09622:  MOVLB  D
09624:  MOVWF  xCD
09626:  MOVLB  0
09628:  CALL   24E0
....................        putc(26,CH2);
0962C:  MOVLW  1A
0962E:  MOVLB  D
09630:  MOVWF  xCD
09632:  MOVLB  0
09634:  CALL   24E0
09638:  MOVLB  D
....................       }
....................    }
0963A:  BRA    96E8
....................    
....................    else if(FaultType.B1 == 0)
0963C:  BTFSC  x1C.0
0963E:  BRA    96E8
....................    {
....................       In2.B1 = 0x00;
09640:  BCF    x34.0
....................       Ack.B1 = 0;
09642:  BCF    x2C.0
....................       Output.B1 = 1;      //Off LED
09644:  BSF    x14.0
....................       SendSMS.B1 =0;// Clear SMS
09646:  BCF    x48.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0) && inputflag ==0)     //If Buzzer or Both
09648:  BTFSC  x20.0
0964A:  BRA    9650
0964C:  BTFSC  x24.0
0964E:  BRA    966A
09650:  MOVF   xBF,F
09652:  BNZ   966A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09654:  MOVLW  01
09656:  MOVWF  xCB
09658:  MOVLB  0
0965A:  CALL   684A
0965E:  DECFSZ 01,W
09660:  BRA    9664
09662:  BRA    9668
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09664:  BCF    F89.4
09666:  BCF    F92.4
09668:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0) && inputflag ==0)  //If Bell or Both
0966A:  BTFSS  x20.0
0966C:  BRA    9672
0966E:  BTFSC  x24.0
09670:  BRA    9690
09672:  MOVF   xBF,F
09674:  BNZ   9690
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09676:  MOVLW  02
09678:  MOVWF  xCB
0967A:  MOVLB  0
0967C:  CALL   684A
09680:  DECFSZ 01,W
09682:  BRA    9686
09684:  BRA    968E
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09686:  BCF    F89.3
09688:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0968A:  BCF    F89.4
0968C:  BCF    F92.4
0968E:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09690:  BTFSC  x34.0
09692:  BRA    96E8
09694:  BTFSC  x34.1
09696:  BRA    96E8
09698:  BTFSC  x34.2
0969A:  BRA    96E8
0969C:  BTFSC  x34.3
0969E:  BRA    96E8
096A0:  BTFSC  x34.4
096A2:  BRA    96E8
096A4:  BTFSC  x34.5
096A6:  BRA    96E8
096A8:  BTFSC  x34.6
096AA:  BRA    96E8
096AC:  BTFSC  x34.7
096AE:  BRA    96E8
096B0:  BTFSC  x35.0
096B2:  BRA    96E8
096B4:  BTFSC  x35.1
096B6:  BRA    96E8
096B8:  BTFSC  x35.2
096BA:  BRA    96E8
096BC:  BTFSC  x35.3
096BE:  BRA    96E8
096C0:  BTFSC  x35.4
096C2:  BRA    96E8
096C4:  BTFSC  x35.5
096C6:  BRA    96E8
096C8:  BTFSC  x35.6
096CA:  BRA    96E8
096CC:  BTFSC  x35.7
096CE:  BRA    96E8
096D0:  BTFSC  x36.0
096D2:  BRA    96E8
096D4:  BTFSC  x36.1
096D6:  BRA    96E8
096D8:  BTFSC  x36.2
096DA:  BRA    96E8
096DC:  BTFSC  x36.3
096DE:  BRA    96E8
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
096E0:  BCF    F89.3
096E2:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
096E4:  BCF    F89.4
096E6:  BCF    F92.4
....................       }
....................    }
....................    
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
096E8:  MOVLW  00
096EA:  BTFSC  x10.1
096EC:  MOVLW  01
096EE:  MOVWF  xCC
096F0:  MOVLW  00
096F2:  BTFSC  x18.1
096F4:  MOVLW  01
096F6:  XORWF  xCC,W
096F8:  SUBLW  01
096FA:  BNZ   9700
096FC:  BTFSS  x1C.1
096FE:  BRA    9704
09700:  BTFSS  1A.5
09702:  BRA    97D0
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
09704:  BTFSC  x34.1
09706:  BRA    9724
09708:  MOVLB  0
0970A:  MOVF   x60,W
0970C:  SUBLW  0F
0970E:  BTFSC  FD8.2
09710:  BRA    9716
09712:  MOVLB  D
09714:  BRA    9724
09716:  MOVLB  D
09718:  BTFSC  x2C.1
0971A:  BRA    9724
....................       {
....................             TimeBase1s = 100 ;            //reload again
0971C:  MOVLW  64
0971E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09720:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B2 = 1;
09724:  BSF    x34.1
....................       if(Ack.B2 == 0)
09726:  BTFSC  x2C.1
09728:  BRA    9758
....................       {
....................          if(FlashingFlag == 0)
0972A:  BTFSC  1A.1
0972C:  BRA    9732
....................             {
....................                Output.B2 = 0;           //Flash output1
0972E:  BCF    x14.1
....................             }
09730:  BRA    9734
....................             else
....................             {
....................                Output.B2 = 1;
09732:  BSF    x14.1
....................             }
....................          if (~AutoTestFlag)
09734:  BTFSC  1A.4
09736:  BRA    9758
....................          {
....................             if(AlarmIndicator.B2 == 1){
09738:  BTFSS  x28.1
0973A:  BRA    9758
....................                 if(OutputBoth.B2 == 0)        //Both output
0973C:  BTFSC  x24.1
0973E:  BRA    974A
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09740:  BSF    F89.4
09742:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09744:  BSF    F89.3
09746:  BCF    F92.3
....................                 }
09748:  BRA    9758
....................                 else
....................                 {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0974A:  BTFSS  x20.1
0974C:  BRA    9754
0974E:  BSF    F89.4
09750:  BCF    F92.4
09752:  BRA    9758
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09754:  BSF    F89.3
09756:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09758:  MOVLW  01
0975A:  MOVWF  xBF
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
0975C:  BTFSC  x48.1
0975E:  BRA    97CE
09760:  BTFSC  30.4
09762:  BRA    97CE
09764:  BTFSC  x2C.1
09766:  BRA    97CE
....................       {
....................          SendSMS.B2 =1;
09768:  BSF    x48.1
....................          fprintf(CH2,"AT+CMGS=\"");
0976A:  MOVLW  60
0976C:  MOVWF  FF6
0976E:  MOVLW  09
09770:  MOVWF  FF7
09772:  MOVLB  0
09774:  CALL   2526
....................          fprintf(CH2,sms_phonenumber);
09778:  MOVLW  0A
0977A:  MOVWF  FEA
0977C:  MOVLW  81
0977E:  MOVWF  FE9
09780:  CALL   6824
....................          
....................          fprintf(CH2,"\"");
09784:  MOVLW  22
09786:  MOVLB  D
09788:  MOVWF  xCD
0978A:  MOVLB  0
0978C:  CALL   24E0
....................          putc('\n',CH2);
09790:  MOVLW  0A
09792:  MOVLB  D
09794:  MOVWF  xCD
09796:  MOVLB  0
09798:  CALL   24E0
....................          delay_ms(50);
0979C:  MOVLW  32
0979E:  MOVLB  D
097A0:  MOVWF  xCC
097A2:  MOVLB  0
097A4:  CALL   0A28
....................         
....................         fprintf(CH2,SMS_Massage2); 
097A8:  MOVLW  0A
097AA:  MOVWF  FEA
097AC:  MOVLW  B0
097AE:  MOVWF  FE9
097B0:  CALL   6824
....................         putc('\n',CH2);
097B4:  MOVLW  0A
097B6:  MOVLB  D
097B8:  MOVWF  xCD
097BA:  MOVLB  0
097BC:  CALL   24E0
....................        putc(26,CH2);
097C0:  MOVLW  1A
097C2:  MOVLB  D
097C4:  MOVWF  xCD
097C6:  MOVLB  0
097C8:  CALL   24E0
097CC:  MOVLB  D
....................       }
....................    }
097CE:  BRA    987C
....................    else if(FaultType.B2 == 0)
097D0:  BTFSC  x1C.1
097D2:  BRA    987C
....................    {
....................       In2.B2 = 0x00;
097D4:  BCF    x34.1
....................       Ack.B2 = 0;
097D6:  BCF    x2C.1
....................       Output.B2 = 1;      //Off LED
097D8:  BSF    x14.1
....................       SendSMS.B2 =0;// Clear SMS
097DA:  BCF    x48.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0) && inputflag ==0)     //If Buzzer or Both
097DC:  BTFSC  x20.1
097DE:  BRA    97E4
097E0:  BTFSC  x24.1
097E2:  BRA    97FE
097E4:  MOVF   xBF,F
097E6:  BNZ   97FE
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
097E8:  MOVLW  01
097EA:  MOVWF  xCB
097EC:  MOVLB  0
097EE:  CALL   684A
097F2:  DECFSZ 01,W
097F4:  BRA    97F8
097F6:  BRA    97FC
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
097F8:  BCF    F89.4
097FA:  BCF    F92.4
097FC:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0) && inputflag ==0) //If Bell or Both
097FE:  BTFSS  x20.1
09800:  BRA    9806
09802:  BTFSC  x24.1
09804:  BRA    9824
09806:  MOVF   xBF,F
09808:  BNZ   9824
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0980A:  MOVLW  02
0980C:  MOVWF  xCB
0980E:  MOVLB  0
09810:  CALL   684A
09814:  DECFSZ 01,W
09816:  BRA    981A
09818:  BRA    9822
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0981A:  BCF    F89.3
0981C:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0981E:  BCF    F89.4
09820:  BCF    F92.4
09822:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09824:  BTFSC  x34.0
09826:  BRA    987C
09828:  BTFSC  x34.1
0982A:  BRA    987C
0982C:  BTFSC  x34.2
0982E:  BRA    987C
09830:  BTFSC  x34.3
09832:  BRA    987C
09834:  BTFSC  x34.4
09836:  BRA    987C
09838:  BTFSC  x34.5
0983A:  BRA    987C
0983C:  BTFSC  x34.6
0983E:  BRA    987C
09840:  BTFSC  x34.7
09842:  BRA    987C
09844:  BTFSC  x35.0
09846:  BRA    987C
09848:  BTFSC  x35.1
0984A:  BRA    987C
0984C:  BTFSC  x35.2
0984E:  BRA    987C
09850:  BTFSC  x35.3
09852:  BRA    987C
09854:  BTFSC  x35.4
09856:  BRA    987C
09858:  BTFSC  x35.5
0985A:  BRA    987C
0985C:  BTFSC  x35.6
0985E:  BRA    987C
09860:  BTFSC  x35.7
09862:  BRA    987C
09864:  BTFSC  x36.0
09866:  BRA    987C
09868:  BTFSC  x36.1
0986A:  BRA    987C
0986C:  BTFSC  x36.2
0986E:  BRA    987C
09870:  BTFSC  x36.3
09872:  BRA    987C
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09874:  BCF    F89.3
09876:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09878:  BCF    F89.4
0987A:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0987C:  MOVLW  00
0987E:  BTFSC  x10.2
09880:  MOVLW  01
09882:  MOVWF  xCC
09884:  MOVLW  00
09886:  BTFSC  x18.2
09888:  MOVLW  01
0988A:  XORWF  xCC,W
0988C:  SUBLW  01
0988E:  BNZ   9894
09890:  BTFSS  x1C.2
09892:  BRA    9898
09894:  BTFSS  1A.5
09896:  BRA    9964
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
09898:  BTFSC  x34.2
0989A:  BRA    98B8
0989C:  MOVLB  0
0989E:  MOVF   x60,W
098A0:  SUBLW  0F
098A2:  BTFSC  FD8.2
098A4:  BRA    98AA
098A6:  MOVLB  D
098A8:  BRA    98B8
098AA:  MOVLB  D
098AC:  BTFSC  x2C.2
098AE:  BRA    98B8
....................       {
....................             TimeBase1s = 100 ;            //reload again
098B0:  MOVLW  64
098B2:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
098B4:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B3 = 1;
098B8:  BSF    x34.2
....................       if(Ack.B3 == 0)
098BA:  BTFSC  x2C.2
098BC:  BRA    98EC
....................       {
....................          if(FlashingFlag == 0)
098BE:  BTFSC  1A.1
098C0:  BRA    98C6
....................             {
....................                Output.B3 = 0;           //Flash output1
098C2:  BCF    x14.2
....................             }
098C4:  BRA    98C8
....................             else
....................             {
....................                Output.B3 = 1;
098C6:  BSF    x14.2
....................             }
....................          if (~AutoTestFlag)
098C8:  BTFSC  1A.4
098CA:  BRA    98EC
....................          {
....................             if(AlarmIndicator.B3 == 1){
098CC:  BTFSS  x28.2
098CE:  BRA    98EC
....................                 if(OutputBoth.B3 == 0)        //Both output
098D0:  BTFSC  x24.2
098D2:  BRA    98DE
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
098D4:  BSF    F89.4
098D6:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
098D8:  BSF    F89.3
098DA:  BCF    F92.3
....................                 }
098DC:  BRA    98EC
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
098DE:  BTFSS  x20.2
098E0:  BRA    98E8
098E2:  BSF    F89.4
098E4:  BCF    F92.4
098E6:  BRA    98EC
....................                   else output_bit(Pbell,OnRelay);                          //Bell
098E8:  BSF    F89.3
098EA:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
098EC:  MOVLW  01
098EE:  MOVWF  xBF
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
098F0:  BTFSC  x48.2
098F2:  BRA    9962
098F4:  BTFSC  30.4
098F6:  BRA    9962
098F8:  BTFSC  x2C.2
098FA:  BRA    9962
....................       {
....................          SendSMS.B3 =1;
098FC:  BSF    x48.2
....................          fprintf(CH2,"AT+CMGS=\"");
098FE:  MOVLW  6A
09900:  MOVWF  FF6
09902:  MOVLW  09
09904:  MOVWF  FF7
09906:  MOVLB  0
09908:  CALL   2526
....................          fprintf(CH2,sms_phonenumber);
0990C:  MOVLW  0A
0990E:  MOVWF  FEA
09910:  MOVLW  81
09912:  MOVWF  FE9
09914:  CALL   6824
....................          
....................          fprintf(CH2,"\"");
09918:  MOVLW  22
0991A:  MOVLB  D
0991C:  MOVWF  xCD
0991E:  MOVLB  0
09920:  CALL   24E0
....................          putc('\n',CH2);
09924:  MOVLW  0A
09926:  MOVLB  D
09928:  MOVWF  xCD
0992A:  MOVLB  0
0992C:  CALL   24E0
....................          delay_ms(50);
09930:  MOVLW  32
09932:  MOVLB  D
09934:  MOVWF  xCC
09936:  MOVLB  0
09938:  CALL   0A28
....................         
....................         fprintf(CH2,SMS_Massage3); 
0993C:  MOVLW  0A
0993E:  MOVWF  FEA
09940:  MOVLW  D0
09942:  MOVWF  FE9
09944:  CALL   6824
....................         putc('\n',CH2);
09948:  MOVLW  0A
0994A:  MOVLB  D
0994C:  MOVWF  xCD
0994E:  MOVLB  0
09950:  CALL   24E0
....................        putc(26,CH2);
09954:  MOVLW  1A
09956:  MOVLB  D
09958:  MOVWF  xCD
0995A:  MOVLB  0
0995C:  CALL   24E0
09960:  MOVLB  D
....................       }
....................    }
09962:  BRA    9A10
....................    else if(FaultType.B3 == 0)
09964:  BTFSC  x1C.2
09966:  BRA    9A10
....................    {
....................       In2.B3 = 0x00;
09968:  BCF    x34.2
....................       Ack.B3 = 0;
0996A:  BCF    x2C.2
....................       Output.B3 = 1;      //Off LED
0996C:  BSF    x14.2
....................       SendSMS.B3 =0;// Clear SMS
0996E:  BCF    x48.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0) && inputflag ==0)     //If Buzzer or Both
09970:  BTFSC  x20.2
09972:  BRA    9978
09974:  BTFSC  x24.2
09976:  BRA    9992
09978:  MOVF   xBF,F
0997A:  BNZ   9992
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0997C:  MOVLW  01
0997E:  MOVWF  xCB
09980:  MOVLB  0
09982:  CALL   684A
09986:  DECFSZ 01,W
09988:  BRA    998C
0998A:  BRA    9990
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0998C:  BCF    F89.4
0998E:  BCF    F92.4
09990:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0) && inputflag ==0) //If Bell or Both
09992:  BTFSS  x20.2
09994:  BRA    999A
09996:  BTFSC  x24.2
09998:  BRA    99B8
0999A:  MOVF   xBF,F
0999C:  BNZ   99B8
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0999E:  MOVLW  02
099A0:  MOVWF  xCB
099A2:  MOVLB  0
099A4:  CALL   684A
099A8:  DECFSZ 01,W
099AA:  BRA    99AE
099AC:  BRA    99B6
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
099AE:  BCF    F89.3
099B0:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
099B2:  BCF    F89.4
099B4:  BCF    F92.4
099B6:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
099B8:  BTFSC  x34.0
099BA:  BRA    9A10
099BC:  BTFSC  x34.1
099BE:  BRA    9A10
099C0:  BTFSC  x34.2
099C2:  BRA    9A10
099C4:  BTFSC  x34.3
099C6:  BRA    9A10
099C8:  BTFSC  x34.4
099CA:  BRA    9A10
099CC:  BTFSC  x34.5
099CE:  BRA    9A10
099D0:  BTFSC  x34.6
099D2:  BRA    9A10
099D4:  BTFSC  x34.7
099D6:  BRA    9A10
099D8:  BTFSC  x35.0
099DA:  BRA    9A10
099DC:  BTFSC  x35.1
099DE:  BRA    9A10
099E0:  BTFSC  x35.2
099E2:  BRA    9A10
099E4:  BTFSC  x35.3
099E6:  BRA    9A10
099E8:  BTFSC  x35.4
099EA:  BRA    9A10
099EC:  BTFSC  x35.5
099EE:  BRA    9A10
099F0:  BTFSC  x35.6
099F2:  BRA    9A10
099F4:  BTFSC  x35.7
099F6:  BRA    9A10
099F8:  BTFSC  x36.0
099FA:  BRA    9A10
099FC:  BTFSC  x36.1
099FE:  BRA    9A10
09A00:  BTFSC  x36.2
09A02:  BRA    9A10
09A04:  BTFSC  x36.3
09A06:  BRA    9A10
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09A08:  BCF    F89.3
09A0A:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09A0C:  BCF    F89.4
09A0E:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09A10:  MOVLW  00
09A12:  BTFSC  x10.3
09A14:  MOVLW  01
09A16:  MOVWF  xCC
09A18:  MOVLW  00
09A1A:  BTFSC  x18.3
09A1C:  MOVLW  01
09A1E:  XORWF  xCC,W
09A20:  SUBLW  01
09A22:  BNZ   9A28
09A24:  BTFSS  x1C.3
09A26:  BRA    9A2C
09A28:  BTFSS  1A.5
09A2A:  BRA    9AF8
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
09A2C:  BTFSC  x34.3
09A2E:  BRA    9A4C
09A30:  MOVLB  0
09A32:  MOVF   x60,W
09A34:  SUBLW  0F
09A36:  BTFSC  FD8.2
09A38:  BRA    9A3E
09A3A:  MOVLB  D
09A3C:  BRA    9A4C
09A3E:  MOVLB  D
09A40:  BTFSC  x2C.3
09A42:  BRA    9A4C
....................       {
....................             TimeBase1s = 100 ;            //reload again
09A44:  MOVLW  64
09A46:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09A48:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B4 = 1;
09A4C:  BSF    x34.3
....................       if(Ack.B4 == 0)
09A4E:  BTFSC  x2C.3
09A50:  BRA    9A80
....................       {
....................          if(FlashingFlag == 0)
09A52:  BTFSC  1A.1
09A54:  BRA    9A5A
....................             {
....................                Output.B4 = 0;           //Flash output1
09A56:  BCF    x14.3
....................             }
09A58:  BRA    9A5C
....................             else
....................             {
....................                Output.B4 = 1;
09A5A:  BSF    x14.3
....................             }
....................          if (~AutoTestFlag)
09A5C:  BTFSC  1A.4
09A5E:  BRA    9A80
....................          {
....................             if(AlarmIndicator.B4 == 1){
09A60:  BTFSS  x28.3
09A62:  BRA    9A80
....................                 if(OutputBoth.B4 == 0)        //Both output
09A64:  BTFSC  x24.3
09A66:  BRA    9A72
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09A68:  BSF    F89.4
09A6A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09A6C:  BSF    F89.3
09A6E:  BCF    F92.3
....................                 }
09A70:  BRA    9A80
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09A72:  BTFSS  x20.3
09A74:  BRA    9A7C
09A76:  BSF    F89.4
09A78:  BCF    F92.4
09A7A:  BRA    9A80
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09A7C:  BSF    F89.3
09A7E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09A80:  MOVLW  01
09A82:  MOVWF  xBF
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
09A84:  BTFSC  x48.3
09A86:  BRA    9AF6
09A88:  BTFSC  30.4
09A8A:  BRA    9AF6
09A8C:  BTFSC  x2C.3
09A8E:  BRA    9AF6
....................       {
....................          SendSMS.B4 =1;
09A90:  BSF    x48.3
....................          fprintf(CH2,"AT+CMGS=\"");
09A92:  MOVLW  74
09A94:  MOVWF  FF6
09A96:  MOVLW  09
09A98:  MOVWF  FF7
09A9A:  MOVLB  0
09A9C:  CALL   2526
....................          fprintf(CH2,sms_phonenumber);
09AA0:  MOVLW  0A
09AA2:  MOVWF  FEA
09AA4:  MOVLW  81
09AA6:  MOVWF  FE9
09AA8:  CALL   6824
....................          
....................          fprintf(CH2,"\"");
09AAC:  MOVLW  22
09AAE:  MOVLB  D
09AB0:  MOVWF  xCD
09AB2:  MOVLB  0
09AB4:  CALL   24E0
....................          putc('\n',CH2);
09AB8:  MOVLW  0A
09ABA:  MOVLB  D
09ABC:  MOVWF  xCD
09ABE:  MOVLB  0
09AC0:  CALL   24E0
....................          delay_ms(50);
09AC4:  MOVLW  32
09AC6:  MOVLB  D
09AC8:  MOVWF  xCC
09ACA:  MOVLB  0
09ACC:  CALL   0A28
....................         
....................         fprintf(CH2,SMS_Massage4); 
09AD0:  MOVLW  0A
09AD2:  MOVWF  FEA
09AD4:  MOVLW  F0
09AD6:  MOVWF  FE9
09AD8:  CALL   6824
....................         putc('\n',CH2);
09ADC:  MOVLW  0A
09ADE:  MOVLB  D
09AE0:  MOVWF  xCD
09AE2:  MOVLB  0
09AE4:  CALL   24E0
....................        putc(26,CH2);
09AE8:  MOVLW  1A
09AEA:  MOVLB  D
09AEC:  MOVWF  xCD
09AEE:  MOVLB  0
09AF0:  CALL   24E0
09AF4:  MOVLB  D
....................       }
....................    }
09AF6:  BRA    9BA4
....................    else if(FaultType.B4 == 0)
09AF8:  BTFSC  x1C.3
09AFA:  BRA    9BA4
....................    {
....................       In2.B4 = 0x00;
09AFC:  BCF    x34.3
....................       Ack.B4 = 0;
09AFE:  BCF    x2C.3
....................       Output.B4 = 1;      //Off LED
09B00:  BSF    x14.3
....................       SendSMS.B4 =0;// Clear SMS
09B02:  BCF    x48.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0) && inputflag ==0)     //If Buzzer or Both
09B04:  BTFSC  x20.3
09B06:  BRA    9B0C
09B08:  BTFSC  x24.3
09B0A:  BRA    9B26
09B0C:  MOVF   xBF,F
09B0E:  BNZ   9B26
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09B10:  MOVLW  01
09B12:  MOVWF  xCB
09B14:  MOVLB  0
09B16:  CALL   684A
09B1A:  DECFSZ 01,W
09B1C:  BRA    9B20
09B1E:  BRA    9B24
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09B20:  BCF    F89.4
09B22:  BCF    F92.4
09B24:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0) && inputflag ==0)  //If Bell or Both
09B26:  BTFSS  x20.3
09B28:  BRA    9B2E
09B2A:  BTFSC  x24.3
09B2C:  BRA    9B4C
09B2E:  MOVF   xBF,F
09B30:  BNZ   9B4C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09B32:  MOVLW  02
09B34:  MOVWF  xCB
09B36:  MOVLB  0
09B38:  CALL   684A
09B3C:  DECFSZ 01,W
09B3E:  BRA    9B42
09B40:  BRA    9B4A
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09B42:  BCF    F89.3
09B44:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09B46:  BCF    F89.4
09B48:  BCF    F92.4
09B4A:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09B4C:  BTFSC  x34.0
09B4E:  BRA    9BA4
09B50:  BTFSC  x34.1
09B52:  BRA    9BA4
09B54:  BTFSC  x34.2
09B56:  BRA    9BA4
09B58:  BTFSC  x34.3
09B5A:  BRA    9BA4
09B5C:  BTFSC  x34.4
09B5E:  BRA    9BA4
09B60:  BTFSC  x34.5
09B62:  BRA    9BA4
09B64:  BTFSC  x34.6
09B66:  BRA    9BA4
09B68:  BTFSC  x34.7
09B6A:  BRA    9BA4
09B6C:  BTFSC  x35.0
09B6E:  BRA    9BA4
09B70:  BTFSC  x35.1
09B72:  BRA    9BA4
09B74:  BTFSC  x35.2
09B76:  BRA    9BA4
09B78:  BTFSC  x35.3
09B7A:  BRA    9BA4
09B7C:  BTFSC  x35.4
09B7E:  BRA    9BA4
09B80:  BTFSC  x35.5
09B82:  BRA    9BA4
09B84:  BTFSC  x35.6
09B86:  BRA    9BA4
09B88:  BTFSC  x35.7
09B8A:  BRA    9BA4
09B8C:  BTFSC  x36.0
09B8E:  BRA    9BA4
09B90:  BTFSC  x36.1
09B92:  BRA    9BA4
09B94:  BTFSC  x36.2
09B96:  BRA    9BA4
09B98:  BTFSC  x36.3
09B9A:  BRA    9BA4
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09B9C:  BCF    F89.3
09B9E:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09BA0:  BCF    F89.4
09BA2:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09BA4:  MOVLW  00
09BA6:  BTFSC  x10.4
09BA8:  MOVLW  01
09BAA:  MOVWF  xCC
09BAC:  MOVLW  00
09BAE:  BTFSC  x18.4
09BB0:  MOVLW  01
09BB2:  XORWF  xCC,W
09BB4:  SUBLW  01
09BB6:  BNZ   9BBC
09BB8:  BTFSS  x1C.4
09BBA:  BRA    9BC0
09BBC:  BTFSS  1A.5
09BBE:  BRA    9C8C
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
09BC0:  BTFSC  x34.4
09BC2:  BRA    9BE0
09BC4:  MOVLB  0
09BC6:  MOVF   x60,W
09BC8:  SUBLW  0F
09BCA:  BTFSC  FD8.2
09BCC:  BRA    9BD2
09BCE:  MOVLB  D
09BD0:  BRA    9BE0
09BD2:  MOVLB  D
09BD4:  BTFSC  x2C.4
09BD6:  BRA    9BE0
....................       {
....................             TimeBase1s = 100 ;            //reload again
09BD8:  MOVLW  64
09BDA:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09BDC:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B5 = 1;
09BE0:  BSF    x34.4
....................       if(Ack.B5 == 0)
09BE2:  BTFSC  x2C.4
09BE4:  BRA    9C14
....................       {
....................          if(FlashingFlag == 0)
09BE6:  BTFSC  1A.1
09BE8:  BRA    9BEE
....................             {
....................                Output.B5 = 0;           //Flash output1
09BEA:  BCF    x14.4
....................             }
09BEC:  BRA    9BF0
....................             else
....................             {
....................                Output.B5 = 1;
09BEE:  BSF    x14.4
....................             }
....................          if (~AutoTestFlag)
09BF0:  BTFSC  1A.4
09BF2:  BRA    9C14
....................          {
....................             if(AlarmIndicator.B5 == 1){
09BF4:  BTFSS  x28.4
09BF6:  BRA    9C14
....................                 if(OutputBoth.B5 == 0)        //Both output
09BF8:  BTFSC  x24.4
09BFA:  BRA    9C06
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09BFC:  BSF    F89.4
09BFE:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09C00:  BSF    F89.3
09C02:  BCF    F92.3
....................                 }
09C04:  BRA    9C14
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09C06:  BTFSS  x20.4
09C08:  BRA    9C10
09C0A:  BSF    F89.4
09C0C:  BCF    F92.4
09C0E:  BRA    9C14
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09C10:  BSF    F89.3
09C12:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09C14:  MOVLW  01
09C16:  MOVWF  xBF
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
09C18:  BTFSC  x48.4
09C1A:  BRA    9C8A
09C1C:  BTFSC  30.4
09C1E:  BRA    9C8A
09C20:  BTFSC  x2C.4
09C22:  BRA    9C8A
....................       {
....................          SendSMS.B5 =1;
09C24:  BSF    x48.4
....................          fprintf(CH2,"AT+CMGS=\"");
09C26:  MOVLW  7E
09C28:  MOVWF  FF6
09C2A:  MOVLW  09
09C2C:  MOVWF  FF7
09C2E:  MOVLB  0
09C30:  CALL   2526
....................          fprintf(CH2,sms_phonenumber);
09C34:  MOVLW  0A
09C36:  MOVWF  FEA
09C38:  MOVLW  81
09C3A:  MOVWF  FE9
09C3C:  CALL   6824
....................          
....................          fprintf(CH2,"\"");
09C40:  MOVLW  22
09C42:  MOVLB  D
09C44:  MOVWF  xCD
09C46:  MOVLB  0
09C48:  CALL   24E0
....................          putc('\n',CH2);
09C4C:  MOVLW  0A
09C4E:  MOVLB  D
09C50:  MOVWF  xCD
09C52:  MOVLB  0
09C54:  CALL   24E0
....................          delay_ms(50);
09C58:  MOVLW  32
09C5A:  MOVLB  D
09C5C:  MOVWF  xCC
09C5E:  MOVLB  0
09C60:  CALL   0A28
....................         
....................         fprintf(CH2,SMS_Massage5); 
09C64:  MOVLW  0B
09C66:  MOVWF  FEA
09C68:  MOVLW  10
09C6A:  MOVWF  FE9
09C6C:  CALL   6824
....................         putc('\n',CH2);
09C70:  MOVLW  0A
09C72:  MOVLB  D
09C74:  MOVWF  xCD
09C76:  MOVLB  0
09C78:  CALL   24E0
....................        putc(26,CH2);
09C7C:  MOVLW  1A
09C7E:  MOVLB  D
09C80:  MOVWF  xCD
09C82:  MOVLB  0
09C84:  CALL   24E0
09C88:  MOVLB  D
....................       }
....................    }
09C8A:  BRA    9D38
....................    else if(FaultType.B5 == 0)
09C8C:  BTFSC  x1C.4
09C8E:  BRA    9D38
....................    {
....................       In2.B5 = 0x00;
09C90:  BCF    x34.4
....................       Ack.B5 = 0;
09C92:  BCF    x2C.4
....................       Output.B5 = 1;      //Off LED
09C94:  BSF    x14.4
....................       SendSMS.B5 =0;// Clear SMS
09C96:  BCF    x48.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0) && inputflag ==0)     //If Buzzer or Both
09C98:  BTFSC  x20.4
09C9A:  BRA    9CA0
09C9C:  BTFSC  x24.4
09C9E:  BRA    9CBA
09CA0:  MOVF   xBF,F
09CA2:  BNZ   9CBA
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09CA4:  MOVLW  01
09CA6:  MOVWF  xCB
09CA8:  MOVLB  0
09CAA:  CALL   684A
09CAE:  DECFSZ 01,W
09CB0:  BRA    9CB4
09CB2:  BRA    9CB8
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09CB4:  BCF    F89.4
09CB6:  BCF    F92.4
09CB8:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0) && inputflag ==0) //If Bell or Both
09CBA:  BTFSS  x20.4
09CBC:  BRA    9CC2
09CBE:  BTFSC  x24.4
09CC0:  BRA    9CE0
09CC2:  MOVF   xBF,F
09CC4:  BNZ   9CE0
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09CC6:  MOVLW  02
09CC8:  MOVWF  xCB
09CCA:  MOVLB  0
09CCC:  CALL   684A
09CD0:  DECFSZ 01,W
09CD2:  BRA    9CD6
09CD4:  BRA    9CDE
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09CD6:  BCF    F89.3
09CD8:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09CDA:  BCF    F89.4
09CDC:  BCF    F92.4
09CDE:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09CE0:  BTFSC  x34.0
09CE2:  BRA    9D38
09CE4:  BTFSC  x34.1
09CE6:  BRA    9D38
09CE8:  BTFSC  x34.2
09CEA:  BRA    9D38
09CEC:  BTFSC  x34.3
09CEE:  BRA    9D38
09CF0:  BTFSC  x34.4
09CF2:  BRA    9D38
09CF4:  BTFSC  x34.5
09CF6:  BRA    9D38
09CF8:  BTFSC  x34.6
09CFA:  BRA    9D38
09CFC:  BTFSC  x34.7
09CFE:  BRA    9D38
09D00:  BTFSC  x35.0
09D02:  BRA    9D38
09D04:  BTFSC  x35.1
09D06:  BRA    9D38
09D08:  BTFSC  x35.2
09D0A:  BRA    9D38
09D0C:  BTFSC  x35.3
09D0E:  BRA    9D38
09D10:  BTFSC  x35.4
09D12:  BRA    9D38
09D14:  BTFSC  x35.5
09D16:  BRA    9D38
09D18:  BTFSC  x35.6
09D1A:  BRA    9D38
09D1C:  BTFSC  x35.7
09D1E:  BRA    9D38
09D20:  BTFSC  x36.0
09D22:  BRA    9D38
09D24:  BTFSC  x36.1
09D26:  BRA    9D38
09D28:  BTFSC  x36.2
09D2A:  BRA    9D38
09D2C:  BTFSC  x36.3
09D2E:  BRA    9D38
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09D30:  BCF    F89.3
09D32:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09D34:  BCF    F89.4
09D36:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09D38:  MOVLW  00
09D3A:  BTFSC  x10.5
09D3C:  MOVLW  01
09D3E:  MOVWF  xCC
09D40:  MOVLW  00
09D42:  BTFSC  x18.5
09D44:  MOVLW  01
09D46:  XORWF  xCC,W
09D48:  SUBLW  01
09D4A:  BNZ   9D50
09D4C:  BTFSS  x1C.5
09D4E:  BRA    9D54
09D50:  BTFSS  1A.5
09D52:  BRA    9E20
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
09D54:  BTFSC  x34.5
09D56:  BRA    9D74
09D58:  MOVLB  0
09D5A:  MOVF   x60,W
09D5C:  SUBLW  0F
09D5E:  BTFSC  FD8.2
09D60:  BRA    9D66
09D62:  MOVLB  D
09D64:  BRA    9D74
09D66:  MOVLB  D
09D68:  BTFSC  x2C.5
09D6A:  BRA    9D74
....................       {
....................             TimeBase1s = 100 ;            //reload again
09D6C:  MOVLW  64
09D6E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09D70:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B6 = 1;
09D74:  BSF    x34.5
....................       if(Ack.B6 == 0)
09D76:  BTFSC  x2C.5
09D78:  BRA    9DA8
....................       {
....................          if(FlashingFlag == 0)
09D7A:  BTFSC  1A.1
09D7C:  BRA    9D82
....................             {
....................                Output.B6 = 0;           //Flash output1
09D7E:  BCF    x14.5
....................             }
09D80:  BRA    9D84
....................             else
....................             {
....................                Output.B6 = 1;
09D82:  BSF    x14.5
....................             }
....................          if (~AutoTestFlag)
09D84:  BTFSC  1A.4
09D86:  BRA    9DA8
....................          {
....................             if(AlarmIndicator.B6 == 1){
09D88:  BTFSS  x28.5
09D8A:  BRA    9DA8
....................                 if(OutputBoth.B6 == 0)        //Both output
09D8C:  BTFSC  x24.5
09D8E:  BRA    9D9A
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09D90:  BSF    F89.4
09D92:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09D94:  BSF    F89.3
09D96:  BCF    F92.3
....................                 }
09D98:  BRA    9DA8
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09D9A:  BTFSS  x20.5
09D9C:  BRA    9DA4
09D9E:  BSF    F89.4
09DA0:  BCF    F92.4
09DA2:  BRA    9DA8
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09DA4:  BSF    F89.3
09DA6:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09DA8:  MOVLW  01
09DAA:  MOVWF  xBF
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
09DAC:  BTFSC  x48.5
09DAE:  BRA    9E1E
09DB0:  BTFSC  30.4
09DB2:  BRA    9E1E
09DB4:  BTFSC  x2C.5
09DB6:  BRA    9E1E
....................       {
....................          SendSMS.B6 =1;
09DB8:  BSF    x48.5
....................          fprintf(CH2,"AT+CMGS=\"");
09DBA:  MOVLW  88
09DBC:  MOVWF  FF6
09DBE:  MOVLW  09
09DC0:  MOVWF  FF7
09DC2:  MOVLB  0
09DC4:  CALL   2526
....................          fprintf(CH2,sms_phonenumber);
09DC8:  MOVLW  0A
09DCA:  MOVWF  FEA
09DCC:  MOVLW  81
09DCE:  MOVWF  FE9
09DD0:  CALL   6824
....................          
....................          fprintf(CH2,"\"");
09DD4:  MOVLW  22
09DD6:  MOVLB  D
09DD8:  MOVWF  xCD
09DDA:  MOVLB  0
09DDC:  CALL   24E0
....................          putc('\n',CH2);
09DE0:  MOVLW  0A
09DE2:  MOVLB  D
09DE4:  MOVWF  xCD
09DE6:  MOVLB  0
09DE8:  CALL   24E0
....................          delay_ms(50);
09DEC:  MOVLW  32
09DEE:  MOVLB  D
09DF0:  MOVWF  xCC
09DF2:  MOVLB  0
09DF4:  CALL   0A28
....................         
....................         fprintf(CH2,SMS_Massage6);  
09DF8:  MOVLW  0B
09DFA:  MOVWF  FEA
09DFC:  MOVLW  30
09DFE:  MOVWF  FE9
09E00:  CALL   6824
....................         putc('\n',CH2);
09E04:  MOVLW  0A
09E06:  MOVLB  D
09E08:  MOVWF  xCD
09E0A:  MOVLB  0
09E0C:  CALL   24E0
....................        putc(26,CH2);
09E10:  MOVLW  1A
09E12:  MOVLB  D
09E14:  MOVWF  xCD
09E16:  MOVLB  0
09E18:  CALL   24E0
09E1C:  MOVLB  D
....................       }
....................    }
09E1E:  BRA    9ECC
....................    else if(FaultType.B6 == 0)
09E20:  BTFSC  x1C.5
09E22:  BRA    9ECC
....................    {
....................       In2.B6 = 0x00;
09E24:  BCF    x34.5
....................       Ack.B6 = 0;
09E26:  BCF    x2C.5
....................       Output.B6 = 1;      //Off LED
09E28:  BSF    x14.5
....................       SendSMS.B6 =0;// Clear SMS
09E2A:  BCF    x48.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
09E2C:  BTFSC  x20.5
09E2E:  BRA    9E34
09E30:  BTFSC  x24.5
09E32:  BRA    9E4E
09E34:  MOVF   xBF,F
09E36:  BNZ   9E4E
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09E38:  MOVLW  01
09E3A:  MOVWF  xCB
09E3C:  MOVLB  0
09E3E:  CALL   684A
09E42:  DECFSZ 01,W
09E44:  BRA    9E48
09E46:  BRA    9E4C
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09E48:  BCF    F89.4
09E4A:  BCF    F92.4
09E4C:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
09E4E:  BTFSS  x20.5
09E50:  BRA    9E56
09E52:  BTFSC  x24.5
09E54:  BRA    9E74
09E56:  MOVF   xBF,F
09E58:  BNZ   9E74
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09E5A:  MOVLW  02
09E5C:  MOVWF  xCB
09E5E:  MOVLB  0
09E60:  CALL   684A
09E64:  DECFSZ 01,W
09E66:  BRA    9E6A
09E68:  BRA    9E72
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09E6A:  BCF    F89.3
09E6C:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09E6E:  BCF    F89.4
09E70:  BCF    F92.4
09E72:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09E74:  BTFSC  x34.0
09E76:  BRA    9ECC
09E78:  BTFSC  x34.1
09E7A:  BRA    9ECC
09E7C:  BTFSC  x34.2
09E7E:  BRA    9ECC
09E80:  BTFSC  x34.3
09E82:  BRA    9ECC
09E84:  BTFSC  x34.4
09E86:  BRA    9ECC
09E88:  BTFSC  x34.5
09E8A:  BRA    9ECC
09E8C:  BTFSC  x34.6
09E8E:  BRA    9ECC
09E90:  BTFSC  x34.7
09E92:  BRA    9ECC
09E94:  BTFSC  x35.0
09E96:  BRA    9ECC
09E98:  BTFSC  x35.1
09E9A:  BRA    9ECC
09E9C:  BTFSC  x35.2
09E9E:  BRA    9ECC
09EA0:  BTFSC  x35.3
09EA2:  BRA    9ECC
09EA4:  BTFSC  x35.4
09EA6:  BRA    9ECC
09EA8:  BTFSC  x35.5
09EAA:  BRA    9ECC
09EAC:  BTFSC  x35.6
09EAE:  BRA    9ECC
09EB0:  BTFSC  x35.7
09EB2:  BRA    9ECC
09EB4:  BTFSC  x36.0
09EB6:  BRA    9ECC
09EB8:  BTFSC  x36.1
09EBA:  BRA    9ECC
09EBC:  BTFSC  x36.2
09EBE:  BRA    9ECC
09EC0:  BTFSC  x36.3
09EC2:  BRA    9ECC
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09EC4:  BCF    F89.3
09EC6:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09EC8:  BCF    F89.4
09ECA:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09ECC:  MOVLW  00
09ECE:  BTFSC  x10.6
09ED0:  MOVLW  01
09ED2:  MOVWF  xCC
09ED4:  MOVLW  00
09ED6:  BTFSC  x18.6
09ED8:  MOVLW  01
09EDA:  XORWF  xCC,W
09EDC:  SUBLW  01
09EDE:  BNZ   9EE4
09EE0:  BTFSS  x1C.6
09EE2:  BRA    9EE8
09EE4:  BTFSS  1A.5
09EE6:  BRA    9FB4
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
09EE8:  BTFSC  x34.6
09EEA:  BRA    9F08
09EEC:  MOVLB  0
09EEE:  MOVF   x60,W
09EF0:  SUBLW  0F
09EF2:  BTFSC  FD8.2
09EF4:  BRA    9EFA
09EF6:  MOVLB  D
09EF8:  BRA    9F08
09EFA:  MOVLB  D
09EFC:  BTFSC  x2C.6
09EFE:  BRA    9F08
....................       {
....................             TimeBase1s = 100 ;            //reload again
09F00:  MOVLW  64
09F02:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09F04:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B7 = 1;
09F08:  BSF    x34.6
....................       if(Ack.B7 == 0)
09F0A:  BTFSC  x2C.6
09F0C:  BRA    9F3C
....................       {
....................          if(FlashingFlag == 0)
09F0E:  BTFSC  1A.1
09F10:  BRA    9F16
....................             {
....................                Output.B7 = 0;           //Flash output1
09F12:  BCF    x14.6
....................             }
09F14:  BRA    9F18
....................             else
....................             {
....................                Output.B7 = 1;
09F16:  BSF    x14.6
....................             }
....................          if (~AutoTestFlag)
09F18:  BTFSC  1A.4
09F1A:  BRA    9F3C
....................          {
....................             if(AlarmIndicator.B7 == 1){
09F1C:  BTFSS  x28.6
09F1E:  BRA    9F3C
....................                 if(OutputBoth.B7 == 0)        //Both output
09F20:  BTFSC  x24.6
09F22:  BRA    9F2E
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09F24:  BSF    F89.4
09F26:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09F28:  BSF    F89.3
09F2A:  BCF    F92.3
....................                 }
09F2C:  BRA    9F3C
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09F2E:  BTFSS  x20.6
09F30:  BRA    9F38
09F32:  BSF    F89.4
09F34:  BCF    F92.4
09F36:  BRA    9F3C
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09F38:  BSF    F89.3
09F3A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09F3C:  MOVLW  01
09F3E:  MOVWF  xBF
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
09F40:  BTFSC  x48.6
09F42:  BRA    9FB2
09F44:  BTFSC  30.4
09F46:  BRA    9FB2
09F48:  BTFSC  x2C.6
09F4A:  BRA    9FB2
....................       {
....................          SendSMS.B7 =1;
09F4C:  BSF    x48.6
....................          fprintf(CH2,"AT+CMGS=\"");
09F4E:  MOVLW  92
09F50:  MOVWF  FF6
09F52:  MOVLW  09
09F54:  MOVWF  FF7
09F56:  MOVLB  0
09F58:  CALL   2526
....................          fprintf(CH2,sms_phonenumber);
09F5C:  MOVLW  0A
09F5E:  MOVWF  FEA
09F60:  MOVLW  81
09F62:  MOVWF  FE9
09F64:  CALL   6824
....................          
....................          fprintf(CH2,"\"");
09F68:  MOVLW  22
09F6A:  MOVLB  D
09F6C:  MOVWF  xCD
09F6E:  MOVLB  0
09F70:  CALL   24E0
....................          putc('\n',CH2);
09F74:  MOVLW  0A
09F76:  MOVLB  D
09F78:  MOVWF  xCD
09F7A:  MOVLB  0
09F7C:  CALL   24E0
....................          delay_ms(50);
09F80:  MOVLW  32
09F82:  MOVLB  D
09F84:  MOVWF  xCC
09F86:  MOVLB  0
09F88:  CALL   0A28
....................         
....................         fprintf(CH2,SMS_Massage7);  
09F8C:  MOVLW  0B
09F8E:  MOVWF  FEA
09F90:  MOVLW  50
09F92:  MOVWF  FE9
09F94:  CALL   6824
....................         putc('\n',CH2);
09F98:  MOVLW  0A
09F9A:  MOVLB  D
09F9C:  MOVWF  xCD
09F9E:  MOVLB  0
09FA0:  CALL   24E0
....................        putc(26,CH2);
09FA4:  MOVLW  1A
09FA6:  MOVLB  D
09FA8:  MOVWF  xCD
09FAA:  MOVLB  0
09FAC:  CALL   24E0
09FB0:  MOVLB  D
....................       }
....................    }
09FB2:  BRA    A060
....................    else if(FaultType.B7 == 0)
09FB4:  BTFSC  x1C.6
09FB6:  BRA    A060
....................    {
....................       In2.B7 = 0x00;
09FB8:  BCF    x34.6
....................       Ack.B7 = 0;
09FBA:  BCF    x2C.6
....................       Output.B7 = 1;      //Off LED
09FBC:  BSF    x14.6
....................       SendSMS.B7 =0;// Clear SMS
09FBE:  BCF    x48.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
09FC0:  BTFSC  x20.6
09FC2:  BRA    9FC8
09FC4:  BTFSC  x24.6
09FC6:  BRA    9FE2
09FC8:  MOVF   xBF,F
09FCA:  BNZ   9FE2
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09FCC:  MOVLW  01
09FCE:  MOVWF  xCB
09FD0:  MOVLB  0
09FD2:  CALL   684A
09FD6:  DECFSZ 01,W
09FD8:  BRA    9FDC
09FDA:  BRA    9FE0
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09FDC:  BCF    F89.4
09FDE:  BCF    F92.4
09FE0:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
09FE2:  BTFSS  x20.6
09FE4:  BRA    9FEA
09FE6:  BTFSC  x24.6
09FE8:  BRA    A008
09FEA:  MOVF   xBF,F
09FEC:  BNZ   A008
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09FEE:  MOVLW  02
09FF0:  MOVWF  xCB
09FF2:  MOVLB  0
09FF4:  CALL   684A
09FF8:  DECFSZ 01,W
09FFA:  BRA    9FFE
09FFC:  BRA    A006
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09FFE:  BCF    F89.3
0A000:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A002:  BCF    F89.4
0A004:  BCF    F92.4
0A006:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A008:  BTFSC  x34.0
0A00A:  BRA    A060
0A00C:  BTFSC  x34.1
0A00E:  BRA    A060
0A010:  BTFSC  x34.2
0A012:  BRA    A060
0A014:  BTFSC  x34.3
0A016:  BRA    A060
0A018:  BTFSC  x34.4
0A01A:  BRA    A060
0A01C:  BTFSC  x34.5
0A01E:  BRA    A060
0A020:  BTFSC  x34.6
0A022:  BRA    A060
0A024:  BTFSC  x34.7
0A026:  BRA    A060
0A028:  BTFSC  x35.0
0A02A:  BRA    A060
0A02C:  BTFSC  x35.1
0A02E:  BRA    A060
0A030:  BTFSC  x35.2
0A032:  BRA    A060
0A034:  BTFSC  x35.3
0A036:  BRA    A060
0A038:  BTFSC  x35.4
0A03A:  BRA    A060
0A03C:  BTFSC  x35.5
0A03E:  BRA    A060
0A040:  BTFSC  x35.6
0A042:  BRA    A060
0A044:  BTFSC  x35.7
0A046:  BRA    A060
0A048:  BTFSC  x36.0
0A04A:  BRA    A060
0A04C:  BTFSC  x36.1
0A04E:  BRA    A060
0A050:  BTFSC  x36.2
0A052:  BRA    A060
0A054:  BTFSC  x36.3
0A056:  BRA    A060
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A058:  BCF    F89.3
0A05A:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A05C:  BCF    F89.4
0A05E:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
0A060:  MOVLW  00
0A062:  BTFSC  x10.7
0A064:  MOVLW  01
0A066:  MOVWF  xCC
0A068:  MOVLW  00
0A06A:  BTFSC  x18.7
0A06C:  MOVLW  01
0A06E:  XORWF  xCC,W
0A070:  SUBLW  01
0A072:  BNZ   A078
0A074:  BTFSS  x1C.7
0A076:  BRA    A07C
0A078:  BTFSS  1A.5
0A07A:  BRA    A148
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
0A07C:  BTFSC  x34.7
0A07E:  BRA    A09C
0A080:  MOVLB  0
0A082:  MOVF   x60,W
0A084:  SUBLW  0F
0A086:  BTFSC  FD8.2
0A088:  BRA    A08E
0A08A:  MOVLB  D
0A08C:  BRA    A09C
0A08E:  MOVLB  D
0A090:  BTFSC  x2C.7
0A092:  BRA    A09C
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A094:  MOVLW  64
0A096:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A098:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B8 = 1;
0A09C:  BSF    x34.7
....................       if(Ack.B8 == 0)
0A09E:  BTFSC  x2C.7
0A0A0:  BRA    A0D0
....................       {
....................          if(FlashingFlag == 0)
0A0A2:  BTFSC  1A.1
0A0A4:  BRA    A0AA
....................             {
....................                Output.B8 = 0;           //Flash output1
0A0A6:  BCF    x14.7
....................             }
0A0A8:  BRA    A0AC
....................             else
....................             {
....................                Output.B8 = 1;
0A0AA:  BSF    x14.7
....................             }
....................          if (~AutoTestFlag)
0A0AC:  BTFSC  1A.4
0A0AE:  BRA    A0D0
....................          {
....................             if(AlarmIndicator.B8 == 1){
0A0B0:  BTFSS  x28.7
0A0B2:  BRA    A0D0
....................                 if(OutputBoth.B8 == 0)        //Both output
0A0B4:  BTFSC  x24.7
0A0B6:  BRA    A0C2
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A0B8:  BSF    F89.4
0A0BA:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A0BC:  BSF    F89.3
0A0BE:  BCF    F92.3
....................                 }
0A0C0:  BRA    A0D0
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A0C2:  BTFSS  x20.7
0A0C4:  BRA    A0CC
0A0C6:  BSF    F89.4
0A0C8:  BCF    F92.4
0A0CA:  BRA    A0D0
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A0CC:  BSF    F89.3
0A0CE:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A0D0:  MOVLW  01
0A0D2:  MOVWF  xBF
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
0A0D4:  BTFSC  x48.7
0A0D6:  BRA    A146
0A0D8:  BTFSC  30.4
0A0DA:  BRA    A146
0A0DC:  BTFSC  x2C.7
0A0DE:  BRA    A146
....................       {
....................          SendSMS.B8 =1;
0A0E0:  BSF    x48.7
....................          fprintf(CH2,"AT+CMGS=\"");
0A0E2:  MOVLW  9C
0A0E4:  MOVWF  FF6
0A0E6:  MOVLW  09
0A0E8:  MOVWF  FF7
0A0EA:  MOVLB  0
0A0EC:  CALL   2526
....................          fprintf(CH2,sms_phonenumber);
0A0F0:  MOVLW  0A
0A0F2:  MOVWF  FEA
0A0F4:  MOVLW  81
0A0F6:  MOVWF  FE9
0A0F8:  CALL   6824
....................          
....................          fprintf(CH2,"\"");
0A0FC:  MOVLW  22
0A0FE:  MOVLB  D
0A100:  MOVWF  xCD
0A102:  MOVLB  0
0A104:  CALL   24E0
....................          putc('\n',CH2);
0A108:  MOVLW  0A
0A10A:  MOVLB  D
0A10C:  MOVWF  xCD
0A10E:  MOVLB  0
0A110:  CALL   24E0
....................          delay_ms(50);
0A114:  MOVLW  32
0A116:  MOVLB  D
0A118:  MOVWF  xCC
0A11A:  MOVLB  0
0A11C:  CALL   0A28
....................         
....................         fprintf(CH2,SMS_Massage8);   
0A120:  MOVLW  0B
0A122:  MOVWF  FEA
0A124:  MOVLW  70
0A126:  MOVWF  FE9
0A128:  CALL   6824
....................         putc('\n',CH2);
0A12C:  MOVLW  0A
0A12E:  MOVLB  D
0A130:  MOVWF  xCD
0A132:  MOVLB  0
0A134:  CALL   24E0
....................         putc(26,CH2);
0A138:  MOVLW  1A
0A13A:  MOVLB  D
0A13C:  MOVWF  xCD
0A13E:  MOVLB  0
0A140:  CALL   24E0
0A144:  MOVLB  D
....................       }
....................    }
0A146:  BRA    A1F4
....................    else if(FaultType.B8 == 0)
0A148:  BTFSC  x1C.7
0A14A:  BRA    A1F4
....................    {
....................       In2.B8 = 0x00;
0A14C:  BCF    x34.7
....................       Ack.B8 = 0;
0A14E:  BCF    x2C.7
....................       Output.B8 = 1;      //Off LED
0A150:  BSF    x14.7
....................       SendSMS.B8 =0;// Clear SMS
0A152:  BCF    x48.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
0A154:  BTFSC  x20.7
0A156:  BRA    A15C
0A158:  BTFSC  x24.7
0A15A:  BRA    A176
0A15C:  MOVF   xBF,F
0A15E:  BNZ   A176
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A160:  MOVLW  01
0A162:  MOVWF  xCB
0A164:  MOVLB  0
0A166:  CALL   684A
0A16A:  DECFSZ 01,W
0A16C:  BRA    A170
0A16E:  BRA    A174
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A170:  BCF    F89.4
0A172:  BCF    F92.4
0A174:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
0A176:  BTFSS  x20.7
0A178:  BRA    A17E
0A17A:  BTFSC  x24.7
0A17C:  BRA    A19C
0A17E:  MOVF   xBF,F
0A180:  BNZ   A19C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A182:  MOVLW  02
0A184:  MOVWF  xCB
0A186:  MOVLB  0
0A188:  CALL   684A
0A18C:  DECFSZ 01,W
0A18E:  BRA    A192
0A190:  BRA    A19A
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A192:  BCF    F89.3
0A194:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A196:  BCF    F89.4
0A198:  BCF    F92.4
0A19A:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A19C:  BTFSC  x34.0
0A19E:  BRA    A1F4
0A1A0:  BTFSC  x34.1
0A1A2:  BRA    A1F4
0A1A4:  BTFSC  x34.2
0A1A6:  BRA    A1F4
0A1A8:  BTFSC  x34.3
0A1AA:  BRA    A1F4
0A1AC:  BTFSC  x34.4
0A1AE:  BRA    A1F4
0A1B0:  BTFSC  x34.5
0A1B2:  BRA    A1F4
0A1B4:  BTFSC  x34.6
0A1B6:  BRA    A1F4
0A1B8:  BTFSC  x34.7
0A1BA:  BRA    A1F4
0A1BC:  BTFSC  x35.0
0A1BE:  BRA    A1F4
0A1C0:  BTFSC  x35.1
0A1C2:  BRA    A1F4
0A1C4:  BTFSC  x35.2
0A1C6:  BRA    A1F4
0A1C8:  BTFSC  x35.3
0A1CA:  BRA    A1F4
0A1CC:  BTFSC  x35.4
0A1CE:  BRA    A1F4
0A1D0:  BTFSC  x35.5
0A1D2:  BRA    A1F4
0A1D4:  BTFSC  x35.6
0A1D6:  BRA    A1F4
0A1D8:  BTFSC  x35.7
0A1DA:  BRA    A1F4
0A1DC:  BTFSC  x36.0
0A1DE:  BRA    A1F4
0A1E0:  BTFSC  x36.1
0A1E2:  BRA    A1F4
0A1E4:  BTFSC  x36.2
0A1E6:  BRA    A1F4
0A1E8:  BTFSC  x36.3
0A1EA:  BRA    A1F4
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A1EC:  BCF    F89.3
0A1EE:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A1F0:  BCF    F89.4
0A1F2:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A1F4:  MOVLW  00
0A1F6:  BTFSC  x11.0
0A1F8:  MOVLW  01
0A1FA:  MOVWF  xCC
0A1FC:  MOVLW  00
0A1FE:  BTFSC  x19.0
0A200:  MOVLW  01
0A202:  XORWF  xCC,W
0A204:  SUBLW  01
0A206:  BNZ   A20C
0A208:  BTFSS  x1D.0
0A20A:  BRA    A210
0A20C:  BTFSS  1A.5
0A20E:  BRA    A2DC
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
0A210:  BTFSC  x35.0
0A212:  BRA    A230
0A214:  MOVLB  0
0A216:  MOVF   x60,W
0A218:  SUBLW  0F
0A21A:  BTFSC  FD8.2
0A21C:  BRA    A222
0A21E:  MOVLB  D
0A220:  BRA    A230
0A222:  MOVLB  D
0A224:  BTFSC  x2D.0
0A226:  BRA    A230
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A228:  MOVLW  64
0A22A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A22C:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B9 = 1;
0A230:  BSF    x35.0
....................       if(Ack.B9 == 0)
0A232:  BTFSC  x2D.0
0A234:  BRA    A264
....................       {
....................          if(FlashingFlag == 0)
0A236:  BTFSC  1A.1
0A238:  BRA    A23E
....................             {
....................                Output.B9 = 0;           //Flash output1
0A23A:  BCF    x15.0
....................             }
0A23C:  BRA    A240
....................             else
....................             {
....................                Output.B9 = 1;
0A23E:  BSF    x15.0
....................             }
....................          if (~AutoTestFlag)
0A240:  BTFSC  1A.4
0A242:  BRA    A264
....................          {
....................             if(AlarmIndicator.B9 == 1){
0A244:  BTFSS  x29.0
0A246:  BRA    A264
....................                 if(OutputBoth.B9 == 0)        //Both output
0A248:  BTFSC  x25.0
0A24A:  BRA    A256
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A24C:  BSF    F89.4
0A24E:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A250:  BSF    F89.3
0A252:  BCF    F92.3
....................                 }
0A254:  BRA    A264
....................                 else
....................                 {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A256:  BTFSS  x21.0
0A258:  BRA    A260
0A25A:  BSF    F89.4
0A25C:  BCF    F92.4
0A25E:  BRA    A264
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A260:  BSF    F89.3
0A262:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A264:  MOVLW  01
0A266:  MOVWF  xBF
....................       // SMS Sending   
....................       if((SendSMS.B9 ==0) && (functointest_f ==0) && (Ack.B9 ==0))
0A268:  BTFSC  x49.0
0A26A:  BRA    A2DA
0A26C:  BTFSC  30.4
0A26E:  BRA    A2DA
0A270:  BTFSC  x2D.0
0A272:  BRA    A2DA
....................       {
....................          SendSMS.B9 =1;
0A274:  BSF    x49.0
....................          fprintf(CH2,"AT+CMGS=\"");
0A276:  MOVLW  A6
0A278:  MOVWF  FF6
0A27A:  MOVLW  09
0A27C:  MOVWF  FF7
0A27E:  MOVLB  0
0A280:  CALL   2526
....................          fprintf(CH2,sms_phonenumber);
0A284:  MOVLW  0A
0A286:  MOVWF  FEA
0A288:  MOVLW  81
0A28A:  MOVWF  FE9
0A28C:  CALL   6824
....................          
....................          fprintf(CH2,"\"");
0A290:  MOVLW  22
0A292:  MOVLB  D
0A294:  MOVWF  xCD
0A296:  MOVLB  0
0A298:  CALL   24E0
....................          putc('\n',CH2);
0A29C:  MOVLW  0A
0A29E:  MOVLB  D
0A2A0:  MOVWF  xCD
0A2A2:  MOVLB  0
0A2A4:  CALL   24E0
....................          delay_ms(50);
0A2A8:  MOVLW  32
0A2AA:  MOVLB  D
0A2AC:  MOVWF  xCC
0A2AE:  MOVLB  0
0A2B0:  CALL   0A28
....................         
....................         fprintf(CH2,SMS_Massage9);   
0A2B4:  MOVLW  0B
0A2B6:  MOVWF  FEA
0A2B8:  MOVLW  90
0A2BA:  MOVWF  FE9
0A2BC:  CALL   6824
....................         putc('\n',CH2);
0A2C0:  MOVLW  0A
0A2C2:  MOVLB  D
0A2C4:  MOVWF  xCD
0A2C6:  MOVLB  0
0A2C8:  CALL   24E0
....................         putc(26,CH2);
0A2CC:  MOVLW  1A
0A2CE:  MOVLB  D
0A2D0:  MOVWF  xCD
0A2D2:  MOVLB  0
0A2D4:  CALL   24E0
0A2D8:  MOVLB  D
....................       }
....................    }
0A2DA:  BRA    A388
....................    else if(FaultType.B9 == 0)
0A2DC:  BTFSC  x1D.0
0A2DE:  BRA    A388
....................    {
....................       In2.B9 = 0x00;
0A2E0:  BCF    x35.0
....................       Ack.B9 = 0;
0A2E2:  BCF    x2D.0
....................       Output.B9 = 1;      //Off LED
0A2E4:  BSF    x15.0
....................       SendSMS.B9 =0;// Clear SMS
0A2E6:  BCF    x49.0
....................       
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)      //If Buzzer or Both
0A2E8:  BTFSC  x21.0
0A2EA:  BRA    A2F0
0A2EC:  BTFSC  x25.0
0A2EE:  BRA    A30A
0A2F0:  MOVF   xBF,F
0A2F2:  BNZ   A30A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A2F4:  MOVLW  01
0A2F6:  MOVWF  xCB
0A2F8:  MOVLB  0
0A2FA:  CALL   684A
0A2FE:  DECFSZ 01,W
0A300:  BRA    A304
0A302:  BRA    A308
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A304:  BCF    F89.4
0A306:  BCF    F92.4
0A308:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)  //If Bell or Both
0A30A:  BTFSS  x21.0
0A30C:  BRA    A312
0A30E:  BTFSC  x25.0
0A310:  BRA    A330
0A312:  MOVF   xBF,F
0A314:  BNZ   A330
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A316:  MOVLW  02
0A318:  MOVWF  xCB
0A31A:  MOVLB  0
0A31C:  CALL   684A
0A320:  DECFSZ 01,W
0A322:  BRA    A326
0A324:  BRA    A32E
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A326:  BCF    F89.3
0A328:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A32A:  BCF    F89.4
0A32C:  BCF    F92.4
0A32E:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A330:  BTFSC  x34.0
0A332:  BRA    A388
0A334:  BTFSC  x34.1
0A336:  BRA    A388
0A338:  BTFSC  x34.2
0A33A:  BRA    A388
0A33C:  BTFSC  x34.3
0A33E:  BRA    A388
0A340:  BTFSC  x34.4
0A342:  BRA    A388
0A344:  BTFSC  x34.5
0A346:  BRA    A388
0A348:  BTFSC  x34.6
0A34A:  BRA    A388
0A34C:  BTFSC  x34.7
0A34E:  BRA    A388
0A350:  BTFSC  x35.0
0A352:  BRA    A388
0A354:  BTFSC  x35.1
0A356:  BRA    A388
0A358:  BTFSC  x35.2
0A35A:  BRA    A388
0A35C:  BTFSC  x35.3
0A35E:  BRA    A388
0A360:  BTFSC  x35.4
0A362:  BRA    A388
0A364:  BTFSC  x35.5
0A366:  BRA    A388
0A368:  BTFSC  x35.6
0A36A:  BRA    A388
0A36C:  BTFSC  x35.7
0A36E:  BRA    A388
0A370:  BTFSC  x36.0
0A372:  BRA    A388
0A374:  BTFSC  x36.1
0A376:  BRA    A388
0A378:  BTFSC  x36.2
0A37A:  BRA    A388
0A37C:  BTFSC  x36.3
0A37E:  BRA    A388
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A380:  BCF    F89.3
0A382:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A384:  BCF    F89.4
0A386:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A388:  MOVLW  00
0A38A:  BTFSC  x11.1
0A38C:  MOVLW  01
0A38E:  MOVWF  xCC
0A390:  MOVLW  00
0A392:  BTFSC  x19.1
0A394:  MOVLW  01
0A396:  XORWF  xCC,W
0A398:  SUBLW  01
0A39A:  BNZ   A3A0
0A39C:  BTFSS  x1D.1
0A39E:  BRA    A3A4
0A3A0:  BTFSS  1A.5
0A3A2:  BRA    A470
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
0A3A4:  BTFSC  x35.1
0A3A6:  BRA    A3C4
0A3A8:  MOVLB  0
0A3AA:  MOVF   x60,W
0A3AC:  SUBLW  0F
0A3AE:  BTFSC  FD8.2
0A3B0:  BRA    A3B6
0A3B2:  MOVLB  D
0A3B4:  BRA    A3C4
0A3B6:  MOVLB  D
0A3B8:  BTFSC  x2D.1
0A3BA:  BRA    A3C4
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A3BC:  MOVLW  64
0A3BE:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A3C0:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B10 = 1;
0A3C4:  BSF    x35.1
....................       if(Ack.B10 == 0)
0A3C6:  BTFSC  x2D.1
0A3C8:  BRA    A3F8
....................       {
....................          if(FlashingFlag == 0)
0A3CA:  BTFSC  1A.1
0A3CC:  BRA    A3D2
....................             {
....................                Output.B10 = 0;           //Flash output1
0A3CE:  BCF    x15.1
....................             }
0A3D0:  BRA    A3D4
....................             else
....................             {
....................                Output.B10 = 1;
0A3D2:  BSF    x15.1
....................             }
....................          if (~AutoTestFlag)
0A3D4:  BTFSC  1A.4
0A3D6:  BRA    A3F8
....................          {
....................             if(AlarmIndicator.B10 == 1){
0A3D8:  BTFSS  x29.1
0A3DA:  BRA    A3F8
....................                 if(OutputBoth.B10 == 0)        //Both output
0A3DC:  BTFSC  x25.1
0A3DE:  BRA    A3EA
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A3E0:  BSF    F89.4
0A3E2:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A3E4:  BSF    F89.3
0A3E6:  BCF    F92.3
....................                 }
0A3E8:  BRA    A3F8
....................                 else
....................                 {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A3EA:  BTFSS  x21.1
0A3EC:  BRA    A3F4
0A3EE:  BSF    F89.4
0A3F0:  BCF    F92.4
0A3F2:  BRA    A3F8
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A3F4:  BSF    F89.3
0A3F6:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A3F8:  MOVLW  01
0A3FA:  MOVWF  xBF
....................       // SMS Sending   
....................       if((SendSMS.B10 ==0) && (functointest_f ==0) && (Ack.B10 ==0))
0A3FC:  BTFSC  x49.1
0A3FE:  BRA    A46E
0A400:  BTFSC  30.4
0A402:  BRA    A46E
0A404:  BTFSC  x2D.1
0A406:  BRA    A46E
....................       {
....................          SendSMS.B10 =1;
0A408:  BSF    x49.1
....................          fprintf(CH2,"AT+CMGS=\"");
0A40A:  MOVLW  B0
0A40C:  MOVWF  FF6
0A40E:  MOVLW  09
0A410:  MOVWF  FF7
0A412:  MOVLB  0
0A414:  CALL   2526
....................          fprintf(CH2,sms_phonenumber);
0A418:  MOVLW  0A
0A41A:  MOVWF  FEA
0A41C:  MOVLW  81
0A41E:  MOVWF  FE9
0A420:  CALL   6824
....................          
....................          fprintf(CH2,"\"");
0A424:  MOVLW  22
0A426:  MOVLB  D
0A428:  MOVWF  xCD
0A42A:  MOVLB  0
0A42C:  CALL   24E0
....................          putc('\n',CH2);
0A430:  MOVLW  0A
0A432:  MOVLB  D
0A434:  MOVWF  xCD
0A436:  MOVLB  0
0A438:  CALL   24E0
....................          delay_ms(50);
0A43C:  MOVLW  32
0A43E:  MOVLB  D
0A440:  MOVWF  xCC
0A442:  MOVLB  0
0A444:  CALL   0A28
....................         
....................         fprintf(CH2,SMS_Massage10);   
0A448:  MOVLW  0B
0A44A:  MOVWF  FEA
0A44C:  MOVLW  B0
0A44E:  MOVWF  FE9
0A450:  CALL   6824
....................         putc('\n',CH2);
0A454:  MOVLW  0A
0A456:  MOVLB  D
0A458:  MOVWF  xCD
0A45A:  MOVLB  0
0A45C:  CALL   24E0
....................         putc(26,CH2);
0A460:  MOVLW  1A
0A462:  MOVLB  D
0A464:  MOVWF  xCD
0A466:  MOVLB  0
0A468:  CALL   24E0
0A46C:  MOVLB  D
....................       }
....................    }
0A46E:  BRA    A51C
....................    else if(FaultType.B10 == 0)
0A470:  BTFSC  x1D.1
0A472:  BRA    A51C
....................    {
....................       In2.B10 = 0x00;
0A474:  BCF    x35.1
....................       Ack.B10 = 0;
0A476:  BCF    x2D.1
....................       Output.B10 = 1;      //Off LED
0A478:  BSF    x15.1
....................       SendSMS.B10 =0;// Clear SMS
0A47A:  BCF    x49.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)      //If Buzzer or Both
0A47C:  BTFSC  x21.1
0A47E:  BRA    A484
0A480:  BTFSC  x25.1
0A482:  BRA    A49E
0A484:  MOVF   xBF,F
0A486:  BNZ   A49E
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A488:  MOVLW  01
0A48A:  MOVWF  xCB
0A48C:  MOVLB  0
0A48E:  CALL   684A
0A492:  DECFSZ 01,W
0A494:  BRA    A498
0A496:  BRA    A49C
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A498:  BCF    F89.4
0A49A:  BCF    F92.4
0A49C:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)  //If Bell or Both
0A49E:  BTFSS  x21.1
0A4A0:  BRA    A4A6
0A4A2:  BTFSC  x25.1
0A4A4:  BRA    A4C4
0A4A6:  MOVF   xBF,F
0A4A8:  BNZ   A4C4
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A4AA:  MOVLW  02
0A4AC:  MOVWF  xCB
0A4AE:  MOVLB  0
0A4B0:  CALL   684A
0A4B4:  DECFSZ 01,W
0A4B6:  BRA    A4BA
0A4B8:  BRA    A4C2
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A4BA:  BCF    F89.3
0A4BC:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A4BE:  BCF    F89.4
0A4C0:  BCF    F92.4
0A4C2:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A4C4:  BTFSC  x34.0
0A4C6:  BRA    A51C
0A4C8:  BTFSC  x34.1
0A4CA:  BRA    A51C
0A4CC:  BTFSC  x34.2
0A4CE:  BRA    A51C
0A4D0:  BTFSC  x34.3
0A4D2:  BRA    A51C
0A4D4:  BTFSC  x34.4
0A4D6:  BRA    A51C
0A4D8:  BTFSC  x34.5
0A4DA:  BRA    A51C
0A4DC:  BTFSC  x34.6
0A4DE:  BRA    A51C
0A4E0:  BTFSC  x34.7
0A4E2:  BRA    A51C
0A4E4:  BTFSC  x35.0
0A4E6:  BRA    A51C
0A4E8:  BTFSC  x35.1
0A4EA:  BRA    A51C
0A4EC:  BTFSC  x35.2
0A4EE:  BRA    A51C
0A4F0:  BTFSC  x35.3
0A4F2:  BRA    A51C
0A4F4:  BTFSC  x35.4
0A4F6:  BRA    A51C
0A4F8:  BTFSC  x35.5
0A4FA:  BRA    A51C
0A4FC:  BTFSC  x35.6
0A4FE:  BRA    A51C
0A500:  BTFSC  x35.7
0A502:  BRA    A51C
0A504:  BTFSC  x36.0
0A506:  BRA    A51C
0A508:  BTFSC  x36.1
0A50A:  BRA    A51C
0A50C:  BTFSC  x36.2
0A50E:  BRA    A51C
0A510:  BTFSC  x36.3
0A512:  BRA    A51C
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A514:  BCF    F89.3
0A516:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A518:  BCF    F89.4
0A51A:  BCF    F92.4
....................       }
....................    }
....................    
.................... //}
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A51C:  MOVLW  00
0A51E:  BTFSC  x11.2
0A520:  MOVLW  01
0A522:  MOVWF  xCC
0A524:  MOVLW  00
0A526:  BTFSC  x19.2
0A528:  MOVLW  01
0A52A:  XORWF  xCC,W
0A52C:  SUBLW  01
0A52E:  BNZ   A534
0A530:  BTFSS  x1D.2
0A532:  BRA    A538
0A534:  BTFSS  1A.5
0A536:  BRA    A604
....................    {
....................       if(In2.B11 == 0 && AutoAck == 0x0F && Ack.B11 == 0)   //use auto acknowlegde
0A538:  BTFSC  x35.2
0A53A:  BRA    A558
0A53C:  MOVLB  0
0A53E:  MOVF   x60,W
0A540:  SUBLW  0F
0A542:  BTFSC  FD8.2
0A544:  BRA    A54A
0A546:  MOVLB  D
0A548:  BRA    A558
0A54A:  MOVLB  D
0A54C:  BTFSC  x2D.2
0A54E:  BRA    A558
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A550:  MOVLW  64
0A552:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A554:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B11 = 1;
0A558:  BSF    x35.2
....................       if(Ack.B11 == 0)
0A55A:  BTFSC  x2D.2
0A55C:  BRA    A58C
....................       {
....................          if(FlashingFlag == 0)
0A55E:  BTFSC  1A.1
0A560:  BRA    A566
....................             {
....................                Output.B11 = 0;           //Flash output1
0A562:  BCF    x15.2
....................             }
0A564:  BRA    A568
....................             else
....................             {
....................                Output.B11 = 1;
0A566:  BSF    x15.2
....................             }
....................          if (~AutoTestFlag)
0A568:  BTFSC  1A.4
0A56A:  BRA    A58C
....................          {
....................             if(AlarmIndicator.B11 == 1){
0A56C:  BTFSS  x29.2
0A56E:  BRA    A58C
....................                 if(OutputBoth.B11 == 0)        //Both output
0A570:  BTFSC  x25.2
0A572:  BRA    A57E
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A574:  BSF    F89.4
0A576:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A578:  BSF    F89.3
0A57A:  BCF    F92.3
....................                 }
0A57C:  BRA    A58C
....................                 else
....................                 {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A57E:  BTFSS  x21.2
0A580:  BRA    A588
0A582:  BSF    F89.4
0A584:  BCF    F92.4
0A586:  BRA    A58C
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A588:  BSF    F89.3
0A58A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A58C:  MOVLW  01
0A58E:  MOVWF  xBF
....................       // SMS Sending   
....................      if((SendSMS.B11 ==0) && (functointest_f ==0) && (Ack.B11 ==0))
0A590:  BTFSC  x49.2
0A592:  BRA    A602
0A594:  BTFSC  30.4
0A596:  BRA    A602
0A598:  BTFSC  x2D.2
0A59A:  BRA    A602
....................      {
....................        SendSMS.B11 =1;
0A59C:  BSF    x49.2
....................        fprintf(CH2,"AT+CMGS=\"");
0A59E:  MOVLW  BA
0A5A0:  MOVWF  FF6
0A5A2:  MOVLW  09
0A5A4:  MOVWF  FF7
0A5A6:  MOVLB  0
0A5A8:  CALL   2526
....................        fprintf(CH2,sms_phonenumber);
0A5AC:  MOVLW  0A
0A5AE:  MOVWF  FEA
0A5B0:  MOVLW  81
0A5B2:  MOVWF  FE9
0A5B4:  CALL   6824
....................        
....................        fprintf(CH2,"\"");
0A5B8:  MOVLW  22
0A5BA:  MOVLB  D
0A5BC:  MOVWF  xCD
0A5BE:  MOVLB  0
0A5C0:  CALL   24E0
....................        putc('\n',CH2);
0A5C4:  MOVLW  0A
0A5C6:  MOVLB  D
0A5C8:  MOVWF  xCD
0A5CA:  MOVLB  0
0A5CC:  CALL   24E0
....................        delay_ms(50);
0A5D0:  MOVLW  32
0A5D2:  MOVLB  D
0A5D4:  MOVWF  xCC
0A5D6:  MOVLB  0
0A5D8:  CALL   0A28
....................       
....................       fprintf(CH2,SMS_Massage11);   
0A5DC:  MOVLW  0B
0A5DE:  MOVWF  FEA
0A5E0:  MOVLW  D0
0A5E2:  MOVWF  FE9
0A5E4:  CALL   6824
....................       putc('\n',CH2);
0A5E8:  MOVLW  0A
0A5EA:  MOVLB  D
0A5EC:  MOVWF  xCD
0A5EE:  MOVLB  0
0A5F0:  CALL   24E0
....................       putc(26,CH2);
0A5F4:  MOVLW  1A
0A5F6:  MOVLB  D
0A5F8:  MOVWF  xCD
0A5FA:  MOVLB  0
0A5FC:  CALL   24E0
0A600:  MOVLB  D
....................      }
....................    }
0A602:  BRA    A6B0
....................    else if(FaultType.B11 == 0)
0A604:  BTFSC  x1D.2
0A606:  BRA    A6B0
....................    {
....................       In2.B11 = 0x00;
0A608:  BCF    x35.2
....................       Ack.B11 = 0;
0A60A:  BCF    x2D.2
....................       Output.B11 = 1;      //Off LED
0A60C:  BSF    x15.2
....................       SendSMS.B11 =0;// Clear SMS
0A60E:  BCF    x49.2
.................... 
....................       if((OutputType.B11 == 1 || OutputBoth.B11 == 0)&& inputflag ==0)      //If Buzzer or Both
0A610:  BTFSC  x21.2
0A612:  BRA    A618
0A614:  BTFSC  x25.2
0A616:  BRA    A632
0A618:  MOVF   xBF,F
0A61A:  BNZ   A632
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A61C:  MOVLW  01
0A61E:  MOVWF  xCB
0A620:  MOVLB  0
0A622:  CALL   684A
0A626:  DECFSZ 01,W
0A628:  BRA    A62C
0A62A:  BRA    A630
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A62C:  BCF    F89.4
0A62E:  BCF    F92.4
0A630:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B11 == 0 || OutputBoth.B11 == 0)&& inputflag ==0)  //If Bell or Both
0A632:  BTFSS  x21.2
0A634:  BRA    A63A
0A636:  BTFSC  x25.2
0A638:  BRA    A658
0A63A:  MOVF   xBF,F
0A63C:  BNZ   A658
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A63E:  MOVLW  02
0A640:  MOVWF  xCB
0A642:  MOVLB  0
0A644:  CALL   684A
0A648:  DECFSZ 01,W
0A64A:  BRA    A64E
0A64C:  BRA    A656
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A64E:  BCF    F89.3
0A650:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A652:  BCF    F89.4
0A654:  BCF    F92.4
0A656:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A658:  BTFSC  x34.0
0A65A:  BRA    A6B0
0A65C:  BTFSC  x34.1
0A65E:  BRA    A6B0
0A660:  BTFSC  x34.2
0A662:  BRA    A6B0
0A664:  BTFSC  x34.3
0A666:  BRA    A6B0
0A668:  BTFSC  x34.4
0A66A:  BRA    A6B0
0A66C:  BTFSC  x34.5
0A66E:  BRA    A6B0
0A670:  BTFSC  x34.6
0A672:  BRA    A6B0
0A674:  BTFSC  x34.7
0A676:  BRA    A6B0
0A678:  BTFSC  x35.0
0A67A:  BRA    A6B0
0A67C:  BTFSC  x35.1
0A67E:  BRA    A6B0
0A680:  BTFSC  x35.2
0A682:  BRA    A6B0
0A684:  BTFSC  x35.3
0A686:  BRA    A6B0
0A688:  BTFSC  x35.4
0A68A:  BRA    A6B0
0A68C:  BTFSC  x35.5
0A68E:  BRA    A6B0
0A690:  BTFSC  x35.6
0A692:  BRA    A6B0
0A694:  BTFSC  x35.7
0A696:  BRA    A6B0
0A698:  BTFSC  x36.0
0A69A:  BRA    A6B0
0A69C:  BTFSC  x36.1
0A69E:  BRA    A6B0
0A6A0:  BTFSC  x36.2
0A6A2:  BRA    A6B0
0A6A4:  BTFSC  x36.3
0A6A6:  BRA    A6B0
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A6A8:  BCF    F89.3
0A6AA:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A6AC:  BCF    F89.4
0A6AE:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A6B0:  MOVLW  00
0A6B2:  BTFSC  x11.3
0A6B4:  MOVLW  01
0A6B6:  MOVWF  xCC
0A6B8:  MOVLW  00
0A6BA:  BTFSC  x19.3
0A6BC:  MOVLW  01
0A6BE:  XORWF  xCC,W
0A6C0:  SUBLW  01
0A6C2:  BNZ   A6C8
0A6C4:  BTFSS  x1D.3
0A6C6:  BRA    A6CC
0A6C8:  BTFSS  1A.5
0A6CA:  BRA    A798
....................    {
....................       if(In2.B12 == 0 && AutoAck == 0x0F && Ack.B12 == 0)   //use auto acknowlegde
0A6CC:  BTFSC  x35.3
0A6CE:  BRA    A6EC
0A6D0:  MOVLB  0
0A6D2:  MOVF   x60,W
0A6D4:  SUBLW  0F
0A6D6:  BTFSC  FD8.2
0A6D8:  BRA    A6DE
0A6DA:  MOVLB  D
0A6DC:  BRA    A6EC
0A6DE:  MOVLB  D
0A6E0:  BTFSC  x2D.3
0A6E2:  BRA    A6EC
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A6E4:  MOVLW  64
0A6E6:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A6E8:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B12 = 1;
0A6EC:  BSF    x35.3
....................       if(Ack.B12 == 0)
0A6EE:  BTFSC  x2D.3
0A6F0:  BRA    A720
....................       {
....................          if(FlashingFlag == 0)
0A6F2:  BTFSC  1A.1
0A6F4:  BRA    A6FA
....................             {
....................                Output.B12 = 0;           //Flash output1
0A6F6:  BCF    x15.3
....................             }
0A6F8:  BRA    A6FC
....................             else
....................             {
....................                Output.B12 = 1;
0A6FA:  BSF    x15.3
....................             }
....................          if (~AutoTestFlag)
0A6FC:  BTFSC  1A.4
0A6FE:  BRA    A720
....................          {
....................             if(AlarmIndicator.B12 == 1){
0A700:  BTFSS  x29.3
0A702:  BRA    A720
....................                 if(OutputBoth.B12 == 0)        //Both output
0A704:  BTFSC  x25.3
0A706:  BRA    A712
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A708:  BSF    F89.4
0A70A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A70C:  BSF    F89.3
0A70E:  BCF    F92.3
....................                 }
0A710:  BRA    A720
....................                 else
....................                 {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A712:  BTFSS  x21.3
0A714:  BRA    A71C
0A716:  BSF    F89.4
0A718:  BCF    F92.4
0A71A:  BRA    A720
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A71C:  BSF    F89.3
0A71E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A720:  MOVLW  01
0A722:  MOVWF  xBF
....................          // SMS Sending   
....................       if((SendSMS.B12 ==0) && (functointest_f ==0) && (Ack.B12 ==0))
0A724:  BTFSC  x49.3
0A726:  BRA    A796
0A728:  BTFSC  30.4
0A72A:  BRA    A796
0A72C:  BTFSC  x2D.3
0A72E:  BRA    A796
....................       {
....................         SendSMS.B12 =1;
0A730:  BSF    x49.3
....................         fprintf(CH2,"AT+CMGS=\"");
0A732:  MOVLW  C4
0A734:  MOVWF  FF6
0A736:  MOVLW  09
0A738:  MOVWF  FF7
0A73A:  MOVLB  0
0A73C:  CALL   2526
....................         fprintf(CH2,sms_phonenumber);
0A740:  MOVLW  0A
0A742:  MOVWF  FEA
0A744:  MOVLW  81
0A746:  MOVWF  FE9
0A748:  CALL   6824
....................         
....................         fprintf(CH2,"\"");
0A74C:  MOVLW  22
0A74E:  MOVLB  D
0A750:  MOVWF  xCD
0A752:  MOVLB  0
0A754:  CALL   24E0
....................         putc('\n',CH2);
0A758:  MOVLW  0A
0A75A:  MOVLB  D
0A75C:  MOVWF  xCD
0A75E:  MOVLB  0
0A760:  CALL   24E0
....................         delay_ms(50);
0A764:  MOVLW  32
0A766:  MOVLB  D
0A768:  MOVWF  xCC
0A76A:  MOVLB  0
0A76C:  CALL   0A28
....................        
....................        fprintf(CH2,SMS_Massage12);   
0A770:  MOVLW  0B
0A772:  MOVWF  FEA
0A774:  MOVLW  F0
0A776:  MOVWF  FE9
0A778:  CALL   6824
....................        putc('\n',CH2);
0A77C:  MOVLW  0A
0A77E:  MOVLB  D
0A780:  MOVWF  xCD
0A782:  MOVLB  0
0A784:  CALL   24E0
....................        putc(26,CH2);
0A788:  MOVLW  1A
0A78A:  MOVLB  D
0A78C:  MOVWF  xCD
0A78E:  MOVLB  0
0A790:  CALL   24E0
0A794:  MOVLB  D
....................       }
.................... 
....................    }
0A796:  BRA    A844
....................    else if(FaultType.B12 == 0)
0A798:  BTFSC  x1D.3
0A79A:  BRA    A844
....................    {
....................       In2.B12 = 0x00;
0A79C:  BCF    x35.3
....................       Ack.B12 = 0;
0A79E:  BCF    x2D.3
....................       Output.B12 = 1;      //Off LED
0A7A0:  BSF    x15.3
....................       SendSMS.B12 =0;// Clear SMS
0A7A2:  BCF    x49.3
.................... 
....................       if((OutputType.B12 == 1 || OutputBoth.B12 == 0)&& inputflag ==0)      //If Buzzer or Both
0A7A4:  BTFSC  x21.3
0A7A6:  BRA    A7AC
0A7A8:  BTFSC  x25.3
0A7AA:  BRA    A7C6
0A7AC:  MOVF   xBF,F
0A7AE:  BNZ   A7C6
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A7B0:  MOVLW  01
0A7B2:  MOVWF  xCB
0A7B4:  MOVLB  0
0A7B6:  CALL   684A
0A7BA:  DECFSZ 01,W
0A7BC:  BRA    A7C0
0A7BE:  BRA    A7C4
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A7C0:  BCF    F89.4
0A7C2:  BCF    F92.4
0A7C4:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B12 == 0 || OutputBoth.B12 == 0)&& inputflag ==0)  //If Bell or Both
0A7C6:  BTFSS  x21.3
0A7C8:  BRA    A7CE
0A7CA:  BTFSC  x25.3
0A7CC:  BRA    A7EC
0A7CE:  MOVF   xBF,F
0A7D0:  BNZ   A7EC
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A7D2:  MOVLW  02
0A7D4:  MOVWF  xCB
0A7D6:  MOVLB  0
0A7D8:  CALL   684A
0A7DC:  DECFSZ 01,W
0A7DE:  BRA    A7E2
0A7E0:  BRA    A7EA
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A7E2:  BCF    F89.3
0A7E4:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A7E6:  BCF    F89.4
0A7E8:  BCF    F92.4
0A7EA:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A7EC:  BTFSC  x34.0
0A7EE:  BRA    A844
0A7F0:  BTFSC  x34.1
0A7F2:  BRA    A844
0A7F4:  BTFSC  x34.2
0A7F6:  BRA    A844
0A7F8:  BTFSC  x34.3
0A7FA:  BRA    A844
0A7FC:  BTFSC  x34.4
0A7FE:  BRA    A844
0A800:  BTFSC  x34.5
0A802:  BRA    A844
0A804:  BTFSC  x34.6
0A806:  BRA    A844
0A808:  BTFSC  x34.7
0A80A:  BRA    A844
0A80C:  BTFSC  x35.0
0A80E:  BRA    A844
0A810:  BTFSC  x35.1
0A812:  BRA    A844
0A814:  BTFSC  x35.2
0A816:  BRA    A844
0A818:  BTFSC  x35.3
0A81A:  BRA    A844
0A81C:  BTFSC  x35.4
0A81E:  BRA    A844
0A820:  BTFSC  x35.5
0A822:  BRA    A844
0A824:  BTFSC  x35.6
0A826:  BRA    A844
0A828:  BTFSC  x35.7
0A82A:  BRA    A844
0A82C:  BTFSC  x36.0
0A82E:  BRA    A844
0A830:  BTFSC  x36.1
0A832:  BRA    A844
0A834:  BTFSC  x36.2
0A836:  BRA    A844
0A838:  BTFSC  x36.3
0A83A:  BRA    A844
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A83C:  BCF    F89.3
0A83E:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A840:  BCF    F89.4
0A842:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A844:  MOVLW  00
0A846:  BTFSC  x11.4
0A848:  MOVLW  01
0A84A:  MOVWF  xCC
0A84C:  MOVLW  00
0A84E:  BTFSC  x19.4
0A850:  MOVLW  01
0A852:  XORWF  xCC,W
0A854:  SUBLW  01
0A856:  BNZ   A85C
0A858:  BTFSS  x1D.4
0A85A:  BRA    A860
0A85C:  BTFSS  1A.5
0A85E:  BRA    A92C
....................    {
....................       if(In2.B13 == 0 && AutoAck == 0x0F && Ack.B13 == 0)   //use auto acknowlegde
0A860:  BTFSC  x35.4
0A862:  BRA    A880
0A864:  MOVLB  0
0A866:  MOVF   x60,W
0A868:  SUBLW  0F
0A86A:  BTFSC  FD8.2
0A86C:  BRA    A872
0A86E:  MOVLB  D
0A870:  BRA    A880
0A872:  MOVLB  D
0A874:  BTFSC  x2D.4
0A876:  BRA    A880
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A878:  MOVLW  64
0A87A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A87C:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B13 = 1;
0A880:  BSF    x35.4
....................       if(Ack.B13 == 0)
0A882:  BTFSC  x2D.4
0A884:  BRA    A8B4
....................       {
....................          if(FlashingFlag == 0)
0A886:  BTFSC  1A.1
0A888:  BRA    A88E
....................             {
....................                Output.B13 = 0;           //Flash output1
0A88A:  BCF    x15.4
....................             }
0A88C:  BRA    A890
....................             else
....................             {
....................                Output.B13 = 1;
0A88E:  BSF    x15.4
....................             }
....................          if (~AutoTestFlag)
0A890:  BTFSC  1A.4
0A892:  BRA    A8B4
....................          {
....................             if(AlarmIndicator.B13 == 1){
0A894:  BTFSS  x29.4
0A896:  BRA    A8B4
....................                 if(OutputBoth.B13 == 0)        //Both output
0A898:  BTFSC  x25.4
0A89A:  BRA    A8A6
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A89C:  BSF    F89.4
0A89E:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A8A0:  BSF    F89.3
0A8A2:  BCF    F92.3
....................                 }
0A8A4:  BRA    A8B4
....................                 else
....................                 {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A8A6:  BTFSS  x21.4
0A8A8:  BRA    A8B0
0A8AA:  BSF    F89.4
0A8AC:  BCF    F92.4
0A8AE:  BRA    A8B4
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A8B0:  BSF    F89.3
0A8B2:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A8B4:  MOVLW  01
0A8B6:  MOVWF  xBF
....................       // SMS Sending   
....................         if((SendSMS.B13 ==0) && (functointest_f ==0) && (Ack.B13 ==0))
0A8B8:  BTFSC  x49.4
0A8BA:  BRA    A92A
0A8BC:  BTFSC  30.4
0A8BE:  BRA    A92A
0A8C0:  BTFSC  x2D.4
0A8C2:  BRA    A92A
....................         {
....................           SendSMS.B13 =1;
0A8C4:  BSF    x49.4
....................           fprintf(CH2,"AT+CMGS=\"");
0A8C6:  MOVLW  CE
0A8C8:  MOVWF  FF6
0A8CA:  MOVLW  09
0A8CC:  MOVWF  FF7
0A8CE:  MOVLB  0
0A8D0:  CALL   2526
....................           fprintf(CH2,sms_phonenumber);
0A8D4:  MOVLW  0A
0A8D6:  MOVWF  FEA
0A8D8:  MOVLW  81
0A8DA:  MOVWF  FE9
0A8DC:  CALL   6824
....................           
....................           fprintf(CH2,"\"");
0A8E0:  MOVLW  22
0A8E2:  MOVLB  D
0A8E4:  MOVWF  xCD
0A8E6:  MOVLB  0
0A8E8:  CALL   24E0
....................           putc('\n',CH2);
0A8EC:  MOVLW  0A
0A8EE:  MOVLB  D
0A8F0:  MOVWF  xCD
0A8F2:  MOVLB  0
0A8F4:  CALL   24E0
....................           delay_ms(50);
0A8F8:  MOVLW  32
0A8FA:  MOVLB  D
0A8FC:  MOVWF  xCC
0A8FE:  MOVLB  0
0A900:  CALL   0A28
....................          
....................          fprintf(CH2,SMS_Massage13);   
0A904:  MOVLW  0C
0A906:  MOVWF  FEA
0A908:  MOVLW  10
0A90A:  MOVWF  FE9
0A90C:  CALL   6824
....................          putc('\n',CH2);
0A910:  MOVLW  0A
0A912:  MOVLB  D
0A914:  MOVWF  xCD
0A916:  MOVLB  0
0A918:  CALL   24E0
....................          putc(26,CH2);
0A91C:  MOVLW  1A
0A91E:  MOVLB  D
0A920:  MOVWF  xCD
0A922:  MOVLB  0
0A924:  CALL   24E0
0A928:  MOVLB  D
....................         }
....................    }
0A92A:  BRA    A9D8
....................    else if(FaultType.B13 == 0)
0A92C:  BTFSC  x1D.4
0A92E:  BRA    A9D8
....................    {
....................       In2.B13 = 0x00;
0A930:  BCF    x35.4
....................       Ack.B13 = 0;
0A932:  BCF    x2D.4
....................       Output.B13 = 1;      //Off LED
0A934:  BSF    x15.4
....................       SendSMS.B13 =0;// Clear SMS
0A936:  BCF    x49.4
.................... 
....................       if((OutputType.B13 == 1 || OutputBoth.B13 == 0)&& inputflag ==0)      //If Buzzer or Both
0A938:  BTFSC  x21.4
0A93A:  BRA    A940
0A93C:  BTFSC  x25.4
0A93E:  BRA    A95A
0A940:  MOVF   xBF,F
0A942:  BNZ   A95A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A944:  MOVLW  01
0A946:  MOVWF  xCB
0A948:  MOVLB  0
0A94A:  CALL   684A
0A94E:  DECFSZ 01,W
0A950:  BRA    A954
0A952:  BRA    A958
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A954:  BCF    F89.4
0A956:  BCF    F92.4
0A958:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B13 == 0 || OutputBoth.B13 == 0)&& inputflag ==0)  //If Bell or Both
0A95A:  BTFSS  x21.4
0A95C:  BRA    A962
0A95E:  BTFSC  x25.4
0A960:  BRA    A980
0A962:  MOVF   xBF,F
0A964:  BNZ   A980
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A966:  MOVLW  02
0A968:  MOVWF  xCB
0A96A:  MOVLB  0
0A96C:  CALL   684A
0A970:  DECFSZ 01,W
0A972:  BRA    A976
0A974:  BRA    A97E
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A976:  BCF    F89.3
0A978:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A97A:  BCF    F89.4
0A97C:  BCF    F92.4
0A97E:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A980:  BTFSC  x34.0
0A982:  BRA    A9D8
0A984:  BTFSC  x34.1
0A986:  BRA    A9D8
0A988:  BTFSC  x34.2
0A98A:  BRA    A9D8
0A98C:  BTFSC  x34.3
0A98E:  BRA    A9D8
0A990:  BTFSC  x34.4
0A992:  BRA    A9D8
0A994:  BTFSC  x34.5
0A996:  BRA    A9D8
0A998:  BTFSC  x34.6
0A99A:  BRA    A9D8
0A99C:  BTFSC  x34.7
0A99E:  BRA    A9D8
0A9A0:  BTFSC  x35.0
0A9A2:  BRA    A9D8
0A9A4:  BTFSC  x35.1
0A9A6:  BRA    A9D8
0A9A8:  BTFSC  x35.2
0A9AA:  BRA    A9D8
0A9AC:  BTFSC  x35.3
0A9AE:  BRA    A9D8
0A9B0:  BTFSC  x35.4
0A9B2:  BRA    A9D8
0A9B4:  BTFSC  x35.5
0A9B6:  BRA    A9D8
0A9B8:  BTFSC  x35.6
0A9BA:  BRA    A9D8
0A9BC:  BTFSC  x35.7
0A9BE:  BRA    A9D8
0A9C0:  BTFSC  x36.0
0A9C2:  BRA    A9D8
0A9C4:  BTFSC  x36.1
0A9C6:  BRA    A9D8
0A9C8:  BTFSC  x36.2
0A9CA:  BRA    A9D8
0A9CC:  BTFSC  x36.3
0A9CE:  BRA    A9D8
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A9D0:  BCF    F89.3
0A9D2:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A9D4:  BCF    F89.4
0A9D6:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A9D8:  MOVLW  00
0A9DA:  BTFSC  x11.5
0A9DC:  MOVLW  01
0A9DE:  MOVWF  xCC
0A9E0:  MOVLW  00
0A9E2:  BTFSC  x19.5
0A9E4:  MOVLW  01
0A9E6:  XORWF  xCC,W
0A9E8:  SUBLW  01
0A9EA:  BNZ   A9F0
0A9EC:  BTFSS  x1D.5
0A9EE:  BRA    A9F4
0A9F0:  BTFSS  1A.5
0A9F2:  BRA    AAC0
....................    {
....................       if(In2.B14 == 0 && AutoAck == 0x0F && Ack.B14 == 0)   //use auto acknowlegde
0A9F4:  BTFSC  x35.5
0A9F6:  BRA    AA14
0A9F8:  MOVLB  0
0A9FA:  MOVF   x60,W
0A9FC:  SUBLW  0F
0A9FE:  BTFSC  FD8.2
0AA00:  BRA    AA06
0AA02:  MOVLB  D
0AA04:  BRA    AA14
0AA06:  MOVLB  D
0AA08:  BTFSC  x2D.5
0AA0A:  BRA    AA14
....................       {
....................             TimeBase1s = 100 ;            //reload again
0AA0C:  MOVLW  64
0AA0E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0AA10:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B14 = 1;
0AA14:  BSF    x35.5
....................       if(Ack.B14 == 0)
0AA16:  BTFSC  x2D.5
0AA18:  BRA    AA48
....................       {
....................          if(FlashingFlag == 0)
0AA1A:  BTFSC  1A.1
0AA1C:  BRA    AA22
....................             {
....................                Output.B14 = 0;           //Flash output1
0AA1E:  BCF    x15.5
....................             }
0AA20:  BRA    AA24
....................             else
....................             {
....................                Output.B14 = 1;
0AA22:  BSF    x15.5
....................             }
....................          if (~AutoTestFlag)
0AA24:  BTFSC  1A.4
0AA26:  BRA    AA48
....................          {
....................             if(AlarmIndicator.B14 == 1){
0AA28:  BTFSS  x29.5
0AA2A:  BRA    AA48
....................                 if(OutputBoth.B14 == 0)        //Both output
0AA2C:  BTFSC  x25.5
0AA2E:  BRA    AA3A
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0AA30:  BSF    F89.4
0AA32:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0AA34:  BSF    F89.3
0AA36:  BCF    F92.3
....................                 }
0AA38:  BRA    AA48
....................                 else
....................                 {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0AA3A:  BTFSS  x21.5
0AA3C:  BRA    AA44
0AA3E:  BSF    F89.4
0AA40:  BCF    F92.4
0AA42:  BRA    AA48
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0AA44:  BSF    F89.3
0AA46:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0AA48:  MOVLW  01
0AA4A:  MOVWF  xBF
....................       // SMS Sending   
....................         if((SendSMS.B14 ==0) && (functointest_f ==0) && (Ack.B14 ==0))
0AA4C:  BTFSC  x49.5
0AA4E:  BRA    AABE
0AA50:  BTFSC  30.4
0AA52:  BRA    AABE
0AA54:  BTFSC  x2D.5
0AA56:  BRA    AABE
....................         {
....................           SendSMS.B14 =1;
0AA58:  BSF    x49.5
....................           fprintf(CH2,"AT+CMGS=\"");
0AA5A:  MOVLW  D8
0AA5C:  MOVWF  FF6
0AA5E:  MOVLW  09
0AA60:  MOVWF  FF7
0AA62:  MOVLB  0
0AA64:  CALL   2526
....................           fprintf(CH2,sms_phonenumber);
0AA68:  MOVLW  0A
0AA6A:  MOVWF  FEA
0AA6C:  MOVLW  81
0AA6E:  MOVWF  FE9
0AA70:  CALL   6824
....................           
....................           fprintf(CH2,"\"");
0AA74:  MOVLW  22
0AA76:  MOVLB  D
0AA78:  MOVWF  xCD
0AA7A:  MOVLB  0
0AA7C:  CALL   24E0
....................           putc('\n',CH2);
0AA80:  MOVLW  0A
0AA82:  MOVLB  D
0AA84:  MOVWF  xCD
0AA86:  MOVLB  0
0AA88:  CALL   24E0
....................           delay_ms(50);
0AA8C:  MOVLW  32
0AA8E:  MOVLB  D
0AA90:  MOVWF  xCC
0AA92:  MOVLB  0
0AA94:  CALL   0A28
....................          
....................          fprintf(CH2,SMS_Massage14);   
0AA98:  MOVLW  0C
0AA9A:  MOVWF  FEA
0AA9C:  MOVLW  30
0AA9E:  MOVWF  FE9
0AAA0:  CALL   6824
....................          putc('\n',CH2);
0AAA4:  MOVLW  0A
0AAA6:  MOVLB  D
0AAA8:  MOVWF  xCD
0AAAA:  MOVLB  0
0AAAC:  CALL   24E0
....................          putc(26,CH2);
0AAB0:  MOVLW  1A
0AAB2:  MOVLB  D
0AAB4:  MOVWF  xCD
0AAB6:  MOVLB  0
0AAB8:  CALL   24E0
0AABC:  MOVLB  D
....................         }
....................    }
0AABE:  BRA    AB6C
....................    else if(FaultType.B14 == 0)
0AAC0:  BTFSC  x1D.5
0AAC2:  BRA    AB6C
....................    {
....................       In2.B14 = 0x00;
0AAC4:  BCF    x35.5
....................       Ack.B14 = 0;
0AAC6:  BCF    x2D.5
....................       Output.B14 = 1;      //Off LED
0AAC8:  BSF    x15.5
....................       SendSMS.B14 =0;// Clear SMS
0AACA:  BCF    x49.5
.................... 
....................       if((OutputType.B14 == 1 || OutputBoth.B14 == 0)&& inputflag ==0)      //If Buzzer or Both
0AACC:  BTFSC  x21.5
0AACE:  BRA    AAD4
0AAD0:  BTFSC  x25.5
0AAD2:  BRA    AAEE
0AAD4:  MOVF   xBF,F
0AAD6:  BNZ   AAEE
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0AAD8:  MOVLW  01
0AADA:  MOVWF  xCB
0AADC:  MOVLB  0
0AADE:  CALL   684A
0AAE2:  DECFSZ 01,W
0AAE4:  BRA    AAE8
0AAE6:  BRA    AAEC
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AAE8:  BCF    F89.4
0AAEA:  BCF    F92.4
0AAEC:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B14 == 0 || OutputBoth.B14 == 0)&& inputflag ==0)  //If Bell or Both
0AAEE:  BTFSS  x21.5
0AAF0:  BRA    AAF6
0AAF2:  BTFSC  x25.5
0AAF4:  BRA    AB14
0AAF6:  MOVF   xBF,F
0AAF8:  BNZ   AB14
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AAFA:  MOVLW  02
0AAFC:  MOVWF  xCB
0AAFE:  MOVLB  0
0AB00:  CALL   684A
0AB04:  DECFSZ 01,W
0AB06:  BRA    AB0A
0AB08:  BRA    AB12
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AB0A:  BCF    F89.3
0AB0C:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AB0E:  BCF    F89.4
0AB10:  BCF    F92.4
0AB12:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0AB14:  BTFSC  x34.0
0AB16:  BRA    AB6C
0AB18:  BTFSC  x34.1
0AB1A:  BRA    AB6C
0AB1C:  BTFSC  x34.2
0AB1E:  BRA    AB6C
0AB20:  BTFSC  x34.3
0AB22:  BRA    AB6C
0AB24:  BTFSC  x34.4
0AB26:  BRA    AB6C
0AB28:  BTFSC  x34.5
0AB2A:  BRA    AB6C
0AB2C:  BTFSC  x34.6
0AB2E:  BRA    AB6C
0AB30:  BTFSC  x34.7
0AB32:  BRA    AB6C
0AB34:  BTFSC  x35.0
0AB36:  BRA    AB6C
0AB38:  BTFSC  x35.1
0AB3A:  BRA    AB6C
0AB3C:  BTFSC  x35.2
0AB3E:  BRA    AB6C
0AB40:  BTFSC  x35.3
0AB42:  BRA    AB6C
0AB44:  BTFSC  x35.4
0AB46:  BRA    AB6C
0AB48:  BTFSC  x35.5
0AB4A:  BRA    AB6C
0AB4C:  BTFSC  x35.6
0AB4E:  BRA    AB6C
0AB50:  BTFSC  x35.7
0AB52:  BRA    AB6C
0AB54:  BTFSC  x36.0
0AB56:  BRA    AB6C
0AB58:  BTFSC  x36.1
0AB5A:  BRA    AB6C
0AB5C:  BTFSC  x36.2
0AB5E:  BRA    AB6C
0AB60:  BTFSC  x36.3
0AB62:  BRA    AB6C
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0AB64:  BCF    F89.3
0AB66:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AB68:  BCF    F89.4
0AB6A:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0AB6C:  MOVLW  00
0AB6E:  BTFSC  x11.6
0AB70:  MOVLW  01
0AB72:  MOVWF  xCC
0AB74:  MOVLW  00
0AB76:  BTFSC  x19.6
0AB78:  MOVLW  01
0AB7A:  XORWF  xCC,W
0AB7C:  SUBLW  01
0AB7E:  BNZ   AB84
0AB80:  BTFSS  x1D.6
0AB82:  BRA    AB88
0AB84:  BTFSS  1A.5
0AB86:  BRA    AC54
....................    {
....................       if(In2.B15 == 0 && AutoAck == 0x0F && Ack.B15 == 0)   //use auto acknowlegde
0AB88:  BTFSC  x35.6
0AB8A:  BRA    ABA8
0AB8C:  MOVLB  0
0AB8E:  MOVF   x60,W
0AB90:  SUBLW  0F
0AB92:  BTFSC  FD8.2
0AB94:  BRA    AB9A
0AB96:  MOVLB  D
0AB98:  BRA    ABA8
0AB9A:  MOVLB  D
0AB9C:  BTFSC  x2D.6
0AB9E:  BRA    ABA8
....................       {
....................             TimeBase1s = 100 ;            //reload again
0ABA0:  MOVLW  64
0ABA2:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0ABA4:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B15 = 1;
0ABA8:  BSF    x35.6
....................       if(Ack.B15 == 0)
0ABAA:  BTFSC  x2D.6
0ABAC:  BRA    ABDC
....................       {
....................          if(FlashingFlag == 0)
0ABAE:  BTFSC  1A.1
0ABB0:  BRA    ABB6
....................             {
....................                Output.B15 = 0;           //Flash output1
0ABB2:  BCF    x15.6
....................             }
0ABB4:  BRA    ABB8
....................             else
....................             {
....................                Output.B15 = 1;
0ABB6:  BSF    x15.6
....................             }
....................          if (~AutoTestFlag)
0ABB8:  BTFSC  1A.4
0ABBA:  BRA    ABDC
....................          {
....................             if(AlarmIndicator.B15 == 1){
0ABBC:  BTFSS  x29.6
0ABBE:  BRA    ABDC
....................                 if(OutputBoth.B15 == 0)        //Both output
0ABC0:  BTFSC  x25.6
0ABC2:  BRA    ABCE
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0ABC4:  BSF    F89.4
0ABC6:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0ABC8:  BSF    F89.3
0ABCA:  BCF    F92.3
....................                 }
0ABCC:  BRA    ABDC
....................                 else
....................                 {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0ABCE:  BTFSS  x21.6
0ABD0:  BRA    ABD8
0ABD2:  BSF    F89.4
0ABD4:  BCF    F92.4
0ABD6:  BRA    ABDC
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0ABD8:  BSF    F89.3
0ABDA:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0ABDC:  MOVLW  01
0ABDE:  MOVWF  xBF
....................       // SMS Sending   
....................         if((SendSMS.B15 ==0) && (functointest_f ==0) && (Ack.B15 ==0))
0ABE0:  BTFSC  x49.6
0ABE2:  BRA    AC52
0ABE4:  BTFSC  30.4
0ABE6:  BRA    AC52
0ABE8:  BTFSC  x2D.6
0ABEA:  BRA    AC52
....................         {
....................           SendSMS.B15 =1;
0ABEC:  BSF    x49.6
....................           fprintf(CH2,"AT+CMGS=\"");
0ABEE:  MOVLW  E2
0ABF0:  MOVWF  FF6
0ABF2:  MOVLW  09
0ABF4:  MOVWF  FF7
0ABF6:  MOVLB  0
0ABF8:  CALL   2526
....................           fprintf(CH2,sms_phonenumber);
0ABFC:  MOVLW  0A
0ABFE:  MOVWF  FEA
0AC00:  MOVLW  81
0AC02:  MOVWF  FE9
0AC04:  CALL   6824
....................           
....................           fprintf(CH2,"\"");
0AC08:  MOVLW  22
0AC0A:  MOVLB  D
0AC0C:  MOVWF  xCD
0AC0E:  MOVLB  0
0AC10:  CALL   24E0
....................           putc('\n',CH2);
0AC14:  MOVLW  0A
0AC16:  MOVLB  D
0AC18:  MOVWF  xCD
0AC1A:  MOVLB  0
0AC1C:  CALL   24E0
....................           delay_ms(50);
0AC20:  MOVLW  32
0AC22:  MOVLB  D
0AC24:  MOVWF  xCC
0AC26:  MOVLB  0
0AC28:  CALL   0A28
....................          
....................          fprintf(CH2,SMS_Massage15);   
0AC2C:  MOVLW  0C
0AC2E:  MOVWF  FEA
0AC30:  MOVLW  50
0AC32:  MOVWF  FE9
0AC34:  CALL   6824
....................          putc('\n',CH2);
0AC38:  MOVLW  0A
0AC3A:  MOVLB  D
0AC3C:  MOVWF  xCD
0AC3E:  MOVLB  0
0AC40:  CALL   24E0
....................          putc(26,CH2);
0AC44:  MOVLW  1A
0AC46:  MOVLB  D
0AC48:  MOVWF  xCD
0AC4A:  MOVLB  0
0AC4C:  CALL   24E0
0AC50:  MOVLB  D
....................         }
....................    }
0AC52:  BRA    AD00
....................    else if(FaultType.B15 == 0)
0AC54:  BTFSC  x1D.6
0AC56:  BRA    AD00
....................    {
....................       In2.B15 = 0x00;
0AC58:  BCF    x35.6
....................       Ack.B15 = 0;
0AC5A:  BCF    x2D.6
....................       Output.B15 = 1;      //Off LED
0AC5C:  BSF    x15.6
....................       SendSMS.B15 =0;// Clear SMS
0AC5E:  BCF    x49.6
.................... 
....................       if((OutputType.B15 == 1 || OutputBoth.B15 == 0)&& inputflag ==0)      //If Buzzer or Both
0AC60:  BTFSC  x21.6
0AC62:  BRA    AC68
0AC64:  BTFSC  x25.6
0AC66:  BRA    AC82
0AC68:  MOVF   xBF,F
0AC6A:  BNZ   AC82
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0AC6C:  MOVLW  01
0AC6E:  MOVWF  xCB
0AC70:  MOVLB  0
0AC72:  CALL   684A
0AC76:  DECFSZ 01,W
0AC78:  BRA    AC7C
0AC7A:  BRA    AC80
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AC7C:  BCF    F89.4
0AC7E:  BCF    F92.4
0AC80:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B15 == 0 || OutputBoth.B15 == 0)&& inputflag ==0)  //If Bell or Both
0AC82:  BTFSS  x21.6
0AC84:  BRA    AC8A
0AC86:  BTFSC  x25.6
0AC88:  BRA    ACA8
0AC8A:  MOVF   xBF,F
0AC8C:  BNZ   ACA8
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AC8E:  MOVLW  02
0AC90:  MOVWF  xCB
0AC92:  MOVLB  0
0AC94:  CALL   684A
0AC98:  DECFSZ 01,W
0AC9A:  BRA    AC9E
0AC9C:  BRA    ACA6
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AC9E:  BCF    F89.3
0ACA0:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0ACA2:  BCF    F89.4
0ACA4:  BCF    F92.4
0ACA6:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0ACA8:  BTFSC  x34.0
0ACAA:  BRA    AD00
0ACAC:  BTFSC  x34.1
0ACAE:  BRA    AD00
0ACB0:  BTFSC  x34.2
0ACB2:  BRA    AD00
0ACB4:  BTFSC  x34.3
0ACB6:  BRA    AD00
0ACB8:  BTFSC  x34.4
0ACBA:  BRA    AD00
0ACBC:  BTFSC  x34.5
0ACBE:  BRA    AD00
0ACC0:  BTFSC  x34.6
0ACC2:  BRA    AD00
0ACC4:  BTFSC  x34.7
0ACC6:  BRA    AD00
0ACC8:  BTFSC  x35.0
0ACCA:  BRA    AD00
0ACCC:  BTFSC  x35.1
0ACCE:  BRA    AD00
0ACD0:  BTFSC  x35.2
0ACD2:  BRA    AD00
0ACD4:  BTFSC  x35.3
0ACD6:  BRA    AD00
0ACD8:  BTFSC  x35.4
0ACDA:  BRA    AD00
0ACDC:  BTFSC  x35.5
0ACDE:  BRA    AD00
0ACE0:  BTFSC  x35.6
0ACE2:  BRA    AD00
0ACE4:  BTFSC  x35.7
0ACE6:  BRA    AD00
0ACE8:  BTFSC  x36.0
0ACEA:  BRA    AD00
0ACEC:  BTFSC  x36.1
0ACEE:  BRA    AD00
0ACF0:  BTFSC  x36.2
0ACF2:  BRA    AD00
0ACF4:  BTFSC  x36.3
0ACF6:  BRA    AD00
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0ACF8:  BCF    F89.3
0ACFA:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0ACFC:  BCF    F89.4
0ACFE:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0AD00:  MOVLW  00
0AD02:  BTFSC  x11.7
0AD04:  MOVLW  01
0AD06:  MOVWF  xCC
0AD08:  MOVLW  00
0AD0A:  BTFSC  x19.7
0AD0C:  MOVLW  01
0AD0E:  XORWF  xCC,W
0AD10:  SUBLW  01
0AD12:  BNZ   AD18
0AD14:  BTFSS  x1D.7
0AD16:  BRA    AD1C
0AD18:  BTFSS  1A.5
0AD1A:  BRA    ADE8
....................    {
....................       if(In2.B16 == 0 && AutoAck == 0x0F && Ack.B16 == 0)   //use auto acknowlegde
0AD1C:  BTFSC  x35.7
0AD1E:  BRA    AD3C
0AD20:  MOVLB  0
0AD22:  MOVF   x60,W
0AD24:  SUBLW  0F
0AD26:  BTFSC  FD8.2
0AD28:  BRA    AD2E
0AD2A:  MOVLB  D
0AD2C:  BRA    AD3C
0AD2E:  MOVLB  D
0AD30:  BTFSC  x2D.7
0AD32:  BRA    AD3C
....................       {
....................             TimeBase1s = 100 ;            //reload again
0AD34:  MOVLW  64
0AD36:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0AD38:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B16 = 1;
0AD3C:  BSF    x35.7
....................       if(Ack.B16 == 0)
0AD3E:  BTFSC  x2D.7
0AD40:  BRA    AD70
....................       {
....................          if(FlashingFlag == 0)
0AD42:  BTFSC  1A.1
0AD44:  BRA    AD4A
....................             {
....................                Output.B16 = 0;         //Flash output1
0AD46:  BCF    x15.7
....................             }
0AD48:  BRA    AD4C
....................             else
....................             {
....................                Output.B16 = 1;
0AD4A:  BSF    x15.7
....................             }
....................          if (~AutoTestFlag)
0AD4C:  BTFSC  1A.4
0AD4E:  BRA    AD70
....................          {
....................             if(AlarmIndicator.B16 == 1){
0AD50:  BTFSS  x29.7
0AD52:  BRA    AD70
....................                 if(OutputBoth.B16 == 0)        //Both output
0AD54:  BTFSC  x25.7
0AD56:  BRA    AD62
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0AD58:  BSF    F89.4
0AD5A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0AD5C:  BSF    F89.3
0AD5E:  BCF    F92.3
....................                 }
0AD60:  BRA    AD70
....................                 else
....................                 {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0AD62:  BTFSS  x21.7
0AD64:  BRA    AD6C
0AD66:  BSF    F89.4
0AD68:  BCF    F92.4
0AD6A:  BRA    AD70
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0AD6C:  BSF    F89.3
0AD6E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0AD70:  MOVLW  01
0AD72:  MOVWF  xBF
....................        // SMS Sending   
....................      if((SendSMS.B16 ==0) && (functointest_f ==0) && (Ack.B16 ==0))
0AD74:  BTFSC  x49.7
0AD76:  BRA    ADE6
0AD78:  BTFSC  30.4
0AD7A:  BRA    ADE6
0AD7C:  BTFSC  x2D.7
0AD7E:  BRA    ADE6
....................      {
....................        SendSMS.B16 =1;
0AD80:  BSF    x49.7
....................        fprintf(CH2,"AT+CMGS=\"");
0AD82:  MOVLW  EC
0AD84:  MOVWF  FF6
0AD86:  MOVLW  09
0AD88:  MOVWF  FF7
0AD8A:  MOVLB  0
0AD8C:  CALL   2526
....................        fprintf(CH2,sms_phonenumber);
0AD90:  MOVLW  0A
0AD92:  MOVWF  FEA
0AD94:  MOVLW  81
0AD96:  MOVWF  FE9
0AD98:  CALL   6824
....................        
....................        fprintf(CH2,"\"");
0AD9C:  MOVLW  22
0AD9E:  MOVLB  D
0ADA0:  MOVWF  xCD
0ADA2:  MOVLB  0
0ADA4:  CALL   24E0
....................        putc('\n',CH2);
0ADA8:  MOVLW  0A
0ADAA:  MOVLB  D
0ADAC:  MOVWF  xCD
0ADAE:  MOVLB  0
0ADB0:  CALL   24E0
....................        delay_ms(50);
0ADB4:  MOVLW  32
0ADB6:  MOVLB  D
0ADB8:  MOVWF  xCC
0ADBA:  MOVLB  0
0ADBC:  CALL   0A28
....................       
....................       fprintf(CH2,SMS_Massage16);   
0ADC0:  MOVLW  0C
0ADC2:  MOVWF  FEA
0ADC4:  MOVLW  70
0ADC6:  MOVWF  FE9
0ADC8:  CALL   6824
....................       putc('\n',CH2);
0ADCC:  MOVLW  0A
0ADCE:  MOVLB  D
0ADD0:  MOVWF  xCD
0ADD2:  MOVLB  0
0ADD4:  CALL   24E0
....................       putc(26,CH2);
0ADD8:  MOVLW  1A
0ADDA:  MOVLB  D
0ADDC:  MOVWF  xCD
0ADDE:  MOVLB  0
0ADE0:  CALL   24E0
0ADE4:  MOVLB  D
....................      }
....................    }
0ADE6:  BRA    AE94
....................    else if(FaultType.B16 == 0)
0ADE8:  BTFSC  x1D.7
0ADEA:  BRA    AE94
....................    {
....................       In2.B16 = 0x00;
0ADEC:  BCF    x35.7
....................       Ack.B16 = 0;
0ADEE:  BCF    x2D.7
....................       Output.B16 = 1;      //Off LED
0ADF0:  BSF    x15.7
....................       SendSMS.B16 =0;// Clear SMS
0ADF2:  BCF    x49.7
.................... 
....................       if((OutputType.B16 == 1 || OutputBoth.B16 == 0)&& inputflag ==0)      //If Buzzer or Both
0ADF4:  BTFSC  x21.7
0ADF6:  BRA    ADFC
0ADF8:  BTFSC  x25.7
0ADFA:  BRA    AE16
0ADFC:  MOVF   xBF,F
0ADFE:  BNZ   AE16
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0AE00:  MOVLW  01
0AE02:  MOVWF  xCB
0AE04:  MOVLB  0
0AE06:  CALL   684A
0AE0A:  DECFSZ 01,W
0AE0C:  BRA    AE10
0AE0E:  BRA    AE14
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AE10:  BCF    F89.4
0AE12:  BCF    F92.4
0AE14:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B16 == 0 || OutputBoth.B16 == 0)&& inputflag ==0)  //If Bell or Both
0AE16:  BTFSS  x21.7
0AE18:  BRA    AE1E
0AE1A:  BTFSC  x25.7
0AE1C:  BRA    AE3C
0AE1E:  MOVF   xBF,F
0AE20:  BNZ   AE3C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AE22:  MOVLW  02
0AE24:  MOVWF  xCB
0AE26:  MOVLB  0
0AE28:  CALL   684A
0AE2C:  DECFSZ 01,W
0AE2E:  BRA    AE32
0AE30:  BRA    AE3A
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AE32:  BCF    F89.3
0AE34:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AE36:  BCF    F89.4
0AE38:  BCF    F92.4
0AE3A:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0AE3C:  BTFSC  x34.0
0AE3E:  BRA    AE94
0AE40:  BTFSC  x34.1
0AE42:  BRA    AE94
0AE44:  BTFSC  x34.2
0AE46:  BRA    AE94
0AE48:  BTFSC  x34.3
0AE4A:  BRA    AE94
0AE4C:  BTFSC  x34.4
0AE4E:  BRA    AE94
0AE50:  BTFSC  x34.5
0AE52:  BRA    AE94
0AE54:  BTFSC  x34.6
0AE56:  BRA    AE94
0AE58:  BTFSC  x34.7
0AE5A:  BRA    AE94
0AE5C:  BTFSC  x35.0
0AE5E:  BRA    AE94
0AE60:  BTFSC  x35.1
0AE62:  BRA    AE94
0AE64:  BTFSC  x35.2
0AE66:  BRA    AE94
0AE68:  BTFSC  x35.3
0AE6A:  BRA    AE94
0AE6C:  BTFSC  x35.4
0AE6E:  BRA    AE94
0AE70:  BTFSC  x35.5
0AE72:  BRA    AE94
0AE74:  BTFSC  x35.6
0AE76:  BRA    AE94
0AE78:  BTFSC  x35.7
0AE7A:  BRA    AE94
0AE7C:  BTFSC  x36.0
0AE7E:  BRA    AE94
0AE80:  BTFSC  x36.1
0AE82:  BRA    AE94
0AE84:  BTFSC  x36.2
0AE86:  BRA    AE94
0AE88:  BTFSC  x36.3
0AE8A:  BRA    AE94
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0AE8C:  BCF    F89.3
0AE8E:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AE90:  BCF    F89.4
0AE92:  BCF    F92.4
....................       }
....................    }
.................... //input17
....................    if((((Inputt.B17 ^ InputType.B17) == 1) && (FaultType.B17 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0AE94:  MOVLW  00
0AE96:  BTFSC  x12.0
0AE98:  MOVLW  01
0AE9A:  MOVWF  xCC
0AE9C:  MOVLW  00
0AE9E:  BTFSC  x1A.0
0AEA0:  MOVLW  01
0AEA2:  XORWF  xCC,W
0AEA4:  SUBLW  01
0AEA6:  BNZ   AEAC
0AEA8:  BTFSS  x1E.0
0AEAA:  BRA    AEB0
0AEAC:  BTFSS  1A.5
0AEAE:  BRA    AF7C
....................    {
....................       if(In2.B17 == 0 && AutoAck == 0x0F && Ack.B17 == 0)   //use auto acknowlegde
0AEB0:  BTFSC  x36.0
0AEB2:  BRA    AED0
0AEB4:  MOVLB  0
0AEB6:  MOVF   x60,W
0AEB8:  SUBLW  0F
0AEBA:  BTFSC  FD8.2
0AEBC:  BRA    AEC2
0AEBE:  MOVLB  D
0AEC0:  BRA    AED0
0AEC2:  MOVLB  D
0AEC4:  BTFSC  x2E.0
0AEC6:  BRA    AED0
....................       {
....................             TimeBase1s = 100 ;            //reload again
0AEC8:  MOVLW  64
0AECA:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0AECC:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B17 = 1;
0AED0:  BSF    x36.0
....................       if(Ack.B17 == 0)
0AED2:  BTFSC  x2E.0
0AED4:  BRA    AF04
....................       {
....................          if(FlashingFlag == 0)
0AED6:  BTFSC  1A.1
0AED8:  BRA    AEDE
....................             {
....................                Output.B17 = 0;           //Flash output1
0AEDA:  BCF    x16.0
....................             }
0AEDC:  BRA    AEE0
....................             else
....................             {
....................                Output.B17 = 1;
0AEDE:  BSF    x16.0
....................             }
....................          if (~AutoTestFlag)
0AEE0:  BTFSC  1A.4
0AEE2:  BRA    AF04
....................          {
....................             if(AlarmIndicator.B17 == 1){
0AEE4:  BTFSS  x2A.0
0AEE6:  BRA    AF04
....................                 if(OutputBoth.B17 == 0)        //Both output
0AEE8:  BTFSC  x26.0
0AEEA:  BRA    AEF6
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0AEEC:  BSF    F89.4
0AEEE:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0AEF0:  BSF    F89.3
0AEF2:  BCF    F92.3
....................                 }
0AEF4:  BRA    AF04
....................                 else
....................                 {
....................                   if(OutputType.B17 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0AEF6:  BTFSS  x22.0
0AEF8:  BRA    AF00
0AEFA:  BSF    F89.4
0AEFC:  BCF    F92.4
0AEFE:  BRA    AF04
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0AF00:  BSF    F89.3
0AF02:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0AF04:  MOVLW  01
0AF06:  MOVWF  xBF
....................        // SMS Sending   
....................      if((SendSMS.B17 ==0) && (functointest_f ==0) && (Ack.B16 ==0))
0AF08:  BTFSC  x4A.0
0AF0A:  BRA    AF7A
0AF0C:  BTFSC  30.4
0AF0E:  BRA    AF7A
0AF10:  BTFSC  x2D.7
0AF12:  BRA    AF7A
....................      {
....................        SendSMS.B17 =1;
0AF14:  BSF    x4A.0
....................        fprintf(CH2,"AT+CMGS=\"");
0AF16:  MOVLW  F6
0AF18:  MOVWF  FF6
0AF1A:  MOVLW  09
0AF1C:  MOVWF  FF7
0AF1E:  MOVLB  0
0AF20:  CALL   2526
....................        fprintf(CH2,sms_phonenumber);
0AF24:  MOVLW  0A
0AF26:  MOVWF  FEA
0AF28:  MOVLW  81
0AF2A:  MOVWF  FE9
0AF2C:  CALL   6824
....................        
....................        fprintf(CH2,"\"");
0AF30:  MOVLW  22
0AF32:  MOVLB  D
0AF34:  MOVWF  xCD
0AF36:  MOVLB  0
0AF38:  CALL   24E0
....................        putc('\n',CH2);
0AF3C:  MOVLW  0A
0AF3E:  MOVLB  D
0AF40:  MOVWF  xCD
0AF42:  MOVLB  0
0AF44:  CALL   24E0
....................        delay_ms(50);
0AF48:  MOVLW  32
0AF4A:  MOVLB  D
0AF4C:  MOVWF  xCC
0AF4E:  MOVLB  0
0AF50:  CALL   0A28
....................       
....................       fprintf(CH2,SMS_Massage17);   
0AF54:  MOVLW  0C
0AF56:  MOVWF  FEA
0AF58:  MOVLW  90
0AF5A:  MOVWF  FE9
0AF5C:  CALL   6824
....................       putc('\n',CH2);
0AF60:  MOVLW  0A
0AF62:  MOVLB  D
0AF64:  MOVWF  xCD
0AF66:  MOVLB  0
0AF68:  CALL   24E0
....................       putc(26,CH2);
0AF6C:  MOVLW  1A
0AF6E:  MOVLB  D
0AF70:  MOVWF  xCD
0AF72:  MOVLB  0
0AF74:  CALL   24E0
0AF78:  MOVLB  D
....................      }
....................    }
0AF7A:  BRA    B028
....................    else if(FaultType.B17 == 0)
0AF7C:  BTFSC  x1E.0
0AF7E:  BRA    B028
....................    {
....................       In2.B17 = 0x00;
0AF80:  BCF    x36.0
....................       Ack.B17 = 0;
0AF82:  BCF    x2E.0
....................       Output.B17 = 1;      //Off LED
0AF84:  BSF    x16.0
....................       SendSMS.B17 =0;// Clear SMS
0AF86:  BCF    x4A.0
.................... 
....................       if((OutputType.B17 == 1 || OutputBoth.B17 == 0)&& inputflag ==0)      //If Buzzer or Both
0AF88:  BTFSC  x22.0
0AF8A:  BRA    AF90
0AF8C:  BTFSC  x26.0
0AF8E:  BRA    AFAA
0AF90:  MOVF   xBF,F
0AF92:  BNZ   AFAA
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0AF94:  MOVLW  01
0AF96:  MOVWF  xCB
0AF98:  MOVLB  0
0AF9A:  CALL   684A
0AF9E:  DECFSZ 01,W
0AFA0:  BRA    AFA4
0AFA2:  BRA    AFA8
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AFA4:  BCF    F89.4
0AFA6:  BCF    F92.4
0AFA8:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B17 == 0 || OutputBoth.B17 == 0)&& inputflag ==0)  //If Bell or Both
0AFAA:  BTFSS  x22.0
0AFAC:  BRA    AFB2
0AFAE:  BTFSC  x26.0
0AFB0:  BRA    AFD0
0AFB2:  MOVF   xBF,F
0AFB4:  BNZ   AFD0
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AFB6:  MOVLW  02
0AFB8:  MOVWF  xCB
0AFBA:  MOVLB  0
0AFBC:  CALL   684A
0AFC0:  DECFSZ 01,W
0AFC2:  BRA    AFC6
0AFC4:  BRA    AFCE
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AFC6:  BCF    F89.3
0AFC8:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AFCA:  BCF    F89.4
0AFCC:  BCF    F92.4
0AFCE:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0AFD0:  BTFSC  x34.0
0AFD2:  BRA    B028
0AFD4:  BTFSC  x34.1
0AFD6:  BRA    B028
0AFD8:  BTFSC  x34.2
0AFDA:  BRA    B028
0AFDC:  BTFSC  x34.3
0AFDE:  BRA    B028
0AFE0:  BTFSC  x34.4
0AFE2:  BRA    B028
0AFE4:  BTFSC  x34.5
0AFE6:  BRA    B028
0AFE8:  BTFSC  x34.6
0AFEA:  BRA    B028
0AFEC:  BTFSC  x34.7
0AFEE:  BRA    B028
0AFF0:  BTFSC  x35.0
0AFF2:  BRA    B028
0AFF4:  BTFSC  x35.1
0AFF6:  BRA    B028
0AFF8:  BTFSC  x35.2
0AFFA:  BRA    B028
0AFFC:  BTFSC  x35.3
0AFFE:  BRA    B028
0B000:  BTFSC  x35.4
0B002:  BRA    B028
0B004:  BTFSC  x35.5
0B006:  BRA    B028
0B008:  BTFSC  x35.6
0B00A:  BRA    B028
0B00C:  BTFSC  x35.7
0B00E:  BRA    B028
0B010:  BTFSC  x36.0
0B012:  BRA    B028
0B014:  BTFSC  x36.1
0B016:  BRA    B028
0B018:  BTFSC  x36.2
0B01A:  BRA    B028
0B01C:  BTFSC  x36.3
0B01E:  BRA    B028
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0B020:  BCF    F89.3
0B022:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B024:  BCF    F89.4
0B026:  BCF    F92.4
....................       }
....................    }
.................... //input18
....................    if((((Inputt.B18 ^ InputType.B18) == 1) && (FaultType.B18 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0B028:  MOVLW  00
0B02A:  BTFSC  x12.1
0B02C:  MOVLW  01
0B02E:  MOVWF  xCC
0B030:  MOVLW  00
0B032:  BTFSC  x1A.1
0B034:  MOVLW  01
0B036:  XORWF  xCC,W
0B038:  SUBLW  01
0B03A:  BNZ   B040
0B03C:  BTFSS  x1E.1
0B03E:  BRA    B044
0B040:  BTFSS  1A.5
0B042:  BRA    B110
....................    {
....................       if(In2.B18 == 0 && AutoAck == 0x0F && Ack.B18 == 0)   //use auto acknowlegde
0B044:  BTFSC  x36.1
0B046:  BRA    B064
0B048:  MOVLB  0
0B04A:  MOVF   x60,W
0B04C:  SUBLW  0F
0B04E:  BTFSC  FD8.2
0B050:  BRA    B056
0B052:  MOVLB  D
0B054:  BRA    B064
0B056:  MOVLB  D
0B058:  BTFSC  x2E.1
0B05A:  BRA    B064
....................       {
....................             TimeBase1s = 100 ;            //reload again
0B05C:  MOVLW  64
0B05E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0B060:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B18 = 1;
0B064:  BSF    x36.1
....................       if(Ack.B18 == 0)
0B066:  BTFSC  x2E.1
0B068:  BRA    B098
....................       {
....................          if(FlashingFlag == 0)
0B06A:  BTFSC  1A.1
0B06C:  BRA    B072
....................             {
....................                Output.B18 = 0;           //Flash output1
0B06E:  BCF    x16.1
....................             }
0B070:  BRA    B074
....................             else
....................             {
....................                Output.B18 = 1;
0B072:  BSF    x16.1
....................             }
....................          if (~AutoTestFlag)
0B074:  BTFSC  1A.4
0B076:  BRA    B098
....................          {
....................             if(AlarmIndicator.B18 == 1){
0B078:  BTFSS  x2A.1
0B07A:  BRA    B098
....................                 if(OutputBoth.B18 == 0)        //Both output
0B07C:  BTFSC  x26.1
0B07E:  BRA    B08A
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0B080:  BSF    F89.4
0B082:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0B084:  BSF    F89.3
0B086:  BCF    F92.3
....................                 }
0B088:  BRA    B098
....................                 else
....................                 {
....................                   if(OutputType.B18 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0B08A:  BTFSS  x22.1
0B08C:  BRA    B094
0B08E:  BSF    F89.4
0B090:  BCF    F92.4
0B092:  BRA    B098
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0B094:  BSF    F89.3
0B096:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0B098:  MOVLW  01
0B09A:  MOVWF  xBF
....................        // SMS Sending   
....................      if((SendSMS.B18 ==0) && (functointest_f ==0) && (Ack.B18 ==0))
0B09C:  BTFSC  x4A.1
0B09E:  BRA    B10E
0B0A0:  BTFSC  30.4
0B0A2:  BRA    B10E
0B0A4:  BTFSC  x2E.1
0B0A6:  BRA    B10E
....................      {
....................        SendSMS.B18 =1;
0B0A8:  BSF    x4A.1
....................        fprintf(CH2,"AT+CMGS=\"");
0B0AA:  MOVLW  00
0B0AC:  MOVWF  FF6
0B0AE:  MOVLW  0A
0B0B0:  MOVWF  FF7
0B0B2:  MOVLB  0
0B0B4:  CALL   2526
....................        fprintf(CH2,sms_phonenumber);
0B0B8:  MOVLW  0A
0B0BA:  MOVWF  FEA
0B0BC:  MOVLW  81
0B0BE:  MOVWF  FE9
0B0C0:  CALL   6824
....................        
....................        fprintf(CH2,"\"");
0B0C4:  MOVLW  22
0B0C6:  MOVLB  D
0B0C8:  MOVWF  xCD
0B0CA:  MOVLB  0
0B0CC:  CALL   24E0
....................        putc('\n',CH2);
0B0D0:  MOVLW  0A
0B0D2:  MOVLB  D
0B0D4:  MOVWF  xCD
0B0D6:  MOVLB  0
0B0D8:  CALL   24E0
....................        delay_ms(50);
0B0DC:  MOVLW  32
0B0DE:  MOVLB  D
0B0E0:  MOVWF  xCC
0B0E2:  MOVLB  0
0B0E4:  CALL   0A28
....................       
....................       fprintf(CH2,SMS_Massage18);   
0B0E8:  MOVLW  0C
0B0EA:  MOVWF  FEA
0B0EC:  MOVLW  B0
0B0EE:  MOVWF  FE9
0B0F0:  CALL   6824
....................       putc('\n',CH2);
0B0F4:  MOVLW  0A
0B0F6:  MOVLB  D
0B0F8:  MOVWF  xCD
0B0FA:  MOVLB  0
0B0FC:  CALL   24E0
....................       putc(26,CH2);
0B100:  MOVLW  1A
0B102:  MOVLB  D
0B104:  MOVWF  xCD
0B106:  MOVLB  0
0B108:  CALL   24E0
0B10C:  MOVLB  D
....................      }
....................    }
0B10E:  BRA    B1BC
....................    else if(FaultType.B18 == 0)
0B110:  BTFSC  x1E.1
0B112:  BRA    B1BC
....................    {
....................       In2.B18 = 0x00;
0B114:  BCF    x36.1
....................       Ack.B18 = 0;
0B116:  BCF    x2E.1
....................       Output.B18 = 1;      //Off LED
0B118:  BSF    x16.1
....................       SendSMS.B18 =0;// Clear SMS
0B11A:  BCF    x4A.1
.................... 
....................       if((OutputType.B18== 1 || OutputBoth.B18 == 0)&& inputflag ==0)      //If Buzzer or Both
0B11C:  BTFSC  x22.1
0B11E:  BRA    B124
0B120:  BTFSC  x26.1
0B122:  BRA    B13E
0B124:  MOVF   xBF,F
0B126:  BNZ   B13E
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0B128:  MOVLW  01
0B12A:  MOVWF  xCB
0B12C:  MOVLB  0
0B12E:  CALL   684A
0B132:  DECFSZ 01,W
0B134:  BRA    B138
0B136:  BRA    B13C
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B138:  BCF    F89.4
0B13A:  BCF    F92.4
0B13C:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B18 == 0 || OutputBoth.B18 == 0)&& inputflag ==0)  //If Bell or Both
0B13E:  BTFSS  x22.1
0B140:  BRA    B146
0B142:  BTFSC  x26.1
0B144:  BRA    B164
0B146:  MOVF   xBF,F
0B148:  BNZ   B164
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0B14A:  MOVLW  02
0B14C:  MOVWF  xCB
0B14E:  MOVLB  0
0B150:  CALL   684A
0B154:  DECFSZ 01,W
0B156:  BRA    B15A
0B158:  BRA    B162
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0B15A:  BCF    F89.3
0B15C:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B15E:  BCF    F89.4
0B160:  BCF    F92.4
0B162:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0B164:  BTFSC  x34.0
0B166:  BRA    B1BC
0B168:  BTFSC  x34.1
0B16A:  BRA    B1BC
0B16C:  BTFSC  x34.2
0B16E:  BRA    B1BC
0B170:  BTFSC  x34.3
0B172:  BRA    B1BC
0B174:  BTFSC  x34.4
0B176:  BRA    B1BC
0B178:  BTFSC  x34.5
0B17A:  BRA    B1BC
0B17C:  BTFSC  x34.6
0B17E:  BRA    B1BC
0B180:  BTFSC  x34.7
0B182:  BRA    B1BC
0B184:  BTFSC  x35.0
0B186:  BRA    B1BC
0B188:  BTFSC  x35.1
0B18A:  BRA    B1BC
0B18C:  BTFSC  x35.2
0B18E:  BRA    B1BC
0B190:  BTFSC  x35.3
0B192:  BRA    B1BC
0B194:  BTFSC  x35.4
0B196:  BRA    B1BC
0B198:  BTFSC  x35.5
0B19A:  BRA    B1BC
0B19C:  BTFSC  x35.6
0B19E:  BRA    B1BC
0B1A0:  BTFSC  x35.7
0B1A2:  BRA    B1BC
0B1A4:  BTFSC  x36.0
0B1A6:  BRA    B1BC
0B1A8:  BTFSC  x36.1
0B1AA:  BRA    B1BC
0B1AC:  BTFSC  x36.2
0B1AE:  BRA    B1BC
0B1B0:  BTFSC  x36.3
0B1B2:  BRA    B1BC
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0B1B4:  BCF    F89.3
0B1B6:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B1B8:  BCF    F89.4
0B1BA:  BCF    F92.4
....................       }
....................    }
.................... //input19
....................    if((((Inputt.B19 ^ InputType.B19) == 1) && (FaultType.B19 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0B1BC:  MOVLW  00
0B1BE:  BTFSC  x12.2
0B1C0:  MOVLW  01
0B1C2:  MOVWF  xCC
0B1C4:  MOVLW  00
0B1C6:  BTFSC  x1A.2
0B1C8:  MOVLW  01
0B1CA:  XORWF  xCC,W
0B1CC:  SUBLW  01
0B1CE:  BNZ   B1D4
0B1D0:  BTFSS  x1E.2
0B1D2:  BRA    B1D8
0B1D4:  BTFSS  1A.5
0B1D6:  BRA    B2A4
....................    {
....................       if(In2.B19 == 0 && AutoAck == 0x0F && Ack.B19 == 0)   //use auto acknowlegde
0B1D8:  BTFSC  x36.2
0B1DA:  BRA    B1F8
0B1DC:  MOVLB  0
0B1DE:  MOVF   x60,W
0B1E0:  SUBLW  0F
0B1E2:  BTFSC  FD8.2
0B1E4:  BRA    B1EA
0B1E6:  MOVLB  D
0B1E8:  BRA    B1F8
0B1EA:  MOVLB  D
0B1EC:  BTFSC  x2E.2
0B1EE:  BRA    B1F8
....................       {
....................             TimeBase1s = 100 ;            //reload again
0B1F0:  MOVLW  64
0B1F2:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0B1F4:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B19 = 1;
0B1F8:  BSF    x36.2
....................       if(Ack.B19 == 0)
0B1FA:  BTFSC  x2E.2
0B1FC:  BRA    B22C
....................       {
....................          if(FlashingFlag == 0)
0B1FE:  BTFSC  1A.1
0B200:  BRA    B206
....................             {
....................                Output.B19 = 0;           //Flash output1
0B202:  BCF    x16.2
....................             }
0B204:  BRA    B208
....................             else
....................             {
....................                Output.B19 = 1;
0B206:  BSF    x16.2
....................             }
....................          if (~AutoTestFlag)
0B208:  BTFSC  1A.4
0B20A:  BRA    B22C
....................          {
....................             if(AlarmIndicator.B19 == 1){
0B20C:  BTFSS  x2A.2
0B20E:  BRA    B22C
....................                 if(OutputBoth.B19 == 0)        //Both output
0B210:  BTFSC  x26.2
0B212:  BRA    B21E
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0B214:  BSF    F89.4
0B216:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0B218:  BSF    F89.3
0B21A:  BCF    F92.3
....................                 }
0B21C:  BRA    B22C
....................                 else
....................                 {
....................                   if(OutputType.B19 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0B21E:  BTFSS  x22.2
0B220:  BRA    B228
0B222:  BSF    F89.4
0B224:  BCF    F92.4
0B226:  BRA    B22C
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0B228:  BSF    F89.3
0B22A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0B22C:  MOVLW  01
0B22E:  MOVWF  xBF
....................        // SMS Sending   
....................      if((SendSMS.B19 ==0) && (functointest_f ==0) && (Ack.B19 ==0))
0B230:  BTFSC  x4A.2
0B232:  BRA    B2A2
0B234:  BTFSC  30.4
0B236:  BRA    B2A2
0B238:  BTFSC  x2E.2
0B23A:  BRA    B2A2
....................      {
....................        SendSMS.B19 =1;
0B23C:  BSF    x4A.2
....................        fprintf(CH2,"AT+CMGS=\"");
0B23E:  MOVLW  0A
0B240:  MOVWF  FF6
0B242:  MOVLW  0A
0B244:  MOVWF  FF7
0B246:  MOVLB  0
0B248:  CALL   2526
....................        fprintf(CH2,sms_phonenumber);
0B24C:  MOVLW  0A
0B24E:  MOVWF  FEA
0B250:  MOVLW  81
0B252:  MOVWF  FE9
0B254:  CALL   6824
....................        
....................        fprintf(CH2,"\"");
0B258:  MOVLW  22
0B25A:  MOVLB  D
0B25C:  MOVWF  xCD
0B25E:  MOVLB  0
0B260:  CALL   24E0
....................        putc('\n',CH2);
0B264:  MOVLW  0A
0B266:  MOVLB  D
0B268:  MOVWF  xCD
0B26A:  MOVLB  0
0B26C:  CALL   24E0
....................        delay_ms(50);
0B270:  MOVLW  32
0B272:  MOVLB  D
0B274:  MOVWF  xCC
0B276:  MOVLB  0
0B278:  CALL   0A28
....................       
....................       fprintf(CH2,SMS_Massage19);   
0B27C:  MOVLW  0C
0B27E:  MOVWF  FEA
0B280:  MOVLW  D0
0B282:  MOVWF  FE9
0B284:  CALL   6824
....................       putc('\n',CH2);
0B288:  MOVLW  0A
0B28A:  MOVLB  D
0B28C:  MOVWF  xCD
0B28E:  MOVLB  0
0B290:  CALL   24E0
....................       putc(26,CH2);
0B294:  MOVLW  1A
0B296:  MOVLB  D
0B298:  MOVWF  xCD
0B29A:  MOVLB  0
0B29C:  CALL   24E0
0B2A0:  MOVLB  D
....................      }
....................    }
0B2A2:  BRA    B350
....................    else if(FaultType.B19 == 0)
0B2A4:  BTFSC  x1E.2
0B2A6:  BRA    B350
....................    {
....................       In2.B19 = 0x00;
0B2A8:  BCF    x36.2
....................       Ack.B19 = 0;
0B2AA:  BCF    x2E.2
....................       Output.B19 = 1;      //Off LED
0B2AC:  BSF    x16.2
....................       SendSMS.B19 =0;// Clear SMS
0B2AE:  BCF    x4A.2
.................... 
....................       if((OutputType.B19== 1 || OutputBoth.B19 == 0)&& inputflag ==0)      //If Buzzer or Both
0B2B0:  BTFSC  x22.2
0B2B2:  BRA    B2B8
0B2B4:  BTFSC  x26.2
0B2B6:  BRA    B2D2
0B2B8:  MOVF   xBF,F
0B2BA:  BNZ   B2D2
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0B2BC:  MOVLW  01
0B2BE:  MOVWF  xCB
0B2C0:  MOVLB  0
0B2C2:  CALL   684A
0B2C6:  DECFSZ 01,W
0B2C8:  BRA    B2CC
0B2CA:  BRA    B2D0
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B2CC:  BCF    F89.4
0B2CE:  BCF    F92.4
0B2D0:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B19 == 0 || OutputBoth.B19== 0)&& inputflag ==0)  //If Bell or Both
0B2D2:  BTFSS  x22.2
0B2D4:  BRA    B2DA
0B2D6:  BTFSC  x26.2
0B2D8:  BRA    B2F8
0B2DA:  MOVF   xBF,F
0B2DC:  BNZ   B2F8
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0B2DE:  MOVLW  02
0B2E0:  MOVWF  xCB
0B2E2:  MOVLB  0
0B2E4:  CALL   684A
0B2E8:  DECFSZ 01,W
0B2EA:  BRA    B2EE
0B2EC:  BRA    B2F6
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0B2EE:  BCF    F89.3
0B2F0:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B2F2:  BCF    F89.4
0B2F4:  BCF    F92.4
0B2F6:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0B2F8:  BTFSC  x34.0
0B2FA:  BRA    B350
0B2FC:  BTFSC  x34.1
0B2FE:  BRA    B350
0B300:  BTFSC  x34.2
0B302:  BRA    B350
0B304:  BTFSC  x34.3
0B306:  BRA    B350
0B308:  BTFSC  x34.4
0B30A:  BRA    B350
0B30C:  BTFSC  x34.5
0B30E:  BRA    B350
0B310:  BTFSC  x34.6
0B312:  BRA    B350
0B314:  BTFSC  x34.7
0B316:  BRA    B350
0B318:  BTFSC  x35.0
0B31A:  BRA    B350
0B31C:  BTFSC  x35.1
0B31E:  BRA    B350
0B320:  BTFSC  x35.2
0B322:  BRA    B350
0B324:  BTFSC  x35.3
0B326:  BRA    B350
0B328:  BTFSC  x35.4
0B32A:  BRA    B350
0B32C:  BTFSC  x35.5
0B32E:  BRA    B350
0B330:  BTFSC  x35.6
0B332:  BRA    B350
0B334:  BTFSC  x35.7
0B336:  BRA    B350
0B338:  BTFSC  x36.0
0B33A:  BRA    B350
0B33C:  BTFSC  x36.1
0B33E:  BRA    B350
0B340:  BTFSC  x36.2
0B342:  BRA    B350
0B344:  BTFSC  x36.3
0B346:  BRA    B350
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0B348:  BCF    F89.3
0B34A:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B34C:  BCF    F89.4
0B34E:  BCF    F92.4
....................       }
....................    }
....................       
....................    //input20
....................    if((((Inputt.B20 ^ InputType.B20) == 1) && (FaultType.B20 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0B350:  MOVLW  00
0B352:  BTFSC  x12.3
0B354:  MOVLW  01
0B356:  MOVWF  xCC
0B358:  MOVLW  00
0B35A:  BTFSC  x1A.3
0B35C:  MOVLW  01
0B35E:  XORWF  xCC,W
0B360:  SUBLW  01
0B362:  BNZ   B368
0B364:  BTFSS  x1E.3
0B366:  BRA    B36C
0B368:  BTFSS  1A.5
0B36A:  BRA    B438
....................    {
....................       if(In2.B20 == 0 && AutoAck == 0x0F && Ack.B20 == 0)   //use auto acknowlegde
0B36C:  BTFSC  x36.3
0B36E:  BRA    B38C
0B370:  MOVLB  0
0B372:  MOVF   x60,W
0B374:  SUBLW  0F
0B376:  BTFSC  FD8.2
0B378:  BRA    B37E
0B37A:  MOVLB  D
0B37C:  BRA    B38C
0B37E:  MOVLB  D
0B380:  BTFSC  x2E.3
0B382:  BRA    B38C
....................       {
....................             TimeBase1s = 100 ;            //reload again
0B384:  MOVLW  64
0B386:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0B388:  MOVFF  61,1D
....................       }
.................... 
....................       In2.B20 = 1;
0B38C:  BSF    x36.3
....................       if(Ack.B20 == 0)
0B38E:  BTFSC  x2E.3
0B390:  BRA    B3C0
....................       {
....................          if(FlashingFlag == 0)
0B392:  BTFSC  1A.1
0B394:  BRA    B39A
....................             {
....................                Output.B20 = 0;           //Flash output1
0B396:  BCF    x16.3
....................             }
0B398:  BRA    B39C
....................             else
....................             {
....................                Output.B20 = 1;
0B39A:  BSF    x16.3
....................             }
....................          if (~AutoTestFlag)
0B39C:  BTFSC  1A.4
0B39E:  BRA    B3C0
....................          {
....................             if(AlarmIndicator.B20 == 1){
0B3A0:  BTFSS  x2A.3
0B3A2:  BRA    B3C0
....................                 if(OutputBoth.B20 == 0)        //Both output
0B3A4:  BTFSC  x26.3
0B3A6:  BRA    B3B2
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0B3A8:  BSF    F89.4
0B3AA:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0B3AC:  BSF    F89.3
0B3AE:  BCF    F92.3
....................                 }
0B3B0:  BRA    B3C0
....................                 else
....................                 {
....................                   if(OutputType.B20 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0B3B2:  BTFSS  x22.3
0B3B4:  BRA    B3BC
0B3B6:  BSF    F89.4
0B3B8:  BCF    F92.4
0B3BA:  BRA    B3C0
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0B3BC:  BSF    F89.3
0B3BE:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................     inputflag =1;
0B3C0:  MOVLW  01
0B3C2:  MOVWF  xBF
....................      // SMS Sending   
....................      if((SendSMS.B20 ==0) && (functointest_f ==0) && (Ack.B20 ==0))
0B3C4:  BTFSC  x4A.3
0B3C6:  BRA    B436
0B3C8:  BTFSC  30.4
0B3CA:  BRA    B436
0B3CC:  BTFSC  x2E.3
0B3CE:  BRA    B436
....................      {
....................        SendSMS.B20 =1;
0B3D0:  BSF    x4A.3
....................        fprintf(CH2,"AT+CMGS=\"");
0B3D2:  MOVLW  14
0B3D4:  MOVWF  FF6
0B3D6:  MOVLW  0A
0B3D8:  MOVWF  FF7
0B3DA:  MOVLB  0
0B3DC:  CALL   2526
....................        fprintf(CH2,sms_phonenumber);
0B3E0:  MOVLW  0A
0B3E2:  MOVWF  FEA
0B3E4:  MOVLW  81
0B3E6:  MOVWF  FE9
0B3E8:  CALL   6824
....................        
....................        fprintf(CH2,"\"");
0B3EC:  MOVLW  22
0B3EE:  MOVLB  D
0B3F0:  MOVWF  xCD
0B3F2:  MOVLB  0
0B3F4:  CALL   24E0
....................        putc('\n',CH2);
0B3F8:  MOVLW  0A
0B3FA:  MOVLB  D
0B3FC:  MOVWF  xCD
0B3FE:  MOVLB  0
0B400:  CALL   24E0
....................        delay_ms(50);
0B404:  MOVLW  32
0B406:  MOVLB  D
0B408:  MOVWF  xCC
0B40A:  MOVLB  0
0B40C:  CALL   0A28
....................       
....................       fprintf(CH2,SMS_Massage20);   
0B410:  MOVLW  0C
0B412:  MOVWF  FEA
0B414:  MOVLW  F0
0B416:  MOVWF  FE9
0B418:  CALL   6824
....................       putc('\n',CH2);
0B41C:  MOVLW  0A
0B41E:  MOVLB  D
0B420:  MOVWF  xCD
0B422:  MOVLB  0
0B424:  CALL   24E0
....................       putc(26,CH2);
0B428:  MOVLW  1A
0B42A:  MOVLB  D
0B42C:  MOVWF  xCD
0B42E:  MOVLB  0
0B430:  CALL   24E0
0B434:  MOVLB  D
....................      }
....................    }
0B436:  BRA    B4E4
....................    else if(FaultType.B20 == 0)
0B438:  BTFSC  x1E.3
0B43A:  BRA    B4E4
....................    {
....................       In2.B20 = 0x00;
0B43C:  BCF    x36.3
....................       Ack.B20 = 0;
0B43E:  BCF    x2E.3
....................       Output.B20 = 1;      //Off LED
0B440:  BSF    x16.3
....................       SendSMS.B20 =0;// Clear SMS
0B442:  BCF    x4A.3
.................... 
....................       if((OutputType.B20== 1 || OutputBoth.B20 == 0)&& inputflag ==0)      //If Buzzer or Both
0B444:  BTFSC  x22.3
0B446:  BRA    B44C
0B448:  BTFSC  x26.3
0B44A:  BRA    B466
0B44C:  MOVF   xBF,F
0B44E:  BNZ   B466
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0B450:  MOVLW  01
0B452:  MOVWF  xCB
0B454:  MOVLB  0
0B456:  CALL   684A
0B45A:  DECFSZ 01,W
0B45C:  BRA    B460
0B45E:  BRA    B464
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B460:  BCF    F89.4
0B462:  BCF    F92.4
0B464:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B20 == 0 || OutputBoth.B20 == 0)&& inputflag ==0)  //If Bell or Both
0B466:  BTFSS  x22.3
0B468:  BRA    B46E
0B46A:  BTFSC  x26.3
0B46C:  BRA    B48C
0B46E:  MOVF   xBF,F
0B470:  BNZ   B48C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0B472:  MOVLW  02
0B474:  MOVWF  xCB
0B476:  MOVLB  0
0B478:  CALL   684A
0B47C:  DECFSZ 01,W
0B47E:  BRA    B482
0B480:  BRA    B48A
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0B482:  BCF    F89.3
0B484:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B486:  BCF    F89.4
0B488:  BCF    F92.4
0B48A:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0B48C:  BTFSC  x34.0
0B48E:  BRA    B4E4
0B490:  BTFSC  x34.1
0B492:  BRA    B4E4
0B494:  BTFSC  x34.2
0B496:  BRA    B4E4
0B498:  BTFSC  x34.3
0B49A:  BRA    B4E4
0B49C:  BTFSC  x34.4
0B49E:  BRA    B4E4
0B4A0:  BTFSC  x34.5
0B4A2:  BRA    B4E4
0B4A4:  BTFSC  x34.6
0B4A6:  BRA    B4E4
0B4A8:  BTFSC  x34.7
0B4AA:  BRA    B4E4
0B4AC:  BTFSC  x35.0
0B4AE:  BRA    B4E4
0B4B0:  BTFSC  x35.1
0B4B2:  BRA    B4E4
0B4B4:  BTFSC  x35.2
0B4B6:  BRA    B4E4
0B4B8:  BTFSC  x35.3
0B4BA:  BRA    B4E4
0B4BC:  BTFSC  x35.4
0B4BE:  BRA    B4E4
0B4C0:  BTFSC  x35.5
0B4C2:  BRA    B4E4
0B4C4:  BTFSC  x35.6
0B4C6:  BRA    B4E4
0B4C8:  BTFSC  x35.7
0B4CA:  BRA    B4E4
0B4CC:  BTFSC  x36.0
0B4CE:  BRA    B4E4
0B4D0:  BTFSC  x36.1
0B4D2:  BRA    B4E4
0B4D4:  BTFSC  x36.2
0B4D6:  BRA    B4E4
0B4D8:  BTFSC  x36.3
0B4DA:  BRA    B4E4
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0B4DC:  BCF    F89.3
0B4DE:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B4E0:  BCF    F89.4
0B4E2:  BCF    F92.4
....................       }
....................    }
0B4E4:  MOVLB  0
0B4E6:  RETURN 0
....................    
....................    
....................  //}
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Send_Ouput(void)
.................... {
.................... 
....................    if(T_test == 0x00)
*
0B5E4:  MOVF   2F,F
0B5E6:  BTFSS  FD8.2
0B5E8:  BRA    BA84
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
0B5EA:  MOVLB  D
0B5EC:  BTFSS  x14.0
0B5EE:  BRA    B5F6
....................            {
....................              bit_clear(Green1_8,0); bit_clear(Red1_8,0);
0B5F0:  BCF    54.0
0B5F2:  BCF    50.0
....................            }
0B5F4:  BRA    B61E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
0B5F6:  BTFSS  x40.0
0B5F8:  BRA    B604
0B5FA:  BTFSC  x44.0
0B5FC:  BRA    B604
....................              {
....................                bit_set(Red1_8,0); bit_clear(Green1_8,0);
0B5FE:  BSF    50.0
0B600:  BCF    54.0
....................              }
0B602:  BRA    B61E
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
0B604:  BTFSC  x40.0
0B606:  BRA    B612
0B608:  BTFSS  x44.0
0B60A:  BRA    B612
....................              {
....................                bit_clear(Red1_8,0); bit_set(Green1_8,0); 
0B60C:  BCF    50.0
0B60E:  BSF    54.0
....................              }
0B610:  BRA    B61E
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
0B612:  BTFSS  x40.0
0B614:  BRA    B61E
0B616:  BTFSS  x44.0
0B618:  BRA    B61E
....................              {
....................                bit_set(Red1_8,0); bit_set(Green1_8,0) ; 
0B61A:  BSF    50.0
0B61C:  BSF    54.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
0B61E:  BTFSS  x14.1
0B620:  BRA    B628
....................            {
....................              bit_clear(Green1_8,1); bit_clear(Red1_8,1);
0B622:  BCF    54.1
0B624:  BCF    50.1
....................            }
0B626:  BRA    B650
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
0B628:  BTFSS  x40.1
0B62A:  BRA    B636
0B62C:  BTFSC  x44.1
0B62E:  BRA    B636
....................              {
....................                bit_set(Red1_8,1); bit_clear(Green1_8,1);
0B630:  BSF    50.1
0B632:  BCF    54.1
....................              }
0B634:  BRA    B650
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
0B636:  BTFSC  x40.1
0B638:  BRA    B644
0B63A:  BTFSS  x44.1
0B63C:  BRA    B644
....................              {
....................                bit_clear(Red1_8,1); bit_set(Green1_8,1); 
0B63E:  BCF    50.1
0B640:  BSF    54.1
....................              }
0B642:  BRA    B650
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
0B644:  BTFSS  x40.1
0B646:  BRA    B650
0B648:  BTFSS  x44.1
0B64A:  BRA    B650
....................              {
....................                bit_set(Red1_8,1); bit_set(Green1_8,1) ; 
0B64C:  BSF    50.1
0B64E:  BSF    54.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
0B650:  BTFSS  x14.2
0B652:  BRA    B65A
....................            {
....................              bit_clear(Green1_8,2); bit_clear(Red1_8,2);
0B654:  BCF    54.2
0B656:  BCF    50.2
....................            }
0B658:  BRA    B682
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
0B65A:  BTFSS  x40.2
0B65C:  BRA    B668
0B65E:  BTFSC  x44.2
0B660:  BRA    B668
....................              {
....................                bit_set(Red1_8,2); bit_clear(Green1_8,2);
0B662:  BSF    50.2
0B664:  BCF    54.2
....................              }
0B666:  BRA    B682
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
0B668:  BTFSC  x40.2
0B66A:  BRA    B676
0B66C:  BTFSS  x44.2
0B66E:  BRA    B676
....................              {
....................                bit_clear(Red1_8,2); bit_set(Green1_8,2); 
0B670:  BCF    50.2
0B672:  BSF    54.2
....................              }
0B674:  BRA    B682
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
0B676:  BTFSS  x40.2
0B678:  BRA    B682
0B67A:  BTFSS  x44.2
0B67C:  BRA    B682
....................              {
....................                bit_set(Red1_8,2); bit_set(Green1_8,2) ; 
0B67E:  BSF    50.2
0B680:  BSF    54.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
0B682:  BTFSS  x14.3
0B684:  BRA    B68C
....................            {
....................              bit_clear(Green1_8,3); bit_clear(Red1_8,3);
0B686:  BCF    54.3
0B688:  BCF    50.3
....................            }
0B68A:  BRA    B6B4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
0B68C:  BTFSS  x40.3
0B68E:  BRA    B69A
0B690:  BTFSC  x44.3
0B692:  BRA    B69A
....................              {
....................                bit_set(Red1_8,3); bit_clear(Green1_8,3);
0B694:  BSF    50.3
0B696:  BCF    54.3
....................              }
0B698:  BRA    B6B4
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
0B69A:  BTFSC  x40.3
0B69C:  BRA    B6A8
0B69E:  BTFSS  x44.3
0B6A0:  BRA    B6A8
....................              {
....................                bit_clear(Red1_8,3); bit_set(Green1_8,3); 
0B6A2:  BCF    50.3
0B6A4:  BSF    54.3
....................              }
0B6A6:  BRA    B6B4
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
0B6A8:  BTFSS  x40.3
0B6AA:  BRA    B6B4
0B6AC:  BTFSS  x44.3
0B6AE:  BRA    B6B4
....................              {
....................                bit_set(Red1_8,3); bit_set(Green1_8,3) ; 
0B6B0:  BSF    50.3
0B6B2:  BSF    54.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
0B6B4:  BTFSS  x14.4
0B6B6:  BRA    B6BE
....................            {
....................              bit_clear(Green1_8,4); bit_clear(Red1_8,4);
0B6B8:  BCF    54.4
0B6BA:  BCF    50.4
....................            }
0B6BC:  BRA    B6E6
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
0B6BE:  BTFSS  x40.4
0B6C0:  BRA    B6CC
0B6C2:  BTFSC  x44.4
0B6C4:  BRA    B6CC
....................              {
....................                bit_set(Red1_8,4); bit_clear(Green1_8,4);
0B6C6:  BSF    50.4
0B6C8:  BCF    54.4
....................              }
0B6CA:  BRA    B6E6
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
0B6CC:  BTFSC  x40.4
0B6CE:  BRA    B6DA
0B6D0:  BTFSS  x44.4
0B6D2:  BRA    B6DA
....................              {
....................                bit_clear(Red1_8,4); bit_set(Green1_8,4); 
0B6D4:  BCF    50.4
0B6D6:  BSF    54.4
....................              }
0B6D8:  BRA    B6E6
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
0B6DA:  BTFSS  x40.4
0B6DC:  BRA    B6E6
0B6DE:  BTFSS  x44.4
0B6E0:  BRA    B6E6
....................              {
....................                bit_set(Red1_8,4); bit_set(Green1_8,4) ; 
0B6E2:  BSF    50.4
0B6E4:  BSF    54.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
0B6E6:  BTFSS  x14.5
0B6E8:  BRA    B6F0
....................            {
....................              bit_clear(Green1_8,5); bit_clear(Red1_8,5);
0B6EA:  BCF    54.5
0B6EC:  BCF    50.5
....................            }
0B6EE:  BRA    B718
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
0B6F0:  BTFSS  x40.5
0B6F2:  BRA    B6FE
0B6F4:  BTFSC  x44.5
0B6F6:  BRA    B6FE
....................              {
....................                bit_set(Red1_8,5); bit_clear(Green1_8,5);
0B6F8:  BSF    50.5
0B6FA:  BCF    54.5
....................              }
0B6FC:  BRA    B718
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
0B6FE:  BTFSC  x40.5
0B700:  BRA    B70C
0B702:  BTFSS  x44.5
0B704:  BRA    B70C
....................              {
....................                bit_clear(Red1_8,5); bit_set(Green1_8,5); 
0B706:  BCF    50.5
0B708:  BSF    54.5
....................              }
0B70A:  BRA    B718
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
0B70C:  BTFSS  x40.5
0B70E:  BRA    B718
0B710:  BTFSS  x44.5
0B712:  BRA    B718
....................              {
....................                bit_set(Red1_8,5); bit_set(Green1_8,5) ; 
0B714:  BSF    50.5
0B716:  BSF    54.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
0B718:  BTFSS  x14.6
0B71A:  BRA    B722
....................            {
....................              bit_clear(Green1_8,6); bit_clear(Red1_8,6);
0B71C:  BCF    54.6
0B71E:  BCF    50.6
....................            }
0B720:  BRA    B74A
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
0B722:  BTFSS  x40.6
0B724:  BRA    B730
0B726:  BTFSC  x44.6
0B728:  BRA    B730
....................              {
....................                bit_set(Red1_8,6); bit_clear(Green1_8,6);
0B72A:  BSF    50.6
0B72C:  BCF    54.6
....................              }
0B72E:  BRA    B74A
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
0B730:  BTFSC  x40.6
0B732:  BRA    B73E
0B734:  BTFSS  x44.6
0B736:  BRA    B73E
....................              {
....................                bit_clear(Red1_8,6); bit_set(Green1_8,6); 
0B738:  BCF    50.6
0B73A:  BSF    54.6
....................              }
0B73C:  BRA    B74A
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
0B73E:  BTFSS  x40.6
0B740:  BRA    B74A
0B742:  BTFSS  x44.6
0B744:  BRA    B74A
....................              {
....................                bit_set(Red1_8,6); bit_set(Green1_8,6) ;                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
0B746:  BSF    50.6
0B748:  BSF    54.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
0B74A:  BTFSS  x14.7
0B74C:  BRA    B754
....................            {
....................              bit_clear(Green1_8,7); bit_clear(Red1_8,7);
0B74E:  BCF    54.7
0B750:  BCF    50.7
....................            }
0B752:  BRA    B77C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
0B754:  BTFSS  x40.7
0B756:  BRA    B762
0B758:  BTFSC  x44.7
0B75A:  BRA    B762
....................              {
....................                bit_set(Red1_8,7); bit_clear(Green1_8,7);
0B75C:  BSF    50.7
0B75E:  BCF    54.7
....................              }
0B760:  BRA    B77C
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
0B762:  BTFSC  x40.7
0B764:  BRA    B770
0B766:  BTFSS  x44.7
0B768:  BRA    B770
....................              {
....................                bit_clear(Red1_8,7); bit_set(Green1_8,7); 
0B76A:  BCF    50.7
0B76C:  BSF    54.7
....................              }
0B76E:  BRA    B77C
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
0B770:  BTFSS  x40.7
0B772:  BRA    B77C
0B774:  BTFSS  x44.7
0B776:  BRA    B77C
....................              {
....................                bit_set(Red1_8,7); bit_set(Green1_8,7) ; 
0B778:  BSF    50.7
0B77A:  BSF    54.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
0B77C:  BTFSS  x15.0
0B77E:  BRA    B786
....................            {
....................              bit_clear(Green9_10,0); bit_clear(Red9_10,0);
0B780:  BCF    55.0
0B782:  BCF    51.0
....................            }
0B784:  BRA    B7AE
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
0B786:  BTFSS  x41.0
0B788:  BRA    B794
0B78A:  BTFSC  x45.0
0B78C:  BRA    B794
....................              {
....................                bit_set(Red9_10,0); bit_clear(Green9_10,0);
0B78E:  BSF    51.0
0B790:  BCF    55.0
....................              }
0B792:  BRA    B7AE
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
0B794:  BTFSC  x41.0
0B796:  BRA    B7A2
0B798:  BTFSS  x45.0
0B79A:  BRA    B7A2
....................              {
....................                bit_clear(Red9_10,0); bit_set(Green9_10,0); 
0B79C:  BCF    51.0
0B79E:  BSF    55.0
....................              }
0B7A0:  BRA    B7AE
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
0B7A2:  BTFSS  x41.0
0B7A4:  BRA    B7AE
0B7A6:  BTFSS  x45.0
0B7A8:  BRA    B7AE
....................              {
....................                bit_set(Red9_10,0); bit_set(Green9_10,0) ; 
0B7AA:  BSF    51.0
0B7AC:  BSF    55.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
0B7AE:  BTFSS  x15.1
0B7B0:  BRA    B7B8
....................            {
....................              bit_clear(Green9_10,1); bit_clear(Red9_10,1);
0B7B2:  BCF    55.1
0B7B4:  BCF    51.1
....................            }
0B7B6:  BRA    B7E0
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
0B7B8:  BTFSS  x41.1
0B7BA:  BRA    B7C6
0B7BC:  BTFSC  x45.1
0B7BE:  BRA    B7C6
....................              {
....................                bit_set(Red9_10,1); bit_clear(Green9_10,1);
0B7C0:  BSF    51.1
0B7C2:  BCF    55.1
....................              }
0B7C4:  BRA    B7E0
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
0B7C6:  BTFSC  x41.1
0B7C8:  BRA    B7D4
0B7CA:  BTFSS  x45.1
0B7CC:  BRA    B7D4
....................              {
....................                bit_clear(Red9_10,1); bit_set(Green9_10,1); 
0B7CE:  BCF    51.1
0B7D0:  BSF    55.1
....................              }
0B7D2:  BRA    B7E0
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
0B7D4:  BTFSS  x41.1
0B7D6:  BRA    B7E0
0B7D8:  BTFSS  x45.1
0B7DA:  BRA    B7E0
....................              {
....................                bit_set(Red9_10,1); bit_set(Green9_10,1) ; 
0B7DC:  BSF    51.1
0B7DE:  BSF    55.1
....................              }  
....................            }
....................            
....................        // }
....................         
....................        // if(NoOfPoint >= 20)
....................       //{   
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
0B7E0:  BTFSS  x15.2
0B7E2:  BRA    B7EA
....................            {
....................              bit_clear(Green11_18,0); bit_clear(Red11_18,0);
0B7E4:  BCF    56.0
0B7E6:  BCF    52.0
....................            }
0B7E8:  BRA    B812
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
0B7EA:  BTFSS  x41.2
0B7EC:  BRA    B7F8
0B7EE:  BTFSC  x45.2
0B7F0:  BRA    B7F8
....................              {
....................                bit_set(Red11_18,0); bit_clear(Green11_18,0);
0B7F2:  BSF    52.0
0B7F4:  BCF    56.0
....................              }
0B7F6:  BRA    B812
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
0B7F8:  BTFSC  x41.2
0B7FA:  BRA    B806
0B7FC:  BTFSS  x45.2
0B7FE:  BRA    B806
....................              {
....................                bit_clear(Red11_18,0); bit_set(Green11_18,0); 
0B800:  BCF    52.0
0B802:  BSF    56.0
....................              }
0B804:  BRA    B812
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
0B806:  BTFSS  x41.2
0B808:  BRA    B812
0B80A:  BTFSS  x45.2
0B80C:  BRA    B812
....................              {
....................                bit_set(Red11_18,0); bit_set(Green11_18,0) ; 
0B80E:  BSF    52.0
0B810:  BSF    56.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
0B812:  BTFSS  x15.2
0B814:  BRA    B81C
....................            {
....................              bit_clear(Green11_18,0); bit_clear(Red11_18,0);
0B816:  BCF    56.0
0B818:  BCF    52.0
....................            }
0B81A:  BRA    B844
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
0B81C:  BTFSS  x41.2
0B81E:  BRA    B82A
0B820:  BTFSC  x45.2
0B822:  BRA    B82A
....................              {
....................                bit_set(Red11_18,0); bit_clear(Green11_18,0);
0B824:  BSF    52.0
0B826:  BCF    56.0
....................              }
0B828:  BRA    B844
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
0B82A:  BTFSC  x41.2
0B82C:  BRA    B838
0B82E:  BTFSS  x45.2
0B830:  BRA    B838
....................              {
....................                bit_clear(Red11_18,0); bit_set(Green11_18,0); 
0B832:  BCF    52.0
0B834:  BSF    56.0
....................              }
0B836:  BRA    B844
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
0B838:  BTFSS  x41.2
0B83A:  BRA    B844
0B83C:  BTFSS  x45.2
0B83E:  BRA    B844
....................              {
....................                bit_set(Red11_18,0); bit_set(Green11_18,0) ; 
0B840:  BSF    52.0
0B842:  BSF    56.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B12)//++++++++++++B12+++++++++++++++++++++
0B844:  BTFSS  x15.3
0B846:  BRA    B84E
....................            {
....................              bit_clear(Green11_18,1); bit_clear(Red11_18,1);
0B848:  BCF    56.1
0B84A:  BCF    52.1
....................            }
0B84C:  BRA    B876
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B12 )&&(GREEN_Colour.B12 ==0 ))//Red
0B84E:  BTFSS  x41.3
0B850:  BRA    B85C
0B852:  BTFSC  x45.3
0B854:  BRA    B85C
....................              {
....................                bit_set(Red11_18,1); bit_clear(Green11_18,1);
0B856:  BSF    52.1
0B858:  BCF    56.1
....................              }
0B85A:  BRA    B876
....................              else if((RED_Colour.B12==0 )&&(GREEN_Colour.B12))//Green
0B85C:  BTFSC  x41.3
0B85E:  BRA    B86A
0B860:  BTFSS  x45.3
0B862:  BRA    B86A
....................              {
....................                bit_clear(Red11_18,1); bit_set(Green11_18,1); 
0B864:  BCF    52.1
0B866:  BSF    56.1
....................              }
0B868:  BRA    B876
....................              else if((RED_Colour.B12)&&(GREEN_Colour.B12))//Ambian
0B86A:  BTFSS  x41.3
0B86C:  BRA    B876
0B86E:  BTFSS  x45.3
0B870:  BRA    B876
....................              {
....................                bit_set(Red11_18,1); bit_set(Green11_18,1) ; 
0B872:  BSF    52.1
0B874:  BSF    56.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B13)//++++++++++++B13+++++++++++++++++++++
0B876:  BTFSS  x15.4
0B878:  BRA    B880
....................            {
....................              bit_clear(Green11_18,2); bit_clear(Red11_18,2);
0B87A:  BCF    56.2
0B87C:  BCF    52.2
....................            }
0B87E:  BRA    B8A8
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B13 )&&(GREEN_Colour.B13 ==0 ))//Red
0B880:  BTFSS  x41.4
0B882:  BRA    B88E
0B884:  BTFSC  x45.4
0B886:  BRA    B88E
....................              {
....................                bit_set(Red11_18,2); bit_clear(Green11_18,2);
0B888:  BSF    52.2
0B88A:  BCF    56.2
....................              }
0B88C:  BRA    B8A8
....................              else if((RED_Colour.B13==0 )&&(GREEN_Colour.B13))//Green
0B88E:  BTFSC  x41.4
0B890:  BRA    B89C
0B892:  BTFSS  x45.4
0B894:  BRA    B89C
....................              {
....................                bit_clear(Red11_18,2); bit_set(Green11_18,2); 
0B896:  BCF    52.2
0B898:  BSF    56.2
....................              }
0B89A:  BRA    B8A8
....................              else if((RED_Colour.B13)&&(GREEN_Colour.B13))//Ambian
0B89C:  BTFSS  x41.4
0B89E:  BRA    B8A8
0B8A0:  BTFSS  x45.4
0B8A2:  BRA    B8A8
....................              {
....................                bit_set(Red11_18,2); bit_set(Green11_18,2) ; 
0B8A4:  BSF    52.2
0B8A6:  BSF    56.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B14)//++++++++++++B14+++++++++++++++++++++
0B8A8:  BTFSS  x15.5
0B8AA:  BRA    B8B2
....................            {
....................              bit_clear(Green11_18,3); bit_clear(Red11_18,3);
0B8AC:  BCF    56.3
0B8AE:  BCF    52.3
....................            }
0B8B0:  BRA    B8DA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B14 )&&(GREEN_Colour.B14 ==0 ))//Red
0B8B2:  BTFSS  x41.5
0B8B4:  BRA    B8C0
0B8B6:  BTFSC  x45.5
0B8B8:  BRA    B8C0
....................              {
....................                bit_set(Red11_18,3); bit_clear(Green11_18,3);
0B8BA:  BSF    52.3
0B8BC:  BCF    56.3
....................              }
0B8BE:  BRA    B8DA
....................              else if((RED_Colour.B14==0 )&&(GREEN_Colour.B14))//Green
0B8C0:  BTFSC  x41.5
0B8C2:  BRA    B8CE
0B8C4:  BTFSS  x45.5
0B8C6:  BRA    B8CE
....................              {
....................                bit_clear(Red11_18,3); bit_set(Green11_18,3); 
0B8C8:  BCF    52.3
0B8CA:  BSF    56.3
....................              }
0B8CC:  BRA    B8DA
....................              else if((RED_Colour.B14)&&(GREEN_Colour.B14))//Ambian
0B8CE:  BTFSS  x41.5
0B8D0:  BRA    B8DA
0B8D2:  BTFSS  x45.5
0B8D4:  BRA    B8DA
....................              {
....................                bit_set(Red11_18,3); bit_set(Green11_18,3) ; 
0B8D6:  BSF    52.3
0B8D8:  BSF    56.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B15)//++++++++++++B15+++++++++++++++++++++
0B8DA:  BTFSS  x15.6
0B8DC:  BRA    B8E4
....................            {
....................              bit_clear(Green11_18,4); bit_clear(Red11_18,4);
0B8DE:  BCF    56.4
0B8E0:  BCF    52.4
....................            }
0B8E2:  BRA    B90C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B15 )&&(GREEN_Colour.B15 ==0 ))//Red
0B8E4:  BTFSS  x41.6
0B8E6:  BRA    B8F2
0B8E8:  BTFSC  x45.6
0B8EA:  BRA    B8F2
....................              {
....................                bit_set(Red11_18,4); bit_clear(Green11_18,4);
0B8EC:  BSF    52.4
0B8EE:  BCF    56.4
....................              }
0B8F0:  BRA    B90C
....................              else if((RED_Colour.B15==0 )&&(GREEN_Colour.B15))//Green
0B8F2:  BTFSC  x41.6
0B8F4:  BRA    B900
0B8F6:  BTFSS  x45.6
0B8F8:  BRA    B900
....................              {
....................                bit_clear(Red11_18,4); bit_set(Green11_18,4); 
0B8FA:  BCF    52.4
0B8FC:  BSF    56.4
....................              }
0B8FE:  BRA    B90C
....................              else if((RED_Colour.B15)&&(GREEN_Colour.B15))//Ambian
0B900:  BTFSS  x41.6
0B902:  BRA    B90C
0B904:  BTFSS  x45.6
0B906:  BRA    B90C
....................              {
....................                bit_set(Red11_18,4); bit_set(Green11_18,4) ; 
0B908:  BSF    52.4
0B90A:  BSF    56.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B16)//++++++++++++B16+++++++++++++++++++++
0B90C:  BTFSS  x15.7
0B90E:  BRA    B916
....................            {
....................              bit_clear(Green11_18,5); bit_clear(Red11_18,5);
0B910:  BCF    56.5
0B912:  BCF    52.5
....................            }
0B914:  BRA    B93E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B16 )&&(GREEN_Colour.B16 ==0 ))//Red
0B916:  BTFSS  x41.7
0B918:  BRA    B924
0B91A:  BTFSC  x45.7
0B91C:  BRA    B924
....................              {
....................                bit_set(Red11_18,5); bit_clear(Green11_18,5);
0B91E:  BSF    52.5
0B920:  BCF    56.5
....................              }
0B922:  BRA    B93E
....................              else if((RED_Colour.B16==0 )&&(GREEN_Colour.B16))//Green
0B924:  BTFSC  x41.7
0B926:  BRA    B932
0B928:  BTFSS  x45.7
0B92A:  BRA    B932
....................              {
....................                bit_clear(Red11_18,5); bit_set(Green11_18,5); 
0B92C:  BCF    52.5
0B92E:  BSF    56.5
....................              }
0B930:  BRA    B93E
....................              else if((RED_Colour.B16)&&(GREEN_Colour.B16))//Ambian
0B932:  BTFSS  x41.7
0B934:  BRA    B93E
0B936:  BTFSS  x45.7
0B938:  BRA    B93E
....................              {
....................                bit_set(Red11_18,5); bit_set(Green11_18,5) ; 
0B93A:  BSF    52.5
0B93C:  BSF    56.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B17)//++++++++++++B17+++++++++++++++++++++
0B93E:  BTFSS  x16.0
0B940:  BRA    B948
....................            {
....................              bit_clear(Green11_18,6); bit_clear(Red11_18,6);
0B942:  BCF    56.6
0B944:  BCF    52.6
....................            }
0B946:  BRA    B970
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B17 )&&(GREEN_Colour.B17 ==0 ))//Red
0B948:  BTFSS  x42.0
0B94A:  BRA    B956
0B94C:  BTFSC  x46.0
0B94E:  BRA    B956
....................              {
....................                bit_set(Red11_18,6); bit_clear(Green11_18,6);
0B950:  BSF    52.6
0B952:  BCF    56.6
....................              }
0B954:  BRA    B970
....................              else if((RED_Colour.B17==0 )&&(GREEN_Colour.B17))//Green
0B956:  BTFSC  x42.0
0B958:  BRA    B964
0B95A:  BTFSS  x46.0
0B95C:  BRA    B964
....................              {
....................                bit_clear(Red11_18,6); bit_set(Green11_18,6); 
0B95E:  BCF    52.6
0B960:  BSF    56.6
....................              }
0B962:  BRA    B970
....................              else if((RED_Colour.B17)&&(GREEN_Colour.B17))//Ambian
0B964:  BTFSS  x42.0
0B966:  BRA    B970
0B968:  BTFSS  x46.0
0B96A:  BRA    B970
....................              {
....................                bit_set(Red11_18,6); bit_set(Green11_18,6) ; 
0B96C:  BSF    52.6
0B96E:  BSF    56.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B18)//++++++++++++B18+++++++++++++++++++++
0B970:  BTFSS  x16.1
0B972:  BRA    B97A
....................            {
....................              bit_clear(Green11_18,7); bit_clear(Red11_18,7);
0B974:  BCF    56.7
0B976:  BCF    52.7
....................            }
0B978:  BRA    B9A2
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B18 )&&(GREEN_Colour.B18 ==0 ))//Red
0B97A:  BTFSS  x42.1
0B97C:  BRA    B988
0B97E:  BTFSC  x46.1
0B980:  BRA    B988
....................              {
....................                bit_set(Red11_18,7); bit_clear(Green11_18,7);
0B982:  BSF    52.7
0B984:  BCF    56.7
....................              }
0B986:  BRA    B9A2
....................              else if((RED_Colour.B18==0 )&&(GREEN_Colour.B18))//Green
0B988:  BTFSC  x42.1
0B98A:  BRA    B996
0B98C:  BTFSS  x46.1
0B98E:  BRA    B996
....................              {
....................                bit_clear(Red11_18,7); bit_set(Green11_18,7); 
0B990:  BCF    52.7
0B992:  BSF    56.7
....................              }
0B994:  BRA    B9A2
....................              else if((RED_Colour.B18)&&(GREEN_Colour.B18))//Ambian
0B996:  BTFSS  x42.1
0B998:  BRA    B9A2
0B99A:  BTFSS  x46.1
0B99C:  BRA    B9A2
....................              {
....................                bit_set(Red11_18,7); bit_set(Green11_18,7) ; 
0B99E:  BSF    52.7
0B9A0:  BSF    56.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B19)//++++++++++++B19+++++++++++++++++++++
0B9A2:  BTFSS  x16.2
0B9A4:  BRA    B9AC
....................            {
....................              bit_clear(Green19_20,0); bit_clear(Red19_20,0);
0B9A6:  BCF    57.0
0B9A8:  BCF    53.0
....................            }
0B9AA:  BRA    B9D4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B19 )&&(GREEN_Colour.B19 ==0 ))//Red
0B9AC:  BTFSS  x42.2
0B9AE:  BRA    B9BA
0B9B0:  BTFSC  x46.2
0B9B2:  BRA    B9BA
....................              {
....................                bit_set(Red19_20,0); bit_clear(Green19_20,0);
0B9B4:  BSF    53.0
0B9B6:  BCF    57.0
....................              }
0B9B8:  BRA    B9D4
....................              else if((RED_Colour.B19==0 )&&(GREEN_Colour.B19))//Green
0B9BA:  BTFSC  x42.2
0B9BC:  BRA    B9C8
0B9BE:  BTFSS  x46.2
0B9C0:  BRA    B9C8
....................              {
....................                bit_clear(Red19_20,0); bit_set(Green19_20,0); 
0B9C2:  BCF    53.0
0B9C4:  BSF    57.0
....................              }
0B9C6:  BRA    B9D4
....................              else if((RED_Colour.B19)&&(GREEN_Colour.B19))//Ambian
0B9C8:  BTFSS  x42.2
0B9CA:  BRA    B9D4
0B9CC:  BTFSS  x46.2
0B9CE:  BRA    B9D4
....................              {
....................                bit_set(Red19_20,0); bit_set(Green19_20,0) ; 
0B9D0:  BSF    53.0
0B9D2:  BSF    57.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B20)//++++++++++++B20+++++++++++++++++++++
0B9D4:  BTFSS  x16.3
0B9D6:  BRA    B9DE
....................            {
....................              bit_clear(Green19_20,1); bit_clear(Red19_20,1);
0B9D8:  BCF    57.1
0B9DA:  BCF    53.1
....................            }
0B9DC:  BRA    BA06
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B20 )&&(GREEN_Colour.B20 ==0 ))//Red
0B9DE:  BTFSS  x42.3
0B9E0:  BRA    B9EC
0B9E2:  BTFSC  x46.3
0B9E4:  BRA    B9EC
....................              {
....................                bit_set(Red19_20,1); bit_clear(Green19_20,1);
0B9E6:  BSF    53.1
0B9E8:  BCF    57.1
....................              }
0B9EA:  BRA    BA06
....................              else if((RED_Colour.B20==0 )&&(GREEN_Colour.B20))//Green
0B9EC:  BTFSC  x42.3
0B9EE:  BRA    B9FA
0B9F0:  BTFSS  x46.3
0B9F2:  BRA    B9FA
....................              {
....................                bit_clear(Red19_20,1); bit_set(Green19_20,1); 
0B9F4:  BCF    53.1
0B9F6:  BSF    57.1
....................              }
0B9F8:  BRA    BA06
....................              else if((RED_Colour.B20)&&(GREEN_Colour.B20))//Ambian
0B9FA:  BTFSS  x42.3
0B9FC:  BRA    BA06
0B9FE:  BTFSS  x46.3
0BA00:  BRA    BA06
....................              {
....................                bit_set(Red19_20,1); bit_set(Green19_20,1) ; 
0BA02:  BSF    53.1
0BA04:  BSF    57.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................          
....................       //} 
....................           
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_8);
0BA06:  MOVLW  04
0BA08:  MOVWF  xCB
0BA0A:  MOVFF  50,DCC
0BA0E:  MOVLB  0
0BA10:  CALL   243C
....................            IO_OUTPUT_B(IO_DEVICE_2, Red9_10);
0BA14:  MOVLW  04
0BA16:  MOVLB  D
0BA18:  MOVWF  xCB
0BA1A:  MOVFF  51,DCC
0BA1E:  MOVLB  0
0BA20:  CALL   2452
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_8);
0BA24:  MOVLW  06
0BA26:  MOVLB  D
0BA28:  MOVWF  xCB
0BA2A:  MOVFF  54,DCC
0BA2E:  MOVLB  0
0BA30:  CALL   243C
....................            IO_OUTPUT_B(IO_DEVICE_3, Green9_10);
0BA34:  MOVLW  06
0BA36:  MOVLB  D
0BA38:  MOVWF  xCB
0BA3A:  MOVFF  55,DCC
0BA3E:  MOVLB  0
0BA40:  CALL   2452
....................            
....................            IO_OUTPUT_A(IO_DEVICE_5, Red11_18);  
0BA44:  MOVLW  0A
0BA46:  MOVLB  D
0BA48:  MOVWF  xCB
0BA4A:  MOVFF  52,DCC
0BA4E:  MOVLB  0
0BA50:  CALL   243C
....................            IO_OUTPUT_B(IO_DEVICE_5, Red19_20);
0BA54:  MOVLW  0A
0BA56:  MOVLB  D
0BA58:  MOVWF  xCB
0BA5A:  MOVFF  53,DCC
0BA5E:  MOVLB  0
0BA60:  CALL   2452
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_4, Green11_18);
0BA64:  MOVLW  08
0BA66:  MOVLB  D
0BA68:  MOVWF  xCB
0BA6A:  MOVFF  56,DCC
0BA6E:  MOVLB  0
0BA70:  CALL   243C
....................            IO_OUTPUT_B(IO_DEVICE_4, Green19_20);
0BA74:  MOVLW  08
0BA76:  MOVLB  D
0BA78:  MOVWF  xCB
0BA7A:  MOVFF  57,DCC
0BA7E:  MOVLB  0
0BA80:  CALL   2452
....................            
....................                                 
....................            //IO_OUTPUT_A(IO_DEVICE_4, Red1_8); //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_4, Red9_10); //jj test
....................            
....................            //IO_OUTPUT_A(IO_DEVICE_5, Green1_8);  //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_5, Green9_10); //jj test
....................                                            
....................            
....................    }
0BA84:  GOTO   C4B2 (RETURN)
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    if(NoOfPoint >= 10)
*
06768:  MOVF   x63,W
0676A:  SUBLW  09
0676C:  BC    67AE
....................    {
....................       Inputt.B1 = ~InputType.B1;
0676E:  MOVLB  D
06770:  BCF    x10.0
06772:  BTFSS  x18.0
06774:  BSF    x10.0
....................       Inputt.B2 = ~InputType.B2;
06776:  BCF    x10.1
06778:  BTFSS  x18.1
0677A:  BSF    x10.1
....................       Inputt.B3 = ~InputType.B3;
0677C:  BCF    x10.2
0677E:  BTFSS  x18.2
06780:  BSF    x10.2
....................       Inputt.B4 = ~InputType.B4;
06782:  BCF    x10.3
06784:  BTFSS  x18.3
06786:  BSF    x10.3
....................       Inputt.B5 = ~InputType.B5;
06788:  BCF    x10.4
0678A:  BTFSS  x18.4
0678C:  BSF    x10.4
....................       Inputt.B6 = ~InputType.B6;
0678E:  BCF    x10.5
06790:  BTFSS  x18.5
06792:  BSF    x10.5
....................       Inputt.B7 = ~InputType.B7;
06794:  BCF    x10.6
06796:  BTFSS  x18.6
06798:  BSF    x10.6
....................       Inputt.B8 = ~InputType.B8;
0679A:  BCF    x10.7
0679C:  BTFSS  x18.7
0679E:  BSF    x10.7
....................       Inputt.B9 = ~InputType.B9;
067A0:  BCF    x11.0
067A2:  BTFSS  x19.0
067A4:  BSF    x11.0
....................       Inputt.B10 = ~InputType.B10;
067A6:  BCF    x11.1
067A8:  BTFSS  x19.1
067AA:  BSF    x11.1
067AC:  MOVLB  0
....................    }
....................    if(NoOfPoint >= 20)
067AE:  MOVF   x63,W
067B0:  SUBLW  13
067B2:  BC    67F4
....................    {
....................       Inputt.B11 = ~InputType.B11;
067B4:  MOVLB  D
067B6:  BCF    x11.2
067B8:  BTFSS  x19.2
067BA:  BSF    x11.2
....................       Inputt.B12 = ~InputType.B12;
067BC:  BCF    x11.3
067BE:  BTFSS  x19.3
067C0:  BSF    x11.3
....................       Inputt.B13 = ~InputType.B13;
067C2:  BCF    x11.4
067C4:  BTFSS  x19.4
067C6:  BSF    x11.4
....................       Inputt.B14 = ~InputType.B14;
067C8:  BCF    x11.5
067CA:  BTFSS  x19.5
067CC:  BSF    x11.5
....................       Inputt.B15 = ~InputType.B15;
067CE:  BCF    x11.6
067D0:  BTFSS  x19.6
067D2:  BSF    x11.6
....................       Inputt.B16 = ~InputType.B16;
067D4:  BCF    x11.7
067D6:  BTFSS  x19.7
067D8:  BSF    x11.7
....................       Inputt.B17 = ~InputType.B11;
067DA:  BCF    x12.0
067DC:  BTFSS  x19.2
067DE:  BSF    x12.0
....................       Inputt.B18 = ~InputType.B12;
067E0:  BCF    x12.1
067E2:  BTFSS  x19.3
067E4:  BSF    x12.1
....................       Inputt.B19 = ~InputType.B13;
067E6:  BCF    x12.2
067E8:  BTFSS  x19.4
067EA:  BSF    x12.2
....................       Inputt.B20 = ~InputType.B14;
067EC:  BCF    x12.3
067EE:  BTFSS  x19.5
067F0:  BSF    x12.3
067F2:  MOVLB  0
....................    }
....................       
.................... 
....................    Ack.B1 = 0;
067F4:  MOVLB  D
067F6:  BCF    x2C.0
....................    Ack.B2 = 0;
067F8:  BCF    x2C.1
....................    Ack.B3 = 0;
067FA:  BCF    x2C.2
....................    Ack.B4 = 0;
067FC:  BCF    x2C.3
....................    Ack.B5 = 0;
067FE:  BCF    x2C.4
....................    Ack.B6 = 0;
06800:  BCF    x2C.5
....................    Ack.B7 = 0;
06802:  BCF    x2C.6
....................    Ack.B8 = 0;
06804:  BCF    x2C.7
....................    Ack.B9 = 0;
06806:  BCF    x2D.0
....................    Ack.B10 = 0;
06808:  BCF    x2D.1
....................    Ack.B11 = 0;
0680A:  BCF    x2D.2
....................    Ack.B12 = 0;
0680C:  BCF    x2D.3
....................    Ack.B13 = 0;
0680E:  BCF    x2D.4
....................    Ack.B14 = 0;
06810:  BCF    x2D.5
....................    Ack.B15 = 0;
06812:  BCF    x2D.6
....................    Ack.B16 = 0;
06814:  BCF    x2D.7
....................    Ack.B17 = 0;
06816:  BCF    x2E.0
....................    Ack.B18 = 0;
06818:  BCF    x2E.1
....................    Ack.B19 = 0;
0681A:  BCF    x2E.2
....................    Ack.B20 = 0;  
0681C:  BCF    x2E.3
0681E:  MOVLB  0
06820:  GOTO   B5BC (RETURN)
....................    
....................    // Debug  
....................     
.................... }
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
0B4E8:  MOVFF  32,DC3
....................    output_temp[1] = output9_16;
0B4EC:  MOVFF  33,DC4
.................... 
.................... 
....................        if((Input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
0B4F0:  BSF    F94.2
0B4F2:  BTFSC  F82.2
0B4F4:  BRA    B4FA
0B4F6:  BTFSS  1A.6
0B4F8:  BRA    B4FE
0B4FA:  BTFSS  1A.4
0B4FC:  BRA    B50A
0B4FE:  MOVLW  32
0B500:  MOVLB  D
0B502:  MOVWF  xCC
0B504:  MOVLB  0
0B506:  CALL   0A28
....................        if((Input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
0B50A:  BSF    F94.2
0B50C:  BTFSC  F82.2
0B50E:  BRA    B514
0B510:  BTFSS  1A.6
0B512:  BRA    B518
0B514:  BTFSS  1A.4
0B516:  BRA    B5A4
....................        {
....................            if((Input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
0B518:  BSF    F94.2
0B51A:  BTFSC  F82.2
0B51C:  BRA    B522
0B51E:  BTFSS  1A.6
0B520:  BRA    B526
0B522:  BTFSS  1A.4
0B524:  BRA    B5A2
....................            {
....................              restart_wdt();
0B526:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
0B528:  MOVF   2F,F
0B52A:  BNZ   B530
0B52C:  MOVLW  06
0B52E:  MOVWF  2F
....................               Test = 1;
0B530:  BSF    1A.6
....................               //if(NoOfPoint >= 16)
....................              // {
....................              
....................                  IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
0B532:  MOVLW  04
0B534:  MOVLB  D
0B536:  MOVWF  xCB
0B538:  SETF   xCC
0B53A:  MOVLB  0
0B53C:  CALL   243C
....................                  IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
0B540:  MOVLW  04
0B542:  MOVLB  D
0B544:  MOVWF  xCB
0B546:  SETF   xCC
0B548:  MOVLB  0
0B54A:  CALL   2452
....................                             
....................                  IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
0B54E:  MOVLW  06
0B550:  MOVLB  D
0B552:  MOVWF  xCB
0B554:  SETF   xCC
0B556:  MOVLB  0
0B558:  CALL   243C
....................                  IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
0B55C:  MOVLW  06
0B55E:  MOVLB  D
0B560:  MOVWF  xCB
0B562:  SETF   xCC
0B564:  MOVLB  0
0B566:  CALL   2452
....................                  
....................                  IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
0B56A:  MOVLW  08
0B56C:  MOVLB  D
0B56E:  MOVWF  xCB
0B570:  SETF   xCC
0B572:  MOVLB  0
0B574:  CALL   243C
....................                  IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
0B578:  MOVLW  08
0B57A:  MOVLB  D
0B57C:  MOVWF  xCB
0B57E:  SETF   xCC
0B580:  MOVLB  0
0B582:  CALL   2452
....................                            
....................                  IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
0B586:  MOVLW  0A
0B588:  MOVLB  D
0B58A:  MOVWF  xCB
0B58C:  SETF   xCC
0B58E:  MOVLB  0
0B590:  CALL   243C
....................                  IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
0B594:  MOVLW  0A
0B596:  MOVLB  D
0B598:  MOVWF  xCB
0B59A:  SETF   xCC
0B59C:  MOVLB  0
0B59E:  CALL   2452
....................                  //PCF8575_write(0xFF,0x00,Input1_8_Wr_addr);
....................                  //PCF8575_write(0xFF,0x00,Input9_16_Wr_addr);
....................                  //IO_OUTPUT_B(IO_DEVICE_0, 0x00);
....................                  //IO_OUTPUT_B(IO_DEVICE_1, 0x00);
....................              // }
....................              
....................            }
....................        }
0B5A2:  BRA    B5B4
....................        else if(Input(Ptest) == 1 && Test == 1)
0B5A4:  BSF    F94.2
0B5A6:  BTFSS  F82.2
0B5A8:  BRA    B5B4
0B5AA:  BTFSS  1A.6
0B5AC:  BRA    B5B4
....................        {
....................            T_test = 0x00;
0B5AE:  CLRF   2F
....................            Test = 0;
0B5B0:  BCF    1A.6
....................            Test_fault = 0;
0B5B2:  BCF    1A.5
....................        }
.................... 
....................        if(Test_fault == 1)
0B5B4:  BTFSS  1A.5
0B5B6:  BRA    B5CA
....................        {
....................           ForceAllAlarm();
0B5B8:  GOTO   6768
....................           Anal_Function();
0B5BC:  CALL   71B2
....................           // jj 26/7/60
....................           if(Input(Ptest) == 1)
0B5C0:  BSF    F94.2
0B5C2:  BTFSS  F82.2
0B5C4:  BRA    B5C8
....................           {
....................             Test_fault = 0;
0B5C6:  BCF    1A.5
....................           }
....................        }
0B5C8:  BRA    B5E0
....................        else if(Input(Ptest) == 1 && Test == 1)
0B5CA:  BSF    F94.2
0B5CC:  BTFSS  F82.2
0B5CE:  BRA    B5E0
0B5D0:  BTFSS  1A.6
0B5D2:  BRA    B5E0
....................        {
....................           if(NoOfPoint >= 16)
0B5D4:  MOVF   x63,W
0B5D6:  SUBLW  0F
0B5D8:  BC    B5DA
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
.................... 
....................           T_test = 0x00;
0B5DA:  CLRF   2F
....................           Test = 0;
0B5DC:  BCF    1A.6
....................           Test_fault = 0;
0B5DE:  BCF    1A.5
....................        }
0B5E0:  GOTO   C49C (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((Input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
03552:  BSF    F94.0
03554:  BTFSC  F82.0
03556:  BRA    355C
03558:  BTFSS  1A.7
0355A:  BRA    3560
0355C:  BTFSS  1A.2
0355E:  BRA    356C
03560:  MOVLW  32
03562:  MOVLB  D
03564:  MOVWF  xCC
03566:  MOVLB  0
03568:  CALL   0A28
....................    if((Input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
0356C:  BSF    F94.0
0356E:  BTFSC  F82.0
03570:  BRA    3576
03572:  BTFSS  1A.7
03574:  BRA    357A
03576:  BTFSS  1A.2
03578:  BRA    36CE
....................    {
....................             AutoAckFlag = 0;
0357A:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
0357C:  CLRF   1D
....................       
....................                //if(In.B1 == 1 || ((Inputt.B1 ^ InputType.B1) == 1))
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
0357E:  MOVLB  D
03580:  BTFSC  x30.0
03582:  BRA    3588
03584:  BTFSS  x34.0
03586:  BRA    3590
....................            {
....................              Ack.B1 = 1;
03588:  BSF    x2C.0
....................              In.B1 = 0;
0358A:  BCF    x30.0
....................              In2.B1 = 0;      //for auto reset
0358C:  BCF    x34.0
....................              Output.B1 = 0;
0358E:  BCF    x14.0
....................            }
....................            //if(In.B2 == 1 || ((Inputt.B2 ^ InputType.B2) == 1))
....................            if((In.B2 == 1)||(In2.B2 == 1))
03590:  BTFSC  x30.1
03592:  BRA    3598
03594:  BTFSS  x34.1
03596:  BRA    35A0
....................            {
....................              Ack.B2 = 1;
03598:  BSF    x2C.1
....................              In.B2 = 0;
0359A:  BCF    x30.1
....................              In2.B2 = 0;      //for auto reset
0359C:  BCF    x34.1
....................              Output.B2 = 0;
0359E:  BCF    x14.1
....................            }
....................            //if(In.B3 == 1 || ((Inputt.B3 ^ InputType.B3) == 1))
....................            if((In.B3 == 1)||(In2.B3 == 1))
035A0:  BTFSC  x30.2
035A2:  BRA    35A8
035A4:  BTFSS  x34.2
035A6:  BRA    35B0
....................            {
....................              Ack.B3 = 1;
035A8:  BSF    x2C.2
....................              In.B3 = 0;
035AA:  BCF    x30.2
....................              In2.B3 = 0;      //for auto reset
035AC:  BCF    x34.2
....................              Output.B3 = 0;
035AE:  BCF    x14.2
....................            }
....................            //if(In.B4 == 1 || ((Inputt.B4 ^ InputType.B4) == 1))
....................            if((In.B4 == 1)||(In2.B4 == 1))
035B0:  BTFSC  x30.3
035B2:  BRA    35B8
035B4:  BTFSS  x34.3
035B6:  BRA    35C0
....................            {
....................              Ack.B4 = 1;
035B8:  BSF    x2C.3
....................              In.B4 = 0;
035BA:  BCF    x30.3
....................              In2.B4 = 0;      //for auto reset
035BC:  BCF    x34.3
....................              Output.B4 = 0;
035BE:  BCF    x14.3
....................            }
....................            //if(In.B5 == 1 || ((Inputt.B5 ^ InputType.B5) == 1))
....................            if((In.B5 == 1)||(In2.B5 == 1))
035C0:  BTFSC  x30.4
035C2:  BRA    35C8
035C4:  BTFSS  x34.4
035C6:  BRA    35D0
....................            {
....................              Ack.B5 = 1;
035C8:  BSF    x2C.4
....................              In.B5 = 0;
035CA:  BCF    x30.4
....................              In2.B5 = 0;      //for auto reset
035CC:  BCF    x34.4
....................              Output.B5 = 0;
035CE:  BCF    x14.4
....................            }
....................            //if(In.B6 == 1 || ((Inputt.B6 ^ InputType.B6) == 1))
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
035D0:  BTFSC  x30.5
035D2:  BRA    35D8
035D4:  BTFSS  x34.5
035D6:  BRA    35E0
....................            {
....................              Ack.B6 = 1;
035D8:  BSF    x2C.5
....................              In.B6 = 0;
035DA:  BCF    x30.5
....................              In2.B6 = 0;      //for auto reset
035DC:  BCF    x34.5
....................              Output.B6 = 0;
035DE:  BCF    x14.5
....................            }
....................            //if(In.B7 == 1 || ((Inputt.B7 ^ InputType.B7) == 1))
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
035E0:  BTFSC  x30.6
035E2:  BRA    35E8
035E4:  BTFSS  x34.6
035E6:  BRA    35F0
....................            {
....................              Ack.B7 = 1;
035E8:  BSF    x2C.6
....................              In.B7 = 0;
035EA:  BCF    x30.6
....................              In2.B7 = 0;      //for auto reset
035EC:  BCF    x34.6
....................              Output.B7 = 0;
035EE:  BCF    x14.6
....................            }
....................            //if(In.B8 == 1 || ((Inputt.B8 ^ InputType.B8) == 1))
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
035F0:  BTFSC  x30.7
035F2:  BRA    35F8
035F4:  BTFSS  x34.7
035F6:  BRA    3600
....................            {
....................              Ack.B8 = 1;
035F8:  BSF    x2C.7
....................              In.B8 = 0;
035FA:  BCF    x30.7
....................              In2.B8 = 0;      //for auto reset
035FC:  BCF    x34.7
....................              Output.B8 = 0;
035FE:  BCF    x14.7
....................            }
....................           // if(In.B9 == 1 || ((Inputt.B9 ^ InputType.B9) == 1))
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
03600:  BTFSC  x31.0
03602:  BRA    3608
03604:  BTFSS  x35.0
03606:  BRA    3610
....................            {
....................              Ack.B9 = 1;
03608:  BSF    x2D.0
....................              In.B9 = 0;
0360A:  BCF    x31.0
....................              In2.B9 = 0;      //for auto reset
0360C:  BCF    x35.0
....................              Output.B9 = 0;
0360E:  BCF    x15.0
....................            }
....................            //if(In.B10 == 1 || ((Inputt.B10 ^ InputType.B10) == 1))
....................            if((In.B10 == 1)||(In2.B10 == 1))
03610:  BTFSC  x31.1
03612:  BRA    3618
03614:  BTFSS  x35.1
03616:  BRA    3620
....................            {
....................              Ack.B10 = 1;
03618:  BSF    x2D.1
....................              In.B10 = 0;
0361A:  BCF    x31.1
....................              In2.B10 = 0;      //for auto reset
0361C:  BCF    x35.1
....................              Output.B10 = 0;
0361E:  BCF    x15.1
....................            }
....................            //if(In.B11 == 1 || ((Inputt.B11 ^ InputType.B11) == 1))
....................            if((In.B11 == 1)||(In2.B11 == 1))
03620:  BTFSC  x31.2
03622:  BRA    3628
03624:  BTFSS  x35.2
03626:  BRA    3630
....................            {
....................              Ack.B11 = 1;
03628:  BSF    x2D.2
....................              In.B11 = 0;
0362A:  BCF    x31.2
....................              In2.B11 = 0;      //for auto reset
0362C:  BCF    x35.2
....................              Output.B11 = 0;
0362E:  BCF    x15.2
....................            }
....................            //if(In.B12 == 1 || ((Inputt.B12 ^ InputType.B12) == 1))
....................            if((In.B12 == 1)||(In2.B12 == 1))
03630:  BTFSC  x31.3
03632:  BRA    3638
03634:  BTFSS  x35.3
03636:  BRA    3640
....................            {
....................              Ack.B12 = 1;
03638:  BSF    x2D.3
....................              In.B12 = 0;
0363A:  BCF    x31.3
....................              In2.B12 = 0;      //for auto reset
0363C:  BCF    x35.3
....................              Output.B12 = 0;
0363E:  BCF    x15.3
....................            }
....................            //if(In.B13 == 1 || ((Inputt.B13 ^ InputType.B13) == 1))
....................            if((In.B13 == 1 )||(In2.B13 == 1 ))
03640:  BTFSC  x31.4
03642:  BRA    3648
03644:  BTFSS  x35.4
03646:  BRA    3650
....................            {
....................              Ack.B13 = 1;
03648:  BSF    x2D.4
....................              In.B13 = 0;
0364A:  BCF    x31.4
....................              In2.B13 = 0;      //for auto reset
0364C:  BCF    x35.4
....................              Output.B13 = 0;
0364E:  BCF    x15.4
....................            }
....................            //if(In.B14 == 1 || ((Inputt.B14 ^ InputType.B14) == 1))
....................            if((In.B14 == 1)||(In2.B14 == 1))
03650:  BTFSC  x31.5
03652:  BRA    3658
03654:  BTFSS  x35.5
03656:  BRA    3660
....................            {
....................              Ack.B14 = 1;
03658:  BSF    x2D.5
....................              In.B14 = 0;
0365A:  BCF    x31.5
....................              In2.B14 = 0;      //for auto reset
0365C:  BCF    x35.5
....................              Output.B14 = 0;
0365E:  BCF    x15.5
....................            }
....................            //if(In.B15 == 1 || ((Inputt.B15 ^ InputType.B15) == 1))
....................            if((In.B15 == 1)||(In2.B15 == 1))
03660:  BTFSC  x31.6
03662:  BRA    3668
03664:  BTFSS  x35.6
03666:  BRA    3670
....................            {
....................              Ack.B15 = 1;
03668:  BSF    x2D.6
....................              In.B15 = 0;
0366A:  BCF    x31.6
....................              In2.B15 = 0;      //for auto reset
0366C:  BCF    x35.6
....................              Output.B15 = 0;
0366E:  BCF    x15.6
....................            }
....................            //if(In.B16 == 1 || ((Inputt.B16 ^ InputType.B16) == 1))
....................            if((In.B16 == 1)||(In2.B16 == 1))
03670:  BTFSC  x31.7
03672:  BRA    3678
03674:  BTFSS  x35.7
03676:  BRA    3680
....................            {
....................              Ack.B16 = 1;
03678:  BSF    x2D.7
....................              In.B16 = 0;
0367A:  BCF    x31.7
....................              In2.B16 = 0;      //for auto reset
0367C:  BCF    x35.7
....................              Output.B16 = 0;
0367E:  BCF    x15.7
....................            }
....................         
....................            //if(In.B17 == 1 || ((Inputt.B17 ^ InputType.B17) == 1))
....................            if((In.B17 == 1)||(In2.B17 == 1))
03680:  BTFSC  x32.0
03682:  BRA    3688
03684:  BTFSS  x36.0
03686:  BRA    3690
....................            {
....................              Ack.B17 = 1;
03688:  BSF    x2E.0
....................              In.B17 = 0;
0368A:  BCF    x32.0
....................              In2.B17 = 0;      //for auto reset
0368C:  BCF    x36.0
....................              Output.B17 = 0;
0368E:  BCF    x16.0
....................            }
....................            //if(In.B18 == 1 || ((Inputt.B18 ^ InputType.B18) == 1))
....................            if((In.B18 == 1)||(In2.B18 == 1))
03690:  BTFSC  x32.1
03692:  BRA    3698
03694:  BTFSS  x36.1
03696:  BRA    36A0
....................            {
....................              Ack.B18 = 1;
03698:  BSF    x2E.1
....................              In.B18 = 0;
0369A:  BCF    x32.1
....................              In2.B18 = 0;      //for auto reset
0369C:  BCF    x36.1
....................              Output.B18 = 0;
0369E:  BCF    x16.1
....................            }
....................            //if(In.B19 == 1 || ((Inputt.B19 ^ InputType.B19) == 1))
....................            if((In.B19 == 1)||(In2.B19 == 1))
036A0:  BTFSC  x32.2
036A2:  BRA    36A8
036A4:  BTFSS  x36.2
036A6:  BRA    36B0
....................            {
....................              Ack.B19 = 1;
036A8:  BSF    x2E.2
....................              In.B19 = 0;
036AA:  BCF    x32.2
....................              In2.B19 = 0;      //for auto reset
036AC:  BCF    x36.2
....................              Output.B19 = 0;
036AE:  BCF    x16.2
....................            }
....................            if((In.B20 == 1)||(In2.B20 == 1))
036B0:  BTFSC  x32.3
036B2:  BRA    36B8
036B4:  BTFSS  x36.3
036B6:  BRA    36C0
....................            {
....................              Ack.B20 = 1;
036B8:  BSF    x2E.3
....................              In.B20 = 0;
036BA:  BCF    x32.3
....................              In2.B20 = 0;      //for auto reset
036BC:  BCF    x36.3
....................              Output.B20 = 0;
036BE:  BCF    x16.3
....................            }
....................            ///////////////////////////////////////////////////////////
....................           
....................       
....................       
....................             Ack_F = 1;
036C0:  BSF    1A.7
....................             output_bit(Pbuzzer,OffRelay);   //Buzzer
036C2:  BCF    F89.4
036C4:  BCF    F92.4
....................             output_bit(Pbell,OffRelay);     //Bell
036C6:  BCF    F89.3
036C8:  BCF    F92.3
....................    }
036CA:  BRA    36DC
036CC:  MOVLB  0
....................    else if(Input(Pack) == 1 && Ack_F == 1)
036CE:  BSF    F94.0
036D0:  BTFSS  F82.0
036D2:  BRA    36DA
036D4:  BTFSS  1A.7
036D6:  BRA    36DA
....................    {
....................       Ack_F = 0;
036D8:  BCF    1A.7
036DA:  MOVLB  D
....................    }
036DC:  MOVLB  0
036DE:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((Input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
036E0:  BSF    F94.1
036E2:  BTFSC  F82.1
036E4:  BRA    36EA
036E6:  BTFSS  30.0
036E8:  BRA    36EE
036EA:  BTFSS  1A.3
036EC:  BRA    36FA
036EE:  MOVLW  32
036F0:  MOVLB  D
036F2:  MOVWF  xCC
036F4:  MOVLB  0
036F6:  CALL   0A28
....................     if((Input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
036FA:  BSF    F94.1
036FC:  BTFSC  F82.1
036FE:  BRA    3704
03700:  BTFSS  30.0
03702:  BRA    3708
03704:  BTFSS  1A.3
03706:  BRA    38F2
....................     {
....................        AutoResetFlag = 0;
03708:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
0370A:  MOVLW  00
0370C:  MOVLB  D
0370E:  BTFSC  x10.0
03710:  MOVLW  01
03712:  MOVWF  xCD
03714:  MOVLW  00
03716:  BTFSC  x18.0
03718:  MOVLW  01
0371A:  XORWF  xCD,W
0371C:  BNZ   3724
0371E:  BTFSC  x30.0
03720:  BRA    3724
03722:  BSF    x14.0
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
03724:  MOVLW  00
03726:  BTFSC  x10.1
03728:  MOVLW  01
0372A:  MOVWF  xCD
0372C:  MOVLW  00
0372E:  BTFSC  x18.1
03730:  MOVLW  01
03732:  XORWF  xCD,W
03734:  BNZ   373C
03736:  BTFSC  x30.1
03738:  BRA    373C
0373A:  BSF    x14.1
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
0373C:  MOVLW  00
0373E:  BTFSC  x10.2
03740:  MOVLW  01
03742:  MOVWF  xCD
03744:  MOVLW  00
03746:  BTFSC  x18.2
03748:  MOVLW  01
0374A:  XORWF  xCD,W
0374C:  BNZ   3754
0374E:  BTFSC  x30.2
03750:  BRA    3754
03752:  BSF    x14.2
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
03754:  MOVLW  00
03756:  BTFSC  x10.3
03758:  MOVLW  01
0375A:  MOVWF  xCD
0375C:  MOVLW  00
0375E:  BTFSC  x18.3
03760:  MOVLW  01
03762:  XORWF  xCD,W
03764:  BNZ   376C
03766:  BTFSC  x30.3
03768:  BRA    376C
0376A:  BSF    x14.3
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
0376C:  MOVLW  00
0376E:  BTFSC  x10.4
03770:  MOVLW  01
03772:  MOVWF  xCD
03774:  MOVLW  00
03776:  BTFSC  x18.4
03778:  MOVLW  01
0377A:  XORWF  xCD,W
0377C:  BNZ   3784
0377E:  BTFSC  x30.4
03780:  BRA    3784
03782:  BSF    x14.4
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
03784:  MOVLW  00
03786:  BTFSC  x10.5
03788:  MOVLW  01
0378A:  MOVWF  xCD
0378C:  MOVLW  00
0378E:  BTFSC  x18.5
03790:  MOVLW  01
03792:  XORWF  xCD,W
03794:  BNZ   379C
03796:  BTFSC  x30.5
03798:  BRA    379C
0379A:  BSF    x14.5
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
0379C:  MOVLW  00
0379E:  BTFSC  x10.6
037A0:  MOVLW  01
037A2:  MOVWF  xCD
037A4:  MOVLW  00
037A6:  BTFSC  x18.6
037A8:  MOVLW  01
037AA:  XORWF  xCD,W
037AC:  BNZ   37B4
037AE:  BTFSC  x30.6
037B0:  BRA    37B4
037B2:  BSF    x14.6
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
037B4:  MOVLW  00
037B6:  BTFSC  x10.7
037B8:  MOVLW  01
037BA:  MOVWF  xCD
037BC:  MOVLW  00
037BE:  BTFSC  x18.7
037C0:  MOVLW  01
037C2:  XORWF  xCD,W
037C4:  BNZ   37CC
037C6:  BTFSC  x30.7
037C8:  BRA    37CC
037CA:  BSF    x14.7
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
037CC:  MOVLW  00
037CE:  BTFSC  x11.0
037D0:  MOVLW  01
037D2:  MOVWF  xCD
037D4:  MOVLW  00
037D6:  BTFSC  x19.0
037D8:  MOVLW  01
037DA:  XORWF  xCD,W
037DC:  BNZ   37E4
037DE:  BTFSC  x31.0
037E0:  BRA    37E4
037E2:  BSF    x15.0
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
037E4:  MOVLW  00
037E6:  BTFSC  x11.1
037E8:  MOVLW  01
037EA:  MOVWF  xCD
037EC:  MOVLW  00
037EE:  BTFSC  x19.1
037F0:  MOVLW  01
037F2:  XORWF  xCD,W
037F4:  BNZ   37FC
037F6:  BTFSC  x31.1
037F8:  BRA    37FC
037FA:  BSF    x15.1
....................        if((Inputt.B11 ^ InputType.B11) == 0 && In.B11 == 0) Output.B11 = 1;
037FC:  MOVLW  00
037FE:  BTFSC  x11.2
03800:  MOVLW  01
03802:  MOVWF  xCD
03804:  MOVLW  00
03806:  BTFSC  x19.2
03808:  MOVLW  01
0380A:  XORWF  xCD,W
0380C:  BNZ   3814
0380E:  BTFSC  x31.2
03810:  BRA    3814
03812:  BSF    x15.2
....................        if((Inputt.B12 ^ InputType.B12) == 0 && In.B12 == 0) Output.B12 = 1;
03814:  MOVLW  00
03816:  BTFSC  x11.3
03818:  MOVLW  01
0381A:  MOVWF  xCD
0381C:  MOVLW  00
0381E:  BTFSC  x19.3
03820:  MOVLW  01
03822:  XORWF  xCD,W
03824:  BNZ   382C
03826:  BTFSC  x31.3
03828:  BRA    382C
0382A:  BSF    x15.3
....................        if((Inputt.B13 ^ InputType.B13) == 0 && In.B13 == 0) Output.B13 = 1;
0382C:  MOVLW  00
0382E:  BTFSC  x11.4
03830:  MOVLW  01
03832:  MOVWF  xCD
03834:  MOVLW  00
03836:  BTFSC  x19.4
03838:  MOVLW  01
0383A:  XORWF  xCD,W
0383C:  BNZ   3844
0383E:  BTFSC  x31.4
03840:  BRA    3844
03842:  BSF    x15.4
....................        if((Inputt.B14 ^ InputType.B14) == 0 && In.B14 == 0) Output.B14 = 1;
03844:  MOVLW  00
03846:  BTFSC  x11.5
03848:  MOVLW  01
0384A:  MOVWF  xCD
0384C:  MOVLW  00
0384E:  BTFSC  x19.5
03850:  MOVLW  01
03852:  XORWF  xCD,W
03854:  BNZ   385C
03856:  BTFSC  x31.5
03858:  BRA    385C
0385A:  BSF    x15.5
....................        if((Inputt.B15 ^ InputType.B15) == 0 && In.B15 == 0) Output.B15 = 1;
0385C:  MOVLW  00
0385E:  BTFSC  x11.6
03860:  MOVLW  01
03862:  MOVWF  xCD
03864:  MOVLW  00
03866:  BTFSC  x19.6
03868:  MOVLW  01
0386A:  XORWF  xCD,W
0386C:  BNZ   3874
0386E:  BTFSC  x31.6
03870:  BRA    3874
03872:  BSF    x15.6
....................        if((Inputt.B16 ^ InputType.B16) == 0 && In.B16 == 0) Output.B16 = 1;
03874:  MOVLW  00
03876:  BTFSC  x11.7
03878:  MOVLW  01
0387A:  MOVWF  xCD
0387C:  MOVLW  00
0387E:  BTFSC  x19.7
03880:  MOVLW  01
03882:  XORWF  xCD,W
03884:  BNZ   388C
03886:  BTFSC  x31.7
03888:  BRA    388C
0388A:  BSF    x15.7
....................        if((Inputt.B17 ^ InputType.B17) == 0 && In.B17 == 0) Output.B17 = 1;
0388C:  MOVLW  00
0388E:  BTFSC  x12.0
03890:  MOVLW  01
03892:  MOVWF  xCD
03894:  MOVLW  00
03896:  BTFSC  x1A.0
03898:  MOVLW  01
0389A:  XORWF  xCD,W
0389C:  BNZ   38A4
0389E:  BTFSC  x32.0
038A0:  BRA    38A4
038A2:  BSF    x16.0
....................        if((Inputt.B18 ^ InputType.B18) == 0 && In.B18 == 0) Output.B18 = 1;
038A4:  MOVLW  00
038A6:  BTFSC  x12.1
038A8:  MOVLW  01
038AA:  MOVWF  xCD
038AC:  MOVLW  00
038AE:  BTFSC  x1A.1
038B0:  MOVLW  01
038B2:  XORWF  xCD,W
038B4:  BNZ   38BC
038B6:  BTFSC  x32.1
038B8:  BRA    38BC
038BA:  BSF    x16.1
....................        if((Inputt.B19 ^ InputType.B19) == 0 && In.B19 == 0) Output.B19 = 1;
038BC:  MOVLW  00
038BE:  BTFSC  x12.2
038C0:  MOVLW  01
038C2:  MOVWF  xCD
038C4:  MOVLW  00
038C6:  BTFSC  x1A.2
038C8:  MOVLW  01
038CA:  XORWF  xCD,W
038CC:  BNZ   38D4
038CE:  BTFSC  x32.2
038D0:  BRA    38D4
038D2:  BSF    x16.2
....................        if((Inputt.B20 ^ InputType.B20) == 0 && In.B20 == 0) Output.B20 = 1;
038D4:  MOVLW  00
038D6:  BTFSC  x12.3
038D8:  MOVLW  01
038DA:  MOVWF  xCD
038DC:  MOVLW  00
038DE:  BTFSC  x1A.3
038E0:  MOVLW  01
038E2:  XORWF  xCD,W
038E4:  BNZ   38EC
038E6:  BTFSC  x32.3
038E8:  BRA    38EC
038EA:  BSF    x16.3
....................        
.................... 
....................        Reset_F = 1;
038EC:  BSF    30.0
....................     }
038EE:  BRA    3900
038F0:  MOVLB  0
....................     else if(Input(Preset) == 1 && Reset_F == 1)
038F2:  BSF    F94.1
038F4:  BTFSS  F82.1
038F6:  BRA    38FE
038F8:  BTFSS  30.0
038FA:  BRA    38FE
....................     {
....................        Reset_F = 0;
038FC:  BCF    30.0
038FE:  MOVLB  D
....................     }
03900:  MOVLB  0
03902:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
0684A:  MOVLB  D
0684C:  DECFSZ xCB,W
0684E:  BRA    6CF8
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
06850:  MOVLW  00
06852:  BTFSC  x30.0
06854:  MOVLW  01
06856:  MOVWF  xCE
06858:  MOVLW  00
0685A:  BTFSC  x34.0
0685C:  MOVLW  01
0685E:  IORWF  xCE,W
06860:  MOVWF  xCD
06862:  MOVLW  00
06864:  BTFSS  x2C.0
06866:  MOVLW  01
06868:  ANDWF  xCD,F
0686A:  MOVLW  00
0686C:  BTFSC  x20.0
0686E:  MOVLW  01
06870:  MOVWF  xD0
06872:  MOVLW  00
06874:  BTFSC  x24.0
06876:  MOVLW  01
06878:  IORWF  xD0,W
0687A:  ANDWF  xCD,W
0687C:  BCF    xCC.0
0687E:  BTFSC  FE8.0
06880:  BSF    xCC.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
06882:  MOVLW  00
06884:  BTFSC  xCC.0
06886:  MOVLW  01
06888:  MOVWF  xCD
0688A:  MOVLW  00
0688C:  BTFSC  x30.1
0688E:  MOVLW  01
06890:  MOVWF  xCF
06892:  MOVLW  00
06894:  BTFSC  x34.1
06896:  MOVLW  01
06898:  IORWF  xCF,W
0689A:  MOVWF  xCE
0689C:  MOVLW  00
0689E:  BTFSS  x2C.1
068A0:  MOVLW  01
068A2:  ANDWF  xCE,F
068A4:  MOVLW  00
068A6:  BTFSC  x20.1
068A8:  MOVLW  01
068AA:  MOVWF  xD1
068AC:  MOVLW  00
068AE:  BTFSC  x24.1
068B0:  MOVLW  01
068B2:  IORWF  xD1,W
068B4:  ANDWF  xCE,W
068B6:  IORWF  xCD,W
068B8:  BCF    xCC.0
068BA:  BTFSC  FE8.0
068BC:  BSF    xCC.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
068BE:  MOVLW  00
068C0:  BTFSC  xCC.0
068C2:  MOVLW  01
068C4:  MOVWF  xCD
068C6:  MOVLW  00
068C8:  BTFSC  x30.2
068CA:  MOVLW  01
068CC:  MOVWF  xCF
068CE:  MOVLW  00
068D0:  BTFSC  x34.2
068D2:  MOVLW  01
068D4:  IORWF  xCF,W
068D6:  MOVWF  xCE
068D8:  MOVLW  00
068DA:  BTFSS  x2C.2
068DC:  MOVLW  01
068DE:  ANDWF  xCE,F
068E0:  MOVLW  00
068E2:  BTFSC  x20.2
068E4:  MOVLW  01
068E6:  MOVWF  xD1
068E8:  MOVLW  00
068EA:  BTFSC  x24.2
068EC:  MOVLW  01
068EE:  IORWF  xD1,W
068F0:  ANDWF  xCE,W
068F2:  IORWF  xCD,W
068F4:  BCF    xCC.0
068F6:  BTFSC  FE8.0
068F8:  BSF    xCC.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
068FA:  MOVLW  00
068FC:  BTFSC  xCC.0
068FE:  MOVLW  01
06900:  MOVWF  xCD
06902:  MOVLW  00
06904:  BTFSC  x30.3
06906:  MOVLW  01
06908:  MOVWF  xCF
0690A:  MOVLW  00
0690C:  BTFSC  x34.3
0690E:  MOVLW  01
06910:  IORWF  xCF,W
06912:  MOVWF  xCE
06914:  MOVLW  00
06916:  BTFSS  x2C.3
06918:  MOVLW  01
0691A:  ANDWF  xCE,F
0691C:  MOVLW  00
0691E:  BTFSC  x20.3
06920:  MOVLW  01
06922:  MOVWF  xD1
06924:  MOVLW  00
06926:  BTFSC  x24.3
06928:  MOVLW  01
0692A:  IORWF  xD1,W
0692C:  ANDWF  xCE,W
0692E:  IORWF  xCD,W
06930:  BCF    xCC.0
06932:  BTFSC  FE8.0
06934:  BSF    xCC.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
06936:  MOVLW  00
06938:  BTFSC  xCC.0
0693A:  MOVLW  01
0693C:  MOVWF  xCD
0693E:  MOVLW  00
06940:  BTFSC  x30.4
06942:  MOVLW  01
06944:  MOVWF  xCF
06946:  MOVLW  00
06948:  BTFSC  x34.4
0694A:  MOVLW  01
0694C:  IORWF  xCF,W
0694E:  MOVWF  xCE
06950:  MOVLW  00
06952:  BTFSS  x2C.4
06954:  MOVLW  01
06956:  ANDWF  xCE,F
06958:  MOVLW  00
0695A:  BTFSC  x20.4
0695C:  MOVLW  01
0695E:  MOVWF  xD1
06960:  MOVLW  00
06962:  BTFSC  x24.4
06964:  MOVLW  01
06966:  IORWF  xD1,W
06968:  ANDWF  xCE,W
0696A:  IORWF  xCD,W
0696C:  BCF    xCC.0
0696E:  BTFSC  FE8.0
06970:  BSF    xCC.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
06972:  MOVLW  00
06974:  BTFSC  xCC.0
06976:  MOVLW  01
06978:  MOVWF  xCD
0697A:  MOVLW  00
0697C:  BTFSC  x30.5
0697E:  MOVLW  01
06980:  MOVWF  xCF
06982:  MOVLW  00
06984:  BTFSC  x34.5
06986:  MOVLW  01
06988:  IORWF  xCF,W
0698A:  MOVWF  xCE
0698C:  MOVLW  00
0698E:  BTFSS  x2C.5
06990:  MOVLW  01
06992:  ANDWF  xCE,F
06994:  MOVLW  00
06996:  BTFSC  x20.5
06998:  MOVLW  01
0699A:  MOVWF  xD1
0699C:  MOVLW  00
0699E:  BTFSC  x24.5
069A0:  MOVLW  01
069A2:  IORWF  xD1,W
069A4:  ANDWF  xCE,W
069A6:  IORWF  xCD,W
069A8:  BCF    xCC.0
069AA:  BTFSC  FE8.0
069AC:  BSF    xCC.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
069AE:  MOVLW  00
069B0:  BTFSC  xCC.0
069B2:  MOVLW  01
069B4:  MOVWF  xCD
069B6:  MOVLW  00
069B8:  BTFSC  x30.6
069BA:  MOVLW  01
069BC:  MOVWF  xCF
069BE:  MOVLW  00
069C0:  BTFSC  x34.6
069C2:  MOVLW  01
069C4:  IORWF  xCF,W
069C6:  MOVWF  xCE
069C8:  MOVLW  00
069CA:  BTFSS  x2C.6
069CC:  MOVLW  01
069CE:  ANDWF  xCE,F
069D0:  MOVLW  00
069D2:  BTFSC  x20.6
069D4:  MOVLW  01
069D6:  MOVWF  xD1
069D8:  MOVLW  00
069DA:  BTFSC  x24.6
069DC:  MOVLW  01
069DE:  IORWF  xD1,W
069E0:  ANDWF  xCE,W
069E2:  IORWF  xCD,W
069E4:  BCF    xCC.0
069E6:  BTFSC  FE8.0
069E8:  BSF    xCC.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
069EA:  MOVLW  00
069EC:  BTFSC  xCC.0
069EE:  MOVLW  01
069F0:  MOVWF  xCD
069F2:  MOVLW  00
069F4:  BTFSC  x30.7
069F6:  MOVLW  01
069F8:  MOVWF  xCF
069FA:  MOVLW  00
069FC:  BTFSC  x34.7
069FE:  MOVLW  01
06A00:  IORWF  xCF,W
06A02:  MOVWF  xCE
06A04:  MOVLW  00
06A06:  BTFSS  x2C.7
06A08:  MOVLW  01
06A0A:  ANDWF  xCE,F
06A0C:  MOVLW  00
06A0E:  BTFSC  x20.7
06A10:  MOVLW  01
06A12:  MOVWF  xD1
06A14:  MOVLW  00
06A16:  BTFSC  x24.7
06A18:  MOVLW  01
06A1A:  IORWF  xD1,W
06A1C:  ANDWF  xCE,W
06A1E:  IORWF  xCD,W
06A20:  BCF    xCC.0
06A22:  BTFSC  FE8.0
06A24:  BSF    xCC.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
06A26:  MOVLW  00
06A28:  BTFSC  xCC.0
06A2A:  MOVLW  01
06A2C:  MOVWF  xCD
06A2E:  MOVLW  00
06A30:  BTFSC  x31.0
06A32:  MOVLW  01
06A34:  MOVWF  xCF
06A36:  MOVLW  00
06A38:  BTFSC  x35.0
06A3A:  MOVLW  01
06A3C:  IORWF  xCF,W
06A3E:  MOVWF  xCE
06A40:  MOVLW  00
06A42:  BTFSS  x2D.0
06A44:  MOVLW  01
06A46:  ANDWF  xCE,F
06A48:  MOVLW  00
06A4A:  BTFSC  x21.0
06A4C:  MOVLW  01
06A4E:  MOVWF  xD1
06A50:  MOVLW  00
06A52:  BTFSC  x25.0
06A54:  MOVLW  01
06A56:  IORWF  xD1,W
06A58:  ANDWF  xCE,W
06A5A:  IORWF  xCD,W
06A5C:  BCF    xCC.0
06A5E:  BTFSC  FE8.0
06A60:  BSF    xCC.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
06A62:  MOVLW  00
06A64:  BTFSC  xCC.0
06A66:  MOVLW  01
06A68:  MOVWF  xCD
06A6A:  MOVLW  00
06A6C:  BTFSC  x31.1
06A6E:  MOVLW  01
06A70:  MOVWF  xCF
06A72:  MOVLW  00
06A74:  BTFSC  x35.1
06A76:  MOVLW  01
06A78:  IORWF  xCF,W
06A7A:  MOVWF  xCE
06A7C:  MOVLW  00
06A7E:  BTFSS  x2D.1
06A80:  MOVLW  01
06A82:  ANDWF  xCE,F
06A84:  MOVLW  00
06A86:  BTFSC  x21.1
06A88:  MOVLW  01
06A8A:  MOVWF  xD1
06A8C:  MOVLW  00
06A8E:  BTFSC  x25.1
06A90:  MOVLW  01
06A92:  IORWF  xD1,W
06A94:  ANDWF  xCE,W
06A96:  IORWF  xCD,W
06A98:  BCF    xCC.0
06A9A:  BTFSC  FE8.0
06A9C:  BSF    xCC.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (OutputType.B11 | OutputBoth.B11));
06A9E:  MOVLW  00
06AA0:  BTFSC  xCC.0
06AA2:  MOVLW  01
06AA4:  MOVWF  xCD
06AA6:  MOVLW  00
06AA8:  BTFSC  x31.2
06AAA:  MOVLW  01
06AAC:  MOVWF  xCF
06AAE:  MOVLW  00
06AB0:  BTFSC  x35.2
06AB2:  MOVLW  01
06AB4:  IORWF  xCF,W
06AB6:  MOVWF  xCE
06AB8:  MOVLW  00
06ABA:  BTFSS  x2D.2
06ABC:  MOVLW  01
06ABE:  ANDWF  xCE,F
06AC0:  MOVLW  00
06AC2:  BTFSC  x21.2
06AC4:  MOVLW  01
06AC6:  MOVWF  xD1
06AC8:  MOVLW  00
06ACA:  BTFSC  x25.2
06ACC:  MOVLW  01
06ACE:  IORWF  xD1,W
06AD0:  ANDWF  xCE,W
06AD2:  IORWF  xCD,W
06AD4:  BCF    xCC.0
06AD6:  BTFSC  FE8.0
06AD8:  BSF    xCC.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (OutputType.B12 | OutputBoth.B12));
06ADA:  MOVLW  00
06ADC:  BTFSC  xCC.0
06ADE:  MOVLW  01
06AE0:  MOVWF  xCD
06AE2:  MOVLW  00
06AE4:  BTFSC  x31.3
06AE6:  MOVLW  01
06AE8:  MOVWF  xCF
06AEA:  MOVLW  00
06AEC:  BTFSC  x35.3
06AEE:  MOVLW  01
06AF0:  IORWF  xCF,W
06AF2:  MOVWF  xCE
06AF4:  MOVLW  00
06AF6:  BTFSS  x2D.3
06AF8:  MOVLW  01
06AFA:  ANDWF  xCE,F
06AFC:  MOVLW  00
06AFE:  BTFSC  x21.3
06B00:  MOVLW  01
06B02:  MOVWF  xD1
06B04:  MOVLW  00
06B06:  BTFSC  x25.3
06B08:  MOVLW  01
06B0A:  IORWF  xD1,W
06B0C:  ANDWF  xCE,W
06B0E:  IORWF  xCD,W
06B10:  BCF    xCC.0
06B12:  BTFSC  FE8.0
06B14:  BSF    xCC.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (OutputType.B13 | OutputBoth.B13));
06B16:  MOVLW  00
06B18:  BTFSC  xCC.0
06B1A:  MOVLW  01
06B1C:  MOVWF  xCD
06B1E:  MOVLW  00
06B20:  BTFSC  x31.4
06B22:  MOVLW  01
06B24:  MOVWF  xCF
06B26:  MOVLW  00
06B28:  BTFSC  x35.4
06B2A:  MOVLW  01
06B2C:  IORWF  xCF,W
06B2E:  MOVWF  xCE
06B30:  MOVLW  00
06B32:  BTFSS  x2D.4
06B34:  MOVLW  01
06B36:  ANDWF  xCE,F
06B38:  MOVLW  00
06B3A:  BTFSC  x21.4
06B3C:  MOVLW  01
06B3E:  MOVWF  xD1
06B40:  MOVLW  00
06B42:  BTFSC  x25.4
06B44:  MOVLW  01
06B46:  IORWF  xD1,W
06B48:  ANDWF  xCE,W
06B4A:  IORWF  xCD,W
06B4C:  BCF    xCC.0
06B4E:  BTFSC  FE8.0
06B50:  BSF    xCC.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (OutputType.B14 | OutputBoth.B14));
06B52:  MOVLW  00
06B54:  BTFSC  xCC.0
06B56:  MOVLW  01
06B58:  MOVWF  xCD
06B5A:  MOVLW  00
06B5C:  BTFSC  x31.5
06B5E:  MOVLW  01
06B60:  MOVWF  xCF
06B62:  MOVLW  00
06B64:  BTFSC  x35.5
06B66:  MOVLW  01
06B68:  IORWF  xCF,W
06B6A:  MOVWF  xCE
06B6C:  MOVLW  00
06B6E:  BTFSS  x2D.5
06B70:  MOVLW  01
06B72:  ANDWF  xCE,F
06B74:  MOVLW  00
06B76:  BTFSC  x21.5
06B78:  MOVLW  01
06B7A:  MOVWF  xD1
06B7C:  MOVLW  00
06B7E:  BTFSC  x25.5
06B80:  MOVLW  01
06B82:  IORWF  xD1,W
06B84:  ANDWF  xCE,W
06B86:  IORWF  xCD,W
06B88:  BCF    xCC.0
06B8A:  BTFSC  FE8.0
06B8C:  BSF    xCC.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (OutputType.B15 | OutputBoth.B15));
06B8E:  MOVLW  00
06B90:  BTFSC  xCC.0
06B92:  MOVLW  01
06B94:  MOVWF  xCD
06B96:  MOVLW  00
06B98:  BTFSC  x31.6
06B9A:  MOVLW  01
06B9C:  MOVWF  xCF
06B9E:  MOVLW  00
06BA0:  BTFSC  x35.6
06BA2:  MOVLW  01
06BA4:  IORWF  xCF,W
06BA6:  MOVWF  xCE
06BA8:  MOVLW  00
06BAA:  BTFSS  x2D.6
06BAC:  MOVLW  01
06BAE:  ANDWF  xCE,F
06BB0:  MOVLW  00
06BB2:  BTFSC  x21.6
06BB4:  MOVLW  01
06BB6:  MOVWF  xD1
06BB8:  MOVLW  00
06BBA:  BTFSC  x25.6
06BBC:  MOVLW  01
06BBE:  IORWF  xD1,W
06BC0:  ANDWF  xCE,W
06BC2:  IORWF  xCD,W
06BC4:  BCF    xCC.0
06BC6:  BTFSC  FE8.0
06BC8:  BSF    xCC.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (OutputType.B16 | OutputBoth.B16));
06BCA:  MOVLW  00
06BCC:  BTFSC  xCC.0
06BCE:  MOVLW  01
06BD0:  MOVWF  xCD
06BD2:  MOVLW  00
06BD4:  BTFSC  x31.7
06BD6:  MOVLW  01
06BD8:  MOVWF  xCF
06BDA:  MOVLW  00
06BDC:  BTFSC  x35.7
06BDE:  MOVLW  01
06BE0:  IORWF  xCF,W
06BE2:  MOVWF  xCE
06BE4:  MOVLW  00
06BE6:  BTFSS  x2D.7
06BE8:  MOVLW  01
06BEA:  ANDWF  xCE,F
06BEC:  MOVLW  00
06BEE:  BTFSC  x21.7
06BF0:  MOVLW  01
06BF2:  MOVWF  xD1
06BF4:  MOVLW  00
06BF6:  BTFSC  x25.7
06BF8:  MOVLW  01
06BFA:  IORWF  xD1,W
06BFC:  ANDWF  xCE,W
06BFE:  IORWF  xCD,W
06C00:  BCF    xCC.0
06C02:  BTFSC  FE8.0
06C04:  BSF    xCC.0
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (OutputType.B17 | OutputBoth.B17));
06C06:  MOVLW  00
06C08:  BTFSC  xCC.0
06C0A:  MOVLW  01
06C0C:  MOVWF  xCD
06C0E:  MOVLW  00
06C10:  BTFSC  x32.0
06C12:  MOVLW  01
06C14:  MOVWF  xCF
06C16:  MOVLW  00
06C18:  BTFSC  x36.0
06C1A:  MOVLW  01
06C1C:  IORWF  xCF,W
06C1E:  MOVWF  xCE
06C20:  MOVLW  00
06C22:  BTFSS  x2E.0
06C24:  MOVLW  01
06C26:  ANDWF  xCE,F
06C28:  MOVLW  00
06C2A:  BTFSC  x22.0
06C2C:  MOVLW  01
06C2E:  MOVWF  xD1
06C30:  MOVLW  00
06C32:  BTFSC  x26.0
06C34:  MOVLW  01
06C36:  IORWF  xD1,W
06C38:  ANDWF  xCE,W
06C3A:  IORWF  xCD,W
06C3C:  BCF    xCC.0
06C3E:  BTFSC  FE8.0
06C40:  BSF    xCC.0
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (OutputType.B18 | OutputBoth.B18));
06C42:  MOVLW  00
06C44:  BTFSC  xCC.0
06C46:  MOVLW  01
06C48:  MOVWF  xCD
06C4A:  MOVLW  00
06C4C:  BTFSC  x32.1
06C4E:  MOVLW  01
06C50:  MOVWF  xCF
06C52:  MOVLW  00
06C54:  BTFSC  x36.1
06C56:  MOVLW  01
06C58:  IORWF  xCF,W
06C5A:  MOVWF  xCE
06C5C:  MOVLW  00
06C5E:  BTFSS  x2E.1
06C60:  MOVLW  01
06C62:  ANDWF  xCE,F
06C64:  MOVLW  00
06C66:  BTFSC  x22.1
06C68:  MOVLW  01
06C6A:  MOVWF  xD1
06C6C:  MOVLW  00
06C6E:  BTFSC  x26.1
06C70:  MOVLW  01
06C72:  IORWF  xD1,W
06C74:  ANDWF  xCE,W
06C76:  IORWF  xCD,W
06C78:  BCF    xCC.0
06C7A:  BTFSC  FE8.0
06C7C:  BSF    xCC.0
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (OutputType.B19 | OutputBoth.B19));
06C7E:  MOVLW  00
06C80:  BTFSC  xCC.0
06C82:  MOVLW  01
06C84:  MOVWF  xCD
06C86:  MOVLW  00
06C88:  BTFSC  x32.2
06C8A:  MOVLW  01
06C8C:  MOVWF  xCF
06C8E:  MOVLW  00
06C90:  BTFSC  x36.2
06C92:  MOVLW  01
06C94:  IORWF  xCF,W
06C96:  MOVWF  xCE
06C98:  MOVLW  00
06C9A:  BTFSS  x2E.2
06C9C:  MOVLW  01
06C9E:  ANDWF  xCE,F
06CA0:  MOVLW  00
06CA2:  BTFSC  x22.2
06CA4:  MOVLW  01
06CA6:  MOVWF  xD1
06CA8:  MOVLW  00
06CAA:  BTFSC  x26.2
06CAC:  MOVLW  01
06CAE:  IORWF  xD1,W
06CB0:  ANDWF  xCE,W
06CB2:  IORWF  xCD,W
06CB4:  BCF    xCC.0
06CB6:  BTFSC  FE8.0
06CB8:  BSF    xCC.0
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (OutputType.B20 | OutputBoth.B20));
06CBA:  MOVLW  00
06CBC:  BTFSC  xCC.0
06CBE:  MOVLW  01
06CC0:  MOVWF  xCD
06CC2:  MOVLW  00
06CC4:  BTFSC  x32.3
06CC6:  MOVLW  01
06CC8:  MOVWF  xCF
06CCA:  MOVLW  00
06CCC:  BTFSC  x36.3
06CCE:  MOVLW  01
06CD0:  IORWF  xCF,W
06CD2:  MOVWF  xCE
06CD4:  MOVLW  00
06CD6:  BTFSS  x2E.3
06CD8:  MOVLW  01
06CDA:  ANDWF  xCE,F
06CDC:  MOVLW  00
06CDE:  BTFSC  x22.3
06CE0:  MOVLW  01
06CE2:  MOVWF  xD1
06CE4:  MOVLW  00
06CE6:  BTFSC  x26.3
06CE8:  MOVLW  01
06CEA:  IORWF  xD1,W
06CEC:  ANDWF  xCE,W
06CEE:  IORWF  xCD,W
06CF0:  BCF    xCC.0
06CF2:  BTFSC  FE8.0
06CF4:  BSF    xCC.0
....................      
....................    }
06CF6:  BRA    71A6
....................    else if(DatType == 0x02)             //Bell
06CF8:  MOVF   xCB,W
06CFA:  SUBLW  02
06CFC:  BTFSS  FD8.2
06CFE:  BRA    71A6
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
06D00:  MOVLW  00
06D02:  BTFSC  x30.0
06D04:  MOVLW  01
06D06:  MOVWF  xCE
06D08:  MOVLW  00
06D0A:  BTFSC  x34.0
06D0C:  MOVLW  01
06D0E:  IORWF  xCE,W
06D10:  MOVWF  xCD
06D12:  MOVLW  00
06D14:  BTFSS  x2C.0
06D16:  MOVLW  01
06D18:  ANDWF  xCD,F
06D1A:  MOVLW  00
06D1C:  BTFSS  x20.0
06D1E:  MOVLW  01
06D20:  MOVWF  xD0
06D22:  MOVLW  00
06D24:  BTFSC  x24.0
06D26:  MOVLW  01
06D28:  IORWF  xD0,W
06D2A:  ANDWF  xCD,W
06D2C:  BCF    xCC.0
06D2E:  BTFSC  FE8.0
06D30:  BSF    xCC.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
06D32:  MOVLW  00
06D34:  BTFSC  xCC.0
06D36:  MOVLW  01
06D38:  MOVWF  xCD
06D3A:  MOVLW  00
06D3C:  BTFSC  x30.1
06D3E:  MOVLW  01
06D40:  MOVWF  xCF
06D42:  MOVLW  00
06D44:  BTFSC  x34.1
06D46:  MOVLW  01
06D48:  IORWF  xCF,W
06D4A:  MOVWF  xCE
06D4C:  MOVLW  00
06D4E:  BTFSS  x2C.1
06D50:  MOVLW  01
06D52:  ANDWF  xCE,F
06D54:  MOVLW  00
06D56:  BTFSS  x20.1
06D58:  MOVLW  01
06D5A:  MOVWF  xD1
06D5C:  MOVLW  00
06D5E:  BTFSC  x24.1
06D60:  MOVLW  01
06D62:  IORWF  xD1,W
06D64:  ANDWF  xCE,W
06D66:  IORWF  xCD,W
06D68:  BCF    xCC.0
06D6A:  BTFSC  FE8.0
06D6C:  BSF    xCC.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
06D6E:  MOVLW  00
06D70:  BTFSC  xCC.0
06D72:  MOVLW  01
06D74:  MOVWF  xCD
06D76:  MOVLW  00
06D78:  BTFSC  x30.2
06D7A:  MOVLW  01
06D7C:  MOVWF  xCF
06D7E:  MOVLW  00
06D80:  BTFSC  x34.2
06D82:  MOVLW  01
06D84:  IORWF  xCF,W
06D86:  MOVWF  xCE
06D88:  MOVLW  00
06D8A:  BTFSS  x2C.2
06D8C:  MOVLW  01
06D8E:  ANDWF  xCE,F
06D90:  MOVLW  00
06D92:  BTFSS  x20.2
06D94:  MOVLW  01
06D96:  MOVWF  xD1
06D98:  MOVLW  00
06D9A:  BTFSC  x24.2
06D9C:  MOVLW  01
06D9E:  IORWF  xD1,W
06DA0:  ANDWF  xCE,W
06DA2:  IORWF  xCD,W
06DA4:  BCF    xCC.0
06DA6:  BTFSC  FE8.0
06DA8:  BSF    xCC.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
06DAA:  MOVLW  00
06DAC:  BTFSC  xCC.0
06DAE:  MOVLW  01
06DB0:  MOVWF  xCD
06DB2:  MOVLW  00
06DB4:  BTFSC  x30.3
06DB6:  MOVLW  01
06DB8:  MOVWF  xCF
06DBA:  MOVLW  00
06DBC:  BTFSC  x34.3
06DBE:  MOVLW  01
06DC0:  IORWF  xCF,W
06DC2:  MOVWF  xCE
06DC4:  MOVLW  00
06DC6:  BTFSS  x2C.3
06DC8:  MOVLW  01
06DCA:  ANDWF  xCE,F
06DCC:  MOVLW  00
06DCE:  BTFSS  x20.3
06DD0:  MOVLW  01
06DD2:  MOVWF  xD1
06DD4:  MOVLW  00
06DD6:  BTFSC  x24.3
06DD8:  MOVLW  01
06DDA:  IORWF  xD1,W
06DDC:  ANDWF  xCE,W
06DDE:  IORWF  xCD,W
06DE0:  BCF    xCC.0
06DE2:  BTFSC  FE8.0
06DE4:  BSF    xCC.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
06DE6:  MOVLW  00
06DE8:  BTFSC  xCC.0
06DEA:  MOVLW  01
06DEC:  MOVWF  xCD
06DEE:  MOVLW  00
06DF0:  BTFSC  x30.4
06DF2:  MOVLW  01
06DF4:  MOVWF  xCF
06DF6:  MOVLW  00
06DF8:  BTFSC  x34.4
06DFA:  MOVLW  01
06DFC:  IORWF  xCF,W
06DFE:  MOVWF  xCE
06E00:  MOVLW  00
06E02:  BTFSS  x2C.4
06E04:  MOVLW  01
06E06:  ANDWF  xCE,F
06E08:  MOVLW  00
06E0A:  BTFSS  x20.4
06E0C:  MOVLW  01
06E0E:  MOVWF  xD1
06E10:  MOVLW  00
06E12:  BTFSC  x24.4
06E14:  MOVLW  01
06E16:  IORWF  xD1,W
06E18:  ANDWF  xCE,W
06E1A:  IORWF  xCD,W
06E1C:  BCF    xCC.0
06E1E:  BTFSC  FE8.0
06E20:  BSF    xCC.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
06E22:  MOVLW  00
06E24:  BTFSC  xCC.0
06E26:  MOVLW  01
06E28:  MOVWF  xCD
06E2A:  MOVLW  00
06E2C:  BTFSC  x30.5
06E2E:  MOVLW  01
06E30:  MOVWF  xCF
06E32:  MOVLW  00
06E34:  BTFSC  x34.5
06E36:  MOVLW  01
06E38:  IORWF  xCF,W
06E3A:  MOVWF  xCE
06E3C:  MOVLW  00
06E3E:  BTFSS  x2C.5
06E40:  MOVLW  01
06E42:  ANDWF  xCE,F
06E44:  MOVLW  00
06E46:  BTFSS  x20.5
06E48:  MOVLW  01
06E4A:  MOVWF  xD1
06E4C:  MOVLW  00
06E4E:  BTFSC  x24.5
06E50:  MOVLW  01
06E52:  IORWF  xD1,W
06E54:  ANDWF  xCE,W
06E56:  IORWF  xCD,W
06E58:  BCF    xCC.0
06E5A:  BTFSC  FE8.0
06E5C:  BSF    xCC.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
06E5E:  MOVLW  00
06E60:  BTFSC  xCC.0
06E62:  MOVLW  01
06E64:  MOVWF  xCD
06E66:  MOVLW  00
06E68:  BTFSC  x30.6
06E6A:  MOVLW  01
06E6C:  MOVWF  xCF
06E6E:  MOVLW  00
06E70:  BTFSC  x34.6
06E72:  MOVLW  01
06E74:  IORWF  xCF,W
06E76:  MOVWF  xCE
06E78:  MOVLW  00
06E7A:  BTFSS  x2C.6
06E7C:  MOVLW  01
06E7E:  ANDWF  xCE,F
06E80:  MOVLW  00
06E82:  BTFSS  x20.6
06E84:  MOVLW  01
06E86:  MOVWF  xD1
06E88:  MOVLW  00
06E8A:  BTFSC  x24.6
06E8C:  MOVLW  01
06E8E:  IORWF  xD1,W
06E90:  ANDWF  xCE,W
06E92:  IORWF  xCD,W
06E94:  BCF    xCC.0
06E96:  BTFSC  FE8.0
06E98:  BSF    xCC.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
06E9A:  MOVLW  00
06E9C:  BTFSC  xCC.0
06E9E:  MOVLW  01
06EA0:  MOVWF  xCD
06EA2:  MOVLW  00
06EA4:  BTFSC  x30.7
06EA6:  MOVLW  01
06EA8:  MOVWF  xCF
06EAA:  MOVLW  00
06EAC:  BTFSC  x34.7
06EAE:  MOVLW  01
06EB0:  IORWF  xCF,W
06EB2:  MOVWF  xCE
06EB4:  MOVLW  00
06EB6:  BTFSS  x2C.7
06EB8:  MOVLW  01
06EBA:  ANDWF  xCE,F
06EBC:  MOVLW  00
06EBE:  BTFSS  x20.7
06EC0:  MOVLW  01
06EC2:  MOVWF  xD1
06EC4:  MOVLW  00
06EC6:  BTFSC  x24.7
06EC8:  MOVLW  01
06ECA:  IORWF  xD1,W
06ECC:  ANDWF  xCE,W
06ECE:  IORWF  xCD,W
06ED0:  BCF    xCC.0
06ED2:  BTFSC  FE8.0
06ED4:  BSF    xCC.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
06ED6:  MOVLW  00
06ED8:  BTFSC  xCC.0
06EDA:  MOVLW  01
06EDC:  MOVWF  xCD
06EDE:  MOVLW  00
06EE0:  BTFSC  x31.0
06EE2:  MOVLW  01
06EE4:  MOVWF  xCF
06EE6:  MOVLW  00
06EE8:  BTFSC  x35.0
06EEA:  MOVLW  01
06EEC:  IORWF  xCF,W
06EEE:  MOVWF  xCE
06EF0:  MOVLW  00
06EF2:  BTFSS  x2D.0
06EF4:  MOVLW  01
06EF6:  ANDWF  xCE,F
06EF8:  MOVLW  00
06EFA:  BTFSS  x21.0
06EFC:  MOVLW  01
06EFE:  MOVWF  xD1
06F00:  MOVLW  00
06F02:  BTFSC  x25.0
06F04:  MOVLW  01
06F06:  IORWF  xD1,W
06F08:  ANDWF  xCE,W
06F0A:  IORWF  xCD,W
06F0C:  BCF    xCC.0
06F0E:  BTFSC  FE8.0
06F10:  BSF    xCC.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
06F12:  MOVLW  00
06F14:  BTFSC  xCC.0
06F16:  MOVLW  01
06F18:  MOVWF  xCD
06F1A:  MOVLW  00
06F1C:  BTFSC  x31.1
06F1E:  MOVLW  01
06F20:  MOVWF  xCF
06F22:  MOVLW  00
06F24:  BTFSC  x35.1
06F26:  MOVLW  01
06F28:  IORWF  xCF,W
06F2A:  MOVWF  xCE
06F2C:  MOVLW  00
06F2E:  BTFSS  x2D.1
06F30:  MOVLW  01
06F32:  ANDWF  xCE,F
06F34:  MOVLW  00
06F36:  BTFSS  x21.1
06F38:  MOVLW  01
06F3A:  MOVWF  xD1
06F3C:  MOVLW  00
06F3E:  BTFSC  x25.1
06F40:  MOVLW  01
06F42:  IORWF  xD1,W
06F44:  ANDWF  xCE,W
06F46:  IORWF  xCD,W
06F48:  BCF    xCC.0
06F4A:  BTFSC  FE8.0
06F4C:  BSF    xCC.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (~OutputType.B11 | OutputBoth.B11));
06F4E:  MOVLW  00
06F50:  BTFSC  xCC.0
06F52:  MOVLW  01
06F54:  MOVWF  xCD
06F56:  MOVLW  00
06F58:  BTFSC  x31.2
06F5A:  MOVLW  01
06F5C:  MOVWF  xCF
06F5E:  MOVLW  00
06F60:  BTFSC  x35.2
06F62:  MOVLW  01
06F64:  IORWF  xCF,W
06F66:  MOVWF  xCE
06F68:  MOVLW  00
06F6A:  BTFSS  x2D.2
06F6C:  MOVLW  01
06F6E:  ANDWF  xCE,F
06F70:  MOVLW  00
06F72:  BTFSS  x21.2
06F74:  MOVLW  01
06F76:  MOVWF  xD1
06F78:  MOVLW  00
06F7A:  BTFSC  x25.2
06F7C:  MOVLW  01
06F7E:  IORWF  xD1,W
06F80:  ANDWF  xCE,W
06F82:  IORWF  xCD,W
06F84:  BCF    xCC.0
06F86:  BTFSC  FE8.0
06F88:  BSF    xCC.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (~OutputType.B12 | OutputBoth.B12));
06F8A:  MOVLW  00
06F8C:  BTFSC  xCC.0
06F8E:  MOVLW  01
06F90:  MOVWF  xCD
06F92:  MOVLW  00
06F94:  BTFSC  x31.3
06F96:  MOVLW  01
06F98:  MOVWF  xCF
06F9A:  MOVLW  00
06F9C:  BTFSC  x35.3
06F9E:  MOVLW  01
06FA0:  IORWF  xCF,W
06FA2:  MOVWF  xCE
06FA4:  MOVLW  00
06FA6:  BTFSS  x2D.3
06FA8:  MOVLW  01
06FAA:  ANDWF  xCE,F
06FAC:  MOVLW  00
06FAE:  BTFSS  x21.3
06FB0:  MOVLW  01
06FB2:  MOVWF  xD1
06FB4:  MOVLW  00
06FB6:  BTFSC  x25.3
06FB8:  MOVLW  01
06FBA:  IORWF  xD1,W
06FBC:  ANDWF  xCE,W
06FBE:  IORWF  xCD,W
06FC0:  BCF    xCC.0
06FC2:  BTFSC  FE8.0
06FC4:  BSF    xCC.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (~OutputType.B13 | OutputBoth.B13));
06FC6:  MOVLW  00
06FC8:  BTFSC  xCC.0
06FCA:  MOVLW  01
06FCC:  MOVWF  xCD
06FCE:  MOVLW  00
06FD0:  BTFSC  x31.4
06FD2:  MOVLW  01
06FD4:  MOVWF  xCF
06FD6:  MOVLW  00
06FD8:  BTFSC  x35.4
06FDA:  MOVLW  01
06FDC:  IORWF  xCF,W
06FDE:  MOVWF  xCE
06FE0:  MOVLW  00
06FE2:  BTFSS  x2D.4
06FE4:  MOVLW  01
06FE6:  ANDWF  xCE,F
06FE8:  MOVLW  00
06FEA:  BTFSS  x21.4
06FEC:  MOVLW  01
06FEE:  MOVWF  xD1
06FF0:  MOVLW  00
06FF2:  BTFSC  x25.4
06FF4:  MOVLW  01
06FF6:  IORWF  xD1,W
06FF8:  ANDWF  xCE,W
06FFA:  IORWF  xCD,W
06FFC:  BCF    xCC.0
06FFE:  BTFSC  FE8.0
07000:  BSF    xCC.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (~OutputType.B14 | OutputBoth.B14));
07002:  MOVLW  00
07004:  BTFSC  xCC.0
07006:  MOVLW  01
07008:  MOVWF  xCD
0700A:  MOVLW  00
0700C:  BTFSC  x31.5
0700E:  MOVLW  01
07010:  MOVWF  xCF
07012:  MOVLW  00
07014:  BTFSC  x35.5
07016:  MOVLW  01
07018:  IORWF  xCF,W
0701A:  MOVWF  xCE
0701C:  MOVLW  00
0701E:  BTFSS  x2D.5
07020:  MOVLW  01
07022:  ANDWF  xCE,F
07024:  MOVLW  00
07026:  BTFSS  x21.5
07028:  MOVLW  01
0702A:  MOVWF  xD1
0702C:  MOVLW  00
0702E:  BTFSC  x25.5
07030:  MOVLW  01
07032:  IORWF  xD1,W
07034:  ANDWF  xCE,W
07036:  IORWF  xCD,W
07038:  BCF    xCC.0
0703A:  BTFSC  FE8.0
0703C:  BSF    xCC.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (~OutputType.B15 | OutputBoth.B15));
0703E:  MOVLW  00
07040:  BTFSC  xCC.0
07042:  MOVLW  01
07044:  MOVWF  xCD
07046:  MOVLW  00
07048:  BTFSC  x31.6
0704A:  MOVLW  01
0704C:  MOVWF  xCF
0704E:  MOVLW  00
07050:  BTFSC  x35.6
07052:  MOVLW  01
07054:  IORWF  xCF,W
07056:  MOVWF  xCE
07058:  MOVLW  00
0705A:  BTFSS  x2D.6
0705C:  MOVLW  01
0705E:  ANDWF  xCE,F
07060:  MOVLW  00
07062:  BTFSS  x21.6
07064:  MOVLW  01
07066:  MOVWF  xD1
07068:  MOVLW  00
0706A:  BTFSC  x25.6
0706C:  MOVLW  01
0706E:  IORWF  xD1,W
07070:  ANDWF  xCE,W
07072:  IORWF  xCD,W
07074:  BCF    xCC.0
07076:  BTFSC  FE8.0
07078:  BSF    xCC.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (~OutputType.B16 | OutputBoth.B16));
0707A:  MOVLW  00
0707C:  BTFSC  xCC.0
0707E:  MOVLW  01
07080:  MOVWF  xCD
07082:  MOVLW  00
07084:  BTFSC  x31.7
07086:  MOVLW  01
07088:  MOVWF  xCF
0708A:  MOVLW  00
0708C:  BTFSC  x35.7
0708E:  MOVLW  01
07090:  IORWF  xCF,W
07092:  MOVWF  xCE
07094:  MOVLW  00
07096:  BTFSS  x2D.7
07098:  MOVLW  01
0709A:  ANDWF  xCE,F
0709C:  MOVLW  00
0709E:  BTFSS  x21.7
070A0:  MOVLW  01
070A2:  MOVWF  xD1
070A4:  MOVLW  00
070A6:  BTFSC  x25.7
070A8:  MOVLW  01
070AA:  IORWF  xD1,W
070AC:  ANDWF  xCE,W
070AE:  IORWF  xCD,W
070B0:  BCF    xCC.0
070B2:  BTFSC  FE8.0
070B4:  BSF    xCC.0
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (~OutputType.B17 | OutputBoth.B17));
070B6:  MOVLW  00
070B8:  BTFSC  xCC.0
070BA:  MOVLW  01
070BC:  MOVWF  xCD
070BE:  MOVLW  00
070C0:  BTFSC  x32.0
070C2:  MOVLW  01
070C4:  MOVWF  xCF
070C6:  MOVLW  00
070C8:  BTFSC  x36.0
070CA:  MOVLW  01
070CC:  IORWF  xCF,W
070CE:  MOVWF  xCE
070D0:  MOVLW  00
070D2:  BTFSS  x2E.0
070D4:  MOVLW  01
070D6:  ANDWF  xCE,F
070D8:  MOVLW  00
070DA:  BTFSS  x22.0
070DC:  MOVLW  01
070DE:  MOVWF  xD1
070E0:  MOVLW  00
070E2:  BTFSC  x26.0
070E4:  MOVLW  01
070E6:  IORWF  xD1,W
070E8:  ANDWF  xCE,W
070EA:  IORWF  xCD,W
070EC:  BCF    xCC.0
070EE:  BTFSC  FE8.0
070F0:  BSF    xCC.0
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (~OutputType.B18 | OutputBoth.B18));
070F2:  MOVLW  00
070F4:  BTFSC  xCC.0
070F6:  MOVLW  01
070F8:  MOVWF  xCD
070FA:  MOVLW  00
070FC:  BTFSC  x32.1
070FE:  MOVLW  01
07100:  MOVWF  xCF
07102:  MOVLW  00
07104:  BTFSC  x36.1
07106:  MOVLW  01
07108:  IORWF  xCF,W
0710A:  MOVWF  xCE
0710C:  MOVLW  00
0710E:  BTFSS  x2E.1
07110:  MOVLW  01
07112:  ANDWF  xCE,F
07114:  MOVLW  00
07116:  BTFSS  x22.1
07118:  MOVLW  01
0711A:  MOVWF  xD1
0711C:  MOVLW  00
0711E:  BTFSC  x26.1
07120:  MOVLW  01
07122:  IORWF  xD1,W
07124:  ANDWF  xCE,W
07126:  IORWF  xCD,W
07128:  BCF    xCC.0
0712A:  BTFSC  FE8.0
0712C:  BSF    xCC.0
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (~OutputType.B19 | OutputBoth.B19));
0712E:  MOVLW  00
07130:  BTFSC  xCC.0
07132:  MOVLW  01
07134:  MOVWF  xCD
07136:  MOVLW  00
07138:  BTFSC  x32.2
0713A:  MOVLW  01
0713C:  MOVWF  xCF
0713E:  MOVLW  00
07140:  BTFSC  x36.2
07142:  MOVLW  01
07144:  IORWF  xCF,W
07146:  MOVWF  xCE
07148:  MOVLW  00
0714A:  BTFSS  x2E.2
0714C:  MOVLW  01
0714E:  ANDWF  xCE,F
07150:  MOVLW  00
07152:  BTFSS  x22.2
07154:  MOVLW  01
07156:  MOVWF  xD1
07158:  MOVLW  00
0715A:  BTFSC  x26.2
0715C:  MOVLW  01
0715E:  IORWF  xD1,W
07160:  ANDWF  xCE,W
07162:  IORWF  xCD,W
07164:  BCF    xCC.0
07166:  BTFSC  FE8.0
07168:  BSF    xCC.0
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (~OutputType.B20 | OutputBoth.B20));
0716A:  MOVLW  00
0716C:  BTFSC  xCC.0
0716E:  MOVLW  01
07170:  MOVWF  xCD
07172:  MOVLW  00
07174:  BTFSC  x32.3
07176:  MOVLW  01
07178:  MOVWF  xCF
0717A:  MOVLW  00
0717C:  BTFSC  x36.3
0717E:  MOVLW  01
07180:  IORWF  xCF,W
07182:  MOVWF  xCE
07184:  MOVLW  00
07186:  BTFSS  x2E.3
07188:  MOVLW  01
0718A:  ANDWF  xCE,F
0718C:  MOVLW  00
0718E:  BTFSS  x22.3
07190:  MOVLW  01
07192:  MOVWF  xD1
07194:  MOVLW  00
07196:  BTFSC  x26.3
07198:  MOVLW  01
0719A:  IORWF  xD1,W
0719C:  ANDWF  xCE,W
0719E:  IORWF  xCD,W
071A0:  BCF    xCC.0
071A2:  BTFSC  FE8.0
071A4:  BSF    xCC.0
.................... 
....................    }
....................    return(check);
071A6:  MOVLW  00
071A8:  BTFSC  xCC.0
071AA:  MOVLW  01
071AC:  MOVWF  01
071AE:  MOVLB  0
071B0:  RETURN 0
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
0BA88:  CLRF   FF8
0BA8A:  BCF    FD0.7
0BA8C:  BSF    07.7
0BA8E:  MOVLW  70
0BA90:  MOVWF  FD3
0BA92:  BCF    F9B.6
0BA94:  BCF    F9B.7
0BA96:  BSF    FB8.3
0BA98:  MOVLW  A0
0BA9A:  MOVWF  FAF
0BA9C:  MOVLW  01
0BA9E:  MOVWF  FB0
0BAA0:  MOVLW  A6
0BAA2:  MOVWF  FAC
0BAA4:  MOVLW  90
0BAA6:  MOVWF  FAB
0BAA8:  BCF    F93.0
0BAAA:  BSF    F8A.0
0BAAC:  CLRF   19
0BAAE:  BCF    1A.0
0BAB0:  MOVLW  19
0BAB2:  MOVWF  1B
0BAB4:  BCF    1A.1
0BAB6:  MOVLW  64
0BAB8:  MOVWF  1C
0BABA:  CLRF   1D
0BABC:  BCF    1A.2
0BABE:  BCF    1A.3
0BAC0:  BCF    1A.4
0BAC2:  CLRF   2E
0BAC4:  BCF    1A.5
0BAC6:  CLRF   2F
0BAC8:  BCF    1A.6
0BACA:  BCF    1A.7
0BACC:  BCF    30.0
0BACE:  BCF    30.1
0BAD0:  BCF    30.2
0BAD2:  CLRF   31
0BAD4:  BCF    30.3
0BAD6:  BCF    30.4
0BAD8:  BCF    30.5
0BADA:  MOVLW  11
0BADC:  MOVWF  x66
0BADE:  MOVLW  12
0BAE0:  MOVWF  x67
0BAE2:  MOVLW  13
0BAE4:  MOVWF  x68
0BAE6:  MOVLW  14
0BAE8:  MOVWF  x69
0BAEA:  MOVLW  16
0BAEC:  MOVWF  x6A
0BAEE:  MOVLW  17
0BAF0:  MOVWF  x6B
0BAF2:  MOVLW  18
0BAF4:  MOVWF  x6C
0BAF6:  MOVLW  19
0BAF8:  MOVWF  x6D
0BAFA:  MOVLW  20
0BAFC:  MOVWF  x6E
0BAFE:  BCF    30.6
0BB00:  CLRF   x71
0BB02:  MOVLW  01
0BB04:  MOVLB  6
0BB06:  MOVWF  x75
0BB08:  MOVLW  F4
0BB0A:  MOVWF  x74
0BB0C:  CLRF   x77
0BB0E:  CLRF   x76
0BB10:  CLRF   x79
0BB12:  CLRF   x78
0BB14:  CLRF   x7A
0BB16:  MOVLB  A
0BB18:  CLRF   x7F
0BB1A:  CLRF   x7E
0BB1C:  CLRF   x80
0BB1E:  MOVLB  D
0BB20:  CLRF   xA9
0BB22:  CLRF   xAA
0BB24:  CLRF   xAB
0BB26:  CLRF   xAC
0BB28:  CLRF   xAD
0BB2A:  CLRF   xAE
0BB2C:  CLRF   xAF
0BB2E:  CLRF   xB0
0BB30:  CLRF   xB1
0BB32:  CLRF   xB2
0BB34:  CLRF   xB3
0BB36:  CLRF   xB4
0BB38:  CLRF   xB5
0BB3A:  CLRF   xB6
0BB3C:  CLRF   xB7
0BB3E:  CLRF   xB8
0BB40:  CLRF   xB9
0BB42:  CLRF   xBA
0BB44:  CLRF   xBB
0BB46:  CLRF   xBC
0BB48:  CLRF   xBE
0BB4A:  CLRF   xBD
0BB4C:  MOVLB  F
0BB4E:  CLRF   x38
0BB50:  CLRF   x39
0BB52:  CLRF   x3A
0BB54:  CLRF   F77
0BB56:  CLRF   F78
0BB58:  CLRF   F79
0BB5A:  MOVLB  D
0BB5C:  CLRF   xBF
.................... {  
....................    delay_ms(50);
0BB5E:  MOVLW  32
0BB60:  MOVWF  xCC
0BB62:  MOVLB  0
0BB64:  CALL   0A28
....................    output_bit(Pled,0);   //power on watchdog signal
0BB68:  BCF    F8A.5
0BB6A:  BCF    F93.5
....................    
....................    //jj
....................    //setup_adc_ports(NO_ANALOGS|VSS_VDD);
....................    //setup_adc(ADC_OFF|ADC_TAD_MUL_0);
....................    
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
0BB6C:  MOVLW  80
0BB6E:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
0BB70:  MOVLW  78
0BB72:  IORLW  06
0BB74:  MOVWF  FBA
0BB76:  MOVLW  C4
0BB78:  MOVWF  FBB
....................    //setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);    //104ms
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................    // enable_interrupts(INT_TIMER1);
....................    enable_interrupts(INT_TIMER2);
0BB7A:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
0BB7C:  BSF    F9D.5
....................    
....................    //setup_oscillator(False);
....................    
....................    //  set_tris_c (0b01010111);
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H |SPI_SS_DISABLED|SPI_H_TO_L  | SPI_CLK_DIV_4  );
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L  | SPI_CLK_DIV_4 |SPI_SS_DISABLED); // Initial SPI
....................    //setup_spi(SPI_MASTER|SPI_H_TO_L|SPI_SS_DISABLED|SPI_CLK_DIV_16);
....................    //setup_spi2( FALSE );
....................    //setup_spi( FALSE );
....................    
....................    // setup_spi(SPI_MASTER |SPI_SS_DISABLED | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //masterOK
....................    
....................    //setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_16 ); //master1 jj
....................    //setup_spi(SPI_MASTER  |SPI_SS_DISABLED| SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_16 );
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H |SPI_SS_DISABLED | SPI_XMIT_L_TO_H| SPI_CLK_DIV_16 ); //master1 jj
0BB7E:  BCF    FC6.5
0BB80:  BCF    F94.5
0BB82:  BSF    F94.4
0BB84:  BCF    F94.3
0BB86:  MOVLW  21
0BB88:  MOVWF  FC6
0BB8A:  MOVLW  40
0BB8C:  MOVWF  FC7
.................... 
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 ); //master2
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED |SPI_SAMPLE_AT_END | SPI_H_TO_L | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1.1
....................    //spi_init(SPI1_MODE0, TRUE);
....................    //spi_init(250000);
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_SS_DISABLED  | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_T2 | SPI_XMIT_L_TO_H);
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L| SPI_SAMPLE_AT_END | SPI_CLK_DIV_64);//master3
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED| SPI_L_TO_H | SPI_SAMPLE_AT_END | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4);
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_CLK_DIV_4);
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_DIV_16);
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED| spi_L_to_H| SPI_XMIT_L_TO_H|SPI_CLK_DIV_4 );
....................   
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
0BB8E:  GOTO   0A8A
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
0BB92:  MOVLB  D
0BB94:  CLRF   xC3
0BB96:  SETF   xC4
0BB98:  MOVLB  0
0BB9A:  CALL   0B20
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
0BB9E:  MOVLB  D
0BBA0:  CLRF   xC3
0BBA2:  SETF   xC4
0BBA4:  MOVLB  0
0BBA6:  CALL   0B32
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
0BBAA:  MOVLW  02
0BBAC:  MOVLB  D
0BBAE:  MOVWF  xC3
0BBB0:  SETF   xC4
0BBB2:  MOVLB  0
0BBB4:  CALL   0B20
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt
0BBB8:  MOVLW  02
0BBBA:  MOVLB  D
0BBBC:  MOVWF  xC3
0BBBE:  SETF   xC4
0BBC0:  MOVLB  0
0BBC2:  CALL   0B32
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0BBC6:  MOVLB  D
0BBC8:  CLRF   xCD
0BBCA:  MOVLW  06
0BBCC:  MOVWF  xCE
0BBCE:  SETF   xCF
0BBD0:  MOVLB  0
0BBD2:  CALL   0A58
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0BBD6:  MOVLB  D
0BBD8:  CLRF   xCD
0BBDA:  MOVLW  16
0BBDC:  MOVWF  xCE
0BBDE:  SETF   xCF
0BBE0:  MOVLB  0
0BBE2:  CALL   0A58
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0BBE6:  MOVLW  02
0BBE8:  MOVLB  D
0BBEA:  MOVWF  xCD
0BBEC:  MOVLW  06
0BBEE:  MOVWF  xCE
0BBF0:  SETF   xCF
0BBF2:  MOVLB  0
0BBF4:  CALL   0A58
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0BBF8:  MOVLW  02
0BBFA:  MOVLB  D
0BBFC:  MOVWF  xCD
0BBFE:  MOVLW  16
0BC00:  MOVWF  xCE
0BC02:  SETF   xCF
0BC04:  MOVLB  0
0BC06:  CALL   0A58
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0BC0A:  MOVLW  04
0BC0C:  MOVLB  D
0BC0E:  MOVWF  xC3
0BC10:  CLRF   xC4
0BC12:  MOVLB  0
0BC14:  CALL   0B20
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0BC18:  MOVLW  04
0BC1A:  MOVLB  D
0BC1C:  MOVWF  xC3
0BC1E:  CLRF   xC4
0BC20:  MOVLB  0
0BC22:  CALL   0B32
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0BC26:  MOVLW  06
0BC28:  MOVLB  D
0BC2A:  MOVWF  xC3
0BC2C:  CLRF   xC4
0BC2E:  MOVLB  0
0BC30:  CALL   0B20
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0BC34:  MOVLW  06
0BC36:  MOVLB  D
0BC38:  MOVWF  xC3
0BC3A:  CLRF   xC4
0BC3C:  MOVLB  0
0BC3E:  CALL   0B32
....................    IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0BC42:  MOVLW  08
0BC44:  MOVLB  D
0BC46:  MOVWF  xC3
0BC48:  CLRF   xC4
0BC4A:  MOVLB  0
0BC4C:  CALL   0B20
....................    IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0BC50:  MOVLW  08
0BC52:  MOVLB  D
0BC54:  MOVWF  xC3
0BC56:  CLRF   xC4
0BC58:  MOVLB  0
0BC5A:  CALL   0B32
....................    IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0BC5E:  MOVLW  0A
0BC60:  MOVLB  D
0BC62:  MOVWF  xC3
0BC64:  CLRF   xC4
0BC66:  MOVLB  0
0BC68:  CALL   0B20
....................    IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0BC6C:  MOVLW  0A
0BC6E:  MOVLB  D
0BC70:  MOVWF  xC3
0BC72:  CLRF   xC4
0BC74:  MOVLB  0
0BC76:  CALL   0B32
....................    
....................    FlashingFlag = 1;
0BC7A:  BSF    1A.1
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
0BC7C:  MOVFF  66,6F
....................    Address = 1;
0BC80:  MOVLW  01
0BC82:  MOVWF  x70
.................... 
....................    Output.B1 = 1;
0BC84:  MOVLB  D
0BC86:  BSF    x14.0
....................    Output.B2 = 1;
0BC88:  BSF    x14.1
....................    Output.B3 = 1;
0BC8A:  BSF    x14.2
....................    Output.B4 = 1;
0BC8C:  BSF    x14.3
....................    Output.B5 = 1;
0BC8E:  BSF    x14.4
....................    Output.B6 = 1;
0BC90:  BSF    x14.5
....................    Output.B7 = 1;
0BC92:  BSF    x14.6
....................    Output.B8 = 1;
0BC94:  BSF    x14.7
....................    Output.B9 = 1;
0BC96:  BSF    x15.0
....................    Output.B10 = 1;
0BC98:  BSF    x15.1
....................    Output.B11 = 1;
0BC9A:  BSF    x15.2
....................    Output.B12 = 1;
0BC9C:  BSF    x15.3
....................    Output.B13 = 1;
0BC9E:  BSF    x15.4
....................    Output.B14 = 1;
0BCA0:  BSF    x15.5
....................    Output.B15 = 1;
0BCA2:  BSF    x15.6
....................    Output.B16 = 1;
0BCA4:  BSF    x15.7
....................    Output.B17 = 1;
0BCA6:  BSF    x16.0
....................    Output.B18 = 1;
0BCA8:  BSF    x16.1
....................    Output.B19 = 1;
0BCAA:  BSF    x16.2
....................    Output.B20 = 1;
0BCAC:  BSF    x16.3
....................    
....................    ////////////////////
....................    In.B1 = 0;
0BCAE:  BCF    x30.0
....................    In.B2 = 0;
0BCB0:  BCF    x30.1
....................    In.B3 = 0;
0BCB2:  BCF    x30.2
....................    In.B4 = 0;
0BCB4:  BCF    x30.3
....................    In.B5 = 0;
0BCB6:  BCF    x30.4
....................    In.B6 = 0;
0BCB8:  BCF    x30.5
....................    In.B7 = 0;
0BCBA:  BCF    x30.6
....................    In.B8 = 0;
0BCBC:  BCF    x30.7
....................    In.B9 = 0;
0BCBE:  BCF    x31.0
....................    In.B10 = 0;
0BCC0:  BCF    x31.1
....................    In.B11 = 0;
0BCC2:  BCF    x31.2
....................    In.B12 = 0;
0BCC4:  BCF    x31.3
....................    In.B13 = 0;
0BCC6:  BCF    x31.4
....................    In.B14 = 0;
0BCC8:  BCF    x31.5
....................    In.B15 = 0;
0BCCA:  BCF    x31.6
....................    In.B16 = 0;
0BCCC:  BCF    x31.7
....................    In.B17 = 0;
0BCCE:  BCF    x32.0
....................    In.B18 = 0;
0BCD0:  BCF    x32.1
....................    In.B19 = 0;
0BCD2:  BCF    x32.2
....................    In.B20 = 0;
0BCD4:  BCF    x32.3
....................    
....................    ////////////////////
....................    In2.B1 = 0;
0BCD6:  BCF    x34.0
....................    In2.B2 = 0;
0BCD8:  BCF    x34.1
....................    In2.B3 = 0;
0BCDA:  BCF    x34.2
....................    In2.B4 = 0;
0BCDC:  BCF    x34.3
....................    In2.B5 = 0;
0BCDE:  BCF    x34.4
....................    In2.B6 = 0;
0BCE0:  BCF    x34.5
....................    In2.B7 = 0;
0BCE2:  BCF    x34.6
....................    In2.B8 = 0;
0BCE4:  BCF    x34.7
....................    In2.B9 = 0;
0BCE6:  BCF    x35.0
....................    In2.B10 = 0;
0BCE8:  BCF    x35.1
....................    In2.B11 = 0;
0BCEA:  BCF    x35.2
....................    In2.B12 = 0;
0BCEC:  BCF    x35.3
....................    In2.B13 = 0;
0BCEE:  BCF    x35.4
....................    In2.B14 = 0;
0BCF0:  BCF    x35.5
....................    In2.B15 = 0;
0BCF2:  BCF    x35.6
....................    In2.B16 = 0;
0BCF4:  BCF    x35.7
....................    In2.B17 = 0;
0BCF6:  BCF    x36.0
....................    In2.B18 = 0;
0BCF8:  BCF    x36.1
....................    In2.B19 = 0;
0BCFA:  BCF    x36.2
....................    In2.B20 = 0;
0BCFC:  BCF    x36.3
....................    
....................    ////////////////////////
....................    Ack.B1 = 0;
0BCFE:  BCF    x2C.0
....................    Ack.B2 = 0;
0BD00:  BCF    x2C.1
....................    Ack.B3 = 0;
0BD02:  BCF    x2C.2
....................    Ack.B4 = 0;
0BD04:  BCF    x2C.3
....................    Ack.B5 = 0;
0BD06:  BCF    x2C.4
....................    Ack.B6 = 0;
0BD08:  BCF    x2C.5
....................    Ack.B7 = 0;
0BD0A:  BCF    x2C.6
....................    Ack.B8 = 0;
0BD0C:  BCF    x2C.7
....................    Ack.B9 = 0;
0BD0E:  BCF    x2D.0
....................    Ack.B10 = 0;
0BD10:  BCF    x2D.1
....................    Ack.B11 = 0;
0BD12:  BCF    x2D.2
....................    Ack.B12 = 0;
0BD14:  BCF    x2D.3
....................    Ack.B13 = 0;
0BD16:  BCF    x2D.4
....................    Ack.B14 = 0;
0BD18:  BCF    x2D.5
....................    Ack.B15 = 0;
0BD1A:  BCF    x2D.6
....................    Ack.B16 = 0;
0BD1C:  BCF    x2D.7
....................    Ack.B17 = 0;
0BD1E:  BCF    x2E.0
....................    Ack.B18 = 0;
0BD20:  BCF    x2E.1
....................    Ack.B19 = 0;
0BD22:  BCF    x2E.2
....................    Ack.B20 = 0;
0BD24:  BCF    x2E.3
....................  
....................    Inputt.B1 = 0;
0BD26:  BCF    x10.0
....................    Inputt.B2 = 0;
0BD28:  BCF    x10.1
....................    Inputt.B3 = 0;
0BD2A:  BCF    x10.2
....................    Inputt.B4 = 0;
0BD2C:  BCF    x10.3
....................    Inputt.B5 = 0;
0BD2E:  BCF    x10.4
....................    Inputt.B6 = 0;
0BD30:  BCF    x10.5
....................    Inputt.B7 = 0;
0BD32:  BCF    x10.6
....................    Inputt.B8 = 0;
0BD34:  BCF    x10.7
....................    Inputt.B9 = 0;
0BD36:  BCF    x11.0
....................    Inputt.B10 = 0;
0BD38:  BCF    x11.1
....................    Inputt.B11 = 0;
0BD3A:  BCF    x11.2
....................    Inputt.B12 = 0;
0BD3C:  BCF    x11.3
....................    Inputt.B13 = 0;
0BD3E:  BCF    x11.4
....................    Inputt.B14 = 0;
0BD40:  BCF    x11.5
....................    Inputt.B15 = 0;
0BD42:  BCF    x11.6
....................    Inputt.B16 = 0;
0BD44:  BCF    x11.7
....................    Inputt.B17 = 0;
0BD46:  BCF    x12.0
....................    Inputt.B18 = 0;
0BD48:  BCF    x12.1
....................    Inputt.B19 = 0;
0BD4A:  BCF    x12.2
....................    Inputt.B20 = 0;
0BD4C:  BCF    x12.3
....................   
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
0BD4E:  MOVFF  FF2,DC3
0BD52:  BCF    FF2.7
0BD54:  CLRF   FAA
0BD56:  CLRF   FA9
0BD58:  BCF    FA6.6
0BD5A:  BCF    FA6.7
0BD5C:  BSF    FA6.0
0BD5E:  MOVF   FA8,W
0BD60:  BTFSC  xC3.7
0BD62:  BSF    FF2.7
0BD64:  SUBLW  0F
0BD66:  BNZ   BD72
....................    {
....................       Read_Config();
0BD68:  MOVLB  0
0BD6A:  CALL   0B46
....................    }
0BD6E:  BRA    C172
0BD70:  MOVLB  D
....................    else
....................    {
....................       FlashingRateTime = 25;
0BD72:  MOVLW  19
0BD74:  MOVWF  1B
....................       AutoAck = 0xF0; //not use auto ack
0BD76:  MOVLW  F0
0BD78:  MOVLB  0
0BD7A:  MOVWF  x60
....................       Address = 0x01;
0BD7C:  MOVLW  01
0BD7E:  MOVWF  x70
.................... 
....................       AutoAckTime = 5;
0BD80:  MOVLW  05
0BD82:  MOVWF  x61
....................       FlashingRate = 25;
0BD84:  MOVLW  19
0BD86:  MOVWF  x62
....................       NoOfPoint = 20;
0BD88:  MOVLW  14
0BD8A:  MOVWF  x63
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
0BD8C:  MOVLB  D
0BD8E:  CLRF   xC0
0BD90:  MOVF   xC0,W
0BD92:  MOVLB  0
0BD94:  SUBWF  x63,W
0BD96:  BNC   BDB6
....................       {
....................          FaultDelayTime[i] = 0;
0BD98:  BCF    FD8.0
0BD9A:  MOVLB  D
0BD9C:  RLCF   xC0,W
0BD9E:  CLRF   03
0BDA0:  ADDLW  7C
0BDA2:  MOVWF  FE9
0BDA4:  MOVLW  0D
0BDA6:  ADDWFC 03,W
0BDA8:  MOVWF  FEA
0BDAA:  CLRF   FEC
0BDAC:  MOVF   FED,F
0BDAE:  CLRF   FEF
0BDB0:  INCF   xC0,F
0BDB2:  BRA    BD90
0BDB4:  MOVLB  0
....................       }
.................... 
.................... 
....................       InputType.B1 = 1;
0BDB6:  MOVLB  D
0BDB8:  BSF    x18.0
....................       InputType.B2 = 1;
0BDBA:  BSF    x18.1
....................       InputType.B3 = 1;
0BDBC:  BSF    x18.2
....................       InputType.B4 = 1;
0BDBE:  BSF    x18.3
....................       InputType.B5 = 1;
0BDC0:  BSF    x18.4
....................       InputType.B6 = 1;
0BDC2:  BSF    x18.5
....................       InputType.B7 = 1;
0BDC4:  BSF    x18.6
....................       InputType.B8 = 1;
0BDC6:  BSF    x18.7
....................       InputType.B9 = 1;
0BDC8:  BSF    x19.0
....................       InputType.B10 = 1;
0BDCA:  BSF    x19.1
....................       InputType.B11 = 1;
0BDCC:  BSF    x19.2
....................       InputType.B12 = 1;
0BDCE:  BSF    x19.3
....................       InputType.B13 = 1;
0BDD0:  BSF    x19.4
....................       InputType.B14 = 1;
0BDD2:  BSF    x19.5
....................       InputType.B15 = 1;
0BDD4:  BSF    x19.6
....................       InputType.B16 = 1;
0BDD6:  BSF    x19.7
....................       InputType.B17 = 1;
0BDD8:  BSF    x1A.0
....................       InputType.B18 = 1;
0BDDA:  BSF    x1A.1
....................       InputType.B19 = 1;
0BDDC:  BSF    x1A.2
....................       InputType.B20 = 1;
0BDDE:  BSF    x1A.3
....................       
....................       FaultNCNO[1] = 1;
0BDE0:  BSF    xA6.1
....................       FaultNCNO[2] = 1;
0BDE2:  BSF    xA6.2
....................       FaultNCNO[3] = 1;
0BDE4:  BSF    xA6.3
....................       FaultNCNO[4] = 1;
0BDE6:  BSF    xA6.4
....................       FaultNCNO[5] = 1;
0BDE8:  BSF    xA6.5
....................       FaultNCNO[6] = 1;
0BDEA:  BSF    xA6.6
....................       FaultNCNO[7] = 1;
0BDEC:  BSF    xA6.7
....................       FaultNCNO[8] = 1;
0BDEE:  BSF    xA7.0
....................       FaultNCNO[9] = 1;
0BDF0:  BSF    xA7.1
....................       FaultNCNO[10] = 1;
0BDF2:  BSF    xA7.2
....................       FaultNCNO[11] = 1;
0BDF4:  BSF    xA7.3
....................       FaultNCNO[12] = 1;
0BDF6:  BSF    xA7.4
....................       FaultNCNO[13] = 1;
0BDF8:  BSF    xA7.5
....................       FaultNCNO[14] = 1;
0BDFA:  BSF    xA7.6
....................       FaultNCNO[15] = 1;
0BDFC:  BSF    xA7.7
....................       FaultNCNO[16] = 1;
0BDFE:  BSF    xA8.0
....................       FaultNCNO[17] = 1;
0BE00:  BSF    xA8.1
....................       FaultNCNO[18] = 1;
0BE02:  BSF    xA8.2
....................       FaultNCNO[19] = 1;
0BE04:  BSF    xA8.3
....................       FaultNCNO[20] = 1;
0BE06:  BSF    xA8.4
....................       /////////////////////////////
....................       FaultType.B1 = 1;
0BE08:  BSF    x1C.0
....................       FaultType.B2= 1;
0BE0A:  BSF    x1C.1
....................       FaultType.B3 = 1;
0BE0C:  BSF    x1C.2
....................       FaultType.B4 = 1;
0BE0E:  BSF    x1C.3
....................       FaultType.B5 = 1;
0BE10:  BSF    x1C.4
....................       FaultType.B6 = 1;
0BE12:  BSF    x1C.5
....................       FaultType.B7 = 1;
0BE14:  BSF    x1C.6
....................       FaultType.B8 = 1;
0BE16:  BSF    x1C.7
....................       FaultType.B9 = 1;
0BE18:  BSF    x1D.0
....................       FaultType.B10 = 1;
0BE1A:  BSF    x1D.1
....................       FaultType.B11 = 1;
0BE1C:  BSF    x1D.2
....................       FaultType.B12 = 1;
0BE1E:  BSF    x1D.3
....................       FaultType.B13 = 1;
0BE20:  BSF    x1D.4
....................       FaultType.B14 = 1;
0BE22:  BSF    x1D.5
....................       FaultType.B15 = 1;
0BE24:  BSF    x1D.6
....................       FaultType.B16 = 1;
0BE26:  BSF    x1D.7
....................       FaultType.B17 = 1;
0BE28:  BSF    x1E.0
....................       FaultType.B18 = 1;
0BE2A:  BSF    x1E.1
....................       FaultType.B19 = 1;
0BE2C:  BSF    x1E.2
....................       FaultType.B20 = 1;
0BE2E:  BSF    x1E.3
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
0BE30:  BSF    x20.0
....................       OutputType.B2 = 1;
0BE32:  BSF    x20.1
....................       OutputType.B3 = 1;
0BE34:  BSF    x20.2
....................       OutputType.B4 = 1;
0BE36:  BSF    x20.3
....................       OutputType.B5 = 1;
0BE38:  BSF    x20.4
....................       OutputType.B6 = 1;
0BE3A:  BSF    x20.5
....................       OutputType.B7 = 1;
0BE3C:  BSF    x20.6
....................       OutputType.B8 = 1;
0BE3E:  BSF    x20.7
....................       OutputType.B9 = 1;
0BE40:  BSF    x21.0
....................       OutputType.B10 = 1;
0BE42:  BSF    x21.1
....................       OutputType.B11 = 1;
0BE44:  BSF    x21.2
....................       OutputType.B12 = 1;
0BE46:  BSF    x21.3
....................       OutputType.B13 = 1;
0BE48:  BSF    x21.4
....................       OutputType.B14 = 1;
0BE4A:  BSF    x21.5
....................       OutputType.B15 = 1;
0BE4C:  BSF    x21.6
....................       OutputType.B16 = 1;
0BE4E:  BSF    x21.7
....................       OutputType.B17 = 1;
0BE50:  BSF    x22.0
....................       OutputType.B18 = 1;
0BE52:  BSF    x22.1
....................       OutputType.B19 = 1;
0BE54:  BSF    x22.2
....................       OutputType.B20 = 1;
0BE56:  BSF    x22.3
....................  
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
0BE58:  BSF    x24.0
....................       OutputBoth.B2 = 1;
0BE5A:  BSF    x24.1
....................       OutputBoth.B3 = 1;
0BE5C:  BSF    x24.2
....................       OutputBoth.B4 = 1;
0BE5E:  BSF    x24.3
....................       OutputBoth.B5 = 1;
0BE60:  BSF    x24.4
....................       OutputBoth.B6 = 1;
0BE62:  BSF    x24.5
....................       OutputBoth.B7 = 1;
0BE64:  BSF    x24.6
....................       OutputBoth.B8 = 1;
0BE66:  BSF    x24.7
....................       OutputBoth.B9 = 1;
0BE68:  BSF    x25.0
....................       OutputBoth.B10 = 1;
0BE6A:  BSF    x25.1
....................       OutputBoth.B11 = 1;
0BE6C:  BSF    x25.2
....................       OutputBoth.B12 = 1;
0BE6E:  BSF    x25.3
....................       OutputBoth.B13 = 1;
0BE70:  BSF    x25.4
....................       OutputBoth.B14 = 1;
0BE72:  BSF    x25.5
....................       OutputBoth.B15 = 1;
0BE74:  BSF    x25.6
....................       OutputBoth.B16 = 1;
0BE76:  BSF    x25.7
....................       OutputBoth.B17 = 1;
0BE78:  BSF    x26.0
....................       OutputBoth.B18 = 1;
0BE7A:  BSF    x26.1
....................       OutputBoth.B19 = 1;
0BE7C:  BSF    x26.2
....................       OutputBoth.B20 = 1;
0BE7E:  BSF    x26.3
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
0BE80:  BSF    x28.0
....................       AlarmIndicator.B2 = 1;
0BE82:  BSF    x28.1
....................       AlarmIndicator.B3 = 1;
0BE84:  BSF    x28.2
....................       AlarmIndicator.B4 = 1;
0BE86:  BSF    x28.3
....................       AlarmIndicator.B5 = 1;
0BE88:  BSF    x28.4
....................       AlarmIndicator.B6 = 1;
0BE8A:  BSF    x28.5
....................       AlarmIndicator.B7 = 1;
0BE8C:  BSF    x28.6
....................       AlarmIndicator.B8 = 1;
0BE8E:  BSF    x28.7
....................       AlarmIndicator.B9 = 1;
0BE90:  BSF    x29.0
....................       AlarmIndicator.B10 = 1;
0BE92:  BSF    x29.1
....................       AlarmIndicator.B11 = 1;
0BE94:  BSF    x29.2
....................       AlarmIndicator.B12 = 1;
0BE96:  BSF    x29.3
....................       AlarmIndicator.B13 = 1;
0BE98:  BSF    x29.4
....................       AlarmIndicator.B14 = 1;
0BE9A:  BSF    x29.5
....................       AlarmIndicator.B15 = 1;
0BE9C:  BSF    x29.6
....................       AlarmIndicator.B16 = 1;
0BE9E:  BSF    x29.7
....................       AlarmIndicator.B17 = 1;
0BEA0:  BSF    x2A.0
....................       AlarmIndicator.B18 = 1;
0BEA2:  BSF    x2A.1
....................       AlarmIndicator.B19 = 1;
0BEA4:  BSF    x2A.2
....................       AlarmIndicator.B20 = 1;
0BEA6:  BSF    x2A.3
....................       
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
0BEA8:  MOVFF  FF2,DC3
0BEAC:  BCF    FF2.7
0BEAE:  CLRF   FAA
0BEB0:  MOVLW  10
0BEB2:  MOVWF  FA9
0BEB4:  BCF    FA6.6
0BEB6:  BCF    FA6.7
0BEB8:  BSF    FA6.0
0BEBA:  MOVF   FA8,W
0BEBC:  BTFSC  xC3.7
0BEBE:  BSF    FF2.7
0BEC0:  MOVWF  39
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
0BEC2:  BCF    x40.0
0BEC4:  BTFSC  39.0
0BEC6:  BSF    x40.0
....................    RED_Colour.B2 = EEpDat >> 1;
0BEC8:  BCF    FD8.0
0BECA:  RRCF   39,W
0BECC:  BCF    x40.1
0BECE:  BTFSC  FE8.0
0BED0:  BSF    x40.1
....................    RED_Colour.B3 = EEpDat >> 2;
0BED2:  RRCF   39,W
0BED4:  MOVWF  00
0BED6:  RRCF   00,F
0BED8:  MOVLW  3F
0BEDA:  ANDWF  00,F
0BEDC:  BCF    x40.2
0BEDE:  BTFSC  00.0
0BEE0:  BSF    x40.2
....................    RED_Colour.B4 = EEpDat >> 3;
0BEE2:  RRCF   39,W
0BEE4:  MOVWF  00
0BEE6:  RRCF   00,F
0BEE8:  RRCF   00,F
0BEEA:  MOVLW  1F
0BEEC:  ANDWF  00,F
0BEEE:  BCF    x40.3
0BEF0:  BTFSC  00.0
0BEF2:  BSF    x40.3
....................    RED_Colour.B5 = EEpDat >> 4;
0BEF4:  SWAPF  39,W
0BEF6:  MOVWF  00
0BEF8:  MOVLW  0F
0BEFA:  ANDWF  00,F
0BEFC:  BCF    x40.4
0BEFE:  BTFSC  00.0
0BF00:  BSF    x40.4
....................    RED_Colour.B6 = EEpDat >> 5;
0BF02:  SWAPF  39,W
0BF04:  MOVWF  00
0BF06:  RRCF   00,F
0BF08:  MOVLW  07
0BF0A:  ANDWF  00,F
0BF0C:  BCF    x40.5
0BF0E:  BTFSC  00.0
0BF10:  BSF    x40.5
....................    RED_Colour.B7 = EEpDat >> 6;
0BF12:  SWAPF  39,W
0BF14:  MOVWF  00
0BF16:  RRCF   00,F
0BF18:  RRCF   00,F
0BF1A:  MOVLW  03
0BF1C:  ANDWF  00,F
0BF1E:  BCF    x40.6
0BF20:  BTFSC  00.0
0BF22:  BSF    x40.6
....................    RED_Colour.B8 = EEpDat >> 7;
0BF24:  CLRF   00
0BF26:  BTFSC  39.7
0BF28:  BSF    00.0
0BF2A:  BCF    x40.7
0BF2C:  BTFSC  00.0
0BF2E:  BSF    x40.7
....................    
....................    EEpDat = read_eeprom(0x11);
0BF30:  MOVFF  FF2,DC3
0BF34:  BCF    FF2.7
0BF36:  CLRF   FAA
0BF38:  MOVLW  11
0BF3A:  MOVWF  FA9
0BF3C:  BCF    FA6.6
0BF3E:  BCF    FA6.7
0BF40:  BSF    FA6.0
0BF42:  MOVF   FA8,W
0BF44:  BTFSC  xC3.7
0BF46:  BSF    FF2.7
0BF48:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
0BF4A:  BCF    x41.0
0BF4C:  BTFSC  39.0
0BF4E:  BSF    x41.0
....................    RED_Colour.B10 = EEpDat >> 1;
0BF50:  BCF    FD8.0
0BF52:  RRCF   39,W
0BF54:  BCF    x41.1
0BF56:  BTFSC  FE8.0
0BF58:  BSF    x41.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
0BF5A:  MOVFF  FF2,DC3
0BF5E:  BCF    FF2.7
0BF60:  CLRF   FAA
0BF62:  MOVLW  12
0BF64:  MOVWF  FA9
0BF66:  BCF    FA6.6
0BF68:  BCF    FA6.7
0BF6A:  BSF    FA6.0
0BF6C:  MOVF   FA8,W
0BF6E:  BTFSC  xC3.7
0BF70:  BSF    FF2.7
0BF72:  MOVWF  39
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
0BF74:  BCF    x41.2
0BF76:  BTFSC  39.0
0BF78:  BSF    x41.2
....................    RED_Colour.B12 = EEpDat >> 1;
0BF7A:  BCF    FD8.0
0BF7C:  RRCF   39,W
0BF7E:  BCF    x41.3
0BF80:  BTFSC  FE8.0
0BF82:  BSF    x41.3
....................    RED_Colour.B13 = EEpDat >> 2;
0BF84:  RRCF   39,W
0BF86:  MOVWF  00
0BF88:  RRCF   00,F
0BF8A:  MOVLW  3F
0BF8C:  ANDWF  00,F
0BF8E:  BCF    x41.4
0BF90:  BTFSC  00.0
0BF92:  BSF    x41.4
....................    RED_Colour.B14 = EEpDat >> 3;
0BF94:  RRCF   39,W
0BF96:  MOVWF  00
0BF98:  RRCF   00,F
0BF9A:  RRCF   00,F
0BF9C:  MOVLW  1F
0BF9E:  ANDWF  00,F
0BFA0:  BCF    x41.5
0BFA2:  BTFSC  00.0
0BFA4:  BSF    x41.5
....................    RED_Colour.B15 = EEpDat >> 4;
0BFA6:  SWAPF  39,W
0BFA8:  MOVWF  00
0BFAA:  MOVLW  0F
0BFAC:  ANDWF  00,F
0BFAE:  BCF    x41.6
0BFB0:  BTFSC  00.0
0BFB2:  BSF    x41.6
....................    RED_Colour.B16 = EEpDat >> 5;
0BFB4:  SWAPF  39,W
0BFB6:  MOVWF  00
0BFB8:  RRCF   00,F
0BFBA:  MOVLW  07
0BFBC:  ANDWF  00,F
0BFBE:  BCF    x41.7
0BFC0:  BTFSC  00.0
0BFC2:  BSF    x41.7
....................    RED_Colour.B17 = EEpDat >> 6;
0BFC4:  SWAPF  39,W
0BFC6:  MOVWF  00
0BFC8:  RRCF   00,F
0BFCA:  RRCF   00,F
0BFCC:  MOVLW  03
0BFCE:  ANDWF  00,F
0BFD0:  BCF    x42.0
0BFD2:  BTFSC  00.0
0BFD4:  BSF    x42.0
....................    RED_Colour.B18 = EEpDat >> 7;
0BFD6:  CLRF   00
0BFD8:  BTFSC  39.7
0BFDA:  BSF    00.0
0BFDC:  BCF    x42.1
0BFDE:  BTFSC  00.0
0BFE0:  BSF    x42.1
....................    
....................    EEpDat = read_eeprom(0x13);
0BFE2:  MOVFF  FF2,DC3
0BFE6:  BCF    FF2.7
0BFE8:  CLRF   FAA
0BFEA:  MOVLW  13
0BFEC:  MOVWF  FA9
0BFEE:  BCF    FA6.6
0BFF0:  BCF    FA6.7
0BFF2:  BSF    FA6.0
0BFF4:  MOVF   FA8,W
0BFF6:  BTFSC  xC3.7
0BFF8:  BSF    FF2.7
0BFFA:  MOVWF  39
....................    //Red19_20 = EEpDat;
....................    RED_Colour.B19 = EEpDat;
0BFFC:  BCF    x42.2
0BFFE:  BTFSC  39.0
0C000:  BSF    x42.2
....................    RED_Colour.B20 = EEpDat >> 1;
0C002:  BCF    FD8.0
0C004:  RRCF   39,W
0C006:  BCF    x42.3
0C008:  BTFSC  FE8.0
0C00A:  BSF    x42.3
....................    
....................    
....................    EEpDat = read_eeprom(0x14);
0C00C:  MOVFF  FF2,DC3
0C010:  BCF    FF2.7
0C012:  CLRF   FAA
0C014:  MOVLW  14
0C016:  MOVWF  FA9
0C018:  BCF    FA6.6
0C01A:  BCF    FA6.7
0C01C:  BSF    FA6.0
0C01E:  MOVF   FA8,W
0C020:  BTFSC  xC3.7
0C022:  BSF    FF2.7
0C024:  MOVWF  39
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
0C026:  BCF    x44.0
0C028:  BTFSC  39.0
0C02A:  BSF    x44.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
0C02C:  BCF    FD8.0
0C02E:  RRCF   39,W
0C030:  BCF    x44.1
0C032:  BTFSC  FE8.0
0C034:  BSF    x44.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
0C036:  RRCF   39,W
0C038:  MOVWF  00
0C03A:  RRCF   00,F
0C03C:  MOVLW  3F
0C03E:  ANDWF  00,F
0C040:  BCF    x44.2
0C042:  BTFSC  00.0
0C044:  BSF    x44.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
0C046:  RRCF   39,W
0C048:  MOVWF  00
0C04A:  RRCF   00,F
0C04C:  RRCF   00,F
0C04E:  MOVLW  1F
0C050:  ANDWF  00,F
0C052:  BCF    x44.3
0C054:  BTFSC  00.0
0C056:  BSF    x44.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
0C058:  SWAPF  39,W
0C05A:  MOVWF  00
0C05C:  MOVLW  0F
0C05E:  ANDWF  00,F
0C060:  BCF    x44.4
0C062:  BTFSC  00.0
0C064:  BSF    x44.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
0C066:  SWAPF  39,W
0C068:  MOVWF  00
0C06A:  RRCF   00,F
0C06C:  MOVLW  07
0C06E:  ANDWF  00,F
0C070:  BCF    x44.5
0C072:  BTFSC  00.0
0C074:  BSF    x44.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
0C076:  SWAPF  39,W
0C078:  MOVWF  00
0C07A:  RRCF   00,F
0C07C:  RRCF   00,F
0C07E:  MOVLW  03
0C080:  ANDWF  00,F
0C082:  BCF    x44.6
0C084:  BTFSC  00.0
0C086:  BSF    x44.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
0C088:  CLRF   00
0C08A:  BTFSC  39.7
0C08C:  BSF    00.0
0C08E:  BCF    x44.7
0C090:  BTFSC  00.0
0C092:  BSF    x44.7
....................    
....................    EEpDat = read_eeprom(0x15);
0C094:  MOVFF  FF2,DC3
0C098:  BCF    FF2.7
0C09A:  CLRF   FAA
0C09C:  MOVLW  15
0C09E:  MOVWF  FA9
0C0A0:  BCF    FA6.6
0C0A2:  BCF    FA6.7
0C0A4:  BSF    FA6.0
0C0A6:  MOVF   FA8,W
0C0A8:  BTFSC  xC3.7
0C0AA:  BSF    FF2.7
0C0AC:  MOVWF  39
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
0C0AE:  BCF    x45.0
0C0B0:  BTFSC  39.0
0C0B2:  BSF    x45.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
0C0B4:  BCF    FD8.0
0C0B6:  RRCF   39,W
0C0B8:  BCF    x45.1
0C0BA:  BTFSC  FE8.0
0C0BC:  BSF    x45.1
....................   
....................    EEpDat = read_eeprom(0x16);
0C0BE:  MOVFF  FF2,DC3
0C0C2:  BCF    FF2.7
0C0C4:  CLRF   FAA
0C0C6:  MOVLW  16
0C0C8:  MOVWF  FA9
0C0CA:  BCF    FA6.6
0C0CC:  BCF    FA6.7
0C0CE:  BSF    FA6.0
0C0D0:  MOVF   FA8,W
0C0D2:  BTFSC  xC3.7
0C0D4:  BSF    FF2.7
0C0D6:  MOVWF  39
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0C0D8:  BCF    x45.2
0C0DA:  BTFSC  39.0
0C0DC:  BSF    x45.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
0C0DE:  BCF    FD8.0
0C0E0:  RRCF   39,W
0C0E2:  BCF    x45.3
0C0E4:  BTFSC  FE8.0
0C0E6:  BSF    x45.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
0C0E8:  RRCF   39,W
0C0EA:  MOVWF  00
0C0EC:  RRCF   00,F
0C0EE:  MOVLW  3F
0C0F0:  ANDWF  00,F
0C0F2:  BCF    x45.4
0C0F4:  BTFSC  00.0
0C0F6:  BSF    x45.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
0C0F8:  RRCF   39,W
0C0FA:  MOVWF  00
0C0FC:  RRCF   00,F
0C0FE:  RRCF   00,F
0C100:  MOVLW  1F
0C102:  ANDWF  00,F
0C104:  BCF    x45.5
0C106:  BTFSC  00.0
0C108:  BSF    x45.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
0C10A:  SWAPF  39,W
0C10C:  MOVWF  00
0C10E:  MOVLW  0F
0C110:  ANDWF  00,F
0C112:  BCF    x45.6
0C114:  BTFSC  00.0
0C116:  BSF    x45.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
0C118:  SWAPF  39,W
0C11A:  MOVWF  00
0C11C:  RRCF   00,F
0C11E:  MOVLW  07
0C120:  ANDWF  00,F
0C122:  BCF    x45.7
0C124:  BTFSC  00.0
0C126:  BSF    x45.7
....................    GREEN_Colour.B17 = EEpDat >> 6;
0C128:  SWAPF  39,W
0C12A:  MOVWF  00
0C12C:  RRCF   00,F
0C12E:  RRCF   00,F
0C130:  MOVLW  03
0C132:  ANDWF  00,F
0C134:  BCF    x46.0
0C136:  BTFSC  00.0
0C138:  BSF    x46.0
....................    GREEN_Colour.B18 = EEpDat >> 7;
0C13A:  CLRF   00
0C13C:  BTFSC  39.7
0C13E:  BSF    00.0
0C140:  BCF    x46.1
0C142:  BTFSC  00.0
0C144:  BSF    x46.1
....................    
....................    EEpDat = read_eeprom(0x17);
0C146:  MOVFF  FF2,DC3
0C14A:  BCF    FF2.7
0C14C:  CLRF   FAA
0C14E:  MOVLW  17
0C150:  MOVWF  FA9
0C152:  BCF    FA6.6
0C154:  BCF    FA6.7
0C156:  BSF    FA6.0
0C158:  MOVF   FA8,W
0C15A:  BTFSC  xC3.7
0C15C:  BSF    FF2.7
0C15E:  MOVWF  39
....................    //Green19_20 = EEpDat;
....................    GREEN_Colour.B19 = EEpDat;
0C160:  BCF    x46.2
0C162:  BTFSC  39.0
0C164:  BSF    x46.2
....................    GREEN_Colour.B20 = EEpDat >> 1;
0C166:  BCF    FD8.0
0C168:  RRCF   39,W
0C16A:  BCF    x46.3
0C16C:  BTFSC  FE8.0
0C16E:  BSF    x46.3
0C170:  MOVLB  0
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
.................... 
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
0C172:  MOVLW  00
0C174:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
0C176:  MOVWF  F93
....................    //set_tris_c (0b11111111); //PORTA SET TO OUTPUT
....................    enable_interrupts(GLOBAL);
0C178:  MOVLW  C0
0C17A:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
0C17C:  BSF    FD1.0
....................    //Read_input(); restart_wdt();
....................    output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0C17E:  BCF    F89.4
0C180:  BCF    F92.4
....................    output_bit(Pbell,OffRelay);     //Clear Bell
0C182:  BCF    F89.3
0C184:  BCF    F92.3
....................    output_bit(P485ctrl,0);
0C186:  BCF    F8A.3
0C188:  BCF    F93.3
.................... 
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
0C18A:  MOVLW  04
0C18C:  MOVLB  D
0C18E:  MOVWF  xCB
0C190:  SETF   xCC
0C192:  MOVLB  0
0C194:  CALL   243C
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
0C198:  MOVLW  04
0C19A:  MOVLB  D
0C19C:  MOVWF  xCB
0C19E:  SETF   xCC
0C1A0:  MOVLB  0
0C1A2:  CALL   2452
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
0C1A6:  MOVLW  06
0C1A8:  MOVLB  D
0C1AA:  MOVWF  xCB
0C1AC:  SETF   xCC
0C1AE:  MOVLB  0
0C1B0:  CALL   243C
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
0C1B4:  MOVLW  06
0C1B6:  MOVLB  D
0C1B8:  MOVWF  xCB
0C1BA:  SETF   xCC
0C1BC:  MOVLB  0
0C1BE:  CALL   2452
....................   
....................    IO_OUTPUT_A(IO_DEVICE_5, 0xff);  
0C1C2:  MOVLW  0A
0C1C4:  MOVLB  D
0C1C6:  MOVWF  xCB
0C1C8:  SETF   xCC
0C1CA:  MOVLB  0
0C1CC:  CALL   243C
....................    IO_OUTPUT_B(IO_DEVICE_5, 0xff);
0C1D0:  MOVLW  0A
0C1D2:  MOVLB  D
0C1D4:  MOVWF  xCB
0C1D6:  SETF   xCC
0C1D8:  MOVLB  0
0C1DA:  CALL   2452
....................             
....................    IO_OUTPUT_A(IO_DEVICE_4, 0xff);
0C1DE:  MOVLW  08
0C1E0:  MOVLB  D
0C1E2:  MOVWF  xCB
0C1E4:  SETF   xCC
0C1E6:  MOVLB  0
0C1E8:  CALL   243C
....................    IO_OUTPUT_B(IO_DEVICE_4, 0xff);
0C1EC:  MOVLW  08
0C1EE:  MOVLB  D
0C1F0:  MOVWF  xCB
0C1F2:  SETF   xCC
0C1F4:  MOVLB  0
0C1F6:  CALL   2452
....................    
....................    delay_ms(500);
0C1FA:  MOVLW  02
0C1FC:  MOVLB  D
0C1FE:  MOVWF  xC3
0C200:  MOVLW  FA
0C202:  MOVWF  xCC
0C204:  MOVLB  0
0C206:  CALL   0A28
0C20A:  MOVLB  D
0C20C:  DECFSZ xC3,F
0C20E:  BRA    C200
....................    
....................    // jj
....................    char i;
....................    for(i=1;i<=20;i++)
0C210:  MOVLW  01
0C212:  MOVWF  xC1
0C214:  MOVF   xC1,W
0C216:  SUBLW  14
0C218:  BTFSS  FD8.0
0C21A:  BRA    C398
....................    {
....................       FaultAgo[i] = 0;
0C21C:  MOVFF  DC1,DD0
0C220:  CLRF   xD1
0C222:  MOVLW  0D
0C224:  MOVWF  xD3
0C226:  MOVLW  4C
0C228:  MOVWF  xD2
0C22A:  MOVLB  0
0C22C:  CALL   2468
....................       FaultNow[i] = 0;
0C230:  MOVFF  DC1,DD0
0C234:  MOVLB  D
0C236:  CLRF   xD1
0C238:  MOVLW  0D
0C23A:  MOVWF  xD3
0C23C:  MOVLW  4F
0C23E:  MOVWF  xD2
0C240:  MOVLB  0
0C242:  CALL   2468
....................       ReleaseTime[i] = 0;
0C246:  BCF    FD8.0
0C248:  MOVLB  D
0C24A:  RLCF   xC1,W
0C24C:  CLRF   03
0C24E:  ADDLW  52
0C250:  MOVWF  FE9
0C252:  MOVLW  0D
0C254:  ADDWFC 03,W
0C256:  MOVWF  FEA
0C258:  CLRF   FEC
0C25A:  MOVF   FED,F
0C25C:  CLRF   FEF
....................       if(FaultNCNO[i] ==NO)
0C25E:  MOVFF  DC1,DD0
0C262:  MOVLW  0D
0C264:  MOVWF  xD2
0C266:  MOVLW  A6
0C268:  MOVWF  xD1
0C26A:  MOVLB  0
0C26C:  CALL   24AA
0C270:  MOVF   01,W
0C272:  ANDLW  01
0C274:  SUBLW  01
0C276:  BNZ   C308
....................       {
....................          switch(i)
0C278:  MOVLW  01
0C27A:  MOVLB  D
0C27C:  SUBWF  xC1,W
0C27E:  ADDLW  EC
0C280:  BC    C304
0C282:  ADDLW  14
0C284:  MOVLB  0
0C286:  GOTO   C5AC
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
0C28A:  MOVLB  D
0C28C:  BSF    x10.0
....................             break;
0C28E:  BRA    C304
....................             case 2:
....................                Inputt.B2 = 1; 
0C290:  MOVLB  D
0C292:  BSF    x10.1
....................             break;
0C294:  BRA    C304
....................             case 3:
....................                Inputt.B3 = 1; 
0C296:  MOVLB  D
0C298:  BSF    x10.2
....................             break;
0C29A:  BRA    C304
....................             case 4:
....................                Inputt.B4 = 1; 
0C29C:  MOVLB  D
0C29E:  BSF    x10.3
....................             break;
0C2A0:  BRA    C304
....................             case 5:
....................                Inputt.B5 = 1; 
0C2A2:  MOVLB  D
0C2A4:  BSF    x10.4
....................             break;
0C2A6:  BRA    C304
....................             case 6:
....................                Inputt.B6 = 1; 
0C2A8:  MOVLB  D
0C2AA:  BSF    x10.5
....................             break;
0C2AC:  BRA    C304
....................             case 7:
....................                Inputt.B7 = 1; 
0C2AE:  MOVLB  D
0C2B0:  BSF    x10.6
....................              break;
0C2B2:  BRA    C304
....................              case 8:
....................                Inputt.B8 = 1; 
0C2B4:  MOVLB  D
0C2B6:  BSF    x10.7
....................             break;
0C2B8:  BRA    C304
....................             case 9:
....................                Inputt.B9 = 1; 
0C2BA:  MOVLB  D
0C2BC:  BSF    x11.0
....................             break;
0C2BE:  BRA    C304
....................             case 10:
....................                Inputt.B10 = 1; 
0C2C0:  MOVLB  D
0C2C2:  BSF    x11.1
....................             break;
0C2C4:  BRA    C304
....................             case 11:
....................                Inputt.B11 = 1; 
0C2C6:  MOVLB  D
0C2C8:  BSF    x11.2
....................             break;
0C2CA:  BRA    C304
....................             case 12:
....................                Inputt.B12 = 1; 
0C2CC:  MOVLB  D
0C2CE:  BSF    x11.3
....................             break;
0C2D0:  BRA    C304
....................             case 13:
....................                Inputt.B13 = 1; 
0C2D2:  MOVLB  D
0C2D4:  BSF    x11.4
....................             break;
0C2D6:  BRA    C304
....................             case 14:
....................                Inputt.B14 = 1; 
0C2D8:  MOVLB  D
0C2DA:  BSF    x11.5
....................             break;
0C2DC:  BRA    C304
....................             case 15:
....................                Inputt.B15 = 1; 
0C2DE:  MOVLB  D
0C2E0:  BSF    x11.6
....................             break;
0C2E2:  BRA    C304
....................             case 16:
....................                 Inputt.B16 = 1;
0C2E4:  MOVLB  D
0C2E6:  BSF    x11.7
....................              break;
0C2E8:  BRA    C304
....................              case 17:
....................                Inputt.B17 = 1; 
0C2EA:  MOVLB  D
0C2EC:  BSF    x12.0
....................              break;
0C2EE:  BRA    C304
....................              case 18:
....................                Inputt.B18 = 1; 
0C2F0:  MOVLB  D
0C2F2:  BSF    x12.1
....................             break;
0C2F4:  BRA    C304
....................             case 19:
....................                Inputt.B19 = 1; 
0C2F6:  MOVLB  D
0C2F8:  BSF    x12.2
....................             break;
0C2FA:  BRA    C304
....................             case 20:
....................                Inputt.B20 = 1; 
0C2FC:  MOVLB  D
0C2FE:  BSF    x12.3
....................             break;
0C300:  BRA    C304
0C302:  MOVLB  D
....................                        
....................          }                 
....................       }
0C304:  BRA    C394
0C306:  MOVLB  0
....................       else
....................       {
....................          switch(i)
0C308:  MOVLW  01
0C30A:  MOVLB  D
0C30C:  SUBWF  xC1,W
0C30E:  ADDLW  EC
0C310:  BC    C394
0C312:  ADDLW  14
0C314:  MOVLB  0
0C316:  GOTO   C5EE
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
0C31A:  MOVLB  D
0C31C:  BCF    x10.0
....................             break;
0C31E:  BRA    C394
....................             case 2:
....................                Inputt.B2 = 0; 
0C320:  MOVLB  D
0C322:  BCF    x10.1
....................             break;
0C324:  BRA    C394
....................             case 3:
....................                Inputt.B3 = 0; 
0C326:  MOVLB  D
0C328:  BCF    x10.2
....................             break;
0C32A:  BRA    C394
....................             case 4:
....................                Inputt.B4 = 0; 
0C32C:  MOVLB  D
0C32E:  BCF    x10.3
....................             break;
0C330:  BRA    C394
....................             case 5:
....................                Inputt.B5 = 0; 
0C332:  MOVLB  D
0C334:  BCF    x10.4
....................             break;
0C336:  BRA    C394
....................             case 6:
....................                Inputt.B6 = 0; 
0C338:  MOVLB  D
0C33A:  BCF    x10.5
....................             break;
0C33C:  BRA    C394
....................             case 7:
....................                Inputt.B7 = 0; 
0C33E:  MOVLB  D
0C340:  BCF    x10.6
....................              break;
0C342:  BRA    C394
....................              case 8:
....................                Inputt.B8 = 0; 
0C344:  MOVLB  D
0C346:  BCF    x10.7
....................             break;
0C348:  BRA    C394
....................             case 9:
....................                Inputt.B9 = 0; 
0C34A:  MOVLB  D
0C34C:  BCF    x11.0
....................             break;
0C34E:  BRA    C394
....................             case 10:
....................                Inputt.B10 = 0; 
0C350:  MOVLB  D
0C352:  BCF    x11.1
....................             break;
0C354:  BRA    C394
....................             case 11:
....................                Inputt.B11 = 0; 
0C356:  MOVLB  D
0C358:  BCF    x11.2
....................             break;
0C35A:  BRA    C394
....................             case 12:
....................                Inputt.B12 = 0; 
0C35C:  MOVLB  D
0C35E:  BCF    x11.3
....................             break;
0C360:  BRA    C394
....................             case 13:
....................                Inputt.B13 = 0; 
0C362:  MOVLB  D
0C364:  BCF    x11.4
....................             break;
0C366:  BRA    C394
....................             case 14:
....................                Inputt.B14 = 0; 
0C368:  MOVLB  D
0C36A:  BCF    x11.5
....................             break;
0C36C:  BRA    C394
....................             case 15:
....................                Inputt.B15 = 0; 
0C36E:  MOVLB  D
0C370:  BCF    x11.6
....................             break;
0C372:  BRA    C394
....................             case 16:
....................                 Inputt.B16 = 0;
0C374:  MOVLB  D
0C376:  BCF    x11.7
....................              break;
0C378:  BRA    C394
....................              case 17:
....................                Inputt.B17 = 0; 
0C37A:  MOVLB  D
0C37C:  BCF    x12.0
....................              break;
0C37E:  BRA    C394
....................              case 18:
....................                Inputt.B18 = 0; 
0C380:  MOVLB  D
0C382:  BCF    x12.1
....................             break;
0C384:  BRA    C394
....................             case 19:
....................                Inputt.B19 = 0; 
0C386:  MOVLB  D
0C388:  BCF    x12.2
....................             break;
0C38A:  BRA    C394
....................             case 20:
....................                Inputt.B20 = 0; 
0C38C:  MOVLB  D
0C38E:  BCF    x12.3
....................             break;
0C390:  BRA    C394
0C392:  MOVLB  D
....................                        
....................          }                 
....................       }   
0C394:  INCF   xC1,F
0C396:  BRA    C214
....................    }
....................    
....................    //GSM SIM900 Init
....................    delay_ms(1000);
0C398:  MOVLW  04
0C39A:  MOVWF  xC3
0C39C:  MOVLW  FA
0C39E:  MOVWF  xCC
0C3A0:  MOVLB  0
0C3A2:  CALL   0A28
0C3A6:  MOVLB  D
0C3A8:  DECFSZ xC3,F
0C3AA:  BRA    C39C
....................    fprintf(CH2,"AT+CMGF=1"); 
0C3AC:  MOVLW  1E
0C3AE:  MOVWF  FF6
0C3B0:  MOVLW  0A
0C3B2:  MOVWF  FF7
0C3B4:  MOVLB  0
0C3B6:  CALL   2526
....................    putc('\n',CH2);
0C3BA:  MOVLW  0A
0C3BC:  MOVLB  D
0C3BE:  MOVWF  xCD
0C3C0:  MOVLB  0
0C3C2:  CALL   24E0
....................    delay_ms(50);
0C3C6:  MOVLW  32
0C3C8:  MOVLB  D
0C3CA:  MOVWF  xCC
0C3CC:  MOVLB  0
0C3CE:  CALL   0A28
....................    
....................    SendSMS.B1 =0;
0C3D2:  MOVLB  D
0C3D4:  BCF    x48.0
....................    SendSMS.B2 =0;
0C3D6:  BCF    x48.1
....................    SendSMS.B3 =0;
0C3D8:  BCF    x48.2
....................    SendSMS.B4 =0;
0C3DA:  BCF    x48.3
....................    SendSMS.B5 =0;
0C3DC:  BCF    x48.4
....................    SendSMS.B6 =0;
0C3DE:  BCF    x48.5
....................    SendSMS.B7 =0;
0C3E0:  BCF    x48.6
....................    SendSMS.B8 =0;
0C3E2:  BCF    x48.7
....................    SendSMS.B9 =0;
0C3E4:  BCF    x49.0
....................    SendSMS.B10 =0;
0C3E6:  BCF    x49.1
....................    SendSMS.B11 =0;
0C3E8:  BCF    x49.2
....................    SendSMS.B12 =0;
0C3EA:  BCF    x49.3
....................    SendSMS.B13 =0;
0C3EC:  BCF    x49.4
....................    SendSMS.B14 =0;
0C3EE:  BCF    x49.5
....................    SendSMS.B15 =0;
0C3F0:  BCF    x49.6
....................    SendSMS.B16 =0;
0C3F2:  BCF    x49.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
0C3F4:  CLRF   xC2
0C3F6:  MOVF   xC2,W
0C3F8:  SUBLW  09
0C3FA:  BNC   C42E
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
0C3FC:  CLRF   03
0C3FE:  MOVF   xC2,W
0C400:  ADDLW  81
0C402:  MOVWF  FE9
0C404:  MOVLW  0A
0C406:  ADDWFC 03,W
0C408:  MOVWF  FEA
0C40A:  MOVLW  32
0C40C:  ADDWF  xC2,W
0C40E:  MOVWF  xC5
0C410:  MOVFF  FF2,DC6
0C414:  BCF    FF2.7
0C416:  CLRF   FAA
0C418:  MOVFF  DC5,FA9
0C41C:  BCF    FA6.6
0C41E:  BCF    FA6.7
0C420:  BSF    FA6.0
0C422:  MOVF   FA8,W
0C424:  BTFSC  xC6.7
0C426:  BSF    FF2.7
0C428:  MOVWF  FEF
0C42A:  INCF   xC2,F
0C42C:  BRA    C3F6
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
0C42E:  CLRF   03
0C430:  MOVF   xC2,W
0C432:  ADDLW  81
0C434:  MOVWF  FE9
0C436:  MOVLW  0A
0C438:  ADDWFC 03,W
0C43A:  MOVWF  FEA
0C43C:  CLRF   FEF
....................    delay_ms(500);
0C43E:  MOVLW  02
0C440:  MOVWF  xC3
0C442:  MOVLW  FA
0C444:  MOVWF  xCC
0C446:  MOVLB  0
0C448:  CALL   0A28
0C44C:  MOVLB  D
0C44E:  DECFSZ xC3,F
0C450:  BRA    C442
....................  
....................    
....................    while(TRUE)
....................    {
....................   
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
0C452:  CLRF   xCB
0C454:  SETF   xCC
0C456:  MOVLB  0
0C458:  CALL   243C
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
0C45C:  MOVLB  D
0C45E:  CLRF   xCB
0C460:  SETF   xCC
0C462:  MOVLB  0
0C464:  CALL   2452
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
0C468:  MOVLW  02
0C46A:  MOVLB  D
0C46C:  MOVWF  xCB
0C46E:  SETF   xCC
0C470:  MOVLB  0
0C472:  CALL   243C
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
0C476:  MOVLW  02
0C478:  MOVLB  D
0C47A:  MOVWF  xCB
0C47C:  SETF   xCC
0C47E:  MOVLB  0
0C480:  CALL   2452
....................       restart_wdt();   
0C484:  CLRWDT
....................       if(recieve_completed == 1)
0C486:  BTFSS  30.6
0C488:  BRA    C490
....................       {
....................          Modbus_Function();
0C48A:  GOTO   3904
....................          recieve_completed = 0 ;
0C48E:  BCF    30.6
....................       }
.................... 
....................       check_ack();
0C490:  CALL   3552
....................       check_reset();
0C494:  CALL   36E0
....................       check_test();      
0C498:  GOTO   B4E8
....................       restart_wdt();
0C49C:  CLRWDT
....................       
....................       if(StartRead)
0C49E:  BTFSS  30.5
0C4A0:  BRA    C5A6
....................       {
....................          //initialIC();
....................          Read_input(); restart_wdt(); //Must be first
0C4A2:  CALL   2A8E
0C4A6:  CLRWDT
....................          Anal_Function(); restart_wdt();
0C4A8:  CALL   71B2
0C4AC:  CLRWDT
....................          Send_Ouput(); restart_wdt();
0C4AE:  GOTO   B5E4
0C4B2:  CLRWDT
....................         // Driver595(); restart_wdt();      
....................         // output_toggle(PIN_A0);
....................          
....................          if(RefreshConfigData)
0C4B4:  BTFSS  30.3
0C4B6:  BRA    C5A6
....................          {
....................             RefreshConfigData =0;
0C4B8:  BCF    30.3
....................             Read_Config();
0C4BA:  CALL   0B46
....................             //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................      
....................             IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
0C4BE:  MOVLB  D
0C4C0:  CLRF   xC3
0C4C2:  SETF   xC4
0C4C4:  MOVLB  0
0C4C6:  CALL   0B20
....................             IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
0C4CA:  MOVLB  D
0C4CC:  CLRF   xC3
0C4CE:  SETF   xC4
0C4D0:  MOVLB  0
0C4D2:  CALL   0B32
....................             IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
0C4D6:  MOVLW  02
0C4D8:  MOVLB  D
0C4DA:  MOVWF  xC3
0C4DC:  SETF   xC4
0C4DE:  MOVLB  0
0C4E0:  CALL   0B20
....................             IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input
0C4E4:  MOVLW  02
0C4E6:  MOVLB  D
0C4E8:  MOVWF  xC3
0C4EA:  SETF   xC4
0C4EC:  MOVLB  0
0C4EE:  CALL   0B32
....................             //  jj
....................             IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0C4F2:  MOVLB  D
0C4F4:  CLRF   xCD
0C4F6:  MOVLW  06
0C4F8:  MOVWF  xCE
0C4FA:  SETF   xCF
0C4FC:  MOVLB  0
0C4FE:  CALL   0A58
....................             IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0C502:  MOVLB  D
0C504:  CLRF   xCD
0C506:  MOVLW  16
0C508:  MOVWF  xCE
0C50A:  SETF   xCF
0C50C:  MOVLB  0
0C50E:  CALL   0A58
....................             IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0C512:  MOVLW  02
0C514:  MOVLB  D
0C516:  MOVWF  xCD
0C518:  MOVLW  06
0C51A:  MOVWF  xCE
0C51C:  SETF   xCF
0C51E:  MOVLB  0
0C520:  CALL   0A58
....................             IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0C524:  MOVLW  02
0C526:  MOVLB  D
0C528:  MOVWF  xCD
0C52A:  MOVLW  16
0C52C:  MOVWF  xCE
0C52E:  SETF   xCF
0C530:  MOVLB  0
0C532:  CALL   0A58
....................             //  jj
....................             IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0C536:  MOVLW  04
0C538:  MOVLB  D
0C53A:  MOVWF  xC3
0C53C:  CLRF   xC4
0C53E:  MOVLB  0
0C540:  CALL   0B20
....................             IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0C544:  MOVLW  04
0C546:  MOVLB  D
0C548:  MOVWF  xC3
0C54A:  CLRF   xC4
0C54C:  MOVLB  0
0C54E:  CALL   0B32
....................             IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0C552:  MOVLW  06
0C554:  MOVLB  D
0C556:  MOVWF  xC3
0C558:  CLRF   xC4
0C55A:  MOVLB  0
0C55C:  CALL   0B20
....................             IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0C560:  MOVLW  06
0C562:  MOVLB  D
0C564:  MOVWF  xC3
0C566:  CLRF   xC4
0C568:  MOVLB  0
0C56A:  CALL   0B32
....................             IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0C56E:  MOVLW  08
0C570:  MOVLB  D
0C572:  MOVWF  xC3
0C574:  CLRF   xC4
0C576:  MOVLB  0
0C578:  CALL   0B20
....................             IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0C57C:  MOVLW  08
0C57E:  MOVLB  D
0C580:  MOVWF  xC3
0C582:  CLRF   xC4
0C584:  MOVLB  0
0C586:  CALL   0B32
....................             IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0C58A:  MOVLW  0A
0C58C:  MOVLB  D
0C58E:  MOVWF  xC3
0C590:  CLRF   xC4
0C592:  MOVLB  0
0C594:  CALL   0B20
....................             IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0C598:  MOVLW  0A
0C59A:  MOVLB  D
0C59C:  MOVWF  xC3
0C59E:  CLRF   xC4
0C5A0:  MOVLB  0
0C5A2:  CALL   0B32
....................          }
....................          
....................       }     
0C5A6:  MOVLB  D
0C5A8:  BRA    C452
.................... 
....................    }
....................    
.................... }
0C5AA:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
