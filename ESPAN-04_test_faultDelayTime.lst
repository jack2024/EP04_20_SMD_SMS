CCS PCH C Compiler, Version 5.091, 5967               28-¡.Â.-21 16:34

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - SMS\ESPAN-04_test_faultDelayTime.lst

               ROM used:   48462 bytes (74%)
                           Largest free fragment is 17070
               RAM used:   3697 (95%) at main() level
                           3715 (95%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   B04A
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   05A6
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   0596
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - SMS\string.h"
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STRING
.................... #define _STRING
.................... #include <stddef.h>
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _STDDEF
.................... 
.................... #define _STDDEF
.................... 
.................... #if sizeof(unsigned int8 *)==1
.................... #define ptrdiff_t unsigned int8
.................... #else
.................... #define ptrdiff_t unsigned int16
.................... #endif
.................... 
.................... #if defined(__PCB__) || defined(__PCM__)
.................... #define size_t unsigned int8
.................... #else
.................... #define size_t unsigned int16
.................... #endif
.................... #define wchar_t unsigned char
.................... #define NULL 0
.................... 
.................... #define offsetof(s,f) (offsetofbit(s,f)/8)
.................... 
.................... #endif
.................... 
.................... #include <ctype.h>
.................... ////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            ////
.................... //// This source code may only be used by licensed users of the CCS C   ////
.................... //// compiler.  This source code may only be distributed to other       ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  ////
.................... //// or distribution is permitted without written permission.           ////
.................... //// Derivative programs created using this software in object code     ////
.................... //// form are not restricted in any way.                                ////
.................... ////////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef _CTYPE
.................... #define _CTYPE
.................... 
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")
.................... #define isdigit(x)  isamong(x,"0123456789")
.................... #define isspace(x)  ((x)==' ')
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef")
.................... #define iscntrl(x)  ((x)<' ')
.................... #define isprint(x)  ((x)>=' ')
.................... #define isgraph(x)  ((x)>' ')
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x))
.................... 
.................... #endif
.................... 
.................... 
.................... 
.................... 
.................... 
.................... //////////////////////////////////////////////
.................... //// Uncomment the following define to    ////
.................... //// allow some functions to use a        ////
.................... //// quicker algorithm, but use more ROM  ////
.................... ////                                      ////
.................... //// #define FASTER_BUT_MORE_ROM          ////
.................... //////////////////////////////////////////////
.................... 
.................... #device PIC18F26K22 
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
002DA:  DATA 41,54
002DC:  DATA 2B,43
002DE:  DATA 4D,47
002E0:  DATA 46,3D
002E2:  DATA 31,00
002E4:  DATA 41,54
002E6:  DATA 2B,43
002E8:  DATA 4D,47
002EA:  DATA 53,3D
002EC:  DATA 22,00
*
00658:  DATA 41,54
0065A:  DATA 2B,43
0065C:  DATA 4D,47
0065E:  DATA 46,3D
00660:  DATA 31,00
*
021FA:  MOVLB  E
021FC:  MOVF   x78,W
021FE:  ANDLW  07
02200:  MOVWF  00
02202:  RRCF   x78,W
02204:  MOVWF  01
02206:  RRCF   01,F
02208:  RRCF   01,F
0220A:  MOVLW  1F
0220C:  ANDWF  01,F
0220E:  MOVF   01,W
02210:  ADDWF  x79,W
02212:  MOVWF  FE9
02214:  MOVLW  00
02216:  ADDWFC x7A,W
02218:  MOVWF  FEA
0221A:  MOVFF  FEF,01
0221E:  INCF   00,F
02220:  BRA    2224
02222:  RRCF   01,F
02224:  DECFSZ 00,F
02226:  BRA    2222
02228:  MOVLW  01
0222A:  ANDWF  01,F
0222C:  MOVLB  0
0222E:  RETURN 0
02230:  MOVLB  E
02232:  MOVF   x7B,W
02234:  MULWF  x7D
02236:  MOVFF  FF3,01
0223A:  MOVFF  FF4,00
0223E:  MULWF  x7E
02240:  MOVF   FF3,W
02242:  ADDWF  00,F
02244:  MOVF   x7C,W
02246:  MULWF  x7D
02248:  MOVF   FF3,W
0224A:  ADDWFC 00,W
0224C:  MOVWF  02
0224E:  MOVLB  0
02250:  RETURN 0
02252:  MOVLB  E
02254:  MOVF   x78,W
02256:  ANDLW  07
02258:  MOVWF  00
0225A:  RRCF   x78,W
0225C:  MOVWF  01
0225E:  RRCF   01,F
02260:  RRCF   01,F
02262:  MOVLW  1F
02264:  ANDWF  01,F
02266:  MOVF   01,W
02268:  ADDWF  x7A,W
0226A:  MOVWF  FE9
0226C:  MOVLW  00
0226E:  ADDWFC x7B,W
02270:  MOVWF  FEA
02272:  CLRF   01
02274:  INCF   01,F
02276:  INCF   00,F
02278:  BRA    227C
0227A:  RLCF   01,F
0227C:  DECFSZ 00,F
0227E:  BRA    227A
02280:  MOVF   x79,F
02282:  BZ    228A
02284:  MOVF   01,W
02286:  IORWF  FEF,F
02288:  BRA    2290
0228A:  COMF   01,F
0228C:  MOVF   01,W
0228E:  ANDWF  FEF,F
02290:  MOVLB  0
02292:  RETURN 0
*
02DC8:  ADDWF  FE8,W
02DCA:  CLRF   FF7
02DCC:  RLCF   FF7,F
02DCE:  ADDLW  E3
02DD0:  MOVWF  FF6
02DD2:  MOVLW  2D
02DD4:  ADDWFC FF7,F
02DD6:  TBLRD*-
02DD8:  MOVF   FF5,W
02DDA:  MOVWF  FFA
02DDC:  TBLRD*
02DDE:  MOVF   FF5,W
02DE0:  MOVWF  FF9
02DE2:  DATA 8E,25
02DE4:  DATA 96,25
02DE6:  DATA 9E,25
02DE8:  DATA A6,25
02DEA:  DATA AE,25
02DEC:  DATA B6,25
02DEE:  DATA BE,25
02DF0:  DATA C6,25
02DF2:  DATA CE,25
02DF4:  DATA D6,25
02DF6:  DATA DE,25
02DF8:  DATA E6,25
02DFA:  DATA EE,25
02DFC:  DATA F6,25
02DFE:  DATA FE,25
02E00:  DATA 06,26
02E02:  DATA 0E,26
02E04:  DATA 16,26
02E06:  DATA 1E,26
02E08:  DATA 26,26
02E0A:  ADDWF  FE8,W
02E0C:  CLRF   FF7
02E0E:  RLCF   FF7,F
02E10:  ADDLW  25
02E12:  MOVWF  FF6
02E14:  MOVLW  2E
02E16:  ADDWFC FF7,F
02E18:  TBLRD*-
02E1A:  MOVF   FF5,W
02E1C:  MOVWF  FFA
02E1E:  TBLRD*
02E20:  MOVF   FF5,W
02E22:  MOVWF  FF9
02E24:  DATA 10,27
02E26:  DATA 18,27
02E28:  DATA 20,27
02E2A:  DATA 28,27
02E2C:  DATA 30,27
02E2E:  DATA 38,27
02E30:  DATA 40,27
02E32:  DATA 48,27
02E34:  DATA 50,27
02E36:  DATA 58,27
02E38:  DATA 60,27
02E3A:  DATA 68,27
02E3C:  DATA 70,27
02E3E:  DATA 78,27
02E40:  DATA 80,27
02E42:  DATA 88,27
02E44:  DATA 90,27
02E46:  DATA 98,27
02E48:  DATA A0,27
02E4A:  DATA A8,27
02E4C:  ADDWF  FE8,W
02E4E:  CLRF   FF7
02E50:  RLCF   FF7,F
02E52:  ADDLW  67
02E54:  MOVWF  FF6
02E56:  MOVLW  2E
02E58:  ADDWFC FF7,F
02E5A:  TBLRD*-
02E5C:  MOVF   FF5,W
02E5E:  MOVWF  FFA
02E60:  TBLRD*
02E62:  MOVF   FF5,W
02E64:  MOVWF  FF9
02E66:  DATA C6,28
02E68:  DATA CE,28
02E6A:  DATA D6,28
02E6C:  DATA DE,28
02E6E:  DATA E6,28
02E70:  DATA EE,28
02E72:  DATA F6,28
02E74:  DATA FE,28
02E76:  DATA 06,29
02E78:  DATA 0E,29
02E7A:  DATA 16,29
02E7C:  DATA 1E,29
02E7E:  DATA 26,29
02E80:  DATA 2E,29
02E82:  DATA 36,29
02E84:  DATA 3E,29
02E86:  DATA 46,29
02E88:  DATA 4E,29
02E8A:  DATA 56,29
02E8C:  DATA 5E,29
02E8E:  ADDWF  FE8,W
02E90:  CLRF   FF7
02E92:  RLCF   FF7,F
02E94:  ADDLW  A9
02E96:  MOVWF  FF6
02E98:  MOVLW  2E
02E9A:  ADDWFC FF7,F
02E9C:  TBLRD*-
02E9E:  MOVF   FF5,W
02EA0:  MOVWF  FFA
02EA2:  TBLRD*
02EA4:  MOVF   FF5,W
02EA6:  MOVWF  FF9
02EA8:  DATA 46,2A
02EAA:  DATA 4E,2A
02EAC:  DATA 56,2A
02EAE:  DATA 5E,2A
02EB0:  DATA 66,2A
02EB2:  DATA 6E,2A
02EB4:  DATA 76,2A
02EB6:  DATA 7E,2A
02EB8:  DATA 86,2A
02EBA:  DATA 8E,2A
02EBC:  DATA 96,2A
02EBE:  DATA 9E,2A
02EC0:  DATA A6,2A
02EC2:  DATA AE,2A
02EC4:  DATA B6,2A
02EC6:  DATA BE,2A
02EC8:  DATA C6,2A
02ECA:  DATA CE,2A
02ECC:  DATA D6,2A
02ECE:  DATA DE,2A
*
033D6:  TBLRD*+
033D8:  MOVF   FF5,F
033DA:  BZ    33F4
033DC:  MOVFF  FF6,E6D
033E0:  MOVFF  FF7,E6E
033E4:  MOVFF  FF5,E6F
033E8:  RCALL  3390
033EA:  MOVFF  E6D,FF6
033EE:  MOVFF  E6E,FF7
033F2:  BRA    33D6
033F4:  RETURN 0
*
0AF6E:  MOVF   FEF,F
0AF70:  BZ    AF92
0AF72:  MOVFF  FEA,E6E
0AF76:  MOVFF  FE9,E6D
0AF7A:  MOVFF  FEF,E6F
0AF7E:  CALL   3390
0AF82:  MOVFF  E6E,FEA
0AF86:  MOVFF  E6D,FE9
0AF8A:  INCF   FE9,F
0AF8C:  BTFSC  FD8.2
0AF8E:  INCF   FEA,F
0AF90:  BRA    AF6E
0AF92:  RETURN 0
*
0BCCE:  ADDWF  FE8,W
0BCD0:  CLRF   FF7
0BCD2:  RLCF   FF7,F
0BCD4:  ADDLW  E9
0BCD6:  MOVWF  FF6
0BCD8:  MOVLW  BC
0BCDA:  ADDWFC FF7,F
0BCDC:  TBLRD*-
0BCDE:  MOVF   FF5,W
0BCE0:  MOVWF  FFA
0BCE2:  TBLRD*
0BCE4:  MOVF   FF5,W
0BCE6:  MOVWF  FF9
0BCE8:  DATA 30,B8
0BCEA:  DATA 38,B8
0BCEC:  DATA 40,B8
0BCEE:  DATA 48,B8
0BCF0:  DATA 50,B8
0BCF2:  DATA 58,B8
0BCF4:  DATA 60,B8
0BCF6:  DATA 68,B8
0BCF8:  DATA 70,B8
0BCFA:  DATA 78,B8
0BCFC:  DATA 80,B8
0BCFE:  DATA 88,B8
0BD00:  DATA 90,B8
0BD02:  DATA 98,B8
0BD04:  DATA A0,B8
0BD06:  DATA A8,B8
0BD08:  DATA B0,B8
0BD0A:  DATA B8,B8
0BD0C:  DATA C0,B8
0BD0E:  DATA C8,B8
0BD10:  ADDWF  FE8,W
0BD12:  CLRF   FF7
0BD14:  RLCF   FF7,F
0BD16:  ADDLW  2B
0BD18:  MOVWF  FF6
0BD1A:  MOVLW  BD
0BD1C:  ADDWFC FF7,F
0BD1E:  TBLRD*-
0BD20:  MOVF   FF5,W
0BD22:  MOVWF  FFA
0BD24:  TBLRD*
0BD26:  MOVF   FF5,W
0BD28:  MOVWF  FF9
0BD2A:  DATA E8,B8
0BD2C:  DATA F0,B8
0BD2E:  DATA F8,B8
0BD30:  DATA 00,B9
0BD32:  DATA 08,B9
0BD34:  DATA 10,B9
0BD36:  DATA 18,B9
0BD38:  DATA 20,B9
0BD3A:  DATA 28,B9
0BD3C:  DATA 30,B9
0BD3E:  DATA 38,B9
0BD40:  DATA 40,B9
0BD42:  DATA 48,B9
0BD44:  DATA 50,B9
0BD46:  DATA 58,B9
0BD48:  DATA 60,B9
0BD4A:  DATA 68,B9
0BD4C:  DATA 70,B9
0BD4E:  DATA 78,B9
0BD50:  DATA 80,B9
.................... 
.................... /*Copying functions*/
.................... /* standard template:
....................    void *memmove(void *s1, void *s2, size_t n).
....................    Copies max of n characters safely (not following ending '\0')
....................    from s2 in s1; if s2 has less than n characters, appends 0 */
.................... 
.................... unsigned char *memmove(void *s1,void *s2,size_t n)
.................... {
....................    unsigned char *sc1;
....................    unsigned char *sc2;
....................    sc1=s1;
....................    sc2=s2;
....................    if(sc2<sc1 && sc1 <sc2 +n)
....................       for(sc1+=n,sc2+=n;0<n;--n)
....................          *--sc1=*--sc2;
....................    else
....................       for(;0<n;--n)
....................          *sc1++=*sc2++;
....................   return s1;
....................   }
.................... 
.................... /* Standard template: char *strcpy(char *s1, const char *s2)
....................    copies the string s2 including the null character to s1.
....................    This is a compiler built in to handle the different address
....................    spaces */
.................... 
.................... #define strcopy strcpy
.................... 
.................... /* standard template:
....................    char *strncpy(char *s1, const char *s2, size_t n).
....................    Copies max of n characters (not following ending '\0')
....................    from s2 in s1; if s2 has less than n characters, appends 0 */
.................... 
.................... char *strncpy(char *s1, char *s2, size_t n)
.................... {
....................   char *s;
.................... 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--)
....................      *s++ = *s2++;
....................   for (; n > 0; n--)
....................      *s++ = '\0';
.................... 
....................   return(s1);
.................... }
.................... /***********************************************************/
.................... 
.................... /*concatenation functions*/
.................... /* standard template: char *strcat(char *s1, const char *s2)
.................... appends s2 to s1*/
.................... 
.................... char *strcat(char *s1, char *s2)
.................... {
....................    unsigned char *s;
.................... 
....................    for (s = s1; *s != '\0'; ++s);
*
06DF2:  MOVFF  E6E,E72
06DF6:  MOVFF  E6D,E71
06DFA:  MOVFF  E72,FEA
06DFE:  MOVLB  E
06E00:  MOVFF  E71,FE9
06E04:  MOVF   FEF,F
06E06:  BZ    6E14
06E08:  INCF   x71,F
06E0A:  BTFSC  FD8.2
06E0C:  INCF   x72,F
06E0E:  MOVLB  0
06E10:  BRA    6DFA
06E12:  MOVLB  E
....................    while(*s2 != '\0')
06E14:  MOVFF  E70,FEA
06E18:  MOVFF  E6F,FE9
06E1C:  MOVF   FEF,F
06E1E:  BZ    6E46
....................    {
....................       *s = *s2;
06E20:  MOVFF  E70,FEA
06E24:  MOVFF  E6F,FE9
06E28:  MOVFF  FEF,E75
06E2C:  MOVFF  E72,FEA
06E30:  MOVFF  E71,FE9
06E34:  MOVFF  E75,FEF
....................       ++s;
06E38:  INCF   x71,F
06E3A:  BTFSC  FD8.2
06E3C:  INCF   x72,F
....................       ++s2;
06E3E:  INCF   x6F,F
06E40:  BTFSC  FD8.2
06E42:  INCF   x70,F
06E44:  BRA    6E14
....................    }
.................... 
....................    *s = '\0';
06E46:  MOVFF  E72,FEA
06E4A:  MOVFF  E71,FE9
06E4E:  CLRF   FEF
....................    return(s1);
06E50:  MOVFF  E6D,01
06E54:  MOVFF  E6E,02
06E58:  MOVLB  0
06E5A:  RETURN 0
.................... }
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n)
.................... appends not more than n characters from s2 to s1*/
.................... 
.................... char *strncat(char *s1, char *s2, size_t n)
.................... {
....................    char *s;
.................... 
....................    for (s = s1; *s != '\0'; ++s);
....................    while(*s2 != '\0' && 0<n)
....................    {
....................       *s = *s2;
....................       ++s;
....................       ++s2;
....................       --n;
....................    }
.................... 
....................    *s = '\0';
....................    return(s1);
.................... }
.................... 
.................... /***********************************************************/
.................... 
.................... 
.................... /*comparison functions*/
.................... /* standard template: signed int memcmp(void *s1, void *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int memcmp(void * s1,void *s2,size_t n)
.................... {
.................... unsigned char *su1, *su2;
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n)
.................... {
....................    if(*su1!=*su2)
....................       return ((*su1<*su2)?-1:1);
.................... }
.................... return 0;
.................... }
.................... 
.................... /* standard template: int strcmp(const char *s1, const char *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int strcmp(char *s1, char *s2)
.................... {
....................    for (; *s1 == *s2; s1++, s2++)
*
0AEF4:  MOVFF  E6E,FEA
0AEF8:  MOVLB  E
0AEFA:  MOVFF  E6D,FE9
0AEFE:  MOVFF  FEF,E71
0AF02:  MOVFF  E70,FEA
0AF06:  MOVFF  E6F,FE9
0AF0A:  MOVF   FEF,W
0AF0C:  SUBWF  x71,W
0AF0E:  BNZ   AF3E
....................       if (*s1 == '\0')
0AF10:  MOVFF  E6E,03
0AF14:  MOVFF  E6D,FE9
0AF18:  MOVFF  03,FEA
0AF1C:  MOVF   FEF,F
0AF1E:  BNZ   AF26
....................          return(0);
0AF20:  MOVLW  00
0AF22:  MOVWF  01
0AF24:  BRA    AF68
0AF26:  MOVFF  E6E,03
0AF2A:  MOVF   x6D,W
0AF2C:  INCF   x6D,F
0AF2E:  BTFSC  FD8.2
0AF30:  INCF   x6E,F
0AF32:  INCF   x6F,F
0AF34:  BTFSC  FD8.2
0AF36:  INCF   x70,F
0AF38:  MOVLB  0
0AF3A:  BRA    AEF4
0AF3C:  MOVLB  E
....................    return((*s1 < *s2) ? -1: 1);
0AF3E:  MOVFF  E6E,03
0AF42:  MOVFF  E6D,FE9
0AF46:  MOVFF  03,FEA
0AF4A:  MOVFF  FEF,E71
0AF4E:  MOVFF  E70,03
0AF52:  MOVFF  E6F,FE9
0AF56:  MOVFF  03,FEA
0AF5A:  MOVF   FEF,W
0AF5C:  SUBWF  x71,W
0AF5E:  BC    AF64
0AF60:  MOVLW  FF
0AF62:  BRA    AF66
0AF64:  MOVLW  01
0AF66:  MOVWF  01
0AF68:  MOVLB  0
0AF6A:  GOTO   AFAA (RETURN)
.................... }
.................... /* standard template: int strcoll(const char *s1, const char *s2).
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */
.................... 
.................... signed int strcoll(char *s1, char *s2)
.................... {
....................    for (; *s1 == *s2; s1++, s2++)
....................       if (*s1 == '\0')
....................          return(0);
....................    return((*s1 < *s2) ? -1: 1);
.................... }
.................... 
.................... /* standard template:
....................    int strncmp(const char *s1, const char *s2, size_t n).
....................    Compares max of n characters (not following 0) from s1 to s2;
....................    returns same as strcmp */
.................... 
.................... signed int strncmp(char *s1, char *s2, size_t n)
.................... {
....................    for (; n > 0; s1++, s2++, n--)
....................       if (*s1 != *s2)
....................          return((*s1 <*s2) ? -1: 1);
....................       else if (*s1 == '\0')
....................          return(0);
....................    return(0);
.................... }
.................... /* standard template:
....................    int strxfrm(const char *s1, const char *s2, size_t n).
....................    transforms maximum of n characters from s2 and places them into s1, returns number of chars written ot s1.
....................    if s1 is NULL and n is 0, then it returns the length of s2.*/
.................... size_t strxfrm(char *s1, char *s2, size_t n)
.................... {
....................    char c;
....................    unsigned int8 n1;
....................    
....................    if (!s1 && !n)
....................       n = -1; //find length
.................... 
....................    n1 = 0;
....................    
....................    for (; n1 < n; n1++)
....................    {
....................       c = *s2++;
....................       if (!c)
....................          break;
....................       if (s1)
....................          *s1++ = c;
....................    }
.................... 
....................   return(n1);
.................... }
.................... 
.................... 
.................... 
.................... 
.................... 
.................... /***********************************************************/
.................... /*Search functions*/
.................... /* standard template: void *memchr(const char *s, int c).
....................    Finds first occurrence of c in n characters of s */
.................... 
.................... char *memchr(void *s,unsigned int8 c,size_t n)
.................... {
....................    char uc;
....................    char *su;
....................    uc=c;
....................    for(su=s;0<n;++su,--n)
....................       if(*su==uc)
....................       return su;
....................    return NULL;
.................... }
.................... 
.................... /* standard template: char *strchr(const char *s, int c).
....................    Finds first occurrence of c in s */
.................... 
.................... char *strchr(char *s, char c)
.................... {
....................    for (; *s != c; s++)
....................       if (*s == '\0')
....................          return(0);
....................    return(s);
.................... }
.................... /* standard template:
....................    size_t strcspn(const char *s1, const char *s2).
....................    Computes length of max initial segment of s1 that
....................    consists entirely of characters NOT from s2*/
.................... 
.................... size_t strcspn(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; *sc2 != 0; sc2++)
....................          if (*sc1 == *sc2)
....................             return(sc1 - s1);
....................    return(sc1 - s1);
.................... }
.................... /* standard template:
....................    char *strpbrk(const char *s1, const char *s2).
....................    Locates first occurence of any character from s2 in s1;
....................    returns s1 if s2 is empty string */
.................... 
.................... char *strpbrk(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; *sc2 != 0; sc2++)
....................          if (*sc1 == *sc2)
....................             return(sc1);
....................    return(0);
.................... }
.................... 
.................... 
.................... /* standard template: char *strrchr(const char *s, int c).
....................    Finds last occurrence of c in s */
.................... 
.................... char *strrchr(char *s, char c)
.................... {
....................    char *p;
.................... 
....................    for (p = 0; ; s++)
....................    {
....................       if (*s == c)
....................          p = s;
....................       if (*s == '\0')
....................          return(p);
....................    }
.................... }
.................... /* computes length of max initial segment of s1 consisting
....................    entirely of characters from s2 */
.................... 
.................... size_t strspn(char *s1, char *s2)
.................... {
....................    char *sc1, *sc2;
.................... 
....................    for (sc1 = s1; *sc1 != 0; sc1++)
....................       for (sc2 = s2; ; sc2++)
....................     if (*sc2 == '\0')
....................        return(sc1 - s1);
....................          else if (*sc1 == *sc2)
....................             break;
....................    return(sc1 - s1);
.................... }
.................... /* standard template:
....................    char *strstr(const char *s1, const char *s2);
....................    Locates first occurence of character sequence s2 in s1;
....................    returns 0 if s2 is empty string
.................... 
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the
....................    file to use the faster algorithm */
.................... char *strstr(char *s1, char *s2)
.................... {
....................    char *s, *t;
.................... 
....................    #ifdef FASTER_BUT_MORE_ROM
....................    if (*s2 == '\0')
....................          return(s1);
....................    #endif
.................... 
....................    while (*s1)
....................    {
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t);
.................... 
....................       if (*t == '\0')
....................          return s1;
....................       ++s1;
....................       #ifdef FASTER_BUT_MORE_ROM
....................          while(*s1 != '\0' && *s1 != *s2)
....................             ++s1;
....................       #endif
....................    }
....................    return 0;
.................... }
.................... 
.................... /* standard template: size_t strlen(const char *s).
....................    Computes length of s1 (preceding terminating 0) */
.................... 
.................... size_t strlen(char *s)
.................... {
....................    char *sc;
.................... 
....................    for (sc = s; *sc != 0; sc++);
....................    return(sc - s);
.................... }
.................... 
.................... /* standard template: char *strtok(char *s1, const char *s2).
.................... 
....................    Finds next token in s1 delimited by a character from separator
....................    string s2 (which can be different from call to call).  First call
....................    starts at beginning of s1 searching for first character NOT
....................    contained in s2; returns 0 if none is found.
....................    If one is found, it is the start of first token (return value).
....................    Function then searches from there for a character contained in s2.
....................    If none is found, current token extends to end of s1, and subsequent
....................    searches for a token will return 0.  If one is found, it is
....................    overwritten by '\0', which terminates current token.  Function saves
....................    pointer to following character from which next search will start.
....................    Each subsequent call, with 0 as first argument, starts searching
....................    from saved pointer */
.................... 
.................... char *strtok(char *s1, char *s2)
.................... {
....................    char *beg, *end;
....................    static char *save;
.................... 
....................    beg = (s1)? s1: save;
....................    beg += strspn(beg, s2);
....................    if (*beg == '\0')
....................       return(0);
....................       
....................    end = strpbrk(beg, s2);
....................    if (end != '\0')
....................    {
....................       *end = '\0';
....................       end++;
....................       save = end;
....................    }
....................    else
....................       save = beg + strlen(beg);
....................    
....................    return(beg);
.................... }
.................... 
.................... /*****************************************************************/
.................... /*Miscellaneous functions*/
.................... /* standard template
.................... maps error number in errnum to an error message string
.................... Returns: Pointer to string
.................... */
.................... #ifdef _ERRNO
.................... char * strerror(unsigned int8 errnum)
.................... {
.................... static unsigned char s[13];
.................... switch( errnum)
.................... {
.................... case 0:
....................    strcpy(s,"no errors");
....................    return s;
.................... case EDOM :
....................    strcpy(s,"domain error");
....................    return s;
.................... case ERANGE:
....................    strcpy(s,"range error");
....................    return s;
.................... }
.................... }
.................... #ENDIF
.................... 
.................... /* standard template: size_t stricmp(const char *s1, const char *s2).
....................    Compares s1 to s2 ignoring case (upper vs. lower) */
.................... 
.................... signed int stricmp(char *s1, char *s2)
.................... {
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&((char)*s1==(char)*s2+(char)32||(char)*s2==(char)*s1+(char)32));
....................     s1++, s2++)
....................     if (*s1 == '\0')
....................        return(0);
....................  return((*s1 < *s2) ? -1: 1);
.................... }
.................... 
.................... 
.................... /* standard template: char *strlwr(char *s).
....................    Replaces uppercase letters by lowercase;
....................    returns pointer to new string s */
.................... 
.................... char *strlwr(char *s)
.................... {
....................    char *p;
.................... 
....................    for (p = s; *p != '\0'; p++)
....................       if (*p >= 'A' && *p <='Z')
....................          *p += 'a' - 'A';
....................    return(s);
.................... }
.................... 
.................... /* standard template: char *strupr(char *s).
....................    Replaces lowercase letters by upercase;
....................    returns pointer to new string s */
.................... 
.................... char *strupr(char *s)
.................... {
....................    char *p;
.................... 
....................    for (p = s; *p != '\0'; p++)
....................       if (*p >= 'a' && *p <='z')
....................          *p -= 'a' - 'A';
....................    return(s);
.................... }
.................... 
.................... 
.................... /************************************************************/
.................... 
.................... 
.................... #endif
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#device icd = true
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
00662:  MOVLW  0E
00664:  MOVWF  FEA
00666:  MOVLW  76
00668:  MOVWF  FE9
0066A:  MOVF   FEF,W
0066C:  BZ    0690
0066E:  MOVLW  05
00670:  MOVWF  01
00672:  MOVLW  BF
00674:  MOVWF  00
00676:  CLRWDT
00678:  DECFSZ 00,F
0067A:  BRA    0676
0067C:  DECFSZ 01,F
0067E:  BRA    0672
00680:  MOVLW  2E
00682:  MOVWF  00
00684:  DECFSZ 00,F
00686:  BRA    0684
00688:  NOP   
0068A:  CLRWDT
0068C:  DECFSZ FEF,F
0068E:  BRA    066E
00690:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
006C4:  BCF    F92.5
006C6:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
006C8:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
006CA:  MOVLB  E
006CC:  CLRF   x77
006CE:  MOVLW  0A
006D0:  MOVWF  x78
006D2:  MOVLW  AA
006D4:  MOVWF  x79
006D6:  MOVLB  0
006D8:  RCALL  0692
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
006DA:  MOVLW  02
006DC:  MOVLB  E
006DE:  MOVWF  x77
006E0:  MOVLW  0A
006E2:  MOVWF  x78
006E4:  MOVLW  AA
006E6:  MOVWF  x79
006E8:  MOVLB  0
006EA:  RCALL  0692
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
006EC:  MOVLW  04
006EE:  MOVLB  E
006F0:  MOVWF  x77
006F2:  MOVLW  0A
006F4:  MOVWF  x78
006F6:  MOVLW  AA
006F8:  MOVWF  x79
006FA:  MOVLB  0
006FC:  RCALL  0692
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
006FE:  MOVLW  06
00700:  MOVLB  E
00702:  MOVWF  x77
00704:  MOVLW  0A
00706:  MOVWF  x78
00708:  MOVLW  AA
0070A:  MOVWF  x79
0070C:  MOVLB  0
0070E:  RCALL  0692
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
00710:  MOVLW  08
00712:  MOVLB  E
00714:  MOVWF  x77
00716:  MOVLW  0A
00718:  MOVWF  x78
0071A:  MOVLW  AA
0071C:  MOVWF  x79
0071E:  MOVLB  0
00720:  RCALL  0692
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
00722:  MOVLW  0A
00724:  MOVLB  E
00726:  MOVWF  x77
00728:  MOVWF  x78
0072A:  MOVLW  AA
0072C:  MOVWF  x79
0072E:  MOVLB  0
00730:  RCALL  0692
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
00732:  MOVLW  0C
00734:  MOVLB  E
00736:  MOVWF  x77
00738:  MOVLW  0A
0073A:  MOVWF  x78
0073C:  MOVLW  AA
0073E:  MOVWF  x79
00740:  MOVLB  0
00742:  RCALL  0692
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
00744:  MOVLW  0E
00746:  MOVLB  E
00748:  MOVWF  x77
0074A:  MOVLW  0A
0074C:  MOVWF  x78
0074E:  MOVLW  AA
00750:  MOVWF  x79
00752:  MOVLB  0
00754:  RCALL  0692
....................    #endif
00756:  GOTO   B146 (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
00692:  BCF    F92.5
00694:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
00696:  MOVLB  E
00698:  MOVF   x77,W
0069A:  IORLW  40
0069C:  MOVWF  x7A
0069E:  MOVF   FC9,W
006A0:  MOVFF  E7A,FC9
006A4:  RRCF   FC7,W
006A6:  BNC   06A4
....................    #endif
....................    
....................    spi_write(reg);
006A8:  MOVF   FC9,W
006AA:  MOVFF  E78,FC9
006AE:  RRCF   FC7,W
006B0:  BNC   06AE
....................    spi_write(data);
006B2:  MOVF   FC9,W
006B4:  MOVFF  E79,FC9
006B8:  RRCF   FC7,W
006BA:  BNC   06B8
....................    
....................    output_high(IO_CS_PIN);
006BC:  BCF    F92.5
006BE:  BSF    F89.5
006C0:  MOVLB  0
006C2:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
0218A:  BCF    F92.5
0218C:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
0218E:  MOVLB  E
02190:  MOVF   x79,W
02192:  IORLW  41
02194:  MOVWF  x7C
02196:  MOVF   FC9,W
02198:  MOVFF  E7C,FC9
0219C:  RRCF   FC7,W
0219E:  BNC   219C
....................    #endif
....................    
....................    spi_write(reg);
021A0:  MOVF   FC9,W
021A2:  MOVFF  E7A,FC9
021A6:  RRCF   FC7,W
021A8:  BNC   21A6
....................    retVal = spi_read(0);
021AA:  MOVF   FC9,W
021AC:  CLRF   FC9
021AE:  RRCF   FC7,W
021B0:  BNC   21AE
021B2:  MOVFF  FC9,E7B
....................    
....................    output_high(IO_CS_PIN);
021B6:  BCF    F92.5
021B8:  BSF    F89.5
....................    
....................    return retVal;
021BA:  MOVFF  E7B,01
021BE:  MOVLB  0
021C0:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
02ED0:  MOVFF  E75,E77
02ED4:  MOVLW  0A
02ED6:  MOVLB  E
02ED8:  MOVWF  x78
02EDA:  MOVFF  E76,E79
02EDE:  MOVLB  0
02EE0:  CALL   0692
....................    #endif
02EE4:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
02EE6:  MOVFF  E75,E77
02EEA:  MOVLW  1A
02EEC:  MOVLB  E
02EEE:  MOVWF  x78
02EF0:  MOVFF  E76,E79
02EF4:  MOVLB  0
02EF6:  CALL   0692
....................    #endif
02EFA:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
021C2:  MOVFF  E77,E79
021C6:  MOVLW  09
021C8:  MOVLB  E
021CA:  MOVWF  x7A
021CC:  MOVLB  0
021CE:  RCALL  218A
021D0:  MOVFF  01,E78
....................    #endif
....................    
....................    return retVal;
021D4:  MOVLB  E
021D6:  MOVFF  E78,01
021DA:  MOVLB  0
021DC:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
021DE:  MOVFF  E77,E79
021E2:  MOVLW  19
021E4:  MOVLB  E
021E6:  MOVWF  x7A
021E8:  MOVLB  0
021EA:  RCALL  218A
021EC:  MOVFF  01,E78
....................    #endif
....................    
....................    return retVal;
021F0:  MOVLB  E
021F2:  MOVFF  E78,01
021F6:  MOVLB  0
021F8:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
0075A:  MOVFF  E6D,E77
0075E:  MOVLB  E
00760:  CLRF   x78
00762:  MOVFF  E6E,E79
00766:  MOVLB  0
00768:  RCALL  0692
....................    #endif
0076A:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
0076C:  MOVFF  E6D,E77
00770:  MOVLW  10
00772:  MOVLB  E
00774:  MOVWF  x78
00776:  MOVFF  E6E,E79
0077A:  MOVLB  0
0077C:  RCALL  0692
....................    #endif
0077E:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define OnRelay   1
.................... #define OffRelay   0
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
0344C:  BTFSS  F9E.4
0344E:  BRA    344C
03450:  MOVWF  FAD
03452:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
03390:  BCF    F93.0
03392:  BCF    F8A.0
03394:  MOVLW  08
03396:  MOVWF  01
03398:  BRA    339A
0339A:  NOP   
0339C:  BSF    01.7
0339E:  BRA    33C0
033A0:  BCF    01.7
033A2:  MOVLB  E
033A4:  RRCF   x6F,F
033A6:  MOVLB  0
033A8:  BTFSC  FD8.0
033AA:  BSF    F8A.0
033AC:  BTFSS  FD8.0
033AE:  BCF    F8A.0
033B0:  BSF    01.6
033B2:  BRA    33C0
033B4:  BCF    01.6
033B6:  DECFSZ 01,F
033B8:  BRA    33A2
033BA:  BRA    33BC
033BC:  NOP   
033BE:  BSF    F8A.0
033C0:  MOVLW  84
033C2:  MOVWF  FE9
033C4:  DECFSZ FE9,F
033C6:  BRA    33C4
033C8:  BRA    33CA
033CA:  NOP   
033CC:  BTFSC  01.7
033CE:  BRA    33A0
033D0:  BTFSC  01.6
033D2:  BRA    33B4
033D4:  RETURN 0
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... void initialIC(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... //int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... //int8 Output595[4];
.................... 
.................... //int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Input9_16;
.................... int8 Input17_24;
.................... int8 Input25_32;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... int8 Green1_8 ;
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... /*
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... */
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... //int8 MasterSlaveSync;
.................... 
.................... int1 StartRead = 0;
.................... volatile int8 StartReadCount;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15,ubyte_lo_sq = 0x16,crc_hi_sq = 0x17, second_numofdata = 0x18,byte_count_sq = 0x19,data_sq = 0x20;      //serial sequnce
.................... 
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[512];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[1024];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... 
.................... //int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;    //use for calculate RxD timeout
.................... int16 index = 0x00; //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... unsigned char SMS_Massage9[32];
.................... unsigned char SMS_Massage10[32];
.................... unsigned char SMS_Massage11[32];
.................... unsigned char SMS_Massage12[32];
.................... unsigned char SMS_Massage13[32];
.................... unsigned char SMS_Massage14[32];
.................... unsigned char SMS_Massage15[32];
.................... unsigned char SMS_Massage16[32];
.................... unsigned char SMS_Massage17[32];
.................... unsigned char SMS_Massage18[32];
.................... unsigned char SMS_Massage19[32];
.................... unsigned char SMS_Massage20[32];
.................... 
.................... unsigned char SMS_MassageSUM[160] = ">>";
.................... 
.................... unsigned char spacestring[] = " ";
.................... 
.................... volatile int8 send_SMS_period ,send_SMS_count ;
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... }; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Inputt
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    int1 B11,B12,B13,B14,B15,B16,B17,B18,B19,B20;
....................    int1 B21,B22,B23,B24,B25,B26,B27,B28,B29,B30;
....................    //int1 B31,B32,B33,B34,B35,B36,B37,B38,B39,B40;
....................    //int1 B41,B42,B43,B44,B45,B46,B47,B48,B49,B50;
....................    //int1 B51,B52,B53,B54,B55,B56,B57,B58,B59,B60;
....................    //int1 B61,B62,B63,B64;
.................... };
.................... 
....................    //Output   (LED Lit = "0")
....................    //Inputt Type NO/NC (NO = "1" , NC = "0")
....................    //Fault Type Manual/Auto (Manual = "1" , Auto = "0")
....................    //Output Type Buz/Bell (Buzzer = "1" , Bell = "0")
....................    //Output Both (Normal = "1" , Both = "0")
....................    //Acknowledge flag (Acked = "1" , non Ack = "0")
.................... 
.................... struct Bit64 Inputt;//,Output,InputType;//,FaultType,OutputType,OutputBoth;
.................... struct Bit64 Output,InputType;
.................... struct Bit64 FaultType,OutputType,OutputBoth;
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 AckSend,RED_Colour,GREEN_Colour;
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[30];
.................... int1 FaultNow[30];
.................... int16 ReleaseTime[30];
.................... int16 FaultDelayTime[30];
.................... 
.................... int1 FaultNCNO[30];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //volatile int16 ReadIn_Count =0;
.................... //int1 ReadIn_flag = 0;
.................... /*
.................... int8 DelayTime1 = 0;
.................... int8 DelayTime2 = 0;
.................... int8 DelayTime3 = 0;
.................... int8 DelayTime4 = 0;
.................... int8 DelayTime5 = 0;
.................... int8 DelayTime6 = 0;
.................... int8 DelayTime7 = 0;
.................... int8 DelayTime8 = 0;
.................... int8 DelayTime9 = 0;
.................... int8 DelayTime10 = 0;
.................... int8 DelayTime11 = 0;
.................... int8 DelayTime12 = 0;
.................... int8 DelayTime13 = 0;
.................... int8 DelayTime14 = 0;
.................... int8 DelayTime15 = 0;
.................... int8 DelayTime16 = 0;
.................... int8 DelayTime17 = 0;
.................... int8 DelayTime18 = 0;
.................... int8 DelayTime19 = 0;
.................... int8 DelayTime20 = 0;
.................... */
.................... char blankSigned[] = ">>";
.................... void sendsum_sms(void)
.................... {
....................    if(strcmp(SMS_MassageSUM, blankSigned) != 0){
*
0AF94:  MOVLW  0D
0AF96:  MOVLB  E
0AF98:  MOVWF  x6E
0AF9A:  MOVLW  03
0AF9C:  MOVWF  x6D
0AF9E:  MOVLW  0E
0AFA0:  MOVWF  x70
0AFA2:  MOVLW  63
0AFA4:  MOVWF  x6F
0AFA6:  MOVLB  0
0AFA8:  BRA    AEF4
0AFAA:  MOVF   01,F
0AFAC:  BZ    B046
....................    
....................       fprintf(CH2,"AT+CMGF=1"); 
0AFAE:  MOVLW  DA
0AFB0:  MOVWF  FF6
0AFB2:  MOVLW  02
0AFB4:  MOVWF  FF7
0AFB6:  CALL   33D6
....................       putc('\n',CH2);
0AFBA:  MOVLW  0A
0AFBC:  MOVLB  E
0AFBE:  MOVWF  x6F
0AFC0:  MOVLB  0
0AFC2:  CALL   3390
....................       delay_ms(10);
0AFC6:  MOVLW  0A
0AFC8:  MOVLB  E
0AFCA:  MOVWF  x76
0AFCC:  MOVLB  0
0AFCE:  CALL   0662
....................    
....................       fprintf(CH2,"AT+CMGS=\"");
0AFD2:  MOVLW  E4
0AFD4:  MOVWF  FF6
0AFD6:  MOVLW  02
0AFD8:  MOVWF  FF7
0AFDA:  CALL   33D6
....................       fprintf(CH2,sms_phonenumber);
0AFDE:  MOVLW  0A
0AFE0:  MOVWF  FEA
0AFE2:  MOVLW  74
0AFE4:  MOVWF  FE9
0AFE6:  RCALL  AF6E
....................       
....................       fprintf(CH2,"\"");
0AFE8:  MOVLW  22
0AFEA:  MOVLB  E
0AFEC:  MOVWF  x6F
0AFEE:  MOVLB  0
0AFF0:  CALL   3390
....................       putc('\n',CH2);
0AFF4:  MOVLW  0A
0AFF6:  MOVLB  E
0AFF8:  MOVWF  x6F
0AFFA:  MOVLB  0
0AFFC:  CALL   3390
....................       delay_ms(50);
0B000:  MOVLW  32
0B002:  MOVLB  E
0B004:  MOVWF  x76
0B006:  MOVLB  0
0B008:  CALL   0662
....................      
....................      fprintf(CH2,SMS_MassageSUM);
0B00C:  MOVLW  0D
0B00E:  MOVWF  FEA
0B010:  MOVLW  03
0B012:  MOVWF  FE9
0B014:  RCALL  AF6E
....................      putc('\n',CH2);
0B016:  MOVLW  0A
0B018:  MOVLB  E
0B01A:  MOVWF  x6F
0B01C:  MOVLB  0
0B01E:  CALL   3390
....................      putc(26,CH2);
0B022:  MOVLW  1A
0B024:  MOVLB  E
0B026:  MOVWF  x6F
0B028:  MOVLB  0
0B02A:  CALL   3390
....................      
....................      strcpy(SMS_MassageSUM, blankSigned);
0B02E:  MOVLW  0D
0B030:  MOVWF  FEA
0B032:  MOVLW  03
0B034:  MOVWF  FE9
0B036:  MOVLW  0E
0B038:  MOVWF  FE2
0B03A:  MOVLW  63
0B03C:  MOVWF  FE1
0B03E:  MOVF   FE7,F
0B040:  MOVFF  FE6,FEE
0B044:  BNZ   B03E
.................... 
....................    }
0B046:  GOTO   BBD0 (RETURN)
.................... }
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
03454:  CLRF   20
....................    Input9_16_Send = 0x00;
03456:  CLRF   21
....................    Input17_24_Send = 0x00;
03458:  CLRF   22
....................    
....................    
....................    Ack1_8_Send = 0x00;
0345A:  CLRF   28
....................    Ack9_16_Send = 0x00;
0345C:  CLRF   29
....................    Ack17_24_Send = 0x00;
0345E:  CLRF   2A
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
03460:  MOVLB  D
03462:  BTFSC  xC7.0
03464:  BRA    346E
03466:  BTFSC  xAB.0
03468:  BRA    346E
....................       AckSend.B1 = 1;
0346A:  BSF    xCF.0
0346C:  BRA    3470
....................    else
....................       AckSend.B1 = 0;
0346E:  BCF    xCF.0
....................       
....................    if((In.B2 == 0) && (Output.B2 ==0))
03470:  BTFSC  xC7.1
03472:  BRA    347C
03474:  BTFSC  xAB.1
03476:  BRA    347C
....................       AckSend.B2 = 1;
03478:  BSF    xCF.1
0347A:  BRA    347E
....................    else
....................       AckSend.B2 = 0;
0347C:  BCF    xCF.1
....................       
....................    if((In.B3 == 0) && (Output.B3 ==0))
0347E:  BTFSC  xC7.2
03480:  BRA    348A
03482:  BTFSC  xAB.2
03484:  BRA    348A
....................       AckSend.B3 = 1;
03486:  BSF    xCF.2
03488:  BRA    348C
....................    else
....................       AckSend.B3 = 0;
0348A:  BCF    xCF.2
....................       
....................    if((In.B4 == 0) && (Output.B4 ==0))
0348C:  BTFSC  xC7.3
0348E:  BRA    3498
03490:  BTFSC  xAB.3
03492:  BRA    3498
....................       AckSend.B4 = 1;
03494:  BSF    xCF.3
03496:  BRA    349A
....................    else
....................       AckSend.B4 = 0;
03498:  BCF    xCF.3
....................       
....................    if((In.B5 == 0) && (Output.B5 ==0))
0349A:  BTFSC  xC7.4
0349C:  BRA    34A6
0349E:  BTFSC  xAB.4
034A0:  BRA    34A6
....................       AckSend.B5 = 1;
034A2:  BSF    xCF.4
034A4:  BRA    34A8
....................    else
....................       AckSend.B5 = 0;
034A6:  BCF    xCF.4
....................       
....................    if((In.B6 == 0) && (Output.B6 ==0))
034A8:  BTFSC  xC7.5
034AA:  BRA    34B4
034AC:  BTFSC  xAB.5
034AE:  BRA    34B4
....................       AckSend.B6 = 1;
034B0:  BSF    xCF.5
034B2:  BRA    34B6
....................    else
....................       AckSend.B6 = 0;
034B4:  BCF    xCF.5
....................       
....................    if((In.B7 == 0) && (Output.B7 ==0))
034B6:  BTFSC  xC7.6
034B8:  BRA    34C2
034BA:  BTFSC  xAB.6
034BC:  BRA    34C2
....................       AckSend.B7 = 1;
034BE:  BSF    xCF.6
034C0:  BRA    34C4
....................    else
....................       AckSend.B7 = 0;
034C2:  BCF    xCF.6
....................       
....................    if((In.B8 == 0) && (Output.B8 ==0))
034C4:  BTFSC  xC7.7
034C6:  BRA    34D0
034C8:  BTFSC  xAB.7
034CA:  BRA    34D0
....................       AckSend.B8 = 1;
034CC:  BSF    xCF.7
034CE:  BRA    34D2
....................    else
....................       AckSend.B8 = 0;
034D0:  BCF    xCF.7
....................       
....................    if((In.B9 == 0) && (Output.B9 ==0))
034D2:  BTFSC  xC8.0
034D4:  BRA    34DE
034D6:  BTFSC  xAC.0
034D8:  BRA    34DE
....................       AckSend.B9 = 1;
034DA:  BSF    xD0.0
034DC:  BRA    34E0
....................    else
....................       AckSend.B9 = 0;
034DE:  BCF    xD0.0
....................       
....................    if((In.B10 == 0) && (Output.B10 ==0))
034E0:  BTFSC  xC8.1
034E2:  BRA    34EC
034E4:  BTFSC  xAC.1
034E6:  BRA    34EC
....................       AckSend.B10 = 1;
034E8:  BSF    xD0.1
034EA:  BRA    34EE
....................    else
....................       AckSend.B10 = 0;
034EC:  BCF    xD0.1
....................       
....................    if((In.B11 == 0) && (Output.B11 ==0))
034EE:  BTFSC  xC8.2
034F0:  BRA    34FA
034F2:  BTFSC  xAC.2
034F4:  BRA    34FA
....................       AckSend.B11 = 1;
034F6:  BSF    xD0.2
034F8:  BRA    34FC
....................    else
....................       AckSend.B11 = 0;
034FA:  BCF    xD0.2
....................       
....................    if((In.B12 == 0) && (Output.B12 ==0))
034FC:  BTFSC  xC8.3
034FE:  BRA    3508
03500:  BTFSC  xAC.3
03502:  BRA    3508
....................       AckSend.B12 = 1;
03504:  BSF    xD0.3
03506:  BRA    350A
....................    else
....................       AckSend.B12 = 0;
03508:  BCF    xD0.3
....................       
....................    if((In.B13 == 0) && (Output.B13 ==0))
0350A:  BTFSC  xC8.4
0350C:  BRA    3516
0350E:  BTFSC  xAC.4
03510:  BRA    3516
....................       AckSend.B13 = 1;
03512:  BSF    xD0.4
03514:  BRA    3518
....................    else
....................       AckSend.B13 = 0;
03516:  BCF    xD0.4
....................       
....................    if((In.B14 == 0) && (Output.B14 ==0))
03518:  BTFSC  xC8.5
0351A:  BRA    3524
0351C:  BTFSC  xAC.5
0351E:  BRA    3524
....................       AckSend.B14 = 1;
03520:  BSF    xD0.5
03522:  BRA    3526
....................    else
....................       AckSend.B14 = 0;
03524:  BCF    xD0.5
....................       
....................    if((In.B15 == 0) && (Output.B15 ==0))
03526:  BTFSC  xC8.6
03528:  BRA    3532
0352A:  BTFSC  xAC.6
0352C:  BRA    3532
....................       AckSend.B15 = 1;
0352E:  BSF    xD0.6
03530:  BRA    3534
....................    else
....................       AckSend.B15 = 0;
03532:  BCF    xD0.6
....................       
....................    if((In.B16 == 0) && (Output.B16 ==0))
03534:  BTFSC  xC8.7
03536:  BRA    3540
03538:  BTFSC  xAC.7
0353A:  BRA    3540
....................       AckSend.B16 = 1;
0353C:  BSF    xD0.7
0353E:  BRA    3542
....................    else
....................       AckSend.B16 = 0;
03540:  BCF    xD0.7
....................       
....................    if((In.B17 == 0) && (Output.B17 ==0))
03542:  BTFSC  xC9.0
03544:  BRA    354E
03546:  BTFSC  xAD.0
03548:  BRA    354E
....................       AckSend.B17 = 1;
0354A:  BSF    xD1.0
0354C:  BRA    3550
....................    else
....................       AckSend.B17 = 0;
0354E:  BCF    xD1.0
....................       
....................    if((In.B18 == 0) && (Output.B18 ==0))
03550:  BTFSC  xC9.1
03552:  BRA    355C
03554:  BTFSC  xAD.1
03556:  BRA    355C
....................       AckSend.B18 = 1;
03558:  BSF    xD1.1
0355A:  BRA    355E
....................    else
....................       AckSend.B18 = 0;
0355C:  BCF    xD1.1
....................       
....................    if((In.B19 == 0) && (Output.B19 ==0))
0355E:  BTFSC  xC9.2
03560:  BRA    356A
03562:  BTFSC  xAD.2
03564:  BRA    356A
....................       AckSend.B19 = 1;
03566:  BSF    xD1.2
03568:  BRA    356C
....................    else
....................       AckSend.B19 = 0;
0356A:  BCF    xD1.2
....................       
....................    if((In.B20 == 0) && (Output.B20 ==0))
0356C:  BTFSC  xC9.3
0356E:  BRA    3578
03570:  BTFSC  xAD.3
03572:  BRA    3578
....................       AckSend.B20 = 1;
03574:  BSF    xD1.3
03576:  BRA    357A
....................    else
....................       AckSend.B20 = 0;
03578:  BCF    xD1.3
....................    
....................    
....................    
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
0357A:  MOVLW  00
0357C:  BTFSC  xCF.7
0357E:  MOVLW  01
03580:  IORWF  28,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
03582:  BCF    FD8.0
03584:  RLCF   28,W
03586:  MOVLB  E
03588:  MOVWF  x77
0358A:  MOVLW  00
0358C:  MOVLB  D
0358E:  BTFSC  xCF.6
03590:  MOVLW  01
03592:  MOVLB  E
03594:  IORWF  x77,W
03596:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
03598:  BCF    FD8.0
0359A:  RLCF   28,W
0359C:  MOVWF  x77
0359E:  MOVLW  00
035A0:  MOVLB  D
035A2:  BTFSC  xCF.5
035A4:  MOVLW  01
035A6:  MOVLB  E
035A8:  IORWF  x77,W
035AA:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
035AC:  BCF    FD8.0
035AE:  RLCF   28,W
035B0:  MOVWF  x77
035B2:  MOVLW  00
035B4:  MOVLB  D
035B6:  BTFSC  xCF.4
035B8:  MOVLW  01
035BA:  MOVLB  E
035BC:  IORWF  x77,W
035BE:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
035C0:  BCF    FD8.0
035C2:  RLCF   28,W
035C4:  MOVWF  x77
035C6:  MOVLW  00
035C8:  MOVLB  D
035CA:  BTFSC  xCF.3
035CC:  MOVLW  01
035CE:  MOVLB  E
035D0:  IORWF  x77,W
035D2:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
035D4:  BCF    FD8.0
035D6:  RLCF   28,W
035D8:  MOVWF  x77
035DA:  MOVLW  00
035DC:  MOVLB  D
035DE:  BTFSC  xCF.2
035E0:  MOVLW  01
035E2:  MOVLB  E
035E4:  IORWF  x77,W
035E6:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
035E8:  BCF    FD8.0
035EA:  RLCF   28,W
035EC:  MOVWF  x77
035EE:  MOVLW  00
035F0:  MOVLB  D
035F2:  BTFSC  xCF.1
035F4:  MOVLW  01
035F6:  MOVLB  E
035F8:  IORWF  x77,W
035FA:  MOVWF  28
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
035FC:  BCF    FD8.0
035FE:  RLCF   28,W
03600:  MOVWF  x77
03602:  MOVLW  00
03604:  MOVLB  D
03606:  BTFSC  xCF.0
03608:  MOVLW  01
0360A:  MOVLB  E
0360C:  IORWF  x77,W
0360E:  MOVWF  28
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B16;
03610:  MOVLW  00
03612:  MOVLB  D
03614:  BTFSC  xD0.7
03616:  MOVLW  01
03618:  IORWF  29,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B15;
0361A:  BCF    FD8.0
0361C:  RLCF   29,W
0361E:  MOVLB  E
03620:  MOVWF  x77
03622:  MOVLW  00
03624:  MOVLB  D
03626:  BTFSC  xD0.6
03628:  MOVLW  01
0362A:  MOVLB  E
0362C:  IORWF  x77,W
0362E:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B14;
03630:  BCF    FD8.0
03632:  RLCF   29,W
03634:  MOVWF  x77
03636:  MOVLW  00
03638:  MOVLB  D
0363A:  BTFSC  xD0.5
0363C:  MOVLW  01
0363E:  MOVLB  E
03640:  IORWF  x77,W
03642:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B13;
03644:  BCF    FD8.0
03646:  RLCF   29,W
03648:  MOVWF  x77
0364A:  MOVLW  00
0364C:  MOVLB  D
0364E:  BTFSC  xD0.4
03650:  MOVLW  01
03652:  MOVLB  E
03654:  IORWF  x77,W
03656:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B12;
03658:  BCF    FD8.0
0365A:  RLCF   29,W
0365C:  MOVWF  x77
0365E:  MOVLW  00
03660:  MOVLB  D
03662:  BTFSC  xD0.3
03664:  MOVLW  01
03666:  MOVLB  E
03668:  IORWF  x77,W
0366A:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B11;
0366C:  BCF    FD8.0
0366E:  RLCF   29,W
03670:  MOVWF  x77
03672:  MOVLW  00
03674:  MOVLB  D
03676:  BTFSC  xD0.2
03678:  MOVLW  01
0367A:  MOVLB  E
0367C:  IORWF  x77,W
0367E:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B10;
03680:  BCF    FD8.0
03682:  RLCF   29,W
03684:  MOVWF  x77
03686:  MOVLW  00
03688:  MOVLB  D
0368A:  BTFSC  xD0.1
0368C:  MOVLW  01
0368E:  MOVLB  E
03690:  IORWF  x77,W
03692:  MOVWF  29
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
03694:  BCF    FD8.0
03696:  RLCF   29,W
03698:  MOVWF  x77
0369A:  MOVLW  00
0369C:  MOVLB  D
0369E:  BTFSC  xD0.0
036A0:  MOVLW  01
036A2:  MOVLB  E
036A4:  IORWF  x77,W
036A6:  MOVWF  29
....................    
....................    Ack17_24_Send = Ack17_24_Send | AckSend.B24;
036A8:  MOVLW  00
036AA:  MOVLB  D
036AC:  BTFSC  xD1.7
036AE:  MOVLW  01
036B0:  IORWF  2A,F
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B23;
036B2:  BCF    FD8.0
036B4:  RLCF   2A,W
036B6:  MOVLB  E
036B8:  MOVWF  x77
036BA:  MOVLW  00
036BC:  MOVLB  D
036BE:  BTFSC  xD1.6
036C0:  MOVLW  01
036C2:  MOVLB  E
036C4:  IORWF  x77,W
036C6:  MOVWF  2A
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B22;
036C8:  BCF    FD8.0
036CA:  RLCF   2A,W
036CC:  MOVWF  x77
036CE:  MOVLW  00
036D0:  MOVLB  D
036D2:  BTFSC  xD1.5
036D4:  MOVLW  01
036D6:  MOVLB  E
036D8:  IORWF  x77,W
036DA:  MOVWF  2A
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B21;
036DC:  BCF    FD8.0
036DE:  RLCF   2A,W
036E0:  MOVWF  x77
036E2:  MOVLW  00
036E4:  MOVLB  D
036E6:  BTFSC  xD1.4
036E8:  MOVLW  01
036EA:  MOVLB  E
036EC:  IORWF  x77,W
036EE:  MOVWF  2A
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B20;
036F0:  BCF    FD8.0
036F2:  RLCF   2A,W
036F4:  MOVWF  x77
036F6:  MOVLW  00
036F8:  MOVLB  D
036FA:  BTFSC  xD1.3
036FC:  MOVLW  01
036FE:  MOVLB  E
03700:  IORWF  x77,W
03702:  MOVWF  2A
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B19;
03704:  BCF    FD8.0
03706:  RLCF   2A,W
03708:  MOVWF  x77
0370A:  MOVLW  00
0370C:  MOVLB  D
0370E:  BTFSC  xD1.2
03710:  MOVLW  01
03712:  MOVLB  E
03714:  IORWF  x77,W
03716:  MOVWF  2A
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B18;
03718:  BCF    FD8.0
0371A:  RLCF   2A,W
0371C:  MOVWF  x77
0371E:  MOVLW  00
03720:  MOVLB  D
03722:  BTFSC  xD1.1
03724:  MOVLW  01
03726:  MOVLB  E
03728:  IORWF  x77,W
0372A:  MOVWF  2A
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B17;
0372C:  BCF    FD8.0
0372E:  RLCF   2A,W
03730:  MOVWF  x77
03732:  MOVLW  00
03734:  MOVLB  D
03736:  BTFSC  xD1.0
03738:  MOVLW  01
0373A:  MOVLB  E
0373C:  IORWF  x77,W
0373E:  MOVWF  2A
....................    
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
03740:  MOVLW  00
03742:  MOVLB  D
03744:  BTFSC  xC7.7
03746:  MOVLW  01
03748:  IORWF  20,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
0374A:  BCF    FD8.0
0374C:  RLCF   20,W
0374E:  MOVLB  E
03750:  MOVWF  x77
03752:  MOVLW  00
03754:  MOVLB  D
03756:  BTFSC  xC7.6
03758:  MOVLW  01
0375A:  MOVLB  E
0375C:  IORWF  x77,W
0375E:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
03760:  BCF    FD8.0
03762:  RLCF   20,W
03764:  MOVWF  x77
03766:  MOVLW  00
03768:  MOVLB  D
0376A:  BTFSC  xC7.5
0376C:  MOVLW  01
0376E:  MOVLB  E
03770:  IORWF  x77,W
03772:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
03774:  BCF    FD8.0
03776:  RLCF   20,W
03778:  MOVWF  x77
0377A:  MOVLW  00
0377C:  MOVLB  D
0377E:  BTFSC  xC7.4
03780:  MOVLW  01
03782:  MOVLB  E
03784:  IORWF  x77,W
03786:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
03788:  BCF    FD8.0
0378A:  RLCF   20,W
0378C:  MOVWF  x77
0378E:  MOVLW  00
03790:  MOVLB  D
03792:  BTFSC  xC7.3
03794:  MOVLW  01
03796:  MOVLB  E
03798:  IORWF  x77,W
0379A:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
0379C:  BCF    FD8.0
0379E:  RLCF   20,W
037A0:  MOVWF  x77
037A2:  MOVLW  00
037A4:  MOVLB  D
037A6:  BTFSC  xC7.2
037A8:  MOVLW  01
037AA:  MOVLB  E
037AC:  IORWF  x77,W
037AE:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
037B0:  BCF    FD8.0
037B2:  RLCF   20,W
037B4:  MOVWF  x77
037B6:  MOVLW  00
037B8:  MOVLB  D
037BA:  BTFSC  xC7.1
037BC:  MOVLW  01
037BE:  MOVLB  E
037C0:  IORWF  x77,W
037C2:  MOVWF  20
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
037C4:  BCF    FD8.0
037C6:  RLCF   20,W
037C8:  MOVWF  x77
037CA:  MOVLW  00
037CC:  MOVLB  D
037CE:  BTFSC  xC7.0
037D0:  MOVLW  01
037D2:  MOVLB  E
037D4:  IORWF  x77,W
037D6:  MOVWF  20
....................    
....................    Input9_16_Send = Input9_16_Send | In.B16;
037D8:  MOVLW  00
037DA:  MOVLB  D
037DC:  BTFSC  xC8.7
037DE:  MOVLW  01
037E0:  IORWF  21,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B15;
037E2:  BCF    FD8.0
037E4:  RLCF   21,W
037E6:  MOVLB  E
037E8:  MOVWF  x77
037EA:  MOVLW  00
037EC:  MOVLB  D
037EE:  BTFSC  xC8.6
037F0:  MOVLW  01
037F2:  MOVLB  E
037F4:  IORWF  x77,W
037F6:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B14;
037F8:  BCF    FD8.0
037FA:  RLCF   21,W
037FC:  MOVWF  x77
037FE:  MOVLW  00
03800:  MOVLB  D
03802:  BTFSC  xC8.5
03804:  MOVLW  01
03806:  MOVLB  E
03808:  IORWF  x77,W
0380A:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B13;
0380C:  BCF    FD8.0
0380E:  RLCF   21,W
03810:  MOVWF  x77
03812:  MOVLW  00
03814:  MOVLB  D
03816:  BTFSC  xC8.4
03818:  MOVLW  01
0381A:  MOVLB  E
0381C:  IORWF  x77,W
0381E:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B12;
03820:  BCF    FD8.0
03822:  RLCF   21,W
03824:  MOVWF  x77
03826:  MOVLW  00
03828:  MOVLB  D
0382A:  BTFSC  xC8.3
0382C:  MOVLW  01
0382E:  MOVLB  E
03830:  IORWF  x77,W
03832:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B11;
03834:  BCF    FD8.0
03836:  RLCF   21,W
03838:  MOVWF  x77
0383A:  MOVLW  00
0383C:  MOVLB  D
0383E:  BTFSC  xC8.2
03840:  MOVLW  01
03842:  MOVLB  E
03844:  IORWF  x77,W
03846:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B10;
03848:  BCF    FD8.0
0384A:  RLCF   21,W
0384C:  MOVWF  x77
0384E:  MOVLW  00
03850:  MOVLB  D
03852:  BTFSC  xC8.1
03854:  MOVLW  01
03856:  MOVLB  E
03858:  IORWF  x77,W
0385A:  MOVWF  21
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
0385C:  BCF    FD8.0
0385E:  RLCF   21,W
03860:  MOVWF  x77
03862:  MOVLW  00
03864:  MOVLB  D
03866:  BTFSC  xC8.0
03868:  MOVLW  01
0386A:  MOVLB  E
0386C:  IORWF  x77,W
0386E:  MOVWF  21
....................    
....................    Input17_24_Send = Input17_24_Send | In.B24;
03870:  MOVLW  00
03872:  MOVLB  D
03874:  BTFSC  xC9.7
03876:  MOVLW  01
03878:  IORWF  22,F
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B23;
0387A:  BCF    FD8.0
0387C:  RLCF   22,W
0387E:  MOVLB  E
03880:  MOVWF  x77
03882:  MOVLW  00
03884:  MOVLB  D
03886:  BTFSC  xC9.6
03888:  MOVLW  01
0388A:  MOVLB  E
0388C:  IORWF  x77,W
0388E:  MOVWF  22
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B22;
03890:  BCF    FD8.0
03892:  RLCF   22,W
03894:  MOVWF  x77
03896:  MOVLW  00
03898:  MOVLB  D
0389A:  BTFSC  xC9.5
0389C:  MOVLW  01
0389E:  MOVLB  E
038A0:  IORWF  x77,W
038A2:  MOVWF  22
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B21;
038A4:  BCF    FD8.0
038A6:  RLCF   22,W
038A8:  MOVWF  x77
038AA:  MOVLW  00
038AC:  MOVLB  D
038AE:  BTFSC  xC9.4
038B0:  MOVLW  01
038B2:  MOVLB  E
038B4:  IORWF  x77,W
038B6:  MOVWF  22
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B20;
038B8:  BCF    FD8.0
038BA:  RLCF   22,W
038BC:  MOVWF  x77
038BE:  MOVLW  00
038C0:  MOVLB  D
038C2:  BTFSC  xC9.3
038C4:  MOVLW  01
038C6:  MOVLB  E
038C8:  IORWF  x77,W
038CA:  MOVWF  22
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B19;
038CC:  BCF    FD8.0
038CE:  RLCF   22,W
038D0:  MOVWF  x77
038D2:  MOVLW  00
038D4:  MOVLB  D
038D6:  BTFSC  xC9.2
038D8:  MOVLW  01
038DA:  MOVLB  E
038DC:  IORWF  x77,W
038DE:  MOVWF  22
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B18;
038E0:  BCF    FD8.0
038E2:  RLCF   22,W
038E4:  MOVWF  x77
038E6:  MOVLW  00
038E8:  MOVLB  D
038EA:  BTFSC  xC9.1
038EC:  MOVLW  01
038EE:  MOVLB  E
038F0:  IORWF  x77,W
038F2:  MOVWF  22
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B17;
038F4:  BCF    FD8.0
038F6:  RLCF   22,W
038F8:  MOVWF  x77
038FA:  MOVLW  00
038FC:  MOVLB  D
038FE:  BTFSC  xC9.0
03900:  MOVLW  01
03902:  MOVLB  E
03904:  IORWF  x77,W
03906:  MOVWF  22
03908:  MOVLB  0
0390A:  GOTO   46A8 (RETURN)
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void StoreReleaseFault()
*
02294:  MOVLB  E
02296:  CLRF   x77
.................... {
....................    unsigned char i=0;
....................    for(i=1;i<=20;i++)
02298:  MOVLW  01
0229A:  MOVWF  x77
0229C:  MOVF   x77,W
0229E:  SUBLW  14
022A0:  BNC   22D0
....................    {
....................       FaultAgo[i] = FaultNow[i];
022A2:  MOVFF  E77,E78
022A6:  MOVLW  0D
022A8:  MOVWF  x7A
022AA:  MOVLW  E3
022AC:  MOVWF  x79
022AE:  MOVLB  0
022B0:  RCALL  21FA
022B2:  MOVFF  E77,E78
022B6:  MOVLB  E
022B8:  CLRF   x79
022BA:  BTFSC  01.0
022BC:  INCF   x79,F
022BE:  MOVLW  0D
022C0:  MOVWF  x7B
022C2:  MOVLW  DF
022C4:  MOVWF  x7A
022C6:  MOVLB  0
022C8:  RCALL  2252
022CA:  MOVLB  E
022CC:  INCF   x77,F
022CE:  BRA    229C
....................    }
022D0:  MOVLB  0
022D2:  GOTO   2B12 (RETURN)
.................... }
.................... 
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
033F6:  MOVLB  6
033F8:  SETF   x67
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
033FA:  SETF   x66
.................... 
....................    for(i = 0;i < usDataLen;i++)
033FC:  MOVLB  E
033FE:  CLRF   x7B
03400:  MOVF   x79,W
03402:  SUBWF  x7B,W
03404:  BC    3448
....................    {
....................       restart_wdt();
03406:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
03408:  MOVF   x7B,W
0340A:  ADDWF  x77,W
0340C:  MOVWF  FE9
0340E:  MOVLW  00
03410:  ADDWFC x78,W
03412:  MOVWF  FEA
03414:  MOVF   FEF,W
03416:  MOVLB  6
03418:  XORWF  x67,W
0341A:  MOVLB  E
0341C:  MOVWF  x7A
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
0341E:  CLRF   03
03420:  MOVF   x7A,W
03422:  MOVLB  0
03424:  CALL   00BA
03428:  MOVWF  01
0342A:  MOVLB  6
0342C:  MOVF   x66,W
0342E:  XORWF  01,W
03430:  MOVWF  x67
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
03432:  CLRF   03
03434:  MOVLB  E
03436:  MOVF   x7A,W
03438:  MOVLB  0
0343A:  CALL   01CA
0343E:  MOVFF  FE8,666
03442:  MOVLB  E
03444:  INCF   x7B,F
03446:  BRA    3400
....................    }
03448:  MOVLB  0
0344A:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... /*
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................    
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  // } 
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... */
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002EE:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002F0:  MOVF   5A,W
002F2:  SUBWF  x63,W
002F4:  BNZ   031C
....................    {
....................      RxD_DataLen = 0x00 ;
002F6:  CLRF   x65
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002F8:  MOVLW  66
002FA:  ADDWF  x65,W
002FC:  MOVWF  FE9
002FE:  MOVLW  02
00300:  MOVWF  FEA
00302:  BTFSC  FD8.0
00304:  INCF   FEA,F
00306:  MOVFF  30,FEF
....................      restart_wdt();
0030A:  CLRWDT
....................      RxD_DataLen ++ ;
0030C:  INCF   x65,F
....................      sequence = addr_sq;
0030E:  MOVLW  10
00310:  MOVWF  x63
....................      T_timeout = 0x14; //200ms
00312:  MOVLW  14
00314:  MOVLB  A
00316:  MOVWF  x70
....................    }
00318:  BRA    0590
0031A:  MOVLB  0
....................    else if(sequence == addr_sq)
0031C:  MOVF   x63,W
0031E:  SUBLW  10
00320:  BNZ   03DA
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
00322:  MOVLW  66
00324:  ADDWF  x65,W
00326:  MOVWF  FE9
00328:  MOVLW  02
0032A:  MOVWF  FEA
0032C:  BTFSC  FD8.0
0032E:  INCF   FEA,F
00330:  MOVFF  30,FEF
....................       restart_wdt();
00334:  CLRWDT
....................       RxD_DataLen ++ ;
00336:  INCF   x65,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00338:  MOVLW  01
0033A:  SUBWF  x65,W
0033C:  ADDLW  66
0033E:  MOVWF  FE9
00340:  MOVLW  02
00342:  MOVWF  FEA
00344:  BTFSC  FD8.0
00346:  INCF   FEA,F
00348:  MOVF   FEF,W
0034A:  SUBLW  16
0034C:  BNC   035C
....................        {
....................            sequence = code_sq;
0034E:  MOVFF  5B,63
....................            T_timeout = 0x14; //200ms
00352:  MOVLW  14
00354:  MOVLB  A
00356:  MOVWF  x70
....................        }
00358:  BRA    03D6
0035A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
0035C:  MOVLW  01
0035E:  SUBWF  x65,W
00360:  ADDLW  66
00362:  MOVWF  FE9
00364:  MOVLW  02
00366:  MOVWF  FEA
00368:  BTFSC  FD8.0
0036A:  INCF   FEA,F
0036C:  MOVF   FEF,W
0036E:  SUBLW  20
00370:  BNZ   0380
....................        {
....................           sequence = ubyte_lo_sq;
00372:  MOVFF  5E,63
....................           T_timeout = 0x14; //200ms
00376:  MOVLW  14
00378:  MOVLB  A
0037A:  MOVWF  x70
....................        }
0037C:  BRA    03D6
0037E:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
00380:  MOVLW  01
00382:  SUBWF  x65,W
00384:  ADDLW  66
00386:  MOVWF  FE9
00388:  MOVLW  02
0038A:  MOVWF  FEA
0038C:  BTFSC  FD8.0
0038E:  INCF   FEA,F
00390:  MOVF   FEF,W
00392:  SUBLW  21
00394:  BNZ   03A4
....................        {
....................           sequence = byte_count_sq ;
00396:  MOVFF  61,63
....................           T_timeout = 0x14; //200ms
0039A:  MOVLW  14
0039C:  MOVLB  A
0039E:  MOVWF  x70
....................        }
003A0:  BRA    03D6
003A2:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
003A4:  MOVLW  01
003A6:  SUBWF  x65,W
003A8:  ADDLW  66
003AA:  MOVWF  FE9
003AC:  MOVLW  02
003AE:  MOVWF  FEA
003B0:  BTFSC  FD8.0
003B2:  INCF   FEA,F
003B4:  MOVF   FEF,W
003B6:  SUBLW  22
003B8:  BNZ   03C8
....................        {
....................           sequence = second_numofdata ;
003BA:  MOVFF  60,63
....................           T_timeout = 0x14; //200ms
003BE:  MOVLW  14
003C0:  MOVLB  A
003C2:  MOVWF  x70
....................        }
003C4:  BRA    03D6
003C6:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003C8:  CLRF   x65
....................           sequence = end_sq;
003CA:  MOVFF  5A,63
....................           T_timeout = 0x00;
003CE:  MOVLB  A
003D0:  CLRF   x70
....................           output_bit(P485ctrl,0);
003D2:  BCF    F8A.3
003D4:  BCF    F93.3
....................        }
....................    }
003D6:  BRA    0590
003D8:  MOVLB  0
....................    else if(sequence == second_numofdata)
003DA:  MOVF   x60,W
003DC:  SUBWF  x63,W
003DE:  BNZ   0404
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
003E0:  MOVLW  66
003E2:  ADDWF  x65,W
003E4:  MOVWF  FE9
003E6:  MOVLW  02
003E8:  MOVWF  FEA
003EA:  BTFSC  FD8.0
003EC:  INCF   FEA,F
003EE:  MOVFF  30,FEF
....................       restart_wdt();
003F2:  CLRWDT
....................       RxD_DataLen ++ ;
003F4:  INCF   x65,F
....................       sequence = byte_count_sq;
003F6:  MOVFF  61,63
....................       T_timeout = 0x14; //200ms
003FA:  MOVLW  14
003FC:  MOVLB  A
003FE:  MOVWF  x70
....................    }
00400:  BRA    0590
00402:  MOVLB  0
....................    else if(sequence == byte_count_sq)
00404:  MOVF   x61,W
00406:  SUBWF  x63,W
00408:  BNZ   0460
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
0040A:  MOVLW  66
0040C:  ADDWF  x65,W
0040E:  MOVWF  FE9
00410:  MOVLW  02
00412:  MOVWF  FEA
00414:  BTFSC  FD8.0
00416:  INCF   FEA,F
00418:  MOVFF  30,FEF
....................       restart_wdt();
0041C:  CLRWDT
....................       RxD_DataLen ++ ;
0041E:  INCF   x65,F
....................       if(RxD_Buff[1] == 0x22)   /////SMS setting/////
00420:  MOVLB  2
00422:  MOVF   x67,W
00424:  SUBLW  22
00426:  BNZ   043A
....................       {
....................          index = (RxD_Buff[2] * 0x64) + RxD_Buff[3];
00428:  MOVF   x68,W
0042A:  MULLW  64
0042C:  MOVF   FF3,W
0042E:  ADDWF  x69,W
00430:  MOVLB  A
00432:  MOVWF  x71
00434:  CLRF   x72
....................       }
00436:  BRA    0454
00438:  MOVLB  2
....................       else{
....................          index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
0043A:  MOVLW  01
0043C:  MOVLB  0
0043E:  SUBWF  x65,W
00440:  ADDLW  66
00442:  MOVWF  FE9
00444:  MOVLW  02
00446:  MOVWF  FEA
00448:  BTFSC  FD8.0
0044A:  INCF   FEA,F
0044C:  MOVLB  A
0044E:  CLRF   x72
00450:  MOVFF  FEF,A71
....................       }
....................       T_timeout = 0x14; //200ms
00454:  MOVLW  14
00456:  MOVWF  x70
....................       sequence = data_sq ;
00458:  MOVFF  62,63
....................    }
0045C:  BRA    0590
0045E:  MOVLB  0
....................    else if(sequence == data_sq)
00460:  MOVF   x62,W
00462:  SUBWF  x63,W
00464:  BNZ   049A
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00466:  MOVLW  66
00468:  ADDWF  x65,W
0046A:  MOVWF  FE9
0046C:  MOVLW  02
0046E:  MOVWF  FEA
00470:  BTFSC  FD8.0
00472:  INCF   FEA,F
00474:  MOVFF  30,FEF
....................       restart_wdt();
00478:  CLRWDT
....................       RxD_DataLen ++ ;
0047A:  INCF   x65,F
....................       index -- ;                     //Data Byte Count
0047C:  MOVLB  A
0047E:  MOVF   x71,W
00480:  BTFSC  FD8.2
00482:  DECF   x72,F
00484:  DECF   x71,F
....................       if(index == 0x00)
00486:  MOVF   x71,F
00488:  BNZ   0492
0048A:  MOVF   x72,F
0048C:  BNZ   0492
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
0048E:  MOVFF  5E,63
....................       }
....................       T_timeout = 0x14; //200ms
00492:  MOVLW  14
00494:  MOVWF  x70
....................    }
00496:  BRA    0590
00498:  MOVLB  0
....................    else if(sequence == code_sq)
0049A:  MOVF   5B,W
0049C:  SUBWF  x63,W
0049E:  BNZ   04C4
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
004A0:  MOVLW  66
004A2:  ADDWF  x65,W
004A4:  MOVWF  FE9
004A6:  MOVLW  02
004A8:  MOVWF  FEA
004AA:  BTFSC  FD8.0
004AC:  INCF   FEA,F
004AE:  MOVFF  30,FEF
....................       restart_wdt();
004B2:  CLRWDT
....................       RxD_DataLen ++ ;
004B4:  INCF   x65,F
....................       sequence = start_addr_hi_sq;
004B6:  MOVFF  5C,63
....................       T_timeout = 0x14; //200ms
004BA:  MOVLW  14
004BC:  MOVLB  A
004BE:  MOVWF  x70
.................... 
....................    }
004C0:  BRA    0590
004C2:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
004C4:  MOVF   5C,W
004C6:  SUBWF  x63,W
004C8:  BNZ   04EE
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
004CA:  MOVLW  66
004CC:  ADDWF  x65,W
004CE:  MOVWF  FE9
004D0:  MOVLW  02
004D2:  MOVWF  FEA
004D4:  BTFSC  FD8.0
004D6:  INCF   FEA,F
004D8:  MOVFF  30,FEF
....................       restart_wdt();
004DC:  CLRWDT
....................       RxD_DataLen ++ ;
004DE:  INCF   x65,F
....................       sequence = start_addr_lo_sq;
004E0:  MOVFF  5D,63
....................       T_timeout = 0x14; //200ms
004E4:  MOVLW  14
004E6:  MOVLB  A
004E8:  MOVWF  x70
....................    }
004EA:  BRA    0590
004EC:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
004EE:  MOVF   5D,W
004F0:  SUBWF  x63,W
004F2:  BNZ   0518
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
004F4:  MOVLW  66
004F6:  ADDWF  x65,W
004F8:  MOVWF  FE9
004FA:  MOVLW  02
004FC:  MOVWF  FEA
004FE:  BTFSC  FD8.0
00500:  INCF   FEA,F
00502:  MOVFF  30,FEF
....................       restart_wdt();
00506:  CLRWDT
....................       RxD_DataLen ++ ;
00508:  INCF   x65,F
....................       sequence = ubyte_hi_sq;
0050A:  MOVLW  15
0050C:  MOVWF  x63
....................       T_timeout = 0x14; //200ms
0050E:  MOVLW  14
00510:  MOVLB  A
00512:  MOVWF  x70
....................    }
00514:  BRA    0590
00516:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
00518:  MOVF   x63,W
0051A:  SUBLW  15
0051C:  BNZ   0542
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
0051E:  MOVLW  66
00520:  ADDWF  x65,W
00522:  MOVWF  FE9
00524:  MOVLW  02
00526:  MOVWF  FEA
00528:  BTFSC  FD8.0
0052A:  INCF   FEA,F
0052C:  MOVFF  30,FEF
....................       restart_wdt();
00530:  CLRWDT
....................       RxD_DataLen ++ ;
00532:  INCF   x65,F
....................       sequence = ubyte_lo_sq;
00534:  MOVFF  5E,63
....................       T_timeout = 0x14; //200ms
00538:  MOVLW  14
0053A:  MOVLB  A
0053C:  MOVWF  x70
....................    }
0053E:  BRA    0590
00540:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
00542:  MOVF   5E,W
00544:  SUBWF  x63,W
00546:  BNZ   056C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
00548:  MOVLW  66
0054A:  ADDWF  x65,W
0054C:  MOVWF  FE9
0054E:  MOVLW  02
00550:  MOVWF  FEA
00552:  BTFSC  FD8.0
00554:  INCF   FEA,F
00556:  MOVFF  30,FEF
....................       restart_wdt();
0055A:  CLRWDT
....................       RxD_DataLen ++ ;
0055C:  INCF   x65,F
....................       sequence = crc_hi_sq;
0055E:  MOVFF  5F,63
....................       T_timeout = 0x14; //200ms
00562:  MOVLW  14
00564:  MOVLB  A
00566:  MOVWF  x70
....................    }
00568:  BRA    0590
0056A:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
0056C:  MOVF   5F,W
0056E:  SUBWF  x63,W
00570:  BNZ   0590
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
00572:  MOVLW  66
00574:  ADDWF  x65,W
00576:  MOVWF  FE9
00578:  MOVLW  02
0057A:  MOVWF  FEA
0057C:  BTFSC  FD8.0
0057E:  INCF   FEA,F
00580:  MOVFF  30,FEF
....................       restart_wdt();
00584:  CLRWDT
....................       sequence = end_sq;
00586:  MOVFF  5A,63
....................       T_timeout = 0x00;
0058A:  MOVLB  A
0058C:  CLRF   x70
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
0058E:  BSF    32.5
00590:  MOVLB  0
....................    }
00592:  GOTO   05A0 (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
03E2C:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
03E2E:  MOVLW  01
03E30:  SUBWF  x65,W
03E32:  MOVLB  E
03E34:  MOVWF  x76
03E36:  MOVLW  02
03E38:  MOVWF  x78
03E3A:  MOVLW  66
03E3C:  MOVWF  x77
03E3E:  MOVFF  E76,E79
03E42:  MOVLB  0
03E44:  CALL   33F6
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
03E48:  MOVLW  01
03E4A:  SUBWF  x65,W
03E4C:  ADDLW  66
03E4E:  MOVWF  FE9
03E50:  MOVLW  02
03E52:  MOVWF  FEA
03E54:  BTFSC  FD8.0
03E56:  INCF   FEA,F
03E58:  MOVF   FEF,W
03E5A:  MOVLB  6
03E5C:  SUBWF  x67,W
03E5E:  BTFSS  FD8.2
03E60:  GOTO   6C7A
03E64:  MOVLW  66
03E66:  MOVLB  0
03E68:  ADDWF  x65,W
03E6A:  MOVWF  FE9
03E6C:  MOVLW  02
03E6E:  MOVWF  FEA
03E70:  BTFSC  FD8.0
03E72:  INCF   FEA,F
03E74:  MOVF   FEF,W
03E76:  MOVLB  6
03E78:  SUBWF  x66,W
03E7A:  BTFSS  FD8.2
03E7C:  GOTO   6C7A
....................    {
....................    
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
03E80:  MOVLB  2
03E82:  MOVF   x66,W
03E84:  SUBLW  AA
03E86:  BTFSS  FD8.2
03E88:  BRA    41B4
03E8A:  MOVF   x67,W
03E8C:  SUBLW  20
03E8E:  BTFSS  FD8.2
03E90:  BRA    41B4
....................       {
....................          TxD_Buff[0] = Address ;         //Address
03E92:  MOVFF  64,66
....................          TxD_Buff[1] = 0x20 ;            //function code
03E96:  MOVLW  20
03E98:  MOVLB  0
03E9A:  MOVWF  x67
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
03E9C:  MOVLW  1C
03E9E:  MOVWF  x68
....................          TxD_Buff[3] = InputType1_8 ;    //1
03EA0:  MOVFF  37,69
....................          TxD_Buff[4] = InputType9_16 ;  //2
03EA4:  MOVFF  38,6A
....................          TxD_Buff[5] = InputType17_24 ;//3
03EA8:  MOVFF  39,6B
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
03EAC:  MOVFF  3A,6C
....................          TxD_Buff[7] = FaultType9_16 ; //5
03EB0:  MOVFF  3B,6D
....................          TxD_Buff[8] = FaultType17_24 ;   //6
03EB4:  MOVFF  3C,6E
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
03EB8:  MOVFF  3D,6F
....................          TxD_Buff[10] = OutputType9_16 ;  //8
03EBC:  MOVFF  3E,70
....................          TxD_Buff[11] = OutputType17_24 ; //9
03EC0:  MOVFF  3F,71
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
03EC4:  MOVFF  40,72
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
03EC8:  MOVFF  41,73
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
03ECC:  MOVFF  42,74
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
03ED0:  MOVFF  43,75
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
03ED4:  MOVFF  44,76
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
03ED8:  MOVFF  45,77
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
03EDC:  MOVFF  FF2,E76
03EE0:  BCF    FF2.7
03EE2:  CLRF   FAA
03EE4:  MOVLW  10
03EE6:  MOVWF  FA9
03EE8:  BCF    FA6.6
03EEA:  BCF    FA6.7
03EEC:  BSF    FA6.0
03EEE:  MOVF   FA8,W
03EF0:  MOVLB  E
03EF2:  BTFSC  x76.7
03EF4:  BSF    FF2.7
03EF6:  MOVLB  0
03EF8:  MOVWF  x78
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
03EFA:  MOVFF  FF2,E76
03EFE:  BCF    FF2.7
03F00:  CLRF   FAA
03F02:  MOVLW  11
03F04:  MOVWF  FA9
03F06:  BCF    FA6.6
03F08:  BCF    FA6.7
03F0A:  BSF    FA6.0
03F0C:  MOVF   FA8,W
03F0E:  MOVLB  E
03F10:  BTFSC  x76.7
03F12:  BSF    FF2.7
03F14:  MOVLB  0
03F16:  MOVWF  x79
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
03F18:  MOVFF  FF2,E76
03F1C:  BCF    FF2.7
03F1E:  CLRF   FAA
03F20:  MOVLW  12
03F22:  MOVWF  FA9
03F24:  BCF    FA6.6
03F26:  BCF    FA6.7
03F28:  BSF    FA6.0
03F2A:  MOVF   FA8,W
03F2C:  MOVLB  E
03F2E:  BTFSC  x76.7
03F30:  BSF    FF2.7
03F32:  MOVLB  0
03F34:  MOVWF  x7A
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
03F36:  MOVFF  FF2,E76
03F3A:  BCF    FF2.7
03F3C:  CLRF   FAA
03F3E:  MOVLW  13
03F40:  MOVWF  FA9
03F42:  BCF    FA6.6
03F44:  BCF    FA6.7
03F46:  BSF    FA6.0
03F48:  MOVF   FA8,W
03F4A:  MOVLB  E
03F4C:  BTFSC  x76.7
03F4E:  BSF    FF2.7
03F50:  MOVLB  0
03F52:  MOVWF  x7B
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
03F54:  MOVFF  FF2,E76
03F58:  BCF    FF2.7
03F5A:  CLRF   FAA
03F5C:  MOVLW  14
03F5E:  MOVWF  FA9
03F60:  BCF    FA6.6
03F62:  BCF    FA6.7
03F64:  BSF    FA6.0
03F66:  MOVF   FA8,W
03F68:  MOVLB  E
03F6A:  BTFSC  x76.7
03F6C:  BSF    FF2.7
03F6E:  MOVLB  0
03F70:  MOVWF  x7C
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
03F72:  MOVFF  FF2,E76
03F76:  BCF    FF2.7
03F78:  CLRF   FAA
03F7A:  MOVLW  15
03F7C:  MOVWF  FA9
03F7E:  BCF    FA6.6
03F80:  BCF    FA6.7
03F82:  BSF    FA6.0
03F84:  MOVF   FA8,W
03F86:  MOVLB  E
03F88:  BTFSC  x76.7
03F8A:  BSF    FF2.7
03F8C:  MOVLB  0
03F8E:  MOVWF  x7D
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
03F90:  MOVFF  FF2,E76
03F94:  BCF    FF2.7
03F96:  CLRF   FAA
03F98:  MOVLW  16
03F9A:  MOVWF  FA9
03F9C:  BCF    FA6.6
03F9E:  BCF    FA6.7
03FA0:  BSF    FA6.0
03FA2:  MOVF   FA8,W
03FA4:  MOVLB  E
03FA6:  BTFSC  x76.7
03FA8:  BSF    FF2.7
03FAA:  MOVLB  0
03FAC:  MOVWF  x7E
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
03FAE:  MOVFF  FF2,E76
03FB2:  BCF    FF2.7
03FB4:  CLRF   FAA
03FB6:  MOVLW  17
03FB8:  MOVWF  FA9
03FBA:  BCF    FA6.6
03FBC:  BCF    FA6.7
03FBE:  BSF    FA6.0
03FC0:  MOVF   FA8,W
03FC2:  MOVLB  E
03FC4:  BTFSC  x76.7
03FC6:  BSF    FF2.7
03FC8:  MOVLB  0
03FCA:  MOVWF  x7F
....................        
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
03FCC:  MOVFF  55,80
....................          TxD_Buff[27] = AutoAckTime ;        //25
03FD0:  MOVFF  56,81
....................          TxD_Buff[28] = FlashingRate ;       //26
03FD4:  MOVFF  57,82
....................          TxD_Buff[29] = NoOfPoint ;          //27
03FD8:  MOVFF  58,83
....................          TxD_Buff[30] = FaultDelayTime[0] ;    //28
03FDC:  MOVFF  E23,84
....................          TxD_Buff[31] = Address ;            //29
03FE0:  MOVFF  64,85
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
03FE4:  MOVFF  E25,86
....................          TxD_Buff[33] = FaultDelayTime[2] ;
03FE8:  MOVFF  E27,87
....................          TxD_Buff[34] = FaultDelayTime[3] ;
03FEC:  MOVFF  E29,88
....................          TxD_Buff[35] = FaultDelayTime[4] ;
03FF0:  MOVFF  E2B,89
....................          TxD_Buff[36] = FaultDelayTime[5] ;
03FF4:  MOVFF  E2D,8A
....................          TxD_Buff[37] = FaultDelayTime[6] ;
03FF8:  MOVFF  E2F,8B
....................          TxD_Buff[38] = FaultDelayTime[7] ;
03FFC:  MOVFF  E31,8C
....................          TxD_Buff[39] = FaultDelayTime[8] ;
04000:  MOVFF  E33,8D
....................          TxD_Buff[40] = FaultDelayTime[9] ;
04004:  MOVFF  E35,8E
....................          TxD_Buff[41] = FaultDelayTime[10] ;
04008:  MOVFF  E37,8F
....................          TxD_Buff[42] = FaultDelayTime[11] ;
0400C:  MOVFF  E39,90
....................          TxD_Buff[43] = FaultDelayTime[12] ;
04010:  MOVFF  E3B,91
....................          TxD_Buff[44] = FaultDelayTime[13] ;
04014:  MOVFF  E3D,92
....................          TxD_Buff[45] = FaultDelayTime[14] ;
04018:  MOVFF  E3F,93
....................          TxD_Buff[46] = FaultDelayTime[15] ;
0401C:  MOVFF  E41,94
....................          TxD_Buff[47] = FaultDelayTime[16] ;
04020:  MOVFF  E43,95
....................          TxD_Buff[48] = FaultDelayTime[17] ;
04024:  MOVFF  E45,96
....................          TxD_Buff[49] = FaultDelayTime[18] ;
04028:  MOVFF  E47,97
....................          TxD_Buff[50] = FaultDelayTime[19] ;
0402C:  MOVFF  E49,98
....................          TxD_Buff[51] = FaultDelayTime[20] ;
04030:  MOVFF  E4B,99
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
04034:  MOVLB  E
04036:  CLRF   x78
04038:  MOVLW  66
0403A:  MOVWF  x77
0403C:  MOVLW  34
0403E:  MOVWF  x79
04040:  MOVLB  0
04042:  CALL   33F6
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
04046:  MOVFF  667,9A
....................          TxD_Buff[53] = CRC_Lo ;
0404A:  MOVFF  666,9B
.................... 
....................          output_bit(P485ctrl,1);
0404E:  BSF    F8A.3
04050:  BCF    F93.3
....................          delay_ms(10);
04052:  MOVLW  0A
04054:  MOVLB  E
04056:  MOVWF  x76
04058:  MOVLB  0
0405A:  CALL   0662
.................... 
....................          putc(Txd_Buff[0]);
0405E:  MOVF   x66,W
04060:  CALL   344C
....................          putc(Txd_Buff[1]);
04064:  MOVF   x67,W
04066:  CALL   344C
....................          putc(Txd_Buff[2]);
0406A:  MOVF   x68,W
0406C:  CALL   344C
....................          putc(Txd_Buff[3]);
04070:  MOVF   x69,W
04072:  CALL   344C
....................          putc(Txd_Buff[4]);
04076:  MOVF   x6A,W
04078:  CALL   344C
....................          putc(Txd_Buff[5]);
0407C:  MOVF   x6B,W
0407E:  CALL   344C
....................          putc(Txd_Buff[6]);
04082:  MOVF   x6C,W
04084:  CALL   344C
....................          putc(Txd_Buff[7]);
04088:  MOVF   x6D,W
0408A:  CALL   344C
....................          putc(Txd_Buff[8]);
0408E:  MOVF   x6E,W
04090:  CALL   344C
....................          putc(Txd_Buff[9]);
04094:  MOVF   x6F,W
04096:  CALL   344C
....................          putc(Txd_Buff[10]);
0409A:  MOVF   x70,W
0409C:  CALL   344C
....................          putc(Txd_Buff[11]);
040A0:  MOVF   x71,W
040A2:  CALL   344C
....................          putc(Txd_Buff[12]);
040A6:  MOVF   x72,W
040A8:  CALL   344C
....................          putc(Txd_Buff[13]);
040AC:  MOVF   x73,W
040AE:  CALL   344C
....................          putc(Txd_Buff[14]);
040B2:  MOVF   x74,W
040B4:  CALL   344C
....................          putc(Txd_Buff[15]);
040B8:  MOVF   x75,W
040BA:  CALL   344C
....................          putc(Txd_Buff[16]);
040BE:  MOVF   x76,W
040C0:  CALL   344C
....................          putc(Txd_Buff[17]);
040C4:  MOVF   x77,W
040C6:  CALL   344C
....................          putc(Txd_Buff[18]);
040CA:  MOVF   x78,W
040CC:  CALL   344C
....................          putc(Txd_Buff[19]);
040D0:  MOVF   x79,W
040D2:  CALL   344C
....................          putc(Txd_Buff[20]);
040D6:  MOVF   x7A,W
040D8:  CALL   344C
....................          putc(Txd_Buff[21]);
040DC:  MOVF   x7B,W
040DE:  CALL   344C
....................          putc(Txd_Buff[22]);
040E2:  MOVF   x7C,W
040E4:  CALL   344C
....................          putc(Txd_Buff[23]);
040E8:  MOVF   x7D,W
040EA:  CALL   344C
....................          putc(Txd_Buff[24]);
040EE:  MOVF   x7E,W
040F0:  CALL   344C
....................          putc(Txd_Buff[25]);
040F4:  MOVF   x7F,W
040F6:  CALL   344C
....................          putc(Txd_Buff[26]);
040FA:  MOVF   x80,W
040FC:  CALL   344C
....................          putc(Txd_Buff[27]);
04100:  MOVF   x81,W
04102:  CALL   344C
....................          putc(Txd_Buff[28]);
04106:  MOVF   x82,W
04108:  CALL   344C
....................          putc(Txd_Buff[29]);
0410C:  MOVF   x83,W
0410E:  CALL   344C
....................          putc(Txd_Buff[30]);
04112:  MOVF   x84,W
04114:  CALL   344C
....................          putc(Txd_Buff[31]);
04118:  MOVF   x85,W
0411A:  CALL   344C
....................          
....................          putc(Txd_Buff[32]);
0411E:  MOVF   x86,W
04120:  CALL   344C
....................          putc(Txd_Buff[33]);
04124:  MOVF   x87,W
04126:  CALL   344C
....................          putc(Txd_Buff[34]);
0412A:  MOVF   x88,W
0412C:  CALL   344C
....................          putc(Txd_Buff[35]);
04130:  MOVF   x89,W
04132:  CALL   344C
....................          putc(Txd_Buff[36]);
04136:  MOVF   x8A,W
04138:  CALL   344C
....................          putc(Txd_Buff[37]);
0413C:  MOVF   x8B,W
0413E:  CALL   344C
....................          putc(Txd_Buff[38]);
04142:  MOVF   x8C,W
04144:  CALL   344C
....................          putc(Txd_Buff[39]);
04148:  MOVF   x8D,W
0414A:  CALL   344C
....................          putc(Txd_Buff[40]);
0414E:  MOVF   x8E,W
04150:  CALL   344C
....................          putc(Txd_Buff[41]);
04154:  MOVF   x8F,W
04156:  CALL   344C
....................          
....................          putc(Txd_Buff[42]);
0415A:  MOVF   x90,W
0415C:  CALL   344C
....................          putc(Txd_Buff[43]);
04160:  MOVF   x91,W
04162:  CALL   344C
....................          putc(Txd_Buff[44]);
04166:  MOVF   x92,W
04168:  CALL   344C
....................          putc(Txd_Buff[45]);
0416C:  MOVF   x93,W
0416E:  CALL   344C
....................          putc(Txd_Buff[46]);
04172:  MOVF   x94,W
04174:  CALL   344C
....................          putc(Txd_Buff[47]);
04178:  MOVF   x95,W
0417A:  CALL   344C
....................          putc(Txd_Buff[48]);
0417E:  MOVF   x96,W
04180:  CALL   344C
....................          putc(Txd_Buff[49]);
04184:  MOVF   x97,W
04186:  CALL   344C
....................          putc(Txd_Buff[50]);
0418A:  MOVF   x98,W
0418C:  CALL   344C
....................          putc(Txd_Buff[51]);
04190:  MOVF   x99,W
04192:  CALL   344C
....................          
....................          putc(Txd_Buff[52]);
04196:  MOVF   x9A,W
04198:  CALL   344C
....................          putc(Txd_Buff[53]);
0419C:  MOVF   x9B,W
0419E:  CALL   344C
....................        
....................          delay_ms(3);
041A2:  MOVLW  03
041A4:  MOVLB  E
041A6:  MOVWF  x76
041A8:  MOVLB  0
041AA:  CALL   0662
....................          output_bit(P485ctrl,0);
041AE:  BCF    F8A.3
041B0:  BCF    F93.3
041B2:  MOVLB  2
....................          
....................       }
....................      
....................    ///////////////////////////////////////////////////////////////
....................    if(RxD_Buff[0] == Address)
041B4:  MOVLB  0
041B6:  MOVF   x64,W
041B8:  MOVLB  2
041BA:  SUBWF  x66,W
041BC:  BTFSS  FD8.2
041BE:  GOTO   6C70
....................    {
....................          
....................       if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
041C2:  DECFSZ x67,W
041C4:  BRA    469A
....................          {
....................             //Do Read Coil
....................             Start_Address = RxD_Buff[2] ;
041C6:  MOVLB  6
041C8:  CLRF   x6B
041CA:  MOVFF  268,66A
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
041CE:  MOVFF  66A,66B
041D2:  MOVLB  E
041D4:  CLRF   x76
041D6:  MOVF   x76,W
041D8:  MOVLB  2
041DA:  IORWF  x69,W
041DC:  MOVLB  6
041DE:  MOVWF  x6A
041E0:  MOVLB  6
....................             No_PointCount = RxD_Buff[4] ;
041E2:  CLRF   x6D
041E4:  MOVFF  26A,66C
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;      //No. of Point 16 bit
041E8:  MOVFF  66C,66D
041EC:  MOVLB  E
041EE:  CLRF   x76
041F0:  MOVF   x76,W
041F2:  MOVLB  2
041F4:  IORWF  x6B,W
041F6:  MOVLB  6
041F8:  MOVWF  x6C
041FA:  MOVLB  6
.................... 
....................             if(Start_Address < 0x10 && (Start_Address + No_PointCount) <= 0x14)  //Valid point 0-20
041FC:  MOVF   x6B,F
041FE:  BTFSS  FD8.2
04200:  BRA    4628
04202:  MOVF   x6A,W
04204:  SUBLW  0F
04206:  BTFSS  FD8.0
04208:  BRA    4628
0420A:  MOVF   x6C,W
0420C:  ADDWF  x6A,W
0420E:  MOVLB  E
04210:  MOVWF  x76
04212:  MOVLB  6
04214:  MOVF   x6D,W
04216:  ADDWFC x6B,W
04218:  MOVLB  E
0421A:  MOVWF  x77
0421C:  MOVF   x77,F
0421E:  BTFSC  FD8.2
04220:  BRA    4226
04222:  MOVLB  6
04224:  BRA    4628
04226:  MOVF   x76,W
04228:  SUBLW  14
0422A:  BTFSC  FD8.0
0422C:  BRA    4232
0422E:  MOVLB  6
04230:  BRA    4628
....................             {
....................                if(No_PointCount < 9) Data_ByteCount = 0x01;
04232:  MOVLB  6
04234:  MOVF   x6D,F
04236:  BNZ   4244
04238:  MOVF   x6C,W
0423A:  SUBLW  08
0423C:  BNC   4244
0423E:  MOVLW  01
04240:  MOVWF  x6E
04242:  BRA    4268
....................                else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
04244:  MOVF   x6D,F
04246:  BNZ   4254
04248:  MOVF   x6C,W
0424A:  SUBLW  10
0424C:  BNC   4254
0424E:  MOVLW  02
04250:  MOVWF  x6E
04252:  BRA    4268
....................                else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
04254:  MOVF   x6D,F
04256:  BNZ   4264
04258:  MOVF   x6C,W
0425A:  SUBLW  18
0425C:  BNC   4264
0425E:  MOVLW  03
04260:  MOVWF  x6E
04262:  BRA    4268
....................                else   Data_ByteCount = 0x01 ; //----Jack
04264:  MOVLW  01
04266:  MOVWF  x6E
.................... 
....................                if(Data_ByteCount == 0x01)
04268:  DECFSZ x6E,W
0426A:  BRA    43B0
....................                {
.................... 
....................                   if(Start_Address < 0x09)
0426C:  MOVF   x6B,F
0426E:  BNZ   428A
04270:  MOVF   x6A,W
04272:  SUBLW  08
04274:  BNC   428A
....................                   {
....................                      //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                       Data_Buff[0] = Input1_8 >> Start_Address ;
04276:  MOVFF  46,66F
0427A:  MOVF   x6A,W
0427C:  MOVWF  01
0427E:  BZ    4288
04280:  BCF    FD8.0
04282:  RRCF   x6F,F
04284:  DECFSZ 01,F
04286:  BRA    4280
....................                       //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                       //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                   }
04288:  BRA    42BE
....................                   else if(Start_Address > 0x08 && Start_Address < 0x10)
0428A:  MOVF   x6B,F
0428C:  BNZ   4294
0428E:  MOVF   x6A,W
04290:  SUBLW  08
04292:  BC    42BE
04294:  MOVF   x6B,F
04296:  BNZ   42BE
04298:  MOVF   x6A,W
0429A:  SUBLW  0F
0429C:  BNC   42BE
....................                   {
....................                      //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                      Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
0429E:  MOVLW  08
042A0:  SUBWF  x6A,W
042A2:  MOVWF  00
042A4:  MOVLW  00
042A6:  SUBWFB x6B,W
042A8:  MOVWF  03
042AA:  MOVFF  00,01
042AE:  MOVFF  4A,66F
042B2:  MOVF   01,F
042B4:  BZ    42BE
042B6:  BCF    FD8.0
042B8:  RRCF   x6F,F
042BA:  DECFSZ 01,F
042BC:  BRA    42B6
....................                   }
.................... 
.................... 
....................                   if(No_PointCount == 0x08)
042BE:  MOVF   x6C,W
042C0:  SUBLW  08
042C2:  BNZ   42CA
042C4:  MOVF   x6D,F
042C6:  BNZ   42CA
....................                   {
....................                      Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                   }
042C8:  BRA    4334
....................                   else if(No_PointCount == 0x07)
042CA:  MOVF   x6C,W
042CC:  SUBLW  07
042CE:  BNZ   42D8
042D0:  MOVF   x6D,F
042D2:  BNZ   42D8
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
042D4:  BCF    x6F.7
....................                   }
042D6:  BRA    4334
....................                   else if(No_PointCount == 0x06)
042D8:  MOVF   x6C,W
042DA:  SUBLW  06
042DC:  BNZ   42E8
042DE:  MOVF   x6D,F
042E0:  BNZ   42E8
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
042E2:  MOVLW  3F
042E4:  ANDWF  x6F,F
....................                   }
042E6:  BRA    4334
....................                   else if(No_PointCount == 0x05)
042E8:  MOVF   x6C,W
042EA:  SUBLW  05
042EC:  BNZ   42F8
042EE:  MOVF   x6D,F
042F0:  BNZ   42F8
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
042F2:  MOVLW  1F
042F4:  ANDWF  x6F,F
....................                   }
042F6:  BRA    4334
....................                   else if(No_PointCount == 0x04)
042F8:  MOVF   x6C,W
042FA:  SUBLW  04
042FC:  BNZ   4308
042FE:  MOVF   x6D,F
04300:  BNZ   4308
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
04302:  MOVLW  0F
04304:  ANDWF  x6F,F
....................                   }
04306:  BRA    4334
....................                   else if(No_PointCount == 0x03)
04308:  MOVF   x6C,W
0430A:  SUBLW  03
0430C:  BNZ   4318
0430E:  MOVF   x6D,F
04310:  BNZ   4318
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
04312:  MOVLW  07
04314:  ANDWF  x6F,F
....................                   }
04316:  BRA    4334
....................                   else if(No_PointCount == 0x02)
04318:  MOVF   x6C,W
0431A:  SUBLW  02
0431C:  BNZ   4328
0431E:  MOVF   x6D,F
04320:  BNZ   4328
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
04322:  MOVLW  03
04324:  ANDWF  x6F,F
....................                   }
04326:  BRA    4334
....................                   else if(No_PointCount == 0x01)
04328:  DECFSZ x6C,W
0432A:  BRA    4334
0432C:  MOVF   x6D,F
0432E:  BNZ   4334
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
04330:  MOVLW  01
04332:  ANDWF  x6F,F
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04334:  MOVFF  64,66
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
04338:  MOVLW  01
0433A:  MOVLB  0
0433C:  MOVWF  x67
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
0433E:  MOVFF  66E,68
....................                   TxD_Buff[3] = Data_Buff[0] ;   //Data
04342:  MOVFF  66F,69
.................... 
....................                   CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
04346:  MOVLB  E
04348:  CLRF   x78
0434A:  MOVLW  66
0434C:  MOVWF  x77
0434E:  MOVLW  04
04350:  MOVWF  x79
04352:  MOVLB  0
04354:  CALL   33F6
.................... 
....................                   TxD_Buff[4] = CRC_Hi ;
04358:  MOVFF  667,6A
....................                   TxD_Buff[5] = CRC_Lo ;
0435C:  MOVFF  666,6B
.................... 
....................                   //TxD_DataLen = 0x06 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
04360:  BSF    F8A.3
04362:  BCF    F93.3
....................                   restart_wdt();
04364:  CLRWDT
....................                   delay_ms(4);
04366:  MOVLW  04
04368:  MOVLB  E
0436A:  MOVWF  x76
0436C:  MOVLB  0
0436E:  CALL   0662
....................                   restart_wdt();
04372:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04374:  MOVF   x66,W
04376:  CALL   344C
....................                   putc(TxD_Buff[1]) ;               //Function Code
0437A:  MOVF   x67,W
0437C:  CALL   344C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04380:  MOVF   x68,W
04382:  CALL   344C
....................                   putc(TxD_Buff[3]) ;
04386:  MOVF   x69,W
04388:  CALL   344C
....................                   putc(TxD_Buff[4]) ;
0438C:  MOVF   x6A,W
0438E:  CALL   344C
....................                   putc(TxD_Buff[5]) ;
04392:  MOVF   x6B,W
04394:  CALL   344C
....................                   //putc(TxD_Buff[6]) ;
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................                
....................                   restart_wdt();
04398:  CLRWDT
....................                   delay_ms(3);
0439A:  MOVLW  03
0439C:  MOVLB  E
0439E:  MOVWF  x76
043A0:  MOVLB  0
043A2:  CALL   0662
....................                   restart_wdt();
043A6:  CLRWDT
....................                   output_bit(P485ctrl,0);
043A8:  BCF    F8A.3
043AA:  BCF    F93.3
....................               
....................                }
043AC:  BRA    4624
043AE:  MOVLB  6
....................                else if(Data_ByteCount == 0x02)
043B0:  MOVF   x6E,W
043B2:  SUBLW  02
043B4:  BTFSS  FD8.2
043B6:  BRA    4578
....................                {
....................                   //Data_Buff[1] = ~output[1] >> Start_Address ;
....................                   //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                   //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                   
....................                   //Data_Buff[1] = Output9_16 >> Start_Address ;//jj
....................                   //DataTemp = Output9_16 << (0x08 - Start_Address) ;//jj
....................                   //Data_Buff[0] = (Output1_8 >> Start_Address) | DataTemp;   //Low Byte//jj
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
043B8:  MOVFF  46,66F
043BC:  MOVF   x6A,W
043BE:  MOVWF  01
043C0:  BZ    43CA
043C2:  BCF    FD8.0
043C4:  RRCF   x6F,F
043C6:  DECFSZ 01,F
043C8:  BRA    43C2
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
043CA:  MOVFF  4A,670
.................... 
.................... 
....................                   if((No_PointCount - 0x07) == 0x08)
043CE:  MOVLW  07
043D0:  SUBWF  x6C,W
043D2:  MOVLB  E
043D4:  MOVWF  x76
043D6:  MOVLW  00
043D8:  MOVLB  6
043DA:  SUBWFB x6D,W
043DC:  MOVLB  E
043DE:  MOVWF  x77
043E0:  MOVF   x76,W
043E2:  SUBLW  08
043E4:  BNZ   43EC
043E6:  MOVF   x77,F
043E8:  BNZ   43EC
....................                   {
....................                      Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                   }
043EA:  BRA    44F2
....................                   else if((No_PointCount - 0x07) == 0x07)
043EC:  MOVLW  07
043EE:  MOVLB  6
043F0:  SUBWF  x6C,W
043F2:  MOVLB  E
043F4:  MOVWF  x76
043F6:  MOVLW  00
043F8:  MOVLB  6
043FA:  SUBWFB x6D,W
043FC:  MOVLB  E
043FE:  MOVWF  x77
04400:  MOVF   x76,W
04402:  SUBLW  07
04404:  BNZ   4410
04406:  MOVF   x77,F
04408:  BNZ   4410
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
0440A:  MOVLB  6
0440C:  BCF    x70.7
....................                   }
0440E:  BRA    44F0
....................                   else if((No_PointCount - 0x07) == 0x06)
04410:  MOVLW  07
04412:  MOVLB  6
04414:  SUBWF  x6C,W
04416:  MOVLB  E
04418:  MOVWF  x76
0441A:  MOVLW  00
0441C:  MOVLB  6
0441E:  SUBWFB x6D,W
04420:  MOVLB  E
04422:  MOVWF  x77
04424:  MOVF   x76,W
04426:  SUBLW  06
04428:  BNZ   4436
0442A:  MOVF   x77,F
0442C:  BNZ   4436
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
0442E:  MOVLW  3F
04430:  MOVLB  6
04432:  ANDWF  x70,F
....................                   }
04434:  BRA    44F0
....................                   else if((No_PointCount - 0x07) == 0x05)
04436:  MOVLW  07
04438:  MOVLB  6
0443A:  SUBWF  x6C,W
0443C:  MOVLB  E
0443E:  MOVWF  x76
04440:  MOVLW  00
04442:  MOVLB  6
04444:  SUBWFB x6D,W
04446:  MOVLB  E
04448:  MOVWF  x77
0444A:  MOVF   x76,W
0444C:  SUBLW  05
0444E:  BNZ   445C
04450:  MOVF   x77,F
04452:  BNZ   445C
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
04454:  MOVLW  1F
04456:  MOVLB  6
04458:  ANDWF  x70,F
....................                   }
0445A:  BRA    44F0
....................                   else if((No_PointCount - 0x07) == 0x04)
0445C:  MOVLW  07
0445E:  MOVLB  6
04460:  SUBWF  x6C,W
04462:  MOVLB  E
04464:  MOVWF  x76
04466:  MOVLW  00
04468:  MOVLB  6
0446A:  SUBWFB x6D,W
0446C:  MOVLB  E
0446E:  MOVWF  x77
04470:  MOVF   x76,W
04472:  SUBLW  04
04474:  BNZ   4482
04476:  MOVF   x77,F
04478:  BNZ   4482
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
0447A:  MOVLW  0F
0447C:  MOVLB  6
0447E:  ANDWF  x70,F
....................                   }
04480:  BRA    44F0
....................                   else if((No_PointCount - 0x07) == 0x03)
04482:  MOVLW  07
04484:  MOVLB  6
04486:  SUBWF  x6C,W
04488:  MOVLB  E
0448A:  MOVWF  x76
0448C:  MOVLW  00
0448E:  MOVLB  6
04490:  SUBWFB x6D,W
04492:  MOVLB  E
04494:  MOVWF  x77
04496:  MOVF   x76,W
04498:  SUBLW  03
0449A:  BNZ   44A8
0449C:  MOVF   x77,F
0449E:  BNZ   44A8
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
044A0:  MOVLW  07
044A2:  MOVLB  6
044A4:  ANDWF  x70,F
....................                   }
044A6:  BRA    44F0
....................                   else if((No_PointCount - 0x07) == 0x02)
044A8:  MOVLW  07
044AA:  MOVLB  6
044AC:  SUBWF  x6C,W
044AE:  MOVLB  E
044B0:  MOVWF  x76
044B2:  MOVLW  00
044B4:  MOVLB  6
044B6:  SUBWFB x6D,W
044B8:  MOVLB  E
044BA:  MOVWF  x77
044BC:  MOVF   x76,W
044BE:  SUBLW  02
044C0:  BNZ   44CE
044C2:  MOVF   x77,F
044C4:  BNZ   44CE
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
044C6:  MOVLW  03
044C8:  MOVLB  6
044CA:  ANDWF  x70,F
....................                   }
044CC:  BRA    44F0
....................                   else if((No_PointCount - 0x07) == 0x01)
044CE:  MOVLW  07
044D0:  MOVLB  6
044D2:  SUBWF  x6C,W
044D4:  MOVLB  E
044D6:  MOVWF  x76
044D8:  MOVLW  00
044DA:  MOVLB  6
044DC:  SUBWFB x6D,W
044DE:  MOVLB  E
044E0:  MOVWF  x77
044E2:  DECFSZ x76,W
044E4:  BRA    44F2
044E6:  MOVF   x77,F
044E8:  BNZ   44F2
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
044EA:  MOVLW  01
044EC:  MOVLB  6
044EE:  ANDWF  x70,F
044F0:  MOVLB  E
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
044F2:  MOVFF  64,66
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
044F6:  MOVLW  01
044F8:  MOVLB  0
044FA:  MOVWF  x67
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
044FC:  MOVFF  66E,68
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
04500:  MOVFF  66F,69
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
04504:  MOVFF  670,6A
.................... 
....................                   CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
04508:  MOVLB  E
0450A:  CLRF   x78
0450C:  MOVLW  66
0450E:  MOVWF  x77
04510:  MOVLW  05
04512:  MOVWF  x79
04514:  MOVLB  0
04516:  CALL   33F6
.................... 
....................                   TxD_Buff[5] = CRC_Hi ;
0451A:  MOVFF  667,6B
....................                   TxD_Buff[6] = CRC_Lo ;
0451E:  MOVFF  666,6C
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
04522:  BSF    F8A.3
04524:  BCF    F93.3
....................                   restart_wdt();
04526:  CLRWDT
....................                   delay_ms(4);
04528:  MOVLW  04
0452A:  MOVLB  E
0452C:  MOVWF  x76
0452E:  MOVLB  0
04530:  CALL   0662
....................                   restart_wdt();
04534:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04536:  MOVF   x66,W
04538:  CALL   344C
....................                   putc(TxD_Buff[1]) ;               //Function Code
0453C:  MOVF   x67,W
0453E:  CALL   344C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04542:  MOVF   x68,W
04544:  CALL   344C
....................                   putc(TxD_Buff[3]) ;
04548:  MOVF   x69,W
0454A:  CALL   344C
....................                   putc(TxD_Buff[4]) ;
0454E:  MOVF   x6A,W
04550:  CALL   344C
....................                   putc(TxD_Buff[5]) ;
04554:  MOVF   x6B,W
04556:  CALL   344C
....................                   putc(TxD_Buff[6]) ;
0455A:  MOVF   x6C,W
0455C:  CALL   344C
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04560:  CLRWDT
....................                   delay_ms(3);
04562:  MOVLW  03
04564:  MOVLB  E
04566:  MOVWF  x76
04568:  MOVLB  0
0456A:  CALL   0662
....................                   restart_wdt();
0456E:  CLRWDT
....................                   output_bit(P485ctrl,0);
04570:  BCF    F8A.3
04572:  BCF    F93.3
....................               
....................                }
04574:  BRA    4624
04576:  MOVLB  6
....................                else if(Data_ByteCount == 0x03)
04578:  MOVF   x6E,W
0457A:  SUBLW  03
0457C:  BNZ   4626
....................                {
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
0457E:  MOVFF  46,66F
04582:  MOVF   x6A,W
04584:  MOVWF  01
04586:  BZ    4590
04588:  BCF    FD8.0
0458A:  RRCF   x6F,F
0458C:  DECFSZ 01,F
0458E:  BRA    4588
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
04590:  MOVFF  4A,670
....................                   Data_Buff[2] = Input17_24 ;// >> Start_Address ;
04594:  MOVFF  4B,671
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
04598:  MOVFF  64,66
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
0459C:  MOVLW  01
0459E:  MOVLB  0
045A0:  MOVWF  x67
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
045A2:  MOVFF  66E,68
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
045A6:  MOVFF  66F,69
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
045AA:  MOVFF  670,6A
....................                   TxD_Buff[5] = Data_Buff[2] ;  
045AE:  MOVFF  671,6B
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 5 Byte
045B2:  MOVLB  E
045B4:  CLRF   x78
045B6:  MOVLW  66
045B8:  MOVWF  x77
045BA:  MOVLW  06
045BC:  MOVWF  x79
045BE:  MOVLB  0
045C0:  CALL   33F6
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
045C4:  MOVFF  667,6C
....................                   TxD_Buff[7] = CRC_Lo ;
045C8:  MOVFF  666,6D
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
045CC:  BSF    F8A.3
045CE:  BCF    F93.3
....................                   restart_wdt();
045D0:  CLRWDT
....................                   delay_ms(4);
045D2:  MOVLW  04
045D4:  MOVLB  E
045D6:  MOVWF  x76
045D8:  MOVLB  0
045DA:  CALL   0662
....................                   restart_wdt();
045DE:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
045E0:  MOVF   x66,W
045E2:  CALL   344C
....................                   putc(TxD_Buff[1]) ;               //Function Code
045E6:  MOVF   x67,W
045E8:  CALL   344C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
045EC:  MOVF   x68,W
045EE:  CALL   344C
....................                   putc(TxD_Buff[3]) ;
045F2:  MOVF   x69,W
045F4:  CALL   344C
....................                   putc(TxD_Buff[4]) ;
045F8:  MOVF   x6A,W
045FA:  CALL   344C
....................                   putc(TxD_Buff[5]) ;
045FE:  MOVF   x6B,W
04600:  CALL   344C
....................                   putc(TxD_Buff[6]) ;
04604:  MOVF   x6C,W
04606:  CALL   344C
....................                   putc(TxD_Buff[7]) ;
0460A:  MOVF   x6D,W
0460C:  CALL   344C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04610:  CLRWDT
....................                   delay_ms(3);
04612:  MOVLW  03
04614:  MOVLB  E
04616:  MOVWF  x76
04618:  MOVLB  0
0461A:  CALL   0662
....................                   restart_wdt();
0461E:  CLRWDT
....................                   output_bit(P485ctrl,0);
04620:  BCF    F8A.3
04622:  BCF    F93.3
04624:  MOVLB  6
....................                
....................                }
....................             }
04626:  BRA    4698
....................             else
....................             {
....................                //invalid parameter
....................                TxD_Buff[0] = Address ;         //Address
04628:  MOVFF  64,66
....................                TxD_Buff[1] = 0x81 ;         //Function Code
0462C:  MOVLW  81
0462E:  MOVLB  0
04630:  MOVWF  x67
....................                TxD_Buff[2] = 0x02 ;         //illegal data address
04632:  MOVLW  02
04634:  MOVWF  x68
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
04636:  MOVLB  E
04638:  CLRF   x78
0463A:  MOVLW  66
0463C:  MOVWF  x77
0463E:  MOVLW  03
04640:  MOVWF  x79
04642:  MOVLB  0
04644:  CALL   33F6
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
04648:  MOVFF  667,69
....................                TxD_Buff[4] = CRC_Lo ;
0464C:  MOVFF  666,6A
.................... 
....................                //TxD_DataLen = 0x05 ;
....................                //rs485_ctrl = 1;
....................                //restart_wdt();
....................                //dmsec(4);
....................                //restart_wdt();
....................                //send = 1;
....................                //TI=1;
....................                output_bit(P485ctrl,1);
04650:  BSF    F8A.3
04652:  BCF    F93.3
....................                restart_wdt();
04654:  CLRWDT
....................                delay_ms(4);
04656:  MOVLW  04
04658:  MOVLB  E
0465A:  MOVWF  x76
0465C:  MOVLB  0
0465E:  CALL   0662
....................                restart_wdt();
04662:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
04664:  MOVF   x66,W
04666:  CALL   344C
....................                putc(TxD_Buff[1]) ;               //Function Code
0466A:  MOVF   x67,W
0466C:  CALL   344C
....................                putc(TxD_Buff[2]) ;               //Byte Count
04670:  MOVF   x68,W
04672:  CALL   344C
....................                putc(TxD_Buff[3]) ;
04676:  MOVF   x69,W
04678:  CALL   344C
....................                putc(TxD_Buff[4]) ;
0467C:  MOVF   x6A,W
0467E:  CALL   344C
.................... 
....................                restart_wdt();
04682:  CLRWDT
....................                delay_ms(3);
04684:  MOVLW  03
04686:  MOVLB  E
04688:  MOVWF  x76
0468A:  MOVLB  0
0468C:  CALL   0662
....................                restart_wdt();
04690:  CLRWDT
....................                output_bit(P485ctrl,0);
04692:  BCF    F8A.3
04694:  BCF    F93.3
04696:  MOVLB  6
04698:  MOVLB  2
....................                
....................             }
....................          }
.................... ////\*/
....................                  /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
0469A:  MOVF   x67,W
0469C:  SUBLW  07
0469E:  BTFSS  FD8.2
046A0:  BRA    4804
....................       {
....................          Alarmtosend();
046A2:  MOVLB  0
046A4:  GOTO   3454
....................          
....................          disable_interrupts(INT_TIMER2);
046A8:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
046AA:  MOVFF  20,66F
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
046AE:  MOVFF  21,670
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
046B2:  MOVFF  22,671
....................             Data_Buff[3] = Input25_32_Send ;
046B6:  MOVFF  23,672
....................             Data_Buff[4] = Input33_40_Send ;
046BA:  MOVFF  24,673
....................             Data_Buff[5] = Input41_48_Send ;
046BE:  MOVFF  25,674
....................             Data_Buff[6] = Input49_56_Send ;
046C2:  MOVFF  26,675
....................             Data_Buff[7] = Input57_64_Send ;
046C6:  MOVFF  27,676
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
046CA:  MOVFF  28,677
....................             Data_Buff[9] = Ack9_16_Send ;
046CE:  MOVFF  29,678
....................             Data_Buff[10] = Ack17_24_Send ;
046D2:  MOVFF  2A,679
....................             Data_Buff[11] = Ack25_32_Send ;
046D6:  MOVFF  2B,67A
....................             Data_Buff[12] = Ack33_40_Send ;
046DA:  MOVFF  2C,67B
....................             Data_Buff[13] = Ack41_48_Send ;
046DE:  MOVFF  2D,67C
....................             Data_Buff[14] = Ack49_56_Send ;
046E2:  MOVFF  2E,67D
....................             Data_Buff[15] = Ack57_64_Send ;
046E6:  MOVFF  2F,67E
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
046EA:  MOVFF  64,66
....................             TxD_Buff[1] = 0x07 ;         //Function Code
046EE:  MOVLW  07
046F0:  MOVWF  x67
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
046F2:  MOVLW  10
046F4:  MOVLB  6
046F6:  MOVWF  x6E
046F8:  MOVFF  66E,68
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
046FC:  MOVFF  66F,69
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
04700:  MOVFF  670,6A
....................             TxD_Buff[5] = Data_Buff[2] ;  
04704:  MOVFF  671,6B
....................             TxD_Buff[6] = Data_Buff[3] ;
04708:  MOVFF  672,6C
....................             TxD_Buff[7] = Data_Buff[4] ;
0470C:  MOVFF  673,6D
....................             TxD_Buff[8] = Data_Buff[5] ;
04710:  MOVFF  674,6E
....................             TxD_Buff[9] = Data_Buff[6] ;
04714:  MOVFF  675,6F
....................             TxD_Buff[10] = Data_Buff[7] ;
04718:  MOVFF  676,70
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
0471C:  MOVFF  677,71
....................            TxD_Buff[12] = Data_Buff[9] ;
04720:  MOVFF  678,72
....................            TxD_Buff[13] = Data_Buff[10] ;
04724:  MOVFF  679,73
....................            TxD_Buff[14] = Data_Buff[11] ;
04728:  MOVFF  67A,74
....................            TxD_Buff[15] = Data_Buff[12] ;
0472C:  MOVFF  67B,75
....................            TxD_Buff[16] = Data_Buff[13] ;
04730:  MOVFF  67C,76
....................            TxD_Buff[17] = Data_Buff[14] ;
04734:  MOVFF  67D,77
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
04738:  MOVFF  67E,78
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
0473C:  MOVLB  E
0473E:  CLRF   x78
04740:  MOVLW  66
04742:  MOVWF  x77
04744:  MOVLW  13
04746:  MOVWF  x79
04748:  MOVLB  0
0474A:  CALL   33F6
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
0474E:  MOVFF  667,79
....................           TxD_Buff[20] = CRC_Lo ;
04752:  MOVFF  666,7A
.................... 
....................         
....................          output_bit(P485ctrl,1);
04756:  BSF    F8A.3
04758:  BCF    F93.3
....................          restart_wdt();
0475A:  CLRWDT
....................          delay_ms(4);
0475C:  MOVLW  04
0475E:  MOVLB  E
04760:  MOVWF  x76
04762:  MOVLB  0
04764:  CALL   0662
....................          restart_wdt();
04768:  CLRWDT
....................                
....................          putc(TxD_Buff[0]) ;               //Address
0476A:  MOVF   x66,W
0476C:  CALL   344C
....................          putc(TxD_Buff[1]) ;               //Function Code
04770:  MOVF   x67,W
04772:  CALL   344C
....................          putc(TxD_Buff[2]) ;               //Byte Count
04776:  MOVF   x68,W
04778:  CALL   344C
....................          putc(TxD_Buff[3]) ;
0477C:  MOVF   x69,W
0477E:  CALL   344C
....................          putc(TxD_Buff[4]) ;
04782:  MOVF   x6A,W
04784:  CALL   344C
....................          putc(TxD_Buff[5]) ;
04788:  MOVF   x6B,W
0478A:  CALL   344C
....................          putc(TxD_Buff[6]) ;
0478E:  MOVF   x6C,W
04790:  CALL   344C
....................          putc(TxD_Buff[7]) ;
04794:  MOVF   x6D,W
04796:  CALL   344C
....................          putc(TxD_Buff[8]) ;
0479A:  MOVF   x6E,W
0479C:  CALL   344C
....................          putc(TxD_Buff[9]) ;
047A0:  MOVF   x6F,W
047A2:  CALL   344C
....................          putc(TxD_Buff[10]) ;
047A6:  MOVF   x70,W
047A8:  CALL   344C
....................          putc(TxD_Buff[11]) ;
047AC:  MOVF   x71,W
047AE:  CALL   344C
....................          putc(TxD_Buff[12]) ;
047B2:  MOVF   x72,W
047B4:  CALL   344C
....................          putc(TxD_Buff[13]) ;
047B8:  MOVF   x73,W
047BA:  CALL   344C
....................          putc(TxD_Buff[14]) ;
047BE:  MOVF   x74,W
047C0:  CALL   344C
....................          putc(TxD_Buff[15]) ;
047C4:  MOVF   x75,W
047C6:  CALL   344C
....................          putc(TxD_Buff[16]) ;
047CA:  MOVF   x76,W
047CC:  CALL   344C
....................          putc(TxD_Buff[17]) ;
047D0:  MOVF   x77,W
047D2:  CALL   344C
....................          putc(TxD_Buff[18]) ;
047D6:  MOVF   x78,W
047D8:  CALL   344C
....................          putc(TxD_Buff[19]) ;
047DC:  MOVF   x79,W
047DE:  CALL   344C
....................          putc(TxD_Buff[20]) ;
047E2:  MOVF   x7A,W
047E4:  CALL   344C
.................... 
....................          restart_wdt();
047E8:  CLRWDT
....................          delay_ms(3);
047EA:  MOVLW  03
047EC:  MOVLB  E
047EE:  MOVWF  x76
047F0:  MOVLB  0
047F2:  CALL   0662
....................          restart_wdt();
047F6:  CLRWDT
....................          output_bit(P485ctrl,0);
047F8:  BCF    F8A.3
047FA:  BCF    F93.3
....................            
....................         
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
047FC:  BSF    F9D.1
....................      
....................        }
047FE:  GOTO   6BBE
04802:  MOVLB  2
....................       /////////////////////////////////////////////////////////////////
.................... 
....................        else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
04804:  MOVF   x67,W
04806:  SUBLW  05
04808:  BTFSS  FD8.2
0480A:  BRA    4CF8
....................          {
....................             //Do Force Coil
....................             Start_Address = RxD_Buff[2] ;
0480C:  MOVLB  6
0480E:  CLRF   x6B
04810:  MOVFF  268,66A
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
04814:  MOVFF  66A,66B
04818:  MOVLB  E
0481A:  CLRF   x76
0481C:  MOVF   x76,W
0481E:  MOVLB  2
04820:  IORWF  x69,W
04822:  MOVLB  6
04824:  MOVWF  x6A
04826:  MOVLB  6
....................             No_PointCount = RxD_Buff[4] ;
04828:  CLRF   x6D
0482A:  MOVFF  26A,66C
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
0482E:  MOVFF  66C,66D
04832:  MOVLB  E
04834:  CLRF   x76
04836:  MOVF   x76,W
04838:  MOVLB  2
0483A:  IORWF  x6B,W
0483C:  MOVLB  6
0483E:  MOVWF  x6C
04840:  MOVLB  6
.................... 
....................             if(Start_Address == 0x00)   ////// Acknowlegde //////
04842:  MOVF   x6A,F
04844:  BNZ   48E4
04846:  MOVF   x6B,F
04848:  BNZ   48E4
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
0484A:  MOVF   x6C,F
0484C:  BNZ   48E2
0484E:  INCFSZ x6D,W
04850:  BRA    48E2
....................                {
....................                   //Modbus_ACK = 1 ;
....................                   AutoAckFlag = 1;
04852:  BSF    1C.2
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04854:  MOVFF  64,66
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04858:  MOVLW  05
0485A:  MOVLB  0
0485C:  MOVWF  x67
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0485E:  MOVFF  268,68
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04862:  MOVFF  269,69
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04866:  MOVFF  26A,6A
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
0486A:  MOVFF  26B,6B
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0486E:  MOVLB  E
04870:  CLRF   x78
04872:  MOVLW  66
04874:  MOVWF  x77
04876:  MOVLW  06
04878:  MOVWF  x79
0487A:  MOVLB  0
0487C:  CALL   33F6
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
04880:  MOVFF  667,6C
....................                   TxD_Buff[7] = CRC_Lo ;
04884:  MOVFF  666,6D
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................               output_bit(P485ctrl,1);
04888:  BSF    F8A.3
0488A:  BCF    F93.3
....................                   restart_wdt();
0488C:  CLRWDT
....................                   delay_ms(4);
0488E:  MOVLW  04
04890:  MOVLB  E
04892:  MOVWF  x76
04894:  MOVLB  0
04896:  CALL   0662
....................                   restart_wdt();
0489A:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
0489C:  MOVF   x66,W
0489E:  CALL   344C
....................                   putc(TxD_Buff[1]) ;               //Function Code
048A2:  MOVF   x67,W
048A4:  CALL   344C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
048A8:  MOVF   x68,W
048AA:  CALL   344C
....................                   putc(TxD_Buff[3]) ;
048AE:  MOVF   x69,W
048B0:  CALL   344C
....................                   putc(TxD_Buff[4]) ;
048B4:  MOVF   x6A,W
048B6:  CALL   344C
....................                   putc(TxD_Buff[5]) ;
048BA:  MOVF   x6B,W
048BC:  CALL   344C
....................                   putc(TxD_Buff[6]) ;
048C0:  MOVF   x6C,W
048C2:  CALL   344C
....................                   putc(TxD_Buff[7]) ;
048C6:  MOVF   x6D,W
048C8:  CALL   344C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
048CC:  CLRWDT
....................                   delay_ms(3);
048CE:  MOVLW  03
048D0:  MOVLB  E
048D2:  MOVWF  x76
048D4:  MOVLB  0
048D6:  CALL   0662
....................                   restart_wdt();
048DA:  CLRWDT
....................                   output_bit(P485ctrl,0);
048DC:  BCF    F8A.3
048DE:  BCF    F93.3
048E0:  MOVLB  6
....................               
....................                }
....................             }
048E2:  BRA    4CF2
....................             else if(Start_Address == 0x01)   ///// Reset //////
048E4:  DECFSZ x6A,W
048E6:  BRA    4986
048E8:  MOVF   x6B,F
048EA:  BNZ   4986
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
048EC:  MOVF   x6C,F
048EE:  BNZ   4984
048F0:  INCFSZ x6D,W
048F2:  BRA    4984
....................                {
....................                   //Modbus_RET = 1 ;
....................                   AutoResetFlag = 1;
048F4:  BSF    1C.3
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
048F6:  MOVFF  64,66
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
048FA:  MOVLW  05
048FC:  MOVLB  0
048FE:  MOVWF  x67
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04900:  MOVFF  268,68
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04904:  MOVFF  269,69
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04908:  MOVFF  26A,6A
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
0490C:  MOVFF  26B,6B
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04910:  MOVLB  E
04912:  CLRF   x78
04914:  MOVLW  66
04916:  MOVWF  x77
04918:  MOVLW  06
0491A:  MOVWF  x79
0491C:  MOVLB  0
0491E:  CALL   33F6
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
04922:  MOVFF  667,6C
....................                   TxD_Buff[7] = CRC_Lo ;
04926:  MOVFF  666,6D
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                  //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................               output_bit(P485ctrl,1);
0492A:  BSF    F8A.3
0492C:  BCF    F93.3
....................                   restart_wdt();
0492E:  CLRWDT
....................                   delay_ms(4);
04930:  MOVLW  04
04932:  MOVLB  E
04934:  MOVWF  x76
04936:  MOVLB  0
04938:  CALL   0662
....................                   restart_wdt();
0493C:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
0493E:  MOVF   x66,W
04940:  CALL   344C
....................                   putc(TxD_Buff[1]) ;               //Function Code
04944:  MOVF   x67,W
04946:  CALL   344C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
0494A:  MOVF   x68,W
0494C:  CALL   344C
....................                   putc(TxD_Buff[3]) ;
04950:  MOVF   x69,W
04952:  CALL   344C
....................                   putc(TxD_Buff[4]) ;
04956:  MOVF   x6A,W
04958:  CALL   344C
....................                   putc(TxD_Buff[5]) ;
0495C:  MOVF   x6B,W
0495E:  CALL   344C
....................                   putc(TxD_Buff[6]) ;
04962:  MOVF   x6C,W
04964:  CALL   344C
....................                   putc(TxD_Buff[7]) ;
04968:  MOVF   x6D,W
0496A:  CALL   344C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
0496E:  CLRWDT
....................                   delay_ms(3);
04970:  MOVLW  03
04972:  MOVLB  E
04974:  MOVWF  x76
04976:  MOVLB  0
04978:  CALL   0662
....................                   restart_wdt();
0497C:  CLRWDT
....................                   output_bit(P485ctrl,0);
0497E:  BCF    F8A.3
04980:  BCF    F93.3
04982:  MOVLB  6
....................               
....................                }
....................             }
04984:  BRA    4CF2
....................             else if(Start_Address == 0x02)   ///// Test //////
04986:  MOVF   x6A,W
04988:  SUBLW  02
0498A:  BTFSS  FD8.2
0498C:  BRA    4AD8
0498E:  MOVF   x6B,F
04990:  BTFSS  FD8.2
04992:  BRA    4AD8
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
04994:  MOVF   x6C,F
04996:  BNZ   4A2E
04998:  INCFSZ x6D,W
0499A:  BRA    4A2E
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   AutoTestFlag = 1;
0499C:  BSF    1C.4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
0499E:  MOVFF  64,66
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
049A2:  MOVLW  05
049A4:  MOVLB  0
049A6:  MOVWF  x67
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
049A8:  MOVFF  268,68
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
049AC:  MOVFF  269,69
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
049B0:  MOVFF  26A,6A
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
049B4:  MOVFF  26B,6B
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
049B8:  MOVLB  E
049BA:  CLRF   x78
049BC:  MOVLW  66
049BE:  MOVWF  x77
049C0:  MOVLW  06
049C2:  MOVWF  x79
049C4:  MOVLB  0
049C6:  CALL   33F6
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
049CA:  MOVFF  667,6C
....................                   TxD_Buff[7] = CRC_Lo ;
049CE:  MOVFF  666,6D
.................... 
....................                  //TxD_DataLen = 0x08 ;
....................                  //rs485_ctrl = 1;
....................                  //dmsec(4);
....................                  //send = 1;
....................                  //TI=1;
....................                   output_bit(P485ctrl,1);
049D2:  BSF    F8A.3
049D4:  BCF    F93.3
....................                   restart_wdt();
049D6:  CLRWDT
....................                   delay_ms(4);
049D8:  MOVLW  04
049DA:  MOVLB  E
049DC:  MOVWF  x76
049DE:  MOVLB  0
049E0:  CALL   0662
....................                   restart_wdt();
049E4:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
049E6:  MOVF   x66,W
049E8:  CALL   344C
....................                   putc(TxD_Buff[1]) ;               //Function Code
049EC:  MOVF   x67,W
049EE:  CALL   344C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
049F2:  MOVF   x68,W
049F4:  CALL   344C
....................                   putc(TxD_Buff[3]) ;
049F8:  MOVF   x69,W
049FA:  CALL   344C
....................                   putc(TxD_Buff[4]) ;
049FE:  MOVF   x6A,W
04A00:  CALL   344C
....................                   putc(TxD_Buff[5]) ;
04A04:  MOVF   x6B,W
04A06:  CALL   344C
....................                   putc(TxD_Buff[6]) ;
04A0A:  MOVF   x6C,W
04A0C:  CALL   344C
....................                   putc(TxD_Buff[7]) ;
04A10:  MOVF   x6D,W
04A12:  CALL   344C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04A16:  CLRWDT
....................                   delay_ms(3);
04A18:  MOVLW  03
04A1A:  MOVLB  E
04A1C:  MOVWF  x76
04A1E:  MOVLB  0
04A20:  CALL   0662
....................                   restart_wdt();
04A24:  CLRWDT
....................                   output_bit(P485ctrl,0);
04A26:  BCF    F8A.3
04A28:  BCF    F93.3
....................              
....................                }
04A2A:  BRA    4AD4
04A2C:  MOVLB  6
....................                else if(No_PointCount == 0x00)   //OFF
04A2E:  MOVF   x6C,F
04A30:  BNZ   4AD6
04A32:  MOVF   x6D,F
04A34:  BNZ   4AD6
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   AutoTestFlag = 0;
04A36:  BCF    1C.4
....................                   Read_input();
04A38:  MOVLB  0
04A3A:  CALL   22D6
....................                   AutoAckFlag = 1;
04A3E:  BSF    1C.2
....................                   check_ack();
04A40:  CALL   390E
....................                   AutoResetFlag = 1;
04A44:  BSF    1C.3
....................                   check_reset();
04A46:  CALL   3ACA
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04A4A:  MOVFF  64,66
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04A4E:  MOVLW  05
04A50:  MOVWF  x67
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04A52:  MOVFF  268,68
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04A56:  MOVFF  269,69
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04A5A:  MOVFF  26A,6A
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04A5E:  MOVFF  26B,6B
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04A62:  MOVLB  E
04A64:  CLRF   x78
04A66:  MOVLW  66
04A68:  MOVWF  x77
04A6A:  MOVLW  06
04A6C:  MOVWF  x79
04A6E:  MOVLB  0
04A70:  CALL   33F6
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
04A74:  MOVFF  667,6C
....................                   TxD_Buff[7] = CRC_Lo ;
04A78:  MOVFF  666,6D
.................... 
....................                   output_bit(P485ctrl,1);
04A7C:  BSF    F8A.3
04A7E:  BCF    F93.3
....................                   restart_wdt();
04A80:  CLRWDT
....................                   delay_ms(4);
04A82:  MOVLW  04
04A84:  MOVLB  E
04A86:  MOVWF  x76
04A88:  MOVLB  0
04A8A:  CALL   0662
....................                   restart_wdt();
04A8E:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04A90:  MOVF   x66,W
04A92:  CALL   344C
....................                   putc(TxD_Buff[1]) ;               //Function Code
04A96:  MOVF   x67,W
04A98:  CALL   344C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04A9C:  MOVF   x68,W
04A9E:  CALL   344C
....................                   putc(TxD_Buff[3]) ;
04AA2:  MOVF   x69,W
04AA4:  CALL   344C
....................                   putc(TxD_Buff[4]) ;
04AA8:  MOVF   x6A,W
04AAA:  CALL   344C
....................                   putc(TxD_Buff[5]) ;
04AAE:  MOVF   x6B,W
04AB0:  CALL   344C
....................                   putc(TxD_Buff[6]) ;
04AB4:  MOVF   x6C,W
04AB6:  CALL   344C
....................                   putc(TxD_Buff[7]) ;
04ABA:  MOVF   x6D,W
04ABC:  CALL   344C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04AC0:  CLRWDT
....................                   delay_ms(3);
04AC2:  MOVLW  03
04AC4:  MOVLB  E
04AC6:  MOVWF  x76
04AC8:  MOVLB  0
04ACA:  CALL   0662
....................                   restart_wdt();
04ACE:  CLRWDT
....................                   output_bit(P485ctrl,0);
04AD0:  BCF    F8A.3
04AD2:  BCF    F93.3
04AD4:  MOVLB  6
....................                   
....................                }
....................             }
04AD6:  BRA    4CF2
....................             else if(Start_Address == 0x03)   ///// Function Test //////
04AD8:  MOVF   x6A,W
04ADA:  SUBLW  03
04ADC:  BTFSS  FD8.2
04ADE:  BRA    4C2A
04AE0:  MOVF   x6B,F
04AE2:  BTFSS  FD8.2
04AE4:  BRA    4C2A
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
04AE6:  MOVF   x6C,F
04AE8:  BNZ   4B80
04AEA:  INCFSZ x6D,W
04AEC:  BRA    4B80
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   Test_fault = 1 ;
04AEE:  BSF    1C.5
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04AF0:  MOVFF  64,66
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04AF4:  MOVLW  05
04AF6:  MOVLB  0
04AF8:  MOVWF  x67
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04AFA:  MOVFF  268,68
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04AFE:  MOVFF  269,69
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04B02:  MOVFF  26A,6A
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04B06:  MOVFF  26B,6B
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04B0A:  MOVLB  E
04B0C:  CLRF   x78
04B0E:  MOVLW  66
04B10:  MOVWF  x77
04B12:  MOVLW  06
04B14:  MOVWF  x79
04B16:  MOVLB  0
04B18:  CALL   33F6
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
04B1C:  MOVFF  667,6C
....................                   TxD_Buff[7] = CRC_Lo ;
04B20:  MOVFF  666,6D
.................... 
....................                   output_bit(P485ctrl,1);
04B24:  BSF    F8A.3
04B26:  BCF    F93.3
....................                   restart_wdt();
04B28:  CLRWDT
....................                   delay_ms(8);
04B2A:  MOVLW  08
04B2C:  MOVLB  E
04B2E:  MOVWF  x76
04B30:  MOVLB  0
04B32:  CALL   0662
....................                   restart_wdt();
04B36:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04B38:  MOVF   x66,W
04B3A:  CALL   344C
....................                   putc(TxD_Buff[1]) ;               //Function Code
04B3E:  MOVF   x67,W
04B40:  CALL   344C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04B44:  MOVF   x68,W
04B46:  CALL   344C
....................                   putc(TxD_Buff[3]) ;
04B4A:  MOVF   x69,W
04B4C:  CALL   344C
....................                   putc(TxD_Buff[4]) ;
04B50:  MOVF   x6A,W
04B52:  CALL   344C
....................                   putc(TxD_Buff[5]) ;
04B56:  MOVF   x6B,W
04B58:  CALL   344C
....................                   putc(TxD_Buff[6]) ;
04B5C:  MOVF   x6C,W
04B5E:  CALL   344C
....................                   putc(TxD_Buff[7]) ;
04B62:  MOVF   x6D,W
04B64:  CALL   344C
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04B68:  CLRWDT
....................                   delay_ms(8);
04B6A:  MOVLW  08
04B6C:  MOVLB  E
04B6E:  MOVWF  x76
04B70:  MOVLB  0
04B72:  CALL   0662
....................                   restart_wdt();
04B76:  CLRWDT
....................                   output_bit(P485ctrl,0);
04B78:  BCF    F8A.3
04B7A:  BCF    F93.3
....................               
....................                }
04B7C:  BRA    4C26
04B7E:  MOVLB  6
....................                else if(No_PointCount == 0x00)   //OFF
04B80:  MOVF   x6C,F
04B82:  BNZ   4C28
04B84:  MOVF   x6D,F
04B86:  BNZ   4C28
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   Test_fault = 0;
04B88:  BCF    1C.5
....................                   Read_input();
04B8A:  MOVLB  0
04B8C:  CALL   22D6
....................                   AutoAckFlag = 1;
04B90:  BSF    1C.2
....................                   check_ack();
04B92:  CALL   390E
....................                   AutoResetFlag = 1;
04B96:  BSF    1C.3
....................                   check_reset();
04B98:  CALL   3ACA
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04B9C:  MOVFF  64,66
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04BA0:  MOVLW  05
04BA2:  MOVWF  x67
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04BA4:  MOVFF  268,68
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04BA8:  MOVFF  269,69
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04BAC:  MOVFF  26A,6A
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04BB0:  MOVFF  26B,6B
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04BB4:  MOVLB  E
04BB6:  CLRF   x78
04BB8:  MOVLW  66
04BBA:  MOVWF  x77
04BBC:  MOVLW  06
04BBE:  MOVWF  x79
04BC0:  MOVLB  0
04BC2:  CALL   33F6
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
04BC6:  MOVFF  667,6C
....................                   TxD_Buff[7] = CRC_Lo ;
04BCA:  MOVFF  666,6D
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
04BCE:  BSF    F8A.3
04BD0:  BCF    F93.3
....................                   restart_wdt();
04BD2:  CLRWDT
....................                   delay_ms(4);
04BD4:  MOVLW  04
04BD6:  MOVLB  E
04BD8:  MOVWF  x76
04BDA:  MOVLB  0
04BDC:  CALL   0662
....................                   restart_wdt();
04BE0:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04BE2:  MOVF   x66,W
04BE4:  CALL   344C
....................                   putc(TxD_Buff[1]) ;               //Function Code
04BE8:  MOVF   x67,W
04BEA:  CALL   344C
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04BEE:  MOVF   x68,W
04BF0:  CALL   344C
....................                   putc(TxD_Buff[3]) ;
04BF4:  MOVF   x69,W
04BF6:  CALL   344C
....................                   putc(TxD_Buff[4]) ;
04BFA:  MOVF   x6A,W
04BFC:  CALL   344C
....................                   putc(TxD_Buff[5]) ;
04C00:  MOVF   x6B,W
04C02:  CALL   344C
....................                   putc(TxD_Buff[6]) ;
04C06:  MOVF   x6C,W
04C08:  CALL   344C
....................                   putc(TxD_Buff[7]) ;
04C0C:  MOVF   x6D,W
04C0E:  CALL   344C
.................... 
....................                   restart_wdt();
04C12:  CLRWDT
....................                   delay_ms(3);
04C14:  MOVLW  03
04C16:  MOVLB  E
04C18:  MOVWF  x76
04C1A:  MOVLB  0
04C1C:  CALL   0662
....................                   restart_wdt();
04C20:  CLRWDT
....................                   output_bit(P485ctrl,0);
04C22:  BCF    F8A.3
04C24:  BCF    F93.3
04C26:  MOVLB  6
....................                   
....................                }
....................             }
04C28:  BRA    4CF2
....................             else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
04C2A:  MOVF   x6A,W
04C2C:  SUBLW  64
04C2E:  BNZ   4CF2
04C30:  MOVF   x6B,F
04C32:  BNZ   4CF2
....................             {
....................                Address = No_PointCount;
04C34:  MOVFF  66C,64
....................                write_eeprom(0x1D,Address);   //Communication Address
04C38:  MOVF   FF2,W
04C3A:  MOVWF  00
04C3C:  BCF    FF2.7
04C3E:  CLRF   FAA
04C40:  MOVLW  1D
04C42:  MOVWF  FA9
04C44:  MOVFF  64,FA8
04C48:  BCF    FA6.6
04C4A:  BCF    FA6.7
04C4C:  BSF    FA6.2
04C4E:  MOVLB  F
04C50:  MOVLW  55
04C52:  MOVWF  FA7
04C54:  MOVLW  AA
04C56:  MOVWF  FA7
04C58:  BSF    FA6.1
04C5A:  BTFSC  FA6.1
04C5C:  BRA    4C5A
04C5E:  BCF    FA6.2
04C60:  MOVF   00,W
04C62:  IORWF  FF2,F
....................                
....................                TxD_Buff[0] = Address ;         //Address
04C64:  MOVFF  64,66
....................                TxD_Buff[1] = 0x05 ;         //Function Code
04C68:  MOVLW  05
04C6A:  MOVLB  0
04C6C:  MOVWF  x67
....................                TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04C6E:  MOVFF  268,68
....................                TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04C72:  MOVFF  269,69
....................                TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04C76:  MOVFF  26A,6A
....................                TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04C7A:  MOVFF  26B,6B
.................... 
....................                CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04C7E:  MOVLB  E
04C80:  CLRF   x78
04C82:  MOVLW  66
04C84:  MOVWF  x77
04C86:  MOVLW  06
04C88:  MOVWF  x79
04C8A:  MOVLB  0
04C8C:  CALL   33F6
.................... 
....................                TxD_Buff[6] = CRC_Hi ;
04C90:  MOVFF  667,6C
....................                TxD_Buff[7] = CRC_Lo ;
04C94:  MOVFF  666,6D
.................... 
....................                output_bit(P485ctrl,1);
04C98:  BSF    F8A.3
04C9A:  BCF    F93.3
....................                restart_wdt();
04C9C:  CLRWDT
....................                delay_ms(4);
04C9E:  MOVLW  04
04CA0:  MOVLB  E
04CA2:  MOVWF  x76
04CA4:  MOVLB  0
04CA6:  CALL   0662
....................                restart_wdt();
04CAA:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
04CAC:  MOVF   x66,W
04CAE:  CALL   344C
....................                putc(TxD_Buff[1]) ;               //Function Code
04CB2:  MOVF   x67,W
04CB4:  CALL   344C
....................                putc(TxD_Buff[2]) ;               //Byte Count
04CB8:  MOVF   x68,W
04CBA:  CALL   344C
....................                putc(TxD_Buff[3]) ;
04CBE:  MOVF   x69,W
04CC0:  CALL   344C
....................                putc(TxD_Buff[4]) ;
04CC4:  MOVF   x6A,W
04CC6:  CALL   344C
....................                putc(TxD_Buff[5]) ;
04CCA:  MOVF   x6B,W
04CCC:  CALL   344C
....................                putc(TxD_Buff[6]) ;
04CD0:  MOVF   x6C,W
04CD2:  CALL   344C
....................                putc(TxD_Buff[7]) ;
04CD6:  MOVF   x6D,W
04CD8:  CALL   344C
....................                //putc(TxD_Buff[8]) ;
....................                //putc(TxD_Buff[9]) ;
.................... 
....................                restart_wdt();
04CDC:  CLRWDT
....................                delay_ms(3);
04CDE:  MOVLW  03
04CE0:  MOVLB  E
04CE2:  MOVWF  x76
04CE4:  MOVLB  0
04CE6:  CALL   0662
....................                restart_wdt();
04CEA:  CLRWDT
....................                output_bit(P485ctrl,0);
04CEC:  BCF    F8A.3
04CEE:  BCF    F93.3
04CF0:  MOVLB  6
.................... 
.................... 
....................                //save_addr();
....................             }
....................          }
04CF2:  GOTO   6BC0
04CF6:  MOVLB  2
....................          //--------------------------------------------------//
....................          
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
04CF8:  MOVF   x67,W
04CFA:  SUBLW  21
04CFC:  BTFSS  FD8.2
04CFE:  GOTO   5666
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
04D02:  MOVF   FF2,W
04D04:  MOVWF  00
04D06:  BCF    FF2.7
04D08:  CLRF   FAA
04D0A:  CLRF   FA9
04D0C:  MOVLW  0F
04D0E:  MOVWF  FA8
04D10:  BCF    FA6.6
04D12:  BCF    FA6.7
04D14:  BSF    FA6.2
04D16:  MOVLB  F
04D18:  MOVLW  55
04D1A:  MOVWF  FA7
04D1C:  MOVLW  AA
04D1E:  MOVWF  FA7
04D20:  BSF    FA6.1
04D22:  BTFSC  FA6.1
04D24:  BRA    4D22
04D26:  BCF    FA6.2
04D28:  MOVF   00,W
04D2A:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Inputt Type
04D2C:  MOVFF  FF2,00
04D30:  BCF    FF2.7
04D32:  CLRF   FAA
04D34:  MOVLW  01
04D36:  MOVWF  FA9
04D38:  MOVFF  269,FA8
04D3C:  BCF    FA6.6
04D3E:  BCF    FA6.7
04D40:  BSF    FA6.2
04D42:  MOVLW  55
04D44:  MOVWF  FA7
04D46:  MOVLW  AA
04D48:  MOVWF  FA7
04D4A:  BSF    FA6.1
04D4C:  BTFSC  FA6.1
04D4E:  BRA    4D4C
04D50:  BCF    FA6.2
04D52:  MOVF   00,W
04D54:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
04D56:  MOVFF  FF2,00
04D5A:  BCF    FF2.7
04D5C:  CLRF   FAA
04D5E:  MOVLW  02
04D60:  MOVWF  FA9
04D62:  MOVFF  26A,FA8
04D66:  BCF    FA6.6
04D68:  BCF    FA6.7
04D6A:  BSF    FA6.2
04D6C:  MOVLW  55
04D6E:  MOVWF  FA7
04D70:  MOVLW  AA
04D72:  MOVWF  FA7
04D74:  BSF    FA6.1
04D76:  BTFSC  FA6.1
04D78:  BRA    4D76
04D7A:  BCF    FA6.2
04D7C:  MOVF   00,W
04D7E:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
04D80:  MOVFF  FF2,00
04D84:  BCF    FF2.7
04D86:  CLRF   FAA
04D88:  MOVLW  03
04D8A:  MOVWF  FA9
04D8C:  MOVFF  26B,FA8
04D90:  BCF    FA6.6
04D92:  BCF    FA6.7
04D94:  BSF    FA6.2
04D96:  MOVLW  55
04D98:  MOVWF  FA7
04D9A:  MOVLW  AA
04D9C:  MOVWF  FA7
04D9E:  BSF    FA6.1
04DA0:  BTFSC  FA6.1
04DA2:  BRA    4DA0
04DA4:  BCF    FA6.2
04DA6:  MOVF   00,W
04DA8:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
04DAA:  MOVFF  FF2,00
04DAE:  BCF    FF2.7
04DB0:  CLRF   FAA
04DB2:  MOVLW  04
04DB4:  MOVWF  FA9
04DB6:  MOVFF  26C,FA8
04DBA:  BCF    FA6.6
04DBC:  BCF    FA6.7
04DBE:  BSF    FA6.2
04DC0:  MOVLW  55
04DC2:  MOVWF  FA7
04DC4:  MOVLW  AA
04DC6:  MOVWF  FA7
04DC8:  BSF    FA6.1
04DCA:  BTFSC  FA6.1
04DCC:  BRA    4DCA
04DCE:  BCF    FA6.2
04DD0:  MOVF   00,W
04DD2:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
04DD4:  MOVFF  FF2,00
04DD8:  BCF    FF2.7
04DDA:  CLRF   FAA
04DDC:  MOVLW  05
04DDE:  MOVWF  FA9
04DE0:  MOVFF  26D,FA8
04DE4:  BCF    FA6.6
04DE6:  BCF    FA6.7
04DE8:  BSF    FA6.2
04DEA:  MOVLW  55
04DEC:  MOVWF  FA7
04DEE:  MOVLW  AA
04DF0:  MOVWF  FA7
04DF2:  BSF    FA6.1
04DF4:  BTFSC  FA6.1
04DF6:  BRA    4DF4
04DF8:  BCF    FA6.2
04DFA:  MOVF   00,W
04DFC:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
04DFE:  MOVFF  FF2,00
04E02:  BCF    FF2.7
04E04:  CLRF   FAA
04E06:  MOVLW  06
04E08:  MOVWF  FA9
04E0A:  MOVFF  26E,FA8
04E0E:  BCF    FA6.6
04E10:  BCF    FA6.7
04E12:  BSF    FA6.2
04E14:  MOVLW  55
04E16:  MOVWF  FA7
04E18:  MOVLW  AA
04E1A:  MOVWF  FA7
04E1C:  BSF    FA6.1
04E1E:  BTFSC  FA6.1
04E20:  BRA    4E1E
04E22:  BCF    FA6.2
04E24:  MOVF   00,W
04E26:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
04E28:  MOVFF  FF2,00
04E2C:  BCF    FF2.7
04E2E:  CLRF   FAA
04E30:  MOVLW  07
04E32:  MOVWF  FA9
04E34:  MOVFF  26F,FA8
04E38:  BCF    FA6.6
04E3A:  BCF    FA6.7
04E3C:  BSF    FA6.2
04E3E:  MOVLW  55
04E40:  MOVWF  FA7
04E42:  MOVLW  AA
04E44:  MOVWF  FA7
04E46:  BSF    FA6.1
04E48:  BTFSC  FA6.1
04E4A:  BRA    4E48
04E4C:  BCF    FA6.2
04E4E:  MOVF   00,W
04E50:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
04E52:  MOVFF  FF2,00
04E56:  BCF    FF2.7
04E58:  CLRF   FAA
04E5A:  MOVLW  08
04E5C:  MOVWF  FA9
04E5E:  MOVFF  270,FA8
04E62:  BCF    FA6.6
04E64:  BCF    FA6.7
04E66:  BSF    FA6.2
04E68:  MOVLW  55
04E6A:  MOVWF  FA7
04E6C:  MOVLW  AA
04E6E:  MOVWF  FA7
04E70:  BSF    FA6.1
04E72:  BTFSC  FA6.1
04E74:  BRA    4E72
04E76:  BCF    FA6.2
04E78:  MOVF   00,W
04E7A:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
04E7C:  MOVFF  FF2,00
04E80:  BCF    FF2.7
04E82:  CLRF   FAA
04E84:  MOVLW  09
04E86:  MOVWF  FA9
04E88:  MOVFF  271,FA8
04E8C:  BCF    FA6.6
04E8E:  BCF    FA6.7
04E90:  BSF    FA6.2
04E92:  MOVLW  55
04E94:  MOVWF  FA7
04E96:  MOVLW  AA
04E98:  MOVWF  FA7
04E9A:  BSF    FA6.1
04E9C:  BTFSC  FA6.1
04E9E:  BRA    4E9C
04EA0:  BCF    FA6.2
04EA2:  MOVF   00,W
04EA4:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
04EA6:  MOVFF  FF2,00
04EAA:  BCF    FF2.7
04EAC:  CLRF   FAA
04EAE:  MOVLW  0A
04EB0:  MOVWF  FA9
04EB2:  MOVFF  272,FA8
04EB6:  BCF    FA6.6
04EB8:  BCF    FA6.7
04EBA:  BSF    FA6.2
04EBC:  MOVLW  55
04EBE:  MOVWF  FA7
04EC0:  MOVLW  AA
04EC2:  MOVWF  FA7
04EC4:  BSF    FA6.1
04EC6:  BTFSC  FA6.1
04EC8:  BRA    4EC6
04ECA:  BCF    FA6.2
04ECC:  MOVF   00,W
04ECE:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
04ED0:  MOVFF  FF2,00
04ED4:  BCF    FF2.7
04ED6:  CLRF   FAA
04ED8:  MOVLW  0B
04EDA:  MOVWF  FA9
04EDC:  MOVFF  273,FA8
04EE0:  BCF    FA6.6
04EE2:  BCF    FA6.7
04EE4:  BSF    FA6.2
04EE6:  MOVLW  55
04EE8:  MOVWF  FA7
04EEA:  MOVLW  AA
04EEC:  MOVWF  FA7
04EEE:  BSF    FA6.1
04EF0:  BTFSC  FA6.1
04EF2:  BRA    4EF0
04EF4:  BCF    FA6.2
04EF6:  MOVF   00,W
04EF8:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
04EFA:  MOVFF  FF2,00
04EFE:  BCF    FF2.7
04F00:  CLRF   FAA
04F02:  MOVLW  0C
04F04:  MOVWF  FA9
04F06:  MOVFF  274,FA8
04F0A:  BCF    FA6.6
04F0C:  BCF    FA6.7
04F0E:  BSF    FA6.2
04F10:  MOVLW  55
04F12:  MOVWF  FA7
04F14:  MOVLW  AA
04F16:  MOVWF  FA7
04F18:  BSF    FA6.1
04F1A:  BTFSC  FA6.1
04F1C:  BRA    4F1A
04F1E:  BCF    FA6.2
04F20:  MOVF   00,W
04F22:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
04F24:  MOVFF  FF2,00
04F28:  BCF    FF2.7
04F2A:  CLRF   FAA
04F2C:  MOVLW  0D
04F2E:  MOVWF  FA9
04F30:  MOVFF  275,FA8
04F34:  BCF    FA6.6
04F36:  BCF    FA6.7
04F38:  BSF    FA6.2
04F3A:  MOVLW  55
04F3C:  MOVWF  FA7
04F3E:  MOVLW  AA
04F40:  MOVWF  FA7
04F42:  BSF    FA6.1
04F44:  BTFSC  FA6.1
04F46:  BRA    4F44
04F48:  BCF    FA6.2
04F4A:  MOVF   00,W
04F4C:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
04F4E:  MOVFF  FF2,00
04F52:  BCF    FF2.7
04F54:  CLRF   FAA
04F56:  MOVLW  0E
04F58:  MOVWF  FA9
04F5A:  MOVFF  276,FA8
04F5E:  BCF    FA6.6
04F60:  BCF    FA6.7
04F62:  BSF    FA6.2
04F64:  MOVLW  55
04F66:  MOVWF  FA7
04F68:  MOVLW  AA
04F6A:  MOVWF  FA7
04F6C:  BSF    FA6.1
04F6E:  BTFSC  FA6.1
04F70:  BRA    4F6E
04F72:  BCF    FA6.2
04F74:  MOVF   00,W
04F76:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
04F78:  MOVFF  FF2,00
04F7C:  BCF    FF2.7
04F7E:  CLRF   FAA
04F80:  MOVLW  0F
04F82:  MOVWF  FA9
04F84:  MOVFF  277,FA8
04F88:  BCF    FA6.6
04F8A:  BCF    FA6.7
04F8C:  BSF    FA6.2
04F8E:  MOVLW  55
04F90:  MOVWF  FA7
04F92:  MOVLW  AA
04F94:  MOVWF  FA7
04F96:  BSF    FA6.1
04F98:  BTFSC  FA6.1
04F9A:  BRA    4F98
04F9C:  BCF    FA6.2
04F9E:  MOVF   00,W
04FA0:  IORWF  FF2,F
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
04FA2:  MOVFF  FF2,00
04FA6:  BCF    FF2.7
04FA8:  CLRF   FAA
04FAA:  MOVLW  10
04FAC:  MOVWF  FA9
04FAE:  MOVFF  278,FA8
04FB2:  BCF    FA6.6
04FB4:  BCF    FA6.7
04FB6:  BSF    FA6.2
04FB8:  MOVLW  55
04FBA:  MOVWF  FA7
04FBC:  MOVLW  AA
04FBE:  MOVWF  FA7
04FC0:  BSF    FA6.1
04FC2:  BTFSC  FA6.1
04FC4:  BRA    4FC2
04FC6:  BCF    FA6.2
04FC8:  MOVF   00,W
04FCA:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
04FCC:  MOVFF  FF2,00
04FD0:  BCF    FF2.7
04FD2:  CLRF   FAA
04FD4:  MOVLW  11
04FD6:  MOVWF  FA9
04FD8:  MOVFF  279,FA8
04FDC:  BCF    FA6.6
04FDE:  BCF    FA6.7
04FE0:  BSF    FA6.2
04FE2:  MOVLW  55
04FE4:  MOVWF  FA7
04FE6:  MOVLW  AA
04FE8:  MOVWF  FA7
04FEA:  BSF    FA6.1
04FEC:  BTFSC  FA6.1
04FEE:  BRA    4FEC
04FF0:  BCF    FA6.2
04FF2:  MOVF   00,W
04FF4:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
04FF6:  MOVFF  FF2,00
04FFA:  BCF    FF2.7
04FFC:  CLRF   FAA
04FFE:  MOVLW  12
05000:  MOVWF  FA9
05002:  MOVFF  27A,FA8
05006:  BCF    FA6.6
05008:  BCF    FA6.7
0500A:  BSF    FA6.2
0500C:  MOVLW  55
0500E:  MOVWF  FA7
05010:  MOVLW  AA
05012:  MOVWF  FA7
05014:  BSF    FA6.1
05016:  BTFSC  FA6.1
05018:  BRA    5016
0501A:  BCF    FA6.2
0501C:  MOVF   00,W
0501E:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
05020:  MOVFF  FF2,00
05024:  BCF    FF2.7
05026:  CLRF   FAA
05028:  MOVLW  13
0502A:  MOVWF  FA9
0502C:  MOVFF  27B,FA8
05030:  BCF    FA6.6
05032:  BCF    FA6.7
05034:  BSF    FA6.2
05036:  MOVLW  55
05038:  MOVWF  FA7
0503A:  MOVLW  AA
0503C:  MOVWF  FA7
0503E:  BSF    FA6.1
05040:  BTFSC  FA6.1
05042:  BRA    5040
05044:  BCF    FA6.2
05046:  MOVF   00,W
05048:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
0504A:  MOVFF  FF2,00
0504E:  BCF    FF2.7
05050:  CLRF   FAA
05052:  MOVLW  14
05054:  MOVWF  FA9
05056:  MOVFF  27C,FA8
0505A:  BCF    FA6.6
0505C:  BCF    FA6.7
0505E:  BSF    FA6.2
05060:  MOVLW  55
05062:  MOVWF  FA7
05064:  MOVLW  AA
05066:  MOVWF  FA7
05068:  BSF    FA6.1
0506A:  BTFSC  FA6.1
0506C:  BRA    506A
0506E:  BCF    FA6.2
05070:  MOVF   00,W
05072:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
05074:  MOVFF  FF2,00
05078:  BCF    FF2.7
0507A:  CLRF   FAA
0507C:  MOVLW  15
0507E:  MOVWF  FA9
05080:  MOVFF  27D,FA8
05084:  BCF    FA6.6
05086:  BCF    FA6.7
05088:  BSF    FA6.2
0508A:  MOVLW  55
0508C:  MOVWF  FA7
0508E:  MOVLW  AA
05090:  MOVWF  FA7
05092:  BSF    FA6.1
05094:  BTFSC  FA6.1
05096:  BRA    5094
05098:  BCF    FA6.2
0509A:  MOVF   00,W
0509C:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
0509E:  MOVFF  FF2,00
050A2:  BCF    FF2.7
050A4:  CLRF   FAA
050A6:  MOVLW  16
050A8:  MOVWF  FA9
050AA:  MOVFF  27E,FA8
050AE:  BCF    FA6.6
050B0:  BCF    FA6.7
050B2:  BSF    FA6.2
050B4:  MOVLW  55
050B6:  MOVWF  FA7
050B8:  MOVLW  AA
050BA:  MOVWF  FA7
050BC:  BSF    FA6.1
050BE:  BTFSC  FA6.1
050C0:  BRA    50BE
050C2:  BCF    FA6.2
050C4:  MOVF   00,W
050C6:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
050C8:  MOVFF  FF2,00
050CC:  BCF    FF2.7
050CE:  CLRF   FAA
050D0:  MOVLW  17
050D2:  MOVWF  FA9
050D4:  MOVFF  27F,FA8
050D8:  BCF    FA6.6
050DA:  BCF    FA6.7
050DC:  BSF    FA6.2
050DE:  MOVLW  55
050E0:  MOVWF  FA7
050E2:  MOVLW  AA
050E4:  MOVWF  FA7
050E6:  BSF    FA6.1
050E8:  BTFSC  FA6.1
050EA:  BRA    50E8
050EC:  BCF    FA6.2
050EE:  MOVF   00,W
050F0:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
050F2:  MOVFF  FF2,00
050F6:  BCF    FF2.7
050F8:  CLRF   FAA
050FA:  MOVLW  18
050FC:  MOVWF  FA9
050FE:  MOVFF  280,FA8
05102:  BCF    FA6.6
05104:  BCF    FA6.7
05106:  BSF    FA6.2
05108:  MOVLW  55
0510A:  MOVWF  FA7
0510C:  MOVLW  AA
0510E:  MOVWF  FA7
05110:  BSF    FA6.1
05112:  BTFSC  FA6.1
05114:  BRA    5112
05116:  BCF    FA6.2
05118:  MOVF   00,W
0511A:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
0511C:  MOVFF  FF2,00
05120:  BCF    FF2.7
05122:  CLRF   FAA
05124:  MOVLW  19
05126:  MOVWF  FA9
05128:  MOVFF  281,FA8
0512C:  BCF    FA6.6
0512E:  BCF    FA6.7
05130:  BSF    FA6.2
05132:  MOVLW  55
05134:  MOVWF  FA7
05136:  MOVLW  AA
05138:  MOVWF  FA7
0513A:  BSF    FA6.1
0513C:  BTFSC  FA6.1
0513E:  BRA    513C
05140:  BCF    FA6.2
05142:  MOVF   00,W
05144:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
05146:  MOVFF  FF2,00
0514A:  BCF    FF2.7
0514C:  CLRF   FAA
0514E:  MOVLW  1A
05150:  MOVWF  FA9
05152:  MOVFF  282,FA8
05156:  BCF    FA6.6
05158:  BCF    FA6.7
0515A:  BSF    FA6.2
0515C:  MOVLW  55
0515E:  MOVWF  FA7
05160:  MOVLW  AA
05162:  MOVWF  FA7
05164:  BSF    FA6.1
05166:  BTFSC  FA6.1
05168:  BRA    5166
0516A:  BCF    FA6.2
0516C:  MOVF   00,W
0516E:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
05170:  MOVFF  FF2,00
05174:  BCF    FF2.7
05176:  CLRF   FAA
05178:  MOVLW  1B
0517A:  MOVWF  FA9
0517C:  MOVFF  283,FA8
05180:  BCF    FA6.6
05182:  BCF    FA6.7
05184:  BSF    FA6.2
05186:  MOVLW  55
05188:  MOVWF  FA7
0518A:  MOVLW  AA
0518C:  MOVWF  FA7
0518E:  BSF    FA6.1
05190:  BTFSC  FA6.1
05192:  BRA    5190
05194:  BCF    FA6.2
05196:  MOVF   00,W
05198:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //FaultDelayTime
0519A:  MOVFF  FF2,00
0519E:  BCF    FF2.7
051A0:  CLRF   FAA
051A2:  MOVLW  1C
051A4:  MOVWF  FA9
051A6:  MOVFF  284,FA8
051AA:  BCF    FA6.6
051AC:  BCF    FA6.7
051AE:  BSF    FA6.2
051B0:  MOVLW  55
051B2:  MOVWF  FA7
051B4:  MOVLW  AA
051B6:  MOVWF  FA7
051B8:  BSF    FA6.1
051BA:  BTFSC  FA6.1
051BC:  BRA    51BA
051BE:  BCF    FA6.2
051C0:  MOVF   00,W
051C2:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
051C4:  MOVFF  FF2,00
051C8:  BCF    FF2.7
051CA:  CLRF   FAA
051CC:  MOVLW  1D
051CE:  MOVWF  FA9
051D0:  MOVFF  285,FA8
051D4:  BCF    FA6.6
051D6:  BCF    FA6.7
051D8:  BSF    FA6.2
051DA:  MOVLW  55
051DC:  MOVWF  FA7
051DE:  MOVLW  AA
051E0:  MOVWF  FA7
051E2:  BSF    FA6.1
051E4:  BTFSC  FA6.1
051E6:  BRA    51E4
051E8:  BCF    FA6.2
051EA:  MOVF   00,W
051EC:  IORWF  FF2,F
....................             
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Communication Address
051EE:  MOVFF  FF2,00
051F2:  BCF    FF2.7
051F4:  CLRF   FAA
051F6:  MOVLW  1E
051F8:  MOVWF  FA9
051FA:  MOVFF  286,FA8
051FE:  BCF    FA6.6
05200:  BCF    FA6.7
05202:  BSF    FA6.2
05204:  MOVLW  55
05206:  MOVWF  FA7
05208:  MOVLW  AA
0520A:  MOVWF  FA7
0520C:  BSF    FA6.1
0520E:  BTFSC  FA6.1
05210:  BRA    520E
05212:  BCF    FA6.2
05214:  MOVF   00,W
05216:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Communication Address
05218:  MOVFF  FF2,00
0521C:  BCF    FF2.7
0521E:  CLRF   FAA
05220:  MOVLW  1F
05222:  MOVWF  FA9
05224:  MOVFF  287,FA8
05228:  BCF    FA6.6
0522A:  BCF    FA6.7
0522C:  BSF    FA6.2
0522E:  MOVLW  55
05230:  MOVWF  FA7
05232:  MOVLW  AA
05234:  MOVWF  FA7
05236:  BSF    FA6.1
05238:  BTFSC  FA6.1
0523A:  BRA    5238
0523C:  BCF    FA6.2
0523E:  MOVF   00,W
05240:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Communication Address
05242:  MOVFF  FF2,00
05246:  BCF    FF2.7
05248:  CLRF   FAA
0524A:  MOVLW  20
0524C:  MOVWF  FA9
0524E:  MOVFF  288,FA8
05252:  BCF    FA6.6
05254:  BCF    FA6.7
05256:  BSF    FA6.2
05258:  MOVLW  55
0525A:  MOVWF  FA7
0525C:  MOVLW  AA
0525E:  MOVWF  FA7
05260:  BSF    FA6.1
05262:  BTFSC  FA6.1
05264:  BRA    5262
05266:  BCF    FA6.2
05268:  MOVF   00,W
0526A:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Communication Address
0526C:  MOVFF  FF2,00
05270:  BCF    FF2.7
05272:  CLRF   FAA
05274:  MOVLW  21
05276:  MOVWF  FA9
05278:  MOVFF  289,FA8
0527C:  BCF    FA6.6
0527E:  BCF    FA6.7
05280:  BSF    FA6.2
05282:  MOVLW  55
05284:  MOVWF  FA7
05286:  MOVLW  AA
05288:  MOVWF  FA7
0528A:  BSF    FA6.1
0528C:  BTFSC  FA6.1
0528E:  BRA    528C
05290:  BCF    FA6.2
05292:  MOVF   00,W
05294:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Communication Address
05296:  MOVFF  FF2,00
0529A:  BCF    FF2.7
0529C:  CLRF   FAA
0529E:  MOVLW  22
052A0:  MOVWF  FA9
052A2:  MOVFF  28A,FA8
052A6:  BCF    FA6.6
052A8:  BCF    FA6.7
052AA:  BSF    FA6.2
052AC:  MOVLW  55
052AE:  MOVWF  FA7
052B0:  MOVLW  AA
052B2:  MOVWF  FA7
052B4:  BSF    FA6.1
052B6:  BTFSC  FA6.1
052B8:  BRA    52B6
052BA:  BCF    FA6.2
052BC:  MOVF   00,W
052BE:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Communication Address
052C0:  MOVFF  FF2,00
052C4:  BCF    FF2.7
052C6:  CLRF   FAA
052C8:  MOVLW  23
052CA:  MOVWF  FA9
052CC:  MOVFF  28B,FA8
052D0:  BCF    FA6.6
052D2:  BCF    FA6.7
052D4:  BSF    FA6.2
052D6:  MOVLW  55
052D8:  MOVWF  FA7
052DA:  MOVLW  AA
052DC:  MOVWF  FA7
052DE:  BSF    FA6.1
052E0:  BTFSC  FA6.1
052E2:  BRA    52E0
052E4:  BCF    FA6.2
052E6:  MOVF   00,W
052E8:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Communication Address
052EA:  MOVFF  FF2,00
052EE:  BCF    FF2.7
052F0:  CLRF   FAA
052F2:  MOVLW  24
052F4:  MOVWF  FA9
052F6:  MOVFF  28C,FA8
052FA:  BCF    FA6.6
052FC:  BCF    FA6.7
052FE:  BSF    FA6.2
05300:  MOVLW  55
05302:  MOVWF  FA7
05304:  MOVLW  AA
05306:  MOVWF  FA7
05308:  BSF    FA6.1
0530A:  BTFSC  FA6.1
0530C:  BRA    530A
0530E:  BCF    FA6.2
05310:  MOVF   00,W
05312:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Communication Address
05314:  MOVFF  FF2,00
05318:  BCF    FF2.7
0531A:  CLRF   FAA
0531C:  MOVLW  25
0531E:  MOVWF  FA9
05320:  MOVFF  28D,FA8
05324:  BCF    FA6.6
05326:  BCF    FA6.7
05328:  BSF    FA6.2
0532A:  MOVLW  55
0532C:  MOVWF  FA7
0532E:  MOVLW  AA
05330:  MOVWF  FA7
05332:  BSF    FA6.1
05334:  BTFSC  FA6.1
05336:  BRA    5334
05338:  BCF    FA6.2
0533A:  MOVF   00,W
0533C:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Communication Address
0533E:  MOVFF  FF2,00
05342:  BCF    FF2.7
05344:  CLRF   FAA
05346:  MOVLW  26
05348:  MOVWF  FA9
0534A:  MOVFF  28E,FA8
0534E:  BCF    FA6.6
05350:  BCF    FA6.7
05352:  BSF    FA6.2
05354:  MOVLW  55
05356:  MOVWF  FA7
05358:  MOVLW  AA
0535A:  MOVWF  FA7
0535C:  BSF    FA6.1
0535E:  BTFSC  FA6.1
05360:  BRA    535E
05362:  BCF    FA6.2
05364:  MOVF   00,W
05366:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Communication Address
05368:  MOVFF  FF2,00
0536C:  BCF    FF2.7
0536E:  CLRF   FAA
05370:  MOVLW  27
05372:  MOVWF  FA9
05374:  MOVFF  28F,FA8
05378:  BCF    FA6.6
0537A:  BCF    FA6.7
0537C:  BSF    FA6.2
0537E:  MOVLW  55
05380:  MOVWF  FA7
05382:  MOVLW  AA
05384:  MOVWF  FA7
05386:  BSF    FA6.1
05388:  BTFSC  FA6.1
0538A:  BRA    5388
0538C:  BCF    FA6.2
0538E:  MOVF   00,W
05390:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Communication Address
05392:  MOVFF  FF2,00
05396:  BCF    FF2.7
05398:  CLRF   FAA
0539A:  MOVLW  28
0539C:  MOVWF  FA9
0539E:  MOVFF  290,FA8
053A2:  BCF    FA6.6
053A4:  BCF    FA6.7
053A6:  BSF    FA6.2
053A8:  MOVLW  55
053AA:  MOVWF  FA7
053AC:  MOVLW  AA
053AE:  MOVWF  FA7
053B0:  BSF    FA6.1
053B2:  BTFSC  FA6.1
053B4:  BRA    53B2
053B6:  BCF    FA6.2
053B8:  MOVF   00,W
053BA:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Communication Address
053BC:  MOVFF  FF2,00
053C0:  BCF    FF2.7
053C2:  CLRF   FAA
053C4:  MOVLW  29
053C6:  MOVWF  FA9
053C8:  MOVFF  291,FA8
053CC:  BCF    FA6.6
053CE:  BCF    FA6.7
053D0:  BSF    FA6.2
053D2:  MOVLW  55
053D4:  MOVWF  FA7
053D6:  MOVLW  AA
053D8:  MOVWF  FA7
053DA:  BSF    FA6.1
053DC:  BTFSC  FA6.1
053DE:  BRA    53DC
053E0:  BCF    FA6.2
053E2:  MOVF   00,W
053E4:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Communication Address
053E6:  MOVFF  FF2,00
053EA:  BCF    FF2.7
053EC:  CLRF   FAA
053EE:  MOVLW  2A
053F0:  MOVWF  FA9
053F2:  MOVFF  292,FA8
053F6:  BCF    FA6.6
053F8:  BCF    FA6.7
053FA:  BSF    FA6.2
053FC:  MOVLW  55
053FE:  MOVWF  FA7
05400:  MOVLW  AA
05402:  MOVWF  FA7
05404:  BSF    FA6.1
05406:  BTFSC  FA6.1
05408:  BRA    5406
0540A:  BCF    FA6.2
0540C:  MOVF   00,W
0540E:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Communication Address
05410:  MOVFF  FF2,00
05414:  BCF    FF2.7
05416:  CLRF   FAA
05418:  MOVLW  2B
0541A:  MOVWF  FA9
0541C:  MOVFF  293,FA8
05420:  BCF    FA6.6
05422:  BCF    FA6.7
05424:  BSF    FA6.2
05426:  MOVLW  55
05428:  MOVWF  FA7
0542A:  MOVLW  AA
0542C:  MOVWF  FA7
0542E:  BSF    FA6.1
05430:  BTFSC  FA6.1
05432:  BRA    5430
05434:  BCF    FA6.2
05436:  MOVF   00,W
05438:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Communication Address
0543A:  MOVFF  FF2,00
0543E:  BCF    FF2.7
05440:  CLRF   FAA
05442:  MOVLW  2C
05444:  MOVWF  FA9
05446:  MOVFF  294,FA8
0544A:  BCF    FA6.6
0544C:  BCF    FA6.7
0544E:  BSF    FA6.2
05450:  MOVLW  55
05452:  MOVWF  FA7
05454:  MOVLW  AA
05456:  MOVWF  FA7
05458:  BSF    FA6.1
0545A:  BTFSC  FA6.1
0545C:  BRA    545A
0545E:  BCF    FA6.2
05460:  MOVF   00,W
05462:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Communication Address
05464:  MOVFF  FF2,00
05468:  BCF    FF2.7
0546A:  CLRF   FAA
0546C:  MOVLW  2D
0546E:  MOVWF  FA9
05470:  MOVFF  295,FA8
05474:  BCF    FA6.6
05476:  BCF    FA6.7
05478:  BSF    FA6.2
0547A:  MOVLW  55
0547C:  MOVWF  FA7
0547E:  MOVLW  AA
05480:  MOVWF  FA7
05482:  BSF    FA6.1
05484:  BTFSC  FA6.1
05486:  BRA    5484
05488:  BCF    FA6.2
0548A:  MOVF   00,W
0548C:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Communication Address
0548E:  MOVFF  FF2,00
05492:  BCF    FF2.7
05494:  CLRF   FAA
05496:  MOVLW  2E
05498:  MOVWF  FA9
0549A:  MOVFF  296,FA8
0549E:  BCF    FA6.6
054A0:  BCF    FA6.7
054A2:  BSF    FA6.2
054A4:  MOVLW  55
054A6:  MOVWF  FA7
054A8:  MOVLW  AA
054AA:  MOVWF  FA7
054AC:  BSF    FA6.1
054AE:  BTFSC  FA6.1
054B0:  BRA    54AE
054B2:  BCF    FA6.2
054B4:  MOVF   00,W
054B6:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Communication Address
054B8:  MOVFF  FF2,00
054BC:  BCF    FF2.7
054BE:  CLRF   FAA
054C0:  MOVLW  2F
054C2:  MOVWF  FA9
054C4:  MOVFF  297,FA8
054C8:  BCF    FA6.6
054CA:  BCF    FA6.7
054CC:  BSF    FA6.2
054CE:  MOVLW  55
054D0:  MOVWF  FA7
054D2:  MOVLW  AA
054D4:  MOVWF  FA7
054D6:  BSF    FA6.1
054D8:  BTFSC  FA6.1
054DA:  BRA    54D8
054DC:  BCF    FA6.2
054DE:  MOVF   00,W
054E0:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Communication Address
054E2:  MOVFF  FF2,00
054E6:  BCF    FF2.7
054E8:  CLRF   FAA
054EA:  MOVLW  30
054EC:  MOVWF  FA9
054EE:  MOVFF  298,FA8
054F2:  BCF    FA6.6
054F4:  BCF    FA6.7
054F6:  BSF    FA6.2
054F8:  MOVLW  55
054FA:  MOVWF  FA7
054FC:  MOVLW  AA
054FE:  MOVWF  FA7
05500:  BSF    FA6.1
05502:  BTFSC  FA6.1
05504:  BRA    5502
05506:  BCF    FA6.2
05508:  MOVF   00,W
0550A:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Communication Address
0550C:  MOVFF  FF2,00
05510:  BCF    FF2.7
05512:  CLRF   FAA
05514:  MOVLW  31
05516:  MOVWF  FA9
05518:  MOVFF  299,FA8
0551C:  BCF    FA6.6
0551E:  BCF    FA6.7
05520:  BSF    FA6.2
05522:  MOVLW  55
05524:  MOVWF  FA7
05526:  MOVLW  AA
05528:  MOVWF  FA7
0552A:  BSF    FA6.1
0552C:  BTFSC  FA6.1
0552E:  BRA    552C
05530:  BCF    FA6.2
05532:  MOVF   00,W
05534:  IORWF  FF2,F
....................             
....................             int16  a = 0; 
....................             unsigned char  phonenum;
05536:  MOVLB  E
05538:  CLRF   x6E
0553A:  CLRF   x6D
....................             for(; ; a++)
....................             {
....................                restart_wdt();
0553C:  CLRWDT
....................                phonenum = RxD_Buff[52 + a];
0553E:  MOVLW  9A
05540:  ADDWF  x6D,W
05542:  MOVWF  FE9
05544:  MOVLW  02
05546:  ADDWFC x6E,W
05548:  MOVWF  FEA
0554A:  MOVFF  FEF,E6F
....................                if((phonenum == 0x0D) || (a > 15))
0554E:  MOVF   x6F,W
05550:  SUBLW  0D
05552:  BZ    555E
05554:  MOVF   x6E,F
05556:  BNZ   555E
05558:  MOVF   x6D,W
0555A:  SUBLW  0F
0555C:  BC    55AC
....................                {
....................                   sms_phonenumber[a] =  '\0' ;
0555E:  MOVLW  74
05560:  ADDWF  x6D,W
05562:  MOVWF  FE9
05564:  MOVLW  0A
05566:  ADDWFC x6E,W
05568:  MOVWF  FEA
0556A:  CLRF   FEF
....................                   write_eeprom(0x32+a,phonenum);
0556C:  MOVLW  32
0556E:  ADDWF  x6D,W
05570:  MOVWF  x76
05572:  MOVLW  00
05574:  ADDWFC x6E,W
05576:  MOVWF  x77
05578:  MOVF   FF2,W
0557A:  MOVWF  00
0557C:  BCF    FF2.7
0557E:  MOVFF  E77,FAA
05582:  MOVFF  E76,FA9
05586:  MOVFF  E6F,FA8
0558A:  BCF    FA6.6
0558C:  BCF    FA6.7
0558E:  BSF    FA6.2
05590:  MOVLB  F
05592:  MOVLW  55
05594:  MOVWF  FA7
05596:  MOVLW  AA
05598:  MOVWF  FA7
0559A:  BSF    FA6.1
0559C:  BTFSC  FA6.1
0559E:  BRA    559C
055A0:  BCF    FA6.2
055A2:  MOVF   00,W
055A4:  IORWF  FF2,F
....................                   break;
055A6:  BRA    5602
....................                }
055A8:  BRA    55F6
055AA:  MOVLB  E
....................                else
....................                {
....................                   sms_phonenumber[a] = phonenum;
055AC:  MOVLW  74
055AE:  ADDWF  x6D,W
055B0:  MOVWF  FE9
055B2:  MOVLW  0A
055B4:  ADDWFC x6E,W
055B6:  MOVWF  FEA
055B8:  MOVFF  E6F,FEF
....................                   
....................                   write_eeprom(0x32+a,phonenum);
055BC:  MOVLW  32
055BE:  ADDWF  x6D,W
055C0:  MOVWF  x76
055C2:  MOVLW  00
055C4:  ADDWFC x6E,W
055C6:  MOVWF  x77
055C8:  MOVF   FF2,W
055CA:  MOVWF  00
055CC:  BCF    FF2.7
055CE:  MOVFF  E77,FAA
055D2:  MOVFF  E76,FA9
055D6:  MOVFF  E6F,FA8
055DA:  BCF    FA6.6
055DC:  BCF    FA6.7
055DE:  BSF    FA6.2
055E0:  MOVLB  F
055E2:  MOVLW  55
055E4:  MOVWF  FA7
055E6:  MOVLW  AA
055E8:  MOVWF  FA7
055EA:  BSF    FA6.1
055EC:  BTFSC  FA6.1
055EE:  BRA    55EC
055F0:  BCF    FA6.2
055F2:  MOVF   00,W
055F4:  IORWF  FF2,F
....................                }
055F6:  MOVLB  E
055F8:  INCF   x6D,F
055FA:  BTFSC  FD8.2
055FC:  INCF   x6E,F
055FE:  BRA    553C
05600:  MOVLB  F
....................             }
....................             
....................             TxD_Buff[0] = Address ;         //Address
05602:  MOVFF  64,66
....................             TxD_Buff[1] = 0x21 ;            //return function code
05606:  MOVLW  21
05608:  MOVLB  0
0560A:  MOVWF  x67
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
0560C:  MOVLB  E
0560E:  CLRF   x78
05610:  MOVLW  66
05612:  MOVWF  x77
05614:  MOVLW  02
05616:  MOVWF  x79
05618:  MOVLB  0
0561A:  CALL   33F6
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
0561E:  MOVFF  667,68
....................             TxD_Buff[3] = CRC_Lo ;
05622:  MOVFF  666,69
.................... 
....................             output_bit(P485ctrl,1);
05626:  BSF    F8A.3
05628:  BCF    F93.3
....................             delay_ms(10);
0562A:  MOVLW  0A
0562C:  MOVLB  E
0562E:  MOVWF  x76
05630:  MOVLB  0
05632:  CALL   0662
.................... 
....................             putc(Txd_Buff[0]);
05636:  MOVF   x66,W
05638:  CALL   344C
....................             putc(Txd_Buff[1]);
0563C:  MOVF   x67,W
0563E:  CALL   344C
....................             putc(Txd_Buff[2]);
05642:  MOVF   x68,W
05644:  CALL   344C
....................             putc(Txd_Buff[3]);
05648:  MOVF   x69,W
0564A:  CALL   344C
.................... 
....................             delay_ms(3);
0564E:  MOVLW  03
05650:  MOVLB  E
05652:  MOVWF  x76
05654:  MOVLB  0
05656:  CALL   0662
....................             output_bit(P485ctrl,0);
0565A:  BCF    F8A.3
0565C:  BCF    F93.3
....................             
....................             reset_cpu();
0565E:  RESET
....................             //Read_Config(); //jj
....................          }
05660:  GOTO   6BBE
05664:  MOVLB  2
....................          
....................          else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
05666:  MOVF   x67,W
05668:  SUBLW  22
0566A:  BTFSS  FD8.2
0566C:  GOTO   6BBE
....................             {
....................                
....................                //SMS_Massage
....................                int16  i =4,j=0,k=0; //i =4 are first data from RxD_Buff[]
05670:  MOVLB  E
05672:  CLRF   x71
05674:  MOVLW  04
05676:  MOVWF  x70
05678:  CLRF   x73
0567A:  CLRF   x72
0567C:  CLRF   x75
0567E:  CLRF   x74
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05680:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05682:  MOVLW  66
05684:  ADDWF  x70,W
05686:  MOVWF  FE9
05688:  MOVLW  02
0568A:  ADDWFC x71,W
0568C:  MOVWF  FEA
0568E:  MOVF   FEF,W
05690:  SUBLW  0D
05692:  BZ    569E
05694:  MOVF   x73,F
05696:  BNZ   569E
05698:  MOVF   x72,W
0569A:  SUBLW  1E
0569C:  BC    56DE
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
0569E:  MOVLW  5D
056A0:  ADDWF  x70,W
056A2:  MOVWF  x76
056A4:  MOVLW  00
056A6:  ADDWFC x71,W
056A8:  MOVWF  x77
056AA:  MOVF   FF2,W
056AC:  MOVWF  00
056AE:  BCF    FF2.7
056B0:  MOVFF  E77,FAA
056B4:  MOVFF  E76,FA9
056B8:  MOVLW  0D
056BA:  MOVWF  FA8
056BC:  BCF    FA6.6
056BE:  BCF    FA6.7
056C0:  BSF    FA6.2
056C2:  MOVLB  F
056C4:  MOVLW  55
056C6:  MOVWF  FA7
056C8:  MOVLW  AA
056CA:  MOVWF  FA7
056CC:  BSF    FA6.1
056CE:  BTFSC  FA6.1
056D0:  BRA    56CE
056D2:  BCF    FA6.2
056D4:  MOVF   00,W
056D6:  IORWF  FF2,F
....................                      break;
056D8:  BRA    5768
....................                   }
056DA:  BRA    5750
056DC:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage1[j] = RxD_Buff[i];
056DE:  MOVLW  83
056E0:  ADDWF  x72,W
056E2:  MOVWF  01
056E4:  MOVLW  0A
056E6:  ADDWFC x73,W
056E8:  MOVWF  03
056EA:  MOVLW  66
056EC:  ADDWF  x70,W
056EE:  MOVWF  FE9
056F0:  MOVLW  02
056F2:  ADDWFC x71,W
056F4:  MOVWF  FEA
056F6:  MOVFF  FEF,E78
056FA:  MOVFF  03,FEA
056FE:  MOVFF  01,FE9
05702:  MOVFF  E78,FEF
....................                      
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05706:  MOVLW  5D
05708:  ADDWF  x70,W
0570A:  MOVWF  x76
0570C:  MOVLW  00
0570E:  ADDWFC x71,W
05710:  MOVWF  x77
05712:  MOVLW  66
05714:  ADDWF  x70,W
05716:  MOVWF  FE9
05718:  MOVLW  02
0571A:  ADDWFC x71,W
0571C:  MOVWF  FEA
0571E:  MOVFF  FEF,E78
05722:  MOVF   FF2,W
05724:  MOVWF  00
05726:  BCF    FF2.7
05728:  MOVFF  E77,FAA
0572C:  MOVFF  E76,FA9
05730:  MOVFF  E78,FA8
05734:  BCF    FA6.6
05736:  BCF    FA6.7
05738:  BSF    FA6.2
0573A:  MOVLB  F
0573C:  MOVLW  55
0573E:  MOVWF  FA7
05740:  MOVLW  AA
05742:  MOVWF  FA7
05744:  BSF    FA6.1
05746:  BTFSC  FA6.1
05748:  BRA    5746
0574A:  BCF    FA6.2
0574C:  MOVF   00,W
0574E:  IORWF  FF2,F
....................                   }
05750:  MOVLB  E
05752:  MOVFF  E71,03
05756:  MOVF   x70,W
05758:  INCF   x70,F
0575A:  BTFSC  FD8.2
0575C:  INCF   x71,F
0575E:  INCF   x72,F
05760:  BTFSC  FD8.2
05762:  INCF   x73,F
05764:  BRA    5680
05766:  MOVLB  F
....................                }
....................                SMS_Massage1[j] = '\0' ; // end string
05768:  MOVLW  83
0576A:  MOVLB  E
0576C:  ADDWF  x72,W
0576E:  MOVWF  FE9
05770:  MOVLW  0A
05772:  ADDWFC x73,W
05774:  MOVWF  FEA
05776:  CLRF   FEF
....................                
....................                j=0;
05778:  CLRF   x73
0577A:  CLRF   x72
....................                i++;
0577C:  INCF   x70,F
0577E:  BTFSC  FD8.2
05780:  INCF   x71,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05782:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05784:  MOVLW  66
05786:  ADDWF  x70,W
05788:  MOVWF  FE9
0578A:  MOVLW  02
0578C:  ADDWFC x71,W
0578E:  MOVWF  FEA
05790:  MOVF   FEF,W
05792:  SUBLW  0D
05794:  BZ    57A0
05796:  MOVF   x73,F
05798:  BNZ   57A0
0579A:  MOVF   x72,W
0579C:  SUBLW  1E
0579E:  BC    57E0
....................                   {  
....................                      write_eeprom(0x5D+i,0x0D);
057A0:  MOVLW  5D
057A2:  ADDWF  x70,W
057A4:  MOVWF  x76
057A6:  MOVLW  00
057A8:  ADDWFC x71,W
057AA:  MOVWF  x77
057AC:  MOVF   FF2,W
057AE:  MOVWF  00
057B0:  BCF    FF2.7
057B2:  MOVFF  E77,FAA
057B6:  MOVFF  E76,FA9
057BA:  MOVLW  0D
057BC:  MOVWF  FA8
057BE:  BCF    FA6.6
057C0:  BCF    FA6.7
057C2:  BSF    FA6.2
057C4:  MOVLB  F
057C6:  MOVLW  55
057C8:  MOVWF  FA7
057CA:  MOVLW  AA
057CC:  MOVWF  FA7
057CE:  BSF    FA6.1
057D0:  BTFSC  FA6.1
057D2:  BRA    57D0
057D4:  BCF    FA6.2
057D6:  MOVF   00,W
057D8:  IORWF  FF2,F
....................                      break;
057DA:  BRA    586A
....................                   }
057DC:  BRA    5852
057DE:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage2[j] = RxD_Buff[i];
057E0:  MOVLW  A3
057E2:  ADDWF  x72,W
057E4:  MOVWF  01
057E6:  MOVLW  0A
057E8:  ADDWFC x73,W
057EA:  MOVWF  03
057EC:  MOVLW  66
057EE:  ADDWF  x70,W
057F0:  MOVWF  FE9
057F2:  MOVLW  02
057F4:  ADDWFC x71,W
057F6:  MOVWF  FEA
057F8:  MOVFF  FEF,E78
057FC:  MOVFF  03,FEA
05800:  MOVFF  01,FE9
05804:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05808:  MOVLW  5D
0580A:  ADDWF  x70,W
0580C:  MOVWF  x76
0580E:  MOVLW  00
05810:  ADDWFC x71,W
05812:  MOVWF  x77
05814:  MOVLW  66
05816:  ADDWF  x70,W
05818:  MOVWF  FE9
0581A:  MOVLW  02
0581C:  ADDWFC x71,W
0581E:  MOVWF  FEA
05820:  MOVFF  FEF,E78
05824:  MOVF   FF2,W
05826:  MOVWF  00
05828:  BCF    FF2.7
0582A:  MOVFF  E77,FAA
0582E:  MOVFF  E76,FA9
05832:  MOVFF  E78,FA8
05836:  BCF    FA6.6
05838:  BCF    FA6.7
0583A:  BSF    FA6.2
0583C:  MOVLB  F
0583E:  MOVLW  55
05840:  MOVWF  FA7
05842:  MOVLW  AA
05844:  MOVWF  FA7
05846:  BSF    FA6.1
05848:  BTFSC  FA6.1
0584A:  BRA    5848
0584C:  BCF    FA6.2
0584E:  MOVF   00,W
05850:  IORWF  FF2,F
....................                   }
05852:  MOVLB  E
05854:  MOVFF  E71,03
05858:  MOVF   x70,W
0585A:  INCF   x70,F
0585C:  BTFSC  FD8.2
0585E:  INCF   x71,F
05860:  INCF   x72,F
05862:  BTFSC  FD8.2
05864:  INCF   x73,F
05866:  BRA    5782
05868:  MOVLB  F
....................                }
....................                SMS_Massage2[j] = '\0' ; // end string
0586A:  MOVLW  A3
0586C:  MOVLB  E
0586E:  ADDWF  x72,W
05870:  MOVWF  FE9
05872:  MOVLW  0A
05874:  ADDWFC x73,W
05876:  MOVWF  FEA
05878:  CLRF   FEF
....................                
....................                j=0;
0587A:  CLRF   x73
0587C:  CLRF   x72
....................                i++;
0587E:  INCF   x70,F
05880:  BTFSC  FD8.2
05882:  INCF   x71,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05884:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05886:  MOVLW  66
05888:  ADDWF  x70,W
0588A:  MOVWF  FE9
0588C:  MOVLW  02
0588E:  ADDWFC x71,W
05890:  MOVWF  FEA
05892:  MOVF   FEF,W
05894:  SUBLW  0D
05896:  BZ    58A2
05898:  MOVF   x73,F
0589A:  BNZ   58A2
0589C:  MOVF   x72,W
0589E:  SUBLW  1E
058A0:  BC    58E2
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
058A2:  MOVLW  5D
058A4:  ADDWF  x70,W
058A6:  MOVWF  x76
058A8:  MOVLW  00
058AA:  ADDWFC x71,W
058AC:  MOVWF  x77
058AE:  MOVF   FF2,W
058B0:  MOVWF  00
058B2:  BCF    FF2.7
058B4:  MOVFF  E77,FAA
058B8:  MOVFF  E76,FA9
058BC:  MOVLW  0D
058BE:  MOVWF  FA8
058C0:  BCF    FA6.6
058C2:  BCF    FA6.7
058C4:  BSF    FA6.2
058C6:  MOVLB  F
058C8:  MOVLW  55
058CA:  MOVWF  FA7
058CC:  MOVLW  AA
058CE:  MOVWF  FA7
058D0:  BSF    FA6.1
058D2:  BTFSC  FA6.1
058D4:  BRA    58D2
058D6:  BCF    FA6.2
058D8:  MOVF   00,W
058DA:  IORWF  FF2,F
....................                      break;
058DC:  BRA    596C
....................                   }
058DE:  BRA    5954
058E0:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage3[j] = RxD_Buff[i];
058E2:  MOVLW  C3
058E4:  ADDWF  x72,W
058E6:  MOVWF  01
058E8:  MOVLW  0A
058EA:  ADDWFC x73,W
058EC:  MOVWF  03
058EE:  MOVLW  66
058F0:  ADDWF  x70,W
058F2:  MOVWF  FE9
058F4:  MOVLW  02
058F6:  ADDWFC x71,W
058F8:  MOVWF  FEA
058FA:  MOVFF  FEF,E78
058FE:  MOVFF  03,FEA
05902:  MOVFF  01,FE9
05906:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0590A:  MOVLW  5D
0590C:  ADDWF  x70,W
0590E:  MOVWF  x76
05910:  MOVLW  00
05912:  ADDWFC x71,W
05914:  MOVWF  x77
05916:  MOVLW  66
05918:  ADDWF  x70,W
0591A:  MOVWF  FE9
0591C:  MOVLW  02
0591E:  ADDWFC x71,W
05920:  MOVWF  FEA
05922:  MOVFF  FEF,E78
05926:  MOVF   FF2,W
05928:  MOVWF  00
0592A:  BCF    FF2.7
0592C:  MOVFF  E77,FAA
05930:  MOVFF  E76,FA9
05934:  MOVFF  E78,FA8
05938:  BCF    FA6.6
0593A:  BCF    FA6.7
0593C:  BSF    FA6.2
0593E:  MOVLB  F
05940:  MOVLW  55
05942:  MOVWF  FA7
05944:  MOVLW  AA
05946:  MOVWF  FA7
05948:  BSF    FA6.1
0594A:  BTFSC  FA6.1
0594C:  BRA    594A
0594E:  BCF    FA6.2
05950:  MOVF   00,W
05952:  IORWF  FF2,F
....................                   }
05954:  MOVLB  E
05956:  MOVFF  E71,03
0595A:  MOVF   x70,W
0595C:  INCF   x70,F
0595E:  BTFSC  FD8.2
05960:  INCF   x71,F
05962:  INCF   x72,F
05964:  BTFSC  FD8.2
05966:  INCF   x73,F
05968:  BRA    5884
0596A:  MOVLB  F
....................                }
....................                SMS_Massage3[j] = '\0' ; // end string
0596C:  MOVLW  C3
0596E:  MOVLB  E
05970:  ADDWF  x72,W
05972:  MOVWF  FE9
05974:  MOVLW  0A
05976:  ADDWFC x73,W
05978:  MOVWF  FEA
0597A:  CLRF   FEF
....................                
....................                j=0;
0597C:  CLRF   x73
0597E:  CLRF   x72
....................                i++;
05980:  INCF   x70,F
05982:  BTFSC  FD8.2
05984:  INCF   x71,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05986:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05988:  MOVLW  66
0598A:  ADDWF  x70,W
0598C:  MOVWF  FE9
0598E:  MOVLW  02
05990:  ADDWFC x71,W
05992:  MOVWF  FEA
05994:  MOVF   FEF,W
05996:  SUBLW  0D
05998:  BZ    59A4
0599A:  MOVF   x73,F
0599C:  BNZ   59A4
0599E:  MOVF   x72,W
059A0:  SUBLW  1E
059A2:  BC    59E4
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
059A4:  MOVLW  5D
059A6:  ADDWF  x70,W
059A8:  MOVWF  x76
059AA:  MOVLW  00
059AC:  ADDWFC x71,W
059AE:  MOVWF  x77
059B0:  MOVF   FF2,W
059B2:  MOVWF  00
059B4:  BCF    FF2.7
059B6:  MOVFF  E77,FAA
059BA:  MOVFF  E76,FA9
059BE:  MOVLW  0D
059C0:  MOVWF  FA8
059C2:  BCF    FA6.6
059C4:  BCF    FA6.7
059C6:  BSF    FA6.2
059C8:  MOVLB  F
059CA:  MOVLW  55
059CC:  MOVWF  FA7
059CE:  MOVLW  AA
059D0:  MOVWF  FA7
059D2:  BSF    FA6.1
059D4:  BTFSC  FA6.1
059D6:  BRA    59D4
059D8:  BCF    FA6.2
059DA:  MOVF   00,W
059DC:  IORWF  FF2,F
....................                      break;
059DE:  BRA    5A6E
....................                   }
059E0:  BRA    5A56
059E2:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage4[j] = RxD_Buff[i];
059E4:  MOVLW  E3
059E6:  ADDWF  x72,W
059E8:  MOVWF  01
059EA:  MOVLW  0A
059EC:  ADDWFC x73,W
059EE:  MOVWF  03
059F0:  MOVLW  66
059F2:  ADDWF  x70,W
059F4:  MOVWF  FE9
059F6:  MOVLW  02
059F8:  ADDWFC x71,W
059FA:  MOVWF  FEA
059FC:  MOVFF  FEF,E78
05A00:  MOVFF  03,FEA
05A04:  MOVFF  01,FE9
05A08:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05A0C:  MOVLW  5D
05A0E:  ADDWF  x70,W
05A10:  MOVWF  x76
05A12:  MOVLW  00
05A14:  ADDWFC x71,W
05A16:  MOVWF  x77
05A18:  MOVLW  66
05A1A:  ADDWF  x70,W
05A1C:  MOVWF  FE9
05A1E:  MOVLW  02
05A20:  ADDWFC x71,W
05A22:  MOVWF  FEA
05A24:  MOVFF  FEF,E78
05A28:  MOVF   FF2,W
05A2A:  MOVWF  00
05A2C:  BCF    FF2.7
05A2E:  MOVFF  E77,FAA
05A32:  MOVFF  E76,FA9
05A36:  MOVFF  E78,FA8
05A3A:  BCF    FA6.6
05A3C:  BCF    FA6.7
05A3E:  BSF    FA6.2
05A40:  MOVLB  F
05A42:  MOVLW  55
05A44:  MOVWF  FA7
05A46:  MOVLW  AA
05A48:  MOVWF  FA7
05A4A:  BSF    FA6.1
05A4C:  BTFSC  FA6.1
05A4E:  BRA    5A4C
05A50:  BCF    FA6.2
05A52:  MOVF   00,W
05A54:  IORWF  FF2,F
....................                   }
05A56:  MOVLB  E
05A58:  MOVFF  E71,03
05A5C:  MOVF   x70,W
05A5E:  INCF   x70,F
05A60:  BTFSC  FD8.2
05A62:  INCF   x71,F
05A64:  INCF   x72,F
05A66:  BTFSC  FD8.2
05A68:  INCF   x73,F
05A6A:  BRA    5986
05A6C:  MOVLB  F
....................                }
....................                SMS_Massage4[j] = '\0' ; // end string
05A6E:  MOVLW  E3
05A70:  MOVLB  E
05A72:  ADDWF  x72,W
05A74:  MOVWF  FE9
05A76:  MOVLW  0A
05A78:  ADDWFC x73,W
05A7A:  MOVWF  FEA
05A7C:  CLRF   FEF
....................                
....................                j=0;
05A7E:  CLRF   x73
05A80:  CLRF   x72
....................                i++;
05A82:  INCF   x70,F
05A84:  BTFSC  FD8.2
05A86:  INCF   x71,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05A88:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05A8A:  MOVLW  66
05A8C:  ADDWF  x70,W
05A8E:  MOVWF  FE9
05A90:  MOVLW  02
05A92:  ADDWFC x71,W
05A94:  MOVWF  FEA
05A96:  MOVF   FEF,W
05A98:  SUBLW  0D
05A9A:  BZ    5AA6
05A9C:  MOVF   x73,F
05A9E:  BNZ   5AA6
05AA0:  MOVF   x72,W
05AA2:  SUBLW  1E
05AA4:  BC    5AE6
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05AA6:  MOVLW  5D
05AA8:  ADDWF  x70,W
05AAA:  MOVWF  x76
05AAC:  MOVLW  00
05AAE:  ADDWFC x71,W
05AB0:  MOVWF  x77
05AB2:  MOVF   FF2,W
05AB4:  MOVWF  00
05AB6:  BCF    FF2.7
05AB8:  MOVFF  E77,FAA
05ABC:  MOVFF  E76,FA9
05AC0:  MOVLW  0D
05AC2:  MOVWF  FA8
05AC4:  BCF    FA6.6
05AC6:  BCF    FA6.7
05AC8:  BSF    FA6.2
05ACA:  MOVLB  F
05ACC:  MOVLW  55
05ACE:  MOVWF  FA7
05AD0:  MOVLW  AA
05AD2:  MOVWF  FA7
05AD4:  BSF    FA6.1
05AD6:  BTFSC  FA6.1
05AD8:  BRA    5AD6
05ADA:  BCF    FA6.2
05ADC:  MOVF   00,W
05ADE:  IORWF  FF2,F
....................                      break;
05AE0:  BRA    5B70
....................                   }
05AE2:  BRA    5B58
05AE4:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage5[j] = RxD_Buff[i];
05AE6:  MOVLW  03
05AE8:  ADDWF  x72,W
05AEA:  MOVWF  01
05AEC:  MOVLW  0B
05AEE:  ADDWFC x73,W
05AF0:  MOVWF  03
05AF2:  MOVLW  66
05AF4:  ADDWF  x70,W
05AF6:  MOVWF  FE9
05AF8:  MOVLW  02
05AFA:  ADDWFC x71,W
05AFC:  MOVWF  FEA
05AFE:  MOVFF  FEF,E78
05B02:  MOVFF  03,FEA
05B06:  MOVFF  01,FE9
05B0A:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05B0E:  MOVLW  5D
05B10:  ADDWF  x70,W
05B12:  MOVWF  x76
05B14:  MOVLW  00
05B16:  ADDWFC x71,W
05B18:  MOVWF  x77
05B1A:  MOVLW  66
05B1C:  ADDWF  x70,W
05B1E:  MOVWF  FE9
05B20:  MOVLW  02
05B22:  ADDWFC x71,W
05B24:  MOVWF  FEA
05B26:  MOVFF  FEF,E78
05B2A:  MOVF   FF2,W
05B2C:  MOVWF  00
05B2E:  BCF    FF2.7
05B30:  MOVFF  E77,FAA
05B34:  MOVFF  E76,FA9
05B38:  MOVFF  E78,FA8
05B3C:  BCF    FA6.6
05B3E:  BCF    FA6.7
05B40:  BSF    FA6.2
05B42:  MOVLB  F
05B44:  MOVLW  55
05B46:  MOVWF  FA7
05B48:  MOVLW  AA
05B4A:  MOVWF  FA7
05B4C:  BSF    FA6.1
05B4E:  BTFSC  FA6.1
05B50:  BRA    5B4E
05B52:  BCF    FA6.2
05B54:  MOVF   00,W
05B56:  IORWF  FF2,F
....................                   }
05B58:  MOVLB  E
05B5A:  MOVFF  E71,03
05B5E:  MOVF   x70,W
05B60:  INCF   x70,F
05B62:  BTFSC  FD8.2
05B64:  INCF   x71,F
05B66:  INCF   x72,F
05B68:  BTFSC  FD8.2
05B6A:  INCF   x73,F
05B6C:  BRA    5A88
05B6E:  MOVLB  F
....................                }
....................                SMS_Massage5[j] = '\0' ; // end string
05B70:  MOVLW  03
05B72:  MOVLB  E
05B74:  ADDWF  x72,W
05B76:  MOVWF  FE9
05B78:  MOVLW  0B
05B7A:  ADDWFC x73,W
05B7C:  MOVWF  FEA
05B7E:  CLRF   FEF
....................                
....................                j=0;
05B80:  CLRF   x73
05B82:  CLRF   x72
....................                i++;
05B84:  INCF   x70,F
05B86:  BTFSC  FD8.2
05B88:  INCF   x71,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05B8A:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05B8C:  MOVLW  66
05B8E:  ADDWF  x70,W
05B90:  MOVWF  FE9
05B92:  MOVLW  02
05B94:  ADDWFC x71,W
05B96:  MOVWF  FEA
05B98:  MOVF   FEF,W
05B9A:  SUBLW  0D
05B9C:  BZ    5BA8
05B9E:  MOVF   x73,F
05BA0:  BNZ   5BA8
05BA2:  MOVF   x72,W
05BA4:  SUBLW  1E
05BA6:  BC    5BE8
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05BA8:  MOVLW  5D
05BAA:  ADDWF  x70,W
05BAC:  MOVWF  x76
05BAE:  MOVLW  00
05BB0:  ADDWFC x71,W
05BB2:  MOVWF  x77
05BB4:  MOVF   FF2,W
05BB6:  MOVWF  00
05BB8:  BCF    FF2.7
05BBA:  MOVFF  E77,FAA
05BBE:  MOVFF  E76,FA9
05BC2:  MOVLW  0D
05BC4:  MOVWF  FA8
05BC6:  BCF    FA6.6
05BC8:  BCF    FA6.7
05BCA:  BSF    FA6.2
05BCC:  MOVLB  F
05BCE:  MOVLW  55
05BD0:  MOVWF  FA7
05BD2:  MOVLW  AA
05BD4:  MOVWF  FA7
05BD6:  BSF    FA6.1
05BD8:  BTFSC  FA6.1
05BDA:  BRA    5BD8
05BDC:  BCF    FA6.2
05BDE:  MOVF   00,W
05BE0:  IORWF  FF2,F
....................                      break;
05BE2:  BRA    5C76
....................                   }
05BE4:  BRA    5C5E
05BE6:  MOVLB  E
....................                   else
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05BE8:  MOVLW  5D
05BEA:  ADDWF  x70,W
05BEC:  MOVWF  x76
05BEE:  MOVLW  00
05BF0:  ADDWFC x71,W
05BF2:  MOVWF  x77
05BF4:  MOVLW  66
05BF6:  ADDWF  x70,W
05BF8:  MOVWF  FE9
05BFA:  MOVLW  02
05BFC:  ADDWFC x71,W
05BFE:  MOVWF  FEA
05C00:  MOVFF  FEF,E78
05C04:  MOVF   FF2,W
05C06:  MOVWF  00
05C08:  BCF    FF2.7
05C0A:  MOVFF  E77,FAA
05C0E:  MOVFF  E76,FA9
05C12:  MOVFF  E78,FA8
05C16:  BCF    FA6.6
05C18:  BCF    FA6.7
05C1A:  BSF    FA6.2
05C1C:  MOVLB  F
05C1E:  MOVLW  55
05C20:  MOVWF  FA7
05C22:  MOVLW  AA
05C24:  MOVWF  FA7
05C26:  BSF    FA6.1
05C28:  BTFSC  FA6.1
05C2A:  BRA    5C28
05C2C:  BCF    FA6.2
05C2E:  MOVF   00,W
05C30:  IORWF  FF2,F
....................                      SMS_Massage6[j] = RxD_Buff[i];
05C32:  MOVLW  23
05C34:  MOVLB  E
05C36:  ADDWF  x72,W
05C38:  MOVWF  01
05C3A:  MOVLW  0B
05C3C:  ADDWFC x73,W
05C3E:  MOVWF  03
05C40:  MOVLW  66
05C42:  ADDWF  x70,W
05C44:  MOVWF  FE9
05C46:  MOVLW  02
05C48:  ADDWFC x71,W
05C4A:  MOVWF  FEA
05C4C:  MOVFF  FEF,E78
05C50:  MOVFF  03,FEA
05C54:  MOVFF  01,FE9
05C58:  MOVFF  E78,FEF
05C5C:  MOVLB  F
....................                   }
05C5E:  MOVLB  E
05C60:  MOVFF  E71,03
05C64:  MOVF   x70,W
05C66:  INCF   x70,F
05C68:  BTFSC  FD8.2
05C6A:  INCF   x71,F
05C6C:  INCF   x72,F
05C6E:  BTFSC  FD8.2
05C70:  INCF   x73,F
05C72:  BRA    5B8A
05C74:  MOVLB  F
....................                }
....................                SMS_Massage6[j] = '\0' ; // end string
05C76:  MOVLW  23
05C78:  MOVLB  E
05C7A:  ADDWF  x72,W
05C7C:  MOVWF  FE9
05C7E:  MOVLW  0B
05C80:  ADDWFC x73,W
05C82:  MOVWF  FEA
05C84:  CLRF   FEF
....................                
....................                j=0;
05C86:  CLRF   x73
05C88:  CLRF   x72
....................                i++;
05C8A:  INCF   x70,F
05C8C:  BTFSC  FD8.2
05C8E:  INCF   x71,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05C90:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05C92:  MOVLW  66
05C94:  ADDWF  x70,W
05C96:  MOVWF  FE9
05C98:  MOVLW  02
05C9A:  ADDWFC x71,W
05C9C:  MOVWF  FEA
05C9E:  MOVF   FEF,W
05CA0:  SUBLW  0D
05CA2:  BZ    5CAE
05CA4:  MOVF   x73,F
05CA6:  BNZ   5CAE
05CA8:  MOVF   x72,W
05CAA:  SUBLW  1E
05CAC:  BC    5CEE
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05CAE:  MOVLW  5D
05CB0:  ADDWF  x70,W
05CB2:  MOVWF  x76
05CB4:  MOVLW  00
05CB6:  ADDWFC x71,W
05CB8:  MOVWF  x77
05CBA:  MOVF   FF2,W
05CBC:  MOVWF  00
05CBE:  BCF    FF2.7
05CC0:  MOVFF  E77,FAA
05CC4:  MOVFF  E76,FA9
05CC8:  MOVLW  0D
05CCA:  MOVWF  FA8
05CCC:  BCF    FA6.6
05CCE:  BCF    FA6.7
05CD0:  BSF    FA6.2
05CD2:  MOVLB  F
05CD4:  MOVLW  55
05CD6:  MOVWF  FA7
05CD8:  MOVLW  AA
05CDA:  MOVWF  FA7
05CDC:  BSF    FA6.1
05CDE:  BTFSC  FA6.1
05CE0:  BRA    5CDE
05CE2:  BCF    FA6.2
05CE4:  MOVF   00,W
05CE6:  IORWF  FF2,F
....................                      break;
05CE8:  BRA    5D78
....................                   }
05CEA:  BRA    5D60
05CEC:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage7[j] = RxD_Buff[i];
05CEE:  MOVLW  43
05CF0:  ADDWF  x72,W
05CF2:  MOVWF  01
05CF4:  MOVLW  0B
05CF6:  ADDWFC x73,W
05CF8:  MOVWF  03
05CFA:  MOVLW  66
05CFC:  ADDWF  x70,W
05CFE:  MOVWF  FE9
05D00:  MOVLW  02
05D02:  ADDWFC x71,W
05D04:  MOVWF  FEA
05D06:  MOVFF  FEF,E78
05D0A:  MOVFF  03,FEA
05D0E:  MOVFF  01,FE9
05D12:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05D16:  MOVLW  5D
05D18:  ADDWF  x70,W
05D1A:  MOVWF  x76
05D1C:  MOVLW  00
05D1E:  ADDWFC x71,W
05D20:  MOVWF  x77
05D22:  MOVLW  66
05D24:  ADDWF  x70,W
05D26:  MOVWF  FE9
05D28:  MOVLW  02
05D2A:  ADDWFC x71,W
05D2C:  MOVWF  FEA
05D2E:  MOVFF  FEF,E78
05D32:  MOVF   FF2,W
05D34:  MOVWF  00
05D36:  BCF    FF2.7
05D38:  MOVFF  E77,FAA
05D3C:  MOVFF  E76,FA9
05D40:  MOVFF  E78,FA8
05D44:  BCF    FA6.6
05D46:  BCF    FA6.7
05D48:  BSF    FA6.2
05D4A:  MOVLB  F
05D4C:  MOVLW  55
05D4E:  MOVWF  FA7
05D50:  MOVLW  AA
05D52:  MOVWF  FA7
05D54:  BSF    FA6.1
05D56:  BTFSC  FA6.1
05D58:  BRA    5D56
05D5A:  BCF    FA6.2
05D5C:  MOVF   00,W
05D5E:  IORWF  FF2,F
....................                   }
05D60:  MOVLB  E
05D62:  MOVFF  E71,03
05D66:  MOVF   x70,W
05D68:  INCF   x70,F
05D6A:  BTFSC  FD8.2
05D6C:  INCF   x71,F
05D6E:  INCF   x72,F
05D70:  BTFSC  FD8.2
05D72:  INCF   x73,F
05D74:  BRA    5C90
05D76:  MOVLB  F
....................                }
....................                SMS_Massage7[j] = '\0' ; // end string
05D78:  MOVLW  43
05D7A:  MOVLB  E
05D7C:  ADDWF  x72,W
05D7E:  MOVWF  FE9
05D80:  MOVLW  0B
05D82:  ADDWFC x73,W
05D84:  MOVWF  FEA
05D86:  CLRF   FEF
....................                
....................                j=0;
05D88:  CLRF   x73
05D8A:  CLRF   x72
....................                i++;
05D8C:  INCF   x70,F
05D8E:  BTFSC  FD8.2
05D90:  INCF   x71,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05D92:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05D94:  MOVLW  66
05D96:  ADDWF  x70,W
05D98:  MOVWF  FE9
05D9A:  MOVLW  02
05D9C:  ADDWFC x71,W
05D9E:  MOVWF  FEA
05DA0:  MOVF   FEF,W
05DA2:  SUBLW  0D
05DA4:  BZ    5DB0
05DA6:  MOVF   x73,F
05DA8:  BNZ   5DB0
05DAA:  MOVF   x72,W
05DAC:  SUBLW  1E
05DAE:  BC    5DF0
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05DB0:  MOVLW  5D
05DB2:  ADDWF  x70,W
05DB4:  MOVWF  x76
05DB6:  MOVLW  00
05DB8:  ADDWFC x71,W
05DBA:  MOVWF  x77
05DBC:  MOVF   FF2,W
05DBE:  MOVWF  00
05DC0:  BCF    FF2.7
05DC2:  MOVFF  E77,FAA
05DC6:  MOVFF  E76,FA9
05DCA:  MOVLW  0D
05DCC:  MOVWF  FA8
05DCE:  BCF    FA6.6
05DD0:  BCF    FA6.7
05DD2:  BSF    FA6.2
05DD4:  MOVLB  F
05DD6:  MOVLW  55
05DD8:  MOVWF  FA7
05DDA:  MOVLW  AA
05DDC:  MOVWF  FA7
05DDE:  BSF    FA6.1
05DE0:  BTFSC  FA6.1
05DE2:  BRA    5DE0
05DE4:  BCF    FA6.2
05DE6:  MOVF   00,W
05DE8:  IORWF  FF2,F
....................                      break;
05DEA:  BRA    5E7A
....................                   }
05DEC:  BRA    5E62
05DEE:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage8[j] = RxD_Buff[i];
05DF0:  MOVLW  63
05DF2:  ADDWF  x72,W
05DF4:  MOVWF  01
05DF6:  MOVLW  0B
05DF8:  ADDWFC x73,W
05DFA:  MOVWF  03
05DFC:  MOVLW  66
05DFE:  ADDWF  x70,W
05E00:  MOVWF  FE9
05E02:  MOVLW  02
05E04:  ADDWFC x71,W
05E06:  MOVWF  FEA
05E08:  MOVFF  FEF,E78
05E0C:  MOVFF  03,FEA
05E10:  MOVFF  01,FE9
05E14:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05E18:  MOVLW  5D
05E1A:  ADDWF  x70,W
05E1C:  MOVWF  x76
05E1E:  MOVLW  00
05E20:  ADDWFC x71,W
05E22:  MOVWF  x77
05E24:  MOVLW  66
05E26:  ADDWF  x70,W
05E28:  MOVWF  FE9
05E2A:  MOVLW  02
05E2C:  ADDWFC x71,W
05E2E:  MOVWF  FEA
05E30:  MOVFF  FEF,E78
05E34:  MOVF   FF2,W
05E36:  MOVWF  00
05E38:  BCF    FF2.7
05E3A:  MOVFF  E77,FAA
05E3E:  MOVFF  E76,FA9
05E42:  MOVFF  E78,FA8
05E46:  BCF    FA6.6
05E48:  BCF    FA6.7
05E4A:  BSF    FA6.2
05E4C:  MOVLB  F
05E4E:  MOVLW  55
05E50:  MOVWF  FA7
05E52:  MOVLW  AA
05E54:  MOVWF  FA7
05E56:  BSF    FA6.1
05E58:  BTFSC  FA6.1
05E5A:  BRA    5E58
05E5C:  BCF    FA6.2
05E5E:  MOVF   00,W
05E60:  IORWF  FF2,F
....................                   }
05E62:  MOVLB  E
05E64:  MOVFF  E71,03
05E68:  MOVF   x70,W
05E6A:  INCF   x70,F
05E6C:  BTFSC  FD8.2
05E6E:  INCF   x71,F
05E70:  INCF   x72,F
05E72:  BTFSC  FD8.2
05E74:  INCF   x73,F
05E76:  BRA    5D92
05E78:  MOVLB  F
....................                }
....................                SMS_Massage8[j] = '\0' ; // end string
05E7A:  MOVLW  63
05E7C:  MOVLB  E
05E7E:  ADDWF  x72,W
05E80:  MOVWF  FE9
05E82:  MOVLW  0B
05E84:  ADDWFC x73,W
05E86:  MOVWF  FEA
05E88:  CLRF   FEF
....................                
....................                /////////////////////////////////////////////
....................                j=0;
05E8A:  CLRF   x73
05E8C:  CLRF   x72
....................                i++;
05E8E:  INCF   x70,F
05E90:  BTFSC  FD8.2
05E92:  INCF   x71,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05E94:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05E96:  MOVLW  66
05E98:  ADDWF  x70,W
05E9A:  MOVWF  FE9
05E9C:  MOVLW  02
05E9E:  ADDWFC x71,W
05EA0:  MOVWF  FEA
05EA2:  MOVF   FEF,W
05EA4:  SUBLW  0D
05EA6:  BZ    5EB2
05EA8:  MOVF   x73,F
05EAA:  BNZ   5EB2
05EAC:  MOVF   x72,W
05EAE:  SUBLW  1E
05EB0:  BC    5F02
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05EB2:  MOVLW  5D
05EB4:  ADDWF  x70,W
05EB6:  MOVWF  x76
05EB8:  MOVLW  00
05EBA:  ADDWFC x71,W
05EBC:  MOVWF  x77
05EBE:  MOVLW  66
05EC0:  ADDWF  x70,W
05EC2:  MOVWF  FE9
05EC4:  MOVLW  02
05EC6:  ADDWFC x71,W
05EC8:  MOVWF  FEA
05ECA:  MOVFF  FEF,E78
05ECE:  MOVF   FF2,W
05ED0:  MOVWF  00
05ED2:  BCF    FF2.7
05ED4:  MOVFF  E77,FAA
05ED8:  MOVFF  E76,FA9
05EDC:  MOVFF  E78,FA8
05EE0:  BCF    FA6.6
05EE2:  BCF    FA6.7
05EE4:  BSF    FA6.2
05EE6:  MOVLB  F
05EE8:  MOVLW  55
05EEA:  MOVWF  FA7
05EEC:  MOVLW  AA
05EEE:  MOVWF  FA7
05EF0:  BSF    FA6.1
05EF2:  BTFSC  FA6.1
05EF4:  BRA    5EF2
05EF6:  BCF    FA6.2
05EF8:  MOVF   00,W
05EFA:  IORWF  FF2,F
....................                      break;
05EFC:  BRA    5F8C
....................                   }
05EFE:  BRA    5F74
05F00:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage9[j] = RxD_Buff[i];
05F02:  MOVLW  83
05F04:  ADDWF  x72,W
05F06:  MOVWF  01
05F08:  MOVLW  0B
05F0A:  ADDWFC x73,W
05F0C:  MOVWF  03
05F0E:  MOVLW  66
05F10:  ADDWF  x70,W
05F12:  MOVWF  FE9
05F14:  MOVLW  02
05F16:  ADDWFC x71,W
05F18:  MOVWF  FEA
05F1A:  MOVFF  FEF,E78
05F1E:  MOVFF  03,FEA
05F22:  MOVFF  01,FE9
05F26:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05F2A:  MOVLW  5D
05F2C:  ADDWF  x70,W
05F2E:  MOVWF  x76
05F30:  MOVLW  00
05F32:  ADDWFC x71,W
05F34:  MOVWF  x77
05F36:  MOVLW  66
05F38:  ADDWF  x70,W
05F3A:  MOVWF  FE9
05F3C:  MOVLW  02
05F3E:  ADDWFC x71,W
05F40:  MOVWF  FEA
05F42:  MOVFF  FEF,E78
05F46:  MOVF   FF2,W
05F48:  MOVWF  00
05F4A:  BCF    FF2.7
05F4C:  MOVFF  E77,FAA
05F50:  MOVFF  E76,FA9
05F54:  MOVFF  E78,FA8
05F58:  BCF    FA6.6
05F5A:  BCF    FA6.7
05F5C:  BSF    FA6.2
05F5E:  MOVLB  F
05F60:  MOVLW  55
05F62:  MOVWF  FA7
05F64:  MOVLW  AA
05F66:  MOVWF  FA7
05F68:  BSF    FA6.1
05F6A:  BTFSC  FA6.1
05F6C:  BRA    5F6A
05F6E:  BCF    FA6.2
05F70:  MOVF   00,W
05F72:  IORWF  FF2,F
....................                   }
05F74:  MOVLB  E
05F76:  MOVFF  E71,03
05F7A:  MOVF   x70,W
05F7C:  INCF   x70,F
05F7E:  BTFSC  FD8.2
05F80:  INCF   x71,F
05F82:  INCF   x72,F
05F84:  BTFSC  FD8.2
05F86:  INCF   x73,F
05F88:  BRA    5E94
05F8A:  MOVLB  F
....................                }
....................                SMS_Massage9[j] = '\0' ; // end string
05F8C:  MOVLW  83
05F8E:  MOVLB  E
05F90:  ADDWF  x72,W
05F92:  MOVWF  FE9
05F94:  MOVLW  0B
05F96:  ADDWFC x73,W
05F98:  MOVWF  FEA
05F9A:  CLRF   FEF
....................                j=0;
05F9C:  CLRF   x73
05F9E:  CLRF   x72
....................                i++;
05FA0:  INCF   x70,F
05FA2:  BTFSC  FD8.2
05FA4:  INCF   x71,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05FA6:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05FA8:  MOVLW  66
05FAA:  ADDWF  x70,W
05FAC:  MOVWF  FE9
05FAE:  MOVLW  02
05FB0:  ADDWFC x71,W
05FB2:  MOVWF  FEA
05FB4:  MOVF   FEF,W
05FB6:  SUBLW  0D
05FB8:  BZ    5FC4
05FBA:  MOVF   x73,F
05FBC:  BNZ   5FC4
05FBE:  MOVF   x72,W
05FC0:  SUBLW  1E
05FC2:  BC    6014
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05FC4:  MOVLW  5D
05FC6:  ADDWF  x70,W
05FC8:  MOVWF  x76
05FCA:  MOVLW  00
05FCC:  ADDWFC x71,W
05FCE:  MOVWF  x77
05FD0:  MOVLW  66
05FD2:  ADDWF  x70,W
05FD4:  MOVWF  FE9
05FD6:  MOVLW  02
05FD8:  ADDWFC x71,W
05FDA:  MOVWF  FEA
05FDC:  MOVFF  FEF,E78
05FE0:  MOVF   FF2,W
05FE2:  MOVWF  00
05FE4:  BCF    FF2.7
05FE6:  MOVFF  E77,FAA
05FEA:  MOVFF  E76,FA9
05FEE:  MOVFF  E78,FA8
05FF2:  BCF    FA6.6
05FF4:  BCF    FA6.7
05FF6:  BSF    FA6.2
05FF8:  MOVLB  F
05FFA:  MOVLW  55
05FFC:  MOVWF  FA7
05FFE:  MOVLW  AA
06000:  MOVWF  FA7
06002:  BSF    FA6.1
06004:  BTFSC  FA6.1
06006:  BRA    6004
06008:  BCF    FA6.2
0600A:  MOVF   00,W
0600C:  IORWF  FF2,F
....................                      break;
0600E:  BRA    609E
....................                   }
06010:  BRA    6086
06012:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage10[j] = RxD_Buff[i];
06014:  MOVLW  A3
06016:  ADDWF  x72,W
06018:  MOVWF  01
0601A:  MOVLW  0B
0601C:  ADDWFC x73,W
0601E:  MOVWF  03
06020:  MOVLW  66
06022:  ADDWF  x70,W
06024:  MOVWF  FE9
06026:  MOVLW  02
06028:  ADDWFC x71,W
0602A:  MOVWF  FEA
0602C:  MOVFF  FEF,E78
06030:  MOVFF  03,FEA
06034:  MOVFF  01,FE9
06038:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0603C:  MOVLW  5D
0603E:  ADDWF  x70,W
06040:  MOVWF  x76
06042:  MOVLW  00
06044:  ADDWFC x71,W
06046:  MOVWF  x77
06048:  MOVLW  66
0604A:  ADDWF  x70,W
0604C:  MOVWF  FE9
0604E:  MOVLW  02
06050:  ADDWFC x71,W
06052:  MOVWF  FEA
06054:  MOVFF  FEF,E78
06058:  MOVF   FF2,W
0605A:  MOVWF  00
0605C:  BCF    FF2.7
0605E:  MOVFF  E77,FAA
06062:  MOVFF  E76,FA9
06066:  MOVFF  E78,FA8
0606A:  BCF    FA6.6
0606C:  BCF    FA6.7
0606E:  BSF    FA6.2
06070:  MOVLB  F
06072:  MOVLW  55
06074:  MOVWF  FA7
06076:  MOVLW  AA
06078:  MOVWF  FA7
0607A:  BSF    FA6.1
0607C:  BTFSC  FA6.1
0607E:  BRA    607C
06080:  BCF    FA6.2
06082:  MOVF   00,W
06084:  IORWF  FF2,F
....................                   }
06086:  MOVLB  E
06088:  MOVFF  E71,03
0608C:  MOVF   x70,W
0608E:  INCF   x70,F
06090:  BTFSC  FD8.2
06092:  INCF   x71,F
06094:  INCF   x72,F
06096:  BTFSC  FD8.2
06098:  INCF   x73,F
0609A:  BRA    5FA6
0609C:  MOVLB  F
....................                }
....................                SMS_Massage10[j] = '\0' ; // end string
0609E:  MOVLW  A3
060A0:  MOVLB  E
060A2:  ADDWF  x72,W
060A4:  MOVWF  FE9
060A6:  MOVLW  0B
060A8:  ADDWFC x73,W
060AA:  MOVWF  FEA
060AC:  CLRF   FEF
....................                
....................                j=0;
060AE:  CLRF   x73
060B0:  CLRF   x72
....................                i++;
060B2:  INCF   x70,F
060B4:  BTFSC  FD8.2
060B6:  INCF   x71,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
060B8:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
060BA:  MOVLW  66
060BC:  ADDWF  x70,W
060BE:  MOVWF  FE9
060C0:  MOVLW  02
060C2:  ADDWFC x71,W
060C4:  MOVWF  FEA
060C6:  MOVF   FEF,W
060C8:  SUBLW  0D
060CA:  BZ    60D6
060CC:  MOVF   x73,F
060CE:  BNZ   60D6
060D0:  MOVF   x72,W
060D2:  SUBLW  1E
060D4:  BC    6126
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
060D6:  MOVLW  5D
060D8:  ADDWF  x70,W
060DA:  MOVWF  x76
060DC:  MOVLW  00
060DE:  ADDWFC x71,W
060E0:  MOVWF  x77
060E2:  MOVLW  66
060E4:  ADDWF  x70,W
060E6:  MOVWF  FE9
060E8:  MOVLW  02
060EA:  ADDWFC x71,W
060EC:  MOVWF  FEA
060EE:  MOVFF  FEF,E78
060F2:  MOVF   FF2,W
060F4:  MOVWF  00
060F6:  BCF    FF2.7
060F8:  MOVFF  E77,FAA
060FC:  MOVFF  E76,FA9
06100:  MOVFF  E78,FA8
06104:  BCF    FA6.6
06106:  BCF    FA6.7
06108:  BSF    FA6.2
0610A:  MOVLB  F
0610C:  MOVLW  55
0610E:  MOVWF  FA7
06110:  MOVLW  AA
06112:  MOVWF  FA7
06114:  BSF    FA6.1
06116:  BTFSC  FA6.1
06118:  BRA    6116
0611A:  BCF    FA6.2
0611C:  MOVF   00,W
0611E:  IORWF  FF2,F
....................                      break;
06120:  BRA    61B0
....................                   }
06122:  BRA    6198
06124:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage11[j] = RxD_Buff[i];
06126:  MOVLW  C3
06128:  ADDWF  x72,W
0612A:  MOVWF  01
0612C:  MOVLW  0B
0612E:  ADDWFC x73,W
06130:  MOVWF  03
06132:  MOVLW  66
06134:  ADDWF  x70,W
06136:  MOVWF  FE9
06138:  MOVLW  02
0613A:  ADDWFC x71,W
0613C:  MOVWF  FEA
0613E:  MOVFF  FEF,E78
06142:  MOVFF  03,FEA
06146:  MOVFF  01,FE9
0614A:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0614E:  MOVLW  5D
06150:  ADDWF  x70,W
06152:  MOVWF  x76
06154:  MOVLW  00
06156:  ADDWFC x71,W
06158:  MOVWF  x77
0615A:  MOVLW  66
0615C:  ADDWF  x70,W
0615E:  MOVWF  FE9
06160:  MOVLW  02
06162:  ADDWFC x71,W
06164:  MOVWF  FEA
06166:  MOVFF  FEF,E78
0616A:  MOVF   FF2,W
0616C:  MOVWF  00
0616E:  BCF    FF2.7
06170:  MOVFF  E77,FAA
06174:  MOVFF  E76,FA9
06178:  MOVFF  E78,FA8
0617C:  BCF    FA6.6
0617E:  BCF    FA6.7
06180:  BSF    FA6.2
06182:  MOVLB  F
06184:  MOVLW  55
06186:  MOVWF  FA7
06188:  MOVLW  AA
0618A:  MOVWF  FA7
0618C:  BSF    FA6.1
0618E:  BTFSC  FA6.1
06190:  BRA    618E
06192:  BCF    FA6.2
06194:  MOVF   00,W
06196:  IORWF  FF2,F
....................                   }
06198:  MOVLB  E
0619A:  MOVFF  E71,03
0619E:  MOVF   x70,W
061A0:  INCF   x70,F
061A2:  BTFSC  FD8.2
061A4:  INCF   x71,F
061A6:  INCF   x72,F
061A8:  BTFSC  FD8.2
061AA:  INCF   x73,F
061AC:  BRA    60B8
061AE:  MOVLB  F
....................                }
....................                SMS_Massage11[j] = '\0' ; // end string
061B0:  MOVLW  C3
061B2:  MOVLB  E
061B4:  ADDWF  x72,W
061B6:  MOVWF  FE9
061B8:  MOVLW  0B
061BA:  ADDWFC x73,W
061BC:  MOVWF  FEA
061BE:  CLRF   FEF
....................                
....................                j=0;
061C0:  CLRF   x73
061C2:  CLRF   x72
....................                i++;
061C4:  INCF   x70,F
061C6:  BTFSC  FD8.2
061C8:  INCF   x71,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
061CA:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
061CC:  MOVLW  66
061CE:  ADDWF  x70,W
061D0:  MOVWF  FE9
061D2:  MOVLW  02
061D4:  ADDWFC x71,W
061D6:  MOVWF  FEA
061D8:  MOVF   FEF,W
061DA:  SUBLW  0D
061DC:  BZ    61E8
061DE:  MOVF   x73,F
061E0:  BNZ   61E8
061E2:  MOVF   x72,W
061E4:  SUBLW  1E
061E6:  BC    6238
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
061E8:  MOVLW  5D
061EA:  ADDWF  x70,W
061EC:  MOVWF  x76
061EE:  MOVLW  00
061F0:  ADDWFC x71,W
061F2:  MOVWF  x77
061F4:  MOVLW  66
061F6:  ADDWF  x70,W
061F8:  MOVWF  FE9
061FA:  MOVLW  02
061FC:  ADDWFC x71,W
061FE:  MOVWF  FEA
06200:  MOVFF  FEF,E78
06204:  MOVF   FF2,W
06206:  MOVWF  00
06208:  BCF    FF2.7
0620A:  MOVFF  E77,FAA
0620E:  MOVFF  E76,FA9
06212:  MOVFF  E78,FA8
06216:  BCF    FA6.6
06218:  BCF    FA6.7
0621A:  BSF    FA6.2
0621C:  MOVLB  F
0621E:  MOVLW  55
06220:  MOVWF  FA7
06222:  MOVLW  AA
06224:  MOVWF  FA7
06226:  BSF    FA6.1
06228:  BTFSC  FA6.1
0622A:  BRA    6228
0622C:  BCF    FA6.2
0622E:  MOVF   00,W
06230:  IORWF  FF2,F
....................                      break;
06232:  BRA    62C2
....................                   }
06234:  BRA    62AA
06236:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage12[j] = RxD_Buff[i];
06238:  MOVLW  E3
0623A:  ADDWF  x72,W
0623C:  MOVWF  01
0623E:  MOVLW  0B
06240:  ADDWFC x73,W
06242:  MOVWF  03
06244:  MOVLW  66
06246:  ADDWF  x70,W
06248:  MOVWF  FE9
0624A:  MOVLW  02
0624C:  ADDWFC x71,W
0624E:  MOVWF  FEA
06250:  MOVFF  FEF,E78
06254:  MOVFF  03,FEA
06258:  MOVFF  01,FE9
0625C:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06260:  MOVLW  5D
06262:  ADDWF  x70,W
06264:  MOVWF  x76
06266:  MOVLW  00
06268:  ADDWFC x71,W
0626A:  MOVWF  x77
0626C:  MOVLW  66
0626E:  ADDWF  x70,W
06270:  MOVWF  FE9
06272:  MOVLW  02
06274:  ADDWFC x71,W
06276:  MOVWF  FEA
06278:  MOVFF  FEF,E78
0627C:  MOVF   FF2,W
0627E:  MOVWF  00
06280:  BCF    FF2.7
06282:  MOVFF  E77,FAA
06286:  MOVFF  E76,FA9
0628A:  MOVFF  E78,FA8
0628E:  BCF    FA6.6
06290:  BCF    FA6.7
06292:  BSF    FA6.2
06294:  MOVLB  F
06296:  MOVLW  55
06298:  MOVWF  FA7
0629A:  MOVLW  AA
0629C:  MOVWF  FA7
0629E:  BSF    FA6.1
062A0:  BTFSC  FA6.1
062A2:  BRA    62A0
062A4:  BCF    FA6.2
062A6:  MOVF   00,W
062A8:  IORWF  FF2,F
....................                   }
062AA:  MOVLB  E
062AC:  MOVFF  E71,03
062B0:  MOVF   x70,W
062B2:  INCF   x70,F
062B4:  BTFSC  FD8.2
062B6:  INCF   x71,F
062B8:  INCF   x72,F
062BA:  BTFSC  FD8.2
062BC:  INCF   x73,F
062BE:  BRA    61CA
062C0:  MOVLB  F
....................                }
....................                SMS_Massage12[j] = '\0' ; // end string
062C2:  MOVLW  E3
062C4:  MOVLB  E
062C6:  ADDWF  x72,W
062C8:  MOVWF  FE9
062CA:  MOVLW  0B
062CC:  ADDWFC x73,W
062CE:  MOVWF  FEA
062D0:  CLRF   FEF
....................                
....................                j=0;
062D2:  CLRF   x73
062D4:  CLRF   x72
....................                i++;
062D6:  INCF   x70,F
062D8:  BTFSC  FD8.2
062DA:  INCF   x71,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
062DC:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
062DE:  MOVLW  66
062E0:  ADDWF  x70,W
062E2:  MOVWF  FE9
062E4:  MOVLW  02
062E6:  ADDWFC x71,W
062E8:  MOVWF  FEA
062EA:  MOVF   FEF,W
062EC:  SUBLW  0D
062EE:  BZ    62FA
062F0:  MOVF   x73,F
062F2:  BNZ   62FA
062F4:  MOVF   x72,W
062F6:  SUBLW  1E
062F8:  BC    634A
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
062FA:  MOVLW  5D
062FC:  ADDWF  x70,W
062FE:  MOVWF  x76
06300:  MOVLW  00
06302:  ADDWFC x71,W
06304:  MOVWF  x77
06306:  MOVLW  66
06308:  ADDWF  x70,W
0630A:  MOVWF  FE9
0630C:  MOVLW  02
0630E:  ADDWFC x71,W
06310:  MOVWF  FEA
06312:  MOVFF  FEF,E78
06316:  MOVF   FF2,W
06318:  MOVWF  00
0631A:  BCF    FF2.7
0631C:  MOVFF  E77,FAA
06320:  MOVFF  E76,FA9
06324:  MOVFF  E78,FA8
06328:  BCF    FA6.6
0632A:  BCF    FA6.7
0632C:  BSF    FA6.2
0632E:  MOVLB  F
06330:  MOVLW  55
06332:  MOVWF  FA7
06334:  MOVLW  AA
06336:  MOVWF  FA7
06338:  BSF    FA6.1
0633A:  BTFSC  FA6.1
0633C:  BRA    633A
0633E:  BCF    FA6.2
06340:  MOVF   00,W
06342:  IORWF  FF2,F
....................                      break;
06344:  BRA    63D4
....................                   }
06346:  BRA    63BC
06348:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage13[j] = RxD_Buff[i];
0634A:  MOVLW  03
0634C:  ADDWF  x72,W
0634E:  MOVWF  01
06350:  MOVLW  0C
06352:  ADDWFC x73,W
06354:  MOVWF  03
06356:  MOVLW  66
06358:  ADDWF  x70,W
0635A:  MOVWF  FE9
0635C:  MOVLW  02
0635E:  ADDWFC x71,W
06360:  MOVWF  FEA
06362:  MOVFF  FEF,E78
06366:  MOVFF  03,FEA
0636A:  MOVFF  01,FE9
0636E:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06372:  MOVLW  5D
06374:  ADDWF  x70,W
06376:  MOVWF  x76
06378:  MOVLW  00
0637A:  ADDWFC x71,W
0637C:  MOVWF  x77
0637E:  MOVLW  66
06380:  ADDWF  x70,W
06382:  MOVWF  FE9
06384:  MOVLW  02
06386:  ADDWFC x71,W
06388:  MOVWF  FEA
0638A:  MOVFF  FEF,E78
0638E:  MOVF   FF2,W
06390:  MOVWF  00
06392:  BCF    FF2.7
06394:  MOVFF  E77,FAA
06398:  MOVFF  E76,FA9
0639C:  MOVFF  E78,FA8
063A0:  BCF    FA6.6
063A2:  BCF    FA6.7
063A4:  BSF    FA6.2
063A6:  MOVLB  F
063A8:  MOVLW  55
063AA:  MOVWF  FA7
063AC:  MOVLW  AA
063AE:  MOVWF  FA7
063B0:  BSF    FA6.1
063B2:  BTFSC  FA6.1
063B4:  BRA    63B2
063B6:  BCF    FA6.2
063B8:  MOVF   00,W
063BA:  IORWF  FF2,F
....................                   }
063BC:  MOVLB  E
063BE:  MOVFF  E71,03
063C2:  MOVF   x70,W
063C4:  INCF   x70,F
063C6:  BTFSC  FD8.2
063C8:  INCF   x71,F
063CA:  INCF   x72,F
063CC:  BTFSC  FD8.2
063CE:  INCF   x73,F
063D0:  BRA    62DC
063D2:  MOVLB  F
....................                }
....................                SMS_Massage13[j] = '\0' ; // end string
063D4:  MOVLW  03
063D6:  MOVLB  E
063D8:  ADDWF  x72,W
063DA:  MOVWF  FE9
063DC:  MOVLW  0C
063DE:  ADDWFC x73,W
063E0:  MOVWF  FEA
063E2:  CLRF   FEF
....................                
....................                j=0;
063E4:  CLRF   x73
063E6:  CLRF   x72
....................                i++;
063E8:  INCF   x70,F
063EA:  BTFSC  FD8.2
063EC:  INCF   x71,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
063EE:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
063F0:  MOVLW  66
063F2:  ADDWF  x70,W
063F4:  MOVWF  FE9
063F6:  MOVLW  02
063F8:  ADDWFC x71,W
063FA:  MOVWF  FEA
063FC:  MOVF   FEF,W
063FE:  SUBLW  0D
06400:  BZ    640C
06402:  MOVF   x73,F
06404:  BNZ   640C
06406:  MOVF   x72,W
06408:  SUBLW  1E
0640A:  BC    645C
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0640C:  MOVLW  5D
0640E:  ADDWF  x70,W
06410:  MOVWF  x76
06412:  MOVLW  00
06414:  ADDWFC x71,W
06416:  MOVWF  x77
06418:  MOVLW  66
0641A:  ADDWF  x70,W
0641C:  MOVWF  FE9
0641E:  MOVLW  02
06420:  ADDWFC x71,W
06422:  MOVWF  FEA
06424:  MOVFF  FEF,E78
06428:  MOVF   FF2,W
0642A:  MOVWF  00
0642C:  BCF    FF2.7
0642E:  MOVFF  E77,FAA
06432:  MOVFF  E76,FA9
06436:  MOVFF  E78,FA8
0643A:  BCF    FA6.6
0643C:  BCF    FA6.7
0643E:  BSF    FA6.2
06440:  MOVLB  F
06442:  MOVLW  55
06444:  MOVWF  FA7
06446:  MOVLW  AA
06448:  MOVWF  FA7
0644A:  BSF    FA6.1
0644C:  BTFSC  FA6.1
0644E:  BRA    644C
06450:  BCF    FA6.2
06452:  MOVF   00,W
06454:  IORWF  FF2,F
....................                      break;
06456:  BRA    64E6
....................                   }
06458:  BRA    64CE
0645A:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage14[j] = RxD_Buff[i];
0645C:  MOVLW  23
0645E:  ADDWF  x72,W
06460:  MOVWF  01
06462:  MOVLW  0C
06464:  ADDWFC x73,W
06466:  MOVWF  03
06468:  MOVLW  66
0646A:  ADDWF  x70,W
0646C:  MOVWF  FE9
0646E:  MOVLW  02
06470:  ADDWFC x71,W
06472:  MOVWF  FEA
06474:  MOVFF  FEF,E78
06478:  MOVFF  03,FEA
0647C:  MOVFF  01,FE9
06480:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06484:  MOVLW  5D
06486:  ADDWF  x70,W
06488:  MOVWF  x76
0648A:  MOVLW  00
0648C:  ADDWFC x71,W
0648E:  MOVWF  x77
06490:  MOVLW  66
06492:  ADDWF  x70,W
06494:  MOVWF  FE9
06496:  MOVLW  02
06498:  ADDWFC x71,W
0649A:  MOVWF  FEA
0649C:  MOVFF  FEF,E78
064A0:  MOVF   FF2,W
064A2:  MOVWF  00
064A4:  BCF    FF2.7
064A6:  MOVFF  E77,FAA
064AA:  MOVFF  E76,FA9
064AE:  MOVFF  E78,FA8
064B2:  BCF    FA6.6
064B4:  BCF    FA6.7
064B6:  BSF    FA6.2
064B8:  MOVLB  F
064BA:  MOVLW  55
064BC:  MOVWF  FA7
064BE:  MOVLW  AA
064C0:  MOVWF  FA7
064C2:  BSF    FA6.1
064C4:  BTFSC  FA6.1
064C6:  BRA    64C4
064C8:  BCF    FA6.2
064CA:  MOVF   00,W
064CC:  IORWF  FF2,F
....................                   }
064CE:  MOVLB  E
064D0:  MOVFF  E71,03
064D4:  MOVF   x70,W
064D6:  INCF   x70,F
064D8:  BTFSC  FD8.2
064DA:  INCF   x71,F
064DC:  INCF   x72,F
064DE:  BTFSC  FD8.2
064E0:  INCF   x73,F
064E2:  BRA    63EE
064E4:  MOVLB  F
....................                }
....................                SMS_Massage14[j] = '\0' ; // end string
064E6:  MOVLW  23
064E8:  MOVLB  E
064EA:  ADDWF  x72,W
064EC:  MOVWF  FE9
064EE:  MOVLW  0C
064F0:  ADDWFC x73,W
064F2:  MOVWF  FEA
064F4:  CLRF   FEF
....................                
....................                j=0;
064F6:  CLRF   x73
064F8:  CLRF   x72
....................                i++;
064FA:  INCF   x70,F
064FC:  BTFSC  FD8.2
064FE:  INCF   x71,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06500:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06502:  MOVLW  66
06504:  ADDWF  x70,W
06506:  MOVWF  FE9
06508:  MOVLW  02
0650A:  ADDWFC x71,W
0650C:  MOVWF  FEA
0650E:  MOVF   FEF,W
06510:  SUBLW  0D
06512:  BZ    651E
06514:  MOVF   x73,F
06516:  BNZ   651E
06518:  MOVF   x72,W
0651A:  SUBLW  1E
0651C:  BC    656E
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0651E:  MOVLW  5D
06520:  ADDWF  x70,W
06522:  MOVWF  x76
06524:  MOVLW  00
06526:  ADDWFC x71,W
06528:  MOVWF  x77
0652A:  MOVLW  66
0652C:  ADDWF  x70,W
0652E:  MOVWF  FE9
06530:  MOVLW  02
06532:  ADDWFC x71,W
06534:  MOVWF  FEA
06536:  MOVFF  FEF,E78
0653A:  MOVF   FF2,W
0653C:  MOVWF  00
0653E:  BCF    FF2.7
06540:  MOVFF  E77,FAA
06544:  MOVFF  E76,FA9
06548:  MOVFF  E78,FA8
0654C:  BCF    FA6.6
0654E:  BCF    FA6.7
06550:  BSF    FA6.2
06552:  MOVLB  F
06554:  MOVLW  55
06556:  MOVWF  FA7
06558:  MOVLW  AA
0655A:  MOVWF  FA7
0655C:  BSF    FA6.1
0655E:  BTFSC  FA6.1
06560:  BRA    655E
06562:  BCF    FA6.2
06564:  MOVF   00,W
06566:  IORWF  FF2,F
....................                      break;
06568:  BRA    65F8
....................                   }
0656A:  BRA    65E0
0656C:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage15[j] = RxD_Buff[i];
0656E:  MOVLW  43
06570:  ADDWF  x72,W
06572:  MOVWF  01
06574:  MOVLW  0C
06576:  ADDWFC x73,W
06578:  MOVWF  03
0657A:  MOVLW  66
0657C:  ADDWF  x70,W
0657E:  MOVWF  FE9
06580:  MOVLW  02
06582:  ADDWFC x71,W
06584:  MOVWF  FEA
06586:  MOVFF  FEF,E78
0658A:  MOVFF  03,FEA
0658E:  MOVFF  01,FE9
06592:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06596:  MOVLW  5D
06598:  ADDWF  x70,W
0659A:  MOVWF  x76
0659C:  MOVLW  00
0659E:  ADDWFC x71,W
065A0:  MOVWF  x77
065A2:  MOVLW  66
065A4:  ADDWF  x70,W
065A6:  MOVWF  FE9
065A8:  MOVLW  02
065AA:  ADDWFC x71,W
065AC:  MOVWF  FEA
065AE:  MOVFF  FEF,E78
065B2:  MOVF   FF2,W
065B4:  MOVWF  00
065B6:  BCF    FF2.7
065B8:  MOVFF  E77,FAA
065BC:  MOVFF  E76,FA9
065C0:  MOVFF  E78,FA8
065C4:  BCF    FA6.6
065C6:  BCF    FA6.7
065C8:  BSF    FA6.2
065CA:  MOVLB  F
065CC:  MOVLW  55
065CE:  MOVWF  FA7
065D0:  MOVLW  AA
065D2:  MOVWF  FA7
065D4:  BSF    FA6.1
065D6:  BTFSC  FA6.1
065D8:  BRA    65D6
065DA:  BCF    FA6.2
065DC:  MOVF   00,W
065DE:  IORWF  FF2,F
....................                   }
065E0:  MOVLB  E
065E2:  MOVFF  E71,03
065E6:  MOVF   x70,W
065E8:  INCF   x70,F
065EA:  BTFSC  FD8.2
065EC:  INCF   x71,F
065EE:  INCF   x72,F
065F0:  BTFSC  FD8.2
065F2:  INCF   x73,F
065F4:  BRA    6500
065F6:  MOVLB  F
....................                }
....................                SMS_Massage15[j] = '\0' ; // end string
065F8:  MOVLW  43
065FA:  MOVLB  E
065FC:  ADDWF  x72,W
065FE:  MOVWF  FE9
06600:  MOVLW  0C
06602:  ADDWFC x73,W
06604:  MOVWF  FEA
06606:  CLRF   FEF
....................                
....................                j=0;
06608:  CLRF   x73
0660A:  CLRF   x72
....................                i++;
0660C:  INCF   x70,F
0660E:  BTFSC  FD8.2
06610:  INCF   x71,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06612:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06614:  MOVLW  66
06616:  ADDWF  x70,W
06618:  MOVWF  FE9
0661A:  MOVLW  02
0661C:  ADDWFC x71,W
0661E:  MOVWF  FEA
06620:  MOVF   FEF,W
06622:  SUBLW  0D
06624:  BZ    6630
06626:  MOVF   x73,F
06628:  BNZ   6630
0662A:  MOVF   x72,W
0662C:  SUBLW  1E
0662E:  BC    6680
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06630:  MOVLW  5D
06632:  ADDWF  x70,W
06634:  MOVWF  x76
06636:  MOVLW  00
06638:  ADDWFC x71,W
0663A:  MOVWF  x77
0663C:  MOVLW  66
0663E:  ADDWF  x70,W
06640:  MOVWF  FE9
06642:  MOVLW  02
06644:  ADDWFC x71,W
06646:  MOVWF  FEA
06648:  MOVFF  FEF,E78
0664C:  MOVF   FF2,W
0664E:  MOVWF  00
06650:  BCF    FF2.7
06652:  MOVFF  E77,FAA
06656:  MOVFF  E76,FA9
0665A:  MOVFF  E78,FA8
0665E:  BCF    FA6.6
06660:  BCF    FA6.7
06662:  BSF    FA6.2
06664:  MOVLB  F
06666:  MOVLW  55
06668:  MOVWF  FA7
0666A:  MOVLW  AA
0666C:  MOVWF  FA7
0666E:  BSF    FA6.1
06670:  BTFSC  FA6.1
06672:  BRA    6670
06674:  BCF    FA6.2
06676:  MOVF   00,W
06678:  IORWF  FF2,F
....................                      break;
0667A:  BRA    670A
....................                   }
0667C:  BRA    66F2
0667E:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage16[j] = RxD_Buff[i];
06680:  MOVLW  63
06682:  ADDWF  x72,W
06684:  MOVWF  01
06686:  MOVLW  0C
06688:  ADDWFC x73,W
0668A:  MOVWF  03
0668C:  MOVLW  66
0668E:  ADDWF  x70,W
06690:  MOVWF  FE9
06692:  MOVLW  02
06694:  ADDWFC x71,W
06696:  MOVWF  FEA
06698:  MOVFF  FEF,E78
0669C:  MOVFF  03,FEA
066A0:  MOVFF  01,FE9
066A4:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
066A8:  MOVLW  5D
066AA:  ADDWF  x70,W
066AC:  MOVWF  x76
066AE:  MOVLW  00
066B0:  ADDWFC x71,W
066B2:  MOVWF  x77
066B4:  MOVLW  66
066B6:  ADDWF  x70,W
066B8:  MOVWF  FE9
066BA:  MOVLW  02
066BC:  ADDWFC x71,W
066BE:  MOVWF  FEA
066C0:  MOVFF  FEF,E78
066C4:  MOVF   FF2,W
066C6:  MOVWF  00
066C8:  BCF    FF2.7
066CA:  MOVFF  E77,FAA
066CE:  MOVFF  E76,FA9
066D2:  MOVFF  E78,FA8
066D6:  BCF    FA6.6
066D8:  BCF    FA6.7
066DA:  BSF    FA6.2
066DC:  MOVLB  F
066DE:  MOVLW  55
066E0:  MOVWF  FA7
066E2:  MOVLW  AA
066E4:  MOVWF  FA7
066E6:  BSF    FA6.1
066E8:  BTFSC  FA6.1
066EA:  BRA    66E8
066EC:  BCF    FA6.2
066EE:  MOVF   00,W
066F0:  IORWF  FF2,F
....................                   }
066F2:  MOVLB  E
066F4:  MOVFF  E71,03
066F8:  MOVF   x70,W
066FA:  INCF   x70,F
066FC:  BTFSC  FD8.2
066FE:  INCF   x71,F
06700:  INCF   x72,F
06702:  BTFSC  FD8.2
06704:  INCF   x73,F
06706:  BRA    6612
06708:  MOVLB  F
....................                }
....................                SMS_Massage16[j] = '\0' ; // end string
0670A:  MOVLW  63
0670C:  MOVLB  E
0670E:  ADDWF  x72,W
06710:  MOVWF  FE9
06712:  MOVLW  0C
06714:  ADDWFC x73,W
06716:  MOVWF  FEA
06718:  CLRF   FEF
....................                
....................                j=0;
0671A:  CLRF   x73
0671C:  CLRF   x72
....................                i++;
0671E:  INCF   x70,F
06720:  BTFSC  FD8.2
06722:  INCF   x71,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06724:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06726:  MOVLW  66
06728:  ADDWF  x70,W
0672A:  MOVWF  FE9
0672C:  MOVLW  02
0672E:  ADDWFC x71,W
06730:  MOVWF  FEA
06732:  MOVF   FEF,W
06734:  SUBLW  0D
06736:  BZ    6742
06738:  MOVF   x73,F
0673A:  BNZ   6742
0673C:  MOVF   x72,W
0673E:  SUBLW  1E
06740:  BC    6792
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06742:  MOVLW  5D
06744:  ADDWF  x70,W
06746:  MOVWF  x76
06748:  MOVLW  00
0674A:  ADDWFC x71,W
0674C:  MOVWF  x77
0674E:  MOVLW  66
06750:  ADDWF  x70,W
06752:  MOVWF  FE9
06754:  MOVLW  02
06756:  ADDWFC x71,W
06758:  MOVWF  FEA
0675A:  MOVFF  FEF,E78
0675E:  MOVF   FF2,W
06760:  MOVWF  00
06762:  BCF    FF2.7
06764:  MOVFF  E77,FAA
06768:  MOVFF  E76,FA9
0676C:  MOVFF  E78,FA8
06770:  BCF    FA6.6
06772:  BCF    FA6.7
06774:  BSF    FA6.2
06776:  MOVLB  F
06778:  MOVLW  55
0677A:  MOVWF  FA7
0677C:  MOVLW  AA
0677E:  MOVWF  FA7
06780:  BSF    FA6.1
06782:  BTFSC  FA6.1
06784:  BRA    6782
06786:  BCF    FA6.2
06788:  MOVF   00,W
0678A:  IORWF  FF2,F
....................                      break;
0678C:  BRA    681C
....................                   }
0678E:  BRA    6804
06790:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage17[j] = RxD_Buff[i];
06792:  MOVLW  83
06794:  ADDWF  x72,W
06796:  MOVWF  01
06798:  MOVLW  0C
0679A:  ADDWFC x73,W
0679C:  MOVWF  03
0679E:  MOVLW  66
067A0:  ADDWF  x70,W
067A2:  MOVWF  FE9
067A4:  MOVLW  02
067A6:  ADDWFC x71,W
067A8:  MOVWF  FEA
067AA:  MOVFF  FEF,E78
067AE:  MOVFF  03,FEA
067B2:  MOVFF  01,FE9
067B6:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
067BA:  MOVLW  5D
067BC:  ADDWF  x70,W
067BE:  MOVWF  x76
067C0:  MOVLW  00
067C2:  ADDWFC x71,W
067C4:  MOVWF  x77
067C6:  MOVLW  66
067C8:  ADDWF  x70,W
067CA:  MOVWF  FE9
067CC:  MOVLW  02
067CE:  ADDWFC x71,W
067D0:  MOVWF  FEA
067D2:  MOVFF  FEF,E78
067D6:  MOVF   FF2,W
067D8:  MOVWF  00
067DA:  BCF    FF2.7
067DC:  MOVFF  E77,FAA
067E0:  MOVFF  E76,FA9
067E4:  MOVFF  E78,FA8
067E8:  BCF    FA6.6
067EA:  BCF    FA6.7
067EC:  BSF    FA6.2
067EE:  MOVLB  F
067F0:  MOVLW  55
067F2:  MOVWF  FA7
067F4:  MOVLW  AA
067F6:  MOVWF  FA7
067F8:  BSF    FA6.1
067FA:  BTFSC  FA6.1
067FC:  BRA    67FA
067FE:  BCF    FA6.2
06800:  MOVF   00,W
06802:  IORWF  FF2,F
....................                   }
06804:  MOVLB  E
06806:  MOVFF  E71,03
0680A:  MOVF   x70,W
0680C:  INCF   x70,F
0680E:  BTFSC  FD8.2
06810:  INCF   x71,F
06812:  INCF   x72,F
06814:  BTFSC  FD8.2
06816:  INCF   x73,F
06818:  BRA    6724
0681A:  MOVLB  F
....................                }
....................                SMS_Massage17[j] = '\0' ; // end string
0681C:  MOVLW  83
0681E:  MOVLB  E
06820:  ADDWF  x72,W
06822:  MOVWF  FE9
06824:  MOVLW  0C
06826:  ADDWFC x73,W
06828:  MOVWF  FEA
0682A:  CLRF   FEF
....................                
....................                j=0;
0682C:  CLRF   x73
0682E:  CLRF   x72
....................                i++;
06830:  INCF   x70,F
06832:  BTFSC  FD8.2
06834:  INCF   x71,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06836:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06838:  MOVLW  66
0683A:  ADDWF  x70,W
0683C:  MOVWF  FE9
0683E:  MOVLW  02
06840:  ADDWFC x71,W
06842:  MOVWF  FEA
06844:  MOVF   FEF,W
06846:  SUBLW  0D
06848:  BZ    6854
0684A:  MOVF   x73,F
0684C:  BNZ   6854
0684E:  MOVF   x72,W
06850:  SUBLW  1E
06852:  BC    68A4
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06854:  MOVLW  5D
06856:  ADDWF  x70,W
06858:  MOVWF  x76
0685A:  MOVLW  00
0685C:  ADDWFC x71,W
0685E:  MOVWF  x77
06860:  MOVLW  66
06862:  ADDWF  x70,W
06864:  MOVWF  FE9
06866:  MOVLW  02
06868:  ADDWFC x71,W
0686A:  MOVWF  FEA
0686C:  MOVFF  FEF,E78
06870:  MOVF   FF2,W
06872:  MOVWF  00
06874:  BCF    FF2.7
06876:  MOVFF  E77,FAA
0687A:  MOVFF  E76,FA9
0687E:  MOVFF  E78,FA8
06882:  BCF    FA6.6
06884:  BCF    FA6.7
06886:  BSF    FA6.2
06888:  MOVLB  F
0688A:  MOVLW  55
0688C:  MOVWF  FA7
0688E:  MOVLW  AA
06890:  MOVWF  FA7
06892:  BSF    FA6.1
06894:  BTFSC  FA6.1
06896:  BRA    6894
06898:  BCF    FA6.2
0689A:  MOVF   00,W
0689C:  IORWF  FF2,F
....................                      break;
0689E:  BRA    692E
....................                   }
068A0:  BRA    6916
068A2:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage18[j] = RxD_Buff[i];
068A4:  MOVLW  A3
068A6:  ADDWF  x72,W
068A8:  MOVWF  01
068AA:  MOVLW  0C
068AC:  ADDWFC x73,W
068AE:  MOVWF  03
068B0:  MOVLW  66
068B2:  ADDWF  x70,W
068B4:  MOVWF  FE9
068B6:  MOVLW  02
068B8:  ADDWFC x71,W
068BA:  MOVWF  FEA
068BC:  MOVFF  FEF,E78
068C0:  MOVFF  03,FEA
068C4:  MOVFF  01,FE9
068C8:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
068CC:  MOVLW  5D
068CE:  ADDWF  x70,W
068D0:  MOVWF  x76
068D2:  MOVLW  00
068D4:  ADDWFC x71,W
068D6:  MOVWF  x77
068D8:  MOVLW  66
068DA:  ADDWF  x70,W
068DC:  MOVWF  FE9
068DE:  MOVLW  02
068E0:  ADDWFC x71,W
068E2:  MOVWF  FEA
068E4:  MOVFF  FEF,E78
068E8:  MOVF   FF2,W
068EA:  MOVWF  00
068EC:  BCF    FF2.7
068EE:  MOVFF  E77,FAA
068F2:  MOVFF  E76,FA9
068F6:  MOVFF  E78,FA8
068FA:  BCF    FA6.6
068FC:  BCF    FA6.7
068FE:  BSF    FA6.2
06900:  MOVLB  F
06902:  MOVLW  55
06904:  MOVWF  FA7
06906:  MOVLW  AA
06908:  MOVWF  FA7
0690A:  BSF    FA6.1
0690C:  BTFSC  FA6.1
0690E:  BRA    690C
06910:  BCF    FA6.2
06912:  MOVF   00,W
06914:  IORWF  FF2,F
....................                   }
06916:  MOVLB  E
06918:  MOVFF  E71,03
0691C:  MOVF   x70,W
0691E:  INCF   x70,F
06920:  BTFSC  FD8.2
06922:  INCF   x71,F
06924:  INCF   x72,F
06926:  BTFSC  FD8.2
06928:  INCF   x73,F
0692A:  BRA    6836
0692C:  MOVLB  F
....................                }
....................                SMS_Massage18[j] = '\0' ; // end string
0692E:  MOVLW  A3
06930:  MOVLB  E
06932:  ADDWF  x72,W
06934:  MOVWF  FE9
06936:  MOVLW  0C
06938:  ADDWFC x73,W
0693A:  MOVWF  FEA
0693C:  CLRF   FEF
....................                
....................                j=0;
0693E:  CLRF   x73
06940:  CLRF   x72
....................                i++;
06942:  INCF   x70,F
06944:  BTFSC  FD8.2
06946:  INCF   x71,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06948:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0694A:  MOVLW  66
0694C:  ADDWF  x70,W
0694E:  MOVWF  FE9
06950:  MOVLW  02
06952:  ADDWFC x71,W
06954:  MOVWF  FEA
06956:  MOVF   FEF,W
06958:  SUBLW  0D
0695A:  BZ    6966
0695C:  MOVF   x73,F
0695E:  BNZ   6966
06960:  MOVF   x72,W
06962:  SUBLW  1E
06964:  BC    69B6
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06966:  MOVLW  5D
06968:  ADDWF  x70,W
0696A:  MOVWF  x76
0696C:  MOVLW  00
0696E:  ADDWFC x71,W
06970:  MOVWF  x77
06972:  MOVLW  66
06974:  ADDWF  x70,W
06976:  MOVWF  FE9
06978:  MOVLW  02
0697A:  ADDWFC x71,W
0697C:  MOVWF  FEA
0697E:  MOVFF  FEF,E78
06982:  MOVF   FF2,W
06984:  MOVWF  00
06986:  BCF    FF2.7
06988:  MOVFF  E77,FAA
0698C:  MOVFF  E76,FA9
06990:  MOVFF  E78,FA8
06994:  BCF    FA6.6
06996:  BCF    FA6.7
06998:  BSF    FA6.2
0699A:  MOVLB  F
0699C:  MOVLW  55
0699E:  MOVWF  FA7
069A0:  MOVLW  AA
069A2:  MOVWF  FA7
069A4:  BSF    FA6.1
069A6:  BTFSC  FA6.1
069A8:  BRA    69A6
069AA:  BCF    FA6.2
069AC:  MOVF   00,W
069AE:  IORWF  FF2,F
....................                      break;
069B0:  BRA    6A40
....................                   }
069B2:  BRA    6A28
069B4:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage19[j] = RxD_Buff[i];
069B6:  MOVLW  C3
069B8:  ADDWF  x72,W
069BA:  MOVWF  01
069BC:  MOVLW  0C
069BE:  ADDWFC x73,W
069C0:  MOVWF  03
069C2:  MOVLW  66
069C4:  ADDWF  x70,W
069C6:  MOVWF  FE9
069C8:  MOVLW  02
069CA:  ADDWFC x71,W
069CC:  MOVWF  FEA
069CE:  MOVFF  FEF,E78
069D2:  MOVFF  03,FEA
069D6:  MOVFF  01,FE9
069DA:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
069DE:  MOVLW  5D
069E0:  ADDWF  x70,W
069E2:  MOVWF  x76
069E4:  MOVLW  00
069E6:  ADDWFC x71,W
069E8:  MOVWF  x77
069EA:  MOVLW  66
069EC:  ADDWF  x70,W
069EE:  MOVWF  FE9
069F0:  MOVLW  02
069F2:  ADDWFC x71,W
069F4:  MOVWF  FEA
069F6:  MOVFF  FEF,E78
069FA:  MOVF   FF2,W
069FC:  MOVWF  00
069FE:  BCF    FF2.7
06A00:  MOVFF  E77,FAA
06A04:  MOVFF  E76,FA9
06A08:  MOVFF  E78,FA8
06A0C:  BCF    FA6.6
06A0E:  BCF    FA6.7
06A10:  BSF    FA6.2
06A12:  MOVLB  F
06A14:  MOVLW  55
06A16:  MOVWF  FA7
06A18:  MOVLW  AA
06A1A:  MOVWF  FA7
06A1C:  BSF    FA6.1
06A1E:  BTFSC  FA6.1
06A20:  BRA    6A1E
06A22:  BCF    FA6.2
06A24:  MOVF   00,W
06A26:  IORWF  FF2,F
....................                   }
06A28:  MOVLB  E
06A2A:  MOVFF  E71,03
06A2E:  MOVF   x70,W
06A30:  INCF   x70,F
06A32:  BTFSC  FD8.2
06A34:  INCF   x71,F
06A36:  INCF   x72,F
06A38:  BTFSC  FD8.2
06A3A:  INCF   x73,F
06A3C:  BRA    6948
06A3E:  MOVLB  F
....................                }
....................                SMS_Massage19[j] = '\0' ; // end string
06A40:  MOVLW  C3
06A42:  MOVLB  E
06A44:  ADDWF  x72,W
06A46:  MOVWF  FE9
06A48:  MOVLW  0C
06A4A:  ADDWFC x73,W
06A4C:  MOVWF  FEA
06A4E:  CLRF   FEF
....................                
....................                j=0;
06A50:  CLRF   x73
06A52:  CLRF   x72
....................                i++;
06A54:  INCF   x70,F
06A56:  BTFSC  FD8.2
06A58:  INCF   x71,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06A5A:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06A5C:  MOVLW  66
06A5E:  ADDWF  x70,W
06A60:  MOVWF  FE9
06A62:  MOVLW  02
06A64:  ADDWFC x71,W
06A66:  MOVWF  FEA
06A68:  MOVF   FEF,W
06A6A:  SUBLW  0D
06A6C:  BZ    6A78
06A6E:  MOVF   x73,F
06A70:  BNZ   6A78
06A72:  MOVF   x72,W
06A74:  SUBLW  1E
06A76:  BC    6AC8
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06A78:  MOVLW  5D
06A7A:  ADDWF  x70,W
06A7C:  MOVWF  x76
06A7E:  MOVLW  00
06A80:  ADDWFC x71,W
06A82:  MOVWF  x77
06A84:  MOVLW  66
06A86:  ADDWF  x70,W
06A88:  MOVWF  FE9
06A8A:  MOVLW  02
06A8C:  ADDWFC x71,W
06A8E:  MOVWF  FEA
06A90:  MOVFF  FEF,E78
06A94:  MOVF   FF2,W
06A96:  MOVWF  00
06A98:  BCF    FF2.7
06A9A:  MOVFF  E77,FAA
06A9E:  MOVFF  E76,FA9
06AA2:  MOVFF  E78,FA8
06AA6:  BCF    FA6.6
06AA8:  BCF    FA6.7
06AAA:  BSF    FA6.2
06AAC:  MOVLB  F
06AAE:  MOVLW  55
06AB0:  MOVWF  FA7
06AB2:  MOVLW  AA
06AB4:  MOVWF  FA7
06AB6:  BSF    FA6.1
06AB8:  BTFSC  FA6.1
06ABA:  BRA    6AB8
06ABC:  BCF    FA6.2
06ABE:  MOVF   00,W
06AC0:  IORWF  FF2,F
....................                      break;
06AC2:  BRA    6B52
....................                   }
06AC4:  BRA    6B3A
06AC6:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage20[j] = RxD_Buff[i];
06AC8:  MOVLW  E3
06ACA:  ADDWF  x72,W
06ACC:  MOVWF  01
06ACE:  MOVLW  0C
06AD0:  ADDWFC x73,W
06AD2:  MOVWF  03
06AD4:  MOVLW  66
06AD6:  ADDWF  x70,W
06AD8:  MOVWF  FE9
06ADA:  MOVLW  02
06ADC:  ADDWFC x71,W
06ADE:  MOVWF  FEA
06AE0:  MOVFF  FEF,E78
06AE4:  MOVFF  03,FEA
06AE8:  MOVFF  01,FE9
06AEC:  MOVFF  E78,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06AF0:  MOVLW  5D
06AF2:  ADDWF  x70,W
06AF4:  MOVWF  x76
06AF6:  MOVLW  00
06AF8:  ADDWFC x71,W
06AFA:  MOVWF  x77
06AFC:  MOVLW  66
06AFE:  ADDWF  x70,W
06B00:  MOVWF  FE9
06B02:  MOVLW  02
06B04:  ADDWFC x71,W
06B06:  MOVWF  FEA
06B08:  MOVFF  FEF,E78
06B0C:  MOVF   FF2,W
06B0E:  MOVWF  00
06B10:  BCF    FF2.7
06B12:  MOVFF  E77,FAA
06B16:  MOVFF  E76,FA9
06B1A:  MOVFF  E78,FA8
06B1E:  BCF    FA6.6
06B20:  BCF    FA6.7
06B22:  BSF    FA6.2
06B24:  MOVLB  F
06B26:  MOVLW  55
06B28:  MOVWF  FA7
06B2A:  MOVLW  AA
06B2C:  MOVWF  FA7
06B2E:  BSF    FA6.1
06B30:  BTFSC  FA6.1
06B32:  BRA    6B30
06B34:  BCF    FA6.2
06B36:  MOVF   00,W
06B38:  IORWF  FF2,F
....................                   }
06B3A:  MOVLB  E
06B3C:  MOVFF  E71,03
06B40:  MOVF   x70,W
06B42:  INCF   x70,F
06B44:  BTFSC  FD8.2
06B46:  INCF   x71,F
06B48:  INCF   x72,F
06B4A:  BTFSC  FD8.2
06B4C:  INCF   x73,F
06B4E:  BRA    6A5A
06B50:  MOVLB  F
....................                }
....................                SMS_Massage20[j] = '\0' ; // end string
06B52:  MOVLW  E3
06B54:  MOVLB  E
06B56:  ADDWF  x72,W
06B58:  MOVWF  FE9
06B5A:  MOVLW  0C
06B5C:  ADDWFC x73,W
06B5E:  MOVWF  FEA
06B60:  CLRF   FEF
....................                
....................             
....................                TxD_Buff[0] = Address ;         //Address
06B62:  MOVFF  64,66
....................                TxD_Buff[1] = 0x22 ;            //return function code
06B66:  MOVLW  22
06B68:  MOVLB  0
06B6A:  MOVWF  x67
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
06B6C:  MOVLB  E
06B6E:  CLRF   x78
06B70:  MOVLW  66
06B72:  MOVWF  x77
06B74:  MOVLW  02
06B76:  MOVWF  x79
06B78:  MOVLB  0
06B7A:  CALL   33F6
....................    
....................                TxD_Buff[2] = CRC_Hi ;
06B7E:  MOVFF  667,68
....................                TxD_Buff[3] = CRC_Lo ;
06B82:  MOVFF  666,69
....................    
....................                output_bit(P485ctrl,1);
06B86:  BSF    F8A.3
06B88:  BCF    F93.3
....................                delay_ms(10);
06B8A:  MOVLW  0A
06B8C:  MOVLB  E
06B8E:  MOVWF  x76
06B90:  MOVLB  0
06B92:  CALL   0662
....................    
....................                putc(Txd_Buff[0]);
06B96:  MOVF   x66,W
06B98:  CALL   344C
....................                putc(Txd_Buff[1]);
06B9C:  MOVF   x67,W
06B9E:  CALL   344C
....................                putc(Txd_Buff[2]);
06BA2:  MOVF   x68,W
06BA4:  CALL   344C
....................                putc(Txd_Buff[3]);
06BA8:  MOVF   x69,W
06BAA:  CALL   344C
....................    
....................                delay_ms(3);
06BAE:  MOVLW  03
06BB0:  MOVLB  E
06BB2:  MOVWF  x76
06BB4:  MOVLB  0
06BB6:  CALL   0662
....................                output_bit(P485ctrl,0);
06BBA:  BCF    F8A.3
06BBC:  BCF    F93.3
06BBE:  MOVLB  6
....................             }
....................             ////////////////////////////// WRITE Faultname //////////////////////////
.................... 
....................          
....................                   if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
06BC0:  MOVLB  2
06BC2:  MOVF   x67,W
06BC4:  SUBLW  03
06BC6:  BNZ   6C70
....................          {
....................             Data_Buff[0] = Input9_16; //>> Start_Address ;
06BC8:  MOVFF  4A,66F
....................             Data_Buff[1] = Input1_8;// >> Start_Address ;
06BCC:  MOVFF  46,670
....................             Data_Buff[2] = Input25_32;
06BD0:  MOVFF  4C,671
....................             Data_Buff[3] = Input17_24;// >> Start_Address ;
06BD4:  MOVFF  4B,672
....................             
....................             TxD_Buff[0] = Address ;         //Address
06BD8:  MOVFF  64,66
....................             TxD_Buff[1] = 0x03 ;           //Function Code
06BDC:  MOVLW  03
06BDE:  MOVLB  0
06BE0:  MOVWF  x67
....................             TxD_Buff[2] = 0x04 ;          //Byte Count
06BE2:  MOVLW  04
06BE4:  MOVWF  x68
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
06BE6:  MOVFF  66F,69
....................             TxD_Buff[4] = Data_Buff[1];  //second byte Data
06BEA:  MOVFF  670,6A
....................             TxD_Buff[5] = Data_Buff[2]; 
06BEE:  MOVFF  671,6B
....................             TxD_Buff[6] = Data_Buff[3]; 
06BF2:  MOVFF  672,6C
.................... 
....................             CRC(TxD_Buff,7)   ;            //Cal CRC 5 Byte
06BF6:  MOVLB  E
06BF8:  CLRF   x78
06BFA:  MOVLW  66
06BFC:  MOVWF  x77
06BFE:  MOVLW  07
06C00:  MOVWF  x79
06C02:  MOVLB  0
06C04:  CALL   33F6
.................... 
....................             TxD_Buff[7] = CRC_Hi ;
06C08:  MOVFF  667,6D
....................             TxD_Buff[8] = CRC_Lo ;
06C0C:  MOVFF  666,6E
.................... 
....................             output_bit(P485ctrl,1);
06C10:  BSF    F8A.3
06C12:  BCF    F93.3
....................             restart_wdt();
06C14:  CLRWDT
....................             delay_ms(4);
06C16:  MOVLW  04
06C18:  MOVLB  E
06C1A:  MOVWF  x76
06C1C:  MOVLB  0
06C1E:  CALL   0662
....................             restart_wdt();
06C22:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
06C24:  MOVF   x66,W
06C26:  CALL   344C
....................             putc(TxD_Buff[1]) ;               //Function Code
06C2A:  MOVF   x67,W
06C2C:  CALL   344C
....................             putc(TxD_Buff[2]) ;               //Byte Count
06C30:  MOVF   x68,W
06C32:  CALL   344C
....................             putc(TxD_Buff[3]) ;
06C36:  MOVF   x69,W
06C38:  CALL   344C
....................             putc(TxD_Buff[4]) ;
06C3C:  MOVF   x6A,W
06C3E:  CALL   344C
....................             putc(TxD_Buff[5]) ;
06C42:  MOVF   x6B,W
06C44:  CALL   344C
....................             putc(TxD_Buff[6]) ;
06C48:  MOVF   x6C,W
06C4A:  CALL   344C
....................             putc(TxD_Buff[7]) ;
06C4E:  MOVF   x6D,W
06C50:  CALL   344C
....................             putc(TxD_Buff[8]) ;
06C54:  MOVF   x6E,W
06C56:  CALL   344C
....................             //putc(TxD_Buff[9]) ;
.................... 
....................             restart_wdt();
06C5A:  CLRWDT
....................             delay_ms(3);
06C5C:  MOVLW  03
06C5E:  MOVLB  E
06C60:  MOVWF  x76
06C62:  MOVLB  0
06C64:  CALL   0662
....................             restart_wdt();
06C68:  CLRWDT
....................             output_bit(P485ctrl,0);
06C6A:  BCF    F8A.3
06C6C:  BCF    F93.3
06C6E:  MOVLB  2
.................... 
....................          }
....................        
....................       }  
.................... 
....................       Send_check_Time = 500; //5 Second
06C70:  MOVLW  01
06C72:  MOVLB  6
06C74:  MOVWF  x69
06C76:  MOVLW  F4
06C78:  MOVWF  x68
....................    }
.................... 
....................    recieve_completed = 0 ;
06C7A:  BCF    32.5
....................    sequence = end_sq ;
06C7C:  MOVFF  5A,63
....................    T_timeout = 0x00;
06C80:  MOVLB  A
06C82:  CLRF   x70
....................    RxD_DataLen = 0x00 ;
06C84:  MOVLB  0
06C86:  CLRF   x65
....................    output_bit(P485ctrl,0);
06C88:  BCF    F8A.3
06C8A:  BCF    F93.3
06C8C:  GOTO   BB98 (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................     ///////////////////////--Edit--///////////////////
....................     //unsigned char MCP23s17_dat1=0;
....................     //unsigned char MCP23s17_dat2=0;
....................     //unsigned char MCP23s17_dat3=0;
....................     //unsigned char MCP23s17_dat4=0;
....................     
....................     /*
....................     MCP23s17_dat1 = IO_INPUT_A(IO_DEVICE_0);
....................     MCP23s17_dat2 = IO_INPUT_B(IO_DEVICE_0);
....................     MCP23s17_dat3 = IO_INPUT_A(IO_DEVICE_1);
....................     MCP23s17_dat4 = IO_INPUT_B(IO_DEVICE_1);
....................     if((MCP23s17_dat1==0)&&(MCP23s17_dat2==0)&&(MCP23s17_dat3==0)&&(MCP23s17_dat4==0))
....................      return;
....................      */
....................     /*
....................     do
....................     {
....................       MCP23s17_dat1 = IO_INPUT_A(IO_DEVICE_0);
....................       //MCP23s17_dat2 = IO_INPUT_B(IO_DEVICE_0);
....................       MCP23s17_dat3 = IO_INPUT_A(IO_DEVICE_1);
....................       //MCP23s17_dat4 = IO_INPUT_B(IO_DEVICE_1);
....................       restart_wdt();
....................     }while((MCP23s17_dat1==0)&&(MCP23s17_dat3==0));
....................     */
....................      
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
*
022D6:  MOVLB  E
022D8:  CLRF   x77
022DA:  MOVLB  0
022DC:  RCALL  21C2
022DE:  MOVFF  01,A6F
....................         
....................       if (AutoTestFlag)  // TEST FROM MODBUS
022E2:  BTFSS  1C.4
022E4:  BRA    22EC
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
022E6:  MOVLB  A
022E8:  COMF   x6F,F
022EA:  MOVLB  0
....................       }
....................       
....................       FaultNow[11] = MCP23s17_Ip_dat;
022EC:  MOVLB  D
022EE:  BCF    xE4.3
022F0:  MOVLB  A
022F2:  BTFSS  x6F.0
022F4:  BRA    22FC
022F6:  MOVLB  D
022F8:  BSF    xE4.3
022FA:  MOVLB  A
....................       FaultNow[12] = MCP23s17_Ip_dat >> 1;
022FC:  BCF    FD8.0
022FE:  RRCF   x6F,W
02300:  MOVLB  D
02302:  BCF    xE4.4
02304:  BTFSC  FE8.0
02306:  BSF    xE4.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 2;
02308:  MOVLB  A
0230A:  RRCF   x6F,W
0230C:  MOVWF  00
0230E:  RRCF   00,F
02310:  MOVLW  3F
02312:  ANDWF  00,F
02314:  MOVLB  D
02316:  BCF    xE4.5
02318:  BTFSC  00.0
0231A:  BSF    xE4.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 3;
0231C:  MOVLB  A
0231E:  RRCF   x6F,W
02320:  MOVWF  00
02322:  RRCF   00,F
02324:  RRCF   00,F
02326:  MOVLW  1F
02328:  ANDWF  00,F
0232A:  MOVLB  D
0232C:  BCF    xE4.6
0232E:  BTFSC  00.0
02330:  BSF    xE4.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 4;
02332:  MOVLB  A
02334:  SWAPF  x6F,W
02336:  MOVWF  00
02338:  MOVLW  0F
0233A:  ANDWF  00,F
0233C:  MOVLB  D
0233E:  BCF    xE4.7
02340:  BTFSC  00.0
02342:  BSF    xE4.7
....................       FaultNow[16] = MCP23s17_Ip_dat >> 5;
02344:  MOVLB  A
02346:  SWAPF  x6F,W
02348:  MOVWF  00
0234A:  RRCF   00,F
0234C:  MOVLW  07
0234E:  ANDWF  00,F
02350:  MOVLB  D
02352:  BCF    xE5.0
02354:  BTFSC  00.0
02356:  BSF    xE5.0
....................       FaultNow[17] = MCP23s17_Ip_dat >> 6;
02358:  MOVLB  A
0235A:  SWAPF  x6F,W
0235C:  MOVWF  00
0235E:  RRCF   00,F
02360:  RRCF   00,F
02362:  MOVLW  03
02364:  ANDWF  00,F
02366:  MOVLB  D
02368:  BCF    xE5.1
0236A:  BTFSC  00.0
0236C:  BSF    xE5.1
....................       FaultNow[18] = MCP23s17_Ip_dat >> 7;
0236E:  CLRF   00
02370:  MOVLB  A
02372:  BTFSC  x6F.7
02374:  BSF    00.0
02376:  MOVLB  D
02378:  BCF    xE5.2
0237A:  BTFSC  00.0
0237C:  BSF    xE5.2
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
0237E:  MOVLB  E
02380:  CLRF   x77
02382:  MOVLB  0
02384:  RCALL  21DE
02386:  MOVFF  01,A6F
....................       
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
0238A:  BTFSS  1C.4
0238C:  BRA    2394
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
0238E:  MOVLB  A
02390:  COMF   x6F,F
02392:  MOVLB  0
....................       }
....................       
....................       FaultNow[19] = MCP23s17_Ip_dat;
02394:  MOVLB  D
02396:  BCF    xE5.3
02398:  MOVLB  A
0239A:  BTFSS  x6F.0
0239C:  BRA    23A4
0239E:  MOVLB  D
023A0:  BSF    xE5.3
023A2:  MOVLB  A
....................       FaultNow[20] = MCP23s17_Ip_dat >> 1;
023A4:  BCF    FD8.0
023A6:  RRCF   x6F,W
023A8:  MOVLB  D
023AA:  BCF    xE5.4
023AC:  BTFSC  FE8.0
023AE:  BSF    xE5.4
....................       
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
023B0:  MOVLW  02
023B2:  MOVLB  E
023B4:  MOVWF  x77
023B6:  MOVLB  0
023B8:  RCALL  21C2
023BA:  MOVFF  01,A6F
....................       
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
023BE:  BTFSS  1C.4
023C0:  BRA    23C8
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
023C2:  MOVLB  A
023C4:  COMF   x6F,F
023C6:  MOVLB  0
....................       }
....................       
....................       FaultNow[1] = MCP23s17_Ip_dat;
023C8:  MOVLB  D
023CA:  BCF    xE3.1
023CC:  MOVLB  A
023CE:  BTFSS  x6F.0
023D0:  BRA    23D8
023D2:  MOVLB  D
023D4:  BSF    xE3.1
023D6:  MOVLB  A
....................       FaultNow[2] = MCP23s17_Ip_dat >> 1;
023D8:  BCF    FD8.0
023DA:  RRCF   x6F,W
023DC:  MOVLB  D
023DE:  BCF    xE3.2
023E0:  BTFSC  FE8.0
023E2:  BSF    xE3.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 2;
023E4:  MOVLB  A
023E6:  RRCF   x6F,W
023E8:  MOVWF  00
023EA:  RRCF   00,F
023EC:  MOVLW  3F
023EE:  ANDWF  00,F
023F0:  MOVLB  D
023F2:  BCF    xE3.3
023F4:  BTFSC  00.0
023F6:  BSF    xE3.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 3;
023F8:  MOVLB  A
023FA:  RRCF   x6F,W
023FC:  MOVWF  00
023FE:  RRCF   00,F
02400:  RRCF   00,F
02402:  MOVLW  1F
02404:  ANDWF  00,F
02406:  MOVLB  D
02408:  BCF    xE3.4
0240A:  BTFSC  00.0
0240C:  BSF    xE3.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 4;
0240E:  MOVLB  A
02410:  SWAPF  x6F,W
02412:  MOVWF  00
02414:  MOVLW  0F
02416:  ANDWF  00,F
02418:  MOVLB  D
0241A:  BCF    xE3.5
0241C:  BTFSC  00.0
0241E:  BSF    xE3.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 5;
02420:  MOVLB  A
02422:  SWAPF  x6F,W
02424:  MOVWF  00
02426:  RRCF   00,F
02428:  MOVLW  07
0242A:  ANDWF  00,F
0242C:  MOVLB  D
0242E:  BCF    xE3.6
02430:  BTFSC  00.0
02432:  BSF    xE3.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 6;
02434:  MOVLB  A
02436:  SWAPF  x6F,W
02438:  MOVWF  00
0243A:  RRCF   00,F
0243C:  RRCF   00,F
0243E:  MOVLW  03
02440:  ANDWF  00,F
02442:  MOVLB  D
02444:  BCF    xE3.7
02446:  BTFSC  00.0
02448:  BSF    xE3.7
....................       FaultNow[8] = MCP23s17_Ip_dat >> 7;
0244A:  CLRF   00
0244C:  MOVLB  A
0244E:  BTFSC  x6F.7
02450:  BSF    00.0
02452:  MOVLB  D
02454:  BCF    xE4.0
02456:  BTFSC  00.0
02458:  BSF    xE4.0
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
0245A:  MOVLW  02
0245C:  MOVLB  E
0245E:  MOVWF  x77
02460:  MOVLB  0
02462:  RCALL  21DE
02464:  MOVFF  01,A6F
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02468:  BTFSS  1C.4
0246A:  BRA    2472
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
0246C:  MOVLB  A
0246E:  COMF   x6F,F
02470:  MOVLB  0
....................       }
....................       
....................       FaultNow[9] = MCP23s17_Ip_dat;
02472:  MOVLB  D
02474:  BCF    xE4.1
02476:  MOVLB  A
02478:  BTFSS  x6F.0
0247A:  BRA    2482
0247C:  MOVLB  D
0247E:  BSF    xE4.1
02480:  MOVLB  A
....................       FaultNow[10] = MCP23s17_Ip_dat >> 1;
02482:  BCF    FD8.0
02484:  RRCF   x6F,W
02486:  MOVLB  D
02488:  BCF    xE4.2
0248A:  BTFSC  FE8.0
0248C:  BSF    xE4.2
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=20; i++)
0248E:  MOVLW  01
02490:  MOVLB  E
02492:  MOVWF  x76
02494:  MOVF   x76,W
02496:  SUBLW  14
02498:  BTFSS  FD8.0
0249A:  BRA    2B0C
....................       {
....................          if(FaultNCNO[i] ==NO)
0249C:  MOVFF  E76,E78
024A0:  MOVLW  0E
024A2:  MOVWF  x7A
024A4:  MOVLW  5F
024A6:  MOVWF  x79
024A8:  MOVLB  0
024AA:  RCALL  21FA
024AC:  MOVF   01,W
024AE:  ANDLW  01
024B0:  SUBLW  01
024B2:  BTFSS  FD8.2
024B4:  BRA    27D0
....................          {
....................              if(FaultNow[i]==0)
024B6:  MOVFF  E76,E78
024BA:  MOVLW  0D
024BC:  MOVLB  E
024BE:  MOVWF  x7A
024C0:  MOVLW  E3
024C2:  MOVWF  x79
024C4:  MOVLB  0
024C6:  RCALL  21FA
024C8:  MOVF   01,W
024CA:  ANDLW  01
024CC:  BTFSS  FD8.2
024CE:  BRA    2650
....................              {   
....................                if(FaultAgo[i]==0)
024D0:  MOVFF  E76,E78
024D4:  MOVLW  0D
024D6:  MOVLB  E
024D8:  MOVWF  x7A
024DA:  MOVLW  DF
024DC:  MOVWF  x79
024DE:  MOVLB  0
024E0:  RCALL  21FA
024E2:  MOVF   01,W
024E4:  ANDLW  01
024E6:  BTFSS  FD8.2
024E8:  BRA    2634
....................                {
....................                    ReleaseTime[i]++;
024EA:  BCF    FD8.0
024EC:  MOVLB  E
024EE:  RLCF   x76,W
024F0:  CLRF   03
024F2:  ADDLW  E7
024F4:  MOVWF  FE9
024F6:  MOVLW  0D
024F8:  ADDWFC 03,W
024FA:  MOVWF  FEA
024FC:  MOVLW  01
024FE:  ADDWF  FEE,F
02500:  BNC   2504
02502:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
02504:  BCF    FD8.0
02506:  RLCF   x76,W
02508:  CLRF   03
0250A:  ADDLW  E7
0250C:  MOVWF  FE9
0250E:  MOVLW  0D
02510:  ADDWFC 03,W
02512:  MOVWF  FEA
02514:  MOVFF  FEC,E78
02518:  MOVF   FED,F
0251A:  MOVFF  FEF,E77
0251E:  BCF    FD8.0
02520:  RLCF   x76,W
02522:  CLRF   03
02524:  ADDLW  23
02526:  MOVWF  FE9
02528:  MOVLW  0E
0252A:  ADDWFC 03,W
0252C:  MOVWF  FEA
0252E:  MOVFF  FEC,E7C
02532:  MOVF   FED,F
02534:  MOVFF  FEF,E7B
02538:  CLRF   x7E
0253A:  MOVLW  4B
0253C:  MOVWF  x7D
0253E:  MOVLB  0
02540:  RCALL  2230
02542:  MOVFF  02,E7A
02546:  MOVFF  01,E79
0254A:  MOVLW  0F
0254C:  MOVLB  E
0254E:  ADDWF  01,W
02550:  MOVWF  01
02552:  MOVLW  00
02554:  ADDWFC 02,W
02556:  MOVWF  03
02558:  MOVF   03,W
0255A:  SUBWF  x78,W
0255C:  BTFSS  FD8.0
0255E:  BRA    2630
02560:  BNZ   2568
02562:  MOVF   01,W
02564:  SUBWF  x77,W
02566:  BNC   2630
....................                    {   
....................                      ReleaseTime[i] = 0;
02568:  BCF    FD8.0
0256A:  RLCF   x76,W
0256C:  CLRF   03
0256E:  ADDLW  E7
02570:  MOVWF  FE9
02572:  MOVLW  0D
02574:  ADDWFC 03,W
02576:  MOVWF  FEA
02578:  CLRF   FEC
0257A:  MOVF   FED,F
0257C:  CLRF   FEF
....................                      switch(i)
0257E:  MOVLW  01
02580:  SUBWF  x76,W
02582:  ADDLW  EC
02584:  BC    2630
02586:  ADDLW  14
02588:  MOVLB  0
0258A:  GOTO   2DC8
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
0258E:  MOVLB  D
02590:  BCF    xA7.0
....................                         break;
02592:  MOVLB  E
02594:  BRA    2630
....................                         case 2:
....................                            Inputt.B2 = 0; 
02596:  MOVLB  D
02598:  BCF    xA7.1
....................                         break;
0259A:  MOVLB  E
0259C:  BRA    2630
....................                         case 3:
....................                            Inputt.B3 = 0; 
0259E:  MOVLB  D
025A0:  BCF    xA7.2
....................                         break;
025A2:  MOVLB  E
025A4:  BRA    2630
....................                         case 4:
....................                            Inputt.B4 = 0; 
025A6:  MOVLB  D
025A8:  BCF    xA7.3
....................                         break;
025AA:  MOVLB  E
025AC:  BRA    2630
....................                         case 5:
....................                            Inputt.B5 = 0; 
025AE:  MOVLB  D
025B0:  BCF    xA7.4
....................                         break;
025B2:  MOVLB  E
025B4:  BRA    2630
....................                         case 6:
....................                            Inputt.B6 = 0; 
025B6:  MOVLB  D
025B8:  BCF    xA7.5
....................                         break;
025BA:  MOVLB  E
025BC:  BRA    2630
....................                         case 7:
....................                            Inputt.B7 = 0; 
025BE:  MOVLB  D
025C0:  BCF    xA7.6
....................                          break;
025C2:  MOVLB  E
025C4:  BRA    2630
....................                          case 8:
....................                            Inputt.B8 = 0; 
025C6:  MOVLB  D
025C8:  BCF    xA7.7
....................                         break;
025CA:  MOVLB  E
025CC:  BRA    2630
....................                         case 9:
....................                            Inputt.B9 = 0; 
025CE:  MOVLB  D
025D0:  BCF    xA8.0
....................                         break;
025D2:  MOVLB  E
025D4:  BRA    2630
....................                         case 10:
....................                            Inputt.B10 = 0; 
025D6:  MOVLB  D
025D8:  BCF    xA8.1
....................                         break;
025DA:  MOVLB  E
025DC:  BRA    2630
....................                         case 11:
....................                            Inputt.B11 = 0; 
025DE:  MOVLB  D
025E0:  BCF    xA8.2
....................                         break;
025E2:  MOVLB  E
025E4:  BRA    2630
....................                         case 12:
....................                            Inputt.B12 = 0; 
025E6:  MOVLB  D
025E8:  BCF    xA8.3
....................                         break;
025EA:  MOVLB  E
025EC:  BRA    2630
....................                         case 13:
....................                            Inputt.B13 = 0; 
025EE:  MOVLB  D
025F0:  BCF    xA8.4
....................                         break;
025F2:  MOVLB  E
025F4:  BRA    2630
....................                         case 14:
....................                            Inputt.B14 = 0; 
025F6:  MOVLB  D
025F8:  BCF    xA8.5
....................                         break;
025FA:  MOVLB  E
025FC:  BRA    2630
....................                         case 15:
....................                            Inputt.B15 = 0; 
025FE:  MOVLB  D
02600:  BCF    xA8.6
....................                         break;
02602:  MOVLB  E
02604:  BRA    2630
....................                         case 16:
....................                             Inputt.B16 = 0; 
02606:  MOVLB  D
02608:  BCF    xA8.7
....................                          break; 
0260A:  MOVLB  E
0260C:  BRA    2630
....................                         case 17:
....................                            Inputt.B17 = 0; 
0260E:  MOVLB  D
02610:  BCF    xA9.0
....................                          break;
02612:  MOVLB  E
02614:  BRA    2630
....................                          case 18:
....................                            Inputt.B18 = 0; 
02616:  MOVLB  D
02618:  BCF    xA9.1
....................                         break;
0261A:  MOVLB  E
0261C:  BRA    2630
....................                         case 19:
....................                            Inputt.B19 = 0; 
0261E:  MOVLB  D
02620:  BCF    xA9.2
....................                         break;
02622:  MOVLB  E
02624:  BRA    2630
....................                         case 20:
....................                            Inputt.B20 = 0; 
02626:  MOVLB  D
02628:  BCF    xA9.3
....................                         break;
0262A:  MOVLB  E
0262C:  BRA    2630
0262E:  MOVLB  E
....................                                    
....................                      }                 
....................                    }
....................                }
02630:  BRA    264C
02632:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02634:  BCF    FD8.0
02636:  MOVLB  E
02638:  RLCF   x76,W
0263A:  CLRF   03
0263C:  ADDLW  E7
0263E:  MOVWF  FE9
02640:  MOVLW  0D
02642:  ADDWFC 03,W
02644:  MOVWF  FEA
02646:  CLRF   FEC
02648:  MOVF   FED,F
0264A:  CLRF   FEF
....................                }
....................              }
0264C:  BRA    27CE
0264E:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
02650:  MOVFF  E76,E78
02654:  MOVLW  0D
02656:  MOVLB  E
02658:  MOVWF  x7A
0265A:  MOVLW  DF
0265C:  MOVWF  x79
0265E:  MOVLB  0
02660:  RCALL  21FA
02662:  MOVF   01,W
02664:  ANDLW  01
02666:  SUBLW  01
02668:  BTFSS  FD8.2
0266A:  BRA    27B6
....................                {
....................                    ReleaseTime[i]++;
0266C:  BCF    FD8.0
0266E:  MOVLB  E
02670:  RLCF   x76,W
02672:  CLRF   03
02674:  ADDLW  E7
02676:  MOVWF  FE9
02678:  MOVLW  0D
0267A:  ADDWFC 03,W
0267C:  MOVWF  FEA
0267E:  MOVLW  01
02680:  ADDWF  FEE,F
02682:  BNC   2686
02684:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
02686:  BCF    FD8.0
02688:  RLCF   x76,W
0268A:  CLRF   03
0268C:  ADDLW  E7
0268E:  MOVWF  FE9
02690:  MOVLW  0D
02692:  ADDWFC 03,W
02694:  MOVWF  FEA
02696:  MOVFF  FEC,E78
0269A:  MOVF   FED,F
0269C:  MOVFF  FEF,E77
026A0:  BCF    FD8.0
026A2:  RLCF   x76,W
026A4:  CLRF   03
026A6:  ADDLW  23
026A8:  MOVWF  FE9
026AA:  MOVLW  0E
026AC:  ADDWFC 03,W
026AE:  MOVWF  FEA
026B0:  MOVFF  FEC,E7C
026B4:  MOVF   FED,F
026B6:  MOVFF  FEF,E7B
026BA:  CLRF   x7E
026BC:  MOVLW  4B
026BE:  MOVWF  x7D
026C0:  MOVLB  0
026C2:  RCALL  2230
026C4:  MOVFF  02,E7A
026C8:  MOVFF  01,E79
026CC:  MOVLW  0F
026CE:  MOVLB  E
026D0:  ADDWF  01,W
026D2:  MOVWF  01
026D4:  MOVLW  00
026D6:  ADDWFC 02,W
026D8:  MOVWF  03
026DA:  MOVF   03,W
026DC:  SUBWF  x78,W
026DE:  BTFSS  FD8.0
026E0:  BRA    27B2
026E2:  BNZ   26EA
026E4:  MOVF   01,W
026E6:  SUBWF  x77,W
026E8:  BNC   27B2
....................                    {   
....................                      ReleaseTime[i] = 1;
026EA:  BCF    FD8.0
026EC:  RLCF   x76,W
026EE:  CLRF   03
026F0:  ADDLW  E7
026F2:  MOVWF  FE9
026F4:  MOVLW  0D
026F6:  ADDWFC 03,W
026F8:  MOVWF  FEA
026FA:  CLRF   FEC
026FC:  MOVF   FED,F
026FE:  MOVLW  01
02700:  MOVWF  FEF
....................                      switch(i)
02702:  SUBWF  x76,W
02704:  ADDLW  EC
02706:  BC    27B2
02708:  ADDLW  14
0270A:  MOVLB  0
0270C:  GOTO   2E0A
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
02710:  MOVLB  D
02712:  BSF    xA7.0
....................                         break;
02714:  MOVLB  E
02716:  BRA    27B2
....................                         case 2:
....................                            Inputt.B2 = 1; 
02718:  MOVLB  D
0271A:  BSF    xA7.1
....................                         break;
0271C:  MOVLB  E
0271E:  BRA    27B2
....................                         case 3:
....................                            Inputt.B3 = 1; 
02720:  MOVLB  D
02722:  BSF    xA7.2
....................                         break;
02724:  MOVLB  E
02726:  BRA    27B2
....................                         case 4:
....................                            Inputt.B4 = 1; 
02728:  MOVLB  D
0272A:  BSF    xA7.3
....................                         break;
0272C:  MOVLB  E
0272E:  BRA    27B2
....................                         case 5:
....................                            Inputt.B5 = 1; 
02730:  MOVLB  D
02732:  BSF    xA7.4
....................                         break;
02734:  MOVLB  E
02736:  BRA    27B2
....................                         case 6:
....................                            Inputt.B6 = 1; 
02738:  MOVLB  D
0273A:  BSF    xA7.5
....................                         break;
0273C:  MOVLB  E
0273E:  BRA    27B2
....................                         case 7:
....................                            Inputt.B7 = 1; 
02740:  MOVLB  D
02742:  BSF    xA7.6
....................                          break;
02744:  MOVLB  E
02746:  BRA    27B2
....................                          case 8:
....................                            Inputt.B8 = 1; 
02748:  MOVLB  D
0274A:  BSF    xA7.7
....................                         break;
0274C:  MOVLB  E
0274E:  BRA    27B2
....................                         case 9:
....................                            Inputt.B9 = 1; 
02750:  MOVLB  D
02752:  BSF    xA8.0
....................                         break;
02754:  MOVLB  E
02756:  BRA    27B2
....................                         case 10:
....................                            Inputt.B10 = 1; 
02758:  MOVLB  D
0275A:  BSF    xA8.1
....................                         break;
0275C:  MOVLB  E
0275E:  BRA    27B2
....................                         case 11:
....................                            Inputt.B11 = 1; 
02760:  MOVLB  D
02762:  BSF    xA8.2
....................                         break;
02764:  MOVLB  E
02766:  BRA    27B2
....................                         case 12:
....................                            Inputt.B12 = 1; 
02768:  MOVLB  D
0276A:  BSF    xA8.3
....................                         break;
0276C:  MOVLB  E
0276E:  BRA    27B2
....................                         case 13:
....................                            Inputt.B13 = 1; 
02770:  MOVLB  D
02772:  BSF    xA8.4
....................                         break;
02774:  MOVLB  E
02776:  BRA    27B2
....................                         case 14:
....................                            Inputt.B14 = 1; 
02778:  MOVLB  D
0277A:  BSF    xA8.5
....................                         break;
0277C:  MOVLB  E
0277E:  BRA    27B2
....................                         case 15:
....................                            Inputt.B15 = 1; 
02780:  MOVLB  D
02782:  BSF    xA8.6
....................                         break;
02784:  MOVLB  E
02786:  BRA    27B2
....................                         case 16:
....................                             Inputt.B16 = 1;
02788:  MOVLB  D
0278A:  BSF    xA8.7
....................                          break;
0278C:  MOVLB  E
0278E:  BRA    27B2
....................                          
....................                          case 17:
....................                            Inputt.B17 = 1; 
02790:  MOVLB  D
02792:  BSF    xA9.0
....................                          break;
02794:  MOVLB  E
02796:  BRA    27B2
....................                          case 18:
....................                            Inputt.B18 = 1; 
02798:  MOVLB  D
0279A:  BSF    xA9.1
....................                         break;
0279C:  MOVLB  E
0279E:  BRA    27B2
....................                         case 19:
....................                            Inputt.B19 = 1; 
027A0:  MOVLB  D
027A2:  BSF    xA9.2
....................                         break;
027A4:  MOVLB  E
027A6:  BRA    27B2
....................                         case 20:
....................                            Inputt.B20 = 1; 
027A8:  MOVLB  D
027AA:  BSF    xA9.3
....................                         break;
027AC:  MOVLB  E
027AE:  BRA    27B2
027B0:  MOVLB  E
....................                                    
....................                      }                 
....................                    }
....................                }
027B2:  BRA    27CE
027B4:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
027B6:  BCF    FD8.0
027B8:  MOVLB  E
027BA:  RLCF   x76,W
027BC:  CLRF   03
027BE:  ADDLW  E7
027C0:  MOVWF  FE9
027C2:  MOVLW  0D
027C4:  ADDWFC 03,W
027C6:  MOVWF  FEA
027C8:  CLRF   FEC
027CA:  MOVF   FED,F
027CC:  CLRF   FEF
....................                }
....................              
....................              /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Input.B1 = 1; 
....................                       break;
....................                       case 2:
....................                          Input.B2 = 1; 
....................                       break;
....................                       case 3:
....................                          Input.B3 = 1; 
....................                       break;
....................                       case 4:
....................                          Input.B4 = 1; 
....................                       break;
....................                       case 5:
....................                          Input.B5 = 1; 
....................                       break;
....................                       case 6:
....................                          Input.B6 = 1; 
....................                       break;
....................                       case 7:
....................                          Input.B7 = 1; 
....................                       break;
....................                       case 8:
....................                          Input.B8 = 1; 
....................                       break;
....................                       case 9:
....................                          Input.B9 = 1; 
....................                       break;
....................                       case 10:
....................                          Input.B10 = 1; 
....................                       break;
....................                       case 11:
....................                          Input.B11 = 1; 
....................                       break;
....................                       case 12:
....................                          Input.B12 = 1; 
....................                       break;
....................                       case 13:
....................                          Input.B13 = 1; 
....................                       break;
....................                       case 14:
....................                          Input.B14 = 1; 
....................                       break;
....................                       case 15:
....................                          Input.B15 = 1; 
....................                       break;
....................                       case 16:
....................                          Input.B16 = 1; 
....................                       break;
....................                          
....................                   }
....................                   */
....................              }
....................           }
027CE:  BRA    2B04
....................           else if(FaultNCNO[i] ==NC)
027D0:  MOVFF  E76,E78
027D4:  MOVLW  0E
027D6:  MOVLB  E
027D8:  MOVWF  x7A
027DA:  MOVLW  5F
027DC:  MOVWF  x79
027DE:  MOVLB  0
027E0:  RCALL  21FA
027E2:  MOVF   01,W
027E4:  ANDLW  01
027E6:  BTFSS  FD8.2
027E8:  BRA    2B06
....................           {
....................              if(FaultNow[i]==1)
027EA:  MOVFF  E76,E78
027EE:  MOVLW  0D
027F0:  MOVLB  E
027F2:  MOVWF  x7A
027F4:  MOVLW  E3
027F6:  MOVWF  x79
027F8:  MOVLB  0
027FA:  RCALL  21FA
027FC:  MOVF   01,W
027FE:  ANDLW  01
02800:  SUBLW  01
02802:  BTFSS  FD8.2
02804:  BRA    2988
....................              {
....................                if(FaultAgo[i]==1)
02806:  MOVFF  E76,E78
0280A:  MOVLW  0D
0280C:  MOVLB  E
0280E:  MOVWF  x7A
02810:  MOVLW  DF
02812:  MOVWF  x79
02814:  MOVLB  0
02816:  RCALL  21FA
02818:  MOVF   01,W
0281A:  ANDLW  01
0281C:  SUBLW  01
0281E:  BTFSS  FD8.2
02820:  BRA    296C
....................                {
....................                    ReleaseTime[i]++;
02822:  BCF    FD8.0
02824:  MOVLB  E
02826:  RLCF   x76,W
02828:  CLRF   03
0282A:  ADDLW  E7
0282C:  MOVWF  FE9
0282E:  MOVLW  0D
02830:  ADDWFC 03,W
02832:  MOVWF  FEA
02834:  MOVLW  01
02836:  ADDWF  FEE,F
02838:  BNC   283C
0283A:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
0283C:  BCF    FD8.0
0283E:  RLCF   x76,W
02840:  CLRF   03
02842:  ADDLW  E7
02844:  MOVWF  FE9
02846:  MOVLW  0D
02848:  ADDWFC 03,W
0284A:  MOVWF  FEA
0284C:  MOVFF  FEC,E78
02850:  MOVF   FED,F
02852:  MOVFF  FEF,E77
02856:  BCF    FD8.0
02858:  RLCF   x76,W
0285A:  CLRF   03
0285C:  ADDLW  23
0285E:  MOVWF  FE9
02860:  MOVLW  0E
02862:  ADDWFC 03,W
02864:  MOVWF  FEA
02866:  MOVFF  FEC,E7C
0286A:  MOVF   FED,F
0286C:  MOVFF  FEF,E7B
02870:  CLRF   x7E
02872:  MOVLW  4B
02874:  MOVWF  x7D
02876:  MOVLB  0
02878:  RCALL  2230
0287A:  MOVFF  02,E7A
0287E:  MOVFF  01,E79
02882:  MOVLW  0F
02884:  MOVLB  E
02886:  ADDWF  01,W
02888:  MOVWF  01
0288A:  MOVLW  00
0288C:  ADDWFC 02,W
0288E:  MOVWF  03
02890:  MOVF   03,W
02892:  SUBWF  x78,W
02894:  BTFSS  FD8.0
02896:  BRA    2968
02898:  BNZ   28A0
0289A:  MOVF   01,W
0289C:  SUBWF  x77,W
0289E:  BNC   2968
....................                    {   
....................                      ReleaseTime[i] = 0;
028A0:  BCF    FD8.0
028A2:  RLCF   x76,W
028A4:  CLRF   03
028A6:  ADDLW  E7
028A8:  MOVWF  FE9
028AA:  MOVLW  0D
028AC:  ADDWFC 03,W
028AE:  MOVWF  FEA
028B0:  CLRF   FEC
028B2:  MOVF   FED,F
028B4:  CLRF   FEF
....................                      switch(i)
028B6:  MOVLW  01
028B8:  SUBWF  x76,W
028BA:  ADDLW  EC
028BC:  BC    2968
028BE:  ADDLW  14
028C0:  MOVLB  0
028C2:  GOTO   2E4C
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
028C6:  MOVLB  D
028C8:  BSF    xA7.0
....................                         break;
028CA:  MOVLB  E
028CC:  BRA    2968
....................                         case 2:
....................                            Inputt.B2 = 1; 
028CE:  MOVLB  D
028D0:  BSF    xA7.1
....................                         break;
028D2:  MOVLB  E
028D4:  BRA    2968
....................                         case 3:
....................                            Inputt.B3 = 1; 
028D6:  MOVLB  D
028D8:  BSF    xA7.2
....................                         break;
028DA:  MOVLB  E
028DC:  BRA    2968
....................                         case 4:
....................                            Inputt.B4 = 1; 
028DE:  MOVLB  D
028E0:  BSF    xA7.3
....................                         break;
028E2:  MOVLB  E
028E4:  BRA    2968
....................                         case 5:
....................                            Inputt.B5 = 1; 
028E6:  MOVLB  D
028E8:  BSF    xA7.4
....................                         break;
028EA:  MOVLB  E
028EC:  BRA    2968
....................                         case 6:
....................                            Inputt.B6 = 1; 
028EE:  MOVLB  D
028F0:  BSF    xA7.5
....................                         break;
028F2:  MOVLB  E
028F4:  BRA    2968
....................                         case 7:
....................                            Inputt.B7 = 1; 
028F6:  MOVLB  D
028F8:  BSF    xA7.6
....................                          break;
028FA:  MOVLB  E
028FC:  BRA    2968
....................                          case 8:
....................                            Inputt.B8 = 1; 
028FE:  MOVLB  D
02900:  BSF    xA7.7
....................                         break;
02902:  MOVLB  E
02904:  BRA    2968
....................                         case 9:
....................                            Inputt.B9 = 1; 
02906:  MOVLB  D
02908:  BSF    xA8.0
....................                         break;
0290A:  MOVLB  E
0290C:  BRA    2968
....................                         case 10:
....................                            Inputt.B10 = 1; 
0290E:  MOVLB  D
02910:  BSF    xA8.1
....................                         break;
02912:  MOVLB  E
02914:  BRA    2968
....................                         case 11:
....................                            Inputt.B11 = 1; 
02916:  MOVLB  D
02918:  BSF    xA8.2
....................                         break;
0291A:  MOVLB  E
0291C:  BRA    2968
....................                         case 12:
....................                            Inputt.B12 = 1; 
0291E:  MOVLB  D
02920:  BSF    xA8.3
....................                         break;
02922:  MOVLB  E
02924:  BRA    2968
....................                         case 13:
....................                            Inputt.B13 = 1; 
02926:  MOVLB  D
02928:  BSF    xA8.4
....................                         break;
0292A:  MOVLB  E
0292C:  BRA    2968
....................                         case 14:
....................                            Inputt.B14 = 1; 
0292E:  MOVLB  D
02930:  BSF    xA8.5
....................                         break;
02932:  MOVLB  E
02934:  BRA    2968
....................                         case 15:
....................                            Inputt.B15 = 1; 
02936:  MOVLB  D
02938:  BSF    xA8.6
....................                         break;
0293A:  MOVLB  E
0293C:  BRA    2968
....................                         case 16:
....................                             Inputt.B16 = 1; 
0293E:  MOVLB  D
02940:  BSF    xA8.7
....................                          break;
02942:  MOVLB  E
02944:  BRA    2968
....................                          
....................                          case 17:
....................                            Inputt.B17 = 1; 
02946:  MOVLB  D
02948:  BSF    xA9.0
....................                          break;
0294A:  MOVLB  E
0294C:  BRA    2968
....................                          case 18:
....................                            Inputt.B18 = 1; 
0294E:  MOVLB  D
02950:  BSF    xA9.1
....................                         break;
02952:  MOVLB  E
02954:  BRA    2968
....................                         case 19:
....................                            Inputt.B19 = 1; 
02956:  MOVLB  D
02958:  BSF    xA9.2
....................                         break;
0295A:  MOVLB  E
0295C:  BRA    2968
....................                         case 20:
....................                            Inputt.B20 = 1; 
0295E:  MOVLB  D
02960:  BSF    xA9.3
....................                         break;
02962:  MOVLB  E
02964:  BRA    2968
02966:  MOVLB  E
....................                                                                    
....................                      }                 
....................                   }
....................                }
02968:  BRA    2984
0296A:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
0296C:  BCF    FD8.0
0296E:  MOVLB  E
02970:  RLCF   x76,W
02972:  CLRF   03
02974:  ADDLW  E7
02976:  MOVWF  FE9
02978:  MOVLW  0D
0297A:  ADDWFC 03,W
0297C:  MOVWF  FEA
0297E:  CLRF   FEC
02980:  MOVF   FED,F
02982:  CLRF   FEF
....................                }
....................              }
02984:  BRA    2B04
02986:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
02988:  MOVFF  E76,E78
0298C:  MOVLW  0D
0298E:  MOVLB  E
02990:  MOVWF  x7A
02992:  MOVLW  DF
02994:  MOVWF  x79
02996:  MOVLB  0
02998:  RCALL  21FA
0299A:  MOVF   01,W
0299C:  ANDLW  01
0299E:  BTFSS  FD8.2
029A0:  BRA    2AEC
....................                {
....................                    ReleaseTime[i]++;
029A2:  BCF    FD8.0
029A4:  MOVLB  E
029A6:  RLCF   x76,W
029A8:  CLRF   03
029AA:  ADDLW  E7
029AC:  MOVWF  FE9
029AE:  MOVLW  0D
029B0:  ADDWFC 03,W
029B2:  MOVWF  FEA
029B4:  MOVLW  01
029B6:  ADDWF  FEE,F
029B8:  BNC   29BC
029BA:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
029BC:  BCF    FD8.0
029BE:  RLCF   x76,W
029C0:  CLRF   03
029C2:  ADDLW  E7
029C4:  MOVWF  FE9
029C6:  MOVLW  0D
029C8:  ADDWFC 03,W
029CA:  MOVWF  FEA
029CC:  MOVFF  FEC,E78
029D0:  MOVF   FED,F
029D2:  MOVFF  FEF,E77
029D6:  BCF    FD8.0
029D8:  RLCF   x76,W
029DA:  CLRF   03
029DC:  ADDLW  23
029DE:  MOVWF  FE9
029E0:  MOVLW  0E
029E2:  ADDWFC 03,W
029E4:  MOVWF  FEA
029E6:  MOVFF  FEC,E7C
029EA:  MOVF   FED,F
029EC:  MOVFF  FEF,E7B
029F0:  CLRF   x7E
029F2:  MOVLW  4B
029F4:  MOVWF  x7D
029F6:  MOVLB  0
029F8:  RCALL  2230
029FA:  MOVFF  02,E7A
029FE:  MOVFF  01,E79
02A02:  MOVLW  0F
02A04:  MOVLB  E
02A06:  ADDWF  01,W
02A08:  MOVWF  01
02A0A:  MOVLW  00
02A0C:  ADDWFC 02,W
02A0E:  MOVWF  03
02A10:  MOVF   03,W
02A12:  SUBWF  x78,W
02A14:  BTFSS  FD8.0
02A16:  BRA    2AE8
02A18:  BNZ   2A20
02A1A:  MOVF   01,W
02A1C:  SUBWF  x77,W
02A1E:  BNC   2AE8
....................                    {   
....................                      ReleaseTime[i] = 0;
02A20:  BCF    FD8.0
02A22:  RLCF   x76,W
02A24:  CLRF   03
02A26:  ADDLW  E7
02A28:  MOVWF  FE9
02A2A:  MOVLW  0D
02A2C:  ADDWFC 03,W
02A2E:  MOVWF  FEA
02A30:  CLRF   FEC
02A32:  MOVF   FED,F
02A34:  CLRF   FEF
....................                      switch(i)
02A36:  MOVLW  01
02A38:  SUBWF  x76,W
02A3A:  ADDLW  EC
02A3C:  BC    2AE8
02A3E:  ADDLW  14
02A40:  MOVLB  0
02A42:  GOTO   2E8E
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
02A46:  MOVLB  D
02A48:  BCF    xA7.0
....................                         break;
02A4A:  MOVLB  E
02A4C:  BRA    2AE8
....................                         case 2:
....................                            Inputt.B2 = 0; 
02A4E:  MOVLB  D
02A50:  BCF    xA7.1
....................                         break;
02A52:  MOVLB  E
02A54:  BRA    2AE8
....................                         case 3:
....................                            Inputt.B3 = 0; 
02A56:  MOVLB  D
02A58:  BCF    xA7.2
....................                         break;
02A5A:  MOVLB  E
02A5C:  BRA    2AE8
....................                         case 4:
....................                            Inputt.B4 = 0; 
02A5E:  MOVLB  D
02A60:  BCF    xA7.3
....................                         break;
02A62:  MOVLB  E
02A64:  BRA    2AE8
....................                         case 5:
....................                            Inputt.B5 = 0; 
02A66:  MOVLB  D
02A68:  BCF    xA7.4
....................                         break;
02A6A:  MOVLB  E
02A6C:  BRA    2AE8
....................                         case 6:
....................                            Inputt.B6 = 0; 
02A6E:  MOVLB  D
02A70:  BCF    xA7.5
....................                         break;
02A72:  MOVLB  E
02A74:  BRA    2AE8
....................                         case 7:
....................                            Inputt.B7 = 0; 
02A76:  MOVLB  D
02A78:  BCF    xA7.6
....................                          break;
02A7A:  MOVLB  E
02A7C:  BRA    2AE8
....................                          case 8:
....................                            Inputt.B8 = 0; 
02A7E:  MOVLB  D
02A80:  BCF    xA7.7
....................                         break;
02A82:  MOVLB  E
02A84:  BRA    2AE8
....................                         case 9:
....................                            Inputt.B9 = 0; 
02A86:  MOVLB  D
02A88:  BCF    xA8.0
....................                         break;
02A8A:  MOVLB  E
02A8C:  BRA    2AE8
....................                         case 10:
....................                            Inputt.B10 = 0; 
02A8E:  MOVLB  D
02A90:  BCF    xA8.1
....................                         break;
02A92:  MOVLB  E
02A94:  BRA    2AE8
....................                         case 11:
....................                            Inputt.B11 = 0; 
02A96:  MOVLB  D
02A98:  BCF    xA8.2
....................                         break;
02A9A:  MOVLB  E
02A9C:  BRA    2AE8
....................                         case 12:
....................                            Inputt.B12 = 0; 
02A9E:  MOVLB  D
02AA0:  BCF    xA8.3
....................                         break;
02AA2:  MOVLB  E
02AA4:  BRA    2AE8
....................                         case 13:
....................                            Inputt.B13 = 0; 
02AA6:  MOVLB  D
02AA8:  BCF    xA8.4
....................                         break;
02AAA:  MOVLB  E
02AAC:  BRA    2AE8
....................                         case 14:
....................                            Inputt.B14 = 0; 
02AAE:  MOVLB  D
02AB0:  BCF    xA8.5
....................                         break;
02AB2:  MOVLB  E
02AB4:  BRA    2AE8
....................                         case 15:
....................                            Inputt.B15 = 0; 
02AB6:  MOVLB  D
02AB8:  BCF    xA8.6
....................                         break;
02ABA:  MOVLB  E
02ABC:  BRA    2AE8
....................                         case 16:
....................                             Inputt.B16 = 0;
02ABE:  MOVLB  D
02AC0:  BCF    xA8.7
....................                          break;
02AC2:  MOVLB  E
02AC4:  BRA    2AE8
....................                          
....................                          case 17:
....................                            Inputt.B17 = 0; 
02AC6:  MOVLB  D
02AC8:  BCF    xA9.0
....................                          break;
02ACA:  MOVLB  E
02ACC:  BRA    2AE8
....................                          case 18:
....................                            Inputt.B18 = 0; 
02ACE:  MOVLB  D
02AD0:  BCF    xA9.1
....................                         break;
02AD2:  MOVLB  E
02AD4:  BRA    2AE8
....................                         case 19:
....................                            Inputt.B19 = 0; 
02AD6:  MOVLB  D
02AD8:  BCF    xA9.2
....................                         break;
02ADA:  MOVLB  E
02ADC:  BRA    2AE8
....................                         case 20:
....................                            Inputt.B20 = 0; 
02ADE:  MOVLB  D
02AE0:  BCF    xA9.3
....................                         break;
02AE2:  MOVLB  E
02AE4:  BRA    2AE8
02AE6:  MOVLB  E
....................                                    
....................                      }                 
....................                    }
....................                }
02AE8:  BRA    2B04
02AEA:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02AEC:  BCF    FD8.0
02AEE:  MOVLB  E
02AF0:  RLCF   x76,W
02AF2:  CLRF   03
02AF4:  ADDLW  E7
02AF6:  MOVWF  FE9
02AF8:  MOVLW  0D
02AFA:  ADDWFC 03,W
02AFC:  MOVWF  FEA
02AFE:  CLRF   FEC
02B00:  MOVF   FED,F
02B02:  CLRF   FEF
02B04:  MOVLB  0
....................                }
.................... 
....................              }
....................           }
02B06:  MOVLB  E
02B08:  INCF   x76,F
02B0A:  BRA    2494
....................       }
....................       
....................       
....................       StoreReleaseFault();
02B0C:  MOVLB  0
02B0E:  GOTO   2294
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       
....................       ///////////////////////--Edit--///////////////////
....................            
....................       Input11_18 = 0x00;
02B12:  CLRF   48
....................       Input11_18 = Input11_18 | ~Inputt.B18;
02B14:  MOVLW  00
02B16:  MOVLB  D
02B18:  BTFSS  xA9.1
02B1A:  MOVLW  01
02B1C:  IORWF  48,F
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B17;
02B1E:  BCF    FD8.0
02B20:  RLCF   48,W
02B22:  MOVLB  E
02B24:  MOVWF  x77
02B26:  MOVLW  00
02B28:  MOVLB  D
02B2A:  BTFSS  xA9.0
02B2C:  MOVLW  01
02B2E:  MOVLB  E
02B30:  IORWF  x77,W
02B32:  MOVWF  48
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
02B34:  BCF    FD8.0
02B36:  RLCF   48,W
02B38:  MOVWF  x77
02B3A:  MOVLW  00
02B3C:  MOVLB  D
02B3E:  BTFSS  xA8.7
02B40:  MOVLW  01
02B42:  MOVLB  E
02B44:  IORWF  x77,W
02B46:  MOVWF  48
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B15;
02B48:  BCF    FD8.0
02B4A:  RLCF   48,W
02B4C:  MOVWF  x77
02B4E:  MOVLW  00
02B50:  MOVLB  D
02B52:  BTFSS  xA8.6
02B54:  MOVLW  01
02B56:  MOVLB  E
02B58:  IORWF  x77,W
02B5A:  MOVWF  48
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B14;
02B5C:  BCF    FD8.0
02B5E:  RLCF   48,W
02B60:  MOVWF  x77
02B62:  MOVLW  00
02B64:  MOVLB  D
02B66:  BTFSS  xA8.5
02B68:  MOVLW  01
02B6A:  MOVLB  E
02B6C:  IORWF  x77,W
02B6E:  MOVWF  48
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B13;
02B70:  BCF    FD8.0
02B72:  RLCF   48,W
02B74:  MOVWF  x77
02B76:  MOVLW  00
02B78:  MOVLB  D
02B7A:  BTFSS  xA8.4
02B7C:  MOVLW  01
02B7E:  MOVLB  E
02B80:  IORWF  x77,W
02B82:  MOVWF  48
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B12;
02B84:  BCF    FD8.0
02B86:  RLCF   48,W
02B88:  MOVWF  x77
02B8A:  MOVLW  00
02B8C:  MOVLB  D
02B8E:  BTFSS  xA8.3
02B90:  MOVLW  01
02B92:  MOVLB  E
02B94:  IORWF  x77,W
02B96:  MOVWF  48
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B11;
02B98:  BCF    FD8.0
02B9A:  RLCF   48,W
02B9C:  MOVWF  x77
02B9E:  MOVLW  00
02BA0:  MOVLB  D
02BA2:  BTFSS  xA8.2
02BA4:  MOVLW  01
02BA6:  MOVLB  E
02BA8:  IORWF  x77,W
02BAA:  MOVWF  48
....................       
....................      
....................    
....................       Input19_20 = 0x00;
02BAC:  CLRF   49
....................       Input19_20 = Input19_20 | ~Inputt.B20;
02BAE:  MOVLW  00
02BB0:  MOVLB  D
02BB2:  BTFSS  xA9.3
02BB4:  MOVLW  01
02BB6:  IORWF  49,F
....................       Input19_20 = (Input19_20 << 1) | ~Inputt.B19;
02BB8:  BCF    FD8.0
02BBA:  RLCF   49,W
02BBC:  MOVLB  E
02BBE:  MOVWF  x77
02BC0:  MOVLW  00
02BC2:  MOVLB  D
02BC4:  BTFSS  xA9.2
02BC6:  MOVLW  01
02BC8:  MOVLB  E
02BCA:  IORWF  x77,W
02BCC:  MOVWF  49
....................       //}
....................    
....................       Input1_8 = 0x00;
02BCE:  CLRF   46
....................       Input1_8 = Input1_8 | ~Inputt.B8;
02BD0:  MOVLW  00
02BD2:  MOVLB  D
02BD4:  BTFSS  xA7.7
02BD6:  MOVLW  01
02BD8:  IORWF  46,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
02BDA:  BCF    FD8.0
02BDC:  RLCF   46,W
02BDE:  MOVLB  E
02BE0:  MOVWF  x77
02BE2:  MOVLW  00
02BE4:  MOVLB  D
02BE6:  BTFSS  xA7.6
02BE8:  MOVLW  01
02BEA:  MOVLB  E
02BEC:  IORWF  x77,W
02BEE:  MOVWF  46
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
02BF0:  BCF    FD8.0
02BF2:  RLCF   46,W
02BF4:  MOVWF  x77
02BF6:  MOVLW  00
02BF8:  MOVLB  D
02BFA:  BTFSS  xA7.5
02BFC:  MOVLW  01
02BFE:  MOVLB  E
02C00:  IORWF  x77,W
02C02:  MOVWF  46
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
02C04:  BCF    FD8.0
02C06:  RLCF   46,W
02C08:  MOVWF  x77
02C0A:  MOVLW  00
02C0C:  MOVLB  D
02C0E:  BTFSS  xA7.4
02C10:  MOVLW  01
02C12:  MOVLB  E
02C14:  IORWF  x77,W
02C16:  MOVWF  46
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
02C18:  BCF    FD8.0
02C1A:  RLCF   46,W
02C1C:  MOVWF  x77
02C1E:  MOVLW  00
02C20:  MOVLB  D
02C22:  BTFSS  xA7.3
02C24:  MOVLW  01
02C26:  MOVLB  E
02C28:  IORWF  x77,W
02C2A:  MOVWF  46
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
02C2C:  BCF    FD8.0
02C2E:  RLCF   46,W
02C30:  MOVWF  x77
02C32:  MOVLW  00
02C34:  MOVLB  D
02C36:  BTFSS  xA7.2
02C38:  MOVLW  01
02C3A:  MOVLB  E
02C3C:  IORWF  x77,W
02C3E:  MOVWF  46
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
02C40:  BCF    FD8.0
02C42:  RLCF   46,W
02C44:  MOVWF  x77
02C46:  MOVLW  00
02C48:  MOVLB  D
02C4A:  BTFSS  xA7.1
02C4C:  MOVLW  01
02C4E:  MOVLB  E
02C50:  IORWF  x77,W
02C52:  MOVWF  46
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
02C54:  BCF    FD8.0
02C56:  RLCF   46,W
02C58:  MOVWF  x77
02C5A:  MOVLW  00
02C5C:  MOVLB  D
02C5E:  BTFSS  xA7.0
02C60:  MOVLW  01
02C62:  MOVLB  E
02C64:  IORWF  x77,W
02C66:  MOVWF  46
....................       
....................       Input9_16 = 0x00;
02C68:  CLRF   4A
....................       Input9_16 = Input9_16 | ~Inputt.B16;
02C6A:  MOVLW  00
02C6C:  MOVLB  D
02C6E:  BTFSS  xA8.7
02C70:  MOVLW  01
02C72:  IORWF  4A,F
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B15;
02C74:  BCF    FD8.0
02C76:  RLCF   4A,W
02C78:  MOVLB  E
02C7A:  MOVWF  x77
02C7C:  MOVLW  00
02C7E:  MOVLB  D
02C80:  BTFSS  xA8.6
02C82:  MOVLW  01
02C84:  MOVLB  E
02C86:  IORWF  x77,W
02C88:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B14;
02C8A:  BCF    FD8.0
02C8C:  RLCF   4A,W
02C8E:  MOVWF  x77
02C90:  MOVLW  00
02C92:  MOVLB  D
02C94:  BTFSS  xA8.5
02C96:  MOVLW  01
02C98:  MOVLB  E
02C9A:  IORWF  x77,W
02C9C:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B13;
02C9E:  BCF    FD8.0
02CA0:  RLCF   4A,W
02CA2:  MOVWF  x77
02CA4:  MOVLW  00
02CA6:  MOVLB  D
02CA8:  BTFSS  xA8.4
02CAA:  MOVLW  01
02CAC:  MOVLB  E
02CAE:  IORWF  x77,W
02CB0:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B12;
02CB2:  BCF    FD8.0
02CB4:  RLCF   4A,W
02CB6:  MOVWF  x77
02CB8:  MOVLW  00
02CBA:  MOVLB  D
02CBC:  BTFSS  xA8.3
02CBE:  MOVLW  01
02CC0:  MOVLB  E
02CC2:  IORWF  x77,W
02CC4:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B11;
02CC6:  BCF    FD8.0
02CC8:  RLCF   4A,W
02CCA:  MOVWF  x77
02CCC:  MOVLW  00
02CCE:  MOVLB  D
02CD0:  BTFSS  xA8.2
02CD2:  MOVLW  01
02CD4:  MOVLB  E
02CD6:  IORWF  x77,W
02CD8:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B10;
02CDA:  BCF    FD8.0
02CDC:  RLCF   4A,W
02CDE:  MOVWF  x77
02CE0:  MOVLW  00
02CE2:  MOVLB  D
02CE4:  BTFSS  xA8.1
02CE6:  MOVLW  01
02CE8:  MOVLB  E
02CEA:  IORWF  x77,W
02CEC:  MOVWF  4A
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B9;
02CEE:  BCF    FD8.0
02CF0:  RLCF   4A,W
02CF2:  MOVWF  x77
02CF4:  MOVLW  00
02CF6:  MOVLB  D
02CF8:  BTFSS  xA8.0
02CFA:  MOVLW  01
02CFC:  MOVLB  E
02CFE:  IORWF  x77,W
02D00:  MOVWF  4A
....................       
....................       Input17_24 = 0x00;
02D02:  CLRF   4B
....................       Input17_24 = Input17_24 | ~Inputt.B24;
02D04:  MOVLW  00
02D06:  MOVLB  D
02D08:  BTFSS  xA9.7
02D0A:  MOVLW  01
02D0C:  IORWF  4B,F
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B23;
02D0E:  BCF    FD8.0
02D10:  RLCF   4B,W
02D12:  MOVLB  E
02D14:  MOVWF  x77
02D16:  MOVLW  00
02D18:  MOVLB  D
02D1A:  BTFSS  xA9.6
02D1C:  MOVLW  01
02D1E:  MOVLB  E
02D20:  IORWF  x77,W
02D22:  MOVWF  4B
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B22;
02D24:  BCF    FD8.0
02D26:  RLCF   4B,W
02D28:  MOVWF  x77
02D2A:  MOVLW  00
02D2C:  MOVLB  D
02D2E:  BTFSS  xA9.5
02D30:  MOVLW  01
02D32:  MOVLB  E
02D34:  IORWF  x77,W
02D36:  MOVWF  4B
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B21;
02D38:  BCF    FD8.0
02D3A:  RLCF   4B,W
02D3C:  MOVWF  x77
02D3E:  MOVLW  00
02D40:  MOVLB  D
02D42:  BTFSS  xA9.4
02D44:  MOVLW  01
02D46:  MOVLB  E
02D48:  IORWF  x77,W
02D4A:  MOVWF  4B
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B20;
02D4C:  BCF    FD8.0
02D4E:  RLCF   4B,W
02D50:  MOVWF  x77
02D52:  MOVLW  00
02D54:  MOVLB  D
02D56:  BTFSS  xA9.3
02D58:  MOVLW  01
02D5A:  MOVLB  E
02D5C:  IORWF  x77,W
02D5E:  MOVWF  4B
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B19;
02D60:  BCF    FD8.0
02D62:  RLCF   4B,W
02D64:  MOVWF  x77
02D66:  MOVLW  00
02D68:  MOVLB  D
02D6A:  BTFSS  xA9.2
02D6C:  MOVLW  01
02D6E:  MOVLB  E
02D70:  IORWF  x77,W
02D72:  MOVWF  4B
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B18;
02D74:  BCF    FD8.0
02D76:  RLCF   4B,W
02D78:  MOVWF  x77
02D7A:  MOVLW  00
02D7C:  MOVLB  D
02D7E:  BTFSS  xA9.1
02D80:  MOVLW  01
02D82:  MOVLB  E
02D84:  IORWF  x77,W
02D86:  MOVWF  4B
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B17;
02D88:  BCF    FD8.0
02D8A:  RLCF   4B,W
02D8C:  MOVWF  x77
02D8E:  MOVLW  00
02D90:  MOVLB  D
02D92:  BTFSS  xA9.0
02D94:  MOVLW  01
02D96:  MOVLB  E
02D98:  IORWF  x77,W
02D9A:  MOVWF  4B
....................     
....................    
.................... 
....................       Input9_10 = 0x00;
02D9C:  CLRF   47
....................       Input9_10 = Input9_10 | ~Inputt.B10;
02D9E:  MOVLW  00
02DA0:  MOVLB  D
02DA2:  BTFSS  xA8.1
02DA4:  MOVLW  01
02DA6:  IORWF  47,F
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
02DA8:  BCF    FD8.0
02DAA:  RLCF   47,W
02DAC:  MOVLB  E
02DAE:  MOVWF  x77
02DB0:  MOVLW  00
02DB2:  MOVLB  D
02DB4:  BTFSS  xA8.0
02DB6:  MOVLW  01
02DB8:  MOVLB  E
02DBA:  IORWF  x77,W
02DBC:  MOVWF  47
....................       
....................       Input17_24 &= 0x0F;
02DBE:  MOVLW  0F
02DC0:  ANDWF  4B,F
....................       Input25_32 = 0x00;
02DC2:  CLRF   4C
02DC4:  MOVLB  0
02DC6:  RETURN 0
....................       //+++++++++++++++++++++++++++++++++++++++++++
.................... 
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Inputt type 1-8
*
00780:  MOVFF  FF2,E77
00784:  BCF    FF2.7
00786:  CLRF   FAA
00788:  MOVLW  01
0078A:  MOVWF  FA9
0078C:  BCF    FA6.6
0078E:  BCF    FA6.7
00790:  BSF    FA6.0
00792:  MOVF   FA8,W
00794:  MOVLB  E
00796:  BTFSC  x77.7
00798:  BSF    FF2.7
0079A:  MOVWF  36
....................    InputType1_8 = EEpDat;
0079C:  MOVFF  36,37
.................... 
....................    InputType.B1 = EEpDat;
007A0:  MOVLB  D
007A2:  BCF    xAF.0
007A4:  BTFSC  36.0
007A6:  BSF    xAF.0
....................    InputType.B2 = EEpDat >> 1;
007A8:  BCF    FD8.0
007AA:  RRCF   36,W
007AC:  BCF    xAF.1
007AE:  BTFSC  FE8.0
007B0:  BSF    xAF.1
....................    InputType.B3 = EEpDat >> 2;
007B2:  RRCF   36,W
007B4:  MOVWF  00
007B6:  RRCF   00,F
007B8:  MOVLW  3F
007BA:  ANDWF  00,F
007BC:  BCF    xAF.2
007BE:  BTFSC  00.0
007C0:  BSF    xAF.2
....................    InputType.B4 = EEpDat >> 3;
007C2:  RRCF   36,W
007C4:  MOVWF  00
007C6:  RRCF   00,F
007C8:  RRCF   00,F
007CA:  MOVLW  1F
007CC:  ANDWF  00,F
007CE:  BCF    xAF.3
007D0:  BTFSC  00.0
007D2:  BSF    xAF.3
....................    InputType.B5 = EEpDat >> 4;
007D4:  SWAPF  36,W
007D6:  MOVWF  00
007D8:  MOVLW  0F
007DA:  ANDWF  00,F
007DC:  BCF    xAF.4
007DE:  BTFSC  00.0
007E0:  BSF    xAF.4
....................    InputType.B6 = EEpDat >> 5;
007E2:  SWAPF  36,W
007E4:  MOVWF  00
007E6:  RRCF   00,F
007E8:  MOVLW  07
007EA:  ANDWF  00,F
007EC:  BCF    xAF.5
007EE:  BTFSC  00.0
007F0:  BSF    xAF.5
....................    InputType.B7 = EEpDat >> 6;
007F2:  SWAPF  36,W
007F4:  MOVWF  00
007F6:  RRCF   00,F
007F8:  RRCF   00,F
007FA:  MOVLW  03
007FC:  ANDWF  00,F
007FE:  BCF    xAF.6
00800:  BTFSC  00.0
00802:  BSF    xAF.6
....................    InputType.B8 = EEpDat >> 7;
00804:  CLRF   00
00806:  BTFSC  36.7
00808:  BSF    00.0
0080A:  BCF    xAF.7
0080C:  BTFSC  00.0
0080E:  BSF    xAF.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Inputt type 9-16
00810:  MOVFF  FF2,E77
00814:  BCF    FF2.7
00816:  CLRF   FAA
00818:  MOVLW  02
0081A:  MOVWF  FA9
0081C:  BCF    FA6.6
0081E:  BCF    FA6.7
00820:  BSF    FA6.0
00822:  MOVF   FA8,W
00824:  MOVLB  E
00826:  BTFSC  x77.7
00828:  BSF    FF2.7
0082A:  MOVWF  36
....................    InputType9_16 = EEpDat;
0082C:  MOVFF  36,38
.................... 
....................    InputType.B9 = EEpDat;
00830:  MOVLB  D
00832:  BCF    xB0.0
00834:  BTFSC  36.0
00836:  BSF    xB0.0
....................    InputType.B10 = EEpDat >> 1;
00838:  BCF    FD8.0
0083A:  RRCF   36,W
0083C:  BCF    xB0.1
0083E:  BTFSC  FE8.0
00840:  BSF    xB0.1
....................    InputType.B11 = EEpDat >> 2;
00842:  RRCF   36,W
00844:  MOVWF  00
00846:  RRCF   00,F
00848:  MOVLW  3F
0084A:  ANDWF  00,F
0084C:  BCF    xB0.2
0084E:  BTFSC  00.0
00850:  BSF    xB0.2
....................    InputType.B12 = EEpDat >> 3;
00852:  RRCF   36,W
00854:  MOVWF  00
00856:  RRCF   00,F
00858:  RRCF   00,F
0085A:  MOVLW  1F
0085C:  ANDWF  00,F
0085E:  BCF    xB0.3
00860:  BTFSC  00.0
00862:  BSF    xB0.3
....................    InputType.B13 = EEpDat >> 4;
00864:  SWAPF  36,W
00866:  MOVWF  00
00868:  MOVLW  0F
0086A:  ANDWF  00,F
0086C:  BCF    xB0.4
0086E:  BTFSC  00.0
00870:  BSF    xB0.4
....................    InputType.B14 = EEpDat >> 5;
00872:  SWAPF  36,W
00874:  MOVWF  00
00876:  RRCF   00,F
00878:  MOVLW  07
0087A:  ANDWF  00,F
0087C:  BCF    xB0.5
0087E:  BTFSC  00.0
00880:  BSF    xB0.5
....................    InputType.B15 = EEpDat >> 6;
00882:  SWAPF  36,W
00884:  MOVWF  00
00886:  RRCF   00,F
00888:  RRCF   00,F
0088A:  MOVLW  03
0088C:  ANDWF  00,F
0088E:  BCF    xB0.6
00890:  BTFSC  00.0
00892:  BSF    xB0.6
....................    InputType.B16 = EEpDat >> 7;
00894:  CLRF   00
00896:  BTFSC  36.7
00898:  BSF    00.0
0089A:  BCF    xB0.7
0089C:  BTFSC  00.0
0089E:  BSF    xB0.7
....................    
....................    EEpDat = read_eeprom(0x03);   // Inputt type 9-16
008A0:  MOVFF  FF2,E77
008A4:  BCF    FF2.7
008A6:  CLRF   FAA
008A8:  MOVLW  03
008AA:  MOVWF  FA9
008AC:  BCF    FA6.6
008AE:  BCF    FA6.7
008B0:  BSF    FA6.0
008B2:  MOVF   FA8,W
008B4:  MOVLB  E
008B6:  BTFSC  x77.7
008B8:  BSF    FF2.7
008BA:  MOVWF  36
....................    InputType17_24 = EEpDat;
008BC:  MOVFF  36,39
.................... 
....................    InputType.B17 = EEpDat;
008C0:  MOVLB  D
008C2:  BCF    xB1.0
008C4:  BTFSC  36.0
008C6:  BSF    xB1.0
....................    InputType.B18 = EEpDat >> 1;
008C8:  BCF    FD8.0
008CA:  RRCF   36,W
008CC:  BCF    xB1.1
008CE:  BTFSC  FE8.0
008D0:  BSF    xB1.1
....................    InputType.B19 = EEpDat >> 2;
008D2:  RRCF   36,W
008D4:  MOVWF  00
008D6:  RRCF   00,F
008D8:  MOVLW  3F
008DA:  ANDWF  00,F
008DC:  BCF    xB1.2
008DE:  BTFSC  00.0
008E0:  BSF    xB1.2
....................    InputType.B20 = EEpDat >> 3;
008E2:  RRCF   36,W
008E4:  MOVWF  00
008E6:  RRCF   00,F
008E8:  RRCF   00,F
008EA:  MOVLW  1F
008EC:  ANDWF  00,F
008EE:  BCF    xB1.3
008F0:  BTFSC  00.0
008F2:  BSF    xB1.3
....................    InputType.B21 = EEpDat >> 4;
008F4:  SWAPF  36,W
008F6:  MOVWF  00
008F8:  MOVLW  0F
008FA:  ANDWF  00,F
008FC:  BCF    xB1.4
008FE:  BTFSC  00.0
00900:  BSF    xB1.4
....................    InputType.B22 = EEpDat >> 5;
00902:  SWAPF  36,W
00904:  MOVWF  00
00906:  RRCF   00,F
00908:  MOVLW  07
0090A:  ANDWF  00,F
0090C:  BCF    xB1.5
0090E:  BTFSC  00.0
00910:  BSF    xB1.5
....................    InputType.B23 = EEpDat >> 6;
00912:  SWAPF  36,W
00914:  MOVWF  00
00916:  RRCF   00,F
00918:  RRCF   00,F
0091A:  MOVLW  03
0091C:  ANDWF  00,F
0091E:  BCF    xB1.6
00920:  BTFSC  00.0
00922:  BSF    xB1.6
....................    InputType.B24 = EEpDat >> 7;
00924:  CLRF   00
00926:  BTFSC  36.7
00928:  BSF    00.0
0092A:  BCF    xB1.7
0092C:  BTFSC  00.0
0092E:  BSF    xB1.7
....................    
....................    FaultNCNO[1] = InputType.B1;
00930:  MOVLB  E
00932:  BCF    x5F.1
00934:  MOVLB  D
00936:  BTFSS  xAF.0
00938:  BRA    0940
0093A:  MOVLB  E
0093C:  BSF    x5F.1
0093E:  MOVLB  D
....................    FaultNCNO[2] = InputType.B2;
00940:  MOVLB  E
00942:  BCF    x5F.2
00944:  MOVLB  D
00946:  BTFSS  xAF.1
00948:  BRA    0950
0094A:  MOVLB  E
0094C:  BSF    x5F.2
0094E:  MOVLB  D
....................    FaultNCNO[3] = InputType.B3;
00950:  MOVLB  E
00952:  BCF    x5F.3
00954:  MOVLB  D
00956:  BTFSS  xAF.2
00958:  BRA    0960
0095A:  MOVLB  E
0095C:  BSF    x5F.3
0095E:  MOVLB  D
....................    FaultNCNO[4] = InputType.B4;
00960:  MOVLB  E
00962:  BCF    x5F.4
00964:  MOVLB  D
00966:  BTFSS  xAF.3
00968:  BRA    0970
0096A:  MOVLB  E
0096C:  BSF    x5F.4
0096E:  MOVLB  D
....................    FaultNCNO[5] = InputType.B5;
00970:  MOVLB  E
00972:  BCF    x5F.5
00974:  MOVLB  D
00976:  BTFSS  xAF.4
00978:  BRA    0980
0097A:  MOVLB  E
0097C:  BSF    x5F.5
0097E:  MOVLB  D
....................    FaultNCNO[6] = InputType.B6;
00980:  MOVLB  E
00982:  BCF    x5F.6
00984:  MOVLB  D
00986:  BTFSS  xAF.5
00988:  BRA    0990
0098A:  MOVLB  E
0098C:  BSF    x5F.6
0098E:  MOVLB  D
....................    FaultNCNO[7] = InputType.B7;
00990:  MOVLB  E
00992:  BCF    x5F.7
00994:  MOVLB  D
00996:  BTFSS  xAF.6
00998:  BRA    09A0
0099A:  MOVLB  E
0099C:  BSF    x5F.7
0099E:  MOVLB  D
....................    FaultNCNO[8] = InputType.B8;
009A0:  MOVLB  E
009A2:  BCF    x60.0
009A4:  MOVLB  D
009A6:  BTFSS  xAF.7
009A8:  BRA    09B0
009AA:  MOVLB  E
009AC:  BSF    x60.0
009AE:  MOVLB  D
....................    FaultNCNO[9] = InputType.B9;
009B0:  MOVLB  E
009B2:  BCF    x60.1
009B4:  MOVLB  D
009B6:  BTFSS  xB0.0
009B8:  BRA    09C0
009BA:  MOVLB  E
009BC:  BSF    x60.1
009BE:  MOVLB  D
....................    FaultNCNO[10] = InputType.B10;
009C0:  MOVLB  E
009C2:  BCF    x60.2
009C4:  MOVLB  D
009C6:  BTFSS  xB0.1
009C8:  BRA    09D0
009CA:  MOVLB  E
009CC:  BSF    x60.2
009CE:  MOVLB  D
....................    FaultNCNO[11] = InputType.B11;
009D0:  MOVLB  E
009D2:  BCF    x60.3
009D4:  MOVLB  D
009D6:  BTFSS  xB0.2
009D8:  BRA    09E0
009DA:  MOVLB  E
009DC:  BSF    x60.3
009DE:  MOVLB  D
....................    FaultNCNO[12] = InputType.B12;
009E0:  MOVLB  E
009E2:  BCF    x60.4
009E4:  MOVLB  D
009E6:  BTFSS  xB0.3
009E8:  BRA    09F0
009EA:  MOVLB  E
009EC:  BSF    x60.4
009EE:  MOVLB  D
....................    FaultNCNO[13] = InputType.B13;
009F0:  MOVLB  E
009F2:  BCF    x60.5
009F4:  MOVLB  D
009F6:  BTFSS  xB0.4
009F8:  BRA    0A00
009FA:  MOVLB  E
009FC:  BSF    x60.5
009FE:  MOVLB  D
....................    FaultNCNO[14] = InputType.B14;
00A00:  MOVLB  E
00A02:  BCF    x60.6
00A04:  MOVLB  D
00A06:  BTFSS  xB0.5
00A08:  BRA    0A10
00A0A:  MOVLB  E
00A0C:  BSF    x60.6
00A0E:  MOVLB  D
....................    FaultNCNO[15] = InputType.B15;
00A10:  MOVLB  E
00A12:  BCF    x60.7
00A14:  MOVLB  D
00A16:  BTFSS  xB0.6
00A18:  BRA    0A20
00A1A:  MOVLB  E
00A1C:  BSF    x60.7
00A1E:  MOVLB  D
....................    FaultNCNO[16] = InputType.B16;
00A20:  MOVLB  E
00A22:  BCF    x61.0
00A24:  MOVLB  D
00A26:  BTFSS  xB0.7
00A28:  BRA    0A30
00A2A:  MOVLB  E
00A2C:  BSF    x61.0
00A2E:  MOVLB  D
....................    FaultNCNO[17] = InputType.B17;
00A30:  MOVLB  E
00A32:  BCF    x61.1
00A34:  MOVLB  D
00A36:  BTFSS  xB1.0
00A38:  BRA    0A40
00A3A:  MOVLB  E
00A3C:  BSF    x61.1
00A3E:  MOVLB  D
....................    FaultNCNO[18] = InputType.B18;
00A40:  MOVLB  E
00A42:  BCF    x61.2
00A44:  MOVLB  D
00A46:  BTFSS  xB1.1
00A48:  BRA    0A50
00A4A:  MOVLB  E
00A4C:  BSF    x61.2
00A4E:  MOVLB  D
....................    FaultNCNO[19] = InputType.B19;
00A50:  MOVLB  E
00A52:  BCF    x61.3
00A54:  MOVLB  D
00A56:  BTFSS  xB1.2
00A58:  BRA    0A60
00A5A:  MOVLB  E
00A5C:  BSF    x61.3
00A5E:  MOVLB  D
....................    FaultNCNO[20] = InputType.B20;
00A60:  MOVLB  E
00A62:  BCF    x61.4
00A64:  MOVLB  D
00A66:  BTFSS  xB1.3
00A68:  BRA    0A70
00A6A:  MOVLB  E
00A6C:  BSF    x61.4
00A6E:  MOVLB  D
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
00A70:  MOVFF  FF2,E77
00A74:  BCF    FF2.7
00A76:  CLRF   FAA
00A78:  MOVLW  04
00A7A:  MOVWF  FA9
00A7C:  BCF    FA6.6
00A7E:  BCF    FA6.7
00A80:  BSF    FA6.0
00A82:  MOVF   FA8,W
00A84:  MOVLB  E
00A86:  BTFSC  x77.7
00A88:  BSF    FF2.7
00A8A:  MOVWF  36
....................    FaultType1_8 = EEpDat;
00A8C:  MOVFF  36,3A
.................... 
....................    FaultType.B1 = EEpDat;
00A90:  MOVLB  D
00A92:  BCF    xB3.0
00A94:  BTFSC  36.0
00A96:  BSF    xB3.0
....................    FaultType.B2 = EEpDat >> 1;
00A98:  BCF    FD8.0
00A9A:  RRCF   36,W
00A9C:  BCF    xB3.1
00A9E:  BTFSC  FE8.0
00AA0:  BSF    xB3.1
....................    FaultType.B3 = EEpDat >> 2;
00AA2:  RRCF   36,W
00AA4:  MOVWF  00
00AA6:  RRCF   00,F
00AA8:  MOVLW  3F
00AAA:  ANDWF  00,F
00AAC:  BCF    xB3.2
00AAE:  BTFSC  00.0
00AB0:  BSF    xB3.2
....................    FaultType.B4 = EEpDat >> 3;
00AB2:  RRCF   36,W
00AB4:  MOVWF  00
00AB6:  RRCF   00,F
00AB8:  RRCF   00,F
00ABA:  MOVLW  1F
00ABC:  ANDWF  00,F
00ABE:  BCF    xB3.3
00AC0:  BTFSC  00.0
00AC2:  BSF    xB3.3
....................    FaultType.B5 = EEpDat >> 4;
00AC4:  SWAPF  36,W
00AC6:  MOVWF  00
00AC8:  MOVLW  0F
00ACA:  ANDWF  00,F
00ACC:  BCF    xB3.4
00ACE:  BTFSC  00.0
00AD0:  BSF    xB3.4
....................    FaultType.B6 = EEpDat >> 5;
00AD2:  SWAPF  36,W
00AD4:  MOVWF  00
00AD6:  RRCF   00,F
00AD8:  MOVLW  07
00ADA:  ANDWF  00,F
00ADC:  BCF    xB3.5
00ADE:  BTFSC  00.0
00AE0:  BSF    xB3.5
....................    FaultType.B7 = EEpDat >> 6;
00AE2:  SWAPF  36,W
00AE4:  MOVWF  00
00AE6:  RRCF   00,F
00AE8:  RRCF   00,F
00AEA:  MOVLW  03
00AEC:  ANDWF  00,F
00AEE:  BCF    xB3.6
00AF0:  BTFSC  00.0
00AF2:  BSF    xB3.6
....................    FaultType.B8 = EEpDat >> 7;
00AF4:  CLRF   00
00AF6:  BTFSC  36.7
00AF8:  BSF    00.0
00AFA:  BCF    xB3.7
00AFC:  BTFSC  00.0
00AFE:  BSF    xB3.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
00B00:  MOVFF  FF2,E77
00B04:  BCF    FF2.7
00B06:  CLRF   FAA
00B08:  MOVLW  05
00B0A:  MOVWF  FA9
00B0C:  BCF    FA6.6
00B0E:  BCF    FA6.7
00B10:  BSF    FA6.0
00B12:  MOVF   FA8,W
00B14:  MOVLB  E
00B16:  BTFSC  x77.7
00B18:  BSF    FF2.7
00B1A:  MOVWF  36
....................    FaultType9_16 = EEpDat;
00B1C:  MOVFF  36,3B
.................... 
....................    FaultType.B9 = EEpDat;
00B20:  MOVLB  D
00B22:  BCF    xB4.0
00B24:  BTFSC  36.0
00B26:  BSF    xB4.0
....................    FaultType.B10 = EEpDat >> 1;
00B28:  BCF    FD8.0
00B2A:  RRCF   36,W
00B2C:  BCF    xB4.1
00B2E:  BTFSC  FE8.0
00B30:  BSF    xB4.1
....................    FaultType.B11 = EEpDat >> 2;
00B32:  RRCF   36,W
00B34:  MOVWF  00
00B36:  RRCF   00,F
00B38:  MOVLW  3F
00B3A:  ANDWF  00,F
00B3C:  BCF    xB4.2
00B3E:  BTFSC  00.0
00B40:  BSF    xB4.2
....................    FaultType.B12 = EEpDat >> 3;
00B42:  RRCF   36,W
00B44:  MOVWF  00
00B46:  RRCF   00,F
00B48:  RRCF   00,F
00B4A:  MOVLW  1F
00B4C:  ANDWF  00,F
00B4E:  BCF    xB4.3
00B50:  BTFSC  00.0
00B52:  BSF    xB4.3
....................    FaultType.B13 = EEpDat >> 4;
00B54:  SWAPF  36,W
00B56:  MOVWF  00
00B58:  MOVLW  0F
00B5A:  ANDWF  00,F
00B5C:  BCF    xB4.4
00B5E:  BTFSC  00.0
00B60:  BSF    xB4.4
....................    FaultType.B14 = EEpDat >> 5;
00B62:  SWAPF  36,W
00B64:  MOVWF  00
00B66:  RRCF   00,F
00B68:  MOVLW  07
00B6A:  ANDWF  00,F
00B6C:  BCF    xB4.5
00B6E:  BTFSC  00.0
00B70:  BSF    xB4.5
....................    FaultType.B15 = EEpDat >> 6;
00B72:  SWAPF  36,W
00B74:  MOVWF  00
00B76:  RRCF   00,F
00B78:  RRCF   00,F
00B7A:  MOVLW  03
00B7C:  ANDWF  00,F
00B7E:  BCF    xB4.6
00B80:  BTFSC  00.0
00B82:  BSF    xB4.6
....................    FaultType.B16 = EEpDat >> 7;
00B84:  CLRF   00
00B86:  BTFSC  36.7
00B88:  BSF    00.0
00B8A:  BCF    xB4.7
00B8C:  BTFSC  00.0
00B8E:  BSF    xB4.7
....................    
....................    EEpDat = read_eeprom(0x06);   // Fault type 9-16
00B90:  MOVFF  FF2,E77
00B94:  BCF    FF2.7
00B96:  CLRF   FAA
00B98:  MOVLW  06
00B9A:  MOVWF  FA9
00B9C:  BCF    FA6.6
00B9E:  BCF    FA6.7
00BA0:  BSF    FA6.0
00BA2:  MOVF   FA8,W
00BA4:  MOVLB  E
00BA6:  BTFSC  x77.7
00BA8:  BSF    FF2.7
00BAA:  MOVWF  36
....................    FaultType17_24 = EEpDat;
00BAC:  MOVFF  36,3C
.................... 
....................    FaultType.B17 = EEpDat;
00BB0:  MOVLB  D
00BB2:  BCF    xB5.0
00BB4:  BTFSC  36.0
00BB6:  BSF    xB5.0
....................    FaultType.B18 = EEpDat >> 1;
00BB8:  BCF    FD8.0
00BBA:  RRCF   36,W
00BBC:  BCF    xB5.1
00BBE:  BTFSC  FE8.0
00BC0:  BSF    xB5.1
....................    FaultType.B19 = EEpDat >> 2;
00BC2:  RRCF   36,W
00BC4:  MOVWF  00
00BC6:  RRCF   00,F
00BC8:  MOVLW  3F
00BCA:  ANDWF  00,F
00BCC:  BCF    xB5.2
00BCE:  BTFSC  00.0
00BD0:  BSF    xB5.2
....................    FaultType.B20 = EEpDat >> 3;
00BD2:  RRCF   36,W
00BD4:  MOVWF  00
00BD6:  RRCF   00,F
00BD8:  RRCF   00,F
00BDA:  MOVLW  1F
00BDC:  ANDWF  00,F
00BDE:  BCF    xB5.3
00BE0:  BTFSC  00.0
00BE2:  BSF    xB5.3
....................    FaultType.B21 = EEpDat >> 4;
00BE4:  SWAPF  36,W
00BE6:  MOVWF  00
00BE8:  MOVLW  0F
00BEA:  ANDWF  00,F
00BEC:  BCF    xB5.4
00BEE:  BTFSC  00.0
00BF0:  BSF    xB5.4
....................    FaultType.B22 = EEpDat >> 5;
00BF2:  SWAPF  36,W
00BF4:  MOVWF  00
00BF6:  RRCF   00,F
00BF8:  MOVLW  07
00BFA:  ANDWF  00,F
00BFC:  BCF    xB5.5
00BFE:  BTFSC  00.0
00C00:  BSF    xB5.5
....................    FaultType.B23 = EEpDat >> 6;
00C02:  SWAPF  36,W
00C04:  MOVWF  00
00C06:  RRCF   00,F
00C08:  RRCF   00,F
00C0A:  MOVLW  03
00C0C:  ANDWF  00,F
00C0E:  BCF    xB5.6
00C10:  BTFSC  00.0
00C12:  BSF    xB5.6
....................    FaultType.B24 = EEpDat >> 7;
00C14:  CLRF   00
00C16:  BTFSC  36.7
00C18:  BSF    00.0
00C1A:  BCF    xB5.7
00C1C:  BTFSC  00.0
00C1E:  BSF    xB5.7
.................... 
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00C20:  MOVFF  FF2,E77
00C24:  BCF    FF2.7
00C26:  CLRF   FAA
00C28:  MOVLW  07
00C2A:  MOVWF  FA9
00C2C:  BCF    FA6.6
00C2E:  BCF    FA6.7
00C30:  BSF    FA6.0
00C32:  MOVF   FA8,W
00C34:  MOVLB  E
00C36:  BTFSC  x77.7
00C38:  BSF    FF2.7
00C3A:  MOVWF  36
....................    OutputType1_8 = EEpDat;
00C3C:  MOVFF  36,3D
.................... 
....................    OutputType.B1 = EEpDat;
00C40:  MOVLB  D
00C42:  BCF    xB7.0
00C44:  BTFSC  36.0
00C46:  BSF    xB7.0
....................    OutputType.B2 = EEpDat >> 1;
00C48:  BCF    FD8.0
00C4A:  RRCF   36,W
00C4C:  BCF    xB7.1
00C4E:  BTFSC  FE8.0
00C50:  BSF    xB7.1
....................    OutputType.B3 = EEpDat >> 2;
00C52:  RRCF   36,W
00C54:  MOVWF  00
00C56:  RRCF   00,F
00C58:  MOVLW  3F
00C5A:  ANDWF  00,F
00C5C:  BCF    xB7.2
00C5E:  BTFSC  00.0
00C60:  BSF    xB7.2
....................    OutputType.B4 = EEpDat >> 3;
00C62:  RRCF   36,W
00C64:  MOVWF  00
00C66:  RRCF   00,F
00C68:  RRCF   00,F
00C6A:  MOVLW  1F
00C6C:  ANDWF  00,F
00C6E:  BCF    xB7.3
00C70:  BTFSC  00.0
00C72:  BSF    xB7.3
....................    OutputType.B5 = EEpDat >> 4;
00C74:  SWAPF  36,W
00C76:  MOVWF  00
00C78:  MOVLW  0F
00C7A:  ANDWF  00,F
00C7C:  BCF    xB7.4
00C7E:  BTFSC  00.0
00C80:  BSF    xB7.4
....................    OutputType.B6 = EEpDat >> 5;
00C82:  SWAPF  36,W
00C84:  MOVWF  00
00C86:  RRCF   00,F
00C88:  MOVLW  07
00C8A:  ANDWF  00,F
00C8C:  BCF    xB7.5
00C8E:  BTFSC  00.0
00C90:  BSF    xB7.5
....................    OutputType.B7 = EEpDat >> 6;
00C92:  SWAPF  36,W
00C94:  MOVWF  00
00C96:  RRCF   00,F
00C98:  RRCF   00,F
00C9A:  MOVLW  03
00C9C:  ANDWF  00,F
00C9E:  BCF    xB7.6
00CA0:  BTFSC  00.0
00CA2:  BSF    xB7.6
....................    OutputType.B8 = EEpDat >> 7;
00CA4:  CLRF   00
00CA6:  BTFSC  36.7
00CA8:  BSF    00.0
00CAA:  BCF    xB7.7
00CAC:  BTFSC  00.0
00CAE:  BSF    xB7.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
00CB0:  MOVFF  FF2,E77
00CB4:  BCF    FF2.7
00CB6:  CLRF   FAA
00CB8:  MOVLW  08
00CBA:  MOVWF  FA9
00CBC:  BCF    FA6.6
00CBE:  BCF    FA6.7
00CC0:  BSF    FA6.0
00CC2:  MOVF   FA8,W
00CC4:  MOVLB  E
00CC6:  BTFSC  x77.7
00CC8:  BSF    FF2.7
00CCA:  MOVWF  36
....................    OutputType9_16 = EEpDat;
00CCC:  MOVFF  36,3E
.................... 
....................    OutputType.B9 = EEpDat;
00CD0:  MOVLB  D
00CD2:  BCF    xB8.0
00CD4:  BTFSC  36.0
00CD6:  BSF    xB8.0
....................    OutputType.B10 = EEpDat >> 1;
00CD8:  BCF    FD8.0
00CDA:  RRCF   36,W
00CDC:  BCF    xB8.1
00CDE:  BTFSC  FE8.0
00CE0:  BSF    xB8.1
....................    OutputType.B11 = EEpDat >> 2;
00CE2:  RRCF   36,W
00CE4:  MOVWF  00
00CE6:  RRCF   00,F
00CE8:  MOVLW  3F
00CEA:  ANDWF  00,F
00CEC:  BCF    xB8.2
00CEE:  BTFSC  00.0
00CF0:  BSF    xB8.2
....................    OutputType.B12 = EEpDat >> 3;
00CF2:  RRCF   36,W
00CF4:  MOVWF  00
00CF6:  RRCF   00,F
00CF8:  RRCF   00,F
00CFA:  MOVLW  1F
00CFC:  ANDWF  00,F
00CFE:  BCF    xB8.3
00D00:  BTFSC  00.0
00D02:  BSF    xB8.3
....................    OutputType.B13 = EEpDat >> 4;
00D04:  SWAPF  36,W
00D06:  MOVWF  00
00D08:  MOVLW  0F
00D0A:  ANDWF  00,F
00D0C:  BCF    xB8.4
00D0E:  BTFSC  00.0
00D10:  BSF    xB8.4
....................    OutputType.B14 = EEpDat >> 5;
00D12:  SWAPF  36,W
00D14:  MOVWF  00
00D16:  RRCF   00,F
00D18:  MOVLW  07
00D1A:  ANDWF  00,F
00D1C:  BCF    xB8.5
00D1E:  BTFSC  00.0
00D20:  BSF    xB8.5
....................    OutputType.B15 = EEpDat >> 6;
00D22:  SWAPF  36,W
00D24:  MOVWF  00
00D26:  RRCF   00,F
00D28:  RRCF   00,F
00D2A:  MOVLW  03
00D2C:  ANDWF  00,F
00D2E:  BCF    xB8.6
00D30:  BTFSC  00.0
00D32:  BSF    xB8.6
....................    OutputType.B16 = EEpDat >> 7;
00D34:  CLRF   00
00D36:  BTFSC  36.7
00D38:  BSF    00.0
00D3A:  BCF    xB8.7
00D3C:  BTFSC  00.0
00D3E:  BSF    xB8.7
....................    
....................    EEpDat = read_eeprom(0x09);   // Output type 9-16
00D40:  MOVFF  FF2,E77
00D44:  BCF    FF2.7
00D46:  CLRF   FAA
00D48:  MOVLW  09
00D4A:  MOVWF  FA9
00D4C:  BCF    FA6.6
00D4E:  BCF    FA6.7
00D50:  BSF    FA6.0
00D52:  MOVF   FA8,W
00D54:  MOVLB  E
00D56:  BTFSC  x77.7
00D58:  BSF    FF2.7
00D5A:  MOVWF  36
....................    OutputType17_24 = EEpDat;
00D5C:  MOVFF  36,3F
.................... 
....................    OutputType.B17 = EEpDat;
00D60:  MOVLB  D
00D62:  BCF    xB9.0
00D64:  BTFSC  36.0
00D66:  BSF    xB9.0
....................    OutputType.B18 = EEpDat >> 1;
00D68:  BCF    FD8.0
00D6A:  RRCF   36,W
00D6C:  BCF    xB9.1
00D6E:  BTFSC  FE8.0
00D70:  BSF    xB9.1
....................    OutputType.B19 = EEpDat >> 2;
00D72:  RRCF   36,W
00D74:  MOVWF  00
00D76:  RRCF   00,F
00D78:  MOVLW  3F
00D7A:  ANDWF  00,F
00D7C:  BCF    xB9.2
00D7E:  BTFSC  00.0
00D80:  BSF    xB9.2
....................    OutputType.B20 = EEpDat >> 3;
00D82:  RRCF   36,W
00D84:  MOVWF  00
00D86:  RRCF   00,F
00D88:  RRCF   00,F
00D8A:  MOVLW  1F
00D8C:  ANDWF  00,F
00D8E:  BCF    xB9.3
00D90:  BTFSC  00.0
00D92:  BSF    xB9.3
....................    OutputType.B21 = EEpDat >> 4;
00D94:  SWAPF  36,W
00D96:  MOVWF  00
00D98:  MOVLW  0F
00D9A:  ANDWF  00,F
00D9C:  BCF    xB9.4
00D9E:  BTFSC  00.0
00DA0:  BSF    xB9.4
....................    OutputType.B22 = EEpDat >> 5;
00DA2:  SWAPF  36,W
00DA4:  MOVWF  00
00DA6:  RRCF   00,F
00DA8:  MOVLW  07
00DAA:  ANDWF  00,F
00DAC:  BCF    xB9.5
00DAE:  BTFSC  00.0
00DB0:  BSF    xB9.5
....................    OutputType.B23 = EEpDat >> 6;
00DB2:  SWAPF  36,W
00DB4:  MOVWF  00
00DB6:  RRCF   00,F
00DB8:  RRCF   00,F
00DBA:  MOVLW  03
00DBC:  ANDWF  00,F
00DBE:  BCF    xB9.6
00DC0:  BTFSC  00.0
00DC2:  BSF    xB9.6
....................    OutputType.B24 = EEpDat >> 7;
00DC4:  CLRF   00
00DC6:  BTFSC  36.7
00DC8:  BSF    00.0
00DCA:  BCF    xB9.7
00DCC:  BTFSC  00.0
00DCE:  BSF    xB9.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
00DD0:  MOVFF  FF2,E77
00DD4:  BCF    FF2.7
00DD6:  CLRF   FAA
00DD8:  MOVLW  0A
00DDA:  MOVWF  FA9
00DDC:  BCF    FA6.6
00DDE:  BCF    FA6.7
00DE0:  BSF    FA6.0
00DE2:  MOVF   FA8,W
00DE4:  MOVLB  E
00DE6:  BTFSC  x77.7
00DE8:  BSF    FF2.7
00DEA:  MOVWF  36
....................    OutputBoth1_8 = EEpDat;
00DEC:  MOVFF  36,40
.................... 
....................    OutputBoth.B1 = EEpDat;
00DF0:  MOVLB  D
00DF2:  BCF    xBB.0
00DF4:  BTFSC  36.0
00DF6:  BSF    xBB.0
....................    OutputBoth.B2 = EEpDat >> 1;
00DF8:  BCF    FD8.0
00DFA:  RRCF   36,W
00DFC:  BCF    xBB.1
00DFE:  BTFSC  FE8.0
00E00:  BSF    xBB.1
....................    OutputBoth.B3 = EEpDat >> 2;
00E02:  RRCF   36,W
00E04:  MOVWF  00
00E06:  RRCF   00,F
00E08:  MOVLW  3F
00E0A:  ANDWF  00,F
00E0C:  BCF    xBB.2
00E0E:  BTFSC  00.0
00E10:  BSF    xBB.2
....................    OutputBoth.B4 = EEpDat >> 3;
00E12:  RRCF   36,W
00E14:  MOVWF  00
00E16:  RRCF   00,F
00E18:  RRCF   00,F
00E1A:  MOVLW  1F
00E1C:  ANDWF  00,F
00E1E:  BCF    xBB.3
00E20:  BTFSC  00.0
00E22:  BSF    xBB.3
....................    OutputBoth.B5 = EEpDat >> 4;
00E24:  SWAPF  36,W
00E26:  MOVWF  00
00E28:  MOVLW  0F
00E2A:  ANDWF  00,F
00E2C:  BCF    xBB.4
00E2E:  BTFSC  00.0
00E30:  BSF    xBB.4
....................    OutputBoth.B6 = EEpDat >> 5;
00E32:  SWAPF  36,W
00E34:  MOVWF  00
00E36:  RRCF   00,F
00E38:  MOVLW  07
00E3A:  ANDWF  00,F
00E3C:  BCF    xBB.5
00E3E:  BTFSC  00.0
00E40:  BSF    xBB.5
....................    OutputBoth.B7 = EEpDat >> 6;
00E42:  SWAPF  36,W
00E44:  MOVWF  00
00E46:  RRCF   00,F
00E48:  RRCF   00,F
00E4A:  MOVLW  03
00E4C:  ANDWF  00,F
00E4E:  BCF    xBB.6
00E50:  BTFSC  00.0
00E52:  BSF    xBB.6
....................    OutputBoth.B8 = EEpDat >> 7;
00E54:  CLRF   00
00E56:  BTFSC  36.7
00E58:  BSF    00.0
00E5A:  BCF    xBB.7
00E5C:  BTFSC  00.0
00E5E:  BSF    xBB.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
00E60:  MOVFF  FF2,E77
00E64:  BCF    FF2.7
00E66:  CLRF   FAA
00E68:  MOVLW  0B
00E6A:  MOVWF  FA9
00E6C:  BCF    FA6.6
00E6E:  BCF    FA6.7
00E70:  BSF    FA6.0
00E72:  MOVF   FA8,W
00E74:  MOVLB  E
00E76:  BTFSC  x77.7
00E78:  BSF    FF2.7
00E7A:  MOVWF  36
....................    OutputBoth9_16 = EEpDat;
00E7C:  MOVFF  36,41
.................... 
....................    OutputBoth.B9 = EEpDat;
00E80:  MOVLB  D
00E82:  BCF    xBC.0
00E84:  BTFSC  36.0
00E86:  BSF    xBC.0
....................    OutputBoth.B10 = EEpDat >> 1;
00E88:  BCF    FD8.0
00E8A:  RRCF   36,W
00E8C:  BCF    xBC.1
00E8E:  BTFSC  FE8.0
00E90:  BSF    xBC.1
....................    OutputBoth.B11 = EEpDat >> 2;
00E92:  RRCF   36,W
00E94:  MOVWF  00
00E96:  RRCF   00,F
00E98:  MOVLW  3F
00E9A:  ANDWF  00,F
00E9C:  BCF    xBC.2
00E9E:  BTFSC  00.0
00EA0:  BSF    xBC.2
....................    OutputBoth.B12 = EEpDat >> 3;
00EA2:  RRCF   36,W
00EA4:  MOVWF  00
00EA6:  RRCF   00,F
00EA8:  RRCF   00,F
00EAA:  MOVLW  1F
00EAC:  ANDWF  00,F
00EAE:  BCF    xBC.3
00EB0:  BTFSC  00.0
00EB2:  BSF    xBC.3
....................    OutputBoth.B13 = EEpDat >> 4;
00EB4:  SWAPF  36,W
00EB6:  MOVWF  00
00EB8:  MOVLW  0F
00EBA:  ANDWF  00,F
00EBC:  BCF    xBC.4
00EBE:  BTFSC  00.0
00EC0:  BSF    xBC.4
....................    OutputBoth.B14 = EEpDat >> 5;
00EC2:  SWAPF  36,W
00EC4:  MOVWF  00
00EC6:  RRCF   00,F
00EC8:  MOVLW  07
00ECA:  ANDWF  00,F
00ECC:  BCF    xBC.5
00ECE:  BTFSC  00.0
00ED0:  BSF    xBC.5
....................    OutputBoth.B15 = EEpDat >> 6;
00ED2:  SWAPF  36,W
00ED4:  MOVWF  00
00ED6:  RRCF   00,F
00ED8:  RRCF   00,F
00EDA:  MOVLW  03
00EDC:  ANDWF  00,F
00EDE:  BCF    xBC.6
00EE0:  BTFSC  00.0
00EE2:  BSF    xBC.6
....................    OutputBoth.B16 = EEpDat >> 7;
00EE4:  CLRF   00
00EE6:  BTFSC  36.7
00EE8:  BSF    00.0
00EEA:  BCF    xBC.7
00EEC:  BTFSC  00.0
00EEE:  BSF    xBC.7
....................    
....................    EEpDat = read_eeprom(0x0C);   // Output Both 9-16
00EF0:  MOVFF  FF2,E77
00EF4:  BCF    FF2.7
00EF6:  CLRF   FAA
00EF8:  MOVLW  0C
00EFA:  MOVWF  FA9
00EFC:  BCF    FA6.6
00EFE:  BCF    FA6.7
00F00:  BSF    FA6.0
00F02:  MOVF   FA8,W
00F04:  MOVLB  E
00F06:  BTFSC  x77.7
00F08:  BSF    FF2.7
00F0A:  MOVWF  36
....................    OutputBoth17_24 = EEpDat;
00F0C:  MOVFF  36,42
.................... 
....................    OutputBoth.B17 = EEpDat;
00F10:  MOVLB  D
00F12:  BCF    xBD.0
00F14:  BTFSC  36.0
00F16:  BSF    xBD.0
....................    OutputBoth.B18 = EEpDat >> 1;
00F18:  BCF    FD8.0
00F1A:  RRCF   36,W
00F1C:  BCF    xBD.1
00F1E:  BTFSC  FE8.0
00F20:  BSF    xBD.1
....................    OutputBoth.B19 = EEpDat >> 2;
00F22:  RRCF   36,W
00F24:  MOVWF  00
00F26:  RRCF   00,F
00F28:  MOVLW  3F
00F2A:  ANDWF  00,F
00F2C:  BCF    xBD.2
00F2E:  BTFSC  00.0
00F30:  BSF    xBD.2
....................    OutputBoth.B20 = EEpDat >> 3;
00F32:  RRCF   36,W
00F34:  MOVWF  00
00F36:  RRCF   00,F
00F38:  RRCF   00,F
00F3A:  MOVLW  1F
00F3C:  ANDWF  00,F
00F3E:  BCF    xBD.3
00F40:  BTFSC  00.0
00F42:  BSF    xBD.3
....................    OutputBoth.B21 = EEpDat >> 4;
00F44:  SWAPF  36,W
00F46:  MOVWF  00
00F48:  MOVLW  0F
00F4A:  ANDWF  00,F
00F4C:  BCF    xBD.4
00F4E:  BTFSC  00.0
00F50:  BSF    xBD.4
....................    OutputBoth.B22 = EEpDat >> 5;
00F52:  SWAPF  36,W
00F54:  MOVWF  00
00F56:  RRCF   00,F
00F58:  MOVLW  07
00F5A:  ANDWF  00,F
00F5C:  BCF    xBD.5
00F5E:  BTFSC  00.0
00F60:  BSF    xBD.5
....................    OutputBoth.B23 = EEpDat >> 6;
00F62:  SWAPF  36,W
00F64:  MOVWF  00
00F66:  RRCF   00,F
00F68:  RRCF   00,F
00F6A:  MOVLW  03
00F6C:  ANDWF  00,F
00F6E:  BCF    xBD.6
00F70:  BTFSC  00.0
00F72:  BSF    xBD.6
....................    OutputBoth.B24 = EEpDat >> 7;
00F74:  CLRF   00
00F76:  BTFSC  36.7
00F78:  BSF    00.0
00F7A:  BCF    xBD.7
00F7C:  BTFSC  00.0
00F7E:  BSF    xBD.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
00F80:  MOVFF  FF2,E77
00F84:  BCF    FF2.7
00F86:  CLRF   FAA
00F88:  MOVLW  0D
00F8A:  MOVWF  FA9
00F8C:  BCF    FA6.6
00F8E:  BCF    FA6.7
00F90:  BSF    FA6.0
00F92:  MOVF   FA8,W
00F94:  MOVLB  E
00F96:  BTFSC  x77.7
00F98:  BSF    FF2.7
00F9A:  MOVWF  36
....................    Alarm_Indicator1_8 = EEpDat;
00F9C:  MOVFF  36,43
.................... 
....................    AlarmIndicator.B1 = EEpDat;
00FA0:  MOVLB  D
00FA2:  BCF    xBF.0
00FA4:  BTFSC  36.0
00FA6:  BSF    xBF.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
00FA8:  BCF    FD8.0
00FAA:  RRCF   36,W
00FAC:  BCF    xBF.1
00FAE:  BTFSC  FE8.0
00FB0:  BSF    xBF.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
00FB2:  RRCF   36,W
00FB4:  MOVWF  00
00FB6:  RRCF   00,F
00FB8:  MOVLW  3F
00FBA:  ANDWF  00,F
00FBC:  BCF    xBF.2
00FBE:  BTFSC  00.0
00FC0:  BSF    xBF.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
00FC2:  RRCF   36,W
00FC4:  MOVWF  00
00FC6:  RRCF   00,F
00FC8:  RRCF   00,F
00FCA:  MOVLW  1F
00FCC:  ANDWF  00,F
00FCE:  BCF    xBF.3
00FD0:  BTFSC  00.0
00FD2:  BSF    xBF.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
00FD4:  SWAPF  36,W
00FD6:  MOVWF  00
00FD8:  MOVLW  0F
00FDA:  ANDWF  00,F
00FDC:  BCF    xBF.4
00FDE:  BTFSC  00.0
00FE0:  BSF    xBF.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
00FE2:  SWAPF  36,W
00FE4:  MOVWF  00
00FE6:  RRCF   00,F
00FE8:  MOVLW  07
00FEA:  ANDWF  00,F
00FEC:  BCF    xBF.5
00FEE:  BTFSC  00.0
00FF0:  BSF    xBF.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
00FF2:  SWAPF  36,W
00FF4:  MOVWF  00
00FF6:  RRCF   00,F
00FF8:  RRCF   00,F
00FFA:  MOVLW  03
00FFC:  ANDWF  00,F
00FFE:  BCF    xBF.6
01000:  BTFSC  00.0
01002:  BSF    xBF.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
01004:  CLRF   00
01006:  BTFSC  36.7
01008:  BSF    00.0
0100A:  BCF    xBF.7
0100C:  BTFSC  00.0
0100E:  BSF    xBF.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
01010:  MOVFF  FF2,E77
01014:  BCF    FF2.7
01016:  CLRF   FAA
01018:  MOVLW  0E
0101A:  MOVWF  FA9
0101C:  BCF    FA6.6
0101E:  BCF    FA6.7
01020:  BSF    FA6.0
01022:  MOVF   FA8,W
01024:  MOVLB  E
01026:  BTFSC  x77.7
01028:  BSF    FF2.7
0102A:  MOVWF  36
....................    Alarm_Indicator9_16 = EEpDat;
0102C:  MOVFF  36,44
.................... 
....................    AlarmIndicator.B9 = EEpDat;
01030:  MOVLB  D
01032:  BCF    xC0.0
01034:  BTFSC  36.0
01036:  BSF    xC0.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
01038:  BCF    FD8.0
0103A:  RRCF   36,W
0103C:  BCF    xC0.1
0103E:  BTFSC  FE8.0
01040:  BSF    xC0.1
....................    AlarmIndicator.B11 = EEpDat >> 2;
01042:  RRCF   36,W
01044:  MOVWF  00
01046:  RRCF   00,F
01048:  MOVLW  3F
0104A:  ANDWF  00,F
0104C:  BCF    xC0.2
0104E:  BTFSC  00.0
01050:  BSF    xC0.2
....................    AlarmIndicator.B12 = EEpDat >> 3;
01052:  RRCF   36,W
01054:  MOVWF  00
01056:  RRCF   00,F
01058:  RRCF   00,F
0105A:  MOVLW  1F
0105C:  ANDWF  00,F
0105E:  BCF    xC0.3
01060:  BTFSC  00.0
01062:  BSF    xC0.3
....................    AlarmIndicator.B13 = EEpDat >> 4;
01064:  SWAPF  36,W
01066:  MOVWF  00
01068:  MOVLW  0F
0106A:  ANDWF  00,F
0106C:  BCF    xC0.4
0106E:  BTFSC  00.0
01070:  BSF    xC0.4
....................    AlarmIndicator.B14 = EEpDat >> 5;
01072:  SWAPF  36,W
01074:  MOVWF  00
01076:  RRCF   00,F
01078:  MOVLW  07
0107A:  ANDWF  00,F
0107C:  BCF    xC0.5
0107E:  BTFSC  00.0
01080:  BSF    xC0.5
....................    AlarmIndicator.B15 = EEpDat >> 6;
01082:  SWAPF  36,W
01084:  MOVWF  00
01086:  RRCF   00,F
01088:  RRCF   00,F
0108A:  MOVLW  03
0108C:  ANDWF  00,F
0108E:  BCF    xC0.6
01090:  BTFSC  00.0
01092:  BSF    xC0.6
....................    AlarmIndicator.B16 = EEpDat >> 7;
01094:  CLRF   00
01096:  BTFSC  36.7
01098:  BSF    00.0
0109A:  BCF    xC0.7
0109C:  BTFSC  00.0
0109E:  BSF    xC0.7
....................    
....................    EEpDat = read_eeprom(0x0F);   // AlarmIndicator 9-16
010A0:  MOVFF  FF2,E77
010A4:  BCF    FF2.7
010A6:  CLRF   FAA
010A8:  MOVLW  0F
010AA:  MOVWF  FA9
010AC:  BCF    FA6.6
010AE:  BCF    FA6.7
010B0:  BSF    FA6.0
010B2:  MOVF   FA8,W
010B4:  MOVLB  E
010B6:  BTFSC  x77.7
010B8:  BSF    FF2.7
010BA:  MOVWF  36
....................    Alarm_Indicator17_24 = EEpDat;
010BC:  MOVFF  36,45
.................... 
....................    AlarmIndicator.B17 = EEpDat;
010C0:  MOVLB  D
010C2:  BCF    xC1.0
010C4:  BTFSC  36.0
010C6:  BSF    xC1.0
....................    AlarmIndicator.B18 = EEpDat >> 1;
010C8:  BCF    FD8.0
010CA:  RRCF   36,W
010CC:  BCF    xC1.1
010CE:  BTFSC  FE8.0
010D0:  BSF    xC1.1
....................    AlarmIndicator.B19 = EEpDat >> 2;
010D2:  RRCF   36,W
010D4:  MOVWF  00
010D6:  RRCF   00,F
010D8:  MOVLW  3F
010DA:  ANDWF  00,F
010DC:  BCF    xC1.2
010DE:  BTFSC  00.0
010E0:  BSF    xC1.2
....................    AlarmIndicator.B20 = EEpDat >> 3;
010E2:  RRCF   36,W
010E4:  MOVWF  00
010E6:  RRCF   00,F
010E8:  RRCF   00,F
010EA:  MOVLW  1F
010EC:  ANDWF  00,F
010EE:  BCF    xC1.3
010F0:  BTFSC  00.0
010F2:  BSF    xC1.3
....................    AlarmIndicator.B21 = EEpDat >> 4;
010F4:  SWAPF  36,W
010F6:  MOVWF  00
010F8:  MOVLW  0F
010FA:  ANDWF  00,F
010FC:  BCF    xC1.4
010FE:  BTFSC  00.0
01100:  BSF    xC1.4
....................    AlarmIndicator.B22 = EEpDat >> 5;
01102:  SWAPF  36,W
01104:  MOVWF  00
01106:  RRCF   00,F
01108:  MOVLW  07
0110A:  ANDWF  00,F
0110C:  BCF    xC1.5
0110E:  BTFSC  00.0
01110:  BSF    xC1.5
....................    AlarmIndicator.B23 = EEpDat >> 6;
01112:  SWAPF  36,W
01114:  MOVWF  00
01116:  RRCF   00,F
01118:  RRCF   00,F
0111A:  MOVLW  03
0111C:  ANDWF  00,F
0111E:  BCF    xC1.6
01120:  BTFSC  00.0
01122:  BSF    xC1.6
....................    AlarmIndicator.B24 = EEpDat >> 7;
01124:  CLRF   00
01126:  BTFSC  36.7
01128:  BSF    00.0
0112A:  BCF    xC1.7
0112C:  BTFSC  00.0
0112E:  BSF    xC1.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
01130:  MOVFF  FF2,E77
01134:  BCF    FF2.7
01136:  CLRF   FAA
01138:  MOVLW  10
0113A:  MOVWF  FA9
0113C:  BCF    FA6.6
0113E:  BCF    FA6.7
01140:  BSF    FA6.0
01142:  MOVF   FA8,W
01144:  MOVLB  E
01146:  BTFSC  x77.7
01148:  BSF    FF2.7
0114A:  MOVWF  36
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
0114C:  MOVLB  D
0114E:  BCF    xD3.0
01150:  BTFSC  36.0
01152:  BSF    xD3.0
....................    RED_Colour.B2 = EEpDat >> 1;
01154:  BCF    FD8.0
01156:  RRCF   36,W
01158:  BCF    xD3.1
0115A:  BTFSC  FE8.0
0115C:  BSF    xD3.1
....................    RED_Colour.B3 = EEpDat >> 2;
0115E:  RRCF   36,W
01160:  MOVWF  00
01162:  RRCF   00,F
01164:  MOVLW  3F
01166:  ANDWF  00,F
01168:  BCF    xD3.2
0116A:  BTFSC  00.0
0116C:  BSF    xD3.2
....................    RED_Colour.B4 = EEpDat >> 3;
0116E:  RRCF   36,W
01170:  MOVWF  00
01172:  RRCF   00,F
01174:  RRCF   00,F
01176:  MOVLW  1F
01178:  ANDWF  00,F
0117A:  BCF    xD3.3
0117C:  BTFSC  00.0
0117E:  BSF    xD3.3
....................    RED_Colour.B5 = EEpDat >> 4;
01180:  SWAPF  36,W
01182:  MOVWF  00
01184:  MOVLW  0F
01186:  ANDWF  00,F
01188:  BCF    xD3.4
0118A:  BTFSC  00.0
0118C:  BSF    xD3.4
....................    RED_Colour.B6 = EEpDat >> 5;
0118E:  SWAPF  36,W
01190:  MOVWF  00
01192:  RRCF   00,F
01194:  MOVLW  07
01196:  ANDWF  00,F
01198:  BCF    xD3.5
0119A:  BTFSC  00.0
0119C:  BSF    xD3.5
....................    RED_Colour.B7 = EEpDat >> 6;
0119E:  SWAPF  36,W
011A0:  MOVWF  00
011A2:  RRCF   00,F
011A4:  RRCF   00,F
011A6:  MOVLW  03
011A8:  ANDWF  00,F
011AA:  BCF    xD3.6
011AC:  BTFSC  00.0
011AE:  BSF    xD3.6
....................    RED_Colour.B8 = EEpDat >> 7;
011B0:  CLRF   00
011B2:  BTFSC  36.7
011B4:  BSF    00.0
011B6:  BCF    xD3.7
011B8:  BTFSC  00.0
011BA:  BSF    xD3.7
....................    
....................    EEpDat = read_eeprom(0x11);
011BC:  MOVFF  FF2,E77
011C0:  BCF    FF2.7
011C2:  CLRF   FAA
011C4:  MOVLW  11
011C6:  MOVWF  FA9
011C8:  BCF    FA6.6
011CA:  BCF    FA6.7
011CC:  BSF    FA6.0
011CE:  MOVF   FA8,W
011D0:  MOVLB  E
011D2:  BTFSC  x77.7
011D4:  BSF    FF2.7
011D6:  MOVWF  36
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
011D8:  MOVLB  D
011DA:  BCF    xD4.0
011DC:  BTFSC  36.0
011DE:  BSF    xD4.0
....................    RED_Colour.B10 = EEpDat >> 1;
011E0:  BCF    FD8.0
011E2:  RRCF   36,W
011E4:  BCF    xD4.1
011E6:  BTFSC  FE8.0
011E8:  BSF    xD4.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
011EA:  MOVFF  FF2,E77
011EE:  BCF    FF2.7
011F0:  CLRF   FAA
011F2:  MOVLW  12
011F4:  MOVWF  FA9
011F6:  BCF    FA6.6
011F8:  BCF    FA6.7
011FA:  BSF    FA6.0
011FC:  MOVF   FA8,W
011FE:  MOVLB  E
01200:  BTFSC  x77.7
01202:  BSF    FF2.7
01204:  MOVWF  36
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
01206:  MOVLB  D
01208:  BCF    xD4.2
0120A:  BTFSC  36.0
0120C:  BSF    xD4.2
....................    RED_Colour.B12 = EEpDat >> 1;
0120E:  BCF    FD8.0
01210:  RRCF   36,W
01212:  BCF    xD4.3
01214:  BTFSC  FE8.0
01216:  BSF    xD4.3
....................    RED_Colour.B13 = EEpDat >> 2;
01218:  RRCF   36,W
0121A:  MOVWF  00
0121C:  RRCF   00,F
0121E:  MOVLW  3F
01220:  ANDWF  00,F
01222:  BCF    xD4.4
01224:  BTFSC  00.0
01226:  BSF    xD4.4
....................    RED_Colour.B14 = EEpDat >> 3;
01228:  RRCF   36,W
0122A:  MOVWF  00
0122C:  RRCF   00,F
0122E:  RRCF   00,F
01230:  MOVLW  1F
01232:  ANDWF  00,F
01234:  BCF    xD4.5
01236:  BTFSC  00.0
01238:  BSF    xD4.5
....................    RED_Colour.B15 = EEpDat >> 4;
0123A:  SWAPF  36,W
0123C:  MOVWF  00
0123E:  MOVLW  0F
01240:  ANDWF  00,F
01242:  BCF    xD4.6
01244:  BTFSC  00.0
01246:  BSF    xD4.6
....................    RED_Colour.B16 = EEpDat >> 5;
01248:  SWAPF  36,W
0124A:  MOVWF  00
0124C:  RRCF   00,F
0124E:  MOVLW  07
01250:  ANDWF  00,F
01252:  BCF    xD4.7
01254:  BTFSC  00.0
01256:  BSF    xD4.7
....................    RED_Colour.B17 = EEpDat >> 6;
01258:  SWAPF  36,W
0125A:  MOVWF  00
0125C:  RRCF   00,F
0125E:  RRCF   00,F
01260:  MOVLW  03
01262:  ANDWF  00,F
01264:  BCF    xD5.0
01266:  BTFSC  00.0
01268:  BSF    xD5.0
....................    RED_Colour.B18 = EEpDat >> 7;
0126A:  CLRF   00
0126C:  BTFSC  36.7
0126E:  BSF    00.0
01270:  BCF    xD5.1
01272:  BTFSC  00.0
01274:  BSF    xD5.1
....................    
....................    EEpDat = read_eeprom(0x13);
01276:  MOVFF  FF2,E77
0127A:  BCF    FF2.7
0127C:  CLRF   FAA
0127E:  MOVLW  13
01280:  MOVWF  FA9
01282:  BCF    FA6.6
01284:  BCF    FA6.7
01286:  BSF    FA6.0
01288:  MOVF   FA8,W
0128A:  MOVLB  E
0128C:  BTFSC  x77.7
0128E:  BSF    FF2.7
01290:  MOVWF  36
....................    //Red19_20 = EEpDat;
....................    RED_Colour.B19 = EEpDat;
01292:  MOVLB  D
01294:  BCF    xD5.2
01296:  BTFSC  36.0
01298:  BSF    xD5.2
....................    RED_Colour.B20 = EEpDat >> 1;
0129A:  BCF    FD8.0
0129C:  RRCF   36,W
0129E:  BCF    xD5.3
012A0:  BTFSC  FE8.0
012A2:  BSF    xD5.3
....................    
....................    
....................    EEpDat = read_eeprom(0x14);
012A4:  MOVFF  FF2,E77
012A8:  BCF    FF2.7
012AA:  CLRF   FAA
012AC:  MOVLW  14
012AE:  MOVWF  FA9
012B0:  BCF    FA6.6
012B2:  BCF    FA6.7
012B4:  BSF    FA6.0
012B6:  MOVF   FA8,W
012B8:  MOVLB  E
012BA:  BTFSC  x77.7
012BC:  BSF    FF2.7
012BE:  MOVWF  36
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
012C0:  MOVLB  D
012C2:  BCF    xD7.0
012C4:  BTFSC  36.0
012C6:  BSF    xD7.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
012C8:  BCF    FD8.0
012CA:  RRCF   36,W
012CC:  BCF    xD7.1
012CE:  BTFSC  FE8.0
012D0:  BSF    xD7.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
012D2:  RRCF   36,W
012D4:  MOVWF  00
012D6:  RRCF   00,F
012D8:  MOVLW  3F
012DA:  ANDWF  00,F
012DC:  BCF    xD7.2
012DE:  BTFSC  00.0
012E0:  BSF    xD7.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
012E2:  RRCF   36,W
012E4:  MOVWF  00
012E6:  RRCF   00,F
012E8:  RRCF   00,F
012EA:  MOVLW  1F
012EC:  ANDWF  00,F
012EE:  BCF    xD7.3
012F0:  BTFSC  00.0
012F2:  BSF    xD7.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
012F4:  SWAPF  36,W
012F6:  MOVWF  00
012F8:  MOVLW  0F
012FA:  ANDWF  00,F
012FC:  BCF    xD7.4
012FE:  BTFSC  00.0
01300:  BSF    xD7.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
01302:  SWAPF  36,W
01304:  MOVWF  00
01306:  RRCF   00,F
01308:  MOVLW  07
0130A:  ANDWF  00,F
0130C:  BCF    xD7.5
0130E:  BTFSC  00.0
01310:  BSF    xD7.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
01312:  SWAPF  36,W
01314:  MOVWF  00
01316:  RRCF   00,F
01318:  RRCF   00,F
0131A:  MOVLW  03
0131C:  ANDWF  00,F
0131E:  BCF    xD7.6
01320:  BTFSC  00.0
01322:  BSF    xD7.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
01324:  CLRF   00
01326:  BTFSC  36.7
01328:  BSF    00.0
0132A:  BCF    xD7.7
0132C:  BTFSC  00.0
0132E:  BSF    xD7.7
....................    
....................    EEpDat = read_eeprom(0x15);
01330:  MOVFF  FF2,E77
01334:  BCF    FF2.7
01336:  CLRF   FAA
01338:  MOVLW  15
0133A:  MOVWF  FA9
0133C:  BCF    FA6.6
0133E:  BCF    FA6.7
01340:  BSF    FA6.0
01342:  MOVF   FA8,W
01344:  MOVLB  E
01346:  BTFSC  x77.7
01348:  BSF    FF2.7
0134A:  MOVWF  36
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
0134C:  MOVLB  D
0134E:  BCF    xD8.0
01350:  BTFSC  36.0
01352:  BSF    xD8.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
01354:  BCF    FD8.0
01356:  RRCF   36,W
01358:  BCF    xD8.1
0135A:  BTFSC  FE8.0
0135C:  BSF    xD8.1
....................    
....................    EEpDat = read_eeprom(0x16);
0135E:  MOVFF  FF2,E77
01362:  BCF    FF2.7
01364:  CLRF   FAA
01366:  MOVLW  16
01368:  MOVWF  FA9
0136A:  BCF    FA6.6
0136C:  BCF    FA6.7
0136E:  BSF    FA6.0
01370:  MOVF   FA8,W
01372:  MOVLB  E
01374:  BTFSC  x77.7
01376:  BSF    FF2.7
01378:  MOVWF  36
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0137A:  MOVLB  D
0137C:  BCF    xD8.2
0137E:  BTFSC  36.0
01380:  BSF    xD8.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
01382:  BCF    FD8.0
01384:  RRCF   36,W
01386:  BCF    xD8.3
01388:  BTFSC  FE8.0
0138A:  BSF    xD8.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
0138C:  RRCF   36,W
0138E:  MOVWF  00
01390:  RRCF   00,F
01392:  MOVLW  3F
01394:  ANDWF  00,F
01396:  BCF    xD8.4
01398:  BTFSC  00.0
0139A:  BSF    xD8.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
0139C:  RRCF   36,W
0139E:  MOVWF  00
013A0:  RRCF   00,F
013A2:  RRCF   00,F
013A4:  MOVLW  1F
013A6:  ANDWF  00,F
013A8:  BCF    xD8.5
013AA:  BTFSC  00.0
013AC:  BSF    xD8.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
013AE:  SWAPF  36,W
013B0:  MOVWF  00
013B2:  MOVLW  0F
013B4:  ANDWF  00,F
013B6:  BCF    xD8.6
013B8:  BTFSC  00.0
013BA:  BSF    xD8.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
013BC:  SWAPF  36,W
013BE:  MOVWF  00
013C0:  RRCF   00,F
013C2:  MOVLW  07
013C4:  ANDWF  00,F
013C6:  BCF    xD8.7
013C8:  BTFSC  00.0
013CA:  BSF    xD8.7
....................    GREEN_Colour.B17 = EEpDat >> 6;
013CC:  SWAPF  36,W
013CE:  MOVWF  00
013D0:  RRCF   00,F
013D2:  RRCF   00,F
013D4:  MOVLW  03
013D6:  ANDWF  00,F
013D8:  BCF    xD9.0
013DA:  BTFSC  00.0
013DC:  BSF    xD9.0
....................    GREEN_Colour.B18 = EEpDat >> 7;
013DE:  CLRF   00
013E0:  BTFSC  36.7
013E2:  BSF    00.0
013E4:  BCF    xD9.1
013E6:  BTFSC  00.0
013E8:  BSF    xD9.1
....................    
....................    EEpDat = read_eeprom(0x17);
013EA:  MOVFF  FF2,E77
013EE:  BCF    FF2.7
013F0:  CLRF   FAA
013F2:  MOVLW  17
013F4:  MOVWF  FA9
013F6:  BCF    FA6.6
013F8:  BCF    FA6.7
013FA:  BSF    FA6.0
013FC:  MOVF   FA8,W
013FE:  MOVLB  E
01400:  BTFSC  x77.7
01402:  BSF    FF2.7
01404:  MOVWF  36
....................    //Green19_20 = EEpDat;
....................    GREEN_Colour.B19 = EEpDat;
01406:  MOVLB  D
01408:  BCF    xD9.2
0140A:  BTFSC  36.0
0140C:  BSF    xD9.2
....................    GREEN_Colour.B20 = EEpDat >> 1;
0140E:  BCF    FD8.0
01410:  RRCF   36,W
01412:  BCF    xD9.3
01414:  BTFSC  FE8.0
01416:  BSF    xD9.3
....................    
....................   
.................... 
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
01418:  MOVFF  FF2,E77
0141C:  BCF    FF2.7
0141E:  CLRF   FAA
01420:  MOVLW  18
01422:  MOVWF  FA9
01424:  BCF    FA6.6
01426:  BCF    FA6.7
01428:  BSF    FA6.0
0142A:  MOVF   FA8,W
0142C:  MOVLB  E
0142E:  BTFSC  x77.7
01430:  BSF    FF2.7
01432:  MOVWF  55
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
01434:  MOVFF  FF2,E77
01438:  BCF    FF2.7
0143A:  CLRF   FAA
0143C:  MOVLW  19
0143E:  MOVWF  FA9
01440:  BCF    FA6.6
01442:  BCF    FA6.7
01444:  BSF    FA6.0
01446:  MOVF   FA8,W
01448:  BTFSC  x77.7
0144A:  BSF    FF2.7
0144C:  MOVWF  56
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
0144E:  MOVFF  FF2,E77
01452:  BCF    FF2.7
01454:  CLRF   FAA
01456:  MOVLW  1A
01458:  MOVWF  FA9
0145A:  BCF    FA6.6
0145C:  BCF    FA6.7
0145E:  BSF    FA6.0
01460:  MOVF   FA8,W
01462:  BTFSC  x77.7
01464:  BSF    FF2.7
01466:  MOVWF  57
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
01468:  MOVFF  FF2,E77
0146C:  BCF    FF2.7
0146E:  CLRF   FAA
01470:  MOVLW  1B
01472:  MOVWF  FA9
01474:  BCF    FA6.6
01476:  BCF    FA6.7
01478:  BSF    FA6.0
0147A:  MOVF   FA8,W
0147C:  BTFSC  x77.7
0147E:  BSF    FF2.7
01480:  MOVWF  58
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
01482:  MOVFF  FF2,E77
01486:  BCF    FF2.7
01488:  CLRF   FAA
0148A:  MOVLW  1C
0148C:  MOVWF  FA9
0148E:  BCF    FA6.6
01490:  BCF    FA6.7
01492:  BSF    FA6.0
01494:  MOVF   FA8,W
01496:  BTFSC  x77.7
01498:  BSF    FF2.7
0149A:  CLRF   x24
0149C:  MOVWF  x23
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
0149E:  MOVFF  FF2,E77
014A2:  BCF    FF2.7
014A4:  CLRF   FAA
014A6:  MOVLW  1D
014A8:  MOVWF  FA9
014AA:  BCF    FA6.6
014AC:  BCF    FA6.7
014AE:  BSF    FA6.0
014B0:  MOVF   FA8,W
014B2:  BTFSC  x77.7
014B4:  BSF    FF2.7
014B6:  MOVLB  0
014B8:  MOVWF  x64
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
014BA:  MOVFF  FF2,E77
014BE:  BCF    FF2.7
014C0:  CLRF   FAA
014C2:  MOVLW  1E
014C4:  MOVWF  FA9
014C6:  BCF    FA6.6
014C8:  BCF    FA6.7
014CA:  BSF    FA6.0
014CC:  MOVF   FA8,W
014CE:  MOVLB  E
014D0:  BTFSC  x77.7
014D2:  BSF    FF2.7
014D4:  CLRF   x26
014D6:  MOVWF  x25
....................    FaultDelayTime[2] = read_eeprom(0x1F);
014D8:  MOVFF  FF2,E77
014DC:  BCF    FF2.7
014DE:  CLRF   FAA
014E0:  MOVLW  1F
014E2:  MOVWF  FA9
014E4:  BCF    FA6.6
014E6:  BCF    FA6.7
014E8:  BSF    FA6.0
014EA:  MOVF   FA8,W
014EC:  BTFSC  x77.7
014EE:  BSF    FF2.7
014F0:  CLRF   x28
014F2:  MOVWF  x27
....................    FaultDelayTime[3] = read_eeprom(0x20);
014F4:  MOVFF  FF2,E77
014F8:  BCF    FF2.7
014FA:  CLRF   FAA
014FC:  MOVLW  20
014FE:  MOVWF  FA9
01500:  BCF    FA6.6
01502:  BCF    FA6.7
01504:  BSF    FA6.0
01506:  MOVF   FA8,W
01508:  BTFSC  x77.7
0150A:  BSF    FF2.7
0150C:  CLRF   x2A
0150E:  MOVWF  x29
....................    FaultDelayTime[4] = read_eeprom(0x21);
01510:  MOVFF  FF2,E77
01514:  BCF    FF2.7
01516:  CLRF   FAA
01518:  MOVLW  21
0151A:  MOVWF  FA9
0151C:  BCF    FA6.6
0151E:  BCF    FA6.7
01520:  BSF    FA6.0
01522:  MOVF   FA8,W
01524:  BTFSC  x77.7
01526:  BSF    FF2.7
01528:  CLRF   x2C
0152A:  MOVWF  x2B
....................    FaultDelayTime[5] = read_eeprom(0x22);
0152C:  MOVFF  FF2,E77
01530:  BCF    FF2.7
01532:  CLRF   FAA
01534:  MOVLW  22
01536:  MOVWF  FA9
01538:  BCF    FA6.6
0153A:  BCF    FA6.7
0153C:  BSF    FA6.0
0153E:  MOVF   FA8,W
01540:  BTFSC  x77.7
01542:  BSF    FF2.7
01544:  CLRF   x2E
01546:  MOVWF  x2D
....................    FaultDelayTime[6] = read_eeprom(0x23);
01548:  MOVFF  FF2,E77
0154C:  BCF    FF2.7
0154E:  CLRF   FAA
01550:  MOVLW  23
01552:  MOVWF  FA9
01554:  BCF    FA6.6
01556:  BCF    FA6.7
01558:  BSF    FA6.0
0155A:  MOVF   FA8,W
0155C:  BTFSC  x77.7
0155E:  BSF    FF2.7
01560:  CLRF   x30
01562:  MOVWF  x2F
....................    FaultDelayTime[7] = read_eeprom(0x24);
01564:  MOVFF  FF2,E77
01568:  BCF    FF2.7
0156A:  CLRF   FAA
0156C:  MOVLW  24
0156E:  MOVWF  FA9
01570:  BCF    FA6.6
01572:  BCF    FA6.7
01574:  BSF    FA6.0
01576:  MOVF   FA8,W
01578:  BTFSC  x77.7
0157A:  BSF    FF2.7
0157C:  CLRF   x32
0157E:  MOVWF  x31
....................    FaultDelayTime[8] = read_eeprom(0x25);
01580:  MOVFF  FF2,E77
01584:  BCF    FF2.7
01586:  CLRF   FAA
01588:  MOVLW  25
0158A:  MOVWF  FA9
0158C:  BCF    FA6.6
0158E:  BCF    FA6.7
01590:  BSF    FA6.0
01592:  MOVF   FA8,W
01594:  BTFSC  x77.7
01596:  BSF    FF2.7
01598:  CLRF   x34
0159A:  MOVWF  x33
....................    FaultDelayTime[9] = read_eeprom(0x26);
0159C:  MOVFF  FF2,E77
015A0:  BCF    FF2.7
015A2:  CLRF   FAA
015A4:  MOVLW  26
015A6:  MOVWF  FA9
015A8:  BCF    FA6.6
015AA:  BCF    FA6.7
015AC:  BSF    FA6.0
015AE:  MOVF   FA8,W
015B0:  BTFSC  x77.7
015B2:  BSF    FF2.7
015B4:  CLRF   x36
015B6:  MOVWF  x35
....................    FaultDelayTime[10] = read_eeprom(0x27);
015B8:  MOVFF  FF2,E77
015BC:  BCF    FF2.7
015BE:  CLRF   FAA
015C0:  MOVLW  27
015C2:  MOVWF  FA9
015C4:  BCF    FA6.6
015C6:  BCF    FA6.7
015C8:  BSF    FA6.0
015CA:  MOVF   FA8,W
015CC:  BTFSC  x77.7
015CE:  BSF    FF2.7
015D0:  CLRF   x38
015D2:  MOVWF  x37
....................    FaultDelayTime[11] = read_eeprom(0x28);
015D4:  MOVFF  FF2,E77
015D8:  BCF    FF2.7
015DA:  CLRF   FAA
015DC:  MOVLW  28
015DE:  MOVWF  FA9
015E0:  BCF    FA6.6
015E2:  BCF    FA6.7
015E4:  BSF    FA6.0
015E6:  MOVF   FA8,W
015E8:  BTFSC  x77.7
015EA:  BSF    FF2.7
015EC:  CLRF   x3A
015EE:  MOVWF  x39
....................    FaultDelayTime[12] = read_eeprom(0x29);
015F0:  MOVFF  FF2,E77
015F4:  BCF    FF2.7
015F6:  CLRF   FAA
015F8:  MOVLW  29
015FA:  MOVWF  FA9
015FC:  BCF    FA6.6
015FE:  BCF    FA6.7
01600:  BSF    FA6.0
01602:  MOVF   FA8,W
01604:  BTFSC  x77.7
01606:  BSF    FF2.7
01608:  CLRF   x3C
0160A:  MOVWF  x3B
....................    FaultDelayTime[13] = read_eeprom(0x2A);
0160C:  MOVFF  FF2,E77
01610:  BCF    FF2.7
01612:  CLRF   FAA
01614:  MOVLW  2A
01616:  MOVWF  FA9
01618:  BCF    FA6.6
0161A:  BCF    FA6.7
0161C:  BSF    FA6.0
0161E:  MOVF   FA8,W
01620:  BTFSC  x77.7
01622:  BSF    FF2.7
01624:  CLRF   x3E
01626:  MOVWF  x3D
....................    FaultDelayTime[14] = read_eeprom(0x2B);
01628:  MOVFF  FF2,E77
0162C:  BCF    FF2.7
0162E:  CLRF   FAA
01630:  MOVLW  2B
01632:  MOVWF  FA9
01634:  BCF    FA6.6
01636:  BCF    FA6.7
01638:  BSF    FA6.0
0163A:  MOVF   FA8,W
0163C:  BTFSC  x77.7
0163E:  BSF    FF2.7
01640:  CLRF   x40
01642:  MOVWF  x3F
....................    FaultDelayTime[15] = read_eeprom(0x2C);
01644:  MOVFF  FF2,E77
01648:  BCF    FF2.7
0164A:  CLRF   FAA
0164C:  MOVLW  2C
0164E:  MOVWF  FA9
01650:  BCF    FA6.6
01652:  BCF    FA6.7
01654:  BSF    FA6.0
01656:  MOVF   FA8,W
01658:  BTFSC  x77.7
0165A:  BSF    FF2.7
0165C:  CLRF   x42
0165E:  MOVWF  x41
....................    FaultDelayTime[16] = read_eeprom(0x2D);
01660:  MOVFF  FF2,E77
01664:  BCF    FF2.7
01666:  CLRF   FAA
01668:  MOVLW  2D
0166A:  MOVWF  FA9
0166C:  BCF    FA6.6
0166E:  BCF    FA6.7
01670:  BSF    FA6.0
01672:  MOVF   FA8,W
01674:  BTFSC  x77.7
01676:  BSF    FF2.7
01678:  CLRF   x44
0167A:  MOVWF  x43
....................    FaultDelayTime[17] = read_eeprom(0x2E);
0167C:  MOVFF  FF2,E77
01680:  BCF    FF2.7
01682:  CLRF   FAA
01684:  MOVLW  2E
01686:  MOVWF  FA9
01688:  BCF    FA6.6
0168A:  BCF    FA6.7
0168C:  BSF    FA6.0
0168E:  MOVF   FA8,W
01690:  BTFSC  x77.7
01692:  BSF    FF2.7
01694:  CLRF   x46
01696:  MOVWF  x45
....................    FaultDelayTime[18] = read_eeprom(0x2F);
01698:  MOVFF  FF2,E77
0169C:  BCF    FF2.7
0169E:  CLRF   FAA
016A0:  MOVLW  2F
016A2:  MOVWF  FA9
016A4:  BCF    FA6.6
016A6:  BCF    FA6.7
016A8:  BSF    FA6.0
016AA:  MOVF   FA8,W
016AC:  BTFSC  x77.7
016AE:  BSF    FF2.7
016B0:  CLRF   x48
016B2:  MOVWF  x47
....................    FaultDelayTime[19] = read_eeprom(0x30);
016B4:  MOVFF  FF2,E77
016B8:  BCF    FF2.7
016BA:  CLRF   FAA
016BC:  MOVLW  30
016BE:  MOVWF  FA9
016C0:  BCF    FA6.6
016C2:  BCF    FA6.7
016C4:  BSF    FA6.0
016C6:  MOVF   FA8,W
016C8:  BTFSC  x77.7
016CA:  BSF    FF2.7
016CC:  CLRF   x4A
016CE:  MOVWF  x49
....................    FaultDelayTime[20] = read_eeprom(0x31);
016D0:  MOVFF  FF2,E77
016D4:  BCF    FF2.7
016D6:  CLRF   FAA
016D8:  MOVLW  31
016DA:  MOVWF  FA9
016DC:  BCF    FA6.6
016DE:  BCF    FA6.7
016E0:  BSF    FA6.0
016E2:  MOVF   FA8,W
016E4:  BTFSC  x77.7
016E6:  BSF    FF2.7
016E8:  CLRF   x4C
016EA:  MOVWF  x4B
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
016EC:  CLRF   x6D
....................    for(; ; a++)
....................    {
....................       restart_wdt();
016EE:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
016F0:  MOVLW  32
016F2:  ADDWF  x6D,W
016F4:  MOVWF  x77
016F6:  MOVFF  FF2,E78
016FA:  BCF    FF2.7
016FC:  CLRF   FAA
016FE:  MOVFF  E77,FA9
01702:  BCF    FA6.6
01704:  BCF    FA6.7
01706:  BSF    FA6.0
01708:  MOVF   FA8,W
0170A:  BTFSC  x78.7
0170C:  BSF    FF2.7
0170E:  MOVWF  x6E
....................       if((phonenum == 0x0D) || (a > 15))
01710:  MOVF   x6E,W
01712:  SUBLW  0D
01714:  BZ    171C
01716:  MOVF   x6D,W
01718:  SUBLW  0F
0171A:  BC    1764
....................       {
....................          sms_phonenumber[a] =  '\0';
0171C:  CLRF   03
0171E:  MOVF   x6D,W
01720:  ADDLW  74
01722:  MOVWF  FE9
01724:  MOVLW  0A
01726:  ADDWFC 03,W
01728:  MOVWF  FEA
0172A:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
0172C:  MOVLW  32
0172E:  ADDWF  x6D,W
01730:  MOVWF  x77
01732:  MOVF   FF2,W
01734:  MOVWF  00
01736:  BCF    FF2.7
01738:  CLRF   FAA
0173A:  MOVFF  E77,FA9
0173E:  MOVFF  E6E,FA8
01742:  BCF    FA6.6
01744:  BCF    FA6.7
01746:  BSF    FA6.2
01748:  MOVLB  F
0174A:  MOVLW  55
0174C:  MOVWF  FA7
0174E:  MOVLW  AA
01750:  MOVWF  FA7
01752:  BSF    FA6.1
01754:  BTFSC  FA6.1
01756:  BRA    1754
01758:  BCF    FA6.2
0175A:  MOVF   00,W
0175C:  IORWF  FF2,F
....................          break;
0175E:  BRA    1780
....................       }
01760:  BRA    1778
01762:  MOVLB  E
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
01764:  CLRF   03
01766:  MOVF   x6D,W
01768:  ADDLW  74
0176A:  MOVWF  FE9
0176C:  MOVLW  0A
0176E:  ADDWFC 03,W
01770:  MOVWF  FEA
01772:  MOVFF  E6E,FEF
01776:  MOVLB  F
....................       }
01778:  MOVLB  E
0177A:  INCF   x6D,F
0177C:  BRA    16EE
0177E:  MOVLB  F
....................    }
....................    
....................       
....................    int16  i =3,j=0,k=0 , buff;
01780:  MOVLB  E
01782:  CLRF   x70
01784:  MOVLW  03
01786:  MOVWF  x6F
01788:  CLRF   x72
0178A:  CLRF   x71
0178C:  CLRF   x74
0178E:  CLRF   x73
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01790:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01792:  MOVLW  5D
01794:  ADDWF  x6F,W
01796:  MOVWF  x77
01798:  MOVLW  00
0179A:  ADDWFC x70,W
0179C:  MOVWF  x78
0179E:  MOVFF  FF2,E79
017A2:  BCF    FF2.7
017A4:  MOVFF  E78,FAA
017A8:  MOVFF  E77,FA9
017AC:  BCF    FA6.6
017AE:  BCF    FA6.7
017B0:  BSF    FA6.0
017B2:  MOVF   FA8,W
017B4:  BTFSC  x79.7
017B6:  BSF    FF2.7
017B8:  CLRF   x76
017BA:  MOVWF  x75
....................       
....................       if((buff == 0x0D)|| (j>30))
017BC:  MOVF   x75,W
017BE:  SUBLW  0D
017C0:  BNZ   17C6
017C2:  MOVF   x76,F
017C4:  BZ    17D0
017C6:  MOVF   x72,F
017C8:  BNZ   17D0
017CA:  MOVF   x71,W
017CC:  SUBLW  1E
017CE:  BC    17E2
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
017D0:  MOVLW  83
017D2:  ADDWF  x71,W
017D4:  MOVWF  FE9
017D6:  MOVLW  0A
017D8:  ADDWFC x72,W
017DA:  MOVWF  FEA
017DC:  CLRF   FEF
....................          break;
017DE:  BRA    1806
....................       }
017E0:  BRA    17F2
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
017E2:  MOVLW  83
017E4:  ADDWF  x71,W
017E6:  MOVWF  FE9
017E8:  MOVLW  0A
017EA:  ADDWFC x72,W
017EC:  MOVWF  FEA
017EE:  MOVFF  E75,FEF
....................       }
017F2:  MOVFF  E70,03
017F6:  MOVF   x6F,W
017F8:  INCF   x6F,F
017FA:  BTFSC  FD8.2
017FC:  INCF   x70,F
017FE:  INCF   x71,F
01800:  BTFSC  FD8.2
01802:  INCF   x72,F
01804:  BRA    1790
....................    }
....................    
....................    i++;
01806:  INCF   x6F,F
01808:  BTFSC  FD8.2
0180A:  INCF   x70,F
....................    j=0;
0180C:  CLRF   x72
0180E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01810:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01812:  MOVLW  5D
01814:  ADDWF  x6F,W
01816:  MOVWF  x77
01818:  MOVLW  00
0181A:  ADDWFC x70,W
0181C:  MOVWF  x78
0181E:  MOVFF  FF2,E79
01822:  BCF    FF2.7
01824:  MOVFF  E78,FAA
01828:  MOVFF  E77,FA9
0182C:  BCF    FA6.6
0182E:  BCF    FA6.7
01830:  BSF    FA6.0
01832:  MOVF   FA8,W
01834:  BTFSC  x79.7
01836:  BSF    FF2.7
01838:  CLRF   x76
0183A:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
0183C:  MOVF   x75,W
0183E:  SUBLW  0D
01840:  BNZ   1846
01842:  MOVF   x76,F
01844:  BZ    1850
01846:  MOVF   x72,F
01848:  BNZ   1850
0184A:  MOVF   x71,W
0184C:  SUBLW  1E
0184E:  BC    1862
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
01850:  MOVLW  A3
01852:  ADDWF  x71,W
01854:  MOVWF  FE9
01856:  MOVLW  0A
01858:  ADDWFC x72,W
0185A:  MOVWF  FEA
0185C:  CLRF   FEF
....................          break;
0185E:  BRA    1886
....................       }
01860:  BRA    1872
....................       else
....................       {
....................          SMS_Massage2[j] = buff;         
01862:  MOVLW  A3
01864:  ADDWF  x71,W
01866:  MOVWF  FE9
01868:  MOVLW  0A
0186A:  ADDWFC x72,W
0186C:  MOVWF  FEA
0186E:  MOVFF  E75,FEF
....................       }
01872:  MOVFF  E70,03
01876:  MOVF   x6F,W
01878:  INCF   x6F,F
0187A:  BTFSC  FD8.2
0187C:  INCF   x70,F
0187E:  INCF   x71,F
01880:  BTFSC  FD8.2
01882:  INCF   x72,F
01884:  BRA    1810
....................    }
....................    
....................    i++;
01886:  INCF   x6F,F
01888:  BTFSC  FD8.2
0188A:  INCF   x70,F
....................    j=0;
0188C:  CLRF   x72
0188E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01890:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01892:  MOVLW  5D
01894:  ADDWF  x6F,W
01896:  MOVWF  x77
01898:  MOVLW  00
0189A:  ADDWFC x70,W
0189C:  MOVWF  x78
0189E:  MOVFF  FF2,E79
018A2:  BCF    FF2.7
018A4:  MOVFF  E78,FAA
018A8:  MOVFF  E77,FA9
018AC:  BCF    FA6.6
018AE:  BCF    FA6.7
018B0:  BSF    FA6.0
018B2:  MOVF   FA8,W
018B4:  BTFSC  x79.7
018B6:  BSF    FF2.7
018B8:  CLRF   x76
018BA:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
018BC:  MOVF   x75,W
018BE:  SUBLW  0D
018C0:  BNZ   18C6
018C2:  MOVF   x76,F
018C4:  BZ    18D0
018C6:  MOVF   x72,F
018C8:  BNZ   18D0
018CA:  MOVF   x71,W
018CC:  SUBLW  1E
018CE:  BC    18E2
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
018D0:  MOVLW  C3
018D2:  ADDWF  x71,W
018D4:  MOVWF  FE9
018D6:  MOVLW  0A
018D8:  ADDWFC x72,W
018DA:  MOVWF  FEA
018DC:  CLRF   FEF
....................          break;
018DE:  BRA    1906
....................       }
018E0:  BRA    18F2
....................       else
....................       {
....................          SMS_Massage3[j] = buff;         
018E2:  MOVLW  C3
018E4:  ADDWF  x71,W
018E6:  MOVWF  FE9
018E8:  MOVLW  0A
018EA:  ADDWFC x72,W
018EC:  MOVWF  FEA
018EE:  MOVFF  E75,FEF
....................       }
018F2:  MOVFF  E70,03
018F6:  MOVF   x6F,W
018F8:  INCF   x6F,F
018FA:  BTFSC  FD8.2
018FC:  INCF   x70,F
018FE:  INCF   x71,F
01900:  BTFSC  FD8.2
01902:  INCF   x72,F
01904:  BRA    1890
....................    }
....................    
....................    i++;
01906:  INCF   x6F,F
01908:  BTFSC  FD8.2
0190A:  INCF   x70,F
....................    j=0;
0190C:  CLRF   x72
0190E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01910:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01912:  MOVLW  5D
01914:  ADDWF  x6F,W
01916:  MOVWF  x77
01918:  MOVLW  00
0191A:  ADDWFC x70,W
0191C:  MOVWF  x78
0191E:  MOVFF  FF2,E79
01922:  BCF    FF2.7
01924:  MOVFF  E78,FAA
01928:  MOVFF  E77,FA9
0192C:  BCF    FA6.6
0192E:  BCF    FA6.7
01930:  BSF    FA6.0
01932:  MOVF   FA8,W
01934:  BTFSC  x79.7
01936:  BSF    FF2.7
01938:  CLRF   x76
0193A:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
0193C:  MOVF   x75,W
0193E:  SUBLW  0D
01940:  BNZ   1946
01942:  MOVF   x76,F
01944:  BZ    1950
01946:  MOVF   x72,F
01948:  BNZ   1950
0194A:  MOVF   x71,W
0194C:  SUBLW  1E
0194E:  BC    1962
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
01950:  MOVLW  E3
01952:  ADDWF  x71,W
01954:  MOVWF  FE9
01956:  MOVLW  0A
01958:  ADDWFC x72,W
0195A:  MOVWF  FEA
0195C:  CLRF   FEF
....................          break;
0195E:  BRA    1986
....................       }
01960:  BRA    1972
....................       else
....................       {
....................          SMS_Massage4[j] = buff;         
01962:  MOVLW  E3
01964:  ADDWF  x71,W
01966:  MOVWF  FE9
01968:  MOVLW  0A
0196A:  ADDWFC x72,W
0196C:  MOVWF  FEA
0196E:  MOVFF  E75,FEF
....................       }
01972:  MOVFF  E70,03
01976:  MOVF   x6F,W
01978:  INCF   x6F,F
0197A:  BTFSC  FD8.2
0197C:  INCF   x70,F
0197E:  INCF   x71,F
01980:  BTFSC  FD8.2
01982:  INCF   x72,F
01984:  BRA    1910
....................    }
....................    
....................    i++;
01986:  INCF   x6F,F
01988:  BTFSC  FD8.2
0198A:  INCF   x70,F
....................    j=0;
0198C:  CLRF   x72
0198E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01990:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01992:  MOVLW  5D
01994:  ADDWF  x6F,W
01996:  MOVWF  x77
01998:  MOVLW  00
0199A:  ADDWFC x70,W
0199C:  MOVWF  x78
0199E:  MOVFF  FF2,E79
019A2:  BCF    FF2.7
019A4:  MOVFF  E78,FAA
019A8:  MOVFF  E77,FA9
019AC:  BCF    FA6.6
019AE:  BCF    FA6.7
019B0:  BSF    FA6.0
019B2:  MOVF   FA8,W
019B4:  BTFSC  x79.7
019B6:  BSF    FF2.7
019B8:  CLRF   x76
019BA:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
019BC:  MOVF   x75,W
019BE:  SUBLW  0D
019C0:  BNZ   19C6
019C2:  MOVF   x76,F
019C4:  BZ    19D0
019C6:  MOVF   x72,F
019C8:  BNZ   19D0
019CA:  MOVF   x71,W
019CC:  SUBLW  1E
019CE:  BC    19E2
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
019D0:  MOVLW  03
019D2:  ADDWF  x71,W
019D4:  MOVWF  FE9
019D6:  MOVLW  0B
019D8:  ADDWFC x72,W
019DA:  MOVWF  FEA
019DC:  CLRF   FEF
....................          break;
019DE:  BRA    1A06
....................       }
019E0:  BRA    19F2
....................       else
....................       {
....................          SMS_Massage5[j] = buff;         
019E2:  MOVLW  03
019E4:  ADDWF  x71,W
019E6:  MOVWF  FE9
019E8:  MOVLW  0B
019EA:  ADDWFC x72,W
019EC:  MOVWF  FEA
019EE:  MOVFF  E75,FEF
....................       }
019F2:  MOVFF  E70,03
019F6:  MOVF   x6F,W
019F8:  INCF   x6F,F
019FA:  BTFSC  FD8.2
019FC:  INCF   x70,F
019FE:  INCF   x71,F
01A00:  BTFSC  FD8.2
01A02:  INCF   x72,F
01A04:  BRA    1990
....................    }
....................    
....................    i++;
01A06:  INCF   x6F,F
01A08:  BTFSC  FD8.2
01A0A:  INCF   x70,F
....................    j=0;
01A0C:  CLRF   x72
01A0E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01A10:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01A12:  MOVLW  5D
01A14:  ADDWF  x6F,W
01A16:  MOVWF  x77
01A18:  MOVLW  00
01A1A:  ADDWFC x70,W
01A1C:  MOVWF  x78
01A1E:  MOVFF  FF2,E79
01A22:  BCF    FF2.7
01A24:  MOVFF  E78,FAA
01A28:  MOVFF  E77,FA9
01A2C:  BCF    FA6.6
01A2E:  BCF    FA6.7
01A30:  BSF    FA6.0
01A32:  MOVF   FA8,W
01A34:  BTFSC  x79.7
01A36:  BSF    FF2.7
01A38:  CLRF   x76
01A3A:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01A3C:  MOVF   x75,W
01A3E:  SUBLW  0D
01A40:  BNZ   1A46
01A42:  MOVF   x76,F
01A44:  BZ    1A50
01A46:  MOVF   x72,F
01A48:  BNZ   1A50
01A4A:  MOVF   x71,W
01A4C:  SUBLW  1E
01A4E:  BC    1A62
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
01A50:  MOVLW  23
01A52:  ADDWF  x71,W
01A54:  MOVWF  FE9
01A56:  MOVLW  0B
01A58:  ADDWFC x72,W
01A5A:  MOVWF  FEA
01A5C:  CLRF   FEF
....................          break;
01A5E:  BRA    1A86
....................       }
01A60:  BRA    1A72
....................       else
....................       {
....................          SMS_Massage6[j] = buff;         
01A62:  MOVLW  23
01A64:  ADDWF  x71,W
01A66:  MOVWF  FE9
01A68:  MOVLW  0B
01A6A:  ADDWFC x72,W
01A6C:  MOVWF  FEA
01A6E:  MOVFF  E75,FEF
....................       }
01A72:  MOVFF  E70,03
01A76:  MOVF   x6F,W
01A78:  INCF   x6F,F
01A7A:  BTFSC  FD8.2
01A7C:  INCF   x70,F
01A7E:  INCF   x71,F
01A80:  BTFSC  FD8.2
01A82:  INCF   x72,F
01A84:  BRA    1A10
....................    }
....................    
....................    i++;
01A86:  INCF   x6F,F
01A88:  BTFSC  FD8.2
01A8A:  INCF   x70,F
....................    j=0;
01A8C:  CLRF   x72
01A8E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01A90:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01A92:  MOVLW  5D
01A94:  ADDWF  x6F,W
01A96:  MOVWF  x77
01A98:  MOVLW  00
01A9A:  ADDWFC x70,W
01A9C:  MOVWF  x78
01A9E:  MOVFF  FF2,E79
01AA2:  BCF    FF2.7
01AA4:  MOVFF  E78,FAA
01AA8:  MOVFF  E77,FA9
01AAC:  BCF    FA6.6
01AAE:  BCF    FA6.7
01AB0:  BSF    FA6.0
01AB2:  MOVF   FA8,W
01AB4:  BTFSC  x79.7
01AB6:  BSF    FF2.7
01AB8:  CLRF   x76
01ABA:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01ABC:  MOVF   x75,W
01ABE:  SUBLW  0D
01AC0:  BNZ   1AC6
01AC2:  MOVF   x76,F
01AC4:  BZ    1AD0
01AC6:  MOVF   x72,F
01AC8:  BNZ   1AD0
01ACA:  MOVF   x71,W
01ACC:  SUBLW  1E
01ACE:  BC    1AE2
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
01AD0:  MOVLW  43
01AD2:  ADDWF  x71,W
01AD4:  MOVWF  FE9
01AD6:  MOVLW  0B
01AD8:  ADDWFC x72,W
01ADA:  MOVWF  FEA
01ADC:  CLRF   FEF
....................          break;
01ADE:  BRA    1B06
....................       }
01AE0:  BRA    1AF2
....................       else
....................       {
....................          SMS_Massage7[j] = buff;         
01AE2:  MOVLW  43
01AE4:  ADDWF  x71,W
01AE6:  MOVWF  FE9
01AE8:  MOVLW  0B
01AEA:  ADDWFC x72,W
01AEC:  MOVWF  FEA
01AEE:  MOVFF  E75,FEF
....................       }
01AF2:  MOVFF  E70,03
01AF6:  MOVF   x6F,W
01AF8:  INCF   x6F,F
01AFA:  BTFSC  FD8.2
01AFC:  INCF   x70,F
01AFE:  INCF   x71,F
01B00:  BTFSC  FD8.2
01B02:  INCF   x72,F
01B04:  BRA    1A90
....................    }
....................    
....................    i++;
01B06:  INCF   x6F,F
01B08:  BTFSC  FD8.2
01B0A:  INCF   x70,F
....................    j=0;
01B0C:  CLRF   x72
01B0E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01B10:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01B12:  MOVLW  5D
01B14:  ADDWF  x6F,W
01B16:  MOVWF  x77
01B18:  MOVLW  00
01B1A:  ADDWFC x70,W
01B1C:  MOVWF  x78
01B1E:  MOVFF  FF2,E79
01B22:  BCF    FF2.7
01B24:  MOVFF  E78,FAA
01B28:  MOVFF  E77,FA9
01B2C:  BCF    FA6.6
01B2E:  BCF    FA6.7
01B30:  BSF    FA6.0
01B32:  MOVF   FA8,W
01B34:  BTFSC  x79.7
01B36:  BSF    FF2.7
01B38:  CLRF   x76
01B3A:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01B3C:  MOVF   x75,W
01B3E:  SUBLW  0D
01B40:  BNZ   1B46
01B42:  MOVF   x76,F
01B44:  BZ    1B50
01B46:  MOVF   x72,F
01B48:  BNZ   1B50
01B4A:  MOVF   x71,W
01B4C:  SUBLW  1E
01B4E:  BC    1B62
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01B50:  MOVLW  63
01B52:  ADDWF  x71,W
01B54:  MOVWF  FE9
01B56:  MOVLW  0B
01B58:  ADDWFC x72,W
01B5A:  MOVWF  FEA
01B5C:  CLRF   FEF
....................          break;
01B5E:  BRA    1B86
....................       }
01B60:  BRA    1B72
....................       else
....................       {
....................          SMS_Massage8[j] = buff;        
01B62:  MOVLW  63
01B64:  ADDWF  x71,W
01B66:  MOVWF  FE9
01B68:  MOVLW  0B
01B6A:  ADDWFC x72,W
01B6C:  MOVWF  FEA
01B6E:  MOVFF  E75,FEF
....................       }
01B72:  MOVFF  E70,03
01B76:  MOVF   x6F,W
01B78:  INCF   x6F,F
01B7A:  BTFSC  FD8.2
01B7C:  INCF   x70,F
01B7E:  INCF   x71,F
01B80:  BTFSC  FD8.2
01B82:  INCF   x72,F
01B84:  BRA    1B10
....................    }
....................    
....................    i++;
01B86:  INCF   x6F,F
01B88:  BTFSC  FD8.2
01B8A:  INCF   x70,F
....................    j=0;
01B8C:  CLRF   x72
01B8E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01B90:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01B92:  MOVLW  5D
01B94:  ADDWF  x6F,W
01B96:  MOVWF  x77
01B98:  MOVLW  00
01B9A:  ADDWFC x70,W
01B9C:  MOVWF  x78
01B9E:  MOVFF  FF2,E79
01BA2:  BCF    FF2.7
01BA4:  MOVFF  E78,FAA
01BA8:  MOVFF  E77,FA9
01BAC:  BCF    FA6.6
01BAE:  BCF    FA6.7
01BB0:  BSF    FA6.0
01BB2:  MOVF   FA8,W
01BB4:  BTFSC  x79.7
01BB6:  BSF    FF2.7
01BB8:  CLRF   x76
01BBA:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01BBC:  MOVF   x75,W
01BBE:  SUBLW  0D
01BC0:  BNZ   1BC6
01BC2:  MOVF   x76,F
01BC4:  BZ    1BD0
01BC6:  MOVF   x72,F
01BC8:  BNZ   1BD0
01BCA:  MOVF   x71,W
01BCC:  SUBLW  1E
01BCE:  BC    1BE2
....................       {
....................          SMS_Massage9[j] = '\0' ; // end string
01BD0:  MOVLW  83
01BD2:  ADDWF  x71,W
01BD4:  MOVWF  FE9
01BD6:  MOVLW  0B
01BD8:  ADDWFC x72,W
01BDA:  MOVWF  FEA
01BDC:  CLRF   FEF
....................          break;
01BDE:  BRA    1C06
....................       }
01BE0:  BRA    1BF2
....................       else
....................       {
....................          SMS_Massage9[j] = buff;         
01BE2:  MOVLW  83
01BE4:  ADDWF  x71,W
01BE6:  MOVWF  FE9
01BE8:  MOVLW  0B
01BEA:  ADDWFC x72,W
01BEC:  MOVWF  FEA
01BEE:  MOVFF  E75,FEF
....................       }
01BF2:  MOVFF  E70,03
01BF6:  MOVF   x6F,W
01BF8:  INCF   x6F,F
01BFA:  BTFSC  FD8.2
01BFC:  INCF   x70,F
01BFE:  INCF   x71,F
01C00:  BTFSC  FD8.2
01C02:  INCF   x72,F
01C04:  BRA    1B90
....................    }
....................    
....................    i++;
01C06:  INCF   x6F,F
01C08:  BTFSC  FD8.2
01C0A:  INCF   x70,F
....................    j=0;
01C0C:  CLRF   x72
01C0E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01C10:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01C12:  MOVLW  5D
01C14:  ADDWF  x6F,W
01C16:  MOVWF  x77
01C18:  MOVLW  00
01C1A:  ADDWFC x70,W
01C1C:  MOVWF  x78
01C1E:  MOVFF  FF2,E79
01C22:  BCF    FF2.7
01C24:  MOVFF  E78,FAA
01C28:  MOVFF  E77,FA9
01C2C:  BCF    FA6.6
01C2E:  BCF    FA6.7
01C30:  BSF    FA6.0
01C32:  MOVF   FA8,W
01C34:  BTFSC  x79.7
01C36:  BSF    FF2.7
01C38:  CLRF   x76
01C3A:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01C3C:  MOVF   x75,W
01C3E:  SUBLW  0D
01C40:  BNZ   1C46
01C42:  MOVF   x76,F
01C44:  BZ    1C50
01C46:  MOVF   x72,F
01C48:  BNZ   1C50
01C4A:  MOVF   x71,W
01C4C:  SUBLW  1E
01C4E:  BC    1C62
....................       {
....................          SMS_Massage10[j] = '\0' ; // end string
01C50:  MOVLW  A3
01C52:  ADDWF  x71,W
01C54:  MOVWF  FE9
01C56:  MOVLW  0B
01C58:  ADDWFC x72,W
01C5A:  MOVWF  FEA
01C5C:  CLRF   FEF
....................          break;
01C5E:  BRA    1C86
....................       }
01C60:  BRA    1C72
....................       else
....................       {
....................          SMS_Massage10[j] = buff;        
01C62:  MOVLW  A3
01C64:  ADDWF  x71,W
01C66:  MOVWF  FE9
01C68:  MOVLW  0B
01C6A:  ADDWFC x72,W
01C6C:  MOVWF  FEA
01C6E:  MOVFF  E75,FEF
....................       }
01C72:  MOVFF  E70,03
01C76:  MOVF   x6F,W
01C78:  INCF   x6F,F
01C7A:  BTFSC  FD8.2
01C7C:  INCF   x70,F
01C7E:  INCF   x71,F
01C80:  BTFSC  FD8.2
01C82:  INCF   x72,F
01C84:  BRA    1C10
....................    }
....................       
....................    i++;
01C86:  INCF   x6F,F
01C88:  BTFSC  FD8.2
01C8A:  INCF   x70,F
....................    j=0;
01C8C:  CLRF   x72
01C8E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01C90:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01C92:  MOVLW  5D
01C94:  ADDWF  x6F,W
01C96:  MOVWF  x77
01C98:  MOVLW  00
01C9A:  ADDWFC x70,W
01C9C:  MOVWF  x78
01C9E:  MOVFF  FF2,E79
01CA2:  BCF    FF2.7
01CA4:  MOVFF  E78,FAA
01CA8:  MOVFF  E77,FA9
01CAC:  BCF    FA6.6
01CAE:  BCF    FA6.7
01CB0:  BSF    FA6.0
01CB2:  MOVF   FA8,W
01CB4:  BTFSC  x79.7
01CB6:  BSF    FF2.7
01CB8:  CLRF   x76
01CBA:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01CBC:  MOVF   x75,W
01CBE:  SUBLW  0D
01CC0:  BNZ   1CC6
01CC2:  MOVF   x76,F
01CC4:  BZ    1CD0
01CC6:  MOVF   x72,F
01CC8:  BNZ   1CD0
01CCA:  MOVF   x71,W
01CCC:  SUBLW  1E
01CCE:  BC    1CE2
....................       {
....................          SMS_Massage11[j] = '\0' ; // end string
01CD0:  MOVLW  C3
01CD2:  ADDWF  x71,W
01CD4:  MOVWF  FE9
01CD6:  MOVLW  0B
01CD8:  ADDWFC x72,W
01CDA:  MOVWF  FEA
01CDC:  CLRF   FEF
....................          break;
01CDE:  BRA    1D06
....................       }
01CE0:  BRA    1CF2
....................       else
....................       {
....................          SMS_Massage11[j] = buff;        
01CE2:  MOVLW  C3
01CE4:  ADDWF  x71,W
01CE6:  MOVWF  FE9
01CE8:  MOVLW  0B
01CEA:  ADDWFC x72,W
01CEC:  MOVWF  FEA
01CEE:  MOVFF  E75,FEF
....................       }
01CF2:  MOVFF  E70,03
01CF6:  MOVF   x6F,W
01CF8:  INCF   x6F,F
01CFA:  BTFSC  FD8.2
01CFC:  INCF   x70,F
01CFE:  INCF   x71,F
01D00:  BTFSC  FD8.2
01D02:  INCF   x72,F
01D04:  BRA    1C90
....................    }
....................       
....................    i++;
01D06:  INCF   x6F,F
01D08:  BTFSC  FD8.2
01D0A:  INCF   x70,F
....................    j=0;
01D0C:  CLRF   x72
01D0E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01D10:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01D12:  MOVLW  5D
01D14:  ADDWF  x6F,W
01D16:  MOVWF  x77
01D18:  MOVLW  00
01D1A:  ADDWFC x70,W
01D1C:  MOVWF  x78
01D1E:  MOVFF  FF2,E79
01D22:  BCF    FF2.7
01D24:  MOVFF  E78,FAA
01D28:  MOVFF  E77,FA9
01D2C:  BCF    FA6.6
01D2E:  BCF    FA6.7
01D30:  BSF    FA6.0
01D32:  MOVF   FA8,W
01D34:  BTFSC  x79.7
01D36:  BSF    FF2.7
01D38:  CLRF   x76
01D3A:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01D3C:  MOVF   x75,W
01D3E:  SUBLW  0D
01D40:  BNZ   1D46
01D42:  MOVF   x76,F
01D44:  BZ    1D50
01D46:  MOVF   x72,F
01D48:  BNZ   1D50
01D4A:  MOVF   x71,W
01D4C:  SUBLW  1E
01D4E:  BC    1D62
....................       {
....................          SMS_Massage12[j] = '\0' ; // end string
01D50:  MOVLW  E3
01D52:  ADDWF  x71,W
01D54:  MOVWF  FE9
01D56:  MOVLW  0B
01D58:  ADDWFC x72,W
01D5A:  MOVWF  FEA
01D5C:  CLRF   FEF
....................          break;
01D5E:  BRA    1D86
....................       }
01D60:  BRA    1D72
....................       else
....................       {
....................          SMS_Massage12[j] = buff;         
01D62:  MOVLW  E3
01D64:  ADDWF  x71,W
01D66:  MOVWF  FE9
01D68:  MOVLW  0B
01D6A:  ADDWFC x72,W
01D6C:  MOVWF  FEA
01D6E:  MOVFF  E75,FEF
....................       }
01D72:  MOVFF  E70,03
01D76:  MOVF   x6F,W
01D78:  INCF   x6F,F
01D7A:  BTFSC  FD8.2
01D7C:  INCF   x70,F
01D7E:  INCF   x71,F
01D80:  BTFSC  FD8.2
01D82:  INCF   x72,F
01D84:  BRA    1D10
....................    }
....................       
....................    i++;
01D86:  INCF   x6F,F
01D88:  BTFSC  FD8.2
01D8A:  INCF   x70,F
....................    j=0;
01D8C:  CLRF   x72
01D8E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01D90:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01D92:  MOVLW  5D
01D94:  ADDWF  x6F,W
01D96:  MOVWF  x77
01D98:  MOVLW  00
01D9A:  ADDWFC x70,W
01D9C:  MOVWF  x78
01D9E:  MOVFF  FF2,E79
01DA2:  BCF    FF2.7
01DA4:  MOVFF  E78,FAA
01DA8:  MOVFF  E77,FA9
01DAC:  BCF    FA6.6
01DAE:  BCF    FA6.7
01DB0:  BSF    FA6.0
01DB2:  MOVF   FA8,W
01DB4:  BTFSC  x79.7
01DB6:  BSF    FF2.7
01DB8:  CLRF   x76
01DBA:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01DBC:  MOVF   x75,W
01DBE:  SUBLW  0D
01DC0:  BNZ   1DC6
01DC2:  MOVF   x76,F
01DC4:  BZ    1DD0
01DC6:  MOVF   x72,F
01DC8:  BNZ   1DD0
01DCA:  MOVF   x71,W
01DCC:  SUBLW  1E
01DCE:  BC    1DE2
....................       {
....................          SMS_Massage13[j] = '\0' ; // end string
01DD0:  MOVLW  03
01DD2:  ADDWF  x71,W
01DD4:  MOVWF  FE9
01DD6:  MOVLW  0C
01DD8:  ADDWFC x72,W
01DDA:  MOVWF  FEA
01DDC:  CLRF   FEF
....................          break;
01DDE:  BRA    1E06
....................       }
01DE0:  BRA    1DF2
....................       else
....................       {
....................          SMS_Massage13[j] = buff;       
01DE2:  MOVLW  03
01DE4:  ADDWF  x71,W
01DE6:  MOVWF  FE9
01DE8:  MOVLW  0C
01DEA:  ADDWFC x72,W
01DEC:  MOVWF  FEA
01DEE:  MOVFF  E75,FEF
....................       }
01DF2:  MOVFF  E70,03
01DF6:  MOVF   x6F,W
01DF8:  INCF   x6F,F
01DFA:  BTFSC  FD8.2
01DFC:  INCF   x70,F
01DFE:  INCF   x71,F
01E00:  BTFSC  FD8.2
01E02:  INCF   x72,F
01E04:  BRA    1D90
....................    }
....................       
....................    i++;
01E06:  INCF   x6F,F
01E08:  BTFSC  FD8.2
01E0A:  INCF   x70,F
....................    j=0;
01E0C:  CLRF   x72
01E0E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01E10:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01E12:  MOVLW  5D
01E14:  ADDWF  x6F,W
01E16:  MOVWF  x77
01E18:  MOVLW  00
01E1A:  ADDWFC x70,W
01E1C:  MOVWF  x78
01E1E:  MOVFF  FF2,E79
01E22:  BCF    FF2.7
01E24:  MOVFF  E78,FAA
01E28:  MOVFF  E77,FA9
01E2C:  BCF    FA6.6
01E2E:  BCF    FA6.7
01E30:  BSF    FA6.0
01E32:  MOVF   FA8,W
01E34:  BTFSC  x79.7
01E36:  BSF    FF2.7
01E38:  CLRF   x76
01E3A:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01E3C:  MOVF   x75,W
01E3E:  SUBLW  0D
01E40:  BNZ   1E46
01E42:  MOVF   x76,F
01E44:  BZ    1E50
01E46:  MOVF   x72,F
01E48:  BNZ   1E50
01E4A:  MOVF   x71,W
01E4C:  SUBLW  1E
01E4E:  BC    1E62
....................       {
....................          SMS_Massage14[j] = '\0' ; // end string
01E50:  MOVLW  23
01E52:  ADDWF  x71,W
01E54:  MOVWF  FE9
01E56:  MOVLW  0C
01E58:  ADDWFC x72,W
01E5A:  MOVWF  FEA
01E5C:  CLRF   FEF
....................          break;
01E5E:  BRA    1E86
....................       }
01E60:  BRA    1E72
....................       else
....................       {
....................          SMS_Massage14[j] = buff;        
01E62:  MOVLW  23
01E64:  ADDWF  x71,W
01E66:  MOVWF  FE9
01E68:  MOVLW  0C
01E6A:  ADDWFC x72,W
01E6C:  MOVWF  FEA
01E6E:  MOVFF  E75,FEF
....................       }
01E72:  MOVFF  E70,03
01E76:  MOVF   x6F,W
01E78:  INCF   x6F,F
01E7A:  BTFSC  FD8.2
01E7C:  INCF   x70,F
01E7E:  INCF   x71,F
01E80:  BTFSC  FD8.2
01E82:  INCF   x72,F
01E84:  BRA    1E10
....................    }
....................       
....................    i++;
01E86:  INCF   x6F,F
01E88:  BTFSC  FD8.2
01E8A:  INCF   x70,F
....................    j=0;
01E8C:  CLRF   x72
01E8E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01E90:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01E92:  MOVLW  5D
01E94:  ADDWF  x6F,W
01E96:  MOVWF  x77
01E98:  MOVLW  00
01E9A:  ADDWFC x70,W
01E9C:  MOVWF  x78
01E9E:  MOVFF  FF2,E79
01EA2:  BCF    FF2.7
01EA4:  MOVFF  E78,FAA
01EA8:  MOVFF  E77,FA9
01EAC:  BCF    FA6.6
01EAE:  BCF    FA6.7
01EB0:  BSF    FA6.0
01EB2:  MOVF   FA8,W
01EB4:  BTFSC  x79.7
01EB6:  BSF    FF2.7
01EB8:  CLRF   x76
01EBA:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01EBC:  MOVF   x75,W
01EBE:  SUBLW  0D
01EC0:  BNZ   1EC6
01EC2:  MOVF   x76,F
01EC4:  BZ    1ED0
01EC6:  MOVF   x72,F
01EC8:  BNZ   1ED0
01ECA:  MOVF   x71,W
01ECC:  SUBLW  1E
01ECE:  BC    1EE2
....................       {
....................          SMS_Massage15[j] = '\0' ; // end string
01ED0:  MOVLW  43
01ED2:  ADDWF  x71,W
01ED4:  MOVWF  FE9
01ED6:  MOVLW  0C
01ED8:  ADDWFC x72,W
01EDA:  MOVWF  FEA
01EDC:  CLRF   FEF
....................          break;
01EDE:  BRA    1F06
....................       }
01EE0:  BRA    1EF2
....................       else
....................       {
....................          SMS_Massage15[j] = buff;         
01EE2:  MOVLW  43
01EE4:  ADDWF  x71,W
01EE6:  MOVWF  FE9
01EE8:  MOVLW  0C
01EEA:  ADDWFC x72,W
01EEC:  MOVWF  FEA
01EEE:  MOVFF  E75,FEF
....................       }
01EF2:  MOVFF  E70,03
01EF6:  MOVF   x6F,W
01EF8:  INCF   x6F,F
01EFA:  BTFSC  FD8.2
01EFC:  INCF   x70,F
01EFE:  INCF   x71,F
01F00:  BTFSC  FD8.2
01F02:  INCF   x72,F
01F04:  BRA    1E90
....................    }
....................       
....................    i++;
01F06:  INCF   x6F,F
01F08:  BTFSC  FD8.2
01F0A:  INCF   x70,F
....................    j=0;
01F0C:  CLRF   x72
01F0E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01F10:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01F12:  MOVLW  5D
01F14:  ADDWF  x6F,W
01F16:  MOVWF  x77
01F18:  MOVLW  00
01F1A:  ADDWFC x70,W
01F1C:  MOVWF  x78
01F1E:  MOVFF  FF2,E79
01F22:  BCF    FF2.7
01F24:  MOVFF  E78,FAA
01F28:  MOVFF  E77,FA9
01F2C:  BCF    FA6.6
01F2E:  BCF    FA6.7
01F30:  BSF    FA6.0
01F32:  MOVF   FA8,W
01F34:  BTFSC  x79.7
01F36:  BSF    FF2.7
01F38:  CLRF   x76
01F3A:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01F3C:  MOVF   x75,W
01F3E:  SUBLW  0D
01F40:  BNZ   1F46
01F42:  MOVF   x76,F
01F44:  BZ    1F50
01F46:  MOVF   x72,F
01F48:  BNZ   1F50
01F4A:  MOVF   x71,W
01F4C:  SUBLW  1E
01F4E:  BC    1F62
....................       {
....................          SMS_Massage16[j] = '\0' ; // end string
01F50:  MOVLW  63
01F52:  ADDWF  x71,W
01F54:  MOVWF  FE9
01F56:  MOVLW  0C
01F58:  ADDWFC x72,W
01F5A:  MOVWF  FEA
01F5C:  CLRF   FEF
....................          break;
01F5E:  BRA    1F86
....................       }
01F60:  BRA    1F72
....................       else
....................       {
....................          SMS_Massage16[j] = buff;         
01F62:  MOVLW  63
01F64:  ADDWF  x71,W
01F66:  MOVWF  FE9
01F68:  MOVLW  0C
01F6A:  ADDWFC x72,W
01F6C:  MOVWF  FEA
01F6E:  MOVFF  E75,FEF
....................       }
01F72:  MOVFF  E70,03
01F76:  MOVF   x6F,W
01F78:  INCF   x6F,F
01F7A:  BTFSC  FD8.2
01F7C:  INCF   x70,F
01F7E:  INCF   x71,F
01F80:  BTFSC  FD8.2
01F82:  INCF   x72,F
01F84:  BRA    1F10
....................    }
....................    
....................    i++;
01F86:  INCF   x6F,F
01F88:  BTFSC  FD8.2
01F8A:  INCF   x70,F
....................    j=0;
01F8C:  CLRF   x72
01F8E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01F90:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01F92:  MOVLW  5D
01F94:  ADDWF  x6F,W
01F96:  MOVWF  x77
01F98:  MOVLW  00
01F9A:  ADDWFC x70,W
01F9C:  MOVWF  x78
01F9E:  MOVFF  FF2,E79
01FA2:  BCF    FF2.7
01FA4:  MOVFF  E78,FAA
01FA8:  MOVFF  E77,FA9
01FAC:  BCF    FA6.6
01FAE:  BCF    FA6.7
01FB0:  BSF    FA6.0
01FB2:  MOVF   FA8,W
01FB4:  BTFSC  x79.7
01FB6:  BSF    FF2.7
01FB8:  CLRF   x76
01FBA:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
01FBC:  MOVF   x75,W
01FBE:  SUBLW  0D
01FC0:  BNZ   1FC6
01FC2:  MOVF   x76,F
01FC4:  BZ    1FD0
01FC6:  MOVF   x72,F
01FC8:  BNZ   1FD0
01FCA:  MOVF   x71,W
01FCC:  SUBLW  1E
01FCE:  BC    1FE2
....................       {
....................          SMS_Massage17[j] = '\0' ; // end string
01FD0:  MOVLW  83
01FD2:  ADDWF  x71,W
01FD4:  MOVWF  FE9
01FD6:  MOVLW  0C
01FD8:  ADDWFC x72,W
01FDA:  MOVWF  FEA
01FDC:  CLRF   FEF
....................          break;
01FDE:  BRA    2006
....................       }
01FE0:  BRA    1FF2
....................       else
....................       {
....................          SMS_Massage17[j] = buff;         
01FE2:  MOVLW  83
01FE4:  ADDWF  x71,W
01FE6:  MOVWF  FE9
01FE8:  MOVLW  0C
01FEA:  ADDWFC x72,W
01FEC:  MOVWF  FEA
01FEE:  MOVFF  E75,FEF
....................       }
01FF2:  MOVFF  E70,03
01FF6:  MOVF   x6F,W
01FF8:  INCF   x6F,F
01FFA:  BTFSC  FD8.2
01FFC:  INCF   x70,F
01FFE:  INCF   x71,F
02000:  BTFSC  FD8.2
02002:  INCF   x72,F
02004:  BRA    1F90
....................    }
....................    
....................    i++;
02006:  INCF   x6F,F
02008:  BTFSC  FD8.2
0200A:  INCF   x70,F
....................    j=0;
0200C:  CLRF   x72
0200E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02010:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02012:  MOVLW  5D
02014:  ADDWF  x6F,W
02016:  MOVWF  x77
02018:  MOVLW  00
0201A:  ADDWFC x70,W
0201C:  MOVWF  x78
0201E:  MOVFF  FF2,E79
02022:  BCF    FF2.7
02024:  MOVFF  E78,FAA
02028:  MOVFF  E77,FA9
0202C:  BCF    FA6.6
0202E:  BCF    FA6.7
02030:  BSF    FA6.0
02032:  MOVF   FA8,W
02034:  BTFSC  x79.7
02036:  BSF    FF2.7
02038:  CLRF   x76
0203A:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
0203C:  MOVF   x75,W
0203E:  SUBLW  0D
02040:  BNZ   2046
02042:  MOVF   x76,F
02044:  BZ    2050
02046:  MOVF   x72,F
02048:  BNZ   2050
0204A:  MOVF   x71,W
0204C:  SUBLW  1E
0204E:  BC    2062
....................       {
....................          SMS_Massage18[j] = '\0' ; // end string
02050:  MOVLW  A3
02052:  ADDWF  x71,W
02054:  MOVWF  FE9
02056:  MOVLW  0C
02058:  ADDWFC x72,W
0205A:  MOVWF  FEA
0205C:  CLRF   FEF
....................          break;
0205E:  BRA    2086
....................       }
02060:  BRA    2072
....................       else
....................       {
....................          SMS_Massage18[j] = buff;         
02062:  MOVLW  A3
02064:  ADDWF  x71,W
02066:  MOVWF  FE9
02068:  MOVLW  0C
0206A:  ADDWFC x72,W
0206C:  MOVWF  FEA
0206E:  MOVFF  E75,FEF
....................       }
02072:  MOVFF  E70,03
02076:  MOVF   x6F,W
02078:  INCF   x6F,F
0207A:  BTFSC  FD8.2
0207C:  INCF   x70,F
0207E:  INCF   x71,F
02080:  BTFSC  FD8.2
02082:  INCF   x72,F
02084:  BRA    2010
....................    }
....................    
....................    i++;
02086:  INCF   x6F,F
02088:  BTFSC  FD8.2
0208A:  INCF   x70,F
....................    j=0;
0208C:  CLRF   x72
0208E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02090:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02092:  MOVLW  5D
02094:  ADDWF  x6F,W
02096:  MOVWF  x77
02098:  MOVLW  00
0209A:  ADDWFC x70,W
0209C:  MOVWF  x78
0209E:  MOVFF  FF2,E79
020A2:  BCF    FF2.7
020A4:  MOVFF  E78,FAA
020A8:  MOVFF  E77,FA9
020AC:  BCF    FA6.6
020AE:  BCF    FA6.7
020B0:  BSF    FA6.0
020B2:  MOVF   FA8,W
020B4:  BTFSC  x79.7
020B6:  BSF    FF2.7
020B8:  CLRF   x76
020BA:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
020BC:  MOVF   x75,W
020BE:  SUBLW  0D
020C0:  BNZ   20C6
020C2:  MOVF   x76,F
020C4:  BZ    20D0
020C6:  MOVF   x72,F
020C8:  BNZ   20D0
020CA:  MOVF   x71,W
020CC:  SUBLW  1E
020CE:  BC    20E2
....................       {
....................          SMS_Massage19[j] = '\0' ; // end string
020D0:  MOVLW  C3
020D2:  ADDWF  x71,W
020D4:  MOVWF  FE9
020D6:  MOVLW  0C
020D8:  ADDWFC x72,W
020DA:  MOVWF  FEA
020DC:  CLRF   FEF
....................          break;
020DE:  BRA    2106
....................       }
020E0:  BRA    20F2
....................       else
....................       {
....................          SMS_Massage19[j] = buff;        
020E2:  MOVLW  C3
020E4:  ADDWF  x71,W
020E6:  MOVWF  FE9
020E8:  MOVLW  0C
020EA:  ADDWFC x72,W
020EC:  MOVWF  FEA
020EE:  MOVFF  E75,FEF
....................       }
020F2:  MOVFF  E70,03
020F6:  MOVF   x6F,W
020F8:  INCF   x6F,F
020FA:  BTFSC  FD8.2
020FC:  INCF   x70,F
020FE:  INCF   x71,F
02100:  BTFSC  FD8.2
02102:  INCF   x72,F
02104:  BRA    2090
....................    }
....................    
....................    i++;
02106:  INCF   x6F,F
02108:  BTFSC  FD8.2
0210A:  INCF   x70,F
....................    j=0;
0210C:  CLRF   x72
0210E:  CLRF   x71
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02110:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02112:  MOVLW  5D
02114:  ADDWF  x6F,W
02116:  MOVWF  x77
02118:  MOVLW  00
0211A:  ADDWFC x70,W
0211C:  MOVWF  x78
0211E:  MOVFF  FF2,E79
02122:  BCF    FF2.7
02124:  MOVFF  E78,FAA
02128:  MOVFF  E77,FA9
0212C:  BCF    FA6.6
0212E:  BCF    FA6.7
02130:  BSF    FA6.0
02132:  MOVF   FA8,W
02134:  BTFSC  x79.7
02136:  BSF    FF2.7
02138:  CLRF   x76
0213A:  MOVWF  x75
....................       
....................       if((buff == 0x0D) || (j>30))
0213C:  MOVF   x75,W
0213E:  SUBLW  0D
02140:  BNZ   2146
02142:  MOVF   x76,F
02144:  BZ    2150
02146:  MOVF   x72,F
02148:  BNZ   2150
0214A:  MOVF   x71,W
0214C:  SUBLW  1E
0214E:  BC    2162
....................       {
....................          SMS_Massage20[j] = '\0' ; // end string
02150:  MOVLW  E3
02152:  ADDWF  x71,W
02154:  MOVWF  FE9
02156:  MOVLW  0C
02158:  ADDWFC x72,W
0215A:  MOVWF  FEA
0215C:  CLRF   FEF
....................          break;
0215E:  BRA    2186
....................       }
02160:  BRA    2172
....................       else
....................       {
....................          SMS_Massage20[j] = buff;         
02162:  MOVLW  E3
02164:  ADDWF  x71,W
02166:  MOVWF  FE9
02168:  MOVLW  0C
0216A:  ADDWFC x72,W
0216C:  MOVWF  FEA
0216E:  MOVFF  E75,FEF
....................       }
02172:  MOVFF  E70,03
02176:  MOVF   x6F,W
02178:  INCF   x6F,F
0217A:  BTFSC  FD8.2
0217C:  INCF   x70,F
0217E:  INCF   x71,F
02180:  BTFSC  FD8.2
02182:  INCF   x72,F
02184:  BRA    2110
....................    }
02186:  MOVLB  0
02188:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
.................... 
....................    //Data = getc();
....................    //putc(Data);
....................    SBUF = getc();
*
00596:  BTFSS  F9E.5
00598:  BRA    0596
0059A:  MOVFF  FAE,30
....................    checkCommand();
0059E:  BRA    02EE
.................... }
.................... /*
.................... #int_TIMER1
.................... void  TIMER1_isr(void) 
.................... {
....................    //ReadIn_flag =1;
.................... }
.................... */
005A0:  BCF    F9E.5
005A2:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
005A6:  INCF   1B,F
.................... 
....................    if(T_timeout != 0)
005A8:  MOVLB  A
005AA:  MOVF   x70,F
005AC:  BZ    05BC
....................    {
....................       T_timeout--;
005AE:  DECF   x70,F
....................       if(T_timeout == 0)
005B0:  MOVF   x70,F
005B2:  BNZ   05BC
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout 
005B4:  MOVFF  5A,63
....................          output_bit(P485ctrl,0);
005B8:  BCF    F8A.3
005BA:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
005BC:  MOVF   1E,F
005BE:  BZ    05F8
....................    {
....................       TimeBase1s--;
005C0:  DECF   1E,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
005C2:  MOVF   1E,F
005C4:  BNZ   05F8
....................       {
....................          if(AutoAckDelayTime != 0x00)
005C6:  MOVF   1F,F
005C8:  BZ    05D2
....................          {
....................             AutoAckDelayTime--;
005CA:  DECF   1F,F
....................             if(AutoAckDelayTime == 0x00)
005CC:  MOVF   1F,F
005CE:  BNZ   05D2
....................             {
....................                AutoAckFlag = 1 ;
005D0:  BSF    1C.2
....................             }
....................          }
....................          //////////////////////////////
....................          
....................          if(++StartReadCount >=2)
005D2:  INCF   59,F
005D4:  MOVF   59,W
005D6:  SUBLW  01
005D8:  BC    05E0
....................          {
....................             StartRead = 1;
005DA:  BSF    32.4
....................             StartReadCount =2;
005DC:  MOVLW  02
005DE:  MOVWF  59
....................          }
....................          if(++send_SMS_count >=5){
005E0:  MOVLB  D
005E2:  INCF   xA6,F
005E4:  MOVF   xA6,W
005E6:  SUBLW  04
005E8:  BC    05F0
....................             send_SMS_count =0;
005EA:  CLRF   xA6
....................             send_SMS_period = 1;
005EC:  MOVLW  01
005EE:  MOVWF  xA5
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
005F0:  BSF    32.2
....................          TimeBase1s = 100;
005F2:  MOVLW  64
005F4:  MOVWF  1E
005F6:  MOVLB  A
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 40)    //500mS
005F8:  MOVF   1B,W
005FA:  SUBLW  28
005FC:  BNZ   0626
....................    {
....................       StatusTime = 0;
005FE:  CLRF   1B
....................       if(HearthbeatInd == 0)
00600:  BTFSC  1C.0
00602:  BRA    060C
....................       {
....................          HearthbeatInd = 1;
00604:  BSF    1C.0
....................          output_bit(Pled,1);
00606:  BSF    F8A.5
00608:  BCF    F93.5
....................       }
0060A:  BRA    0612
....................       else
....................       {
....................          HearthbeatInd = 0;
0060C:  BCF    1C.0
....................          output_bit(Pled,0);
0060E:  BCF    F8A.5
00610:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................       if(Test == 1)            //Test function
00612:  BTFSS  1C.6
00614:  BRA    0624
....................          {
....................              if(T_test > 0x00) T_test --;
00616:  MOVF   31,F
00618:  BZ    061C
0061A:  DECF   31,F
....................              if(T_test == 0x00) Test_fault = 1;
0061C:  MOVF   31,F
0061E:  BNZ   0622
00620:  BSF    1C.5
....................          }
00622:  BRA    0626
....................          else
....................          {
....................              //Test = 0;
....................              T_test = 0x00;
00624:  CLRF   31
....................          }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
00626:  MOVF   1D,F
00628:  BZ    0650
....................    {
....................       FlashingRateTime--;
0062A:  DECF   1D,F
....................       if(FlashingRateTime == 0)
0062C:  MOVF   1D,F
0062E:  BNZ   0644
....................       {
....................          outmcp23 = 0xff;
00630:  SETF   x73
....................          
....................          if(SyncStatus == 0)
00632:  BTFSC  32.1
00634:  BRA    0640
....................          {
....................             if(FlashingFlag == 1)
00636:  BTFSS  1C.1
00638:  BRA    063E
....................             {
....................                FlashingFlag = 0;
0063A:  BCF    1C.1
....................                //output_bit(PSyncS,0);
....................             }
0063C:  BRA    0640
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
0063E:  BSF    1C.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
00640:  MOVFF  57,1D
....................       }
.................... 
....................       if(Synctimer != 0x00)
00644:  MOVF   33,F
00646:  BZ    0650
....................       {
....................          Synctimer--;
00648:  DECF   33,F
....................          if(Synctimer == 0x00)
0064A:  MOVF   33,F
0064C:  BNZ   0650
....................          {
....................             SyncStatus = 0;
0064E:  BCF    32.1
....................          }
....................       }
.................... 
....................    }
....................    /*
....................    ReadIn_Count=ReadIn_Count+1;
....................    if(ReadIn_Count==10)
....................    {
....................       ReadIn_Count=0;
....................       ReadIn_flag = 1;
....................    }
....................    */
00650:  BCF    F9E.1
00652:  MOVLB  0
00654:  GOTO   006C
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
07AE4:  MOVLB  D
07AE6:  BTFSS  xBF.0
07AE8:  BRA    7B9C
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
07AEA:  MOVLW  00
07AEC:  BTFSC  xA7.0
07AEE:  MOVLW  01
07AF0:  MOVLB  E
07AF2:  MOVWF  x6E
07AF4:  MOVLW  00
07AF6:  MOVLB  D
07AF8:  BTFSC  xAF.0
07AFA:  MOVLW  01
07AFC:  MOVLB  E
07AFE:  XORWF  x6E,W
07B00:  SUBLW  01
07B02:  BNZ   7B0A
07B04:  MOVLB  D
07B06:  BTFSC  xB3.0
07B08:  BRA    7B10
07B0A:  MOVLB  D
07B0C:  BTFSS  xC7.0
07B0E:  BRA    7B94
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
07B10:  BTFSC  xC3.0
07B12:  BRA    7B92
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07B14:  BTFSC  xC7.0
07B16:  BRA    7B26
07B18:  MOVF   55,W
07B1A:  SUBLW  0F
07B1C:  BNZ   7B26
....................             {
....................                TimeBase1s = 100 ;            //reload again
07B1E:  MOVLW  64
07B20:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
07B22:  MOVFF  56,1F
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
07B26:  BSF    xC7.0
....................             if(FlashingFlag == 0)                                                                                                                                                                                                                                                                
07B28:  BTFSC  1C.1
07B2A:  BRA    7B30
....................             {
....................                Output.B1 = 0;           //Flash output1
07B2C:  BCF    xAB.0
....................             }
07B2E:  BRA    7B32
....................             else
....................             {
....................                Output.B1 = 1;
07B30:  BSF    xAB.0
....................             }
.................... 
....................             if (~AutoTestFlag)
07B32:  BTFSC  1C.4
07B34:  BRA    7B52
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
07B36:  BTFSC  xBB.0
07B38:  BRA    7B44
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07B3A:  BSF    F89.4
07B3C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07B3E:  BSF    F89.3
07B40:  BCF    F92.3
....................                }
07B42:  BRA    7B52
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07B44:  BTFSS  xB7.0
07B46:  BRA    7B4E
07B48:  BSF    F89.4
07B4A:  BCF    F92.4
07B4C:  BRA    7B52
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07B4E:  BSF    F89.3
07B50:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending 
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
07B52:  BTFSC  xDB.0
07B54:  BRA    7B92
07B56:  BTFSC  32.3
07B58:  BRA    7B92
07B5A:  BTFSC  xC3.0
07B5C:  BRA    7B92
....................             {
....................                SendSMS.B1 =1;
07B5E:  BSF    xDB.0
....................                strcat(SMS_MassageSUM, SMS_Massage1);
07B60:  MOVLW  0D
07B62:  MOVLB  E
07B64:  MOVWF  x6E
07B66:  MOVLW  03
07B68:  MOVWF  x6D
07B6A:  MOVLW  0A
07B6C:  MOVWF  x70
07B6E:  MOVLW  83
07B70:  MOVWF  x6F
07B72:  MOVLB  0
07B74:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
07B78:  MOVLW  0D
07B7A:  MOVLB  E
07B7C:  MOVWF  x6E
07B7E:  MOVLW  03
07B80:  MOVWF  x6D
07B82:  MOVLW  0D
07B84:  MOVWF  x70
07B86:  MOVLW  A3
07B88:  MOVWF  x6F
07B8A:  MOVLB  0
07B8C:  CALL   6DF2
07B90:  MOVLB  D
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................             
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage1);
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................         }
....................       }
07B92:  BRA    7B9A
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
07B94:  BTFSS  xB3.0
07B96:  BRA    7B9A
07B98:  BCF    xC3.0
....................    }
07B9A:  BRA    7C06
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
07B9C:  MOVLW  00
07B9E:  BTFSC  xA7.0
07BA0:  MOVLW  01
07BA2:  MOVLB  E
07BA4:  MOVWF  x6E
07BA6:  MOVLW  00
07BA8:  MOVLB  D
07BAA:  BTFSC  xAF.0
07BAC:  MOVLW  01
07BAE:  MOVLB  E
07BB0:  XORWF  x6E,W
07BB2:  SUBLW  01
07BB4:  BNZ   7BFE
....................       {
....................          Output.B1 = 0;
07BB6:  MOVLB  D
07BB8:  BCF    xAB.0
....................          // SMS Sending 
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
07BBA:  BTFSC  xDB.0
07BBC:  BRA    7BFA
07BBE:  BTFSC  32.3
07BC0:  BRA    7BFA
07BC2:  BTFSC  xC3.0
07BC4:  BRA    7BFA
....................          {
....................             SendSMS.B1 =1;
07BC6:  BSF    xDB.0
....................                strcat(SMS_MassageSUM, SMS_Massage1);
07BC8:  MOVLW  0D
07BCA:  MOVLB  E
07BCC:  MOVWF  x6E
07BCE:  MOVLW  03
07BD0:  MOVWF  x6D
07BD2:  MOVLW  0A
07BD4:  MOVWF  x70
07BD6:  MOVLW  83
07BD8:  MOVWF  x6F
07BDA:  MOVLB  0
07BDC:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
07BE0:  MOVLW  0D
07BE2:  MOVLB  E
07BE4:  MOVWF  x6E
07BE6:  MOVLW  03
07BE8:  MOVWF  x6D
07BEA:  MOVLW  0D
07BEC:  MOVWF  x70
07BEE:  MOVLW  A3
07BF0:  MOVWF  x6F
07BF2:  MOVLB  0
07BF4:  CALL   6DF2
07BF8:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................          
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            fprintf(CH2,SMS_Massage1);
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
07BFA:  BRA    7C06
07BFC:  MOVLB  E
....................       else
....................       {
....................          Output.B1 = 1;
07BFE:  MOVLB  D
07C00:  BSF    xAB.0
....................          SendSMS.B1 =0;
07C02:  BCF    xDB.0
....................          functointest_f =0;
07C04:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
07C06:  BTFSS  xBF.1
07C08:  BRA    7CBC
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
07C0A:  MOVLW  00
07C0C:  BTFSC  xA7.1
07C0E:  MOVLW  01
07C10:  MOVLB  E
07C12:  MOVWF  x6E
07C14:  MOVLW  00
07C16:  MOVLB  D
07C18:  BTFSC  xAF.1
07C1A:  MOVLW  01
07C1C:  MOVLB  E
07C1E:  XORWF  x6E,W
07C20:  SUBLW  01
07C22:  BNZ   7C2A
07C24:  MOVLB  D
07C26:  BTFSC  xB3.1
07C28:  BRA    7C30
07C2A:  MOVLB  D
07C2C:  BTFSS  xC7.1
07C2E:  BRA    7CB4
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
07C30:  BTFSC  xC3.1
07C32:  BRA    7CB2
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07C34:  BTFSC  xC7.1
07C36:  BRA    7C46
07C38:  MOVF   55,W
07C3A:  SUBLW  0F
07C3C:  BNZ   7C46
....................             {
....................                TimeBase1s = 100 ;            //reload again
07C3E:  MOVLW  64
07C40:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
07C42:  MOVFF  56,1F
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
07C46:  BSF    xC7.1
....................             if(FlashingFlag == 0)
07C48:  BTFSC  1C.1
07C4A:  BRA    7C50
....................             {
....................                Output.B2 = 0;           //Flash output1
07C4C:  BCF    xAB.1
....................             }
07C4E:  BRA    7C52
....................             else
....................             {
....................                Output.B2 = 1;
07C50:  BSF    xAB.1
....................             }
.................... 
....................             if (~AutoTestFlag)
07C52:  BTFSC  1C.4
07C54:  BRA    7C72
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
07C56:  BTFSC  xBB.1
07C58:  BRA    7C64
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07C5A:  BSF    F89.4
07C5C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07C5E:  BSF    F89.3
07C60:  BCF    F92.3
....................                }
07C62:  BRA    7C72
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07C64:  BTFSS  xB7.1
07C66:  BRA    7C6E
07C68:  BSF    F89.4
07C6A:  BCF    F92.4
07C6C:  BRA    7C72
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07C6E:  BSF    F89.3
07C70:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
07C72:  BTFSC  xDB.1
07C74:  BRA    7CB2
07C76:  BTFSC  32.3
07C78:  BRA    7CB2
07C7A:  BTFSC  xC3.1
07C7C:  BRA    7CB2
....................             {
....................                SendSMS.B2 =1;
07C7E:  BSF    xDB.1
....................                strcat(SMS_MassageSUM, SMS_Massage2);
07C80:  MOVLW  0D
07C82:  MOVLB  E
07C84:  MOVWF  x6E
07C86:  MOVLW  03
07C88:  MOVWF  x6D
07C8A:  MOVLW  0A
07C8C:  MOVWF  x70
07C8E:  MOVLW  A3
07C90:  MOVWF  x6F
07C92:  MOVLB  0
07C94:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
07C98:  MOVLW  0D
07C9A:  MOVLB  E
07C9C:  MOVWF  x6E
07C9E:  MOVLW  03
07CA0:  MOVWF  x6D
07CA2:  MOVLW  0D
07CA4:  MOVWF  x70
07CA6:  MOVLW  A3
07CA8:  MOVWF  x6F
07CAA:  MOVLB  0
07CAC:  CALL   6DF2
07CB0:  MOVLB  D
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                 
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................                
....................               fprintf(CH2,SMS_Massage2);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
07CB2:  BRA    7CBA
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
07CB4:  BTFSS  xB3.1
07CB6:  BRA    7CBA
07CB8:  BCF    xC3.1
....................    }
07CBA:  BRA    7D26
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
07CBC:  MOVLW  00
07CBE:  BTFSC  xA7.1
07CC0:  MOVLW  01
07CC2:  MOVLB  E
07CC4:  MOVWF  x6E
07CC6:  MOVLW  00
07CC8:  MOVLB  D
07CCA:  BTFSC  xAF.1
07CCC:  MOVLW  01
07CCE:  MOVLB  E
07CD0:  XORWF  x6E,W
07CD2:  SUBLW  01
07CD4:  BNZ   7D1E
....................       {
....................          Output.B2 = 0;
07CD6:  MOVLB  D
07CD8:  BCF    xAB.1
....................          // SMS Sending   
....................          if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
07CDA:  BTFSC  xDB.1
07CDC:  BRA    7D1A
07CDE:  BTFSC  32.3
07CE0:  BRA    7D1A
07CE2:  BTFSC  xC3.1
07CE4:  BRA    7D1A
....................          {
....................             SendSMS.B2 =1;
07CE6:  BSF    xDB.1
....................             strcat(SMS_MassageSUM, SMS_Massage2);
07CE8:  MOVLW  0D
07CEA:  MOVLB  E
07CEC:  MOVWF  x6E
07CEE:  MOVLW  03
07CF0:  MOVWF  x6D
07CF2:  MOVLW  0A
07CF4:  MOVWF  x70
07CF6:  MOVLW  A3
07CF8:  MOVWF  x6F
07CFA:  MOVLB  0
07CFC:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
07D00:  MOVLW  0D
07D02:  MOVLB  E
07D04:  MOVWF  x6E
07D06:  MOVLW  03
07D08:  MOVWF  x6D
07D0A:  MOVLW  0D
07D0C:  MOVWF  x70
07D0E:  MOVLW  A3
07D10:  MOVWF  x6F
07D12:  MOVLB  0
07D14:  CALL   6DF2
07D18:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................              
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................             
....................            fprintf(CH2,SMS_Massage2);
....................            putc('\n',CH2);
....................           putc(26,CH2);
....................               */
....................          }
....................       }
07D1A:  BRA    7D26
07D1C:  MOVLB  E
....................       else
....................       {
....................          Output.B2 = 1;
07D1E:  MOVLB  D
07D20:  BSF    xAB.1
....................          SendSMS.B2 =0;
07D22:  BCF    xDB.1
....................          functointest_f =0;
07D24:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
07D26:  BTFSS  xBF.2
07D28:  BRA    7DDC
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
07D2A:  MOVLW  00
07D2C:  BTFSC  xA7.2
07D2E:  MOVLW  01
07D30:  MOVLB  E
07D32:  MOVWF  x6E
07D34:  MOVLW  00
07D36:  MOVLB  D
07D38:  BTFSC  xAF.2
07D3A:  MOVLW  01
07D3C:  MOVLB  E
07D3E:  XORWF  x6E,W
07D40:  SUBLW  01
07D42:  BNZ   7D4A
07D44:  MOVLB  D
07D46:  BTFSC  xB3.2
07D48:  BRA    7D50
07D4A:  MOVLB  D
07D4C:  BTFSS  xC7.2
07D4E:  BRA    7DD4
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
07D50:  BTFSC  xC3.2
07D52:  BRA    7DD2
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07D54:  BTFSC  xC7.2
07D56:  BRA    7D66
07D58:  MOVF   55,W
07D5A:  SUBLW  0F
07D5C:  BNZ   7D66
....................             {
....................                TimeBase1s = 100 ;            //reload again
07D5E:  MOVLW  64
07D60:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
07D62:  MOVFF  56,1F
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
07D66:  BSF    xC7.2
....................             if(FlashingFlag == 0)
07D68:  BTFSC  1C.1
07D6A:  BRA    7D70
....................             {
....................                Output.B3 = 0;           //Flash output1
07D6C:  BCF    xAB.2
....................             }
07D6E:  BRA    7D72
....................             else
....................             {
....................                Output.B3 = 1;
07D70:  BSF    xAB.2
....................             }
.................... 
....................             if (~AutoTestFlag)
07D72:  BTFSC  1C.4
07D74:  BRA    7D92
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
07D76:  BTFSC  xBB.2
07D78:  BRA    7D84
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07D7A:  BSF    F89.4
07D7C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07D7E:  BSF    F89.3
07D80:  BCF    F92.3
....................                }
07D82:  BRA    7D92
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07D84:  BTFSS  xB7.2
07D86:  BRA    7D8E
07D88:  BSF    F89.4
07D8A:  BCF    F92.4
07D8C:  BRA    7D92
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07D8E:  BSF    F89.3
07D90:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
07D92:  BTFSC  xDB.2
07D94:  BRA    7DD2
07D96:  BTFSC  32.3
07D98:  BRA    7DD2
07D9A:  BTFSC  xC3.2
07D9C:  BRA    7DD2
....................             {
....................                SendSMS.B3 =1;
07D9E:  BSF    xDB.2
....................                
....................                strcat(SMS_MassageSUM, SMS_Massage3);
07DA0:  MOVLW  0D
07DA2:  MOVLB  E
07DA4:  MOVWF  x6E
07DA6:  MOVLW  03
07DA8:  MOVWF  x6D
07DAA:  MOVLW  0A
07DAC:  MOVWF  x70
07DAE:  MOVLW  C3
07DB0:  MOVWF  x6F
07DB2:  MOVLB  0
07DB4:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
07DB8:  MOVLW  0D
07DBA:  MOVLB  E
07DBC:  MOVWF  x6E
07DBE:  MOVLW  03
07DC0:  MOVWF  x6D
07DC2:  MOVLW  0D
07DC4:  MOVWF  x70
07DC6:  MOVLW  A3
07DC8:  MOVWF  x6F
07DCA:  MOVLB  0
07DCC:  CALL   6DF2
07DD0:  MOVLB  D
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage3);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
07DD2:  BRA    7DDA
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
07DD4:  BTFSS  xB3.2
07DD6:  BRA    7DDA
07DD8:  BCF    xC3.2
....................    }
07DDA:  BRA    7E46
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
07DDC:  MOVLW  00
07DDE:  BTFSC  xA7.2
07DE0:  MOVLW  01
07DE2:  MOVLB  E
07DE4:  MOVWF  x6E
07DE6:  MOVLW  00
07DE8:  MOVLB  D
07DEA:  BTFSC  xAF.2
07DEC:  MOVLW  01
07DEE:  MOVLB  E
07DF0:  XORWF  x6E,W
07DF2:  SUBLW  01
07DF4:  BNZ   7E3E
....................       {
....................          Output.B3 = 0;
07DF6:  MOVLB  D
07DF8:  BCF    xAB.2
....................          // SMS Sending   
....................          if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
07DFA:  BTFSC  xDB.2
07DFC:  BRA    7E3A
07DFE:  BTFSC  32.3
07E00:  BRA    7E3A
07E02:  BTFSC  xC3.2
07E04:  BRA    7E3A
....................          {
....................             SendSMS.B3 =1;
07E06:  BSF    xDB.2
....................             strcat(SMS_MassageSUM, SMS_Massage3);
07E08:  MOVLW  0D
07E0A:  MOVLB  E
07E0C:  MOVWF  x6E
07E0E:  MOVLW  03
07E10:  MOVWF  x6D
07E12:  MOVLW  0A
07E14:  MOVWF  x70
07E16:  MOVLW  C3
07E18:  MOVWF  x6F
07E1A:  MOVLB  0
07E1C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
07E20:  MOVLW  0D
07E22:  MOVLB  E
07E24:  MOVWF  x6E
07E26:  MOVLW  03
07E28:  MOVWF  x6D
07E2A:  MOVLW  0D
07E2C:  MOVWF  x70
07E2E:  MOVLW  A3
07E30:  MOVWF  x6F
07E32:  MOVLB  0
07E34:  CALL   6DF2
07E38:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            fprintf(CH2,SMS_Massage3);
....................            putc('\n',CH2);
....................           putc(26,CH2);
....................               */
....................          }
....................       }
07E3A:  BRA    7E46
07E3C:  MOVLB  E
....................       else
....................       {
....................          Output.B3 = 1;
07E3E:  MOVLB  D
07E40:  BSF    xAB.2
....................          SendSMS.B3 =0;
07E42:  BCF    xDB.2
....................          functointest_f =0;
07E44:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
07E46:  BTFSS  xBF.3
07E48:  BRA    7EFC
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
07E4A:  MOVLW  00
07E4C:  BTFSC  xA7.3
07E4E:  MOVLW  01
07E50:  MOVLB  E
07E52:  MOVWF  x6E
07E54:  MOVLW  00
07E56:  MOVLB  D
07E58:  BTFSC  xAF.3
07E5A:  MOVLW  01
07E5C:  MOVLB  E
07E5E:  XORWF  x6E,W
07E60:  SUBLW  01
07E62:  BNZ   7E6A
07E64:  MOVLB  D
07E66:  BTFSC  xB3.3
07E68:  BRA    7E70
07E6A:  MOVLB  D
07E6C:  BTFSS  xC7.3
07E6E:  BRA    7EF4
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
07E70:  BTFSC  xC3.3
07E72:  BRA    7EF2
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07E74:  BTFSC  xC7.3
07E76:  BRA    7E86
07E78:  MOVF   55,W
07E7A:  SUBLW  0F
07E7C:  BNZ   7E86
....................             {
....................                TimeBase1s = 100 ;            //reload again
07E7E:  MOVLW  64
07E80:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
07E82:  MOVFF  56,1F
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
07E86:  BSF    xC7.3
....................             if(FlashingFlag == 0)
07E88:  BTFSC  1C.1
07E8A:  BRA    7E90
....................             {
....................                Output.B4 = 0;           //Flash output1
07E8C:  BCF    xAB.3
....................             }
07E8E:  BRA    7E92
....................             else
....................             {
....................                Output.B4 = 1;
07E90:  BSF    xAB.3
....................             }
.................... 
....................             if (~AutoTestFlag)
07E92:  BTFSC  1C.4
07E94:  BRA    7EB2
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
07E96:  BTFSC  xBB.3
07E98:  BRA    7EA4
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07E9A:  BSF    F89.4
07E9C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07E9E:  BSF    F89.3
07EA0:  BCF    F92.3
....................                }
07EA2:  BRA    7EB2
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07EA4:  BTFSS  xB7.3
07EA6:  BRA    7EAE
07EA8:  BSF    F89.4
07EAA:  BCF    F92.4
07EAC:  BRA    7EB2
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07EAE:  BSF    F89.3
07EB0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07EB2:  BTFSC  xDB.3
07EB4:  BRA    7EF2
07EB6:  BTFSC  32.3
07EB8:  BRA    7EF2
07EBA:  BTFSC  xC3.3
07EBC:  BRA    7EF2
....................             {
....................                SendSMS.B4 =1;
07EBE:  BSF    xDB.3
....................                
....................                strcat(SMS_MassageSUM, SMS_Massage4);
07EC0:  MOVLW  0D
07EC2:  MOVLB  E
07EC4:  MOVWF  x6E
07EC6:  MOVLW  03
07EC8:  MOVWF  x6D
07ECA:  MOVLW  0A
07ECC:  MOVWF  x70
07ECE:  MOVLW  E3
07ED0:  MOVWF  x6F
07ED2:  MOVLB  0
07ED4:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
07ED8:  MOVLW  0D
07EDA:  MOVLB  E
07EDC:  MOVWF  x6E
07EDE:  MOVLW  03
07EE0:  MOVWF  x6D
07EE2:  MOVLW  0D
07EE4:  MOVWF  x70
07EE6:  MOVLW  A3
07EE8:  MOVWF  x6F
07EEA:  MOVLB  0
07EEC:  CALL   6DF2
07EF0:  MOVLB  D
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................             
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage4);
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
....................       }
07EF2:  BRA    7EFA
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
07EF4:  BTFSS  xB3.3
07EF6:  BRA    7EFA
07EF8:  BCF    xC3.3
....................    }
07EFA:  BRA    7F66
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
07EFC:  MOVLW  00
07EFE:  BTFSC  xA7.3
07F00:  MOVLW  01
07F02:  MOVLB  E
07F04:  MOVWF  x6E
07F06:  MOVLW  00
07F08:  MOVLB  D
07F0A:  BTFSC  xAF.3
07F0C:  MOVLW  01
07F0E:  MOVLB  E
07F10:  XORWF  x6E,W
07F12:  SUBLW  01
07F14:  BNZ   7F5E
....................       {
....................          Output.B4 = 0;
07F16:  MOVLB  D
07F18:  BCF    xAB.3
....................          // SMS Sending   
....................          if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07F1A:  BTFSC  xDB.3
07F1C:  BRA    7F5A
07F1E:  BTFSC  32.3
07F20:  BRA    7F5A
07F22:  BTFSC  xC3.3
07F24:  BRA    7F5A
....................          {
....................             SendSMS.B4 =1;
07F26:  BSF    xDB.3
....................             strcat(SMS_MassageSUM, SMS_Massage4);
07F28:  MOVLW  0D
07F2A:  MOVLB  E
07F2C:  MOVWF  x6E
07F2E:  MOVLW  03
07F30:  MOVWF  x6D
07F32:  MOVLW  0A
07F34:  MOVWF  x70
07F36:  MOVLW  E3
07F38:  MOVWF  x6F
07F3A:  MOVLB  0
07F3C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
07F40:  MOVLW  0D
07F42:  MOVLB  E
07F44:  MOVWF  x6E
07F46:  MOVLW  03
07F48:  MOVWF  x6D
07F4A:  MOVLW  0D
07F4C:  MOVWF  x70
07F4E:  MOVLW  A3
07F50:  MOVWF  x6F
07F52:  MOVLB  0
07F54:  CALL   6DF2
07F58:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................          
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            fprintf(CH2,SMS_Massage4);
....................            putc('\n',CH2);
....................           putc(26,CH2);
....................               */
....................          }
....................       }
07F5A:  BRA    7F66
07F5C:  MOVLB  E
....................       else
....................       {
....................          Output.B4 = 1;
07F5E:  MOVLB  D
07F60:  BSF    xAB.3
....................          SendSMS.B4 =0;
07F62:  BCF    xDB.3
....................          functointest_f =0;
07F64:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
07F66:  BTFSS  xBF.4
07F68:  BRA    801C
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
07F6A:  MOVLW  00
07F6C:  BTFSC  xA7.4
07F6E:  MOVLW  01
07F70:  MOVLB  E
07F72:  MOVWF  x6E
07F74:  MOVLW  00
07F76:  MOVLB  D
07F78:  BTFSC  xAF.4
07F7A:  MOVLW  01
07F7C:  MOVLB  E
07F7E:  XORWF  x6E,W
07F80:  SUBLW  01
07F82:  BNZ   7F8A
07F84:  MOVLB  D
07F86:  BTFSC  xB3.4
07F88:  BRA    7F90
07F8A:  MOVLB  D
07F8C:  BTFSS  xC7.4
07F8E:  BRA    8014
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
07F90:  BTFSC  xC3.4
07F92:  BRA    8012
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07F94:  BTFSC  xC7.4
07F96:  BRA    7FA6
07F98:  MOVF   55,W
07F9A:  SUBLW  0F
07F9C:  BNZ   7FA6
....................             {
....................                TimeBase1s = 100 ;            //reload again
07F9E:  MOVLW  64
07FA0:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
07FA2:  MOVFF  56,1F
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
07FA6:  BSF    xC7.4
....................             if(FlashingFlag == 0)
07FA8:  BTFSC  1C.1
07FAA:  BRA    7FB0
....................             {
....................                Output.B5 = 0;           //Flash output1
07FAC:  BCF    xAB.4
....................             }
07FAE:  BRA    7FB2
....................             else
....................             {
....................                Output.B5 = 1;
07FB0:  BSF    xAB.4
....................             }
.................... 
....................             if (~AutoTestFlag)
07FB2:  BTFSC  1C.4
07FB4:  BRA    7FD2
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
07FB6:  BTFSC  xBB.4
07FB8:  BRA    7FC4
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07FBA:  BSF    F89.4
07FBC:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07FBE:  BSF    F89.3
07FC0:  BCF    F92.3
....................                }
07FC2:  BRA    7FD2
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07FC4:  BTFSS  xB7.4
07FC6:  BRA    7FCE
07FC8:  BSF    F89.4
07FCA:  BCF    F92.4
07FCC:  BRA    7FD2
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07FCE:  BSF    F89.3
07FD0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
07FD2:  BTFSC  xDB.4
07FD4:  BRA    8012
07FD6:  BTFSC  32.3
07FD8:  BRA    8012
07FDA:  BTFSC  xC3.4
07FDC:  BRA    8012
....................             {
....................                SendSMS.B5 =1;
07FDE:  BSF    xDB.4
....................                strcat(SMS_MassageSUM, SMS_Massage5);
07FE0:  MOVLW  0D
07FE2:  MOVLB  E
07FE4:  MOVWF  x6E
07FE6:  MOVLW  03
07FE8:  MOVWF  x6D
07FEA:  MOVLW  0B
07FEC:  MOVWF  x70
07FEE:  MOVLW  03
07FF0:  MOVWF  x6F
07FF2:  MOVLB  0
07FF4:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
07FF8:  MOVLW  0D
07FFA:  MOVLB  E
07FFC:  MOVWF  x6E
07FFE:  MOVLW  03
08000:  MOVWF  x6D
08002:  MOVLW  0D
08004:  MOVWF  x70
08006:  MOVLW  A3
08008:  MOVWF  x6F
0800A:  MOVLB  0
0800C:  CALL   6DF2
08010:  MOVLB  D
....................                /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage5);
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
08012:  BRA    801A
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
08014:  BTFSS  xB3.4
08016:  BRA    801A
08018:  BCF    xC3.4
....................    }
0801A:  BRA    8086
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
0801C:  MOVLW  00
0801E:  BTFSC  xA7.4
08020:  MOVLW  01
08022:  MOVLB  E
08024:  MOVWF  x6E
08026:  MOVLW  00
08028:  MOVLB  D
0802A:  BTFSC  xAF.4
0802C:  MOVLW  01
0802E:  MOVLB  E
08030:  XORWF  x6E,W
08032:  SUBLW  01
08034:  BNZ   807E
....................       {
....................          Output.B5 = 0;
08036:  MOVLB  D
08038:  BCF    xAB.4
....................          // SMS Sending   
....................          if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
0803A:  BTFSC  xDB.4
0803C:  BRA    807A
0803E:  BTFSC  32.3
08040:  BRA    807A
08042:  BTFSC  xC3.4
08044:  BRA    807A
....................          {
....................             SendSMS.B5 =1;
08046:  BSF    xDB.4
....................             strcat(SMS_MassageSUM, SMS_Massage5);
08048:  MOVLW  0D
0804A:  MOVLB  E
0804C:  MOVWF  x6E
0804E:  MOVLW  03
08050:  MOVWF  x6D
08052:  MOVLW  0B
08054:  MOVWF  x70
08056:  MOVLW  03
08058:  MOVWF  x6F
0805A:  MOVLB  0
0805C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08060:  MOVLW  0D
08062:  MOVLB  E
08064:  MOVWF  x6E
08066:  MOVLW  03
08068:  MOVWF  x6D
0806A:  MOVLW  0D
0806C:  MOVWF  x70
0806E:  MOVLW  A3
08070:  MOVWF  x6F
08072:  MOVLB  0
08074:  CALL   6DF2
08078:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            fprintf(CH2,SMS_Massage5);
....................            putc('\n',CH2);
....................           putc(26,CH2);
....................               */
....................          }
....................       }
0807A:  BRA    8086
0807C:  MOVLB  E
....................       else
....................       {
....................          Output.B5 = 1;
0807E:  MOVLB  D
08080:  BSF    xAB.4
....................          SendSMS.B5 =0;
08082:  BCF    xDB.4
....................          functointest_f =0;
08084:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
08086:  BTFSS  xBF.5
08088:  BRA    813C
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
0808A:  MOVLW  00
0808C:  BTFSC  xA7.5
0808E:  MOVLW  01
08090:  MOVLB  E
08092:  MOVWF  x6E
08094:  MOVLW  00
08096:  MOVLB  D
08098:  BTFSC  xAF.5
0809A:  MOVLW  01
0809C:  MOVLB  E
0809E:  XORWF  x6E,W
080A0:  SUBLW  01
080A2:  BNZ   80AA
080A4:  MOVLB  D
080A6:  BTFSC  xB3.5
080A8:  BRA    80B0
080AA:  MOVLB  D
080AC:  BTFSS  xC7.5
080AE:  BRA    8134
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
080B0:  BTFSC  xC3.5
080B2:  BRA    8132
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
080B4:  BTFSC  xC7.5
080B6:  BRA    80C6
080B8:  MOVF   55,W
080BA:  SUBLW  0F
080BC:  BNZ   80C6
....................             {
....................                TimeBase1s = 100 ;            //reload again
080BE:  MOVLW  64
080C0:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
080C2:  MOVFF  56,1F
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
080C6:  BSF    xC7.5
....................             if(FlashingFlag == 0)
080C8:  BTFSC  1C.1
080CA:  BRA    80D0
....................             {
....................                Output.B6 = 0;           //Flash output1
080CC:  BCF    xAB.5
....................             }
080CE:  BRA    80D2
....................             else
....................             {
....................                Output.B6 = 1;
080D0:  BSF    xAB.5
....................             }
.................... 
....................             if (~AutoTestFlag)
080D2:  BTFSC  1C.4
080D4:  BRA    80F2
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
080D6:  BTFSC  xBB.5
080D8:  BRA    80E4
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
080DA:  BSF    F89.4
080DC:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
080DE:  BSF    F89.3
080E0:  BCF    F92.3
....................                }
080E2:  BRA    80F2
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
080E4:  BTFSS  xB7.5
080E6:  BRA    80EE
080E8:  BSF    F89.4
080EA:  BCF    F92.4
080EC:  BRA    80F2
....................                   else output_bit(Pbell,OnRelay);                          //Bell
080EE:  BSF    F89.3
080F0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
080F2:  BTFSC  xDB.5
080F4:  BRA    8132
080F6:  BTFSC  32.3
080F8:  BRA    8132
080FA:  BTFSC  xC3.5
080FC:  BRA    8132
....................             {
....................                SendSMS.B6 =1;
080FE:  BSF    xDB.5
....................                strcat(SMS_MassageSUM, SMS_Massage6);
08100:  MOVLW  0D
08102:  MOVLB  E
08104:  MOVWF  x6E
08106:  MOVLW  03
08108:  MOVWF  x6D
0810A:  MOVLW  0B
0810C:  MOVWF  x70
0810E:  MOVLW  23
08110:  MOVWF  x6F
08112:  MOVLB  0
08114:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
08118:  MOVLW  0D
0811A:  MOVLB  E
0811C:  MOVWF  x6E
0811E:  MOVLW  03
08120:  MOVWF  x6D
08122:  MOVLW  0D
08124:  MOVWF  x70
08126:  MOVLW  A3
08128:  MOVWF  x6F
0812A:  MOVLB  0
0812C:  CALL   6DF2
08130:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage6);
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
....................       }
08132:  BRA    813A
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
08134:  BTFSS  xB3.5
08136:  BRA    813A
08138:  BCF    xC3.5
....................    }
0813A:  BRA    81A6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
0813C:  MOVLW  00
0813E:  BTFSC  xA7.5
08140:  MOVLW  01
08142:  MOVLB  E
08144:  MOVWF  x6E
08146:  MOVLW  00
08148:  MOVLB  D
0814A:  BTFSC  xAF.5
0814C:  MOVLW  01
0814E:  MOVLB  E
08150:  XORWF  x6E,W
08152:  SUBLW  01
08154:  BNZ   819E
....................       {
....................          Output.B6 = 0;
08156:  MOVLB  D
08158:  BCF    xAB.5
....................          // SMS Sending   
....................          if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
0815A:  BTFSC  xDB.5
0815C:  BRA    819A
0815E:  BTFSC  32.3
08160:  BRA    819A
08162:  BTFSC  xC3.5
08164:  BRA    819A
....................          {
....................             SendSMS.B6 =1;
08166:  BSF    xDB.5
....................             strcat(SMS_MassageSUM, SMS_Massage6);
08168:  MOVLW  0D
0816A:  MOVLB  E
0816C:  MOVWF  x6E
0816E:  MOVLW  03
08170:  MOVWF  x6D
08172:  MOVLW  0B
08174:  MOVWF  x70
08176:  MOVLW  23
08178:  MOVWF  x6F
0817A:  MOVLB  0
0817C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08180:  MOVLW  0D
08182:  MOVLB  E
08184:  MOVWF  x6E
08186:  MOVLW  03
08188:  MOVWF  x6D
0818A:  MOVLW  0D
0818C:  MOVWF  x70
0818E:  MOVLW  A3
08190:  MOVWF  x6F
08192:  MOVLB  0
08194:  CALL   6DF2
08198:  MOVLB  D
....................          
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            fprintf(CH2,SMS_Massage6);
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
0819A:  BRA    81A6
0819C:  MOVLB  E
....................       else
....................       {
....................          Output.B6 = 1;
0819E:  MOVLB  D
081A0:  BSF    xAB.5
....................          SendSMS.B6 =0;
081A2:  BCF    xDB.5
....................          functointest_f =0;
081A4:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
081A6:  BTFSS  xBF.6
081A8:  BRA    825C
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
081AA:  MOVLW  00
081AC:  BTFSC  xA7.6
081AE:  MOVLW  01
081B0:  MOVLB  E
081B2:  MOVWF  x6E
081B4:  MOVLW  00
081B6:  MOVLB  D
081B8:  BTFSC  xAF.6
081BA:  MOVLW  01
081BC:  MOVLB  E
081BE:  XORWF  x6E,W
081C0:  SUBLW  01
081C2:  BNZ   81CA
081C4:  MOVLB  D
081C6:  BTFSC  xB3.6
081C8:  BRA    81D0
081CA:  MOVLB  D
081CC:  BTFSS  xC7.6
081CE:  BRA    8254
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
081D0:  BTFSC  xC3.6
081D2:  BRA    8252
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
081D4:  BTFSC  xC7.6
081D6:  BRA    81E6
081D8:  MOVF   55,W
081DA:  SUBLW  0F
081DC:  BNZ   81E6
....................             {
....................                TimeBase1s = 100 ;            //reload again
081DE:  MOVLW  64
081E0:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
081E2:  MOVFF  56,1F
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
081E6:  BSF    xC7.6
....................             if(FlashingFlag == 0)
081E8:  BTFSC  1C.1
081EA:  BRA    81F0
....................             {
....................                Output.B7 = 0;           //Flash output1
081EC:  BCF    xAB.6
....................             }
081EE:  BRA    81F2
....................             else
....................             {
....................                Output.B7 = 1;
081F0:  BSF    xAB.6
....................             }
.................... 
....................             if (~AutoTestFlag)
081F2:  BTFSC  1C.4
081F4:  BRA    8212
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
081F6:  BTFSC  xBB.6
081F8:  BRA    8204
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
081FA:  BSF    F89.4
081FC:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
081FE:  BSF    F89.3
08200:  BCF    F92.3
....................                }
08202:  BRA    8212
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08204:  BTFSS  xB7.6
08206:  BRA    820E
08208:  BSF    F89.4
0820A:  BCF    F92.4
0820C:  BRA    8212
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0820E:  BSF    F89.3
08210:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
08212:  BTFSC  xDB.6
08214:  BRA    8252
08216:  BTFSC  32.3
08218:  BRA    8252
0821A:  BTFSC  xC3.6
0821C:  BRA    8252
....................             {
....................                SendSMS.B7 =1;
0821E:  BSF    xDB.6
....................                strcat(SMS_MassageSUM, SMS_Massage7);
08220:  MOVLW  0D
08222:  MOVLB  E
08224:  MOVWF  x6E
08226:  MOVLW  03
08228:  MOVWF  x6D
0822A:  MOVLW  0B
0822C:  MOVWF  x70
0822E:  MOVLW  43
08230:  MOVWF  x6F
08232:  MOVLB  0
08234:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
08238:  MOVLW  0D
0823A:  MOVLB  E
0823C:  MOVWF  x6E
0823E:  MOVLW  03
08240:  MOVWF  x6D
08242:  MOVLW  0D
08244:  MOVWF  x70
08246:  MOVLW  A3
08248:  MOVWF  x6F
0824A:  MOVLB  0
0824C:  CALL   6DF2
08250:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               fprintf(CH2,SMS_Massage7);  
....................               putc('\n',CH2);
....................              putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
08252:  BRA    825A
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
08254:  BTFSS  xB3.6
08256:  BRA    825A
08258:  BCF    xC3.6
....................    }
0825A:  BRA    82C6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
0825C:  MOVLW  00
0825E:  BTFSC  xA7.6
08260:  MOVLW  01
08262:  MOVLB  E
08264:  MOVWF  x6E
08266:  MOVLW  00
08268:  MOVLB  D
0826A:  BTFSC  xAF.6
0826C:  MOVLW  01
0826E:  MOVLB  E
08270:  XORWF  x6E,W
08272:  SUBLW  01
08274:  BNZ   82BE
....................       {
....................          Output.B7 = 0;
08276:  MOVLB  D
08278:  BCF    xAB.6
....................          // SMS Sending   
....................          if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0827A:  BTFSC  xDB.6
0827C:  BRA    82BA
0827E:  BTFSC  32.3
08280:  BRA    82BA
08282:  BTFSC  xC3.6
08284:  BRA    82BA
....................          {
....................             SendSMS.B7 =1;
08286:  BSF    xDB.6
....................             strcat(SMS_MassageSUM, SMS_Massage7);
08288:  MOVLW  0D
0828A:  MOVLB  E
0828C:  MOVWF  x6E
0828E:  MOVLW  03
08290:  MOVWF  x6D
08292:  MOVLW  0B
08294:  MOVWF  x70
08296:  MOVLW  43
08298:  MOVWF  x6F
0829A:  MOVLB  0
0829C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
082A0:  MOVLW  0D
082A2:  MOVLB  E
082A4:  MOVWF  x6E
082A6:  MOVLW  03
082A8:  MOVWF  x6D
082AA:  MOVLW  0D
082AC:  MOVWF  x70
082AE:  MOVLW  A3
082B0:  MOVWF  x6F
082B2:  MOVLB  0
082B4:  CALL   6DF2
082B8:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            fprintf(CH2,SMS_Massage7);  
....................            putc('\n',CH2);
....................           putc(26,CH2);
....................               */
....................          }
....................       }
082BA:  BRA    82C6
082BC:  MOVLB  E
....................       else
....................       {
....................          Output.B7 = 1;
082BE:  MOVLB  D
082C0:  BSF    xAB.6
....................          SendSMS.B7 =0;
082C2:  BCF    xDB.6
....................          functointest_f =0;
082C4:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
082C6:  BTFSS  xBF.7
082C8:  BRA    837C
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
082CA:  MOVLW  00
082CC:  BTFSC  xA7.7
082CE:  MOVLW  01
082D0:  MOVLB  E
082D2:  MOVWF  x6E
082D4:  MOVLW  00
082D6:  MOVLB  D
082D8:  BTFSC  xAF.7
082DA:  MOVLW  01
082DC:  MOVLB  E
082DE:  XORWF  x6E,W
082E0:  SUBLW  01
082E2:  BNZ   82EA
082E4:  MOVLB  D
082E6:  BTFSC  xB3.7
082E8:  BRA    82F0
082EA:  MOVLB  D
082EC:  BTFSS  xC7.7
082EE:  BRA    8374
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
082F0:  BTFSC  xC3.7
082F2:  BRA    8372
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
082F4:  BTFSC  xC7.7
082F6:  BRA    8306
082F8:  MOVF   55,W
082FA:  SUBLW  0F
082FC:  BNZ   8306
....................             {
....................                TimeBase1s = 100 ;            //reload again
082FE:  MOVLW  64
08300:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
08302:  MOVFF  56,1F
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
08306:  BSF    xC7.7
....................             if(FlashingFlag == 0)
08308:  BTFSC  1C.1
0830A:  BRA    8310
....................             {
....................                Output.B8 = 0;           //Flash output1
0830C:  BCF    xAB.7
....................             }
0830E:  BRA    8312
....................             else
....................             {
....................                Output.B8 = 1;
08310:  BSF    xAB.7
....................             }
.................... 
....................             if (~AutoTestFlag)
08312:  BTFSC  1C.4
08314:  BRA    8332
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
08316:  BTFSC  xBB.7
08318:  BRA    8324
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0831A:  BSF    F89.4
0831C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0831E:  BSF    F89.3
08320:  BCF    F92.3
....................                }
08322:  BRA    8332
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08324:  BTFSS  xB7.7
08326:  BRA    832E
08328:  BSF    F89.4
0832A:  BCF    F92.4
0832C:  BRA    8332
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0832E:  BSF    F89.3
08330:  BCF    F92.3
....................                }
....................             }
....................                   // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
08332:  BTFSC  xDB.7
08334:  BRA    8372
08336:  BTFSC  32.3
08338:  BRA    8372
0833A:  BTFSC  xC3.7
0833C:  BRA    8372
....................          {
....................             SendSMS.B8 =1;
0833E:  BSF    xDB.7
....................             strcat(SMS_MassageSUM, SMS_Massage8);
08340:  MOVLW  0D
08342:  MOVLB  E
08344:  MOVWF  x6E
08346:  MOVLW  03
08348:  MOVWF  x6D
0834A:  MOVLW  0B
0834C:  MOVWF  x70
0834E:  MOVLW  63
08350:  MOVWF  x6F
08352:  MOVLB  0
08354:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08358:  MOVLW  0D
0835A:  MOVLB  E
0835C:  MOVWF  x6E
0835E:  MOVLW  03
08360:  MOVWF  x6D
08362:  MOVLW  0D
08364:  MOVWF  x70
08366:  MOVLW  A3
08368:  MOVWF  x6F
0836A:  MOVLB  0
0836C:  CALL   6DF2
08370:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage8);  
....................            putc('\n',CH2);
....................           putc(26,CH2);
....................               */
....................          }
....................        }
.................... 
....................       }
08372:  BRA    837A
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
08374:  BTFSS  xB3.7
08376:  BRA    837A
08378:  BCF    xC3.7
....................    }
0837A:  BRA    83E6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
0837C:  MOVLW  00
0837E:  BTFSC  xA7.7
08380:  MOVLW  01
08382:  MOVLB  E
08384:  MOVWF  x6E
08386:  MOVLW  00
08388:  MOVLB  D
0838A:  BTFSC  xAF.7
0838C:  MOVLW  01
0838E:  MOVLB  E
08390:  XORWF  x6E,W
08392:  SUBLW  01
08394:  BNZ   83DE
....................       {
....................          Output.B8 = 0;
08396:  MOVLB  D
08398:  BCF    xAB.7
....................                // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
0839A:  BTFSC  xDB.7
0839C:  BRA    83DA
0839E:  BTFSC  32.3
083A0:  BRA    83DA
083A2:  BTFSC  xC3.7
083A4:  BRA    83DA
....................          {
....................             SendSMS.B8 =1;
083A6:  BSF    xDB.7
....................             strcat(SMS_MassageSUM, SMS_Massage8);
083A8:  MOVLW  0D
083AA:  MOVLB  E
083AC:  MOVWF  x6E
083AE:  MOVLW  03
083B0:  MOVWF  x6D
083B2:  MOVLW  0B
083B4:  MOVWF  x70
083B6:  MOVLW  63
083B8:  MOVWF  x6F
083BA:  MOVLB  0
083BC:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
083C0:  MOVLW  0D
083C2:  MOVLB  E
083C4:  MOVWF  x6E
083C6:  MOVLW  03
083C8:  MOVWF  x6D
083CA:  MOVLW  0D
083CC:  MOVWF  x70
083CE:  MOVLW  A3
083D0:  MOVWF  x6F
083D2:  MOVLB  0
083D4:  CALL   6DF2
083D8:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage8);  
....................            putc('\n',CH2);
....................           putc(26,CH2);
....................               */
....................          }
....................       }
083DA:  BRA    83E6
083DC:  MOVLB  E
....................       else
....................       {
....................          Output.B8 = 1;
083DE:  MOVLB  D
083E0:  BSF    xAB.7
....................          SendSMS.B8 =0;
083E2:  BCF    xDB.7
....................          functointest_f =0;
083E4:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
083E6:  BTFSS  xC0.0
083E8:  BRA    849C
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
083EA:  MOVLW  00
083EC:  BTFSC  xA8.0
083EE:  MOVLW  01
083F0:  MOVLB  E
083F2:  MOVWF  x6E
083F4:  MOVLW  00
083F6:  MOVLB  D
083F8:  BTFSC  xB0.0
083FA:  MOVLW  01
083FC:  MOVLB  E
083FE:  XORWF  x6E,W
08400:  SUBLW  01
08402:  BNZ   840A
08404:  MOVLB  D
08406:  BTFSC  xB4.0
08408:  BRA    8410
0840A:  MOVLB  D
0840C:  BTFSS  xC8.0
0840E:  BRA    8494
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
08410:  BTFSC  xC4.0
08412:  BRA    8492
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08414:  BTFSC  xC8.0
08416:  BRA    8426
08418:  MOVF   55,W
0841A:  SUBLW  0F
0841C:  BNZ   8426
....................             {
....................                TimeBase1s = 100 ;            //reload again
0841E:  MOVLW  64
08420:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
08422:  MOVFF  56,1F
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
08426:  BSF    xC8.0
....................             if(FlashingFlag == 0)
08428:  BTFSC  1C.1
0842A:  BRA    8430
....................             {
....................                Output.B9 = 0;           //Flash output1
0842C:  BCF    xAC.0
....................             }
0842E:  BRA    8432
....................             else
....................             {
....................                Output.B9 = 1;
08430:  BSF    xAC.0
....................             }
.................... 
....................             if (~AutoTestFlag)
08432:  BTFSC  1C.4
08434:  BRA    8452
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
08436:  BTFSC  xBC.0
08438:  BRA    8444
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0843A:  BSF    F89.4
0843C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0843E:  BSF    F89.3
08440:  BCF    F92.3
....................                }
08442:  BRA    8452
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08444:  BTFSS  xB8.0
08446:  BRA    844E
08448:  BSF    F89.4
0844A:  BCF    F92.4
0844C:  BRA    8452
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0844E:  BSF    F89.3
08450:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
08452:  BTFSC  xDC.0
08454:  BRA    8492
08456:  BTFSC  32.3
08458:  BRA    8492
0845A:  BTFSC  xC4.0
0845C:  BRA    8492
....................             {
....................                SendSMS.B9 =1;
0845E:  BSF    xDC.0
....................                strcat(SMS_MassageSUM, SMS_Massage9);
08460:  MOVLW  0D
08462:  MOVLB  E
08464:  MOVWF  x6E
08466:  MOVLW  03
08468:  MOVWF  x6D
0846A:  MOVLW  0B
0846C:  MOVWF  x70
0846E:  MOVLW  83
08470:  MOVWF  x6F
08472:  MOVLB  0
08474:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
08478:  MOVLW  0D
0847A:  MOVLB  E
0847C:  MOVWF  x6E
0847E:  MOVLW  03
08480:  MOVWF  x6D
08482:  MOVLW  0D
08484:  MOVWF  x70
08486:  MOVLW  A3
08488:  MOVWF  x6F
0848A:  MOVLB  0
0848C:  CALL   6DF2
08490:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage9);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
08492:  BRA    849A
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
08494:  BTFSS  xB4.0
08496:  BRA    849A
08498:  BCF    xC4.0
....................    }
0849A:  BRA    8506
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
0849C:  MOVLW  00
0849E:  BTFSC  xA8.0
084A0:  MOVLW  01
084A2:  MOVLB  E
084A4:  MOVWF  x6E
084A6:  MOVLW  00
084A8:  MOVLB  D
084AA:  BTFSC  xB0.0
084AC:  MOVLW  01
084AE:  MOVLB  E
084B0:  XORWF  x6E,W
084B2:  SUBLW  01
084B4:  BNZ   84FE
....................       {
....................          Output.B9 = 0;
084B6:  MOVLB  D
084B8:  BCF    xAC.0
....................          // SMS Sending   
....................          if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
084BA:  BTFSC  xDC.0
084BC:  BRA    84FA
084BE:  BTFSC  32.3
084C0:  BRA    84FA
084C2:  BTFSC  xC4.0
084C4:  BRA    84FA
....................          {
....................             SendSMS.B9 =1;
084C6:  BSF    xDC.0
....................             strcat(SMS_MassageSUM, SMS_Massage9);
084C8:  MOVLW  0D
084CA:  MOVLB  E
084CC:  MOVWF  x6E
084CE:  MOVLW  03
084D0:  MOVWF  x6D
084D2:  MOVLW  0B
084D4:  MOVWF  x70
084D6:  MOVLW  83
084D8:  MOVWF  x6F
084DA:  MOVLB  0
084DC:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
084E0:  MOVLW  0D
084E2:  MOVLB  E
084E4:  MOVWF  x6E
084E6:  MOVLW  03
084E8:  MOVWF  x6D
084EA:  MOVLW  0D
084EC:  MOVWF  x70
084EE:  MOVLW  A3
084F0:  MOVWF  x6F
084F2:  MOVLB  0
084F4:  CALL   6DF2
084F8:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage9);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
084FA:  BRA    8506
084FC:  MOVLB  E
....................       else
....................       {
....................          Output.B9 = 1;
084FE:  MOVLB  D
08500:  BSF    xAC.0
....................          SendSMS.B9 =0;
08502:  BCF    xDC.0
....................          functointest_f =0;
08504:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
08506:  BTFSS  xC0.1
08508:  BRA    85BC
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
0850A:  MOVLW  00
0850C:  BTFSC  xA8.1
0850E:  MOVLW  01
08510:  MOVLB  E
08512:  MOVWF  x6E
08514:  MOVLW  00
08516:  MOVLB  D
08518:  BTFSC  xB0.1
0851A:  MOVLW  01
0851C:  MOVLB  E
0851E:  XORWF  x6E,W
08520:  SUBLW  01
08522:  BNZ   852A
08524:  MOVLB  D
08526:  BTFSC  xB4.1
08528:  BRA    8530
0852A:  MOVLB  D
0852C:  BTFSS  xC8.1
0852E:  BRA    85B4
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
08530:  BTFSC  xC4.1
08532:  BRA    85B2
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08534:  BTFSC  xC8.1
08536:  BRA    8546
08538:  MOVF   55,W
0853A:  SUBLW  0F
0853C:  BNZ   8546
....................             {
....................                TimeBase1s = 100 ;            //reload again
0853E:  MOVLW  64
08540:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
08542:  MOVFF  56,1F
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
08546:  BSF    xC8.1
....................             if(FlashingFlag == 0)
08548:  BTFSC  1C.1
0854A:  BRA    8550
....................             {
....................                Output.B10 = 0;           //Flash output1
0854C:  BCF    xAC.1
....................             }
0854E:  BRA    8552
....................             else
....................             {
....................                Output.B10 = 1;
08550:  BSF    xAC.1
....................             }
.................... 
....................             if (~AutoTestFlag)
08552:  BTFSC  1C.4
08554:  BRA    8572
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
08556:  BTFSC  xBC.1
08558:  BRA    8564
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0855A:  BSF    F89.4
0855C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0855E:  BSF    F89.3
08560:  BCF    F92.3
....................                }
08562:  BRA    8572
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08564:  BTFSS  xB8.1
08566:  BRA    856E
08568:  BSF    F89.4
0856A:  BCF    F92.4
0856C:  BRA    8572
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0856E:  BSF    F89.3
08570:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
08572:  BTFSC  xDC.1
08574:  BRA    85B2
08576:  BTFSC  32.3
08578:  BRA    85B2
0857A:  BTFSC  xC4.1
0857C:  BRA    85B2
....................             {
....................                SendSMS.B10 =1;
0857E:  BSF    xDC.1
....................                strcat(SMS_MassageSUM, SMS_Massage10);
08580:  MOVLW  0D
08582:  MOVLB  E
08584:  MOVWF  x6E
08586:  MOVLW  03
08588:  MOVWF  x6D
0858A:  MOVLW  0B
0858C:  MOVWF  x70
0858E:  MOVLW  A3
08590:  MOVWF  x6F
08592:  MOVLB  0
08594:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
08598:  MOVLW  0D
0859A:  MOVLB  E
0859C:  MOVWF  x6E
0859E:  MOVLW  03
085A0:  MOVWF  x6D
085A2:  MOVLW  0D
085A4:  MOVWF  x70
085A6:  MOVLW  A3
085A8:  MOVWF  x6F
085AA:  MOVLB  0
085AC:  CALL   6DF2
085B0:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage10);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
085B2:  BRA    85BA
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
085B4:  BTFSS  xB4.1
085B6:  BRA    85BA
085B8:  BCF    xC4.1
....................    }
085BA:  BRA    8626
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
085BC:  MOVLW  00
085BE:  BTFSC  xA8.1
085C0:  MOVLW  01
085C2:  MOVLB  E
085C4:  MOVWF  x6E
085C6:  MOVLW  00
085C8:  MOVLB  D
085CA:  BTFSC  xB0.1
085CC:  MOVLW  01
085CE:  MOVLB  E
085D0:  XORWF  x6E,W
085D2:  SUBLW  01
085D4:  BNZ   861E
....................       {
....................          Output.B10 = 0;
085D6:  MOVLB  D
085D8:  BCF    xAC.1
....................          // SMS Sending   
....................          if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
085DA:  BTFSC  xDC.1
085DC:  BRA    861A
085DE:  BTFSC  32.3
085E0:  BRA    861A
085E2:  BTFSC  xC4.1
085E4:  BRA    861A
....................          {
....................             SendSMS.B10 =1;
085E6:  BSF    xDC.1
....................             strcat(SMS_MassageSUM, SMS_Massage10);
085E8:  MOVLW  0D
085EA:  MOVLB  E
085EC:  MOVWF  x6E
085EE:  MOVLW  03
085F0:  MOVWF  x6D
085F2:  MOVLW  0B
085F4:  MOVWF  x70
085F6:  MOVLW  A3
085F8:  MOVWF  x6F
085FA:  MOVLB  0
085FC:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08600:  MOVLW  0D
08602:  MOVLB  E
08604:  MOVWF  x6E
08606:  MOVLW  03
08608:  MOVWF  x6D
0860A:  MOVLW  0D
0860C:  MOVWF  x70
0860E:  MOVLW  A3
08610:  MOVWF  x6F
08612:  MOVLB  0
08614:  CALL   6DF2
08618:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage10);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
0861A:  BRA    8626
0861C:  MOVLB  E
....................       else
....................       {
....................          Output.B10 = 1;
0861E:  MOVLB  D
08620:  BSF    xAC.1
....................          SendSMS.B10 =0;
08622:  BCF    xDC.1
....................          functointest_f =0;
08624:  BCF    32.3
....................       }
....................    }
.................... //}
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if(AlarmIndicator.B11 == 1)    // Alarm Function
08626:  BTFSS  xC0.2
08628:  BRA    86DC
....................    {
....................       if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 1))|| In.B11 == 1)    // alarm1 occure and "Lock type"
0862A:  MOVLW  00
0862C:  BTFSC  xA8.2
0862E:  MOVLW  01
08630:  MOVLB  E
08632:  MOVWF  x6E
08634:  MOVLW  00
08636:  MOVLB  D
08638:  BTFSC  xB0.2
0863A:  MOVLW  01
0863C:  MOVLB  E
0863E:  XORWF  x6E,W
08640:  SUBLW  01
08642:  BNZ   864A
08644:  MOVLB  D
08646:  BTFSC  xB4.2
08648:  BRA    8650
0864A:  MOVLB  D
0864C:  BTFSS  xC8.2
0864E:  BRA    86D4
....................       //if(Inputt.B11 == 0)
....................       {
....................          if(Ack.B11 == 0)
08650:  BTFSC  xC4.2
08652:  BRA    86D2
....................          {
....................             if(In.B11 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08654:  BTFSC  xC8.2
08656:  BRA    8666
08658:  MOVF   55,W
0865A:  SUBLW  0F
0865C:  BNZ   8666
....................             {
....................                TimeBase1s = 100 ;            //reload again
0865E:  MOVLW  64
08660:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
08662:  MOVFF  56,1F
....................             }
.................... 
....................             In.B11 = 1;                                 // setbit in1
08666:  BSF    xC8.2
....................             if(FlashingFlag == 0)
08668:  BTFSC  1C.1
0866A:  BRA    8670
....................             {
....................                Output.B11 = 0;           //Flash output1
0866C:  BCF    xAC.2
....................             }
0866E:  BRA    8672
....................             else
....................             {
....................                Output.B11 = 1;
08670:  BSF    xAC.2
....................             }
.................... 
....................             if (~AutoTestFlag)
08672:  BTFSC  1C.4
08674:  BRA    8692
....................             {
....................                if(OutputBoth.B11 == 0)                  //Both output
08676:  BTFSC  xBC.2
08678:  BRA    8684
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0867A:  BSF    F89.4
0867C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0867E:  BSF    F89.3
08680:  BCF    F92.3
....................                }
08682:  BRA    8692
....................                else
....................                {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08684:  BTFSS  xB8.2
08686:  BRA    868E
08688:  BSF    F89.4
0868A:  BCF    F92.4
0868C:  BRA    8692
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0868E:  BSF    F89.3
08690:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
08692:  BTFSC  xDC.2
08694:  BRA    86D2
08696:  BTFSC  32.3
08698:  BRA    86D2
0869A:  BTFSC  xC4.2
0869C:  BRA    86D2
....................             {
....................                SendSMS.B11 =1;
0869E:  BSF    xDC.2
....................                strcat(SMS_MassageSUM, SMS_Massage11);
086A0:  MOVLW  0D
086A2:  MOVLB  E
086A4:  MOVWF  x6E
086A6:  MOVLW  03
086A8:  MOVWF  x6D
086AA:  MOVLW  0B
086AC:  MOVWF  x70
086AE:  MOVLW  C3
086B0:  MOVWF  x6F
086B2:  MOVLB  0
086B4:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
086B8:  MOVLW  0D
086BA:  MOVLB  E
086BC:  MOVWF  x6E
086BE:  MOVLW  03
086C0:  MOVWF  x6D
086C2:  MOVLW  0D
086C4:  MOVWF  x70
086C6:  MOVLW  A3
086C8:  MOVWF  x6F
086CA:  MOVLB  0
086CC:  CALL   6DF2
086D0:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage11);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
086D2:  BRA    86DA
....................       else if(FaultType.B11 == 1) Ack.B11 = 0;
086D4:  BTFSS  xB4.2
086D6:  BRA    86DA
086D8:  BCF    xC4.2
....................    }
086DA:  BRA    8746
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B11 ^ InputType.B11) == 1)
086DC:  MOVLW  00
086DE:  BTFSC  xA8.2
086E0:  MOVLW  01
086E2:  MOVLB  E
086E4:  MOVWF  x6E
086E6:  MOVLW  00
086E8:  MOVLB  D
086EA:  BTFSC  xB0.2
086EC:  MOVLW  01
086EE:  MOVLB  E
086F0:  XORWF  x6E,W
086F2:  SUBLW  01
086F4:  BNZ   873E
....................       {
....................          Output.B11 = 0;
086F6:  MOVLB  D
086F8:  BCF    xAC.2
....................          // SMS Sending   
....................          if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
086FA:  BTFSC  xDC.2
086FC:  BRA    873A
086FE:  BTFSC  32.3
08700:  BRA    873A
08702:  BTFSC  xC4.2
08704:  BRA    873A
....................          { 
....................             SendSMS.B11 =1;
08706:  BSF    xDC.2
....................             strcat(SMS_MassageSUM, SMS_Massage11);
08708:  MOVLW  0D
0870A:  MOVLB  E
0870C:  MOVWF  x6E
0870E:  MOVLW  03
08710:  MOVWF  x6D
08712:  MOVLW  0B
08714:  MOVWF  x70
08716:  MOVLW  C3
08718:  MOVWF  x6F
0871A:  MOVLB  0
0871C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08720:  MOVLW  0D
08722:  MOVLB  E
08724:  MOVWF  x6E
08726:  MOVLW  03
08728:  MOVWF  x6D
0872A:  MOVLW  0D
0872C:  MOVWF  x70
0872E:  MOVLW  A3
08730:  MOVWF  x6F
08732:  MOVLB  0
08734:  CALL   6DF2
08738:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................            
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage11);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
0873A:  BRA    8746
0873C:  MOVLB  E
....................       else
....................       {
....................          Output.B11 = 1;
0873E:  MOVLB  D
08740:  BSF    xAC.2
....................          SendSMS.B11 =0;
08742:  BCF    xDC.2
....................          functointest_f =0;
08744:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if(AlarmIndicator.B12 == 1)    // Alarm Function
08746:  BTFSS  xC0.3
08748:  BRA    87FC
....................    {
....................       if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 1))|| In.B12 == 1)    // alarm1 occure and "Lock type"
0874A:  MOVLW  00
0874C:  BTFSC  xA8.3
0874E:  MOVLW  01
08750:  MOVLB  E
08752:  MOVWF  x6E
08754:  MOVLW  00
08756:  MOVLB  D
08758:  BTFSC  xB0.3
0875A:  MOVLW  01
0875C:  MOVLB  E
0875E:  XORWF  x6E,W
08760:  SUBLW  01
08762:  BNZ   876A
08764:  MOVLB  D
08766:  BTFSC  xB4.3
08768:  BRA    8770
0876A:  MOVLB  D
0876C:  BTFSS  xC8.3
0876E:  BRA    87F4
....................       //if(Inputt.B12 == 0)
....................       {
....................          if(Ack.B12 == 0)
08770:  BTFSC  xC4.3
08772:  BRA    87F2
....................          {
....................             if(In.B12 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08774:  BTFSC  xC8.3
08776:  BRA    8786
08778:  MOVF   55,W
0877A:  SUBLW  0F
0877C:  BNZ   8786
....................             {
....................                TimeBase1s = 100 ;            //reload again
0877E:  MOVLW  64
08780:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
08782:  MOVFF  56,1F
....................             }
.................... 
....................             In.B12 = 1;                                 // setbit in1
08786:  BSF    xC8.3
....................             if(FlashingFlag == 0)
08788:  BTFSC  1C.1
0878A:  BRA    8790
....................             {
....................                Output.B12 = 0;           //Flash output1
0878C:  BCF    xAC.3
....................             }
0878E:  BRA    8792
....................             else
....................             {
....................                Output.B12 = 1;
08790:  BSF    xAC.3
....................             }
.................... 
....................             if (~AutoTestFlag)
08792:  BTFSC  1C.4
08794:  BRA    87B2
....................             {
....................                if(OutputBoth.B12 == 0)                  //Both output
08796:  BTFSC  xBC.3
08798:  BRA    87A4
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0879A:  BSF    F89.4
0879C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0879E:  BSF    F89.3
087A0:  BCF    F92.3
....................                }
087A2:  BRA    87B2
....................                else
....................                {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
087A4:  BTFSS  xB8.3
087A6:  BRA    87AE
087A8:  BSF    F89.4
087AA:  BCF    F92.4
087AC:  BRA    87B2
....................                   else output_bit(Pbell,OnRelay);                          //Bell
087AE:  BSF    F89.3
087B0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
087B2:  BTFSC  xDC.3
087B4:  BRA    87F2
087B6:  BTFSC  32.3
087B8:  BRA    87F2
087BA:  BTFSC  xC4.3
087BC:  BRA    87F2
....................             {
....................                SendSMS.B12 =1;
087BE:  BSF    xDC.3
....................                strcat(SMS_MassageSUM, SMS_Massage12);
087C0:  MOVLW  0D
087C2:  MOVLB  E
087C4:  MOVWF  x6E
087C6:  MOVLW  03
087C8:  MOVWF  x6D
087CA:  MOVLW  0B
087CC:  MOVWF  x70
087CE:  MOVLW  E3
087D0:  MOVWF  x6F
087D2:  MOVLB  0
087D4:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
087D8:  MOVLW  0D
087DA:  MOVLB  E
087DC:  MOVWF  x6E
087DE:  MOVLW  03
087E0:  MOVWF  x6D
087E2:  MOVLW  0D
087E4:  MOVWF  x70
087E6:  MOVLW  A3
087E8:  MOVWF  x6F
087EA:  MOVLB  0
087EC:  CALL   6DF2
087F0:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage12);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................         }
.................... 
....................       }
087F2:  BRA    87FA
....................       else if(FaultType.B12 == 1) Ack.B12 = 0;
087F4:  BTFSS  xB4.3
087F6:  BRA    87FA
087F8:  BCF    xC4.3
....................    }
087FA:  BRA    8866
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B12 ^ InputType.B12) == 1)
087FC:  MOVLW  00
087FE:  BTFSC  xA8.3
08800:  MOVLW  01
08802:  MOVLB  E
08804:  MOVWF  x6E
08806:  MOVLW  00
08808:  MOVLB  D
0880A:  BTFSC  xB0.3
0880C:  MOVLW  01
0880E:  MOVLB  E
08810:  XORWF  x6E,W
08812:  SUBLW  01
08814:  BNZ   885E
....................       {
....................          Output.B12 = 0;
08816:  MOVLB  D
08818:  BCF    xAC.3
....................          // SMS Sending   
....................          if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
0881A:  BTFSC  xDC.3
0881C:  BRA    885A
0881E:  BTFSC  32.3
08820:  BRA    885A
08822:  BTFSC  xC4.3
08824:  BRA    885A
....................          {
....................             SendSMS.B12 =1;
08826:  BSF    xDC.3
....................             strcat(SMS_MassageSUM, SMS_Massage12);
08828:  MOVLW  0D
0882A:  MOVLB  E
0882C:  MOVWF  x6E
0882E:  MOVLW  03
08830:  MOVWF  x6D
08832:  MOVLW  0B
08834:  MOVWF  x70
08836:  MOVLW  E3
08838:  MOVWF  x6F
0883A:  MOVLB  0
0883C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08840:  MOVLW  0D
08842:  MOVLB  E
08844:  MOVWF  x6E
08846:  MOVLW  03
08848:  MOVWF  x6D
0884A:  MOVLW  0D
0884C:  MOVWF  x70
0884E:  MOVLW  A3
08850:  MOVWF  x6F
08852:  MOVLB  0
08854:  CALL   6DF2
08858:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage12);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
0885A:  BRA    8866
0885C:  MOVLB  E
....................       else
....................       {
....................          Output.B12 = 1;
0885E:  MOVLB  D
08860:  BSF    xAC.3
....................          SendSMS.B12 =0;
08862:  BCF    xDC.3
....................          functointest_f =0;
08864:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if(AlarmIndicator.B13 == 1)    // Alarm Function
08866:  BTFSS  xC0.4
08868:  BRA    891C
....................    {
....................       if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 1))|| In.B13 == 1)    // alarm1 occure and "Lock type"
0886A:  MOVLW  00
0886C:  BTFSC  xA8.4
0886E:  MOVLW  01
08870:  MOVLB  E
08872:  MOVWF  x6E
08874:  MOVLW  00
08876:  MOVLB  D
08878:  BTFSC  xB0.4
0887A:  MOVLW  01
0887C:  MOVLB  E
0887E:  XORWF  x6E,W
08880:  SUBLW  01
08882:  BNZ   888A
08884:  MOVLB  D
08886:  BTFSC  xB4.4
08888:  BRA    8890
0888A:  MOVLB  D
0888C:  BTFSS  xC8.4
0888E:  BRA    8914
....................       //if(Inputt.B13 == 0)
....................       {
....................          if(Ack.B13 == 0)
08890:  BTFSC  xC4.4
08892:  BRA    8912
....................          {
....................             if(In.B13 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08894:  BTFSC  xC8.4
08896:  BRA    88A6
08898:  MOVF   55,W
0889A:  SUBLW  0F
0889C:  BNZ   88A6
....................             {
....................                TimeBase1s = 100 ;            //reload again
0889E:  MOVLW  64
088A0:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
088A2:  MOVFF  56,1F
....................             }
.................... 
....................             In.B13 = 1;                                 // setbit in1
088A6:  BSF    xC8.4
....................             if(FlashingFlag == 0)
088A8:  BTFSC  1C.1
088AA:  BRA    88B0
....................             {
....................                Output.B13 = 0;           //Flash output1
088AC:  BCF    xAC.4
....................             }
088AE:  BRA    88B2
....................             else
....................             {
....................                Output.B13 = 1;
088B0:  BSF    xAC.4
....................             }
.................... 
....................             if (~AutoTestFlag)
088B2:  BTFSC  1C.4
088B4:  BRA    88D2
....................             {
....................                if(OutputBoth.B13 == 0)                  //Both output
088B6:  BTFSC  xBC.4
088B8:  BRA    88C4
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
088BA:  BSF    F89.4
088BC:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
088BE:  BSF    F89.3
088C0:  BCF    F92.3
....................                }
088C2:  BRA    88D2
....................                else
....................                {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
088C4:  BTFSS  xB8.4
088C6:  BRA    88CE
088C8:  BSF    F89.4
088CA:  BCF    F92.4
088CC:  BRA    88D2
....................                   else output_bit(Pbell,OnRelay);                          //Bell
088CE:  BSF    F89.3
088D0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
088D2:  BTFSC  xDC.4
088D4:  BRA    8912
088D6:  BTFSC  32.3
088D8:  BRA    8912
088DA:  BTFSC  xC4.4
088DC:  BRA    8912
....................             {
....................                SendSMS.B13 =1;
088DE:  BSF    xDC.4
....................                strcat(SMS_MassageSUM, SMS_Massage13);
088E0:  MOVLW  0D
088E2:  MOVLB  E
088E4:  MOVWF  x6E
088E6:  MOVLW  03
088E8:  MOVWF  x6D
088EA:  MOVLW  0C
088EC:  MOVWF  x70
088EE:  MOVLW  03
088F0:  MOVWF  x6F
088F2:  MOVLB  0
088F4:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
088F8:  MOVLW  0D
088FA:  MOVLB  E
088FC:  MOVWF  x6E
088FE:  MOVLW  03
08900:  MOVWF  x6D
08902:  MOVLW  0D
08904:  MOVWF  x70
08906:  MOVLW  A3
08908:  MOVWF  x6F
0890A:  MOVLB  0
0890C:  CALL   6DF2
08910:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage13);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
08912:  BRA    891A
....................       else if(FaultType.B13 == 1) Ack.B13 = 0;
08914:  BTFSS  xB4.4
08916:  BRA    891A
08918:  BCF    xC4.4
....................    }
0891A:  BRA    8986
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B13 ^ InputType.B13) == 1)
0891C:  MOVLW  00
0891E:  BTFSC  xA8.4
08920:  MOVLW  01
08922:  MOVLB  E
08924:  MOVWF  x6E
08926:  MOVLW  00
08928:  MOVLB  D
0892A:  BTFSC  xB0.4
0892C:  MOVLW  01
0892E:  MOVLB  E
08930:  XORWF  x6E,W
08932:  SUBLW  01
08934:  BNZ   897E
....................       {
....................          Output.B13 = 0;
08936:  MOVLB  D
08938:  BCF    xAC.4
....................          // SMS Sending   
....................          if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
0893A:  BTFSC  xDC.4
0893C:  BRA    897A
0893E:  BTFSC  32.3
08940:  BRA    897A
08942:  BTFSC  xC4.4
08944:  BRA    897A
....................          {
....................             SendSMS.B13 =1;
08946:  BSF    xDC.4
....................             strcat(SMS_MassageSUM, SMS_Massage13);
08948:  MOVLW  0D
0894A:  MOVLB  E
0894C:  MOVWF  x6E
0894E:  MOVLW  03
08950:  MOVWF  x6D
08952:  MOVLW  0C
08954:  MOVWF  x70
08956:  MOVLW  03
08958:  MOVWF  x6F
0895A:  MOVLB  0
0895C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08960:  MOVLW  0D
08962:  MOVLB  E
08964:  MOVWF  x6E
08966:  MOVLW  03
08968:  MOVWF  x6D
0896A:  MOVLW  0D
0896C:  MOVWF  x70
0896E:  MOVLW  A3
08970:  MOVWF  x6F
08972:  MOVLB  0
08974:  CALL   6DF2
08978:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage13);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
0897A:  BRA    8986
0897C:  MOVLB  E
....................       else
....................       {
....................          Output.B13 = 1;
0897E:  MOVLB  D
08980:  BSF    xAC.4
....................          SendSMS.B13 =0;
08982:  BCF    xDC.4
....................          functointest_f =0;
08984:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if(AlarmIndicator.B14 == 1)    // Alarm Function
08986:  BTFSS  xC0.5
08988:  BRA    8A3C
....................    {
....................       if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 1))|| In.B14 == 1)    // alarm1 occure and "Lock type"
0898A:  MOVLW  00
0898C:  BTFSC  xA8.5
0898E:  MOVLW  01
08990:  MOVLB  E
08992:  MOVWF  x6E
08994:  MOVLW  00
08996:  MOVLB  D
08998:  BTFSC  xB0.5
0899A:  MOVLW  01
0899C:  MOVLB  E
0899E:  XORWF  x6E,W
089A0:  SUBLW  01
089A2:  BNZ   89AA
089A4:  MOVLB  D
089A6:  BTFSC  xB4.5
089A8:  BRA    89B0
089AA:  MOVLB  D
089AC:  BTFSS  xC8.5
089AE:  BRA    8A34
....................       //if(Inputt.B14 == 0)
....................       {
....................          if(Ack.B14 == 0)
089B0:  BTFSC  xC4.5
089B2:  BRA    8A32
....................          {
....................             if(In.B14 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
089B4:  BTFSC  xC8.5
089B6:  BRA    89C6
089B8:  MOVF   55,W
089BA:  SUBLW  0F
089BC:  BNZ   89C6
....................             {
....................                TimeBase1s = 100 ;            //reload again
089BE:  MOVLW  64
089C0:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
089C2:  MOVFF  56,1F
....................             }
.................... 
....................             In.B14 = 1;                                 // setbit in1
089C6:  BSF    xC8.5
....................             if(FlashingFlag == 0)
089C8:  BTFSC  1C.1
089CA:  BRA    89D0
....................             {
....................                Output.B14 = 0;           //Flash output1
089CC:  BCF    xAC.5
....................             }
089CE:  BRA    89D2
....................             else
....................             {
....................                Output.B14 = 1;
089D0:  BSF    xAC.5
....................             }
.................... 
....................             if (~AutoTestFlag)
089D2:  BTFSC  1C.4
089D4:  BRA    89F2
....................             {
....................                if(OutputBoth.B14 == 0)                  //Both output
089D6:  BTFSC  xBC.5
089D8:  BRA    89E4
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
089DA:  BSF    F89.4
089DC:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
089DE:  BSF    F89.3
089E0:  BCF    F92.3
....................                }
089E2:  BRA    89F2
....................                else
....................                {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
089E4:  BTFSS  xB8.5
089E6:  BRA    89EE
089E8:  BSF    F89.4
089EA:  BCF    F92.4
089EC:  BRA    89F2
....................                   else output_bit(Pbell,OnRelay);                          //Bell
089EE:  BSF    F89.3
089F0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
089F2:  BTFSC  xDC.5
089F4:  BRA    8A32
089F6:  BTFSC  32.3
089F8:  BRA    8A32
089FA:  BTFSC  xC4.5
089FC:  BRA    8A32
....................             {
....................                SendSMS.B14 =1;
089FE:  BSF    xDC.5
....................                strcat(SMS_MassageSUM, SMS_Massage14);
08A00:  MOVLW  0D
08A02:  MOVLB  E
08A04:  MOVWF  x6E
08A06:  MOVLW  03
08A08:  MOVWF  x6D
08A0A:  MOVLW  0C
08A0C:  MOVWF  x70
08A0E:  MOVLW  23
08A10:  MOVWF  x6F
08A12:  MOVLB  0
08A14:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
08A18:  MOVLW  0D
08A1A:  MOVLB  E
08A1C:  MOVWF  x6E
08A1E:  MOVLW  03
08A20:  MOVWF  x6D
08A22:  MOVLW  0D
08A24:  MOVWF  x70
08A26:  MOVLW  A3
08A28:  MOVWF  x6F
08A2A:  MOVLB  0
08A2C:  CALL   6DF2
08A30:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage14);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
08A32:  BRA    8A3A
....................       else if(FaultType.B14 == 1) Ack.B14 = 0;
08A34:  BTFSS  xB4.5
08A36:  BRA    8A3A
08A38:  BCF    xC4.5
....................    }
08A3A:  BRA    8AA6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B14 ^ InputType.B14) == 1)
08A3C:  MOVLW  00
08A3E:  BTFSC  xA8.5
08A40:  MOVLW  01
08A42:  MOVLB  E
08A44:  MOVWF  x6E
08A46:  MOVLW  00
08A48:  MOVLB  D
08A4A:  BTFSC  xB0.5
08A4C:  MOVLW  01
08A4E:  MOVLB  E
08A50:  XORWF  x6E,W
08A52:  SUBLW  01
08A54:  BNZ   8A9E
....................       {
....................          Output.B14 = 0;
08A56:  MOVLB  D
08A58:  BCF    xAC.5
....................          // SMS Sending   
....................          if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
08A5A:  BTFSC  xDC.5
08A5C:  BRA    8A9A
08A5E:  BTFSC  32.3
08A60:  BRA    8A9A
08A62:  BTFSC  xC4.5
08A64:  BRA    8A9A
....................          {
....................             SendSMS.B14 =1;
08A66:  BSF    xDC.5
....................             strcat(SMS_MassageSUM, SMS_Massage14);
08A68:  MOVLW  0D
08A6A:  MOVLB  E
08A6C:  MOVWF  x6E
08A6E:  MOVLW  03
08A70:  MOVWF  x6D
08A72:  MOVLW  0C
08A74:  MOVWF  x70
08A76:  MOVLW  23
08A78:  MOVWF  x6F
08A7A:  MOVLB  0
08A7C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08A80:  MOVLW  0D
08A82:  MOVLB  E
08A84:  MOVWF  x6E
08A86:  MOVLW  03
08A88:  MOVWF  x6D
08A8A:  MOVLW  0D
08A8C:  MOVWF  x70
08A8E:  MOVLW  A3
08A90:  MOVWF  x6F
08A92:  MOVLB  0
08A94:  CALL   6DF2
08A98:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage14);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
08A9A:  BRA    8AA6
08A9C:  MOVLB  E
....................       else
....................       {
....................          Output.B14 = 1;
08A9E:  MOVLB  D
08AA0:  BSF    xAC.5
....................          SendSMS.B14 =0;
08AA2:  BCF    xDC.5
....................          functointest_f =0;
08AA4:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if(AlarmIndicator.B15 == 1)    // Alarm Function
08AA6:  BTFSS  xC0.6
08AA8:  BRA    8B5C
....................    {
....................       if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 1))|| In.B15 == 1)    // alarm1 occure and "Lock type"
08AAA:  MOVLW  00
08AAC:  BTFSC  xA8.6
08AAE:  MOVLW  01
08AB0:  MOVLB  E
08AB2:  MOVWF  x6E
08AB4:  MOVLW  00
08AB6:  MOVLB  D
08AB8:  BTFSC  xB0.6
08ABA:  MOVLW  01
08ABC:  MOVLB  E
08ABE:  XORWF  x6E,W
08AC0:  SUBLW  01
08AC2:  BNZ   8ACA
08AC4:  MOVLB  D
08AC6:  BTFSC  xB4.6
08AC8:  BRA    8AD0
08ACA:  MOVLB  D
08ACC:  BTFSS  xC8.6
08ACE:  BRA    8B54
....................       //if(Inputt.B15 == 0)
....................       {
....................          if(Ack.B15 == 0)
08AD0:  BTFSC  xC4.6
08AD2:  BRA    8B52
....................          {
....................             if(In.B15 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08AD4:  BTFSC  xC8.6
08AD6:  BRA    8AE6
08AD8:  MOVF   55,W
08ADA:  SUBLW  0F
08ADC:  BNZ   8AE6
....................             {
....................                TimeBase1s = 100 ;            //reload again
08ADE:  MOVLW  64
08AE0:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
08AE2:  MOVFF  56,1F
....................             }
.................... 
....................             In.B15 = 1;                                 // setbit in1
08AE6:  BSF    xC8.6
....................             if(FlashingFlag == 0)
08AE8:  BTFSC  1C.1
08AEA:  BRA    8AF0
....................             {
....................                Output.B15 = 0;           //Flash output1
08AEC:  BCF    xAC.6
....................             }
08AEE:  BRA    8AF2
....................             else
....................             {
....................                Output.B15 = 1;
08AF0:  BSF    xAC.6
....................             }
.................... 
....................             if (~AutoTestFlag)
08AF2:  BTFSC  1C.4
08AF4:  BRA    8B12
....................             {
....................                if(OutputBoth.B15 == 0)                  //Both output
08AF6:  BTFSC  xBC.6
08AF8:  BRA    8B04
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08AFA:  BSF    F89.4
08AFC:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08AFE:  BSF    F89.3
08B00:  BCF    F92.3
....................                }
08B02:  BRA    8B12
....................                else
....................                {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08B04:  BTFSS  xB8.6
08B06:  BRA    8B0E
08B08:  BSF    F89.4
08B0A:  BCF    F92.4
08B0C:  BRA    8B12
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08B0E:  BSF    F89.3
08B10:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
08B12:  BTFSC  xDC.6
08B14:  BRA    8B52
08B16:  BTFSC  32.3
08B18:  BRA    8B52
08B1A:  BTFSC  xC4.6
08B1C:  BRA    8B52
....................             {
....................                SendSMS.B15 =1;
08B1E:  BSF    xDC.6
....................                strcat(SMS_MassageSUM, SMS_Massage15);
08B20:  MOVLW  0D
08B22:  MOVLB  E
08B24:  MOVWF  x6E
08B26:  MOVLW  03
08B28:  MOVWF  x6D
08B2A:  MOVLW  0C
08B2C:  MOVWF  x70
08B2E:  MOVLW  43
08B30:  MOVWF  x6F
08B32:  MOVLB  0
08B34:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
08B38:  MOVLW  0D
08B3A:  MOVLB  E
08B3C:  MOVWF  x6E
08B3E:  MOVLW  03
08B40:  MOVWF  x6D
08B42:  MOVLW  0D
08B44:  MOVWF  x70
08B46:  MOVLW  A3
08B48:  MOVWF  x6F
08B4A:  MOVLB  0
08B4C:  CALL   6DF2
08B50:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage15);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
08B52:  BRA    8B5A
....................       else if(FaultType.B15 == 1) Ack.B15 = 0;
08B54:  BTFSS  xB4.6
08B56:  BRA    8B5A
08B58:  BCF    xC4.6
....................    }
08B5A:  BRA    8BC6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B15 ^ InputType.B15) == 1)
08B5C:  MOVLW  00
08B5E:  BTFSC  xA8.6
08B60:  MOVLW  01
08B62:  MOVLB  E
08B64:  MOVWF  x6E
08B66:  MOVLW  00
08B68:  MOVLB  D
08B6A:  BTFSC  xB0.6
08B6C:  MOVLW  01
08B6E:  MOVLB  E
08B70:  XORWF  x6E,W
08B72:  SUBLW  01
08B74:  BNZ   8BBE
....................       {
....................          Output.B15 = 0; 
08B76:  MOVLB  D
08B78:  BCF    xAC.6
....................          if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
08B7A:  BTFSC  xDC.6
08B7C:  BRA    8BBA
08B7E:  BTFSC  32.3
08B80:  BRA    8BBA
08B82:  BTFSC  xC4.6
08B84:  BRA    8BBA
....................          {
....................             SendSMS.B15 =1;
08B86:  BSF    xDC.6
....................             strcat(SMS_MassageSUM, SMS_Massage15);
08B88:  MOVLW  0D
08B8A:  MOVLB  E
08B8C:  MOVWF  x6E
08B8E:  MOVLW  03
08B90:  MOVWF  x6D
08B92:  MOVLW  0C
08B94:  MOVWF  x70
08B96:  MOVLW  43
08B98:  MOVWF  x6F
08B9A:  MOVLB  0
08B9C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08BA0:  MOVLW  0D
08BA2:  MOVLB  E
08BA4:  MOVWF  x6E
08BA6:  MOVLW  03
08BA8:  MOVWF  x6D
08BAA:  MOVLW  0D
08BAC:  MOVWF  x70
08BAE:  MOVLW  A3
08BB0:  MOVWF  x6F
08BB2:  MOVLB  0
08BB4:  CALL   6DF2
08BB8:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage15);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
08BBA:  BRA    8BC6
08BBC:  MOVLB  E
....................       else
....................       {
....................          Output.B15 = 1;
08BBE:  MOVLB  D
08BC0:  BSF    xAC.6
....................          SendSMS.B15 =0;
08BC2:  BCF    xDC.6
....................          functointest_f =0;
08BC4:  BCF    32.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if(AlarmIndicator.B16 == 1)    // Alarm Function
08BC6:  BTFSS  xC0.7
08BC8:  BRA    8C7C
....................    {
....................       if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 1))|| In.B16 == 1)    // alarm1 occure and "Lock type"
08BCA:  MOVLW  00
08BCC:  BTFSC  xA8.7
08BCE:  MOVLW  01
08BD0:  MOVLB  E
08BD2:  MOVWF  x6E
08BD4:  MOVLW  00
08BD6:  MOVLB  D
08BD8:  BTFSC  xB0.7
08BDA:  MOVLW  01
08BDC:  MOVLB  E
08BDE:  XORWF  x6E,W
08BE0:  SUBLW  01
08BE2:  BNZ   8BEA
08BE4:  MOVLB  D
08BE6:  BTFSC  xB4.7
08BE8:  BRA    8BF0
08BEA:  MOVLB  D
08BEC:  BTFSS  xC8.7
08BEE:  BRA    8C74
....................       //if(Inputt.B16 == 0)
....................       {
....................          if(Ack.B16 == 0)
08BF0:  BTFSC  xC4.7
08BF2:  BRA    8C72
....................          {
....................             if(In.B16 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08BF4:  BTFSC  xC8.7
08BF6:  BRA    8C06
08BF8:  MOVF   55,W
08BFA:  SUBLW  0F
08BFC:  BNZ   8C06
....................             {
....................                TimeBase1s = 100 ;            //reload again
08BFE:  MOVLW  64
08C00:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
08C02:  MOVFF  56,1F
....................             }
.................... 
....................             In.B16 = 1;                                 // setbit in1
08C06:  BSF    xC8.7
....................             if(FlashingFlag == 0)
08C08:  BTFSC  1C.1
08C0A:  BRA    8C10
....................             {
....................                Output.B16 = 0;           //Flash output1
08C0C:  BCF    xAC.7
....................             }
08C0E:  BRA    8C12
....................             else
....................             {
....................                Output.B16 = 1;
08C10:  BSF    xAC.7
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
08C12:  BTFSC  1C.4
08C14:  BRA    8C32
....................             {
....................                if(OutputBoth.B16 == 0)                  //Both output
08C16:  BTFSC  xBC.7
08C18:  BRA    8C24
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08C1A:  BSF    F89.4
08C1C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08C1E:  BSF    F89.3
08C20:  BCF    F92.3
....................                }
08C22:  BRA    8C32
....................                else
....................                {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08C24:  BTFSS  xB8.7
08C26:  BRA    8C2E
08C28:  BSF    F89.4
08C2A:  BCF    F92.4
08C2C:  BRA    8C32
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08C2E:  BSF    F89.3
08C30:  BCF    F92.3
....................                }
....................             }
....................  
....................             if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
08C32:  BTFSC  xDC.7
08C34:  BRA    8C72
08C36:  BTFSC  32.3
08C38:  BRA    8C72
08C3A:  BTFSC  xC4.7
08C3C:  BRA    8C72
....................             {
....................                SendSMS.B16 =1;
08C3E:  BSF    xDC.7
....................                strcat(SMS_MassageSUM, SMS_Massage16);
08C40:  MOVLW  0D
08C42:  MOVLB  E
08C44:  MOVWF  x6E
08C46:  MOVLW  03
08C48:  MOVWF  x6D
08C4A:  MOVLW  0C
08C4C:  MOVWF  x70
08C4E:  MOVLW  63
08C50:  MOVWF  x6F
08C52:  MOVLB  0
08C54:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
08C58:  MOVLW  0D
08C5A:  MOVLB  E
08C5C:  MOVWF  x6E
08C5E:  MOVLW  03
08C60:  MOVWF  x6D
08C62:  MOVLW  0D
08C64:  MOVWF  x70
08C66:  MOVLW  A3
08C68:  MOVWF  x6F
08C6A:  MOVLB  0
08C6C:  CALL   6DF2
08C70:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage16);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
08C72:  BRA    8C7A
....................       else if(FaultType.B16 == 1) Ack.B16 = 0;
08C74:  BTFSS  xB4.7
08C76:  BRA    8C7A
08C78:  BCF    xC4.7
....................    }
08C7A:  BRA    8CE6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B16 ^ InputType.B16) == 1)
08C7C:  MOVLW  00
08C7E:  BTFSC  xA8.7
08C80:  MOVLW  01
08C82:  MOVLB  E
08C84:  MOVWF  x6E
08C86:  MOVLW  00
08C88:  MOVLB  D
08C8A:  BTFSC  xB0.7
08C8C:  MOVLW  01
08C8E:  MOVLB  E
08C90:  XORWF  x6E,W
08C92:  SUBLW  01
08C94:  BNZ   8CDE
....................       {
....................          Output.B16 = 0;  
08C96:  MOVLB  D
08C98:  BCF    xAC.7
....................          if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
08C9A:  BTFSC  xDC.7
08C9C:  BRA    8CDA
08C9E:  BTFSC  32.3
08CA0:  BRA    8CDA
08CA2:  BTFSC  xC4.7
08CA4:  BRA    8CDA
....................          {
....................             SendSMS.B16 =1;
08CA6:  BSF    xDC.7
....................             strcat(SMS_MassageSUM, SMS_Massage16);
08CA8:  MOVLW  0D
08CAA:  MOVLB  E
08CAC:  MOVWF  x6E
08CAE:  MOVLW  03
08CB0:  MOVWF  x6D
08CB2:  MOVLW  0C
08CB4:  MOVWF  x70
08CB6:  MOVLW  63
08CB8:  MOVWF  x6F
08CBA:  MOVLB  0
08CBC:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08CC0:  MOVLW  0D
08CC2:  MOVLB  E
08CC4:  MOVWF  x6E
08CC6:  MOVLW  03
08CC8:  MOVWF  x6D
08CCA:  MOVLW  0D
08CCC:  MOVWF  x70
08CCE:  MOVLW  A3
08CD0:  MOVWF  x6F
08CD2:  MOVLB  0
08CD4:  CALL   6DF2
08CD8:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage16);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
08CDA:  BRA    8CE6
08CDC:  MOVLB  E
....................       else
....................       {
....................          Output.B16 = 1;
08CDE:  MOVLB  D
08CE0:  BSF    xAC.7
....................          SendSMS.B16 =0;
08CE2:  BCF    xDC.7
....................          functointest_f =0;
08CE4:  BCF    32.3
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input17
....................    
....................    if(AlarmIndicator.B17 == 1)    // Alarm Function
08CE6:  BTFSS  xC1.0
08CE8:  BRA    8D9C
....................    {
....................       if((((Inputt.B17 ^ InputType.B17) == 1) && (FaultType.B17 == 1))|| In.B17 == 1)    // alarm1 occure and "Lock type"
08CEA:  MOVLW  00
08CEC:  BTFSC  xA9.0
08CEE:  MOVLW  01
08CF0:  MOVLB  E
08CF2:  MOVWF  x6E
08CF4:  MOVLW  00
08CF6:  MOVLB  D
08CF8:  BTFSC  xB1.0
08CFA:  MOVLW  01
08CFC:  MOVLB  E
08CFE:  XORWF  x6E,W
08D00:  SUBLW  01
08D02:  BNZ   8D0A
08D04:  MOVLB  D
08D06:  BTFSC  xB5.0
08D08:  BRA    8D10
08D0A:  MOVLB  D
08D0C:  BTFSS  xC9.0
08D0E:  BRA    8D94
....................       {
....................          if(Ack.B17 == 0)
08D10:  BTFSC  xC5.0
08D12:  BRA    8D92
....................          {
....................             if(In.B17 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08D14:  BTFSC  xC9.0
08D16:  BRA    8D26
08D18:  MOVF   55,W
08D1A:  SUBLW  0F
08D1C:  BNZ   8D26
....................             {
....................                TimeBase1s = 100 ;            //reload again
08D1E:  MOVLW  64
08D20:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
08D22:  MOVFF  56,1F
....................             }
.................... 
....................             In.B17 = 1;                                 // setbit in1
08D26:  BSF    xC9.0
....................             if(FlashingFlag == 0)
08D28:  BTFSC  1C.1
08D2A:  BRA    8D30
....................             {
....................                Output.B17 = 0;           //Flash output1
08D2C:  BCF    xAD.0
....................             }
08D2E:  BRA    8D32
....................             else
....................             {
....................                Output.B17 = 1;
08D30:  BSF    xAD.0
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
08D32:  BTFSC  1C.4
08D34:  BRA    8D52
....................             {
....................                if(OutputBoth.B17 == 0)                  //Both output
08D36:  BTFSC  xBD.0
08D38:  BRA    8D44
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08D3A:  BSF    F89.4
08D3C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08D3E:  BSF    F89.3
08D40:  BCF    F92.3
....................                }
08D42:  BRA    8D52
....................                else
....................                {
....................                   if(OutputType.B17 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08D44:  BTFSS  xB9.0
08D46:  BRA    8D4E
08D48:  BSF    F89.4
08D4A:  BCF    F92.4
08D4C:  BRA    8D52
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08D4E:  BSF    F89.3
08D50:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B17 ==0)&& (functointest_f ==0) && (Ack.B17 ==0))
08D52:  BTFSC  xDD.0
08D54:  BRA    8D92
08D56:  BTFSC  32.3
08D58:  BRA    8D92
08D5A:  BTFSC  xC5.0
08D5C:  BRA    8D92
....................             {
....................                SendSMS.B17 =1;
08D5E:  BSF    xDD.0
....................                strcat(SMS_MassageSUM, SMS_Massage17);
08D60:  MOVLW  0D
08D62:  MOVLB  E
08D64:  MOVWF  x6E
08D66:  MOVLW  03
08D68:  MOVWF  x6D
08D6A:  MOVLW  0C
08D6C:  MOVWF  x70
08D6E:  MOVLW  83
08D70:  MOVWF  x6F
08D72:  MOVLB  0
08D74:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
08D78:  MOVLW  0D
08D7A:  MOVLB  E
08D7C:  MOVWF  x6E
08D7E:  MOVLW  03
08D80:  MOVWF  x6D
08D82:  MOVLW  0D
08D84:  MOVWF  x70
08D86:  MOVLW  A3
08D88:  MOVWF  x6F
08D8A:  MOVLB  0
08D8C:  CALL   6DF2
08D90:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage17);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
08D92:  BRA    8D9A
....................       else if(FaultType.B17 == 1) Ack.B17 = 0;
08D94:  BTFSS  xB5.0
08D96:  BRA    8D9A
08D98:  BCF    xC5.0
....................    }
08D9A:  BRA    8E06
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B17 ^ InputType.B17) == 1)
08D9C:  MOVLW  00
08D9E:  BTFSC  xA9.0
08DA0:  MOVLW  01
08DA2:  MOVLB  E
08DA4:  MOVWF  x6E
08DA6:  MOVLW  00
08DA8:  MOVLB  D
08DAA:  BTFSC  xB1.0
08DAC:  MOVLW  01
08DAE:  MOVLB  E
08DB0:  XORWF  x6E,W
08DB2:  SUBLW  01
08DB4:  BNZ   8DFE
....................       {
....................          Output.B17 = 0;
08DB6:  MOVLB  D
08DB8:  BCF    xAD.0
....................          if((SendSMS.B17 ==0)&& (functointest_f ==0) && (Ack.B17 ==0))
08DBA:  BTFSC  xDD.0
08DBC:  BRA    8DFA
08DBE:  BTFSC  32.3
08DC0:  BRA    8DFA
08DC2:  BTFSC  xC5.0
08DC4:  BRA    8DFA
....................          {
....................             SendSMS.B17 =1;
08DC6:  BSF    xDD.0
....................             strcat(SMS_MassageSUM, SMS_Massage17);
08DC8:  MOVLW  0D
08DCA:  MOVLB  E
08DCC:  MOVWF  x6E
08DCE:  MOVLW  03
08DD0:  MOVWF  x6D
08DD2:  MOVLW  0C
08DD4:  MOVWF  x70
08DD6:  MOVLW  83
08DD8:  MOVWF  x6F
08DDA:  MOVLB  0
08DDC:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08DE0:  MOVLW  0D
08DE2:  MOVLB  E
08DE4:  MOVWF  x6E
08DE6:  MOVLW  03
08DE8:  MOVWF  x6D
08DEA:  MOVLW  0D
08DEC:  MOVWF  x70
08DEE:  MOVLW  A3
08DF0:  MOVWF  x6F
08DF2:  MOVLB  0
08DF4:  CALL   6DF2
08DF8:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage17);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
08DFA:  BRA    8E06
08DFC:  MOVLB  E
....................       else
....................       {
....................          Output.B17 = 1;
08DFE:  MOVLB  D
08E00:  BSF    xAD.0
....................          SendSMS.B17 =0;
08E02:  BCF    xDD.0
....................          functointest_f =0;
08E04:  BCF    32.3
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... //input18
....................    if(AlarmIndicator.B18 == 1)    // Alarm Function
08E06:  BTFSS  xC1.1
08E08:  BRA    8EBC
....................    {
....................       if((((Inputt.B18 ^ InputType.B18) == 1) && (FaultType.B18 == 1))|| In.B18 == 1)    // alarm1 occure and "Lock type"
08E0A:  MOVLW  00
08E0C:  BTFSC  xA9.1
08E0E:  MOVLW  01
08E10:  MOVLB  E
08E12:  MOVWF  x6E
08E14:  MOVLW  00
08E16:  MOVLB  D
08E18:  BTFSC  xB1.1
08E1A:  MOVLW  01
08E1C:  MOVLB  E
08E1E:  XORWF  x6E,W
08E20:  SUBLW  01
08E22:  BNZ   8E2A
08E24:  MOVLB  D
08E26:  BTFSC  xB5.1
08E28:  BRA    8E30
08E2A:  MOVLB  D
08E2C:  BTFSS  xC9.1
08E2E:  BRA    8EB4
....................       //if(Inputt.B18 == 0)
....................       {
....................          if(Ack.B18 == 0)
08E30:  BTFSC  xC5.1
08E32:  BRA    8EB2
....................          {
....................             if(In.B18 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08E34:  BTFSC  xC9.1
08E36:  BRA    8E46
08E38:  MOVF   55,W
08E3A:  SUBLW  0F
08E3C:  BNZ   8E46
....................             {
....................                TimeBase1s = 100 ;            //reload again
08E3E:  MOVLW  64
08E40:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
08E42:  MOVFF  56,1F
....................             }
.................... 
....................             In.B18 = 1;                                 // setbit in1
08E46:  BSF    xC9.1
....................             if(FlashingFlag == 0)
08E48:  BTFSC  1C.1
08E4A:  BRA    8E50
....................             {
....................                Output.B18 = 0;           //Flash output1
08E4C:  BCF    xAD.1
....................             }
08E4E:  BRA    8E52
....................             else
....................             {
....................                Output.B18 = 1;
08E50:  BSF    xAD.1
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
08E52:  BTFSC  1C.4
08E54:  BRA    8E72
....................             {
....................                if(OutputBoth.B18 == 0)                  //Both output
08E56:  BTFSC  xBD.1
08E58:  BRA    8E64
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08E5A:  BSF    F89.4
08E5C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08E5E:  BSF    F89.3
08E60:  BCF    F92.3
....................                }
08E62:  BRA    8E72
....................                else
....................                {
....................                   if(OutputType.B18 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08E64:  BTFSS  xB9.1
08E66:  BRA    8E6E
08E68:  BSF    F89.4
08E6A:  BCF    F92.4
08E6C:  BRA    8E72
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08E6E:  BSF    F89.3
08E70:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B18 ==0)&& (functointest_f ==0) && (Ack.B18 ==0))
08E72:  BTFSC  xDD.1
08E74:  BRA    8EB2
08E76:  BTFSC  32.3
08E78:  BRA    8EB2
08E7A:  BTFSC  xC5.1
08E7C:  BRA    8EB2
....................             {
....................                SendSMS.B18 =1;
08E7E:  BSF    xDD.1
....................                strcat(SMS_MassageSUM, SMS_Massage18);
08E80:  MOVLW  0D
08E82:  MOVLB  E
08E84:  MOVWF  x6E
08E86:  MOVLW  03
08E88:  MOVWF  x6D
08E8A:  MOVLW  0C
08E8C:  MOVWF  x70
08E8E:  MOVLW  A3
08E90:  MOVWF  x6F
08E92:  MOVLB  0
08E94:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
08E98:  MOVLW  0D
08E9A:  MOVLB  E
08E9C:  MOVWF  x6E
08E9E:  MOVLW  03
08EA0:  MOVWF  x6D
08EA2:  MOVLW  0D
08EA4:  MOVWF  x70
08EA6:  MOVLW  A3
08EA8:  MOVWF  x6F
08EAA:  MOVLB  0
08EAC:  CALL   6DF2
08EB0:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage18);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
08EB2:  BRA    8EBA
....................       else if(FaultType.B18 == 1) Ack.B18 = 0;
08EB4:  BTFSS  xB5.1
08EB6:  BRA    8EBA
08EB8:  BCF    xC5.1
....................    }
08EBA:  BRA    8F26
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B18 ^ InputType.B18) == 1)
08EBC:  MOVLW  00
08EBE:  BTFSC  xA9.1
08EC0:  MOVLW  01
08EC2:  MOVLB  E
08EC4:  MOVWF  x6E
08EC6:  MOVLW  00
08EC8:  MOVLB  D
08ECA:  BTFSC  xB1.1
08ECC:  MOVLW  01
08ECE:  MOVLB  E
08ED0:  XORWF  x6E,W
08ED2:  SUBLW  01
08ED4:  BNZ   8F1E
....................       {
....................          Output.B18 = 0;
08ED6:  MOVLB  D
08ED8:  BCF    xAD.1
....................          // SMS Sending   
....................          if((SendSMS.B18 ==0)&& (functointest_f ==0) && (Ack.B18 ==0))
08EDA:  BTFSC  xDD.1
08EDC:  BRA    8F1A
08EDE:  BTFSC  32.3
08EE0:  BRA    8F1A
08EE2:  BTFSC  xC5.1
08EE4:  BRA    8F1A
....................          {
....................             SendSMS.B18 =1;
08EE6:  BSF    xDD.1
....................             strcat(SMS_MassageSUM, SMS_Massage18);
08EE8:  MOVLW  0D
08EEA:  MOVLB  E
08EEC:  MOVWF  x6E
08EEE:  MOVLW  03
08EF0:  MOVWF  x6D
08EF2:  MOVLW  0C
08EF4:  MOVWF  x70
08EF6:  MOVLW  A3
08EF8:  MOVWF  x6F
08EFA:  MOVLB  0
08EFC:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
08F00:  MOVLW  0D
08F02:  MOVLB  E
08F04:  MOVWF  x6E
08F06:  MOVLW  03
08F08:  MOVWF  x6D
08F0A:  MOVLW  0D
08F0C:  MOVWF  x70
08F0E:  MOVLW  A3
08F10:  MOVWF  x6F
08F12:  MOVLB  0
08F14:  CALL   6DF2
08F18:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage18);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
08F1A:  BRA    8F26
08F1C:  MOVLB  E
....................       else
....................       {
....................          Output.B18 = 1;
08F1E:  MOVLB  D
08F20:  BSF    xAD.1
....................          SendSMS.B18 =0;
08F22:  BCF    xDD.1
....................          functointest_f =0;
08F24:  BCF    32.3
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input19
....................    if(AlarmIndicator.B19 == 1)    // Alarm Function
08F26:  BTFSS  xC1.2
08F28:  BRA    8FDC
....................    {
....................       if((((Inputt.B19 ^ InputType.B19) == 1) && (FaultType.B19 == 1))|| In.B19 == 1)    // alarm1 occure and "Lock type"
08F2A:  MOVLW  00
08F2C:  BTFSC  xA9.2
08F2E:  MOVLW  01
08F30:  MOVLB  E
08F32:  MOVWF  x6E
08F34:  MOVLW  00
08F36:  MOVLB  D
08F38:  BTFSC  xB1.2
08F3A:  MOVLW  01
08F3C:  MOVLB  E
08F3E:  XORWF  x6E,W
08F40:  SUBLW  01
08F42:  BNZ   8F4A
08F44:  MOVLB  D
08F46:  BTFSC  xB5.2
08F48:  BRA    8F50
08F4A:  MOVLB  D
08F4C:  BTFSS  xC9.2
08F4E:  BRA    8FD4
....................       //if(Inputt.B19 == 0)
....................       {
....................          if(Ack.B19 == 0)
08F50:  BTFSC  xC5.2
08F52:  BRA    8FD2
....................          {
....................             if(In.B19 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08F54:  BTFSC  xC9.2
08F56:  BRA    8F66
08F58:  MOVF   55,W
08F5A:  SUBLW  0F
08F5C:  BNZ   8F66
....................             {
....................                TimeBase1s = 100 ;            //reload again
08F5E:  MOVLW  64
08F60:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
08F62:  MOVFF  56,1F
....................             }
.................... 
....................             In.B19 = 1;                                 // setbit in1
08F66:  BSF    xC9.2
....................             if(FlashingFlag == 0)
08F68:  BTFSC  1C.1
08F6A:  BRA    8F70
....................             {
....................                Output.B19 = 0;           //Flash output1
08F6C:  BCF    xAD.2
....................             }
08F6E:  BRA    8F72
....................             else
....................             {
....................                Output.B19 = 1;
08F70:  BSF    xAD.2
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
08F72:  BTFSC  1C.4
08F74:  BRA    8F92
....................             {
....................                if(OutputBoth.B19 == 0)                  //Both output
08F76:  BTFSC  xBD.2
08F78:  BRA    8F84
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08F7A:  BSF    F89.4
08F7C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08F7E:  BSF    F89.3
08F80:  BCF    F92.3
....................                }
08F82:  BRA    8F92
....................                else
....................                {
....................                   if(OutputType.B19 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08F84:  BTFSS  xB9.2
08F86:  BRA    8F8E
08F88:  BSF    F89.4
08F8A:  BCF    F92.4
08F8C:  BRA    8F92
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08F8E:  BSF    F89.3
08F90:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B19 ==0)&& (functointest_f ==0) && (Ack.B19 ==0))
08F92:  BTFSC  xDD.2
08F94:  BRA    8FD2
08F96:  BTFSC  32.3
08F98:  BRA    8FD2
08F9A:  BTFSC  xC5.2
08F9C:  BRA    8FD2
....................             {
....................                SendSMS.B19 =1;
08F9E:  BSF    xDD.2
....................                strcat(SMS_MassageSUM, SMS_Massage19);
08FA0:  MOVLW  0D
08FA2:  MOVLB  E
08FA4:  MOVWF  x6E
08FA6:  MOVLW  03
08FA8:  MOVWF  x6D
08FAA:  MOVLW  0C
08FAC:  MOVWF  x70
08FAE:  MOVLW  C3
08FB0:  MOVWF  x6F
08FB2:  MOVLB  0
08FB4:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
08FB8:  MOVLW  0D
08FBA:  MOVLB  E
08FBC:  MOVWF  x6E
08FBE:  MOVLW  03
08FC0:  MOVWF  x6D
08FC2:  MOVLW  0D
08FC4:  MOVWF  x70
08FC6:  MOVLW  A3
08FC8:  MOVWF  x6F
08FCA:  MOVLB  0
08FCC:  CALL   6DF2
08FD0:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage19);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
08FD2:  BRA    8FDA
....................       else if(FaultType.B19 == 1) Ack.B19 = 0;
08FD4:  BTFSS  xB5.2
08FD6:  BRA    8FDA
08FD8:  BCF    xC5.2
....................    }
08FDA:  BRA    9046
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B19 ^ InputType.B19) == 1)
08FDC:  MOVLW  00
08FDE:  BTFSC  xA9.2
08FE0:  MOVLW  01
08FE2:  MOVLB  E
08FE4:  MOVWF  x6E
08FE6:  MOVLW  00
08FE8:  MOVLB  D
08FEA:  BTFSC  xB1.2
08FEC:  MOVLW  01
08FEE:  MOVLB  E
08FF0:  XORWF  x6E,W
08FF2:  SUBLW  01
08FF4:  BNZ   903E
....................       {
....................          Output.B19 = 0;
08FF6:  MOVLB  D
08FF8:  BCF    xAD.2
....................          // SMS Sending   
....................          if((SendSMS.B19 ==0)&& (functointest_f ==0) && (Ack.B19 ==0))
08FFA:  BTFSC  xDD.2
08FFC:  BRA    903A
08FFE:  BTFSC  32.3
09000:  BRA    903A
09002:  BTFSC  xC5.2
09004:  BRA    903A
....................          {
....................             SendSMS.B19 =1;
09006:  BSF    xDD.2
....................             strcat(SMS_MassageSUM, SMS_Massage19);
09008:  MOVLW  0D
0900A:  MOVLB  E
0900C:  MOVWF  x6E
0900E:  MOVLW  03
09010:  MOVWF  x6D
09012:  MOVLW  0C
09014:  MOVWF  x70
09016:  MOVLW  C3
09018:  MOVWF  x6F
0901A:  MOVLB  0
0901C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
09020:  MOVLW  0D
09022:  MOVLB  E
09024:  MOVWF  x6E
09026:  MOVLW  03
09028:  MOVWF  x6D
0902A:  MOVLW  0D
0902C:  MOVWF  x70
0902E:  MOVLW  A3
09030:  MOVWF  x6F
09032:  MOVLB  0
09034:  CALL   6DF2
09038:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage19);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
0903A:  BRA    9046
0903C:  MOVLB  E
....................       else
....................       {
....................          Output.B19 = 1;
0903E:  MOVLB  D
09040:  BSF    xAD.2
....................          SendSMS.B19 =0;
09042:  BCF    xDD.2
....................          functointest_f =0;
09044:  BCF    32.3
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input20
....................    if(AlarmIndicator.B20 == 1)    // Alarm Function
09046:  BTFSS  xC1.3
09048:  BRA    90FC
....................    {
....................       if((((Inputt.B20 ^ InputType.B20) == 1) && (FaultType.B20 == 1))|| In.B20 == 1)    // alarm1 occure and "Lock type"
0904A:  MOVLW  00
0904C:  BTFSC  xA9.3
0904E:  MOVLW  01
09050:  MOVLB  E
09052:  MOVWF  x6E
09054:  MOVLW  00
09056:  MOVLB  D
09058:  BTFSC  xB1.3
0905A:  MOVLW  01
0905C:  MOVLB  E
0905E:  XORWF  x6E,W
09060:  SUBLW  01
09062:  BNZ   906A
09064:  MOVLB  D
09066:  BTFSC  xB5.3
09068:  BRA    9070
0906A:  MOVLB  D
0906C:  BTFSS  xC9.3
0906E:  BRA    90F4
....................       //if(Inputt.B18 == 0)
....................       {
....................          if(Ack.B20 == 0)
09070:  BTFSC  xC5.3
09072:  BRA    90F2
....................          {
....................             if(In.B20 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
09074:  BTFSC  xC9.3
09076:  BRA    9086
09078:  MOVF   55,W
0907A:  SUBLW  0F
0907C:  BNZ   9086
....................             {
....................                TimeBase1s = 100 ;            //reload again
0907E:  MOVLW  64
09080:  MOVWF  1E
....................                AutoAckDelayTime = AutoAckTime ;
09082:  MOVFF  56,1F
....................             }
.................... 
....................             In.B20 = 1;                                 // setbit in1
09086:  BSF    xC9.3
....................             if(FlashingFlag == 0)
09088:  BTFSC  1C.1
0908A:  BRA    9090
....................             {
....................                Output.B20 = 0;           //Flash output1
0908C:  BCF    xAD.3
....................             }
0908E:  BRA    9092
....................             else
....................             {
....................                Output.B20 = 1;
09090:  BSF    xAD.3
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
09092:  BTFSC  1C.4
09094:  BRA    90B2
....................             {
....................                if(OutputBoth.B20 == 0)                  //Both output
09096:  BTFSC  xBD.3
09098:  BRA    90A4
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0909A:  BSF    F89.4
0909C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0909E:  BSF    F89.3
090A0:  BCF    F92.3
....................                }
090A2:  BRA    90B2
....................                else
....................                {
....................                   if(OutputType.B20 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
090A4:  BTFSS  xB9.3
090A6:  BRA    90AE
090A8:  BSF    F89.4
090AA:  BCF    F92.4
090AC:  BRA    90B2
....................                   else output_bit(Pbell,OnRelay);                          //Bell
090AE:  BSF    F89.3
090B0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B20 ==0)&& (functointest_f ==0) && (Ack.B20 ==0))
090B2:  BTFSC  xDD.3
090B4:  BRA    90F2
090B6:  BTFSC  32.3
090B8:  BRA    90F2
090BA:  BTFSC  xC5.3
090BC:  BRA    90F2
....................             {
....................                SendSMS.B20 =1;
090BE:  BSF    xDD.3
....................                strcat(SMS_MassageSUM, SMS_Massage20);
090C0:  MOVLW  0D
090C2:  MOVLB  E
090C4:  MOVWF  x6E
090C6:  MOVLW  03
090C8:  MOVWF  x6D
090CA:  MOVLW  0C
090CC:  MOVWF  x70
090CE:  MOVLW  E3
090D0:  MOVWF  x6F
090D2:  MOVLB  0
090D4:  CALL   6DF2
....................                strcat(SMS_MassageSUM, spacestring);
090D8:  MOVLW  0D
090DA:  MOVLB  E
090DC:  MOVWF  x6E
090DE:  MOVLW  03
090E0:  MOVWF  x6D
090E2:  MOVLW  0D
090E4:  MOVWF  x70
090E6:  MOVLW  A3
090E8:  MOVWF  x6F
090EA:  MOVLB  0
090EC:  CALL   6DF2
090F0:  MOVLB  D
....................             /*
....................                fprintf(CH2,"AT+CMGF=1"); 
....................                putc('\n',CH2);
....................                delay_ms(10);
....................                
....................                fprintf(CH2,"AT+CMGS=\"");
....................                fprintf(CH2,sms_phonenumber);
....................                
....................                fprintf(CH2,"\"");
....................                putc('\n',CH2);
....................                delay_ms(50);
....................               
....................               printf(SMS_Massage20);  
....................               putc('\n',CH2);
....................               putc(26,CH2);
....................               */
....................             }
....................           }
.................... 
....................       }
090F2:  BRA    90FA
....................       else if(FaultType.B20 == 1) Ack.B20 = 0;
090F4:  BTFSS  xB5.3
090F6:  BRA    90FA
090F8:  BCF    xC5.3
....................    }
090FA:  BRA    9166
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B20 ^ InputType.B20) == 1)
090FC:  MOVLW  00
090FE:  BTFSC  xA9.3
09100:  MOVLW  01
09102:  MOVLB  E
09104:  MOVWF  x6E
09106:  MOVLW  00
09108:  MOVLB  D
0910A:  BTFSC  xB1.3
0910C:  MOVLW  01
0910E:  MOVLB  E
09110:  XORWF  x6E,W
09112:  SUBLW  01
09114:  BNZ   915E
....................       {
....................          Output.B20 = 0;
09116:  MOVLB  D
09118:  BCF    xAD.3
....................          // SMS Sending   
....................          if((SendSMS.B20 ==0)&& (functointest_f ==0) && (Ack.B20 ==0))
0911A:  BTFSC  xDD.3
0911C:  BRA    915A
0911E:  BTFSC  32.3
09120:  BRA    915A
09122:  BTFSC  xC5.3
09124:  BRA    915A
....................          {
....................             SendSMS.B20 =1;
09126:  BSF    xDD.3
....................             strcat(SMS_MassageSUM, SMS_Massage20);
09128:  MOVLW  0D
0912A:  MOVLB  E
0912C:  MOVWF  x6E
0912E:  MOVLW  03
09130:  MOVWF  x6D
09132:  MOVLW  0C
09134:  MOVWF  x70
09136:  MOVLW  E3
09138:  MOVWF  x6F
0913A:  MOVLB  0
0913C:  CALL   6DF2
....................             strcat(SMS_MassageSUM, spacestring);
09140:  MOVLW  0D
09142:  MOVLB  E
09144:  MOVWF  x6E
09146:  MOVLW  03
09148:  MOVWF  x6D
0914A:  MOVLW  0D
0914C:  MOVWF  x70
0914E:  MOVLW  A3
09150:  MOVWF  x6F
09152:  MOVLB  0
09154:  CALL   6DF2
09158:  MOVLB  D
....................             /*
....................             fprintf(CH2,"AT+CMGF=1"); 
....................             putc('\n',CH2);
....................             delay_ms(10);
....................             
....................             fprintf(CH2,"AT+CMGS=\"");
....................             fprintf(CH2,sms_phonenumber);
....................             
....................             fprintf(CH2,"\"");
....................             putc('\n',CH2);
....................             delay_ms(50);
....................            
....................            printf(SMS_Massage20);  
....................            putc('\n',CH2);
....................            putc(26,CH2);
....................               */
....................          }
....................       }
0915A:  BRA    9166
0915C:  MOVLB  E
....................       else
....................       {
....................          Output.B20 = 1;
0915E:  MOVLB  D
09160:  BSF    xAD.3
....................          SendSMS.B20 =0;
09162:  BCF    xDD.3
....................          functointest_f =0;
09164:  BCF    32.3
....................       }
....................    }
....................     
.................... //}
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
09166:  MOVLW  00
09168:  BTFSC  xA7.0
0916A:  MOVLW  01
0916C:  MOVLB  E
0916E:  MOVWF  x6E
09170:  MOVLW  00
09172:  MOVLB  D
09174:  BTFSC  xAF.0
09176:  MOVLW  01
09178:  MOVLB  E
0917A:  XORWF  x6E,W
0917C:  SUBLW  01
0917E:  BNZ   9188
09180:  MOVLB  D
09182:  BTFSS  xB3.0
09184:  BRA    918E
09186:  MOVLB  E
09188:  BTFSS  1C.5
0918A:  BRA    9222
0918C:  MOVLB  D
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
0918E:  BTFSC  xCB.0
09190:  BRA    91A4
09192:  MOVF   55,W
09194:  SUBLW  0F
09196:  BNZ   91A4
09198:  BTFSC  xC3.0
0919A:  BRA    91A4
....................       {
....................             TimeBase1s = 100 ;            //reload again
0919C:  MOVLW  64
0919E:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
091A0:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B1 = 1;
091A4:  BSF    xCB.0
....................       if(Ack.B1 == 0)
091A6:  BTFSC  xC3.0
091A8:  BRA    91D8
....................       {
....................          if(FlashingFlag == 0)
091AA:  BTFSC  1C.1
091AC:  BRA    91B2
....................             {
....................                Output.B1 = 0;           //Flash output1
091AE:  BCF    xAB.0
....................             }
091B0:  BRA    91B4
....................             else
....................             {
....................                Output.B1 = 1;
091B2:  BSF    xAB.0
....................             }
....................          if (~AutoTestFlag)
091B4:  BTFSC  1C.4
091B6:  BRA    91D8
....................          {
....................             if(AlarmIndicator.B1 == 1){
091B8:  BTFSS  xBF.0
091BA:  BRA    91D8
....................                 if(OutputBoth.B1 == 0)        //Both output
091BC:  BTFSC  xBB.0
091BE:  BRA    91CA
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
091C0:  BSF    F89.4
091C2:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
091C4:  BSF    F89.3
091C6:  BCF    F92.3
....................                 }
091C8:  BRA    91D8
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
091CA:  BTFSS  xB7.0
091CC:  BRA    91D4
091CE:  BSF    F89.4
091D0:  BCF    F92.4
091D2:  BRA    91D8
....................                   else output_bit(Pbell,OnRelay);                          //Bell
091D4:  BSF    F89.3
091D6:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................        inputflag =1;
091D8:  MOVLW  01
091DA:  MOVLB  E
091DC:  MOVWF  x68
....................        // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
091DE:  MOVLB  D
091E0:  BTFSC  xDB.0
091E2:  BRA    9220
091E4:  BTFSC  32.3
091E6:  BRA    9220
091E8:  BTFSC  xC3.0
091EA:  BRA    9220
....................       {
....................          SendSMS.B1 =1;
091EC:  BSF    xDB.0
....................          strcat(SMS_MassageSUM, SMS_Massage1);
091EE:  MOVLW  0D
091F0:  MOVLB  E
091F2:  MOVWF  x6E
091F4:  MOVLW  03
091F6:  MOVWF  x6D
091F8:  MOVLW  0A
091FA:  MOVWF  x70
091FC:  MOVLW  83
091FE:  MOVWF  x6F
09200:  MOVLB  0
09202:  CALL   6DF2
....................          strcat(SMS_MassageSUM, spacestring);
09206:  MOVLW  0D
09208:  MOVLB  E
0920A:  MOVWF  x6E
0920C:  MOVLW  03
0920E:  MOVWF  x6D
09210:  MOVLW  0D
09212:  MOVWF  x70
09214:  MOVLW  A3
09216:  MOVWF  x6F
09218:  MOVLB  0
0921A:  CALL   6DF2
0921E:  MOVLB  D
....................           /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage1);   
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
09220:  BRA    92E0
....................    
....................    else if(FaultType.B1 == 0)
09222:  MOVLB  D
09224:  BTFSC  xB3.0
09226:  BRA    92E0
....................    {
....................       In2.B1 = 0x00;
09228:  BCF    xCB.0
....................       Ack.B1 = 0;
0922A:  BCF    xC3.0
....................       Output.B1 = 1;      //Off LED
0922C:  BSF    xAB.0
....................       SendSMS.B1 =0;// Clear SMS
0922E:  BCF    xDB.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0) && inputflag ==0)     //If Buzzer or Both
09230:  BTFSC  xB7.0
09232:  BRA    9238
09234:  BTFSC  xBB.0
09236:  BRA    925A
09238:  MOVLB  E
0923A:  MOVF   x68,F
0923C:  BTFSC  FD8.2
0923E:  BRA    9244
09240:  MOVLB  D
09242:  BRA    925A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09244:  MOVLW  01
09246:  MOVWF  x6D
09248:  MOVLB  0
0924A:  CALL   6E5C
0924E:  DECFSZ 01,W
09250:  BRA    9254
09252:  BRA    9258
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09254:  BCF    F89.4
09256:  BCF    F92.4
09258:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0) && inputflag ==0)  //If Bell or Both
0925A:  BTFSS  xB7.0
0925C:  BRA    9262
0925E:  BTFSC  xBB.0
09260:  BRA    9288
09262:  MOVLB  E
09264:  MOVF   x68,F
09266:  BTFSC  FD8.2
09268:  BRA    926E
0926A:  MOVLB  D
0926C:  BRA    9288
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0926E:  MOVLW  02
09270:  MOVWF  x6D
09272:  MOVLB  0
09274:  CALL   6E5C
09278:  DECFSZ 01,W
0927A:  BRA    927E
0927C:  BRA    9286
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0927E:  BCF    F89.3
09280:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09282:  BCF    F89.4
09284:  BCF    F92.4
09286:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09288:  BTFSC  xCB.0
0928A:  BRA    92E0
0928C:  BTFSC  xCB.1
0928E:  BRA    92E0
09290:  BTFSC  xCB.2
09292:  BRA    92E0
09294:  BTFSC  xCB.3
09296:  BRA    92E0
09298:  BTFSC  xCB.4
0929A:  BRA    92E0
0929C:  BTFSC  xCB.5
0929E:  BRA    92E0
092A0:  BTFSC  xCB.6
092A2:  BRA    92E0
092A4:  BTFSC  xCB.7
092A6:  BRA    92E0
092A8:  BTFSC  xCC.0
092AA:  BRA    92E0
092AC:  BTFSC  xCC.1
092AE:  BRA    92E0
092B0:  BTFSC  xCC.2
092B2:  BRA    92E0
092B4:  BTFSC  xCC.3
092B6:  BRA    92E0
092B8:  BTFSC  xCC.4
092BA:  BRA    92E0
092BC:  BTFSC  xCC.5
092BE:  BRA    92E0
092C0:  BTFSC  xCC.6
092C2:  BRA    92E0
092C4:  BTFSC  xCC.7
092C6:  BRA    92E0
092C8:  BTFSC  xCD.0
092CA:  BRA    92E0
092CC:  BTFSC  xCD.1
092CE:  BRA    92E0
092D0:  BTFSC  xCD.2
092D2:  BRA    92E0
092D4:  BTFSC  xCD.3
092D6:  BRA    92E0
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
092D8:  BCF    F89.3
092DA:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
092DC:  BCF    F89.4
092DE:  BCF    F92.4
....................       }
....................    }
....................    
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
092E0:  MOVLW  00
092E2:  BTFSC  xA7.1
092E4:  MOVLW  01
092E6:  MOVLB  E
092E8:  MOVWF  x6E
092EA:  MOVLW  00
092EC:  MOVLB  D
092EE:  BTFSC  xAF.1
092F0:  MOVLW  01
092F2:  MOVLB  E
092F4:  XORWF  x6E,W
092F6:  SUBLW  01
092F8:  BNZ   9302
092FA:  MOVLB  D
092FC:  BTFSS  xB3.1
092FE:  BRA    9308
09300:  MOVLB  E
09302:  BTFSS  1C.5
09304:  BRA    939C
09306:  MOVLB  D
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
09308:  BTFSC  xCB.1
0930A:  BRA    931E
0930C:  MOVF   55,W
0930E:  SUBLW  0F
09310:  BNZ   931E
09312:  BTFSC  xC3.1
09314:  BRA    931E
....................       {
....................             TimeBase1s = 100 ;            //reload again
09316:  MOVLW  64
09318:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0931A:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B2 = 1;
0931E:  BSF    xCB.1
....................       if(Ack.B2 == 0)
09320:  BTFSC  xC3.1
09322:  BRA    9352
....................       {
....................          if(FlashingFlag == 0)
09324:  BTFSC  1C.1
09326:  BRA    932C
....................             {
....................                Output.B2 = 0;           //Flash output1
09328:  BCF    xAB.1
....................             }
0932A:  BRA    932E
....................             else
....................             {
....................                Output.B2 = 1;
0932C:  BSF    xAB.1
....................             }
....................          if (~AutoTestFlag)
0932E:  BTFSC  1C.4
09330:  BRA    9352
....................          {
....................             if(AlarmIndicator.B2 == 1){
09332:  BTFSS  xBF.1
09334:  BRA    9352
....................                 if(OutputBoth.B2 == 0)        //Both output
09336:  BTFSC  xBB.1
09338:  BRA    9344
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0933A:  BSF    F89.4
0933C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0933E:  BSF    F89.3
09340:  BCF    F92.3
....................                 }
09342:  BRA    9352
....................                 else
....................                 {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09344:  BTFSS  xB7.1
09346:  BRA    934E
09348:  BSF    F89.4
0934A:  BCF    F92.4
0934C:  BRA    9352
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0934E:  BSF    F89.3
09350:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09352:  MOVLW  01
09354:  MOVLB  E
09356:  MOVWF  x68
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
09358:  MOVLB  D
0935A:  BTFSC  xDB.1
0935C:  BRA    939A
0935E:  BTFSC  32.3
09360:  BRA    939A
09362:  BTFSC  xC3.1
09364:  BRA    939A
....................       {
....................          SendSMS.B2 =1;
09366:  BSF    xDB.1
....................          strcat(SMS_MassageSUM, SMS_Massage2);
09368:  MOVLW  0D
0936A:  MOVLB  E
0936C:  MOVWF  x6E
0936E:  MOVLW  03
09370:  MOVWF  x6D
09372:  MOVLW  0A
09374:  MOVWF  x70
09376:  MOVLW  A3
09378:  MOVWF  x6F
0937A:  MOVLB  0
0937C:  CALL   6DF2
....................          strcat(SMS_MassageSUM, spacestring);
09380:  MOVLW  0D
09382:  MOVLB  E
09384:  MOVWF  x6E
09386:  MOVLW  03
09388:  MOVWF  x6D
0938A:  MOVLW  0D
0938C:  MOVWF  x70
0938E:  MOVLW  A3
09390:  MOVWF  x6F
09392:  MOVLB  0
09394:  CALL   6DF2
09398:  MOVLB  D
....................           /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage2); 
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
0939A:  BRA    945A
....................    else if(FaultType.B2 == 0)
0939C:  MOVLB  D
0939E:  BTFSC  xB3.1
093A0:  BRA    945A
....................    {
....................       In2.B2 = 0x00;
093A2:  BCF    xCB.1
....................       Ack.B2 = 0;
093A4:  BCF    xC3.1
....................       Output.B2 = 1;      //Off LED
093A6:  BSF    xAB.1
....................       SendSMS.B2 =0;// Clear SMS
093A8:  BCF    xDB.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0) && inputflag ==0)     //If Buzzer or Both
093AA:  BTFSC  xB7.1
093AC:  BRA    93B2
093AE:  BTFSC  xBB.1
093B0:  BRA    93D4
093B2:  MOVLB  E
093B4:  MOVF   x68,F
093B6:  BTFSC  FD8.2
093B8:  BRA    93BE
093BA:  MOVLB  D
093BC:  BRA    93D4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
093BE:  MOVLW  01
093C0:  MOVWF  x6D
093C2:  MOVLB  0
093C4:  CALL   6E5C
093C8:  DECFSZ 01,W
093CA:  BRA    93CE
093CC:  BRA    93D2
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
093CE:  BCF    F89.4
093D0:  BCF    F92.4
093D2:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0) && inputflag ==0) //If Bell or Both
093D4:  BTFSS  xB7.1
093D6:  BRA    93DC
093D8:  BTFSC  xBB.1
093DA:  BRA    9402
093DC:  MOVLB  E
093DE:  MOVF   x68,F
093E0:  BTFSC  FD8.2
093E2:  BRA    93E8
093E4:  MOVLB  D
093E6:  BRA    9402
....................       {
....................          if(CheckAutoReset(0x02) == 1);
093E8:  MOVLW  02
093EA:  MOVWF  x6D
093EC:  MOVLB  0
093EE:  CALL   6E5C
093F2:  DECFSZ 01,W
093F4:  BRA    93F8
093F6:  BRA    9400
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
093F8:  BCF    F89.3
093FA:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
093FC:  BCF    F89.4
093FE:  BCF    F92.4
09400:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09402:  BTFSC  xCB.0
09404:  BRA    945A
09406:  BTFSC  xCB.1
09408:  BRA    945A
0940A:  BTFSC  xCB.2
0940C:  BRA    945A
0940E:  BTFSC  xCB.3
09410:  BRA    945A
09412:  BTFSC  xCB.4
09414:  BRA    945A
09416:  BTFSC  xCB.5
09418:  BRA    945A
0941A:  BTFSC  xCB.6
0941C:  BRA    945A
0941E:  BTFSC  xCB.7
09420:  BRA    945A
09422:  BTFSC  xCC.0
09424:  BRA    945A
09426:  BTFSC  xCC.1
09428:  BRA    945A
0942A:  BTFSC  xCC.2
0942C:  BRA    945A
0942E:  BTFSC  xCC.3
09430:  BRA    945A
09432:  BTFSC  xCC.4
09434:  BRA    945A
09436:  BTFSC  xCC.5
09438:  BRA    945A
0943A:  BTFSC  xCC.6
0943C:  BRA    945A
0943E:  BTFSC  xCC.7
09440:  BRA    945A
09442:  BTFSC  xCD.0
09444:  BRA    945A
09446:  BTFSC  xCD.1
09448:  BRA    945A
0944A:  BTFSC  xCD.2
0944C:  BRA    945A
0944E:  BTFSC  xCD.3
09450:  BRA    945A
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09452:  BCF    F89.3
09454:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09456:  BCF    F89.4
09458:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0945A:  MOVLW  00
0945C:  BTFSC  xA7.2
0945E:  MOVLW  01
09460:  MOVLB  E
09462:  MOVWF  x6E
09464:  MOVLW  00
09466:  MOVLB  D
09468:  BTFSC  xAF.2
0946A:  MOVLW  01
0946C:  MOVLB  E
0946E:  XORWF  x6E,W
09470:  SUBLW  01
09472:  BNZ   947C
09474:  MOVLB  D
09476:  BTFSS  xB3.2
09478:  BRA    9482
0947A:  MOVLB  E
0947C:  BTFSS  1C.5
0947E:  BRA    9516
09480:  MOVLB  D
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
09482:  BTFSC  xCB.2
09484:  BRA    9498
09486:  MOVF   55,W
09488:  SUBLW  0F
0948A:  BNZ   9498
0948C:  BTFSC  xC3.2
0948E:  BRA    9498
....................       {
....................             TimeBase1s = 100 ;            //reload again
09490:  MOVLW  64
09492:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
09494:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B3 = 1;
09498:  BSF    xCB.2
....................       if(Ack.B3 == 0)
0949A:  BTFSC  xC3.2
0949C:  BRA    94CC
....................       {
....................          if(FlashingFlag == 0)
0949E:  BTFSC  1C.1
094A0:  BRA    94A6
....................             {
....................                Output.B3 = 0;           //Flash output1
094A2:  BCF    xAB.2
....................             }
094A4:  BRA    94A8
....................             else
....................             {
....................                Output.B3 = 1;
094A6:  BSF    xAB.2
....................             }
....................          if (~AutoTestFlag)
094A8:  BTFSC  1C.4
094AA:  BRA    94CC
....................          {
....................             if(AlarmIndicator.B3 == 1){
094AC:  BTFSS  xBF.2
094AE:  BRA    94CC
....................                 if(OutputBoth.B3 == 0)        //Both output
094B0:  BTFSC  xBB.2
094B2:  BRA    94BE
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
094B4:  BSF    F89.4
094B6:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
094B8:  BSF    F89.3
094BA:  BCF    F92.3
....................                 }
094BC:  BRA    94CC
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
094BE:  BTFSS  xB7.2
094C0:  BRA    94C8
094C2:  BSF    F89.4
094C4:  BCF    F92.4
094C6:  BRA    94CC
....................                   else output_bit(Pbell,OnRelay);                          //Bell
094C8:  BSF    F89.3
094CA:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
094CC:  MOVLW  01
094CE:  MOVLB  E
094D0:  MOVWF  x68
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
094D2:  MOVLB  D
094D4:  BTFSC  xDB.2
094D6:  BRA    9514
094D8:  BTFSC  32.3
094DA:  BRA    9514
094DC:  BTFSC  xC3.2
094DE:  BRA    9514
....................       {
....................          SendSMS.B3 =1;
094E0:  BSF    xDB.2
....................          strcat(SMS_MassageSUM, SMS_Massage3);
094E2:  MOVLW  0D
094E4:  MOVLB  E
094E6:  MOVWF  x6E
094E8:  MOVLW  03
094EA:  MOVWF  x6D
094EC:  MOVLW  0A
094EE:  MOVWF  x70
094F0:  MOVLW  C3
094F2:  MOVWF  x6F
094F4:  MOVLB  0
094F6:  CALL   6DF2
....................          strcat(SMS_MassageSUM, spacestring);
094FA:  MOVLW  0D
094FC:  MOVLB  E
094FE:  MOVWF  x6E
09500:  MOVLW  03
09502:  MOVWF  x6D
09504:  MOVLW  0D
09506:  MOVWF  x70
09508:  MOVLW  A3
0950A:  MOVWF  x6F
0950C:  MOVLB  0
0950E:  CALL   6DF2
09512:  MOVLB  D
....................           /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage3); 
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
09514:  BRA    95D4
....................    else if(FaultType.B3 == 0)
09516:  MOVLB  D
09518:  BTFSC  xB3.2
0951A:  BRA    95D4
....................    {
....................       In2.B3 = 0x00;
0951C:  BCF    xCB.2
....................       Ack.B3 = 0;
0951E:  BCF    xC3.2
....................       Output.B3 = 1;      //Off LED
09520:  BSF    xAB.2
....................       SendSMS.B3 =0;// Clear SMS
09522:  BCF    xDB.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0) && inputflag ==0)     //If Buzzer or Both
09524:  BTFSC  xB7.2
09526:  BRA    952C
09528:  BTFSC  xBB.2
0952A:  BRA    954E
0952C:  MOVLB  E
0952E:  MOVF   x68,F
09530:  BTFSC  FD8.2
09532:  BRA    9538
09534:  MOVLB  D
09536:  BRA    954E
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09538:  MOVLW  01
0953A:  MOVWF  x6D
0953C:  MOVLB  0
0953E:  CALL   6E5C
09542:  DECFSZ 01,W
09544:  BRA    9548
09546:  BRA    954C
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09548:  BCF    F89.4
0954A:  BCF    F92.4
0954C:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0) && inputflag ==0) //If Bell or Both
0954E:  BTFSS  xB7.2
09550:  BRA    9556
09552:  BTFSC  xBB.2
09554:  BRA    957C
09556:  MOVLB  E
09558:  MOVF   x68,F
0955A:  BTFSC  FD8.2
0955C:  BRA    9562
0955E:  MOVLB  D
09560:  BRA    957C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09562:  MOVLW  02
09564:  MOVWF  x6D
09566:  MOVLB  0
09568:  CALL   6E5C
0956C:  DECFSZ 01,W
0956E:  BRA    9572
09570:  BRA    957A
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09572:  BCF    F89.3
09574:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09576:  BCF    F89.4
09578:  BCF    F92.4
0957A:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0957C:  BTFSC  xCB.0
0957E:  BRA    95D4
09580:  BTFSC  xCB.1
09582:  BRA    95D4
09584:  BTFSC  xCB.2
09586:  BRA    95D4
09588:  BTFSC  xCB.3
0958A:  BRA    95D4
0958C:  BTFSC  xCB.4
0958E:  BRA    95D4
09590:  BTFSC  xCB.5
09592:  BRA    95D4
09594:  BTFSC  xCB.6
09596:  BRA    95D4
09598:  BTFSC  xCB.7
0959A:  BRA    95D4
0959C:  BTFSC  xCC.0
0959E:  BRA    95D4
095A0:  BTFSC  xCC.1
095A2:  BRA    95D4
095A4:  BTFSC  xCC.2
095A6:  BRA    95D4
095A8:  BTFSC  xCC.3
095AA:  BRA    95D4
095AC:  BTFSC  xCC.4
095AE:  BRA    95D4
095B0:  BTFSC  xCC.5
095B2:  BRA    95D4
095B4:  BTFSC  xCC.6
095B6:  BRA    95D4
095B8:  BTFSC  xCC.7
095BA:  BRA    95D4
095BC:  BTFSC  xCD.0
095BE:  BRA    95D4
095C0:  BTFSC  xCD.1
095C2:  BRA    95D4
095C4:  BTFSC  xCD.2
095C6:  BRA    95D4
095C8:  BTFSC  xCD.3
095CA:  BRA    95D4
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
095CC:  BCF    F89.3
095CE:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
095D0:  BCF    F89.4
095D2:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
095D4:  MOVLW  00
095D6:  BTFSC  xA7.3
095D8:  MOVLW  01
095DA:  MOVLB  E
095DC:  MOVWF  x6E
095DE:  MOVLW  00
095E0:  MOVLB  D
095E2:  BTFSC  xAF.3
095E4:  MOVLW  01
095E6:  MOVLB  E
095E8:  XORWF  x6E,W
095EA:  SUBLW  01
095EC:  BNZ   95F6
095EE:  MOVLB  D
095F0:  BTFSS  xB3.3
095F2:  BRA    95FC
095F4:  MOVLB  E
095F6:  BTFSS  1C.5
095F8:  BRA    9690
095FA:  MOVLB  D
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
095FC:  BTFSC  xCB.3
095FE:  BRA    9612
09600:  MOVF   55,W
09602:  SUBLW  0F
09604:  BNZ   9612
09606:  BTFSC  xC3.3
09608:  BRA    9612
....................       {
....................             TimeBase1s = 100 ;            //reload again
0960A:  MOVLW  64
0960C:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0960E:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B4 = 1;
09612:  BSF    xCB.3
....................       if(Ack.B4 == 0)
09614:  BTFSC  xC3.3
09616:  BRA    9646
....................       {
....................          if(FlashingFlag == 0)
09618:  BTFSC  1C.1
0961A:  BRA    9620
....................             {
....................                Output.B4 = 0;           //Flash output1
0961C:  BCF    xAB.3
....................             }
0961E:  BRA    9622
....................             else
....................             {
....................                Output.B4 = 1;
09620:  BSF    xAB.3
....................             }
....................          if (~AutoTestFlag)
09622:  BTFSC  1C.4
09624:  BRA    9646
....................          {
....................             if(AlarmIndicator.B4 == 1){
09626:  BTFSS  xBF.3
09628:  BRA    9646
....................                 if(OutputBoth.B4 == 0)        //Both output
0962A:  BTFSC  xBB.3
0962C:  BRA    9638
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0962E:  BSF    F89.4
09630:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09632:  BSF    F89.3
09634:  BCF    F92.3
....................                 }
09636:  BRA    9646
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09638:  BTFSS  xB7.3
0963A:  BRA    9642
0963C:  BSF    F89.4
0963E:  BCF    F92.4
09640:  BRA    9646
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09642:  BSF    F89.3
09644:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09646:  MOVLW  01
09648:  MOVLB  E
0964A:  MOVWF  x68
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
0964C:  MOVLB  D
0964E:  BTFSC  xDB.3
09650:  BRA    968E
09652:  BTFSC  32.3
09654:  BRA    968E
09656:  BTFSC  xC3.3
09658:  BRA    968E
....................       {
....................          SendSMS.B4 =1;
0965A:  BSF    xDB.3
....................          strcat(SMS_MassageSUM, SMS_Massage4);
0965C:  MOVLW  0D
0965E:  MOVLB  E
09660:  MOVWF  x6E
09662:  MOVLW  03
09664:  MOVWF  x6D
09666:  MOVLW  0A
09668:  MOVWF  x70
0966A:  MOVLW  E3
0966C:  MOVWF  x6F
0966E:  MOVLB  0
09670:  CALL   6DF2
....................          strcat(SMS_MassageSUM, spacestring);
09674:  MOVLW  0D
09676:  MOVLB  E
09678:  MOVWF  x6E
0967A:  MOVLW  03
0967C:  MOVWF  x6D
0967E:  MOVLW  0D
09680:  MOVWF  x70
09682:  MOVLW  A3
09684:  MOVWF  x6F
09686:  MOVLB  0
09688:  CALL   6DF2
0968C:  MOVLB  D
....................           /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage4); 
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
0968E:  BRA    974E
....................    else if(FaultType.B4 == 0)
09690:  MOVLB  D
09692:  BTFSC  xB3.3
09694:  BRA    974E
....................    {
....................       In2.B4 = 0x00;
09696:  BCF    xCB.3
....................       Ack.B4 = 0;
09698:  BCF    xC3.3
....................       Output.B4 = 1;      //Off LED
0969A:  BSF    xAB.3
....................       SendSMS.B4 =0;// Clear SMS
0969C:  BCF    xDB.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0) && inputflag ==0)     //If Buzzer or Both
0969E:  BTFSC  xB7.3
096A0:  BRA    96A6
096A2:  BTFSC  xBB.3
096A4:  BRA    96C8
096A6:  MOVLB  E
096A8:  MOVF   x68,F
096AA:  BTFSC  FD8.2
096AC:  BRA    96B2
096AE:  MOVLB  D
096B0:  BRA    96C8
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
096B2:  MOVLW  01
096B4:  MOVWF  x6D
096B6:  MOVLB  0
096B8:  CALL   6E5C
096BC:  DECFSZ 01,W
096BE:  BRA    96C2
096C0:  BRA    96C6
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
096C2:  BCF    F89.4
096C4:  BCF    F92.4
096C6:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0) && inputflag ==0)  //If Bell or Both
096C8:  BTFSS  xB7.3
096CA:  BRA    96D0
096CC:  BTFSC  xBB.3
096CE:  BRA    96F6
096D0:  MOVLB  E
096D2:  MOVF   x68,F
096D4:  BTFSC  FD8.2
096D6:  BRA    96DC
096D8:  MOVLB  D
096DA:  BRA    96F6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
096DC:  MOVLW  02
096DE:  MOVWF  x6D
096E0:  MOVLB  0
096E2:  CALL   6E5C
096E6:  DECFSZ 01,W
096E8:  BRA    96EC
096EA:  BRA    96F4
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
096EC:  BCF    F89.3
096EE:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
096F0:  BCF    F89.4
096F2:  BCF    F92.4
096F4:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
096F6:  BTFSC  xCB.0
096F8:  BRA    974E
096FA:  BTFSC  xCB.1
096FC:  BRA    974E
096FE:  BTFSC  xCB.2
09700:  BRA    974E
09702:  BTFSC  xCB.3
09704:  BRA    974E
09706:  BTFSC  xCB.4
09708:  BRA    974E
0970A:  BTFSC  xCB.5
0970C:  BRA    974E
0970E:  BTFSC  xCB.6
09710:  BRA    974E
09712:  BTFSC  xCB.7
09714:  BRA    974E
09716:  BTFSC  xCC.0
09718:  BRA    974E
0971A:  BTFSC  xCC.1
0971C:  BRA    974E
0971E:  BTFSC  xCC.2
09720:  BRA    974E
09722:  BTFSC  xCC.3
09724:  BRA    974E
09726:  BTFSC  xCC.4
09728:  BRA    974E
0972A:  BTFSC  xCC.5
0972C:  BRA    974E
0972E:  BTFSC  xCC.6
09730:  BRA    974E
09732:  BTFSC  xCC.7
09734:  BRA    974E
09736:  BTFSC  xCD.0
09738:  BRA    974E
0973A:  BTFSC  xCD.1
0973C:  BRA    974E
0973E:  BTFSC  xCD.2
09740:  BRA    974E
09742:  BTFSC  xCD.3
09744:  BRA    974E
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09746:  BCF    F89.3
09748:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0974A:  BCF    F89.4
0974C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0974E:  MOVLW  00
09750:  BTFSC  xA7.4
09752:  MOVLW  01
09754:  MOVLB  E
09756:  MOVWF  x6E
09758:  MOVLW  00
0975A:  MOVLB  D
0975C:  BTFSC  xAF.4
0975E:  MOVLW  01
09760:  MOVLB  E
09762:  XORWF  x6E,W
09764:  SUBLW  01
09766:  BNZ   9770
09768:  MOVLB  D
0976A:  BTFSS  xB3.4
0976C:  BRA    9776
0976E:  MOVLB  E
09770:  BTFSS  1C.5
09772:  BRA    980A
09774:  MOVLB  D
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
09776:  BTFSC  xCB.4
09778:  BRA    978C
0977A:  MOVF   55,W
0977C:  SUBLW  0F
0977E:  BNZ   978C
09780:  BTFSC  xC3.4
09782:  BRA    978C
....................       {
....................             TimeBase1s = 100 ;            //reload again
09784:  MOVLW  64
09786:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
09788:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B5 = 1;
0978C:  BSF    xCB.4
....................       if(Ack.B5 == 0)
0978E:  BTFSC  xC3.4
09790:  BRA    97C0
....................       {
....................          if(FlashingFlag == 0)
09792:  BTFSC  1C.1
09794:  BRA    979A
....................             {
....................                Output.B5 = 0;           //Flash output1
09796:  BCF    xAB.4
....................             }
09798:  BRA    979C
....................             else
....................             {
....................                Output.B5 = 1;
0979A:  BSF    xAB.4
....................             }
....................          if (~AutoTestFlag)
0979C:  BTFSC  1C.4
0979E:  BRA    97C0
....................          {
....................             if(AlarmIndicator.B5 == 1){
097A0:  BTFSS  xBF.4
097A2:  BRA    97C0
....................                 if(OutputBoth.B5 == 0)        //Both output
097A4:  BTFSC  xBB.4
097A6:  BRA    97B2
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
097A8:  BSF    F89.4
097AA:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
097AC:  BSF    F89.3
097AE:  BCF    F92.3
....................                 }
097B0:  BRA    97C0
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
097B2:  BTFSS  xB7.4
097B4:  BRA    97BC
097B6:  BSF    F89.4
097B8:  BCF    F92.4
097BA:  BRA    97C0
....................                   else output_bit(Pbell,OnRelay);                          //Bell
097BC:  BSF    F89.3
097BE:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
097C0:  MOVLW  01
097C2:  MOVLB  E
097C4:  MOVWF  x68
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
097C6:  MOVLB  D
097C8:  BTFSC  xDB.4
097CA:  BRA    9808
097CC:  BTFSC  32.3
097CE:  BRA    9808
097D0:  BTFSC  xC3.4
097D2:  BRA    9808
....................       {
....................          SendSMS.B5 =1;
097D4:  BSF    xDB.4
....................          strcat(SMS_MassageSUM, SMS_Massage5);
097D6:  MOVLW  0D
097D8:  MOVLB  E
097DA:  MOVWF  x6E
097DC:  MOVLW  03
097DE:  MOVWF  x6D
097E0:  MOVLW  0B
097E2:  MOVWF  x70
097E4:  MOVLW  03
097E6:  MOVWF  x6F
097E8:  MOVLB  0
097EA:  CALL   6DF2
....................          strcat(SMS_MassageSUM, spacestring);
097EE:  MOVLW  0D
097F0:  MOVLB  E
097F2:  MOVWF  x6E
097F4:  MOVLW  03
097F6:  MOVWF  x6D
097F8:  MOVLW  0D
097FA:  MOVWF  x70
097FC:  MOVLW  A3
097FE:  MOVWF  x6F
09800:  MOVLB  0
09802:  CALL   6DF2
09806:  MOVLB  D
....................           /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage5); 
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
09808:  BRA    98C8
....................    else if(FaultType.B5 == 0)
0980A:  MOVLB  D
0980C:  BTFSC  xB3.4
0980E:  BRA    98C8
....................    {
....................       In2.B5 = 0x00;
09810:  BCF    xCB.4
....................       Ack.B5 = 0;
09812:  BCF    xC3.4
....................       Output.B5 = 1;      //Off LED
09814:  BSF    xAB.4
....................       SendSMS.B5 =0;// Clear SMS
09816:  BCF    xDB.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0) && inputflag ==0)     //If Buzzer or Both
09818:  BTFSC  xB7.4
0981A:  BRA    9820
0981C:  BTFSC  xBB.4
0981E:  BRA    9842
09820:  MOVLB  E
09822:  MOVF   x68,F
09824:  BTFSC  FD8.2
09826:  BRA    982C
09828:  MOVLB  D
0982A:  BRA    9842
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0982C:  MOVLW  01
0982E:  MOVWF  x6D
09830:  MOVLB  0
09832:  CALL   6E5C
09836:  DECFSZ 01,W
09838:  BRA    983C
0983A:  BRA    9840
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0983C:  BCF    F89.4
0983E:  BCF    F92.4
09840:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0) && inputflag ==0) //If Bell or Both
09842:  BTFSS  xB7.4
09844:  BRA    984A
09846:  BTFSC  xBB.4
09848:  BRA    9870
0984A:  MOVLB  E
0984C:  MOVF   x68,F
0984E:  BTFSC  FD8.2
09850:  BRA    9856
09852:  MOVLB  D
09854:  BRA    9870
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09856:  MOVLW  02
09858:  MOVWF  x6D
0985A:  MOVLB  0
0985C:  CALL   6E5C
09860:  DECFSZ 01,W
09862:  BRA    9866
09864:  BRA    986E
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09866:  BCF    F89.3
09868:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0986A:  BCF    F89.4
0986C:  BCF    F92.4
0986E:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09870:  BTFSC  xCB.0
09872:  BRA    98C8
09874:  BTFSC  xCB.1
09876:  BRA    98C8
09878:  BTFSC  xCB.2
0987A:  BRA    98C8
0987C:  BTFSC  xCB.3
0987E:  BRA    98C8
09880:  BTFSC  xCB.4
09882:  BRA    98C8
09884:  BTFSC  xCB.5
09886:  BRA    98C8
09888:  BTFSC  xCB.6
0988A:  BRA    98C8
0988C:  BTFSC  xCB.7
0988E:  BRA    98C8
09890:  BTFSC  xCC.0
09892:  BRA    98C8
09894:  BTFSC  xCC.1
09896:  BRA    98C8
09898:  BTFSC  xCC.2
0989A:  BRA    98C8
0989C:  BTFSC  xCC.3
0989E:  BRA    98C8
098A0:  BTFSC  xCC.4
098A2:  BRA    98C8
098A4:  BTFSC  xCC.5
098A6:  BRA    98C8
098A8:  BTFSC  xCC.6
098AA:  BRA    98C8
098AC:  BTFSC  xCC.7
098AE:  BRA    98C8
098B0:  BTFSC  xCD.0
098B2:  BRA    98C8
098B4:  BTFSC  xCD.1
098B6:  BRA    98C8
098B8:  BTFSC  xCD.2
098BA:  BRA    98C8
098BC:  BTFSC  xCD.3
098BE:  BRA    98C8
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
098C0:  BCF    F89.3
098C2:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
098C4:  BCF    F89.4
098C6:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
098C8:  MOVLW  00
098CA:  BTFSC  xA7.5
098CC:  MOVLW  01
098CE:  MOVLB  E
098D0:  MOVWF  x6E
098D2:  MOVLW  00
098D4:  MOVLB  D
098D6:  BTFSC  xAF.5
098D8:  MOVLW  01
098DA:  MOVLB  E
098DC:  XORWF  x6E,W
098DE:  SUBLW  01
098E0:  BNZ   98EA
098E2:  MOVLB  D
098E4:  BTFSS  xB3.5
098E6:  BRA    98F0
098E8:  MOVLB  E
098EA:  BTFSS  1C.5
098EC:  BRA    9984
098EE:  MOVLB  D
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
098F0:  BTFSC  xCB.5
098F2:  BRA    9906
098F4:  MOVF   55,W
098F6:  SUBLW  0F
098F8:  BNZ   9906
098FA:  BTFSC  xC3.5
098FC:  BRA    9906
....................       {
....................             TimeBase1s = 100 ;            //reload again
098FE:  MOVLW  64
09900:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
09902:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B6 = 1;
09906:  BSF    xCB.5
....................       if(Ack.B6 == 0)
09908:  BTFSC  xC3.5
0990A:  BRA    993A
....................       {
....................          if(FlashingFlag == 0)
0990C:  BTFSC  1C.1
0990E:  BRA    9914
....................             {
....................                Output.B6 = 0;           //Flash output1
09910:  BCF    xAB.5
....................             }
09912:  BRA    9916
....................             else
....................             {
....................                Output.B6 = 1;
09914:  BSF    xAB.5
....................             }
....................          if (~AutoTestFlag)
09916:  BTFSC  1C.4
09918:  BRA    993A
....................          {
....................             if(AlarmIndicator.B6 == 1){
0991A:  BTFSS  xBF.5
0991C:  BRA    993A
....................                 if(OutputBoth.B6 == 0)        //Both output
0991E:  BTFSC  xBB.5
09920:  BRA    992C
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09922:  BSF    F89.4
09924:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09926:  BSF    F89.3
09928:  BCF    F92.3
....................                 }
0992A:  BRA    993A
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0992C:  BTFSS  xB7.5
0992E:  BRA    9936
09930:  BSF    F89.4
09932:  BCF    F92.4
09934:  BRA    993A
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09936:  BSF    F89.3
09938:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0993A:  MOVLW  01
0993C:  MOVLB  E
0993E:  MOVWF  x68
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
09940:  MOVLB  D
09942:  BTFSC  xDB.5
09944:  BRA    9982
09946:  BTFSC  32.3
09948:  BRA    9982
0994A:  BTFSC  xC3.5
0994C:  BRA    9982
....................       {
....................          SendSMS.B6 =1;
0994E:  BSF    xDB.5
....................          strcat(SMS_MassageSUM, SMS_Massage6);
09950:  MOVLW  0D
09952:  MOVLB  E
09954:  MOVWF  x6E
09956:  MOVLW  03
09958:  MOVWF  x6D
0995A:  MOVLW  0B
0995C:  MOVWF  x70
0995E:  MOVLW  23
09960:  MOVWF  x6F
09962:  MOVLB  0
09964:  CALL   6DF2
....................          strcat(SMS_MassageSUM, spacestring);
09968:  MOVLW  0D
0996A:  MOVLB  E
0996C:  MOVWF  x6E
0996E:  MOVLW  03
09970:  MOVWF  x6D
09972:  MOVLW  0D
09974:  MOVWF  x70
09976:  MOVLW  A3
09978:  MOVWF  x6F
0997A:  MOVLB  0
0997C:  CALL   6DF2
09980:  MOVLB  D
....................           /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage6);  
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
09982:  BRA    9A42
....................    else if(FaultType.B6 == 0)
09984:  MOVLB  D
09986:  BTFSC  xB3.5
09988:  BRA    9A42
....................    {
....................       In2.B6 = 0x00;
0998A:  BCF    xCB.5
....................       Ack.B6 = 0;
0998C:  BCF    xC3.5
....................       Output.B6 = 1;      //Off LED
0998E:  BSF    xAB.5
....................       SendSMS.B6 =0;// Clear SMS
09990:  BCF    xDB.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
09992:  BTFSC  xB7.5
09994:  BRA    999A
09996:  BTFSC  xBB.5
09998:  BRA    99BC
0999A:  MOVLB  E
0999C:  MOVF   x68,F
0999E:  BTFSC  FD8.2
099A0:  BRA    99A6
099A2:  MOVLB  D
099A4:  BRA    99BC
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
099A6:  MOVLW  01
099A8:  MOVWF  x6D
099AA:  MOVLB  0
099AC:  CALL   6E5C
099B0:  DECFSZ 01,W
099B2:  BRA    99B6
099B4:  BRA    99BA
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
099B6:  BCF    F89.4
099B8:  BCF    F92.4
099BA:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
099BC:  BTFSS  xB7.5
099BE:  BRA    99C4
099C0:  BTFSC  xBB.5
099C2:  BRA    99EA
099C4:  MOVLB  E
099C6:  MOVF   x68,F
099C8:  BTFSC  FD8.2
099CA:  BRA    99D0
099CC:  MOVLB  D
099CE:  BRA    99EA
....................       {
....................          if(CheckAutoReset(0x02) == 1);
099D0:  MOVLW  02
099D2:  MOVWF  x6D
099D4:  MOVLB  0
099D6:  CALL   6E5C
099DA:  DECFSZ 01,W
099DC:  BRA    99E0
099DE:  BRA    99E8
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
099E0:  BCF    F89.3
099E2:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
099E4:  BCF    F89.4
099E6:  BCF    F92.4
099E8:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
099EA:  BTFSC  xCB.0
099EC:  BRA    9A42
099EE:  BTFSC  xCB.1
099F0:  BRA    9A42
099F2:  BTFSC  xCB.2
099F4:  BRA    9A42
099F6:  BTFSC  xCB.3
099F8:  BRA    9A42
099FA:  BTFSC  xCB.4
099FC:  BRA    9A42
099FE:  BTFSC  xCB.5
09A00:  BRA    9A42
09A02:  BTFSC  xCB.6
09A04:  BRA    9A42
09A06:  BTFSC  xCB.7
09A08:  BRA    9A42
09A0A:  BTFSC  xCC.0
09A0C:  BRA    9A42
09A0E:  BTFSC  xCC.1
09A10:  BRA    9A42
09A12:  BTFSC  xCC.2
09A14:  BRA    9A42
09A16:  BTFSC  xCC.3
09A18:  BRA    9A42
09A1A:  BTFSC  xCC.4
09A1C:  BRA    9A42
09A1E:  BTFSC  xCC.5
09A20:  BRA    9A42
09A22:  BTFSC  xCC.6
09A24:  BRA    9A42
09A26:  BTFSC  xCC.7
09A28:  BRA    9A42
09A2A:  BTFSC  xCD.0
09A2C:  BRA    9A42
09A2E:  BTFSC  xCD.1
09A30:  BRA    9A42
09A32:  BTFSC  xCD.2
09A34:  BRA    9A42
09A36:  BTFSC  xCD.3
09A38:  BRA    9A42
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09A3A:  BCF    F89.3
09A3C:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09A3E:  BCF    F89.4
09A40:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09A42:  MOVLW  00
09A44:  BTFSC  xA7.6
09A46:  MOVLW  01
09A48:  MOVLB  E
09A4A:  MOVWF  x6E
09A4C:  MOVLW  00
09A4E:  MOVLB  D
09A50:  BTFSC  xAF.6
09A52:  MOVLW  01
09A54:  MOVLB  E
09A56:  XORWF  x6E,W
09A58:  SUBLW  01
09A5A:  BNZ   9A64
09A5C:  MOVLB  D
09A5E:  BTFSS  xB3.6
09A60:  BRA    9A6A
09A62:  MOVLB  E
09A64:  BTFSS  1C.5
09A66:  BRA    9AFE
09A68:  MOVLB  D
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
09A6A:  BTFSC  xCB.6
09A6C:  BRA    9A80
09A6E:  MOVF   55,W
09A70:  SUBLW  0F
09A72:  BNZ   9A80
09A74:  BTFSC  xC3.6
09A76:  BRA    9A80
....................       {
....................             TimeBase1s = 100 ;            //reload again
09A78:  MOVLW  64
09A7A:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
09A7C:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B7 = 1;
09A80:  BSF    xCB.6
....................       if(Ack.B7 == 0)
09A82:  BTFSC  xC3.6
09A84:  BRA    9AB4
....................       {
....................          if(FlashingFlag == 0)
09A86:  BTFSC  1C.1
09A88:  BRA    9A8E
....................             {
....................                Output.B7 = 0;           //Flash output1
09A8A:  BCF    xAB.6
....................             }
09A8C:  BRA    9A90
....................             else
....................             {
....................                Output.B7 = 1;
09A8E:  BSF    xAB.6
....................             }
....................          if (~AutoTestFlag)
09A90:  BTFSC  1C.4
09A92:  BRA    9AB4
....................          {
....................             if(AlarmIndicator.B7 == 1){
09A94:  BTFSS  xBF.6
09A96:  BRA    9AB4
....................                 if(OutputBoth.B7 == 0)        //Both output
09A98:  BTFSC  xBB.6
09A9A:  BRA    9AA6
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09A9C:  BSF    F89.4
09A9E:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09AA0:  BSF    F89.3
09AA2:  BCF    F92.3
....................                 }
09AA4:  BRA    9AB4
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09AA6:  BTFSS  xB7.6
09AA8:  BRA    9AB0
09AAA:  BSF    F89.4
09AAC:  BCF    F92.4
09AAE:  BRA    9AB4
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09AB0:  BSF    F89.3
09AB2:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09AB4:  MOVLW  01
09AB6:  MOVLB  E
09AB8:  MOVWF  x68
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
09ABA:  MOVLB  D
09ABC:  BTFSC  xDB.6
09ABE:  BRA    9AFC
09AC0:  BTFSC  32.3
09AC2:  BRA    9AFC
09AC4:  BTFSC  xC3.6
09AC6:  BRA    9AFC
....................       {
....................          SendSMS.B7 =1;
09AC8:  BSF    xDB.6
....................          strcat(SMS_MassageSUM, SMS_Massage7);
09ACA:  MOVLW  0D
09ACC:  MOVLB  E
09ACE:  MOVWF  x6E
09AD0:  MOVLW  03
09AD2:  MOVWF  x6D
09AD4:  MOVLW  0B
09AD6:  MOVWF  x70
09AD8:  MOVLW  43
09ADA:  MOVWF  x6F
09ADC:  MOVLB  0
09ADE:  CALL   6DF2
....................          strcat(SMS_MassageSUM, spacestring);
09AE2:  MOVLW  0D
09AE4:  MOVLB  E
09AE6:  MOVWF  x6E
09AE8:  MOVLW  03
09AEA:  MOVWF  x6D
09AEC:  MOVLW  0D
09AEE:  MOVWF  x70
09AF0:  MOVLW  A3
09AF2:  MOVWF  x6F
09AF4:  MOVLB  0
09AF6:  CALL   6DF2
09AFA:  MOVLB  D
....................           /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage7);  
....................         putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
....................    }
09AFC:  BRA    9BBC
....................    else if(FaultType.B7 == 0)
09AFE:  MOVLB  D
09B00:  BTFSC  xB3.6
09B02:  BRA    9BBC
....................    {
....................       In2.B7 = 0x00;
09B04:  BCF    xCB.6
....................       Ack.B7 = 0;
09B06:  BCF    xC3.6
....................       Output.B7 = 1;      //Off LED
09B08:  BSF    xAB.6
....................       SendSMS.B7 =0;// Clear SMS
09B0A:  BCF    xDB.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
09B0C:  BTFSC  xB7.6
09B0E:  BRA    9B14
09B10:  BTFSC  xBB.6
09B12:  BRA    9B36
09B14:  MOVLB  E
09B16:  MOVF   x68,F
09B18:  BTFSC  FD8.2
09B1A:  BRA    9B20
09B1C:  MOVLB  D
09B1E:  BRA    9B36
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09B20:  MOVLW  01
09B22:  MOVWF  x6D
09B24:  MOVLB  0
09B26:  CALL   6E5C
09B2A:  DECFSZ 01,W
09B2C:  BRA    9B30
09B2E:  BRA    9B34
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09B30:  BCF    F89.4
09B32:  BCF    F92.4
09B34:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
09B36:  BTFSS  xB7.6
09B38:  BRA    9B3E
09B3A:  BTFSC  xBB.6
09B3C:  BRA    9B64
09B3E:  MOVLB  E
09B40:  MOVF   x68,F
09B42:  BTFSC  FD8.2
09B44:  BRA    9B4A
09B46:  MOVLB  D
09B48:  BRA    9B64
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09B4A:  MOVLW  02
09B4C:  MOVWF  x6D
09B4E:  MOVLB  0
09B50:  CALL   6E5C
09B54:  DECFSZ 01,W
09B56:  BRA    9B5A
09B58:  BRA    9B62
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09B5A:  BCF    F89.3
09B5C:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09B5E:  BCF    F89.4
09B60:  BCF    F92.4
09B62:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09B64:  BTFSC  xCB.0
09B66:  BRA    9BBC
09B68:  BTFSC  xCB.1
09B6A:  BRA    9BBC
09B6C:  BTFSC  xCB.2
09B6E:  BRA    9BBC
09B70:  BTFSC  xCB.3
09B72:  BRA    9BBC
09B74:  BTFSC  xCB.4
09B76:  BRA    9BBC
09B78:  BTFSC  xCB.5
09B7A:  BRA    9BBC
09B7C:  BTFSC  xCB.6
09B7E:  BRA    9BBC
09B80:  BTFSC  xCB.7
09B82:  BRA    9BBC
09B84:  BTFSC  xCC.0
09B86:  BRA    9BBC
09B88:  BTFSC  xCC.1
09B8A:  BRA    9BBC
09B8C:  BTFSC  xCC.2
09B8E:  BRA    9BBC
09B90:  BTFSC  xCC.3
09B92:  BRA    9BBC
09B94:  BTFSC  xCC.4
09B96:  BRA    9BBC
09B98:  BTFSC  xCC.5
09B9A:  BRA    9BBC
09B9C:  BTFSC  xCC.6
09B9E:  BRA    9BBC
09BA0:  BTFSC  xCC.7
09BA2:  BRA    9BBC
09BA4:  BTFSC  xCD.0
09BA6:  BRA    9BBC
09BA8:  BTFSC  xCD.1
09BAA:  BRA    9BBC
09BAC:  BTFSC  xCD.2
09BAE:  BRA    9BBC
09BB0:  BTFSC  xCD.3
09BB2:  BRA    9BBC
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09BB4:  BCF    F89.3
09BB6:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09BB8:  BCF    F89.4
09BBA:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
09BBC:  MOVLW  00
09BBE:  BTFSC  xA7.7
09BC0:  MOVLW  01
09BC2:  MOVLB  E
09BC4:  MOVWF  x6E
09BC6:  MOVLW  00
09BC8:  MOVLB  D
09BCA:  BTFSC  xAF.7
09BCC:  MOVLW  01
09BCE:  MOVLB  E
09BD0:  XORWF  x6E,W
09BD2:  SUBLW  01
09BD4:  BNZ   9BDE
09BD6:  MOVLB  D
09BD8:  BTFSS  xB3.7
09BDA:  BRA    9BE4
09BDC:  MOVLB  E
09BDE:  BTFSS  1C.5
09BE0:  BRA    9C78
09BE2:  MOVLB  D
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
09BE4:  BTFSC  xCB.7
09BE6:  BRA    9BFA
09BE8:  MOVF   55,W
09BEA:  SUBLW  0F
09BEC:  BNZ   9BFA
09BEE:  BTFSC  xC3.7
09BF0:  BRA    9BFA
....................       {
....................             TimeBase1s = 100 ;            //reload again
09BF2:  MOVLW  64
09BF4:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
09BF6:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B8 = 1;
09BFA:  BSF    xCB.7
....................       if(Ack.B8 == 0)
09BFC:  BTFSC  xC3.7
09BFE:  BRA    9C2E
....................       {
....................          if(FlashingFlag == 0)
09C00:  BTFSC  1C.1
09C02:  BRA    9C08
....................             {
....................                Output.B8 = 0;           //Flash output1
09C04:  BCF    xAB.7
....................             }
09C06:  BRA    9C0A
....................             else
....................             {
....................                Output.B8 = 1;
09C08:  BSF    xAB.7
....................             }
....................          if (~AutoTestFlag)
09C0A:  BTFSC  1C.4
09C0C:  BRA    9C2E
....................          {
....................             if(AlarmIndicator.B8 == 1){
09C0E:  BTFSS  xBF.7
09C10:  BRA    9C2E
....................                 if(OutputBoth.B8 == 0)        //Both output
09C12:  BTFSC  xBB.7
09C14:  BRA    9C20
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09C16:  BSF    F89.4
09C18:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09C1A:  BSF    F89.3
09C1C:  BCF    F92.3
....................                 }
09C1E:  BRA    9C2E
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09C20:  BTFSS  xB7.7
09C22:  BRA    9C2A
09C24:  BSF    F89.4
09C26:  BCF    F92.4
09C28:  BRA    9C2E
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09C2A:  BSF    F89.3
09C2C:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09C2E:  MOVLW  01
09C30:  MOVLB  E
09C32:  MOVWF  x68
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
09C34:  MOVLB  D
09C36:  BTFSC  xDB.7
09C38:  BRA    9C76
09C3A:  BTFSC  32.3
09C3C:  BRA    9C76
09C3E:  BTFSC  xC3.7
09C40:  BRA    9C76
....................       {
....................          SendSMS.B8 =1;
09C42:  BSF    xDB.7
....................          strcat(SMS_MassageSUM, SMS_Massage8);
09C44:  MOVLW  0D
09C46:  MOVLB  E
09C48:  MOVWF  x6E
09C4A:  MOVLW  03
09C4C:  MOVWF  x6D
09C4E:  MOVLW  0B
09C50:  MOVWF  x70
09C52:  MOVLW  63
09C54:  MOVWF  x6F
09C56:  MOVLB  0
09C58:  CALL   6DF2
....................          strcat(SMS_MassageSUM, spacestring);
09C5C:  MOVLW  0D
09C5E:  MOVLB  E
09C60:  MOVWF  x6E
09C62:  MOVLW  03
09C64:  MOVWF  x6D
09C66:  MOVLW  0D
09C68:  MOVWF  x70
09C6A:  MOVLW  A3
09C6C:  MOVWF  x6F
09C6E:  MOVLB  0
09C70:  CALL   6DF2
09C74:  MOVLB  D
....................           /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage8);   
....................         putc('\n',CH2);
....................         putc(26,CH2);
....................        */
....................       }
....................    }
09C76:  BRA    9D36
....................    else if(FaultType.B8 == 0)
09C78:  MOVLB  D
09C7A:  BTFSC  xB3.7
09C7C:  BRA    9D36
....................    {
....................       In2.B8 = 0x00;
09C7E:  BCF    xCB.7
....................       Ack.B8 = 0;
09C80:  BCF    xC3.7
....................       Output.B8 = 1;      //Off LED
09C82:  BSF    xAB.7
....................       SendSMS.B8 =0;// Clear SMS
09C84:  BCF    xDB.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
09C86:  BTFSC  xB7.7
09C88:  BRA    9C8E
09C8A:  BTFSC  xBB.7
09C8C:  BRA    9CB0
09C8E:  MOVLB  E
09C90:  MOVF   x68,F
09C92:  BTFSC  FD8.2
09C94:  BRA    9C9A
09C96:  MOVLB  D
09C98:  BRA    9CB0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09C9A:  MOVLW  01
09C9C:  MOVWF  x6D
09C9E:  MOVLB  0
09CA0:  CALL   6E5C
09CA4:  DECFSZ 01,W
09CA6:  BRA    9CAA
09CA8:  BRA    9CAE
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09CAA:  BCF    F89.4
09CAC:  BCF    F92.4
09CAE:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
09CB0:  BTFSS  xB7.7
09CB2:  BRA    9CB8
09CB4:  BTFSC  xBB.7
09CB6:  BRA    9CDE
09CB8:  MOVLB  E
09CBA:  MOVF   x68,F
09CBC:  BTFSC  FD8.2
09CBE:  BRA    9CC4
09CC0:  MOVLB  D
09CC2:  BRA    9CDE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09CC4:  MOVLW  02
09CC6:  MOVWF  x6D
09CC8:  MOVLB  0
09CCA:  CALL   6E5C
09CCE:  DECFSZ 01,W
09CD0:  BRA    9CD4
09CD2:  BRA    9CDC
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09CD4:  BCF    F89.3
09CD6:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09CD8:  BCF    F89.4
09CDA:  BCF    F92.4
09CDC:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09CDE:  BTFSC  xCB.0
09CE0:  BRA    9D36
09CE2:  BTFSC  xCB.1
09CE4:  BRA    9D36
09CE6:  BTFSC  xCB.2
09CE8:  BRA    9D36
09CEA:  BTFSC  xCB.3
09CEC:  BRA    9D36
09CEE:  BTFSC  xCB.4
09CF0:  BRA    9D36
09CF2:  BTFSC  xCB.5
09CF4:  BRA    9D36
09CF6:  BTFSC  xCB.6
09CF8:  BRA    9D36
09CFA:  BTFSC  xCB.7
09CFC:  BRA    9D36
09CFE:  BTFSC  xCC.0
09D00:  BRA    9D36
09D02:  BTFSC  xCC.1
09D04:  BRA    9D36
09D06:  BTFSC  xCC.2
09D08:  BRA    9D36
09D0A:  BTFSC  xCC.3
09D0C:  BRA    9D36
09D0E:  BTFSC  xCC.4
09D10:  BRA    9D36
09D12:  BTFSC  xCC.5
09D14:  BRA    9D36
09D16:  BTFSC  xCC.6
09D18:  BRA    9D36
09D1A:  BTFSC  xCC.7
09D1C:  BRA    9D36
09D1E:  BTFSC  xCD.0
09D20:  BRA    9D36
09D22:  BTFSC  xCD.1
09D24:  BRA    9D36
09D26:  BTFSC  xCD.2
09D28:  BRA    9D36
09D2A:  BTFSC  xCD.3
09D2C:  BRA    9D36
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09D2E:  BCF    F89.3
09D30:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09D32:  BCF    F89.4
09D34:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09D36:  MOVLW  00
09D38:  BTFSC  xA8.0
09D3A:  MOVLW  01
09D3C:  MOVLB  E
09D3E:  MOVWF  x6E
09D40:  MOVLW  00
09D42:  MOVLB  D
09D44:  BTFSC  xB0.0
09D46:  MOVLW  01
09D48:  MOVLB  E
09D4A:  XORWF  x6E,W
09D4C:  SUBLW  01
09D4E:  BNZ   9D58
09D50:  MOVLB  D
09D52:  BTFSS  xB4.0
09D54:  BRA    9D5E
09D56:  MOVLB  E
09D58:  BTFSS  1C.5
09D5A:  BRA    9DF2
09D5C:  MOVLB  D
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
09D5E:  BTFSC  xCC.0
09D60:  BRA    9D74
09D62:  MOVF   55,W
09D64:  SUBLW  0F
09D66:  BNZ   9D74
09D68:  BTFSC  xC4.0
09D6A:  BRA    9D74
....................       {
....................             TimeBase1s = 100 ;            //reload again
09D6C:  MOVLW  64
09D6E:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
09D70:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B9 = 1;
09D74:  BSF    xCC.0
....................       if(Ack.B9 == 0)
09D76:  BTFSC  xC4.0
09D78:  BRA    9DA8
....................       {
....................          if(FlashingFlag == 0)
09D7A:  BTFSC  1C.1
09D7C:  BRA    9D82
....................             {
....................                Output.B9 = 0;           //Flash output1
09D7E:  BCF    xAC.0
....................             }
09D80:  BRA    9D84
....................             else
....................             {
....................                Output.B9 = 1;
09D82:  BSF    xAC.0
....................             }
....................          if (~AutoTestFlag)
09D84:  BTFSC  1C.4
09D86:  BRA    9DA8
....................          {
....................             if(AlarmIndicator.B9 == 1){
09D88:  BTFSS  xC0.0
09D8A:  BRA    9DA8
....................                 if(OutputBoth.B9 == 0)        //Both output
09D8C:  BTFSC  xBC.0
09D8E:  BRA    9D9A
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09D90:  BSF    F89.4
09D92:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09D94:  BSF    F89.3
09D96:  BCF    F92.3
....................                 }
09D98:  BRA    9DA8
....................                 else
....................                 {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09D9A:  BTFSS  xB8.0
09D9C:  BRA    9DA4
09D9E:  BSF    F89.4
09DA0:  BCF    F92.4
09DA2:  BRA    9DA8
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09DA4:  BSF    F89.3
09DA6:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09DA8:  MOVLW  01
09DAA:  MOVLB  E
09DAC:  MOVWF  x68
....................       // SMS Sending   
....................       if((SendSMS.B9 ==0) && (functointest_f ==0) && (Ack.B9 ==0))
09DAE:  MOVLB  D
09DB0:  BTFSC  xDC.0
09DB2:  BRA    9DF0
09DB4:  BTFSC  32.3
09DB6:  BRA    9DF0
09DB8:  BTFSC  xC4.0
09DBA:  BRA    9DF0
....................       {
....................          SendSMS.B9 =1;
09DBC:  BSF    xDC.0
....................          strcat(SMS_MassageSUM, SMS_Massage9);
09DBE:  MOVLW  0D
09DC0:  MOVLB  E
09DC2:  MOVWF  x6E
09DC4:  MOVLW  03
09DC6:  MOVWF  x6D
09DC8:  MOVLW  0B
09DCA:  MOVWF  x70
09DCC:  MOVLW  83
09DCE:  MOVWF  x6F
09DD0:  MOVLB  0
09DD2:  CALL   6DF2
....................          strcat(SMS_MassageSUM, spacestring);
09DD6:  MOVLW  0D
09DD8:  MOVLB  E
09DDA:  MOVWF  x6E
09DDC:  MOVLW  03
09DDE:  MOVWF  x6D
09DE0:  MOVLW  0D
09DE2:  MOVWF  x70
09DE4:  MOVLW  A3
09DE6:  MOVWF  x6F
09DE8:  MOVLB  0
09DEA:  CALL   6DF2
09DEE:  MOVLB  D
....................           /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage9);   
....................         putc('\n',CH2);
....................         putc(26,CH2);
....................        */
....................       }
....................    }
09DF0:  BRA    9EB0
....................    else if(FaultType.B9 == 0)
09DF2:  MOVLB  D
09DF4:  BTFSC  xB4.0
09DF6:  BRA    9EB0
....................    {
....................       In2.B9 = 0x00;
09DF8:  BCF    xCC.0
....................       Ack.B9 = 0;
09DFA:  BCF    xC4.0
....................       Output.B9 = 1;      //Off LED
09DFC:  BSF    xAC.0
....................       SendSMS.B9 =0;// Clear SMS
09DFE:  BCF    xDC.0
....................       
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)      //If Buzzer or Both
09E00:  BTFSC  xB8.0
09E02:  BRA    9E08
09E04:  BTFSC  xBC.0
09E06:  BRA    9E2A
09E08:  MOVLB  E
09E0A:  MOVF   x68,F
09E0C:  BTFSC  FD8.2
09E0E:  BRA    9E14
09E10:  MOVLB  D
09E12:  BRA    9E2A
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09E14:  MOVLW  01
09E16:  MOVWF  x6D
09E18:  MOVLB  0
09E1A:  CALL   6E5C
09E1E:  DECFSZ 01,W
09E20:  BRA    9E24
09E22:  BRA    9E28
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09E24:  BCF    F89.4
09E26:  BCF    F92.4
09E28:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)  //If Bell or Both
09E2A:  BTFSS  xB8.0
09E2C:  BRA    9E32
09E2E:  BTFSC  xBC.0
09E30:  BRA    9E58
09E32:  MOVLB  E
09E34:  MOVF   x68,F
09E36:  BTFSC  FD8.2
09E38:  BRA    9E3E
09E3A:  MOVLB  D
09E3C:  BRA    9E58
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09E3E:  MOVLW  02
09E40:  MOVWF  x6D
09E42:  MOVLB  0
09E44:  CALL   6E5C
09E48:  DECFSZ 01,W
09E4A:  BRA    9E4E
09E4C:  BRA    9E56
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09E4E:  BCF    F89.3
09E50:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09E52:  BCF    F89.4
09E54:  BCF    F92.4
09E56:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09E58:  BTFSC  xCB.0
09E5A:  BRA    9EB0
09E5C:  BTFSC  xCB.1
09E5E:  BRA    9EB0
09E60:  BTFSC  xCB.2
09E62:  BRA    9EB0
09E64:  BTFSC  xCB.3
09E66:  BRA    9EB0
09E68:  BTFSC  xCB.4
09E6A:  BRA    9EB0
09E6C:  BTFSC  xCB.5
09E6E:  BRA    9EB0
09E70:  BTFSC  xCB.6
09E72:  BRA    9EB0
09E74:  BTFSC  xCB.7
09E76:  BRA    9EB0
09E78:  BTFSC  xCC.0
09E7A:  BRA    9EB0
09E7C:  BTFSC  xCC.1
09E7E:  BRA    9EB0
09E80:  BTFSC  xCC.2
09E82:  BRA    9EB0
09E84:  BTFSC  xCC.3
09E86:  BRA    9EB0
09E88:  BTFSC  xCC.4
09E8A:  BRA    9EB0
09E8C:  BTFSC  xCC.5
09E8E:  BRA    9EB0
09E90:  BTFSC  xCC.6
09E92:  BRA    9EB0
09E94:  BTFSC  xCC.7
09E96:  BRA    9EB0
09E98:  BTFSC  xCD.0
09E9A:  BRA    9EB0
09E9C:  BTFSC  xCD.1
09E9E:  BRA    9EB0
09EA0:  BTFSC  xCD.2
09EA2:  BRA    9EB0
09EA4:  BTFSC  xCD.3
09EA6:  BRA    9EB0
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09EA8:  BCF    F89.3
09EAA:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09EAC:  BCF    F89.4
09EAE:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
09EB0:  MOVLW  00
09EB2:  BTFSC  xA8.1
09EB4:  MOVLW  01
09EB6:  MOVLB  E
09EB8:  MOVWF  x6E
09EBA:  MOVLW  00
09EBC:  MOVLB  D
09EBE:  BTFSC  xB0.1
09EC0:  MOVLW  01
09EC2:  MOVLB  E
09EC4:  XORWF  x6E,W
09EC6:  SUBLW  01
09EC8:  BNZ   9ED2
09ECA:  MOVLB  D
09ECC:  BTFSS  xB4.1
09ECE:  BRA    9ED8
09ED0:  MOVLB  E
09ED2:  BTFSS  1C.5
09ED4:  BRA    9F6C
09ED6:  MOVLB  D
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
09ED8:  BTFSC  xCC.1
09EDA:  BRA    9EEE
09EDC:  MOVF   55,W
09EDE:  SUBLW  0F
09EE0:  BNZ   9EEE
09EE2:  BTFSC  xC4.1
09EE4:  BRA    9EEE
....................       {
....................             TimeBase1s = 100 ;            //reload again
09EE6:  MOVLW  64
09EE8:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
09EEA:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B10 = 1;
09EEE:  BSF    xCC.1
....................       if(Ack.B10 == 0)
09EF0:  BTFSC  xC4.1
09EF2:  BRA    9F22
....................       {
....................          if(FlashingFlag == 0)
09EF4:  BTFSC  1C.1
09EF6:  BRA    9EFC
....................             {
....................                Output.B10 = 0;           //Flash output1
09EF8:  BCF    xAC.1
....................             }
09EFA:  BRA    9EFE
....................             else
....................             {
....................                Output.B10 = 1;
09EFC:  BSF    xAC.1
....................             }
....................          if (~AutoTestFlag)
09EFE:  BTFSC  1C.4
09F00:  BRA    9F22
....................          {
....................             if(AlarmIndicator.B10 == 1){
09F02:  BTFSS  xC0.1
09F04:  BRA    9F22
....................                 if(OutputBoth.B10 == 0)        //Both output
09F06:  BTFSC  xBC.1
09F08:  BRA    9F14
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09F0A:  BSF    F89.4
09F0C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09F0E:  BSF    F89.3
09F10:  BCF    F92.3
....................                 }
09F12:  BRA    9F22
....................                 else
....................                 {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09F14:  BTFSS  xB8.1
09F16:  BRA    9F1E
09F18:  BSF    F89.4
09F1A:  BCF    F92.4
09F1C:  BRA    9F22
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09F1E:  BSF    F89.3
09F20:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09F22:  MOVLW  01
09F24:  MOVLB  E
09F26:  MOVWF  x68
....................       // SMS Sending   
....................       if((SendSMS.B10 ==0) && (functointest_f ==0) && (Ack.B10 ==0))
09F28:  MOVLB  D
09F2A:  BTFSC  xDC.1
09F2C:  BRA    9F6A
09F2E:  BTFSC  32.3
09F30:  BRA    9F6A
09F32:  BTFSC  xC4.1
09F34:  BRA    9F6A
....................       {
....................          SendSMS.B10 =1;
09F36:  BSF    xDC.1
....................           strcat(SMS_MassageSUM, SMS_Massage10);
09F38:  MOVLW  0D
09F3A:  MOVLB  E
09F3C:  MOVWF  x6E
09F3E:  MOVLW  03
09F40:  MOVWF  x6D
09F42:  MOVLW  0B
09F44:  MOVWF  x70
09F46:  MOVLW  A3
09F48:  MOVWF  x6F
09F4A:  MOVLB  0
09F4C:  CALL   6DF2
....................           strcat(SMS_MassageSUM, spacestring);
09F50:  MOVLW  0D
09F52:  MOVLB  E
09F54:  MOVWF  x6E
09F56:  MOVLW  03
09F58:  MOVWF  x6D
09F5A:  MOVLW  0D
09F5C:  MOVWF  x70
09F5E:  MOVLW  A3
09F60:  MOVWF  x6F
09F62:  MOVLB  0
09F64:  CALL   6DF2
09F68:  MOVLB  D
....................           /*
....................          fprintf(CH2,"AT+CMGS=\"");
....................          fprintf(CH2,sms_phonenumber);
....................          
....................          fprintf(CH2,"\"");
....................          putc('\n',CH2);
....................          delay_ms(50);
....................         
....................         fprintf(CH2,SMS_Massage10);   
....................         putc('\n',CH2);
....................         putc(26,CH2);
....................        */
....................       }
....................    }
09F6A:  BRA    A02A
....................    else if(FaultType.B10 == 0)
09F6C:  MOVLB  D
09F6E:  BTFSC  xB4.1
09F70:  BRA    A02A
....................    {
....................       In2.B10 = 0x00;
09F72:  BCF    xCC.1
....................       Ack.B10 = 0;
09F74:  BCF    xC4.1
....................       Output.B10 = 1;      //Off LED
09F76:  BSF    xAC.1
....................       SendSMS.B10 =0;// Clear SMS
09F78:  BCF    xDC.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)      //If Buzzer or Both
09F7A:  BTFSC  xB8.1
09F7C:  BRA    9F82
09F7E:  BTFSC  xBC.1
09F80:  BRA    9FA4
09F82:  MOVLB  E
09F84:  MOVF   x68,F
09F86:  BTFSC  FD8.2
09F88:  BRA    9F8E
09F8A:  MOVLB  D
09F8C:  BRA    9FA4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09F8E:  MOVLW  01
09F90:  MOVWF  x6D
09F92:  MOVLB  0
09F94:  CALL   6E5C
09F98:  DECFSZ 01,W
09F9A:  BRA    9F9E
09F9C:  BRA    9FA2
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09F9E:  BCF    F89.4
09FA0:  BCF    F92.4
09FA2:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)  //If Bell or Both
09FA4:  BTFSS  xB8.1
09FA6:  BRA    9FAC
09FA8:  BTFSC  xBC.1
09FAA:  BRA    9FD2
09FAC:  MOVLB  E
09FAE:  MOVF   x68,F
09FB0:  BTFSC  FD8.2
09FB2:  BRA    9FB8
09FB4:  MOVLB  D
09FB6:  BRA    9FD2
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09FB8:  MOVLW  02
09FBA:  MOVWF  x6D
09FBC:  MOVLB  0
09FBE:  CALL   6E5C
09FC2:  DECFSZ 01,W
09FC4:  BRA    9FC8
09FC6:  BRA    9FD0
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09FC8:  BCF    F89.3
09FCA:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09FCC:  BCF    F89.4
09FCE:  BCF    F92.4
09FD0:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09FD2:  BTFSC  xCB.0
09FD4:  BRA    A02A
09FD6:  BTFSC  xCB.1
09FD8:  BRA    A02A
09FDA:  BTFSC  xCB.2
09FDC:  BRA    A02A
09FDE:  BTFSC  xCB.3
09FE0:  BRA    A02A
09FE2:  BTFSC  xCB.4
09FE4:  BRA    A02A
09FE6:  BTFSC  xCB.5
09FE8:  BRA    A02A
09FEA:  BTFSC  xCB.6
09FEC:  BRA    A02A
09FEE:  BTFSC  xCB.7
09FF0:  BRA    A02A
09FF2:  BTFSC  xCC.0
09FF4:  BRA    A02A
09FF6:  BTFSC  xCC.1
09FF8:  BRA    A02A
09FFA:  BTFSC  xCC.2
09FFC:  BRA    A02A
09FFE:  BTFSC  xCC.3
0A000:  BRA    A02A
0A002:  BTFSC  xCC.4
0A004:  BRA    A02A
0A006:  BTFSC  xCC.5
0A008:  BRA    A02A
0A00A:  BTFSC  xCC.6
0A00C:  BRA    A02A
0A00E:  BTFSC  xCC.7
0A010:  BRA    A02A
0A012:  BTFSC  xCD.0
0A014:  BRA    A02A
0A016:  BTFSC  xCD.1
0A018:  BRA    A02A
0A01A:  BTFSC  xCD.2
0A01C:  BRA    A02A
0A01E:  BTFSC  xCD.3
0A020:  BRA    A02A
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A022:  BCF    F89.3
0A024:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A026:  BCF    F89.4
0A028:  BCF    F92.4
....................       }
....................    }
....................    
.................... //}
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A02A:  MOVLW  00
0A02C:  BTFSC  xA8.2
0A02E:  MOVLW  01
0A030:  MOVLB  E
0A032:  MOVWF  x6E
0A034:  MOVLW  00
0A036:  MOVLB  D
0A038:  BTFSC  xB0.2
0A03A:  MOVLW  01
0A03C:  MOVLB  E
0A03E:  XORWF  x6E,W
0A040:  SUBLW  01
0A042:  BNZ   A04C
0A044:  MOVLB  D
0A046:  BTFSS  xB4.2
0A048:  BRA    A052
0A04A:  MOVLB  E
0A04C:  BTFSS  1C.5
0A04E:  BRA    A0E6
0A050:  MOVLB  D
....................    {
....................       if(In2.B11 == 0 && AutoAck == 0x0F && Ack.B11 == 0)   //use auto acknowlegde
0A052:  BTFSC  xCC.2
0A054:  BRA    A068
0A056:  MOVF   55,W
0A058:  SUBLW  0F
0A05A:  BNZ   A068
0A05C:  BTFSC  xC4.2
0A05E:  BRA    A068
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A060:  MOVLW  64
0A062:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0A064:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B11 = 1;
0A068:  BSF    xCC.2
....................       if(Ack.B11 == 0)
0A06A:  BTFSC  xC4.2
0A06C:  BRA    A09C
....................       {
....................          if(FlashingFlag == 0)
0A06E:  BTFSC  1C.1
0A070:  BRA    A076
....................             {
....................                Output.B11 = 0;           //Flash output1
0A072:  BCF    xAC.2
....................             }
0A074:  BRA    A078
....................             else
....................             {
....................                Output.B11 = 1;
0A076:  BSF    xAC.2
....................             }
....................          if (~AutoTestFlag)
0A078:  BTFSC  1C.4
0A07A:  BRA    A09C
....................          {
....................             if(AlarmIndicator.B11 == 1){
0A07C:  BTFSS  xC0.2
0A07E:  BRA    A09C
....................                 if(OutputBoth.B11 == 0)        //Both output
0A080:  BTFSC  xBC.2
0A082:  BRA    A08E
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A084:  BSF    F89.4
0A086:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A088:  BSF    F89.3
0A08A:  BCF    F92.3
....................                 }
0A08C:  BRA    A09C
....................                 else
....................                 {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A08E:  BTFSS  xB8.2
0A090:  BRA    A098
0A092:  BSF    F89.4
0A094:  BCF    F92.4
0A096:  BRA    A09C
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A098:  BSF    F89.3
0A09A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A09C:  MOVLW  01
0A09E:  MOVLB  E
0A0A0:  MOVWF  x68
....................       // SMS Sending   
....................      if((SendSMS.B11 ==0) && (functointest_f ==0) && (Ack.B11 ==0))
0A0A2:  MOVLB  D
0A0A4:  BTFSC  xDC.2
0A0A6:  BRA    A0E4
0A0A8:  BTFSC  32.3
0A0AA:  BRA    A0E4
0A0AC:  BTFSC  xC4.2
0A0AE:  BRA    A0E4
....................      {
....................        SendSMS.B11 =1;
0A0B0:  BSF    xDC.2
....................           strcat(SMS_MassageSUM, SMS_Massage11);
0A0B2:  MOVLW  0D
0A0B4:  MOVLB  E
0A0B6:  MOVWF  x6E
0A0B8:  MOVLW  03
0A0BA:  MOVWF  x6D
0A0BC:  MOVLW  0B
0A0BE:  MOVWF  x70
0A0C0:  MOVLW  C3
0A0C2:  MOVWF  x6F
0A0C4:  MOVLB  0
0A0C6:  CALL   6DF2
....................           strcat(SMS_MassageSUM, spacestring);
0A0CA:  MOVLW  0D
0A0CC:  MOVLB  E
0A0CE:  MOVWF  x6E
0A0D0:  MOVLW  03
0A0D2:  MOVWF  x6D
0A0D4:  MOVLW  0D
0A0D6:  MOVWF  x70
0A0D8:  MOVLW  A3
0A0DA:  MOVWF  x6F
0A0DC:  MOVLB  0
0A0DE:  CALL   6DF2
0A0E2:  MOVLB  D
....................           /*
....................        fprintf(CH2,"AT+CMGS=\"");
....................        fprintf(CH2,sms_phonenumber);
....................        
....................        fprintf(CH2,"\"");
....................        putc('\n',CH2);
....................        delay_ms(50);
....................       
....................       fprintf(CH2,SMS_Massage11);   
....................       putc('\n',CH2);
....................       putc(26,CH2);
....................        */
....................      }
....................    }
0A0E4:  BRA    A1A4
....................    else if(FaultType.B11 == 0)
0A0E6:  MOVLB  D
0A0E8:  BTFSC  xB4.2
0A0EA:  BRA    A1A4
....................    {
....................       In2.B11 = 0x00;
0A0EC:  BCF    xCC.2
....................       Ack.B11 = 0;
0A0EE:  BCF    xC4.2
....................       Output.B11 = 1;      //Off LED
0A0F0:  BSF    xAC.2
....................       SendSMS.B11 =0;// Clear SMS
0A0F2:  BCF    xDC.2
.................... 
....................       if((OutputType.B11 == 1 || OutputBoth.B11 == 0)&& inputflag ==0)      //If Buzzer or Both
0A0F4:  BTFSC  xB8.2
0A0F6:  BRA    A0FC
0A0F8:  BTFSC  xBC.2
0A0FA:  BRA    A11E
0A0FC:  MOVLB  E
0A0FE:  MOVF   x68,F
0A100:  BTFSC  FD8.2
0A102:  BRA    A108
0A104:  MOVLB  D
0A106:  BRA    A11E
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A108:  MOVLW  01
0A10A:  MOVWF  x6D
0A10C:  MOVLB  0
0A10E:  CALL   6E5C
0A112:  DECFSZ 01,W
0A114:  BRA    A118
0A116:  BRA    A11C
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A118:  BCF    F89.4
0A11A:  BCF    F92.4
0A11C:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B11 == 0 || OutputBoth.B11 == 0)&& inputflag ==0)  //If Bell or Both
0A11E:  BTFSS  xB8.2
0A120:  BRA    A126
0A122:  BTFSC  xBC.2
0A124:  BRA    A14C
0A126:  MOVLB  E
0A128:  MOVF   x68,F
0A12A:  BTFSC  FD8.2
0A12C:  BRA    A132
0A12E:  MOVLB  D
0A130:  BRA    A14C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A132:  MOVLW  02
0A134:  MOVWF  x6D
0A136:  MOVLB  0
0A138:  CALL   6E5C
0A13C:  DECFSZ 01,W
0A13E:  BRA    A142
0A140:  BRA    A14A
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A142:  BCF    F89.3
0A144:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A146:  BCF    F89.4
0A148:  BCF    F92.4
0A14A:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A14C:  BTFSC  xCB.0
0A14E:  BRA    A1A4
0A150:  BTFSC  xCB.1
0A152:  BRA    A1A4
0A154:  BTFSC  xCB.2
0A156:  BRA    A1A4
0A158:  BTFSC  xCB.3
0A15A:  BRA    A1A4
0A15C:  BTFSC  xCB.4
0A15E:  BRA    A1A4
0A160:  BTFSC  xCB.5
0A162:  BRA    A1A4
0A164:  BTFSC  xCB.6
0A166:  BRA    A1A4
0A168:  BTFSC  xCB.7
0A16A:  BRA    A1A4
0A16C:  BTFSC  xCC.0
0A16E:  BRA    A1A4
0A170:  BTFSC  xCC.1
0A172:  BRA    A1A4
0A174:  BTFSC  xCC.2
0A176:  BRA    A1A4
0A178:  BTFSC  xCC.3
0A17A:  BRA    A1A4
0A17C:  BTFSC  xCC.4
0A17E:  BRA    A1A4
0A180:  BTFSC  xCC.5
0A182:  BRA    A1A4
0A184:  BTFSC  xCC.6
0A186:  BRA    A1A4
0A188:  BTFSC  xCC.7
0A18A:  BRA    A1A4
0A18C:  BTFSC  xCD.0
0A18E:  BRA    A1A4
0A190:  BTFSC  xCD.1
0A192:  BRA    A1A4
0A194:  BTFSC  xCD.2
0A196:  BRA    A1A4
0A198:  BTFSC  xCD.3
0A19A:  BRA    A1A4
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A19C:  BCF    F89.3
0A19E:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A1A0:  BCF    F89.4
0A1A2:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A1A4:  MOVLW  00
0A1A6:  BTFSC  xA8.3
0A1A8:  MOVLW  01
0A1AA:  MOVLB  E
0A1AC:  MOVWF  x6E
0A1AE:  MOVLW  00
0A1B0:  MOVLB  D
0A1B2:  BTFSC  xB0.3
0A1B4:  MOVLW  01
0A1B6:  MOVLB  E
0A1B8:  XORWF  x6E,W
0A1BA:  SUBLW  01
0A1BC:  BNZ   A1C6
0A1BE:  MOVLB  D
0A1C0:  BTFSS  xB4.3
0A1C2:  BRA    A1CC
0A1C4:  MOVLB  E
0A1C6:  BTFSS  1C.5
0A1C8:  BRA    A260
0A1CA:  MOVLB  D
....................    {
....................       if(In2.B12 == 0 && AutoAck == 0x0F && Ack.B12 == 0)   //use auto acknowlegde
0A1CC:  BTFSC  xCC.3
0A1CE:  BRA    A1E2
0A1D0:  MOVF   55,W
0A1D2:  SUBLW  0F
0A1D4:  BNZ   A1E2
0A1D6:  BTFSC  xC4.3
0A1D8:  BRA    A1E2
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A1DA:  MOVLW  64
0A1DC:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0A1DE:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B12 = 1;
0A1E2:  BSF    xCC.3
....................       if(Ack.B12 == 0)
0A1E4:  BTFSC  xC4.3
0A1E6:  BRA    A216
....................       {
....................          if(FlashingFlag == 0)
0A1E8:  BTFSC  1C.1
0A1EA:  BRA    A1F0
....................             {
....................                Output.B12 = 0;           //Flash output1
0A1EC:  BCF    xAC.3
....................             }
0A1EE:  BRA    A1F2
....................             else
....................             {
....................                Output.B12 = 1;
0A1F0:  BSF    xAC.3
....................             }
....................          if (~AutoTestFlag)
0A1F2:  BTFSC  1C.4
0A1F4:  BRA    A216
....................          {
....................             if(AlarmIndicator.B12 == 1){
0A1F6:  BTFSS  xC0.3
0A1F8:  BRA    A216
....................                 if(OutputBoth.B12 == 0)        //Both output
0A1FA:  BTFSC  xBC.3
0A1FC:  BRA    A208
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A1FE:  BSF    F89.4
0A200:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A202:  BSF    F89.3
0A204:  BCF    F92.3
....................                 }
0A206:  BRA    A216
....................                 else
....................                 {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A208:  BTFSS  xB8.3
0A20A:  BRA    A212
0A20C:  BSF    F89.4
0A20E:  BCF    F92.4
0A210:  BRA    A216
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A212:  BSF    F89.3
0A214:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A216:  MOVLW  01
0A218:  MOVLB  E
0A21A:  MOVWF  x68
....................          // SMS Sending   
....................       if((SendSMS.B12 ==0) && (functointest_f ==0) && (Ack.B12 ==0))
0A21C:  MOVLB  D
0A21E:  BTFSC  xDC.3
0A220:  BRA    A25E
0A222:  BTFSC  32.3
0A224:  BRA    A25E
0A226:  BTFSC  xC4.3
0A228:  BRA    A25E
....................       {
....................         SendSMS.B12 =1;
0A22A:  BSF    xDC.3
....................           strcat(SMS_MassageSUM, SMS_Massage12);
0A22C:  MOVLW  0D
0A22E:  MOVLB  E
0A230:  MOVWF  x6E
0A232:  MOVLW  03
0A234:  MOVWF  x6D
0A236:  MOVLW  0B
0A238:  MOVWF  x70
0A23A:  MOVLW  E3
0A23C:  MOVWF  x6F
0A23E:  MOVLB  0
0A240:  CALL   6DF2
....................           strcat(SMS_MassageSUM, spacestring);
0A244:  MOVLW  0D
0A246:  MOVLB  E
0A248:  MOVWF  x6E
0A24A:  MOVLW  03
0A24C:  MOVWF  x6D
0A24E:  MOVLW  0D
0A250:  MOVWF  x70
0A252:  MOVLW  A3
0A254:  MOVWF  x6F
0A256:  MOVLB  0
0A258:  CALL   6DF2
0A25C:  MOVLB  D
....................           /*
....................         fprintf(CH2,"AT+CMGS=\"");
....................         fprintf(CH2,sms_phonenumber);
....................         
....................         fprintf(CH2,"\"");
....................         putc('\n',CH2);
....................         delay_ms(50);
....................        
....................        fprintf(CH2,SMS_Massage12);   
....................        putc('\n',CH2);
....................        putc(26,CH2);
....................        */
....................       }
.................... 
....................    }
0A25E:  BRA    A31E
....................    else if(FaultType.B12 == 0)
0A260:  MOVLB  D
0A262:  BTFSC  xB4.3
0A264:  BRA    A31E
....................    {
....................       In2.B12 = 0x00;
0A266:  BCF    xCC.3
....................       Ack.B12 = 0;
0A268:  BCF    xC4.3
....................       Output.B12 = 1;      //Off LED
0A26A:  BSF    xAC.3
....................       SendSMS.B12 =0;// Clear SMS
0A26C:  BCF    xDC.3
.................... 
....................       if((OutputType.B12 == 1 || OutputBoth.B12 == 0)&& inputflag ==0)      //If Buzzer or Both
0A26E:  BTFSC  xB8.3
0A270:  BRA    A276
0A272:  BTFSC  xBC.3
0A274:  BRA    A298
0A276:  MOVLB  E
0A278:  MOVF   x68,F
0A27A:  BTFSC  FD8.2
0A27C:  BRA    A282
0A27E:  MOVLB  D
0A280:  BRA    A298
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A282:  MOVLW  01
0A284:  MOVWF  x6D
0A286:  MOVLB  0
0A288:  CALL   6E5C
0A28C:  DECFSZ 01,W
0A28E:  BRA    A292
0A290:  BRA    A296
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A292:  BCF    F89.4
0A294:  BCF    F92.4
0A296:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B12 == 0 || OutputBoth.B12 == 0)&& inputflag ==0)  //If Bell or Both
0A298:  BTFSS  xB8.3
0A29A:  BRA    A2A0
0A29C:  BTFSC  xBC.3
0A29E:  BRA    A2C6
0A2A0:  MOVLB  E
0A2A2:  MOVF   x68,F
0A2A4:  BTFSC  FD8.2
0A2A6:  BRA    A2AC
0A2A8:  MOVLB  D
0A2AA:  BRA    A2C6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A2AC:  MOVLW  02
0A2AE:  MOVWF  x6D
0A2B0:  MOVLB  0
0A2B2:  CALL   6E5C
0A2B6:  DECFSZ 01,W
0A2B8:  BRA    A2BC
0A2BA:  BRA    A2C4
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A2BC:  BCF    F89.3
0A2BE:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A2C0:  BCF    F89.4
0A2C2:  BCF    F92.4
0A2C4:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A2C6:  BTFSC  xCB.0
0A2C8:  BRA    A31E
0A2CA:  BTFSC  xCB.1
0A2CC:  BRA    A31E
0A2CE:  BTFSC  xCB.2
0A2D0:  BRA    A31E
0A2D2:  BTFSC  xCB.3
0A2D4:  BRA    A31E
0A2D6:  BTFSC  xCB.4
0A2D8:  BRA    A31E
0A2DA:  BTFSC  xCB.5
0A2DC:  BRA    A31E
0A2DE:  BTFSC  xCB.6
0A2E0:  BRA    A31E
0A2E2:  BTFSC  xCB.7
0A2E4:  BRA    A31E
0A2E6:  BTFSC  xCC.0
0A2E8:  BRA    A31E
0A2EA:  BTFSC  xCC.1
0A2EC:  BRA    A31E
0A2EE:  BTFSC  xCC.2
0A2F0:  BRA    A31E
0A2F2:  BTFSC  xCC.3
0A2F4:  BRA    A31E
0A2F6:  BTFSC  xCC.4
0A2F8:  BRA    A31E
0A2FA:  BTFSC  xCC.5
0A2FC:  BRA    A31E
0A2FE:  BTFSC  xCC.6
0A300:  BRA    A31E
0A302:  BTFSC  xCC.7
0A304:  BRA    A31E
0A306:  BTFSC  xCD.0
0A308:  BRA    A31E
0A30A:  BTFSC  xCD.1
0A30C:  BRA    A31E
0A30E:  BTFSC  xCD.2
0A310:  BRA    A31E
0A312:  BTFSC  xCD.3
0A314:  BRA    A31E
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A316:  BCF    F89.3
0A318:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A31A:  BCF    F89.4
0A31C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A31E:  MOVLW  00
0A320:  BTFSC  xA8.4
0A322:  MOVLW  01
0A324:  MOVLB  E
0A326:  MOVWF  x6E
0A328:  MOVLW  00
0A32A:  MOVLB  D
0A32C:  BTFSC  xB0.4
0A32E:  MOVLW  01
0A330:  MOVLB  E
0A332:  XORWF  x6E,W
0A334:  SUBLW  01
0A336:  BNZ   A340
0A338:  MOVLB  D
0A33A:  BTFSS  xB4.4
0A33C:  BRA    A346
0A33E:  MOVLB  E
0A340:  BTFSS  1C.5
0A342:  BRA    A3DA
0A344:  MOVLB  D
....................    {
....................       if(In2.B13 == 0 && AutoAck == 0x0F && Ack.B13 == 0)   //use auto acknowlegde
0A346:  BTFSC  xCC.4
0A348:  BRA    A35C
0A34A:  MOVF   55,W
0A34C:  SUBLW  0F
0A34E:  BNZ   A35C
0A350:  BTFSC  xC4.4
0A352:  BRA    A35C
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A354:  MOVLW  64
0A356:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0A358:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B13 = 1;
0A35C:  BSF    xCC.4
....................       if(Ack.B13 == 0)
0A35E:  BTFSC  xC4.4
0A360:  BRA    A390
....................       {
....................          if(FlashingFlag == 0)
0A362:  BTFSC  1C.1
0A364:  BRA    A36A
....................             {
....................                Output.B13 = 0;           //Flash output1
0A366:  BCF    xAC.4
....................             }
0A368:  BRA    A36C
....................             else
....................             {
....................                Output.B13 = 1;
0A36A:  BSF    xAC.4
....................             }
....................          if (~AutoTestFlag)
0A36C:  BTFSC  1C.4
0A36E:  BRA    A390
....................          {
....................             if(AlarmIndicator.B13 == 1){
0A370:  BTFSS  xC0.4
0A372:  BRA    A390
....................                 if(OutputBoth.B13 == 0)        //Both output
0A374:  BTFSC  xBC.4
0A376:  BRA    A382
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A378:  BSF    F89.4
0A37A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A37C:  BSF    F89.3
0A37E:  BCF    F92.3
....................                 }
0A380:  BRA    A390
....................                 else
....................                 {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A382:  BTFSS  xB8.4
0A384:  BRA    A38C
0A386:  BSF    F89.4
0A388:  BCF    F92.4
0A38A:  BRA    A390
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A38C:  BSF    F89.3
0A38E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A390:  MOVLW  01
0A392:  MOVLB  E
0A394:  MOVWF  x68
....................       // SMS Sending   
....................         if((SendSMS.B13 ==0) && (functointest_f ==0) && (Ack.B13 ==0))
0A396:  MOVLB  D
0A398:  BTFSC  xDC.4
0A39A:  BRA    A3D8
0A39C:  BTFSC  32.3
0A39E:  BRA    A3D8
0A3A0:  BTFSC  xC4.4
0A3A2:  BRA    A3D8
....................         {
....................           SendSMS.B13 =1;
0A3A4:  BSF    xDC.4
....................           strcat(SMS_MassageSUM, SMS_Massage13);
0A3A6:  MOVLW  0D
0A3A8:  MOVLB  E
0A3AA:  MOVWF  x6E
0A3AC:  MOVLW  03
0A3AE:  MOVWF  x6D
0A3B0:  MOVLW  0C
0A3B2:  MOVWF  x70
0A3B4:  MOVLW  03
0A3B6:  MOVWF  x6F
0A3B8:  MOVLB  0
0A3BA:  CALL   6DF2
....................           strcat(SMS_MassageSUM, spacestring);
0A3BE:  MOVLW  0D
0A3C0:  MOVLB  E
0A3C2:  MOVWF  x6E
0A3C4:  MOVLW  03
0A3C6:  MOVWF  x6D
0A3C8:  MOVLW  0D
0A3CA:  MOVWF  x70
0A3CC:  MOVLW  A3
0A3CE:  MOVWF  x6F
0A3D0:  MOVLB  0
0A3D2:  CALL   6DF2
0A3D6:  MOVLB  D
....................           /*
....................           fprintf(CH2,"AT+CMGS=\"");
....................           fprintf(CH2,sms_phonenumber);
....................           
....................           fprintf(CH2,"\"");
....................           putc('\n',CH2);
....................           delay_ms(50);
....................          
....................          fprintf(CH2,SMS_Massage13);   
....................          putc('\n',CH2);
....................          putc(26,CH2);
....................        */
....................         }
....................    }
0A3D8:  BRA    A498
....................    else if(FaultType.B13 == 0)
0A3DA:  MOVLB  D
0A3DC:  BTFSC  xB4.4
0A3DE:  BRA    A498
....................    {
....................       In2.B13 = 0x00;
0A3E0:  BCF    xCC.4
....................       Ack.B13 = 0;
0A3E2:  BCF    xC4.4
....................       Output.B13 = 1;      //Off LED
0A3E4:  BSF    xAC.4
....................       SendSMS.B13 =0;// Clear SMS
0A3E6:  BCF    xDC.4
.................... 
....................       if((OutputType.B13 == 1 || OutputBoth.B13 == 0)&& inputflag ==0)      //If Buzzer or Both
0A3E8:  BTFSC  xB8.4
0A3EA:  BRA    A3F0
0A3EC:  BTFSC  xBC.4
0A3EE:  BRA    A412
0A3F0:  MOVLB  E
0A3F2:  MOVF   x68,F
0A3F4:  BTFSC  FD8.2
0A3F6:  BRA    A3FC
0A3F8:  MOVLB  D
0A3FA:  BRA    A412
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A3FC:  MOVLW  01
0A3FE:  MOVWF  x6D
0A400:  MOVLB  0
0A402:  CALL   6E5C
0A406:  DECFSZ 01,W
0A408:  BRA    A40C
0A40A:  BRA    A410
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A40C:  BCF    F89.4
0A40E:  BCF    F92.4
0A410:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B13 == 0 || OutputBoth.B13 == 0)&& inputflag ==0)  //If Bell or Both
0A412:  BTFSS  xB8.4
0A414:  BRA    A41A
0A416:  BTFSC  xBC.4
0A418:  BRA    A440
0A41A:  MOVLB  E
0A41C:  MOVF   x68,F
0A41E:  BTFSC  FD8.2
0A420:  BRA    A426
0A422:  MOVLB  D
0A424:  BRA    A440
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A426:  MOVLW  02
0A428:  MOVWF  x6D
0A42A:  MOVLB  0
0A42C:  CALL   6E5C
0A430:  DECFSZ 01,W
0A432:  BRA    A436
0A434:  BRA    A43E
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A436:  BCF    F89.3
0A438:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A43A:  BCF    F89.4
0A43C:  BCF    F92.4
0A43E:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A440:  BTFSC  xCB.0
0A442:  BRA    A498
0A444:  BTFSC  xCB.1
0A446:  BRA    A498
0A448:  BTFSC  xCB.2
0A44A:  BRA    A498
0A44C:  BTFSC  xCB.3
0A44E:  BRA    A498
0A450:  BTFSC  xCB.4
0A452:  BRA    A498
0A454:  BTFSC  xCB.5
0A456:  BRA    A498
0A458:  BTFSC  xCB.6
0A45A:  BRA    A498
0A45C:  BTFSC  xCB.7
0A45E:  BRA    A498
0A460:  BTFSC  xCC.0
0A462:  BRA    A498
0A464:  BTFSC  xCC.1
0A466:  BRA    A498
0A468:  BTFSC  xCC.2
0A46A:  BRA    A498
0A46C:  BTFSC  xCC.3
0A46E:  BRA    A498
0A470:  BTFSC  xCC.4
0A472:  BRA    A498
0A474:  BTFSC  xCC.5
0A476:  BRA    A498
0A478:  BTFSC  xCC.6
0A47A:  BRA    A498
0A47C:  BTFSC  xCC.7
0A47E:  BRA    A498
0A480:  BTFSC  xCD.0
0A482:  BRA    A498
0A484:  BTFSC  xCD.1
0A486:  BRA    A498
0A488:  BTFSC  xCD.2
0A48A:  BRA    A498
0A48C:  BTFSC  xCD.3
0A48E:  BRA    A498
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A490:  BCF    F89.3
0A492:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A494:  BCF    F89.4
0A496:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A498:  MOVLW  00
0A49A:  BTFSC  xA8.5
0A49C:  MOVLW  01
0A49E:  MOVLB  E
0A4A0:  MOVWF  x6E
0A4A2:  MOVLW  00
0A4A4:  MOVLB  D
0A4A6:  BTFSC  xB0.5
0A4A8:  MOVLW  01
0A4AA:  MOVLB  E
0A4AC:  XORWF  x6E,W
0A4AE:  SUBLW  01
0A4B0:  BNZ   A4BA
0A4B2:  MOVLB  D
0A4B4:  BTFSS  xB4.5
0A4B6:  BRA    A4C0
0A4B8:  MOVLB  E
0A4BA:  BTFSS  1C.5
0A4BC:  BRA    A554
0A4BE:  MOVLB  D
....................    {
....................       if(In2.B14 == 0 && AutoAck == 0x0F && Ack.B14 == 0)   //use auto acknowlegde
0A4C0:  BTFSC  xCC.5
0A4C2:  BRA    A4D6
0A4C4:  MOVF   55,W
0A4C6:  SUBLW  0F
0A4C8:  BNZ   A4D6
0A4CA:  BTFSC  xC4.5
0A4CC:  BRA    A4D6
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A4CE:  MOVLW  64
0A4D0:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0A4D2:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B14 = 1;
0A4D6:  BSF    xCC.5
....................       if(Ack.B14 == 0)
0A4D8:  BTFSC  xC4.5
0A4DA:  BRA    A50A
....................       {
....................          if(FlashingFlag == 0)
0A4DC:  BTFSC  1C.1
0A4DE:  BRA    A4E4
....................             {
....................                Output.B14 = 0;           //Flash output1
0A4E0:  BCF    xAC.5
....................             }
0A4E2:  BRA    A4E6
....................             else
....................             {
....................                Output.B14 = 1;
0A4E4:  BSF    xAC.5
....................             }
....................          if (~AutoTestFlag)
0A4E6:  BTFSC  1C.4
0A4E8:  BRA    A50A
....................          {
....................             if(AlarmIndicator.B14 == 1){
0A4EA:  BTFSS  xC0.5
0A4EC:  BRA    A50A
....................                 if(OutputBoth.B14 == 0)        //Both output
0A4EE:  BTFSC  xBC.5
0A4F0:  BRA    A4FC
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A4F2:  BSF    F89.4
0A4F4:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A4F6:  BSF    F89.3
0A4F8:  BCF    F92.3
....................                 }
0A4FA:  BRA    A50A
....................                 else
....................                 {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A4FC:  BTFSS  xB8.5
0A4FE:  BRA    A506
0A500:  BSF    F89.4
0A502:  BCF    F92.4
0A504:  BRA    A50A
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A506:  BSF    F89.3
0A508:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A50A:  MOVLW  01
0A50C:  MOVLB  E
0A50E:  MOVWF  x68
....................       // SMS Sending   
....................         if((SendSMS.B14 ==0) && (functointest_f ==0) && (Ack.B14 ==0))
0A510:  MOVLB  D
0A512:  BTFSC  xDC.5
0A514:  BRA    A552
0A516:  BTFSC  32.3
0A518:  BRA    A552
0A51A:  BTFSC  xC4.5
0A51C:  BRA    A552
....................         {
....................           SendSMS.B14 =1;
0A51E:  BSF    xDC.5
....................           strcat(SMS_MassageSUM, SMS_Massage14);
0A520:  MOVLW  0D
0A522:  MOVLB  E
0A524:  MOVWF  x6E
0A526:  MOVLW  03
0A528:  MOVWF  x6D
0A52A:  MOVLW  0C
0A52C:  MOVWF  x70
0A52E:  MOVLW  23
0A530:  MOVWF  x6F
0A532:  MOVLB  0
0A534:  CALL   6DF2
....................           strcat(SMS_MassageSUM, spacestring);
0A538:  MOVLW  0D
0A53A:  MOVLB  E
0A53C:  MOVWF  x6E
0A53E:  MOVLW  03
0A540:  MOVWF  x6D
0A542:  MOVLW  0D
0A544:  MOVWF  x70
0A546:  MOVLW  A3
0A548:  MOVWF  x6F
0A54A:  MOVLB  0
0A54C:  CALL   6DF2
0A550:  MOVLB  D
....................           /*
....................           fprintf(CH2,"AT+CMGS=\"");
....................           fprintf(CH2,sms_phonenumber);
....................           
....................           fprintf(CH2,"\"");
....................           putc('\n',CH2);
....................           delay_ms(50);
....................          
....................          fprintf(CH2,SMS_Massage14);   
....................          putc('\n',CH2);
....................          putc(26,CH2);
....................        */
....................         }
....................    }
0A552:  BRA    A612
....................    else if(FaultType.B14 == 0)
0A554:  MOVLB  D
0A556:  BTFSC  xB4.5
0A558:  BRA    A612
....................    {
....................       In2.B14 = 0x00;
0A55A:  BCF    xCC.5
....................       Ack.B14 = 0;
0A55C:  BCF    xC4.5
....................       Output.B14 = 1;      //Off LED
0A55E:  BSF    xAC.5
....................       SendSMS.B14 =0;// Clear SMS
0A560:  BCF    xDC.5
.................... 
....................       if((OutputType.B14 == 1 || OutputBoth.B14 == 0)&& inputflag ==0)      //If Buzzer or Both
0A562:  BTFSC  xB8.5
0A564:  BRA    A56A
0A566:  BTFSC  xBC.5
0A568:  BRA    A58C
0A56A:  MOVLB  E
0A56C:  MOVF   x68,F
0A56E:  BTFSC  FD8.2
0A570:  BRA    A576
0A572:  MOVLB  D
0A574:  BRA    A58C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A576:  MOVLW  01
0A578:  MOVWF  x6D
0A57A:  MOVLB  0
0A57C:  CALL   6E5C
0A580:  DECFSZ 01,W
0A582:  BRA    A586
0A584:  BRA    A58A
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A586:  BCF    F89.4
0A588:  BCF    F92.4
0A58A:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B14 == 0 || OutputBoth.B14 == 0)&& inputflag ==0)  //If Bell or Both
0A58C:  BTFSS  xB8.5
0A58E:  BRA    A594
0A590:  BTFSC  xBC.5
0A592:  BRA    A5BA
0A594:  MOVLB  E
0A596:  MOVF   x68,F
0A598:  BTFSC  FD8.2
0A59A:  BRA    A5A0
0A59C:  MOVLB  D
0A59E:  BRA    A5BA
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A5A0:  MOVLW  02
0A5A2:  MOVWF  x6D
0A5A4:  MOVLB  0
0A5A6:  CALL   6E5C
0A5AA:  DECFSZ 01,W
0A5AC:  BRA    A5B0
0A5AE:  BRA    A5B8
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A5B0:  BCF    F89.3
0A5B2:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A5B4:  BCF    F89.4
0A5B6:  BCF    F92.4
0A5B8:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A5BA:  BTFSC  xCB.0
0A5BC:  BRA    A612
0A5BE:  BTFSC  xCB.1
0A5C0:  BRA    A612
0A5C2:  BTFSC  xCB.2
0A5C4:  BRA    A612
0A5C6:  BTFSC  xCB.3
0A5C8:  BRA    A612
0A5CA:  BTFSC  xCB.4
0A5CC:  BRA    A612
0A5CE:  BTFSC  xCB.5
0A5D0:  BRA    A612
0A5D2:  BTFSC  xCB.6
0A5D4:  BRA    A612
0A5D6:  BTFSC  xCB.7
0A5D8:  BRA    A612
0A5DA:  BTFSC  xCC.0
0A5DC:  BRA    A612
0A5DE:  BTFSC  xCC.1
0A5E0:  BRA    A612
0A5E2:  BTFSC  xCC.2
0A5E4:  BRA    A612
0A5E6:  BTFSC  xCC.3
0A5E8:  BRA    A612
0A5EA:  BTFSC  xCC.4
0A5EC:  BRA    A612
0A5EE:  BTFSC  xCC.5
0A5F0:  BRA    A612
0A5F2:  BTFSC  xCC.6
0A5F4:  BRA    A612
0A5F6:  BTFSC  xCC.7
0A5F8:  BRA    A612
0A5FA:  BTFSC  xCD.0
0A5FC:  BRA    A612
0A5FE:  BTFSC  xCD.1
0A600:  BRA    A612
0A602:  BTFSC  xCD.2
0A604:  BRA    A612
0A606:  BTFSC  xCD.3
0A608:  BRA    A612
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A60A:  BCF    F89.3
0A60C:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A60E:  BCF    F89.4
0A610:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A612:  MOVLW  00
0A614:  BTFSC  xA8.6
0A616:  MOVLW  01
0A618:  MOVLB  E
0A61A:  MOVWF  x6E
0A61C:  MOVLW  00
0A61E:  MOVLB  D
0A620:  BTFSC  xB0.6
0A622:  MOVLW  01
0A624:  MOVLB  E
0A626:  XORWF  x6E,W
0A628:  SUBLW  01
0A62A:  BNZ   A634
0A62C:  MOVLB  D
0A62E:  BTFSS  xB4.6
0A630:  BRA    A63A
0A632:  MOVLB  E
0A634:  BTFSS  1C.5
0A636:  BRA    A6CE
0A638:  MOVLB  D
....................    {
....................       if(In2.B15 == 0 && AutoAck == 0x0F && Ack.B15 == 0)   //use auto acknowlegde
0A63A:  BTFSC  xCC.6
0A63C:  BRA    A650
0A63E:  MOVF   55,W
0A640:  SUBLW  0F
0A642:  BNZ   A650
0A644:  BTFSC  xC4.6
0A646:  BRA    A650
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A648:  MOVLW  64
0A64A:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0A64C:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B15 = 1;
0A650:  BSF    xCC.6
....................       if(Ack.B15 == 0)
0A652:  BTFSC  xC4.6
0A654:  BRA    A684
....................       {
....................          if(FlashingFlag == 0)
0A656:  BTFSC  1C.1
0A658:  BRA    A65E
....................             {
....................                Output.B15 = 0;           //Flash output1
0A65A:  BCF    xAC.6
....................             }
0A65C:  BRA    A660
....................             else
....................             {
....................                Output.B15 = 1;
0A65E:  BSF    xAC.6
....................             }
....................          if (~AutoTestFlag)
0A660:  BTFSC  1C.4
0A662:  BRA    A684
....................          {
....................             if(AlarmIndicator.B15 == 1){
0A664:  BTFSS  xC0.6
0A666:  BRA    A684
....................                 if(OutputBoth.B15 == 0)        //Both output
0A668:  BTFSC  xBC.6
0A66A:  BRA    A676
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A66C:  BSF    F89.4
0A66E:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A670:  BSF    F89.3
0A672:  BCF    F92.3
....................                 }
0A674:  BRA    A684
....................                 else
....................                 {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A676:  BTFSS  xB8.6
0A678:  BRA    A680
0A67A:  BSF    F89.4
0A67C:  BCF    F92.4
0A67E:  BRA    A684
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A680:  BSF    F89.3
0A682:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A684:  MOVLW  01
0A686:  MOVLB  E
0A688:  MOVWF  x68
....................       // SMS Sending   
....................         if((SendSMS.B15 ==0) && (functointest_f ==0) && (Ack.B15 ==0))
0A68A:  MOVLB  D
0A68C:  BTFSC  xDC.6
0A68E:  BRA    A6CC
0A690:  BTFSC  32.3
0A692:  BRA    A6CC
0A694:  BTFSC  xC4.6
0A696:  BRA    A6CC
....................         {
....................           SendSMS.B15 =1;
0A698:  BSF    xDC.6
....................           strcat(SMS_MassageSUM, SMS_Massage15);
0A69A:  MOVLW  0D
0A69C:  MOVLB  E
0A69E:  MOVWF  x6E
0A6A0:  MOVLW  03
0A6A2:  MOVWF  x6D
0A6A4:  MOVLW  0C
0A6A6:  MOVWF  x70
0A6A8:  MOVLW  43
0A6AA:  MOVWF  x6F
0A6AC:  MOVLB  0
0A6AE:  CALL   6DF2
....................           strcat(SMS_MassageSUM, spacestring);
0A6B2:  MOVLW  0D
0A6B4:  MOVLB  E
0A6B6:  MOVWF  x6E
0A6B8:  MOVLW  03
0A6BA:  MOVWF  x6D
0A6BC:  MOVLW  0D
0A6BE:  MOVWF  x70
0A6C0:  MOVLW  A3
0A6C2:  MOVWF  x6F
0A6C4:  MOVLB  0
0A6C6:  CALL   6DF2
0A6CA:  MOVLB  D
....................           /*
....................           fprintf(CH2,"AT+CMGS=\"");
....................           fprintf(CH2,sms_phonenumber);
....................           
....................           fprintf(CH2,"\"");
....................           putc('\n',CH2);
....................           delay_ms(50);
....................          
....................          fprintf(CH2,SMS_Massage15);   
....................          putc('\n',CH2);
....................          putc(26,CH2);
....................        */
....................         }
....................    }
0A6CC:  BRA    A78C
....................    else if(FaultType.B15 == 0)
0A6CE:  MOVLB  D
0A6D0:  BTFSC  xB4.6
0A6D2:  BRA    A78C
....................    {
....................       In2.B15 = 0x00;
0A6D4:  BCF    xCC.6
....................       Ack.B15 = 0;
0A6D6:  BCF    xC4.6
....................       Output.B15 = 1;      //Off LED
0A6D8:  BSF    xAC.6
....................       SendSMS.B15 =0;// Clear SMS
0A6DA:  BCF    xDC.6
.................... 
....................       if((OutputType.B15 == 1 || OutputBoth.B15 == 0)&& inputflag ==0)      //If Buzzer or Both
0A6DC:  BTFSC  xB8.6
0A6DE:  BRA    A6E4
0A6E0:  BTFSC  xBC.6
0A6E2:  BRA    A706
0A6E4:  MOVLB  E
0A6E6:  MOVF   x68,F
0A6E8:  BTFSC  FD8.2
0A6EA:  BRA    A6F0
0A6EC:  MOVLB  D
0A6EE:  BRA    A706
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A6F0:  MOVLW  01
0A6F2:  MOVWF  x6D
0A6F4:  MOVLB  0
0A6F6:  CALL   6E5C
0A6FA:  DECFSZ 01,W
0A6FC:  BRA    A700
0A6FE:  BRA    A704
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A700:  BCF    F89.4
0A702:  BCF    F92.4
0A704:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B15 == 0 || OutputBoth.B15 == 0)&& inputflag ==0)  //If Bell or Both
0A706:  BTFSS  xB8.6
0A708:  BRA    A70E
0A70A:  BTFSC  xBC.6
0A70C:  BRA    A734
0A70E:  MOVLB  E
0A710:  MOVF   x68,F
0A712:  BTFSC  FD8.2
0A714:  BRA    A71A
0A716:  MOVLB  D
0A718:  BRA    A734
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A71A:  MOVLW  02
0A71C:  MOVWF  x6D
0A71E:  MOVLB  0
0A720:  CALL   6E5C
0A724:  DECFSZ 01,W
0A726:  BRA    A72A
0A728:  BRA    A732
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A72A:  BCF    F89.3
0A72C:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A72E:  BCF    F89.4
0A730:  BCF    F92.4
0A732:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A734:  BTFSC  xCB.0
0A736:  BRA    A78C
0A738:  BTFSC  xCB.1
0A73A:  BRA    A78C
0A73C:  BTFSC  xCB.2
0A73E:  BRA    A78C
0A740:  BTFSC  xCB.3
0A742:  BRA    A78C
0A744:  BTFSC  xCB.4
0A746:  BRA    A78C
0A748:  BTFSC  xCB.5
0A74A:  BRA    A78C
0A74C:  BTFSC  xCB.6
0A74E:  BRA    A78C
0A750:  BTFSC  xCB.7
0A752:  BRA    A78C
0A754:  BTFSC  xCC.0
0A756:  BRA    A78C
0A758:  BTFSC  xCC.1
0A75A:  BRA    A78C
0A75C:  BTFSC  xCC.2
0A75E:  BRA    A78C
0A760:  BTFSC  xCC.3
0A762:  BRA    A78C
0A764:  BTFSC  xCC.4
0A766:  BRA    A78C
0A768:  BTFSC  xCC.5
0A76A:  BRA    A78C
0A76C:  BTFSC  xCC.6
0A76E:  BRA    A78C
0A770:  BTFSC  xCC.7
0A772:  BRA    A78C
0A774:  BTFSC  xCD.0
0A776:  BRA    A78C
0A778:  BTFSC  xCD.1
0A77A:  BRA    A78C
0A77C:  BTFSC  xCD.2
0A77E:  BRA    A78C
0A780:  BTFSC  xCD.3
0A782:  BRA    A78C
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A784:  BCF    F89.3
0A786:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A788:  BCF    F89.4
0A78A:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A78C:  MOVLW  00
0A78E:  BTFSC  xA8.7
0A790:  MOVLW  01
0A792:  MOVLB  E
0A794:  MOVWF  x6E
0A796:  MOVLW  00
0A798:  MOVLB  D
0A79A:  BTFSC  xB0.7
0A79C:  MOVLW  01
0A79E:  MOVLB  E
0A7A0:  XORWF  x6E,W
0A7A2:  SUBLW  01
0A7A4:  BNZ   A7AE
0A7A6:  MOVLB  D
0A7A8:  BTFSS  xB4.7
0A7AA:  BRA    A7B4
0A7AC:  MOVLB  E
0A7AE:  BTFSS  1C.5
0A7B0:  BRA    A848
0A7B2:  MOVLB  D
....................    {
....................       if(In2.B16 == 0 && AutoAck == 0x0F && Ack.B16 == 0)   //use auto acknowlegde
0A7B4:  BTFSC  xCC.7
0A7B6:  BRA    A7CA
0A7B8:  MOVF   55,W
0A7BA:  SUBLW  0F
0A7BC:  BNZ   A7CA
0A7BE:  BTFSC  xC4.7
0A7C0:  BRA    A7CA
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A7C2:  MOVLW  64
0A7C4:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0A7C6:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B16 = 1;
0A7CA:  BSF    xCC.7
....................       if(Ack.B16 == 0)
0A7CC:  BTFSC  xC4.7
0A7CE:  BRA    A7FE
....................       {
....................          if(FlashingFlag == 0)
0A7D0:  BTFSC  1C.1
0A7D2:  BRA    A7D8
....................             {
....................                Output.B16 = 0;         //Flash output1
0A7D4:  BCF    xAC.7
....................             }
0A7D6:  BRA    A7DA
....................             else
....................             {
....................                Output.B16 = 1;
0A7D8:  BSF    xAC.7
....................             }
....................          if (~AutoTestFlag)
0A7DA:  BTFSC  1C.4
0A7DC:  BRA    A7FE
....................          {
....................             if(AlarmIndicator.B16 == 1){
0A7DE:  BTFSS  xC0.7
0A7E0:  BRA    A7FE
....................                 if(OutputBoth.B16 == 0)        //Both output
0A7E2:  BTFSC  xBC.7
0A7E4:  BRA    A7F0
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A7E6:  BSF    F89.4
0A7E8:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A7EA:  BSF    F89.3
0A7EC:  BCF    F92.3
....................                 }
0A7EE:  BRA    A7FE
....................                 else
....................                 {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A7F0:  BTFSS  xB8.7
0A7F2:  BRA    A7FA
0A7F4:  BSF    F89.4
0A7F6:  BCF    F92.4
0A7F8:  BRA    A7FE
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A7FA:  BSF    F89.3
0A7FC:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A7FE:  MOVLW  01
0A800:  MOVLB  E
0A802:  MOVWF  x68
....................        // SMS Sending   
....................      if((SendSMS.B16 ==0) && (functointest_f ==0) && (Ack.B16 ==0))
0A804:  MOVLB  D
0A806:  BTFSC  xDC.7
0A808:  BRA    A846
0A80A:  BTFSC  32.3
0A80C:  BRA    A846
0A80E:  BTFSC  xC4.7
0A810:  BRA    A846
....................      {
....................        SendSMS.B16 =1;
0A812:  BSF    xDC.7
....................        strcat(SMS_MassageSUM, SMS_Massage16);
0A814:  MOVLW  0D
0A816:  MOVLB  E
0A818:  MOVWF  x6E
0A81A:  MOVLW  03
0A81C:  MOVWF  x6D
0A81E:  MOVLW  0C
0A820:  MOVWF  x70
0A822:  MOVLW  63
0A824:  MOVWF  x6F
0A826:  MOVLB  0
0A828:  CALL   6DF2
....................        strcat(SMS_MassageSUM, spacestring);
0A82C:  MOVLW  0D
0A82E:  MOVLB  E
0A830:  MOVWF  x6E
0A832:  MOVLW  03
0A834:  MOVWF  x6D
0A836:  MOVLW  0D
0A838:  MOVWF  x70
0A83A:  MOVLW  A3
0A83C:  MOVWF  x6F
0A83E:  MOVLB  0
0A840:  CALL   6DF2
0A844:  MOVLB  D
....................        /*
....................        fprintf(CH2,"AT+CMGS=\"");
....................        fprintf(CH2,sms_phonenumber);
....................        
....................        fprintf(CH2,"\"");
....................        putc('\n',CH2);
....................        delay_ms(50);
....................       
....................       fprintf(CH2,SMS_Massage16);   
....................       putc('\n',CH2);
....................       putc(26,CH2);
....................        */
....................      }
....................    }
0A846:  BRA    A906
....................    else if(FaultType.B16 == 0)
0A848:  MOVLB  D
0A84A:  BTFSC  xB4.7
0A84C:  BRA    A906
....................    {
....................       In2.B16 = 0x00;
0A84E:  BCF    xCC.7
....................       Ack.B16 = 0;
0A850:  BCF    xC4.7
....................       Output.B16 = 1;      //Off LED
0A852:  BSF    xAC.7
....................       SendSMS.B16 =0;// Clear SMS
0A854:  BCF    xDC.7
.................... 
....................       if((OutputType.B16 == 1 || OutputBoth.B16 == 0)&& inputflag ==0)      //If Buzzer or Both
0A856:  BTFSC  xB8.7
0A858:  BRA    A85E
0A85A:  BTFSC  xBC.7
0A85C:  BRA    A880
0A85E:  MOVLB  E
0A860:  MOVF   x68,F
0A862:  BTFSC  FD8.2
0A864:  BRA    A86A
0A866:  MOVLB  D
0A868:  BRA    A880
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A86A:  MOVLW  01
0A86C:  MOVWF  x6D
0A86E:  MOVLB  0
0A870:  CALL   6E5C
0A874:  DECFSZ 01,W
0A876:  BRA    A87A
0A878:  BRA    A87E
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A87A:  BCF    F89.4
0A87C:  BCF    F92.4
0A87E:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B16 == 0 || OutputBoth.B16 == 0)&& inputflag ==0)  //If Bell or Both
0A880:  BTFSS  xB8.7
0A882:  BRA    A888
0A884:  BTFSC  xBC.7
0A886:  BRA    A8AE
0A888:  MOVLB  E
0A88A:  MOVF   x68,F
0A88C:  BTFSC  FD8.2
0A88E:  BRA    A894
0A890:  MOVLB  D
0A892:  BRA    A8AE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A894:  MOVLW  02
0A896:  MOVWF  x6D
0A898:  MOVLB  0
0A89A:  CALL   6E5C
0A89E:  DECFSZ 01,W
0A8A0:  BRA    A8A4
0A8A2:  BRA    A8AC
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A8A4:  BCF    F89.3
0A8A6:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A8A8:  BCF    F89.4
0A8AA:  BCF    F92.4
0A8AC:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A8AE:  BTFSC  xCB.0
0A8B0:  BRA    A906
0A8B2:  BTFSC  xCB.1
0A8B4:  BRA    A906
0A8B6:  BTFSC  xCB.2
0A8B8:  BRA    A906
0A8BA:  BTFSC  xCB.3
0A8BC:  BRA    A906
0A8BE:  BTFSC  xCB.4
0A8C0:  BRA    A906
0A8C2:  BTFSC  xCB.5
0A8C4:  BRA    A906
0A8C6:  BTFSC  xCB.6
0A8C8:  BRA    A906
0A8CA:  BTFSC  xCB.7
0A8CC:  BRA    A906
0A8CE:  BTFSC  xCC.0
0A8D0:  BRA    A906
0A8D2:  BTFSC  xCC.1
0A8D4:  BRA    A906
0A8D6:  BTFSC  xCC.2
0A8D8:  BRA    A906
0A8DA:  BTFSC  xCC.3
0A8DC:  BRA    A906
0A8DE:  BTFSC  xCC.4
0A8E0:  BRA    A906
0A8E2:  BTFSC  xCC.5
0A8E4:  BRA    A906
0A8E6:  BTFSC  xCC.6
0A8E8:  BRA    A906
0A8EA:  BTFSC  xCC.7
0A8EC:  BRA    A906
0A8EE:  BTFSC  xCD.0
0A8F0:  BRA    A906
0A8F2:  BTFSC  xCD.1
0A8F4:  BRA    A906
0A8F6:  BTFSC  xCD.2
0A8F8:  BRA    A906
0A8FA:  BTFSC  xCD.3
0A8FC:  BRA    A906
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A8FE:  BCF    F89.3
0A900:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A902:  BCF    F89.4
0A904:  BCF    F92.4
....................       }
....................    }
.................... //input17
....................    if((((Inputt.B17 ^ InputType.B17) == 1) && (FaultType.B17 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A906:  MOVLW  00
0A908:  BTFSC  xA9.0
0A90A:  MOVLW  01
0A90C:  MOVLB  E
0A90E:  MOVWF  x6E
0A910:  MOVLW  00
0A912:  MOVLB  D
0A914:  BTFSC  xB1.0
0A916:  MOVLW  01
0A918:  MOVLB  E
0A91A:  XORWF  x6E,W
0A91C:  SUBLW  01
0A91E:  BNZ   A928
0A920:  MOVLB  D
0A922:  BTFSS  xB5.0
0A924:  BRA    A92E
0A926:  MOVLB  E
0A928:  BTFSS  1C.5
0A92A:  BRA    A9C2
0A92C:  MOVLB  D
....................    {
....................       if(In2.B17 == 0 && AutoAck == 0x0F && Ack.B17 == 0)   //use auto acknowlegde
0A92E:  BTFSC  xCD.0
0A930:  BRA    A944
0A932:  MOVF   55,W
0A934:  SUBLW  0F
0A936:  BNZ   A944
0A938:  BTFSC  xC5.0
0A93A:  BRA    A944
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A93C:  MOVLW  64
0A93E:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0A940:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B17 = 1;
0A944:  BSF    xCD.0
....................       if(Ack.B17 == 0)
0A946:  BTFSC  xC5.0
0A948:  BRA    A978
....................       {
....................          if(FlashingFlag == 0)
0A94A:  BTFSC  1C.1
0A94C:  BRA    A952
....................             {
....................                Output.B17 = 0;           //Flash output1
0A94E:  BCF    xAD.0
....................             }
0A950:  BRA    A954
....................             else
....................             {
....................                Output.B17 = 1;
0A952:  BSF    xAD.0
....................             }
....................          if (~AutoTestFlag)
0A954:  BTFSC  1C.4
0A956:  BRA    A978
....................          {
....................             if(AlarmIndicator.B17 == 1){
0A958:  BTFSS  xC1.0
0A95A:  BRA    A978
....................                 if(OutputBoth.B17 == 0)        //Both output
0A95C:  BTFSC  xBD.0
0A95E:  BRA    A96A
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A960:  BSF    F89.4
0A962:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A964:  BSF    F89.3
0A966:  BCF    F92.3
....................                 }
0A968:  BRA    A978
....................                 else
....................                 {
....................                   if(OutputType.B17 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A96A:  BTFSS  xB9.0
0A96C:  BRA    A974
0A96E:  BSF    F89.4
0A970:  BCF    F92.4
0A972:  BRA    A978
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A974:  BSF    F89.3
0A976:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A978:  MOVLW  01
0A97A:  MOVLB  E
0A97C:  MOVWF  x68
....................        // SMS Sending   
....................      if((SendSMS.B17 ==0) && (functointest_f ==0) && (Ack.B16 ==0))
0A97E:  MOVLB  D
0A980:  BTFSC  xDD.0
0A982:  BRA    A9C0
0A984:  BTFSC  32.3
0A986:  BRA    A9C0
0A988:  BTFSC  xC4.7
0A98A:  BRA    A9C0
....................      {
....................        SendSMS.B17 =1;
0A98C:  BSF    xDD.0
....................        strcat(SMS_MassageSUM, SMS_Massage17);
0A98E:  MOVLW  0D
0A990:  MOVLB  E
0A992:  MOVWF  x6E
0A994:  MOVLW  03
0A996:  MOVWF  x6D
0A998:  MOVLW  0C
0A99A:  MOVWF  x70
0A99C:  MOVLW  83
0A99E:  MOVWF  x6F
0A9A0:  MOVLB  0
0A9A2:  CALL   6DF2
....................        strcat(SMS_MassageSUM, spacestring);
0A9A6:  MOVLW  0D
0A9A8:  MOVLB  E
0A9AA:  MOVWF  x6E
0A9AC:  MOVLW  03
0A9AE:  MOVWF  x6D
0A9B0:  MOVLW  0D
0A9B2:  MOVWF  x70
0A9B4:  MOVLW  A3
0A9B6:  MOVWF  x6F
0A9B8:  MOVLB  0
0A9BA:  CALL   6DF2
0A9BE:  MOVLB  D
....................        /*
....................        fprintf(CH2,"AT+CMGS=\"");
....................        fprintf(CH2,sms_phonenumber);
....................        
....................        fprintf(CH2,"\"");
....................        putc('\n',CH2);
....................        delay_ms(50);
....................       
....................       fprintf(CH2,SMS_Massage17);   
....................       putc('\n',CH2);
....................       putc(26,CH2);
....................        */
....................      }
....................    }
0A9C0:  BRA    AA80
....................    else if(FaultType.B17 == 0)
0A9C2:  MOVLB  D
0A9C4:  BTFSC  xB5.0
0A9C6:  BRA    AA80
....................    {
....................       In2.B17 = 0x00;
0A9C8:  BCF    xCD.0
....................       Ack.B17 = 0;
0A9CA:  BCF    xC5.0
....................       Output.B17 = 1;      //Off LED
0A9CC:  BSF    xAD.0
....................       SendSMS.B17 =0;// Clear SMS
0A9CE:  BCF    xDD.0
.................... 
....................       if((OutputType.B17 == 1 || OutputBoth.B17 == 0)&& inputflag ==0)      //If Buzzer or Both
0A9D0:  BTFSC  xB9.0
0A9D2:  BRA    A9D8
0A9D4:  BTFSC  xBD.0
0A9D6:  BRA    A9FA
0A9D8:  MOVLB  E
0A9DA:  MOVF   x68,F
0A9DC:  BTFSC  FD8.2
0A9DE:  BRA    A9E4
0A9E0:  MOVLB  D
0A9E2:  BRA    A9FA
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A9E4:  MOVLW  01
0A9E6:  MOVWF  x6D
0A9E8:  MOVLB  0
0A9EA:  CALL   6E5C
0A9EE:  DECFSZ 01,W
0A9F0:  BRA    A9F4
0A9F2:  BRA    A9F8
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A9F4:  BCF    F89.4
0A9F6:  BCF    F92.4
0A9F8:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B17 == 0 || OutputBoth.B17 == 0)&& inputflag ==0)  //If Bell or Both
0A9FA:  BTFSS  xB9.0
0A9FC:  BRA    AA02
0A9FE:  BTFSC  xBD.0
0AA00:  BRA    AA28
0AA02:  MOVLB  E
0AA04:  MOVF   x68,F
0AA06:  BTFSC  FD8.2
0AA08:  BRA    AA0E
0AA0A:  MOVLB  D
0AA0C:  BRA    AA28
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AA0E:  MOVLW  02
0AA10:  MOVWF  x6D
0AA12:  MOVLB  0
0AA14:  CALL   6E5C
0AA18:  DECFSZ 01,W
0AA1A:  BRA    AA1E
0AA1C:  BRA    AA26
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AA1E:  BCF    F89.3
0AA20:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AA22:  BCF    F89.4
0AA24:  BCF    F92.4
0AA26:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0AA28:  BTFSC  xCB.0
0AA2A:  BRA    AA80
0AA2C:  BTFSC  xCB.1
0AA2E:  BRA    AA80
0AA30:  BTFSC  xCB.2
0AA32:  BRA    AA80
0AA34:  BTFSC  xCB.3
0AA36:  BRA    AA80
0AA38:  BTFSC  xCB.4
0AA3A:  BRA    AA80
0AA3C:  BTFSC  xCB.5
0AA3E:  BRA    AA80
0AA40:  BTFSC  xCB.6
0AA42:  BRA    AA80
0AA44:  BTFSC  xCB.7
0AA46:  BRA    AA80
0AA48:  BTFSC  xCC.0
0AA4A:  BRA    AA80
0AA4C:  BTFSC  xCC.1
0AA4E:  BRA    AA80
0AA50:  BTFSC  xCC.2
0AA52:  BRA    AA80
0AA54:  BTFSC  xCC.3
0AA56:  BRA    AA80
0AA58:  BTFSC  xCC.4
0AA5A:  BRA    AA80
0AA5C:  BTFSC  xCC.5
0AA5E:  BRA    AA80
0AA60:  BTFSC  xCC.6
0AA62:  BRA    AA80
0AA64:  BTFSC  xCC.7
0AA66:  BRA    AA80
0AA68:  BTFSC  xCD.0
0AA6A:  BRA    AA80
0AA6C:  BTFSC  xCD.1
0AA6E:  BRA    AA80
0AA70:  BTFSC  xCD.2
0AA72:  BRA    AA80
0AA74:  BTFSC  xCD.3
0AA76:  BRA    AA80
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0AA78:  BCF    F89.3
0AA7A:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AA7C:  BCF    F89.4
0AA7E:  BCF    F92.4
....................       }
....................    }
.................... //input18
....................    if((((Inputt.B18 ^ InputType.B18) == 1) && (FaultType.B18 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0AA80:  MOVLW  00
0AA82:  BTFSC  xA9.1
0AA84:  MOVLW  01
0AA86:  MOVLB  E
0AA88:  MOVWF  x6E
0AA8A:  MOVLW  00
0AA8C:  MOVLB  D
0AA8E:  BTFSC  xB1.1
0AA90:  MOVLW  01
0AA92:  MOVLB  E
0AA94:  XORWF  x6E,W
0AA96:  SUBLW  01
0AA98:  BNZ   AAA2
0AA9A:  MOVLB  D
0AA9C:  BTFSS  xB5.1
0AA9E:  BRA    AAA8
0AAA0:  MOVLB  E
0AAA2:  BTFSS  1C.5
0AAA4:  BRA    AB3C
0AAA6:  MOVLB  D
....................    {
....................       if(In2.B18 == 0 && AutoAck == 0x0F && Ack.B18 == 0)   //use auto acknowlegde
0AAA8:  BTFSC  xCD.1
0AAAA:  BRA    AABE
0AAAC:  MOVF   55,W
0AAAE:  SUBLW  0F
0AAB0:  BNZ   AABE
0AAB2:  BTFSC  xC5.1
0AAB4:  BRA    AABE
....................       {
....................             TimeBase1s = 100 ;            //reload again
0AAB6:  MOVLW  64
0AAB8:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0AABA:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B18 = 1;
0AABE:  BSF    xCD.1
....................       if(Ack.B18 == 0)
0AAC0:  BTFSC  xC5.1
0AAC2:  BRA    AAF2
....................       {
....................          if(FlashingFlag == 0)
0AAC4:  BTFSC  1C.1
0AAC6:  BRA    AACC
....................             {
....................                Output.B18 = 0;           //Flash output1
0AAC8:  BCF    xAD.1
....................             }
0AACA:  BRA    AACE
....................             else
....................             {
....................                Output.B18 = 1;
0AACC:  BSF    xAD.1
....................             }
....................          if (~AutoTestFlag)
0AACE:  BTFSC  1C.4
0AAD0:  BRA    AAF2
....................          {
....................             if(AlarmIndicator.B18 == 1){
0AAD2:  BTFSS  xC1.1
0AAD4:  BRA    AAF2
....................                 if(OutputBoth.B18 == 0)        //Both output
0AAD6:  BTFSC  xBD.1
0AAD8:  BRA    AAE4
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0AADA:  BSF    F89.4
0AADC:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0AADE:  BSF    F89.3
0AAE0:  BCF    F92.3
....................                 }
0AAE2:  BRA    AAF2
....................                 else
....................                 {
....................                   if(OutputType.B18 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0AAE4:  BTFSS  xB9.1
0AAE6:  BRA    AAEE
0AAE8:  BSF    F89.4
0AAEA:  BCF    F92.4
0AAEC:  BRA    AAF2
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0AAEE:  BSF    F89.3
0AAF0:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0AAF2:  MOVLW  01
0AAF4:  MOVLB  E
0AAF6:  MOVWF  x68
....................        // SMS Sending   
....................      if((SendSMS.B18 ==0) && (functointest_f ==0) && (Ack.B18 ==0))
0AAF8:  MOVLB  D
0AAFA:  BTFSC  xDD.1
0AAFC:  BRA    AB3A
0AAFE:  BTFSC  32.3
0AB00:  BRA    AB3A
0AB02:  BTFSC  xC5.1
0AB04:  BRA    AB3A
....................      {
....................        SendSMS.B18 =1;
0AB06:  BSF    xDD.1
....................        strcat(SMS_MassageSUM, SMS_Massage18);
0AB08:  MOVLW  0D
0AB0A:  MOVLB  E
0AB0C:  MOVWF  x6E
0AB0E:  MOVLW  03
0AB10:  MOVWF  x6D
0AB12:  MOVLW  0C
0AB14:  MOVWF  x70
0AB16:  MOVLW  A3
0AB18:  MOVWF  x6F
0AB1A:  MOVLB  0
0AB1C:  CALL   6DF2
....................        strcat(SMS_MassageSUM, spacestring);
0AB20:  MOVLW  0D
0AB22:  MOVLB  E
0AB24:  MOVWF  x6E
0AB26:  MOVLW  03
0AB28:  MOVWF  x6D
0AB2A:  MOVLW  0D
0AB2C:  MOVWF  x70
0AB2E:  MOVLW  A3
0AB30:  MOVWF  x6F
0AB32:  MOVLB  0
0AB34:  CALL   6DF2
0AB38:  MOVLB  D
....................        /*
....................        fprintf(CH2,"AT+CMGS=\"");
....................        fprintf(CH2,sms_phonenumber);
....................        
....................        fprintf(CH2,"\"");
....................        putc('\n',CH2);
....................        delay_ms(50);
....................       
....................       fprintf(CH2,SMS_Massage18);   
....................       putc('\n',CH2);
....................       putc(26,CH2);
....................        */
....................      }
....................    }
0AB3A:  BRA    ABFA
....................    else if(FaultType.B18 == 0)
0AB3C:  MOVLB  D
0AB3E:  BTFSC  xB5.1
0AB40:  BRA    ABFA
....................    {
....................       In2.B18 = 0x00;
0AB42:  BCF    xCD.1
....................       Ack.B18 = 0;
0AB44:  BCF    xC5.1
....................       Output.B18 = 1;      //Off LED
0AB46:  BSF    xAD.1
....................       SendSMS.B18 =0;// Clear SMS
0AB48:  BCF    xDD.1
.................... 
....................       if((OutputType.B18== 1 || OutputBoth.B18 == 0)&& inputflag ==0)      //If Buzzer or Both
0AB4A:  BTFSC  xB9.1
0AB4C:  BRA    AB52
0AB4E:  BTFSC  xBD.1
0AB50:  BRA    AB74
0AB52:  MOVLB  E
0AB54:  MOVF   x68,F
0AB56:  BTFSC  FD8.2
0AB58:  BRA    AB5E
0AB5A:  MOVLB  D
0AB5C:  BRA    AB74
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0AB5E:  MOVLW  01
0AB60:  MOVWF  x6D
0AB62:  MOVLB  0
0AB64:  CALL   6E5C
0AB68:  DECFSZ 01,W
0AB6A:  BRA    AB6E
0AB6C:  BRA    AB72
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AB6E:  BCF    F89.4
0AB70:  BCF    F92.4
0AB72:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B18 == 0 || OutputBoth.B18 == 0)&& inputflag ==0)  //If Bell or Both
0AB74:  BTFSS  xB9.1
0AB76:  BRA    AB7C
0AB78:  BTFSC  xBD.1
0AB7A:  BRA    ABA2
0AB7C:  MOVLB  E
0AB7E:  MOVF   x68,F
0AB80:  BTFSC  FD8.2
0AB82:  BRA    AB88
0AB84:  MOVLB  D
0AB86:  BRA    ABA2
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AB88:  MOVLW  02
0AB8A:  MOVWF  x6D
0AB8C:  MOVLB  0
0AB8E:  CALL   6E5C
0AB92:  DECFSZ 01,W
0AB94:  BRA    AB98
0AB96:  BRA    ABA0
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AB98:  BCF    F89.3
0AB9A:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AB9C:  BCF    F89.4
0AB9E:  BCF    F92.4
0ABA0:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0ABA2:  BTFSC  xCB.0
0ABA4:  BRA    ABFA
0ABA6:  BTFSC  xCB.1
0ABA8:  BRA    ABFA
0ABAA:  BTFSC  xCB.2
0ABAC:  BRA    ABFA
0ABAE:  BTFSC  xCB.3
0ABB0:  BRA    ABFA
0ABB2:  BTFSC  xCB.4
0ABB4:  BRA    ABFA
0ABB6:  BTFSC  xCB.5
0ABB8:  BRA    ABFA
0ABBA:  BTFSC  xCB.6
0ABBC:  BRA    ABFA
0ABBE:  BTFSC  xCB.7
0ABC0:  BRA    ABFA
0ABC2:  BTFSC  xCC.0
0ABC4:  BRA    ABFA
0ABC6:  BTFSC  xCC.1
0ABC8:  BRA    ABFA
0ABCA:  BTFSC  xCC.2
0ABCC:  BRA    ABFA
0ABCE:  BTFSC  xCC.3
0ABD0:  BRA    ABFA
0ABD2:  BTFSC  xCC.4
0ABD4:  BRA    ABFA
0ABD6:  BTFSC  xCC.5
0ABD8:  BRA    ABFA
0ABDA:  BTFSC  xCC.6
0ABDC:  BRA    ABFA
0ABDE:  BTFSC  xCC.7
0ABE0:  BRA    ABFA
0ABE2:  BTFSC  xCD.0
0ABE4:  BRA    ABFA
0ABE6:  BTFSC  xCD.1
0ABE8:  BRA    ABFA
0ABEA:  BTFSC  xCD.2
0ABEC:  BRA    ABFA
0ABEE:  BTFSC  xCD.3
0ABF0:  BRA    ABFA
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0ABF2:  BCF    F89.3
0ABF4:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0ABF6:  BCF    F89.4
0ABF8:  BCF    F92.4
....................       }
....................    }
.................... //input19
....................    if((((Inputt.B19 ^ InputType.B19) == 1) && (FaultType.B19 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0ABFA:  MOVLW  00
0ABFC:  BTFSC  xA9.2
0ABFE:  MOVLW  01
0AC00:  MOVLB  E
0AC02:  MOVWF  x6E
0AC04:  MOVLW  00
0AC06:  MOVLB  D
0AC08:  BTFSC  xB1.2
0AC0A:  MOVLW  01
0AC0C:  MOVLB  E
0AC0E:  XORWF  x6E,W
0AC10:  SUBLW  01
0AC12:  BNZ   AC1C
0AC14:  MOVLB  D
0AC16:  BTFSS  xB5.2
0AC18:  BRA    AC22
0AC1A:  MOVLB  E
0AC1C:  BTFSS  1C.5
0AC1E:  BRA    ACB6
0AC20:  MOVLB  D
....................    {
....................       if(In2.B19 == 0 && AutoAck == 0x0F && Ack.B19 == 0)   //use auto acknowlegde
0AC22:  BTFSC  xCD.2
0AC24:  BRA    AC38
0AC26:  MOVF   55,W
0AC28:  SUBLW  0F
0AC2A:  BNZ   AC38
0AC2C:  BTFSC  xC5.2
0AC2E:  BRA    AC38
....................       {
....................             TimeBase1s = 100 ;            //reload again
0AC30:  MOVLW  64
0AC32:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0AC34:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B19 = 1;
0AC38:  BSF    xCD.2
....................       if(Ack.B19 == 0)
0AC3A:  BTFSC  xC5.2
0AC3C:  BRA    AC6C
....................       {
....................          if(FlashingFlag == 0)
0AC3E:  BTFSC  1C.1
0AC40:  BRA    AC46
....................             {
....................                Output.B19 = 0;           //Flash output1
0AC42:  BCF    xAD.2
....................             }
0AC44:  BRA    AC48
....................             else
....................             {
....................                Output.B19 = 1;
0AC46:  BSF    xAD.2
....................             }
....................          if (~AutoTestFlag)
0AC48:  BTFSC  1C.4
0AC4A:  BRA    AC6C
....................          {
....................             if(AlarmIndicator.B19 == 1){
0AC4C:  BTFSS  xC1.2
0AC4E:  BRA    AC6C
....................                 if(OutputBoth.B19 == 0)        //Both output
0AC50:  BTFSC  xBD.2
0AC52:  BRA    AC5E
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0AC54:  BSF    F89.4
0AC56:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0AC58:  BSF    F89.3
0AC5A:  BCF    F92.3
....................                 }
0AC5C:  BRA    AC6C
....................                 else
....................                 {
....................                   if(OutputType.B19 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0AC5E:  BTFSS  xB9.2
0AC60:  BRA    AC68
0AC62:  BSF    F89.4
0AC64:  BCF    F92.4
0AC66:  BRA    AC6C
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0AC68:  BSF    F89.3
0AC6A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0AC6C:  MOVLW  01
0AC6E:  MOVLB  E
0AC70:  MOVWF  x68
....................        // SMS Sending   
....................      if((SendSMS.B19 ==0) && (functointest_f ==0) && (Ack.B19 ==0))
0AC72:  MOVLB  D
0AC74:  BTFSC  xDD.2
0AC76:  BRA    ACB4
0AC78:  BTFSC  32.3
0AC7A:  BRA    ACB4
0AC7C:  BTFSC  xC5.2
0AC7E:  BRA    ACB4
....................      {
....................        SendSMS.B19 =1;
0AC80:  BSF    xDD.2
....................        strcat(SMS_MassageSUM, SMS_Massage19);
0AC82:  MOVLW  0D
0AC84:  MOVLB  E
0AC86:  MOVWF  x6E
0AC88:  MOVLW  03
0AC8A:  MOVWF  x6D
0AC8C:  MOVLW  0C
0AC8E:  MOVWF  x70
0AC90:  MOVLW  C3
0AC92:  MOVWF  x6F
0AC94:  MOVLB  0
0AC96:  CALL   6DF2
....................        strcat(SMS_MassageSUM, spacestring);
0AC9A:  MOVLW  0D
0AC9C:  MOVLB  E
0AC9E:  MOVWF  x6E
0ACA0:  MOVLW  03
0ACA2:  MOVWF  x6D
0ACA4:  MOVLW  0D
0ACA6:  MOVWF  x70
0ACA8:  MOVLW  A3
0ACAA:  MOVWF  x6F
0ACAC:  MOVLB  0
0ACAE:  CALL   6DF2
0ACB2:  MOVLB  D
....................        /*
....................        fprintf(CH2,"AT+CMGS=\"");
....................        fprintf(CH2,sms_phonenumber);
....................        
....................        fprintf(CH2,"\"");
....................        putc('\n',CH2);
....................        delay_ms(50);
....................       
....................       fprintf(CH2,SMS_Massage19);   
....................       putc('\n',CH2);
....................       putc(26,CH2);
....................        */
....................      }
....................    }
0ACB4:  BRA    AD74
....................    else if(FaultType.B19 == 0)
0ACB6:  MOVLB  D
0ACB8:  BTFSC  xB5.2
0ACBA:  BRA    AD74
....................    {
....................       In2.B19 = 0x00;
0ACBC:  BCF    xCD.2
....................       Ack.B19 = 0;
0ACBE:  BCF    xC5.2
....................       Output.B19 = 1;      //Off LED
0ACC0:  BSF    xAD.2
....................       SendSMS.B19 =0;// Clear SMS
0ACC2:  BCF    xDD.2
.................... 
....................       if((OutputType.B19== 1 || OutputBoth.B19 == 0)&& inputflag ==0)      //If Buzzer or Both
0ACC4:  BTFSC  xB9.2
0ACC6:  BRA    ACCC
0ACC8:  BTFSC  xBD.2
0ACCA:  BRA    ACEE
0ACCC:  MOVLB  E
0ACCE:  MOVF   x68,F
0ACD0:  BTFSC  FD8.2
0ACD2:  BRA    ACD8
0ACD4:  MOVLB  D
0ACD6:  BRA    ACEE
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0ACD8:  MOVLW  01
0ACDA:  MOVWF  x6D
0ACDC:  MOVLB  0
0ACDE:  CALL   6E5C
0ACE2:  DECFSZ 01,W
0ACE4:  BRA    ACE8
0ACE6:  BRA    ACEC
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0ACE8:  BCF    F89.4
0ACEA:  BCF    F92.4
0ACEC:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B19 == 0 || OutputBoth.B19== 0)&& inputflag ==0)  //If Bell or Both
0ACEE:  BTFSS  xB9.2
0ACF0:  BRA    ACF6
0ACF2:  BTFSC  xBD.2
0ACF4:  BRA    AD1C
0ACF6:  MOVLB  E
0ACF8:  MOVF   x68,F
0ACFA:  BTFSC  FD8.2
0ACFC:  BRA    AD02
0ACFE:  MOVLB  D
0AD00:  BRA    AD1C
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AD02:  MOVLW  02
0AD04:  MOVWF  x6D
0AD06:  MOVLB  0
0AD08:  CALL   6E5C
0AD0C:  DECFSZ 01,W
0AD0E:  BRA    AD12
0AD10:  BRA    AD1A
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AD12:  BCF    F89.3
0AD14:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AD16:  BCF    F89.4
0AD18:  BCF    F92.4
0AD1A:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0AD1C:  BTFSC  xCB.0
0AD1E:  BRA    AD74
0AD20:  BTFSC  xCB.1
0AD22:  BRA    AD74
0AD24:  BTFSC  xCB.2
0AD26:  BRA    AD74
0AD28:  BTFSC  xCB.3
0AD2A:  BRA    AD74
0AD2C:  BTFSC  xCB.4
0AD2E:  BRA    AD74
0AD30:  BTFSC  xCB.5
0AD32:  BRA    AD74
0AD34:  BTFSC  xCB.6
0AD36:  BRA    AD74
0AD38:  BTFSC  xCB.7
0AD3A:  BRA    AD74
0AD3C:  BTFSC  xCC.0
0AD3E:  BRA    AD74
0AD40:  BTFSC  xCC.1
0AD42:  BRA    AD74
0AD44:  BTFSC  xCC.2
0AD46:  BRA    AD74
0AD48:  BTFSC  xCC.3
0AD4A:  BRA    AD74
0AD4C:  BTFSC  xCC.4
0AD4E:  BRA    AD74
0AD50:  BTFSC  xCC.5
0AD52:  BRA    AD74
0AD54:  BTFSC  xCC.6
0AD56:  BRA    AD74
0AD58:  BTFSC  xCC.7
0AD5A:  BRA    AD74
0AD5C:  BTFSC  xCD.0
0AD5E:  BRA    AD74
0AD60:  BTFSC  xCD.1
0AD62:  BRA    AD74
0AD64:  BTFSC  xCD.2
0AD66:  BRA    AD74
0AD68:  BTFSC  xCD.3
0AD6A:  BRA    AD74
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0AD6C:  BCF    F89.3
0AD6E:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AD70:  BCF    F89.4
0AD72:  BCF    F92.4
....................       }
....................    }
....................       
....................    //input20
....................    if((((Inputt.B20 ^ InputType.B20) == 1) && (FaultType.B20 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0AD74:  MOVLW  00
0AD76:  BTFSC  xA9.3
0AD78:  MOVLW  01
0AD7A:  MOVLB  E
0AD7C:  MOVWF  x6E
0AD7E:  MOVLW  00
0AD80:  MOVLB  D
0AD82:  BTFSC  xB1.3
0AD84:  MOVLW  01
0AD86:  MOVLB  E
0AD88:  XORWF  x6E,W
0AD8A:  SUBLW  01
0AD8C:  BNZ   AD96
0AD8E:  MOVLB  D
0AD90:  BTFSS  xB5.3
0AD92:  BRA    AD9C
0AD94:  MOVLB  E
0AD96:  BTFSS  1C.5
0AD98:  BRA    AE30
0AD9A:  MOVLB  D
....................    {
....................       if(In2.B20 == 0 && AutoAck == 0x0F && Ack.B20 == 0)   //use auto acknowlegde
0AD9C:  BTFSC  xCD.3
0AD9E:  BRA    ADB2
0ADA0:  MOVF   55,W
0ADA2:  SUBLW  0F
0ADA4:  BNZ   ADB2
0ADA6:  BTFSC  xC5.3
0ADA8:  BRA    ADB2
....................       {
....................             TimeBase1s = 100 ;            //reload again
0ADAA:  MOVLW  64
0ADAC:  MOVWF  1E
....................             AutoAckDelayTime = AutoAckTime ;
0ADAE:  MOVFF  56,1F
....................       }
.................... 
....................       In2.B20 = 1;
0ADB2:  BSF    xCD.3
....................       if(Ack.B20 == 0)
0ADB4:  BTFSC  xC5.3
0ADB6:  BRA    ADE6
....................       {
....................          if(FlashingFlag == 0)
0ADB8:  BTFSC  1C.1
0ADBA:  BRA    ADC0
....................             {
....................                Output.B20 = 0;           //Flash output1
0ADBC:  BCF    xAD.3
....................             }
0ADBE:  BRA    ADC2
....................             else
....................             {
....................                Output.B20 = 1;
0ADC0:  BSF    xAD.3
....................             }
....................          if (~AutoTestFlag)
0ADC2:  BTFSC  1C.4
0ADC4:  BRA    ADE6
....................          {
....................             if(AlarmIndicator.B20 == 1){
0ADC6:  BTFSS  xC1.3
0ADC8:  BRA    ADE6
....................                 if(OutputBoth.B20 == 0)        //Both output
0ADCA:  BTFSC  xBD.3
0ADCC:  BRA    ADD8
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0ADCE:  BSF    F89.4
0ADD0:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0ADD2:  BSF    F89.3
0ADD4:  BCF    F92.3
....................                 }
0ADD6:  BRA    ADE6
....................                 else
....................                 {
....................                   if(OutputType.B20 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0ADD8:  BTFSS  xB9.3
0ADDA:  BRA    ADE2
0ADDC:  BSF    F89.4
0ADDE:  BCF    F92.4
0ADE0:  BRA    ADE6
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0ADE2:  BSF    F89.3
0ADE4:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................     inputflag =1;
0ADE6:  MOVLW  01
0ADE8:  MOVLB  E
0ADEA:  MOVWF  x68
....................      // SMS Sending   
....................      if((SendSMS.B20 ==0) && (functointest_f ==0) && (Ack.B20 ==0))
0ADEC:  MOVLB  D
0ADEE:  BTFSC  xDD.3
0ADF0:  BRA    AE2E
0ADF2:  BTFSC  32.3
0ADF4:  BRA    AE2E
0ADF6:  BTFSC  xC5.3
0ADF8:  BRA    AE2E
....................      {
....................        SendSMS.B20 =1;
0ADFA:  BSF    xDD.3
....................        strcat(SMS_MassageSUM, SMS_Massage20);
0ADFC:  MOVLW  0D
0ADFE:  MOVLB  E
0AE00:  MOVWF  x6E
0AE02:  MOVLW  03
0AE04:  MOVWF  x6D
0AE06:  MOVLW  0C
0AE08:  MOVWF  x70
0AE0A:  MOVLW  E3
0AE0C:  MOVWF  x6F
0AE0E:  MOVLB  0
0AE10:  CALL   6DF2
....................        strcat(SMS_MassageSUM, spacestring);
0AE14:  MOVLW  0D
0AE16:  MOVLB  E
0AE18:  MOVWF  x6E
0AE1A:  MOVLW  03
0AE1C:  MOVWF  x6D
0AE1E:  MOVLW  0D
0AE20:  MOVWF  x70
0AE22:  MOVLW  A3
0AE24:  MOVWF  x6F
0AE26:  MOVLB  0
0AE28:  CALL   6DF2
0AE2C:  MOVLB  D
....................        /*
....................        fprintf(CH2,"AT+CMGS=\"");
....................        fprintf(CH2,sms_phonenumber);
....................        
....................        fprintf(CH2,"\"");
....................        putc('\n',CH2);
....................        delay_ms(50);
....................       
....................       fprintf(CH2,SMS_Massage20);   
....................       putc('\n',CH2);
....................       putc(26,CH2);
....................        */
....................      }
....................    }
0AE2E:  BRA    AEEE
....................    else if(FaultType.B20 == 0)
0AE30:  MOVLB  D
0AE32:  BTFSC  xB5.3
0AE34:  BRA    AEEE
....................    {
....................       In2.B20 = 0x00;
0AE36:  BCF    xCD.3
....................       Ack.B20 = 0;
0AE38:  BCF    xC5.3
....................       Output.B20 = 1;      //Off LED
0AE3A:  BSF    xAD.3
....................       SendSMS.B20 =0;// Clear SMS
0AE3C:  BCF    xDD.3
.................... 
....................       if((OutputType.B20== 1 || OutputBoth.B20 == 0)&& inputflag ==0)      //If Buzzer or Both
0AE3E:  BTFSC  xB9.3
0AE40:  BRA    AE46
0AE42:  BTFSC  xBD.3
0AE44:  BRA    AE68
0AE46:  MOVLB  E
0AE48:  MOVF   x68,F
0AE4A:  BTFSC  FD8.2
0AE4C:  BRA    AE52
0AE4E:  MOVLB  D
0AE50:  BRA    AE68
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0AE52:  MOVLW  01
0AE54:  MOVWF  x6D
0AE56:  MOVLB  0
0AE58:  CALL   6E5C
0AE5C:  DECFSZ 01,W
0AE5E:  BRA    AE62
0AE60:  BRA    AE66
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AE62:  BCF    F89.4
0AE64:  BCF    F92.4
0AE66:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B20 == 0 || OutputBoth.B20 == 0)&& inputflag ==0)  //If Bell or Both
0AE68:  BTFSS  xB9.3
0AE6A:  BRA    AE70
0AE6C:  BTFSC  xBD.3
0AE6E:  BRA    AE96
0AE70:  MOVLB  E
0AE72:  MOVF   x68,F
0AE74:  BTFSC  FD8.2
0AE76:  BRA    AE7C
0AE78:  MOVLB  D
0AE7A:  BRA    AE96
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AE7C:  MOVLW  02
0AE7E:  MOVWF  x6D
0AE80:  MOVLB  0
0AE82:  CALL   6E5C
0AE86:  DECFSZ 01,W
0AE88:  BRA    AE8C
0AE8A:  BRA    AE94
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AE8C:  BCF    F89.3
0AE8E:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AE90:  BCF    F89.4
0AE92:  BCF    F92.4
0AE94:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0AE96:  BTFSC  xCB.0
0AE98:  BRA    AEEE
0AE9A:  BTFSC  xCB.1
0AE9C:  BRA    AEEE
0AE9E:  BTFSC  xCB.2
0AEA0:  BRA    AEEE
0AEA2:  BTFSC  xCB.3
0AEA4:  BRA    AEEE
0AEA6:  BTFSC  xCB.4
0AEA8:  BRA    AEEE
0AEAA:  BTFSC  xCB.5
0AEAC:  BRA    AEEE
0AEAE:  BTFSC  xCB.6
0AEB0:  BRA    AEEE
0AEB2:  BTFSC  xCB.7
0AEB4:  BRA    AEEE
0AEB6:  BTFSC  xCC.0
0AEB8:  BRA    AEEE
0AEBA:  BTFSC  xCC.1
0AEBC:  BRA    AEEE
0AEBE:  BTFSC  xCC.2
0AEC0:  BRA    AEEE
0AEC2:  BTFSC  xCC.3
0AEC4:  BRA    AEEE
0AEC6:  BTFSC  xCC.4
0AEC8:  BRA    AEEE
0AECA:  BTFSC  xCC.5
0AECC:  BRA    AEEE
0AECE:  BTFSC  xCC.6
0AED0:  BRA    AEEE
0AED2:  BTFSC  xCC.7
0AED4:  BRA    AEEE
0AED6:  BTFSC  xCD.0
0AED8:  BRA    AEEE
0AEDA:  BTFSC  xCD.1
0AEDC:  BRA    AEEE
0AEDE:  BTFSC  xCD.2
0AEE0:  BRA    AEEE
0AEE2:  BTFSC  xCD.3
0AEE4:  BRA    AEEE
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0AEE6:  BCF    F89.3
0AEE8:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AEEA:  BCF    F89.4
0AEEC:  BCF    F92.4
....................       }
....................    }
0AEEE:  MOVLB  0
0AEF0:  GOTO   BBB4 (RETURN)
....................    
....................    
....................  //}
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Send_Ouput(void)
.................... {
.................... 
....................    if(T_test == 0x00)
*
02EFC:  MOVF   31,F
02EFE:  BTFSS  FD8.2
02F00:  BRA    338E
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
02F02:  MOVLB  D
02F04:  BTFSS  xAB.0
02F06:  BRA    2F0E
....................            {
....................              bit_clear(Green1_8,0); bit_clear(Red1_8,0);
02F08:  BCF    51.0
02F0A:  BCF    4D.0
....................            }
02F0C:  BRA    2F36
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
02F0E:  BTFSS  xD3.0
02F10:  BRA    2F1C
02F12:  BTFSC  xD7.0
02F14:  BRA    2F1C
....................              {
....................                bit_set(Red1_8,0); bit_clear(Green1_8,0);
02F16:  BSF    4D.0
02F18:  BCF    51.0
....................              }
02F1A:  BRA    2F36
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
02F1C:  BTFSC  xD3.0
02F1E:  BRA    2F2A
02F20:  BTFSS  xD7.0
02F22:  BRA    2F2A
....................              {
....................                bit_clear(Red1_8,0); bit_set(Green1_8,0); 
02F24:  BCF    4D.0
02F26:  BSF    51.0
....................              }
02F28:  BRA    2F36
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
02F2A:  BTFSS  xD3.0
02F2C:  BRA    2F36
02F2E:  BTFSS  xD7.0
02F30:  BRA    2F36
....................              {
....................                bit_set(Red1_8,0); bit_set(Green1_8,0) ; 
02F32:  BSF    4D.0
02F34:  BSF    51.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
02F36:  BTFSS  xAB.1
02F38:  BRA    2F40
....................            {
....................              bit_clear(Green1_8,1); bit_clear(Red1_8,1);
02F3A:  BCF    51.1
02F3C:  BCF    4D.1
....................            }
02F3E:  BRA    2F68
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
02F40:  BTFSS  xD3.1
02F42:  BRA    2F4E
02F44:  BTFSC  xD7.1
02F46:  BRA    2F4E
....................              {
....................                bit_set(Red1_8,1); bit_clear(Green1_8,1);
02F48:  BSF    4D.1
02F4A:  BCF    51.1
....................              }
02F4C:  BRA    2F68
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
02F4E:  BTFSC  xD3.1
02F50:  BRA    2F5C
02F52:  BTFSS  xD7.1
02F54:  BRA    2F5C
....................              {
....................                bit_clear(Red1_8,1); bit_set(Green1_8,1); 
02F56:  BCF    4D.1
02F58:  BSF    51.1
....................              }
02F5A:  BRA    2F68
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
02F5C:  BTFSS  xD3.1
02F5E:  BRA    2F68
02F60:  BTFSS  xD7.1
02F62:  BRA    2F68
....................              {
....................                bit_set(Red1_8,1); bit_set(Green1_8,1) ; 
02F64:  BSF    4D.1
02F66:  BSF    51.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
02F68:  BTFSS  xAB.2
02F6A:  BRA    2F72
....................            {
....................              bit_clear(Green1_8,2); bit_clear(Red1_8,2);
02F6C:  BCF    51.2
02F6E:  BCF    4D.2
....................            }
02F70:  BRA    2F9A
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
02F72:  BTFSS  xD3.2
02F74:  BRA    2F80
02F76:  BTFSC  xD7.2
02F78:  BRA    2F80
....................              {
....................                bit_set(Red1_8,2); bit_clear(Green1_8,2);
02F7A:  BSF    4D.2
02F7C:  BCF    51.2
....................              }
02F7E:  BRA    2F9A
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
02F80:  BTFSC  xD3.2
02F82:  BRA    2F8E
02F84:  BTFSS  xD7.2
02F86:  BRA    2F8E
....................              {
....................                bit_clear(Red1_8,2); bit_set(Green1_8,2); 
02F88:  BCF    4D.2
02F8A:  BSF    51.2
....................              }
02F8C:  BRA    2F9A
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
02F8E:  BTFSS  xD3.2
02F90:  BRA    2F9A
02F92:  BTFSS  xD7.2
02F94:  BRA    2F9A
....................              {
....................                bit_set(Red1_8,2); bit_set(Green1_8,2) ; 
02F96:  BSF    4D.2
02F98:  BSF    51.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
02F9A:  BTFSS  xAB.3
02F9C:  BRA    2FA4
....................            {
....................              bit_clear(Green1_8,3); bit_clear(Red1_8,3);
02F9E:  BCF    51.3
02FA0:  BCF    4D.3
....................            }
02FA2:  BRA    2FCC
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
02FA4:  BTFSS  xD3.3
02FA6:  BRA    2FB2
02FA8:  BTFSC  xD7.3
02FAA:  BRA    2FB2
....................              {
....................                bit_set(Red1_8,3); bit_clear(Green1_8,3);
02FAC:  BSF    4D.3
02FAE:  BCF    51.3
....................              }
02FB0:  BRA    2FCC
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
02FB2:  BTFSC  xD3.3
02FB4:  BRA    2FC0
02FB6:  BTFSS  xD7.3
02FB8:  BRA    2FC0
....................              {
....................                bit_clear(Red1_8,3); bit_set(Green1_8,3); 
02FBA:  BCF    4D.3
02FBC:  BSF    51.3
....................              }
02FBE:  BRA    2FCC
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
02FC0:  BTFSS  xD3.3
02FC2:  BRA    2FCC
02FC4:  BTFSS  xD7.3
02FC6:  BRA    2FCC
....................              {
....................                bit_set(Red1_8,3); bit_set(Green1_8,3) ; 
02FC8:  BSF    4D.3
02FCA:  BSF    51.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
02FCC:  BTFSS  xAB.4
02FCE:  BRA    2FD6
....................            {
....................              bit_clear(Green1_8,4); bit_clear(Red1_8,4);
02FD0:  BCF    51.4
02FD2:  BCF    4D.4
....................            }
02FD4:  BRA    2FFE
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
02FD6:  BTFSS  xD3.4
02FD8:  BRA    2FE4
02FDA:  BTFSC  xD7.4
02FDC:  BRA    2FE4
....................              {
....................                bit_set(Red1_8,4); bit_clear(Green1_8,4);
02FDE:  BSF    4D.4
02FE0:  BCF    51.4
....................              }
02FE2:  BRA    2FFE
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
02FE4:  BTFSC  xD3.4
02FE6:  BRA    2FF2
02FE8:  BTFSS  xD7.4
02FEA:  BRA    2FF2
....................              {
....................                bit_clear(Red1_8,4); bit_set(Green1_8,4); 
02FEC:  BCF    4D.4
02FEE:  BSF    51.4
....................              }
02FF0:  BRA    2FFE
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
02FF2:  BTFSS  xD3.4
02FF4:  BRA    2FFE
02FF6:  BTFSS  xD7.4
02FF8:  BRA    2FFE
....................              {
....................                bit_set(Red1_8,4); bit_set(Green1_8,4) ; 
02FFA:  BSF    4D.4
02FFC:  BSF    51.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
02FFE:  BTFSS  xAB.5
03000:  BRA    3008
....................            {
....................              bit_clear(Green1_8,5); bit_clear(Red1_8,5);
03002:  BCF    51.5
03004:  BCF    4D.5
....................            }
03006:  BRA    3030
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
03008:  BTFSS  xD3.5
0300A:  BRA    3016
0300C:  BTFSC  xD7.5
0300E:  BRA    3016
....................              {
....................                bit_set(Red1_8,5); bit_clear(Green1_8,5);
03010:  BSF    4D.5
03012:  BCF    51.5
....................              }
03014:  BRA    3030
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
03016:  BTFSC  xD3.5
03018:  BRA    3024
0301A:  BTFSS  xD7.5
0301C:  BRA    3024
....................              {
....................                bit_clear(Red1_8,5); bit_set(Green1_8,5); 
0301E:  BCF    4D.5
03020:  BSF    51.5
....................              }
03022:  BRA    3030
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
03024:  BTFSS  xD3.5
03026:  BRA    3030
03028:  BTFSS  xD7.5
0302A:  BRA    3030
....................              {
....................                bit_set(Red1_8,5); bit_set(Green1_8,5) ; 
0302C:  BSF    4D.5
0302E:  BSF    51.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
03030:  BTFSS  xAB.6
03032:  BRA    303A
....................            {
....................              bit_clear(Green1_8,6); bit_clear(Red1_8,6);
03034:  BCF    51.6
03036:  BCF    4D.6
....................            }
03038:  BRA    3062
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
0303A:  BTFSS  xD3.6
0303C:  BRA    3048
0303E:  BTFSC  xD7.6
03040:  BRA    3048
....................              {
....................                bit_set(Red1_8,6); bit_clear(Green1_8,6);
03042:  BSF    4D.6
03044:  BCF    51.6
....................              }
03046:  BRA    3062
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
03048:  BTFSC  xD3.6
0304A:  BRA    3056
0304C:  BTFSS  xD7.6
0304E:  BRA    3056
....................              {
....................                bit_clear(Red1_8,6); bit_set(Green1_8,6); 
03050:  BCF    4D.6
03052:  BSF    51.6
....................              }
03054:  BRA    3062
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
03056:  BTFSS  xD3.6
03058:  BRA    3062
0305A:  BTFSS  xD7.6
0305C:  BRA    3062
....................              {
....................                bit_set(Red1_8,6); bit_set(Green
0305E:  BSF    4D.6
03060:  BSF    51.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
03062:  BTFSS  xAB.7
03064:  BRA    306C
....................            {
....................              bit_clear(Green1_8,7); bit_clear(Red1_8,7);
03066:  BCF    51.7
03068:  BCF    4D.7
....................            }
0306A:  BRA    3094
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
0306C:  BTFSS  xD3.7
0306E:  BRA    307A
03070:  BTFSC  xD7.7
03072:  BRA    307A
....................              {
....................                bit_set(Red1_8,7); bit_clear(Green1_8,7);
03074:  BSF    4D.7
03076:  BCF    51.7
....................              }
03078:  BRA    3094
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
0307A:  BTFSC  xD3.7
0307C:  BRA    3088
0307E:  BTFSS  xD7.7
03080:  BRA    3088
....................              {
....................                bit_clear(Red1_8,7); bit_set(Green1_8,7); 
03082:  BCF    4D.7
03084:  BSF    51.7
....................              }
03086:  BRA    3094
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
03088:  BTFSS  xD3.7
0308A:  BRA    3094
0308C:  BTFSS  xD7.7
0308E:  BRA    3094
....................              {
....................                bit_set(Red1_8,7); bit_set(Green1_8,7) ; 
03090:  BSF    4D.7
03092:  BSF    51.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
03094:  BTFSS  xAC.0
03096:  BRA    309E
....................            {
....................              bit_clear(Green9_10,0); bit_clear(Red9_10,0);
03098:  BCF    52.0
0309A:  BCF    4E.0
....................            }
0309C:  BRA    30C6
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
0309E:  BTFSS  xD4.0
030A0:  BRA    30AC
030A2:  BTFSC  xD8.0
030A4:  BRA    30AC
....................              {
....................                bit_set(Red9_10,0); bit_clear(Green9_10,0);
030A6:  BSF    4E.0
030A8:  BCF    52.0
....................              }
030AA:  BRA    30C6
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
030AC:  BTFSC  xD4.0
030AE:  BRA    30BA
030B0:  BTFSS  xD8.0
030B2:  BRA    30BA
....................              {
....................                bit_clear(Red9_10,0); bit_set(Green9_10,0); 
030B4:  BCF    4E.0
030B6:  BSF    52.0
....................              }
030B8:  BRA    30C6
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
030BA:  BTFSS  xD4.0
030BC:  BRA    30C6
030BE:  BTFSS  xD8.0
030C0:  BRA    30C6
....................              {
....................                bit_set(Red9_10,0); bit_set(Green9_10,0) ; 
030C2:  BSF    4E.0
030C4:  BSF    52.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
030C6:  BTFSS  xAC.1
030C8:  BRA    30D0
....................            {
....................              bit_clear(Green9_10,1); bit_clear(Red9_10,1);
030CA:  BCF    52.1
030CC:  BCF    4E.1
....................            }
030CE:  BRA    30F8
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
030D0:  BTFSS  xD4.1
030D2:  BRA    30DE
030D4:  BTFSC  xD8.1
030D6:  BRA    30DE
....................              {
....................                bit_set(Red9_10,1); bit_clear(Green9_10,1);
030D8:  BSF    4E.1
030DA:  BCF    52.1
....................              }
030DC:  BRA    30F8
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
030DE:  BTFSC  xD4.1
030E0:  BRA    30EC
030E2:  BTFSS  xD8.1
030E4:  BRA    30EC
....................              {
....................                bit_clear(Red9_10,1); bit_set(Green9_10,1); 
030E6:  BCF    4E.1
030E8:  BSF    52.1
....................              }
030EA:  BRA    30F8
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
030EC:  BTFSS  xD4.1
030EE:  BRA    30F8
030F0:  BTFSS  xD8.1
030F2:  BRA    30F8
....................              {
....................                bit_set(Red9_10,1); bit_set(Green9_10,1) ; 
030F4:  BSF    4E.1
030F6:  BSF    52.1
....................              }  
....................            }
....................            
....................        // }
....................         
....................        // if(NoOfPoint >= 20)
....................       //{   
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
030F8:  BTFSS  xAC.2
030FA:  BRA    3102
....................            {
....................              bit_clear(Green11_18,0); bit_clear(Red11_18,0);
030FC:  BCF    53.0
030FE:  BCF    4F.0
....................            }
03100:  BRA    312A
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
03102:  BTFSS  xD4.2
03104:  BRA    3110
03106:  BTFSC  xD8.2
03108:  BRA    3110
....................              {
....................                bit_set(Red11_18,0); bit_clear(Green11_18,0);
0310A:  BSF    4F.0
0310C:  BCF    53.0
....................              }
0310E:  BRA    312A
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
03110:  BTFSC  xD4.2
03112:  BRA    311E
03114:  BTFSS  xD8.2
03116:  BRA    311E
....................              {
....................                bit_clear(Red11_18,0); bit_set(Green11_18,0); 
03118:  BCF    4F.0
0311A:  BSF    53.0
....................              }
0311C:  BRA    312A
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
0311E:  BTFSS  xD4.2
03120:  BRA    312A
03122:  BTFSS  xD8.2
03124:  BRA    312A
....................              {
....................                bit_set(Red11_18,0); bit_set(Green11_18,0) ; 
03126:  BSF    4F.0
03128:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
0312A:  BTFSS  xAC.2
0312C:  BRA    3134
....................            {
....................              bit_clear(Green11_18,0); bit_clear(Red11_18,0);
0312E:  BCF    53.0
03130:  BCF    4F.0
....................            }
03132:  BRA    315C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
03134:  BTFSS  xD4.2
03136:  BRA    3142
03138:  BTFSC  xD8.2
0313A:  BRA    3142
....................              {
....................                bit_set(Red11_18,0); bit_clear(Green11_18,0);
0313C:  BSF    4F.0
0313E:  BCF    53.0
....................              }
03140:  BRA    315C
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
03142:  BTFSC  xD4.2
03144:  BRA    3150
03146:  BTFSS  xD8.2
03148:  BRA    3150
....................              {
....................                bit_clear(Red11_18,0); bit_set(Green11_18,0); 
0314A:  BCF    4F.0
0314C:  BSF    53.0
....................              }
0314E:  BRA    315C
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
03150:  BTFSS  xD4.2
03152:  BRA    315C
03154:  BTFSS  xD8.2
03156:  BRA    315C
....................              {
....................                bit_set(Red11_18,0); bit_set(Green11_18,0) ; 
03158:  BSF    4F.0
0315A:  BSF    53.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B12)//++++++++++++B12+++++++++++++++++++++
0315C:  BTFSS  xAC.3
0315E:  BRA    3166
....................            {
....................              bit_clear(Green11_18,1); bit_clear(Red11_18,1);
03160:  BCF    53.1
03162:  BCF    4F.1
....................            }
03164:  BRA    318E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B12 )&&(GREEN_Colour.B12 ==0 ))//Red
03166:  BTFSS  xD4.3
03168:  BRA    3174
0316A:  BTFSC  xD8.3
0316C:  BRA    3174
....................              {
....................                bit_set(Red11_18,1); bit_clear(Green11_18,1);
0316E:  BSF    4F.1
03170:  BCF    53.1
....................              }
03172:  BRA    318E
....................              else if((RED_Colour.B12==0 )&&(GREEN_Colour.B12))//Green
03174:  BTFSC  xD4.3
03176:  BRA    3182
03178:  BTFSS  xD8.3
0317A:  BRA    3182
....................              {
....................                bit_clear(Red11_18,1); bit_set(Green11_18,1); 
0317C:  BCF    4F.1
0317E:  BSF    53.1
....................              }
03180:  BRA    318E
....................              else if((RED_Colour.B12)&&(GREEN_Colour.B12))//Ambian
03182:  BTFSS  xD4.3
03184:  BRA    318E
03186:  BTFSS  xD8.3
03188:  BRA    318E
....................              {
....................                bit_set(Red11_18,1); bit_set(Green11_18,1) ; 
0318A:  BSF    4F.1
0318C:  BSF    53.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B13)//++++++++++++B13+++++++++++++++++++++
0318E:  BTFSS  xAC.4
03190:  BRA    3198
....................            {
....................              bit_clear(Green11_18,2); bit_clear(Red11_18,2);
03192:  BCF    53.2
03194:  BCF    4F.2
....................            }
03196:  BRA    31C0
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B13 )&&(GREEN_Colour.B13 ==0 ))//Red
03198:  BTFSS  xD4.4
0319A:  BRA    31A6
0319C:  BTFSC  xD8.4
0319E:  BRA    31A6
....................              {
....................                bit_set(Red11_18,2); bit_clear(Green11_18,2);
031A0:  BSF    4F.2
031A2:  BCF    53.2
....................              }
031A4:  BRA    31C0
....................              else if((RED_Colour.B13==0 )&&(GREEN_Colour.B13))//Green
031A6:  BTFSC  xD4.4
031A8:  BRA    31B4
031AA:  BTFSS  xD8.4
031AC:  BRA    31B4
....................              {
....................                bit_clear(Red11_18,2); bit_set(Green11_18,2); 
031AE:  BCF    4F.2
031B0:  BSF    53.2
....................              }
031B2:  BRA    31C0
....................              else if((RED_Colour.B13)&&(GREEN_Colour.B13))//Ambian
031B4:  BTFSS  xD4.4
031B6:  BRA    31C0
031B8:  BTFSS  xD8.4
031BA:  BRA    31C0
....................              {
....................                bit_set(Red11_18,2); bit_set(Green11_18,2) ; 
031BC:  BSF    4F.2
031BE:  BSF    53.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B14)//++++++++++++B14+++++++++++++++++++++
031C0:  BTFSS  xAC.5
031C2:  BRA    31CA
....................            {
....................              bit_clear(Green11_18,3); bit_clear(Red11_18,3);
031C4:  BCF    53.3
031C6:  BCF    4F.3
....................            }
031C8:  BRA    31F2
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B14 )&&(GREEN_Colour.B14 ==0 ))//Red
031CA:  BTFSS  xD4.5
031CC:  BRA    31D8
031CE:  BTFSC  xD8.5
031D0:  BRA    31D8
....................              {
....................                bit_set(Red11_18,3); bit_clear(Green11_18,3);
031D2:  BSF    4F.3
031D4:  BCF    53.3
....................              }
031D6:  BRA    31F2
....................              else if((RED_Colour.B14==0 )&&(GREEN_Colour.B14))//Green
031D8:  BTFSC  xD4.5
031DA:  BRA    31E6
031DC:  BTFSS  xD8.5
031DE:  BRA    31E6
....................              {
....................                bit_clear(Red11_18,3); bit_set(Green11_18,3); 
031E0:  BCF    4F.3
031E2:  BSF    53.3
....................              }
031E4:  BRA    31F2
....................              else if((RED_Colour.B14)&&(GREEN_Colour.B14))//Ambian
031E6:  BTFSS  xD4.5
031E8:  BRA    31F2
031EA:  BTFSS  xD8.5
031EC:  BRA    31F2
....................              {
....................                bit_set(Red11_18,3); bit_set(Green11_18,3) ; 
031EE:  BSF    4F.3
031F0:  BSF    53.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B15)//++++++++++++B15+++++++++++++++++++++
031F2:  BTFSS  xAC.6
031F4:  BRA    31FC
....................            {
....................              bit_clear(Green11_18,4); bit_clear(Red11_18,4);
031F6:  BCF    53.4
031F8:  BCF    4F.4
....................            }
031FA:  BRA    3224
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B15 )&&(GREEN_Colour.B15 ==0 ))//Red
031FC:  BTFSS  xD4.6
031FE:  BRA    320A
03200:  BTFSC  xD8.6
03202:  BRA    320A
....................              {
....................                bit_set(Red11_18,4); bit_clear(Green11_18,4);
03204:  BSF    4F.4
03206:  BCF    53.4
....................              }
03208:  BRA    3224
....................              else if((RED_Colour.B15==0 )&&(GREEN_Colour.B15))//Green
0320A:  BTFSC  xD4.6
0320C:  BRA    3218
0320E:  BTFSS  xD8.6
03210:  BRA    3218
....................              {
....................                bit_clear(Red11_18,4); bit_set(Green11_18,4); 
03212:  BCF    4F.4
03214:  BSF    53.4
....................              }
03216:  BRA    3224
....................              else if((RED_Colour.B15)&&(GREEN_Colour.B15))//Ambian
03218:  BTFSS  xD4.6
0321A:  BRA    3224
0321C:  BTFSS  xD8.6
0321E:  BRA    3224
....................              {
....................                bit_set(Red11_18,4); bit_set(Green11_18,4) ; 
03220:  BSF    4F.4
03222:  BSF    53.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B16)//++++++++++++B16+++++++++++++++++++++
03224:  BTFSS  xAC.7
03226:  BRA    322E
....................            {
....................              bit_clear(Green11_18,5); bit_clear(Red11_18,5);
03228:  BCF    53.5
0322A:  BCF    4F.5
....................            }
0322C:  BRA    3256
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B16 )&&(GREEN_Colour.B16 ==0 ))//Red
0322E:  BTFSS  xD4.7
03230:  BRA    323C
03232:  BTFSC  xD8.7
03234:  BRA    323C
....................              {
....................                bit_set(Red11_18,5); bit_clear(Green11_18,5);
03236:  BSF    4F.5
03238:  BCF    53.5
....................              }
0323A:  BRA    3256
....................              else if((RED_Colour.B16==0 )&&(GREEN_Colour.B16))//Green
0323C:  BTFSC  xD4.7
0323E:  BRA    324A
03240:  BTFSS  xD8.7
03242:  BRA    324A
....................              {
....................                bit_clear(Red11_18,5); bit_set(Green11_18,5); 
03244:  BCF    4F.5
03246:  BSF    53.5
....................              }
03248:  BRA    3256
....................              else if((RED_Colour.B16)&&(GREEN_Colour.B16))//Ambian
0324A:  BTFSS  xD4.7
0324C:  BRA    3256
0324E:  BTFSS  xD8.7
03250:  BRA    3256
....................              {
....................                bit_set(Red11_18,5); bit_set(Green11_18,5) ; 
03252:  BSF    4F.5
03254:  BSF    53.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B17)//++++++++++++B17+++++++++++++++++++++
03256:  BTFSS  xAD.0
03258:  BRA    3260
....................            {
....................              bit_clear(Green11_18,6); bit_clear(Red11_18,6);
0325A:  BCF    53.6
0325C:  BCF    4F.6
....................            }
0325E:  BRA    3288
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B17 )&&(GREEN_Colour.B17 ==0 ))//Red
03260:  BTFSS  xD5.0
03262:  BRA    326E
03264:  BTFSC  xD9.0
03266:  BRA    326E
....................              {
....................                bit_set(Red11_18,6); bit_clear(Green11_18,6);
03268:  BSF    4F.6
0326A:  BCF    53.6
....................              }
0326C:  BRA    3288
....................              else if((RED_Colour.B17==0 )&&(GREEN_Colour.B17))//Green
0326E:  BTFSC  xD5.0
03270:  BRA    327C
03272:  BTFSS  xD9.0
03274:  BRA    327C
....................              {
....................                bit_clear(Red11_18,6); bit_set(Green11_18,6); 
03276:  BCF    4F.6
03278:  BSF    53.6
....................              }
0327A:  BRA    3288
....................              else if((RED_Colour.B17)&&(GREEN_Colour.B17))//Ambian
0327C:  BTFSS  xD5.0
0327E:  BRA    3288
03280:  BTFSS  xD9.0
03282:  BRA    3288
....................              {
....................                bit_set(Red11_18,6); bit_set(Green11_18,6) ; 
03284:  BSF    4F.6
03286:  BSF    53.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B18)//++++++++++++B18+++++++++++++++++++++
03288:  BTFSS  xAD.1
0328A:  BRA    3292
....................            {
....................              bit_clear(Green11_18,7); bit_clear(Red11_18,7);
0328C:  BCF    53.7
0328E:  BCF    4F.7
....................            }
03290:  BRA    32BA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B18 )&&(GREEN_Colour.B18 ==0 ))//Red
03292:  BTFSS  xD5.1
03294:  BRA    32A0
03296:  BTFSC  xD9.1
03298:  BRA    32A0
....................              {
....................                bit_set(Red11_18,7); bit_clear(Green11_18,7);
0329A:  BSF    4F.7
0329C:  BCF    53.7
....................              }
0329E:  BRA    32BA
....................              else if((RED_Colour.B18==0 )&&(GREEN_Colour.B18))//Green
032A0:  BTFSC  xD5.1
032A2:  BRA    32AE
032A4:  BTFSS  xD9.1
032A6:  BRA    32AE
....................              {
....................                bit_clear(Red11_18,7); bit_set(Green11_18,7); 
032A8:  BCF    4F.7
032AA:  BSF    53.7
....................              }
032AC:  BRA    32BA
....................              else if((RED_Colour.B18)&&(GREEN_Colour.B18))//Ambian
032AE:  BTFSS  xD5.1
032B0:  BRA    32BA
032B2:  BTFSS  xD9.1
032B4:  BRA    32BA
....................              {
....................                bit_set(Red11_18,7); bit_set(Green11_18,7) ; 
032B6:  BSF    4F.7
032B8:  BSF    53.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B19)//++++++++++++B19+++++++++++++++++++++
032BA:  BTFSS  xAD.2
032BC:  BRA    32C4
....................            {
....................              bit_clear(Green19_20,0); bit_clear(Red19_20,0);
032BE:  BCF    54.0
032C0:  BCF    50.0
....................            }
032C2:  BRA    32EC
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B19 )&&(GREEN_Colour.B19 ==0 ))//Red
032C4:  BTFSS  xD5.2
032C6:  BRA    32D2
032C8:  BTFSC  xD9.2
032CA:  BRA    32D2
....................              {
....................                bit_set(Red19_20,0); bit_clear(Green19_20,0);
032CC:  BSF    50.0
032CE:  BCF    54.0
....................              }
032D0:  BRA    32EC
....................              else if((RED_Colour.B19==0 )&&(GREEN_Colour.B19))//Green
032D2:  BTFSC  xD5.2
032D4:  BRA    32E0
032D6:  BTFSS  xD9.2
032D8:  BRA    32E0
....................              {
....................                bit_clear(Red19_20,0); bit_set(Green19_20,0); 
032DA:  BCF    50.0
032DC:  BSF    54.0
....................              }
032DE:  BRA    32EC
....................              else if((RED_Colour.B19)&&(GREEN_Colour.B19))//Ambian
032E0:  BTFSS  xD5.2
032E2:  BRA    32EC
032E4:  BTFSS  xD9.2
032E6:  BRA    32EC
....................              {
....................                bit_set(Red19_20,0); bit_set(Green19_20,0) ; 
032E8:  BSF    50.0
032EA:  BSF    54.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B20)//++++++++++++B20+++++++++++++++++++++
032EC:  BTFSS  xAD.3
032EE:  BRA    32F6
....................            {
....................              bit_clear(Green19_20,1); bit_clear(Red19_20,1);
032F0:  BCF    54.1
032F2:  BCF    50.1
....................            }
032F4:  BRA    331E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B20 )&&(GREEN_Colour.B20 ==0 ))//Red
032F6:  BTFSS  xD5.3
032F8:  BRA    3304
032FA:  BTFSC  xD9.3
032FC:  BRA    3304
....................              {
....................                bit_set(Red19_20,1); bit_clear(Green19_20,1);
032FE:  BSF    50.1
03300:  BCF    54.1
....................              }
03302:  BRA    331E
....................              else if((RED_Colour.B20==0 )&&(GREEN_Colour.B20))//Green
03304:  BTFSC  xD5.3
03306:  BRA    3312
03308:  BTFSS  xD9.3
0330A:  BRA    3312
....................              {
....................                bit_clear(Red19_20,1); bit_set(Green19_20,1); 
0330C:  BCF    50.1
0330E:  BSF    54.1
....................              }
03310:  BRA    331E
....................              else if((RED_Colour.B20)&&(GREEN_Colour.B20))//Ambian
03312:  BTFSS  xD5.3
03314:  BRA    331E
03316:  BTFSS  xD9.3
03318:  BRA    331E
....................              {
....................                bit_set(Red19_20,1); bit_set(Green19_20,1) ; 
0331A:  BSF    50.1
0331C:  BSF    54.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................          
....................       //} 
....................           
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_8);
0331E:  MOVLW  04
03320:  MOVLB  E
03322:  MOVWF  x75
03324:  MOVFF  4D,E76
03328:  MOVLB  0
0332A:  RCALL  2ED0
....................            IO_OUTPUT_B(IO_DEVICE_2, Red9_10);
0332C:  MOVLW  04
0332E:  MOVLB  E
03330:  MOVWF  x75
03332:  MOVFF  4E,E76
03336:  MOVLB  0
03338:  RCALL  2EE6
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_8);
0333A:  MOVLW  06
0333C:  MOVLB  E
0333E:  MOVWF  x75
03340:  MOVFF  51,E76
03344:  MOVLB  0
03346:  RCALL  2ED0
....................            IO_OUTPUT_B(IO_DEVICE_3, Green9_10);
03348:  MOVLW  06
0334A:  MOVLB  E
0334C:  MOVWF  x75
0334E:  MOVFF  52,E76
03352:  MOVLB  0
03354:  RCALL  2EE6
....................            
....................            IO_OUTPUT_A(IO_DEVICE_5, Red11_18);  
03356:  MOVLW  0A
03358:  MOVLB  E
0335A:  MOVWF  x75
0335C:  MOVFF  4F,E76
03360:  MOVLB  0
03362:  RCALL  2ED0
....................            IO_OUTPUT_B(IO_DEVICE_5, Red19_20);
03364:  MOVLW  0A
03366:  MOVLB  E
03368:  MOVWF  x75
0336A:  MOVFF  50,E76
0336E:  MOVLB  0
03370:  RCALL  2EE6
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_4, Green11_18);
03372:  MOVLW  08
03374:  MOVLB  E
03376:  MOVWF  x75
03378:  MOVFF  53,E76
0337C:  MOVLB  0
0337E:  RCALL  2ED0
....................            IO_OUTPUT_B(IO_DEVICE_4, Green19_20);
03380:  MOVLW  08
03382:  MOVLB  E
03384:  MOVWF  x75
03386:  MOVFF  54,E76
0338A:  MOVLB  0
0338C:  RCALL  2EE6
....................            
....................                                 
....................            //IO_OUTPUT_A(IO_DEVICE_4, Red1_8); //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_4, Red9_10); //jj test
....................            
....................            //IO_OUTPUT_A(IO_DEVICE_5, Green1_8);  //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_5, Green9_10); //jj test
....................                                            
....................            
....................    }
0338E:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
.................... /*
....................    if(NoOfPoint >= 10)
....................    {
....................       Inputt.B1 = ~InputType.B1;
....................       Inputt.B2 = ~InputType.B2;
....................       Inputt.B3 = ~InputType.B3;
....................       Inputt.B4 = ~InputType.B4;
....................       Inputt.B5 = ~InputType.B5;
....................       Inputt.B6 = ~InputType.B6;
....................       Inputt.B7 = ~InputType.B7;
....................       Inputt.B8 = ~InputType.B8;
....................       Inputt.B9 = ~InputType.B9;
....................       Inputt.B10 = ~InputType.B10;
....................    }
....................    if(NoOfPoint >= 20)
....................    {
....................       Inputt.B11 = ~InputType.B11;
....................       Inputt.B12 = ~InputType.B12;
....................       Inputt.B13 = ~InputType.B13;
....................       Inputt.B14 = ~InputType.B14;
....................       Inputt.B15 = ~InputType.B15;
....................       Inputt.B16 = ~InputType.B16;
....................       Inputt.B17 = ~InputType.B17;
....................       Inputt.B18 = ~InputType.B18;
....................       Inputt.B19 = ~InputType.B19;
....................       Inputt.B20 = ~InputType.B20;
....................    }
....................    */
....................  
....................    In.B1 = 1;
*
06C90:  MOVLB  D
06C92:  BSF    xC7.0
....................    In.B2 = 1;
06C94:  BSF    xC7.1
....................    In.B3 = 1;
06C96:  BSF    xC7.2
....................    In.B4 = 1;
06C98:  BSF    xC7.3
....................    In.B5 = 1;
06C9A:  BSF    xC7.4
....................    In.B6 = 1;
06C9C:  BSF    xC7.5
....................    In.B7 = 1;
06C9E:  BSF    xC7.6
....................    In.B8 = 1;
06CA0:  BSF    xC7.7
....................    In.B9 = 1;
06CA2:  BSF    xC8.0
....................    In.B10 = 1;
06CA4:  BSF    xC8.1
....................    In.B11 = 1;
06CA6:  BSF    xC8.2
....................    In.B12 = 1;
06CA8:  BSF    xC8.3
....................    In.B13 = 1;
06CAA:  BSF    xC8.4
....................    In.B14 = 1;
06CAC:  BSF    xC8.5
....................    In.B15 = 1;
06CAE:  BSF    xC8.6
....................    In.B16 = 1;
06CB0:  BSF    xC8.7
....................    In.B17 = 1;
06CB2:  BSF    xC9.0
....................    In.B18 = 1;
06CB4:  BSF    xC9.1
....................    In.B19 = 1;
06CB6:  BSF    xC9.2
....................    In.B20 = 1;
06CB8:  BSF    xC9.3
.................... 
.................... 
....................    Ack.B1 = 0;
06CBA:  BCF    xC3.0
....................    Ack.B2 = 0;
06CBC:  BCF    xC3.1
....................    Ack.B3 = 0;
06CBE:  BCF    xC3.2
....................    Ack.B4 = 0;
06CC0:  BCF    xC3.3
....................    Ack.B5 = 0;
06CC2:  BCF    xC3.4
....................    Ack.B6 = 0;
06CC4:  BCF    xC3.5
....................    Ack.B7 = 0;
06CC6:  BCF    xC3.6
....................    Ack.B8 = 0;
06CC8:  BCF    xC3.7
....................    Ack.B9 = 0;
06CCA:  BCF    xC4.0
....................    Ack.B10 = 0;
06CCC:  BCF    xC4.1
....................    Ack.B11 = 0;
06CCE:  BCF    xC4.2
....................    Ack.B12 = 0;
06CD0:  BCF    xC4.3
....................    Ack.B13 = 0;
06CD2:  BCF    xC4.4
....................    Ack.B14 = 0;
06CD4:  BCF    xC4.5
....................    Ack.B15 = 0;
06CD6:  BCF    xC4.6
....................    Ack.B16 = 0;
06CD8:  BCF    xC4.7
....................    Ack.B17 = 0;
06CDA:  BCF    xC5.0
....................    Ack.B18 = 0;
06CDC:  BCF    xC5.1
....................    Ack.B19 = 0;
06CDE:  BCF    xC5.2
....................    Ack.B20 = 0;  
06CE0:  BCF    xC5.3
06CE2:  MOVLB  0
06CE4:  GOTO   6DCA (RETURN)
....................    
....................    // Debug    
.................... }
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
06CE8:  MOVFF  34,E6D
....................    output_temp[1] = output9_16;
06CEC:  MOVFF  35,E6E
.................... 
.................... 
....................        if((Input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
06CF0:  BSF    F94.2
06CF2:  BTFSC  F82.2
06CF4:  BRA    6CFA
06CF6:  BTFSS  1C.6
06CF8:  BRA    6CFE
06CFA:  BTFSS  1C.4
06CFC:  BRA    6D0A
06CFE:  MOVLW  32
06D00:  MOVLB  E
06D02:  MOVWF  x76
06D04:  MOVLB  0
06D06:  CALL   0662
....................        if((Input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
06D0A:  BSF    F94.2
06D0C:  BTFSC  F82.2
06D0E:  BRA    6D14
06D10:  BTFSS  1C.6
06D12:  BRA    6D18
06D14:  BTFSS  1C.4
06D16:  BRA    6DAE
....................        {
....................          send_SMS_count = 0;
06D18:  MOVLB  D
06D1A:  CLRF   xA6
....................          restart_wdt();
06D1C:  CLRWDT
....................            if((Input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
06D1E:  BSF    F94.2
06D20:  BTFSC  F82.2
06D22:  BRA    6D28
06D24:  BTFSS  1C.6
06D26:  BRA    6D2C
06D28:  BTFSS  1C.4
06D2A:  BRA    6DAA
....................            {
....................              restart_wdt();
06D2C:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
06D2E:  MOVF   31,F
06D30:  BNZ   6D36
06D32:  MOVLW  06
06D34:  MOVWF  31
....................              Test = 1;
06D36:  BSF    1C.6
....................               //if(NoOfPoint >= 16)
....................              // {
....................              
....................               IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
06D38:  MOVLW  04
06D3A:  MOVLB  E
06D3C:  MOVWF  x75
06D3E:  SETF   x76
06D40:  MOVLB  0
06D42:  CALL   2ED0
....................               IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
06D46:  MOVLW  04
06D48:  MOVLB  E
06D4A:  MOVWF  x75
06D4C:  SETF   x76
06D4E:  MOVLB  0
06D50:  CALL   2EE6
....................                          
....................               IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
06D54:  MOVLW  06
06D56:  MOVLB  E
06D58:  MOVWF  x75
06D5A:  SETF   x76
06D5C:  MOVLB  0
06D5E:  CALL   2ED0
....................               IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
06D62:  MOVLW  06
06D64:  MOVLB  E
06D66:  MOVWF  x75
06D68:  SETF   x76
06D6A:  MOVLB  0
06D6C:  CALL   2EE6
....................               
....................               IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
06D70:  MOVLW  08
06D72:  MOVLB  E
06D74:  MOVWF  x75
06D76:  SETF   x76
06D78:  MOVLB  0
06D7A:  CALL   2ED0
....................               IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
06D7E:  MOVLW  08
06D80:  MOVLB  E
06D82:  MOVWF  x75
06D84:  SETF   x76
06D86:  MOVLB  0
06D88:  CALL   2EE6
....................                         
....................               IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
06D8C:  MOVLW  0A
06D8E:  MOVLB  E
06D90:  MOVWF  x75
06D92:  SETF   x76
06D94:  MOVLB  0
06D96:  CALL   2ED0
....................               IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
06D9A:  MOVLW  0A
06D9C:  MOVLB  E
06D9E:  MOVWF  x75
06DA0:  SETF   x76
06DA2:  MOVLB  0
06DA4:  CALL   2EE6
06DA8:  MOVLB  D
....................                  //PCF8575_write(0xFF,0x00,Input1_8_Wr_addr);
....................                  //PCF8575_write(0xFF,0x00,Input9_16_Wr_addr);
....................                  //IO_OUTPUT_B(IO_DEVICE_0, 0x00);
....................                  //IO_OUTPUT_B(IO_DEVICE_1, 0x00);
....................              // }
....................              
....................            }
....................        }
06DAA:  BRA    6DC0
06DAC:  MOVLB  0
....................        else if(Input(Ptest) == 1 && Test == 1)
06DAE:  BSF    F94.2
06DB0:  BTFSS  F82.2
06DB2:  BRA    6DBE
06DB4:  BTFSS  1C.6
06DB6:  BRA    6DBE
....................        {
....................            T_test = 0x00;
06DB8:  CLRF   31
....................            Test = 0;
06DBA:  BCF    1C.6
....................            Test_fault = 0;
06DBC:  BCF    1C.5
06DBE:  MOVLB  D
....................        }
.................... 
....................        if(Test_fault == 1)
06DC0:  BTFSS  1C.5
06DC2:  BRA    6DD6
....................        {
....................           functointest_f = 1;
06DC4:  BSF    32.3
....................           ForceAllAlarm();
06DC6:  MOVLB  0
06DC8:  BRA    6C90
.................... 
....................           //Anal_Function();
....................           // jj 26/7/60
....................           if(Input(Ptest) == 1)
06DCA:  BSF    F94.2
06DCC:  BTFSS  F82.2
06DCE:  BRA    6DD2
....................           {
....................             Test_fault = 0;
06DD0:  BCF    1C.5
....................           }
....................        }
06DD2:  BRA    6DEC
06DD4:  MOVLB  D
....................        else if(Input(Ptest) == 1 && Test == 1)
06DD6:  BSF    F94.2
06DD8:  BTFSS  F82.2
06DDA:  BRA    6DEC
06DDC:  BTFSS  1C.6
06DDE:  BRA    6DEC
....................        {
....................           if(NoOfPoint >= 16)
06DE0:  MOVF   58,W
06DE2:  SUBLW  0F
06DE4:  BC    6DE6
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
....................           T_test = 0x00;
06DE6:  CLRF   31
....................           Test = 0;
06DE8:  BCF    1C.6
....................           Test_fault = 0;
06DEA:  BCF    1C.5
06DEC:  MOVLB  0
....................        }
06DEE:  GOTO   BBAA (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((Input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
0390E:  BSF    F94.0
03910:  BTFSC  F82.0
03912:  BRA    3918
03914:  BTFSS  1C.7
03916:  BRA    391C
03918:  BTFSS  1C.2
0391A:  BRA    3928
0391C:  MOVLW  32
0391E:  MOVLB  E
03920:  MOVWF  x76
03922:  MOVLB  0
03924:  CALL   0662
....................    if((Input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
03928:  BSF    F94.0
0392A:  BTFSC  F82.0
0392C:  BRA    3932
0392E:  BTFSS  1C.7
03930:  BRA    3936
03932:  BTFSS  1C.2
03934:  BRA    3AB8
....................    {
....................             AutoAckFlag = 0;
03936:  BCF    1C.2
....................             AutoAckDelayTime = 0x00;
03938:  CLRF   1F
....................       
....................                //if(In.B1 == 1 || ((Inputt.B1 ^ InputType.B1) == 1))
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
0393A:  MOVLB  D
0393C:  BTFSC  xC7.0
0393E:  BRA    3944
03940:  BTFSS  xCB.0
03942:  BRA    394E
....................            {
....................              Ack.B1 = 1;
03944:  BSF    xC3.0
....................              In.B1 = 0;
03946:  BCF    xC7.0
....................              In2.B1 = 0;      //for auto reset
03948:  BCF    xCB.0
....................              Output.B1 = 0;
0394A:  BCF    xAB.0
....................              SendSMS.B1 =0;
0394C:  BCF    xDB.0
....................            }
....................            //if(In.B2 == 1 || ((Inputt.B2 ^ InputType.B2) == 1))
....................            if((In.B2 == 1)||(In2.B2 == 1))
0394E:  BTFSC  xC7.1
03950:  BRA    3956
03952:  BTFSS  xCB.1
03954:  BRA    3960
....................            {
....................              Ack.B2 = 1;
03956:  BSF    xC3.1
....................              In.B2 = 0;
03958:  BCF    xC7.1
....................              In2.B2 = 0;      //for auto reset
0395A:  BCF    xCB.1
....................              Output.B2 = 0;
0395C:  BCF    xAB.1
....................              SendSMS.B2 =0;
0395E:  BCF    xDB.1
....................            }
....................            //if(In.B3 == 1 || ((Inputt.B3 ^ InputType.B3) == 1))
....................            if((In.B3 == 1)||(In2.B3 == 1))
03960:  BTFSC  xC7.2
03962:  BRA    3968
03964:  BTFSS  xCB.2
03966:  BRA    3972
....................            {
....................              Ack.B3 = 1;
03968:  BSF    xC3.2
....................              In.B3 = 0;
0396A:  BCF    xC7.2
....................              In2.B3 = 0;      //for auto reset
0396C:  BCF    xCB.2
....................              Output.B3 = 0;
0396E:  BCF    xAB.2
....................              SendSMS.B3 =0;
03970:  BCF    xDB.2
....................            }
....................            //if(In.B4 == 1 || ((Inputt.B4 ^ InputType.B4) == 1))
....................            if((In.B4 == 1)||(In2.B4 == 1))
03972:  BTFSC  xC7.3
03974:  BRA    397A
03976:  BTFSS  xCB.3
03978:  BRA    3984
....................            {
....................              Ack.B4 = 1;
0397A:  BSF    xC3.3
....................              In.B4 = 0;
0397C:  BCF    xC7.3
....................              In2.B4 = 0;      //for auto reset
0397E:  BCF    xCB.3
....................              Output.B4 = 0;
03980:  BCF    xAB.3
....................              SendSMS.B4 =0;
03982:  BCF    xDB.3
....................            }
....................            //if(In.B5 == 1 || ((Inputt.B5 ^ InputType.B5) == 1))
....................            if((In.B5 == 1)||(In2.B5 == 1))
03984:  BTFSC  xC7.4
03986:  BRA    398C
03988:  BTFSS  xCB.4
0398A:  BRA    3996
....................            {
....................              Ack.B5 = 1;
0398C:  BSF    xC3.4
....................              In.B5 = 0;
0398E:  BCF    xC7.4
....................              In2.B5 = 0;      //for auto reset
03990:  BCF    xCB.4
....................              Output.B5 = 0;
03992:  BCF    xAB.4
....................              SendSMS.B5 =0;
03994:  BCF    xDB.4
....................            }
....................            //if(In.B6 == 1 || ((Inputt.B6 ^ InputType.B6) == 1))
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
03996:  BTFSC  xC7.5
03998:  BRA    399E
0399A:  BTFSS  xCB.5
0399C:  BRA    39A8
....................            {
....................              Ack.B6 = 1;
0399E:  BSF    xC3.5
....................              In.B6 = 0;
039A0:  BCF    xC7.5
....................              In2.B6 = 0;      //for auto reset
039A2:  BCF    xCB.5
....................              Output.B6 = 0;
039A4:  BCF    xAB.5
....................              SendSMS.B6 =0;
039A6:  BCF    xDB.5
....................            }
....................            //if(In.B7 == 1 || ((Inputt.B7 ^ InputType.B7) == 1))
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
039A8:  BTFSC  xC7.6
039AA:  BRA    39B0
039AC:  BTFSS  xCB.6
039AE:  BRA    39BA
....................            {
....................              Ack.B7 = 1;
039B0:  BSF    xC3.6
....................              In.B7 = 0;
039B2:  BCF    xC7.6
....................              In2.B7 = 0;      //for auto reset
039B4:  BCF    xCB.6
....................              Output.B7 = 0;
039B6:  BCF    xAB.6
....................              SendSMS.B7 =0;
039B8:  BCF    xDB.6
....................            }
....................            //if(In.B8 == 1 || ((Inputt.B8 ^ InputType.B8) == 1))
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
039BA:  BTFSC  xC7.7
039BC:  BRA    39C2
039BE:  BTFSS  xCB.7
039C0:  BRA    39CC
....................            {
....................              Ack.B8 = 1;
039C2:  BSF    xC3.7
....................              In.B8 = 0;
039C4:  BCF    xC7.7
....................              In2.B8 = 0;      //for auto reset
039C6:  BCF    xCB.7
....................              Output.B8 = 0;
039C8:  BCF    xAB.7
....................              SendSMS.B8 =0;
039CA:  BCF    xDB.7
....................            }
....................           // if(In.B9 == 1 || ((Inputt.B9 ^ InputType.B9) == 1))
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
039CC:  BTFSC  xC8.0
039CE:  BRA    39D4
039D0:  BTFSS  xCC.0
039D2:  BRA    39DE
....................            {
....................              Ack.B9 = 1;
039D4:  BSF    xC4.0
....................              In.B9 = 0;
039D6:  BCF    xC8.0
....................              In2.B9 = 0;      //for auto reset
039D8:  BCF    xCC.0
....................              Output.B9 = 0;
039DA:  BCF    xAC.0
....................              SendSMS.B9 =0;
039DC:  BCF    xDC.0
....................            }
....................            //if(In.B10 == 1 || ((Inputt.B10 ^ InputType.B10) == 1))
....................            if((In.B10 == 1)||(In2.B10 == 1))
039DE:  BTFSC  xC8.1
039E0:  BRA    39E6
039E2:  BTFSS  xCC.1
039E4:  BRA    39F0
....................            {
....................              Ack.B10 = 1;
039E6:  BSF    xC4.1
....................              In.B10 = 0;
039E8:  BCF    xC8.1
....................              In2.B10 = 0;      //for auto reset
039EA:  BCF    xCC.1
....................              Output.B10 = 0;
039EC:  BCF    xAC.1
....................              SendSMS.B10 =0;
039EE:  BCF    xDC.1
....................            }
....................            //if(In.B11 == 1 || ((Inputt.B11 ^ InputType.B11) == 1))
....................            if((In.B11 == 1)||(In2.B11 == 1))
039F0:  BTFSC  xC8.2
039F2:  BRA    39F8
039F4:  BTFSS  xCC.2
039F6:  BRA    3A02
....................            {
....................              Ack.B11 = 1;
039F8:  BSF    xC4.2
....................              In.B11 = 0;
039FA:  BCF    xC8.2
....................              In2.B11 = 0;      //for auto reset
039FC:  BCF    xCC.2
....................              Output.B11 = 0;
039FE:  BCF    xAC.2
....................              SendSMS.B11 =0;
03A00:  BCF    xDC.2
....................            }
....................            //if(In.B12 == 1 || ((Inputt.B12 ^ InputType.B12) == 1))
....................            if((In.B12 == 1)||(In2.B12 == 1))
03A02:  BTFSC  xC8.3
03A04:  BRA    3A0A
03A06:  BTFSS  xCC.3
03A08:  BRA    3A14
....................            {
....................              Ack.B12 = 1;
03A0A:  BSF    xC4.3
....................              In.B12 = 0;
03A0C:  BCF    xC8.3
....................              In2.B12 = 0;      //for auto reset
03A0E:  BCF    xCC.3
....................              Output.B12 = 0;
03A10:  BCF    xAC.3
....................              SendSMS.B12 =0;
03A12:  BCF    xDC.3
....................            }
....................            //if(In.B13 == 1 || ((Inputt.B13 ^ InputType.B13) == 1))
....................            if((In.B13 == 1 )||(In2.B13 == 1 ))
03A14:  BTFSC  xC8.4
03A16:  BRA    3A1C
03A18:  BTFSS  xCC.4
03A1A:  BRA    3A26
....................            {
....................              Ack.B13 = 1;
03A1C:  BSF    xC4.4
....................              In.B13 = 0;
03A1E:  BCF    xC8.4
....................              In2.B13 = 0;      //for auto reset
03A20:  BCF    xCC.4
....................              Output.B13 = 0;
03A22:  BCF    xAC.4
....................              SendSMS.B13 =0;
03A24:  BCF    xDC.4
....................            }
....................            //if(In.B14 == 1 || ((Inputt.B14 ^ InputType.B14) == 1))
....................            if((In.B14 == 1)||(In2.B14 == 1))
03A26:  BTFSC  xC8.5
03A28:  BRA    3A2E
03A2A:  BTFSS  xCC.5
03A2C:  BRA    3A38
....................            {
....................              Ack.B14 = 1;
03A2E:  BSF    xC4.5
....................              In.B14 = 0;
03A30:  BCF    xC8.5
....................              In2.B14 = 0;      //for auto reset
03A32:  BCF    xCC.5
....................              Output.B14 = 0;
03A34:  BCF    xAC.5
....................              SendSMS.B14 =0;
03A36:  BCF    xDC.5
....................            }
....................            //if(In.B15 == 1 || ((Inputt.B15 ^ InputType.B15) == 1))
....................            if((In.B15 == 1)||(In2.B15 == 1))
03A38:  BTFSC  xC8.6
03A3A:  BRA    3A40
03A3C:  BTFSS  xCC.6
03A3E:  BRA    3A4A
....................            {
....................              Ack.B15 = 1;
03A40:  BSF    xC4.6
....................              In.B15 = 0;
03A42:  BCF    xC8.6
....................              In2.B15 = 0;      //for auto reset
03A44:  BCF    xCC.6
....................              Output.B15 = 0;
03A46:  BCF    xAC.6
....................              SendSMS.B15 =0;
03A48:  BCF    xDC.6
....................            }
....................            //if(In.B16 == 1 || ((Inputt.B16 ^ InputType.B16) == 1))
....................            if((In.B16 == 1)||(In2.B16 == 1))
03A4A:  BTFSC  xC8.7
03A4C:  BRA    3A52
03A4E:  BTFSS  xCC.7
03A50:  BRA    3A5C
....................            {
....................              Ack.B16 = 1;
03A52:  BSF    xC4.7
....................              In.B16 = 0;
03A54:  BCF    xC8.7
....................              In2.B16 = 0;      //for auto reset
03A56:  BCF    xCC.7
....................              Output.B16 = 0;
03A58:  BCF    xAC.7
....................              SendSMS.B16 =0;
03A5A:  BCF    xDC.7
....................            }
....................         
....................            //if(In.B17 == 1 || ((Inputt.B17 ^ InputType.B17) == 1))
....................            if((In.B17 == 1)||(In2.B17 == 1))
03A5C:  BTFSC  xC9.0
03A5E:  BRA    3A64
03A60:  BTFSS  xCD.0
03A62:  BRA    3A6E
....................            {
....................              Ack.B17 = 1;
03A64:  BSF    xC5.0
....................              In.B17 = 0;
03A66:  BCF    xC9.0
....................              In2.B17 = 0;      //for auto reset
03A68:  BCF    xCD.0
....................              Output.B17 = 0;
03A6A:  BCF    xAD.0
....................              SendSMS.B17 =0;
03A6C:  BCF    xDD.0
....................            }
....................            //if(In.B18 == 1 || ((Inputt.B18 ^ InputType.B18) == 1))
....................            if((In.B18 == 1)||(In2.B18 == 1))
03A6E:  BTFSC  xC9.1
03A70:  BRA    3A76
03A72:  BTFSS  xCD.1
03A74:  BRA    3A80
....................            {
....................              Ack.B18 = 1;
03A76:  BSF    xC5.1
....................              In.B18 = 0;
03A78:  BCF    xC9.1
....................              In2.B18 = 0;      //for auto reset
03A7A:  BCF    xCD.1
....................              Output.B18 = 0;
03A7C:  BCF    xAD.1
....................              SendSMS.B18 =0;
03A7E:  BCF    xDD.1
....................            }
....................            //if(In.B19 == 1 || ((Inputt.B19 ^ InputType.B19) == 1))
....................            if((In.B19 == 1)||(In2.B19 == 1))
03A80:  BTFSC  xC9.2
03A82:  BRA    3A88
03A84:  BTFSS  xCD.2
03A86:  BRA    3A92
....................            {
....................              Ack.B19 = 1;
03A88:  BSF    xC5.2
....................              In.B19 = 0;
03A8A:  BCF    xC9.2
....................              In2.B19 = 0;      //for auto reset
03A8C:  BCF    xCD.2
....................              Output.B19 = 0;
03A8E:  BCF    xAD.2
....................              SendSMS.B19 =0;
03A90:  BCF    xDD.2
....................            }
....................            if((In.B20 == 1)||(In2.B20 == 1))
03A92:  BTFSC  xC9.3
03A94:  BRA    3A9A
03A96:  BTFSS  xCD.3
03A98:  BRA    3AA4
....................            {
....................              Ack.B20 = 1;
03A9A:  BSF    xC5.3
....................              In.B20 = 0;
03A9C:  BCF    xC9.3
....................              In2.B20 = 0;      //for auto reset
03A9E:  BCF    xCD.3
....................              Output.B20 = 0;
03AA0:  BCF    xAD.3
....................              SendSMS.B20 =0;
03AA2:  BCF    xDD.3
....................            }
....................            ///////////////////////////////////////////////////////////
....................             if(functointest_f){
03AA4:  BTFSS  32.3
03AA6:  BRA    3AAA
....................                functointest_f = 0;
03AA8:  BCF    32.3
....................             }
....................             Ack_F = 1;
03AAA:  BSF    1C.7
....................             output_bit(Pbuzzer,OffRelay);   //Buzzer
03AAC:  BCF    F89.4
03AAE:  BCF    F92.4
....................             output_bit(Pbell,OffRelay);     //Bell
03AB0:  BCF    F89.3
03AB2:  BCF    F92.3
....................    }
03AB4:  BRA    3AC6
03AB6:  MOVLB  0
....................    else if(Input(Pack) == 1 && Ack_F == 1)
03AB8:  BSF    F94.0
03ABA:  BTFSS  F82.0
03ABC:  BRA    3AC4
03ABE:  BTFSS  1C.7
03AC0:  BRA    3AC4
....................    {
....................       Ack_F = 0;
03AC2:  BCF    1C.7
03AC4:  MOVLB  D
....................    }
03AC6:  MOVLB  0
03AC8:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((Input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
03ACA:  BSF    F94.1
03ACC:  BTFSC  F82.1
03ACE:  BRA    3AD4
03AD0:  BTFSS  32.0
03AD2:  BRA    3AD8
03AD4:  BTFSS  1C.3
03AD6:  BRA    3AE4
03AD8:  MOVLW  32
03ADA:  MOVLB  E
03ADC:  MOVWF  x76
03ADE:  MOVLB  0
03AE0:  CALL   0662
....................     if((Input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
03AE4:  BSF    F94.1
03AE6:  BTFSC  F82.1
03AE8:  BRA    3AEE
03AEA:  BTFSS  32.0
03AEC:  BRA    3AF2
03AEE:  BTFSS  1C.3
03AF0:  BRA    3E1A
....................     {
....................        AutoResetFlag = 0;
03AF2:  BCF    1C.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
03AF4:  MOVLW  00
03AF6:  MOVLB  D
03AF8:  BTFSC  xA7.0
03AFA:  MOVLW  01
03AFC:  MOVLB  E
03AFE:  MOVWF  x77
03B00:  MOVLW  00
03B02:  MOVLB  D
03B04:  BTFSC  xAF.0
03B06:  MOVLW  01
03B08:  MOVLB  E
03B0A:  XORWF  x77,W
03B0C:  BNZ   3B1C
03B0E:  MOVLB  D
03B10:  BTFSS  xC7.0
03B12:  BRA    3B18
03B14:  MOVLB  E
03B16:  BRA    3B1C
03B18:  BSF    xAB.0
03B1A:  MOVLB  E
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
03B1C:  MOVLW  00
03B1E:  MOVLB  D
03B20:  BTFSC  xA7.1
03B22:  MOVLW  01
03B24:  MOVLB  E
03B26:  MOVWF  x77
03B28:  MOVLW  00
03B2A:  MOVLB  D
03B2C:  BTFSC  xAF.1
03B2E:  MOVLW  01
03B30:  MOVLB  E
03B32:  XORWF  x77,W
03B34:  BNZ   3B44
03B36:  MOVLB  D
03B38:  BTFSS  xC7.1
03B3A:  BRA    3B40
03B3C:  MOVLB  E
03B3E:  BRA    3B44
03B40:  BSF    xAB.1
03B42:  MOVLB  E
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
03B44:  MOVLW  00
03B46:  MOVLB  D
03B48:  BTFSC  xA7.2
03B4A:  MOVLW  01
03B4C:  MOVLB  E
03B4E:  MOVWF  x77
03B50:  MOVLW  00
03B52:  MOVLB  D
03B54:  BTFSC  xAF.2
03B56:  MOVLW  01
03B58:  MOVLB  E
03B5A:  XORWF  x77,W
03B5C:  BNZ   3B6C
03B5E:  MOVLB  D
03B60:  BTFSS  xC7.2
03B62:  BRA    3B68
03B64:  MOVLB  E
03B66:  BRA    3B6C
03B68:  BSF    xAB.2
03B6A:  MOVLB  E
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
03B6C:  MOVLW  00
03B6E:  MOVLB  D
03B70:  BTFSC  xA7.3
03B72:  MOVLW  01
03B74:  MOVLB  E
03B76:  MOVWF  x77
03B78:  MOVLW  00
03B7A:  MOVLB  D
03B7C:  BTFSC  xAF.3
03B7E:  MOVLW  01
03B80:  MOVLB  E
03B82:  XORWF  x77,W
03B84:  BNZ   3B94
03B86:  MOVLB  D
03B88:  BTFSS  xC7.3
03B8A:  BRA    3B90
03B8C:  MOVLB  E
03B8E:  BRA    3B94
03B90:  BSF    xAB.3
03B92:  MOVLB  E
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
03B94:  MOVLW  00
03B96:  MOVLB  D
03B98:  BTFSC  xA7.4
03B9A:  MOVLW  01
03B9C:  MOVLB  E
03B9E:  MOVWF  x77
03BA0:  MOVLW  00
03BA2:  MOVLB  D
03BA4:  BTFSC  xAF.4
03BA6:  MOVLW  01
03BA8:  MOVLB  E
03BAA:  XORWF  x77,W
03BAC:  BNZ   3BBC
03BAE:  MOVLB  D
03BB0:  BTFSS  xC7.4
03BB2:  BRA    3BB8
03BB4:  MOVLB  E
03BB6:  BRA    3BBC
03BB8:  BSF    xAB.4
03BBA:  MOVLB  E
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
03BBC:  MOVLW  00
03BBE:  MOVLB  D
03BC0:  BTFSC  xA7.5
03BC2:  MOVLW  01
03BC4:  MOVLB  E
03BC6:  MOVWF  x77
03BC8:  MOVLW  00
03BCA:  MOVLB  D
03BCC:  BTFSC  xAF.5
03BCE:  MOVLW  01
03BD0:  MOVLB  E
03BD2:  XORWF  x77,W
03BD4:  BNZ   3BE4
03BD6:  MOVLB  D
03BD8:  BTFSS  xC7.5
03BDA:  BRA    3BE0
03BDC:  MOVLB  E
03BDE:  BRA    3BE4
03BE0:  BSF    xAB.5
03BE2:  MOVLB  E
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
03BE4:  MOVLW  00
03BE6:  MOVLB  D
03BE8:  BTFSC  xA7.6
03BEA:  MOVLW  01
03BEC:  MOVLB  E
03BEE:  MOVWF  x77
03BF0:  MOVLW  00
03BF2:  MOVLB  D
03BF4:  BTFSC  xAF.6
03BF6:  MOVLW  01
03BF8:  MOVLB  E
03BFA:  XORWF  x77,W
03BFC:  BNZ   3C0C
03BFE:  MOVLB  D
03C00:  BTFSS  xC7.6
03C02:  BRA    3C08
03C04:  MOVLB  E
03C06:  BRA    3C0C
03C08:  BSF    xAB.6
03C0A:  MOVLB  E
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
03C0C:  MOVLW  00
03C0E:  MOVLB  D
03C10:  BTFSC  xA7.7
03C12:  MOVLW  01
03C14:  MOVLB  E
03C16:  MOVWF  x77
03C18:  MOVLW  00
03C1A:  MOVLB  D
03C1C:  BTFSC  xAF.7
03C1E:  MOVLW  01
03C20:  MOVLB  E
03C22:  XORWF  x77,W
03C24:  BNZ   3C34
03C26:  MOVLB  D
03C28:  BTFSS  xC7.7
03C2A:  BRA    3C30
03C2C:  MOVLB  E
03C2E:  BRA    3C34
03C30:  BSF    xAB.7
03C32:  MOVLB  E
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
03C34:  MOVLW  00
03C36:  MOVLB  D
03C38:  BTFSC  xA8.0
03C3A:  MOVLW  01
03C3C:  MOVLB  E
03C3E:  MOVWF  x77
03C40:  MOVLW  00
03C42:  MOVLB  D
03C44:  BTFSC  xB0.0
03C46:  MOVLW  01
03C48:  MOVLB  E
03C4A:  XORWF  x77,W
03C4C:  BNZ   3C5C
03C4E:  MOVLB  D
03C50:  BTFSS  xC8.0
03C52:  BRA    3C58
03C54:  MOVLB  E
03C56:  BRA    3C5C
03C58:  BSF    xAC.0
03C5A:  MOVLB  E
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
03C5C:  MOVLW  00
03C5E:  MOVLB  D
03C60:  BTFSC  xA8.1
03C62:  MOVLW  01
03C64:  MOVLB  E
03C66:  MOVWF  x77
03C68:  MOVLW  00
03C6A:  MOVLB  D
03C6C:  BTFSC  xB0.1
03C6E:  MOVLW  01
03C70:  MOVLB  E
03C72:  XORWF  x77,W
03C74:  BNZ   3C84
03C76:  MOVLB  D
03C78:  BTFSS  xC8.1
03C7A:  BRA    3C80
03C7C:  MOVLB  E
03C7E:  BRA    3C84
03C80:  BSF    xAC.1
03C82:  MOVLB  E
....................        if((Inputt.B11 ^ InputType.B11) == 0 && In.B11 == 0) Output.B11 = 1;
03C84:  MOVLW  00
03C86:  MOVLB  D
03C88:  BTFSC  xA8.2
03C8A:  MOVLW  01
03C8C:  MOVLB  E
03C8E:  MOVWF  x77
03C90:  MOVLW  00
03C92:  MOVLB  D
03C94:  BTFSC  xB0.2
03C96:  MOVLW  01
03C98:  MOVLB  E
03C9A:  XORWF  x77,W
03C9C:  BNZ   3CAC
03C9E:  MOVLB  D
03CA0:  BTFSS  xC8.2
03CA2:  BRA    3CA8
03CA4:  MOVLB  E
03CA6:  BRA    3CAC
03CA8:  BSF    xAC.2
03CAA:  MOVLB  E
....................        if((Inputt.B12 ^ InputType.B12) == 0 && In.B12 == 0) Output.B12 = 1;
03CAC:  MOVLW  00
03CAE:  MOVLB  D
03CB0:  BTFSC  xA8.3
03CB2:  MOVLW  01
03CB4:  MOVLB  E
03CB6:  MOVWF  x77
03CB8:  MOVLW  00
03CBA:  MOVLB  D
03CBC:  BTFSC  xB0.3
03CBE:  MOVLW  01
03CC0:  MOVLB  E
03CC2:  XORWF  x77,W
03CC4:  BNZ   3CD4
03CC6:  MOVLB  D
03CC8:  BTFSS  xC8.3
03CCA:  BRA    3CD0
03CCC:  MOVLB  E
03CCE:  BRA    3CD4
03CD0:  BSF    xAC.3
03CD2:  MOVLB  E
....................        if((Inputt.B13 ^ InputType.B13) == 0 && In.B13 == 0) Output.B13 = 1;
03CD4:  MOVLW  00
03CD6:  MOVLB  D
03CD8:  BTFSC  xA8.4
03CDA:  MOVLW  01
03CDC:  MOVLB  E
03CDE:  MOVWF  x77
03CE0:  MOVLW  00
03CE2:  MOVLB  D
03CE4:  BTFSC  xB0.4
03CE6:  MOVLW  01
03CE8:  MOVLB  E
03CEA:  XORWF  x77,W
03CEC:  BNZ   3CFC
03CEE:  MOVLB  D
03CF0:  BTFSS  xC8.4
03CF2:  BRA    3CF8
03CF4:  MOVLB  E
03CF6:  BRA    3CFC
03CF8:  BSF    xAC.4
03CFA:  MOVLB  E
....................        if((Inputt.B14 ^ InputType.B14) == 0 && In.B14 == 0) Output.B14 = 1;
03CFC:  MOVLW  00
03CFE:  MOVLB  D
03D00:  BTFSC  xA8.5
03D02:  MOVLW  01
03D04:  MOVLB  E
03D06:  MOVWF  x77
03D08:  MOVLW  00
03D0A:  MOVLB  D
03D0C:  BTFSC  xB0.5
03D0E:  MOVLW  01
03D10:  MOVLB  E
03D12:  XORWF  x77,W
03D14:  BNZ   3D24
03D16:  MOVLB  D
03D18:  BTFSS  xC8.5
03D1A:  BRA    3D20
03D1C:  MOVLB  E
03D1E:  BRA    3D24
03D20:  BSF    xAC.5
03D22:  MOVLB  E
....................        if((Inputt.B15 ^ InputType.B15) == 0 && In.B15 == 0) Output.B15 = 1;
03D24:  MOVLW  00
03D26:  MOVLB  D
03D28:  BTFSC  xA8.6
03D2A:  MOVLW  01
03D2C:  MOVLB  E
03D2E:  MOVWF  x77
03D30:  MOVLW  00
03D32:  MOVLB  D
03D34:  BTFSC  xB0.6
03D36:  MOVLW  01
03D38:  MOVLB  E
03D3A:  XORWF  x77,W
03D3C:  BNZ   3D4C
03D3E:  MOVLB  D
03D40:  BTFSS  xC8.6
03D42:  BRA    3D48
03D44:  MOVLB  E
03D46:  BRA    3D4C
03D48:  BSF    xAC.6
03D4A:  MOVLB  E
....................        if((Inputt.B16 ^ InputType.B16) == 0 && In.B16 == 0) Output.B16 = 1;
03D4C:  MOVLW  00
03D4E:  MOVLB  D
03D50:  BTFSC  xA8.7
03D52:  MOVLW  01
03D54:  MOVLB  E
03D56:  MOVWF  x77
03D58:  MOVLW  00
03D5A:  MOVLB  D
03D5C:  BTFSC  xB0.7
03D5E:  MOVLW  01
03D60:  MOVLB  E
03D62:  XORWF  x77,W
03D64:  BNZ   3D74
03D66:  MOVLB  D
03D68:  BTFSS  xC8.7
03D6A:  BRA    3D70
03D6C:  MOVLB  E
03D6E:  BRA    3D74
03D70:  BSF    xAC.7
03D72:  MOVLB  E
....................        if((Inputt.B17 ^ InputType.B17) == 0 && In.B17 == 0) Output.B17 = 1;
03D74:  MOVLW  00
03D76:  MOVLB  D
03D78:  BTFSC  xA9.0
03D7A:  MOVLW  01
03D7C:  MOVLB  E
03D7E:  MOVWF  x77
03D80:  MOVLW  00
03D82:  MOVLB  D
03D84:  BTFSC  xB1.0
03D86:  MOVLW  01
03D88:  MOVLB  E
03D8A:  XORWF  x77,W
03D8C:  BNZ   3D9C
03D8E:  MOVLB  D
03D90:  BTFSS  xC9.0
03D92:  BRA    3D98
03D94:  MOVLB  E
03D96:  BRA    3D9C
03D98:  BSF    xAD.0
03D9A:  MOVLB  E
....................        if((Inputt.B18 ^ InputType.B18) == 0 && In.B18 == 0) Output.B18 = 1;
03D9C:  MOVLW  00
03D9E:  MOVLB  D
03DA0:  BTFSC  xA9.1
03DA2:  MOVLW  01
03DA4:  MOVLB  E
03DA6:  MOVWF  x77
03DA8:  MOVLW  00
03DAA:  MOVLB  D
03DAC:  BTFSC  xB1.1
03DAE:  MOVLW  01
03DB0:  MOVLB  E
03DB2:  XORWF  x77,W
03DB4:  BNZ   3DC4
03DB6:  MOVLB  D
03DB8:  BTFSS  xC9.1
03DBA:  BRA    3DC0
03DBC:  MOVLB  E
03DBE:  BRA    3DC4
03DC0:  BSF    xAD.1
03DC2:  MOVLB  E
....................        if((Inputt.B19 ^ InputType.B19) == 0 && In.B19 == 0) Output.B19 = 1;
03DC4:  MOVLW  00
03DC6:  MOVLB  D
03DC8:  BTFSC  xA9.2
03DCA:  MOVLW  01
03DCC:  MOVLB  E
03DCE:  MOVWF  x77
03DD0:  MOVLW  00
03DD2:  MOVLB  D
03DD4:  BTFSC  xB1.2
03DD6:  MOVLW  01
03DD8:  MOVLB  E
03DDA:  XORWF  x77,W
03DDC:  BNZ   3DEC
03DDE:  MOVLB  D
03DE0:  BTFSS  xC9.2
03DE2:  BRA    3DE8
03DE4:  MOVLB  E
03DE6:  BRA    3DEC
03DE8:  BSF    xAD.2
03DEA:  MOVLB  E
....................        if((Inputt.B20 ^ InputType.B20) == 0 && In.B20 == 0) Output.B20 = 1;
03DEC:  MOVLW  00
03DEE:  MOVLB  D
03DF0:  BTFSC  xA9.3
03DF2:  MOVLW  01
03DF4:  MOVLB  E
03DF6:  MOVWF  x77
03DF8:  MOVLW  00
03DFA:  MOVLB  D
03DFC:  BTFSC  xB1.3
03DFE:  MOVLW  01
03E00:  MOVLB  E
03E02:  XORWF  x77,W
03E04:  BNZ   3E14
03E06:  MOVLB  D
03E08:  BTFSS  xC9.3
03E0A:  BRA    3E10
03E0C:  MOVLB  E
03E0E:  BRA    3E14
03E10:  BSF    xAD.3
03E12:  MOVLB  E
....................        
.................... 
....................        Reset_F = 1;
03E14:  BSF    32.0
....................     }
03E16:  BRA    3E28
03E18:  MOVLB  0
....................     else if(Input(Preset) == 1 && Reset_F == 1)
03E1A:  BSF    F94.1
03E1C:  BTFSS  F82.1
03E1E:  BRA    3E26
03E20:  BTFSS  32.0
03E22:  BRA    3E26
....................     {
....................        Reset_F = 0;
03E24:  BCF    32.0
03E26:  MOVLB  E
....................     }
03E28:  MOVLB  0
03E2A:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
06E5C:  MOVLB  E
06E5E:  DECFSZ x6D,W
06E60:  BRA    749A
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
06E62:  MOVLW  00
06E64:  MOVLB  D
06E66:  BTFSC  xC7.0
06E68:  MOVLW  01
06E6A:  MOVLB  E
06E6C:  MOVWF  x70
06E6E:  MOVLW  00
06E70:  MOVLB  D
06E72:  BTFSC  xCB.0
06E74:  MOVLW  01
06E76:  MOVLB  E
06E78:  IORWF  x70,W
06E7A:  MOVWF  x6F
06E7C:  MOVLW  00
06E7E:  MOVLB  D
06E80:  BTFSS  xC3.0
06E82:  MOVLW  01
06E84:  MOVLB  E
06E86:  ANDWF  x6F,F
06E88:  MOVLW  00
06E8A:  MOVLB  D
06E8C:  BTFSC  xB7.0
06E8E:  MOVLW  01
06E90:  MOVLB  E
06E92:  MOVWF  x72
06E94:  MOVLW  00
06E96:  MOVLB  D
06E98:  BTFSC  xBB.0
06E9A:  MOVLW  01
06E9C:  MOVLB  E
06E9E:  IORWF  x72,W
06EA0:  ANDWF  x6F,W
06EA2:  BCF    x6E.0
06EA4:  BTFSC  FE8.0
06EA6:  BSF    x6E.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
06EA8:  MOVLW  00
06EAA:  BTFSC  x6E.0
06EAC:  MOVLW  01
06EAE:  MOVWF  x6F
06EB0:  MOVLW  00
06EB2:  MOVLB  D
06EB4:  BTFSC  xC7.1
06EB6:  MOVLW  01
06EB8:  MOVLB  E
06EBA:  MOVWF  x71
06EBC:  MOVLW  00
06EBE:  MOVLB  D
06EC0:  BTFSC  xCB.1
06EC2:  MOVLW  01
06EC4:  MOVLB  E
06EC6:  IORWF  x71,W
06EC8:  MOVWF  x70
06ECA:  MOVLW  00
06ECC:  MOVLB  D
06ECE:  BTFSS  xC3.1
06ED0:  MOVLW  01
06ED2:  MOVLB  E
06ED4:  ANDWF  x70,F
06ED6:  MOVLW  00
06ED8:  MOVLB  D
06EDA:  BTFSC  xB7.1
06EDC:  MOVLW  01
06EDE:  MOVLB  E
06EE0:  MOVWF  x73
06EE2:  MOVLW  00
06EE4:  MOVLB  D
06EE6:  BTFSC  xBB.1
06EE8:  MOVLW  01
06EEA:  MOVLB  E
06EEC:  IORWF  x73,W
06EEE:  ANDWF  x70,W
06EF0:  IORWF  x6F,W
06EF2:  BCF    x6E.0
06EF4:  BTFSC  FE8.0
06EF6:  BSF    x6E.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
06EF8:  MOVLW  00
06EFA:  BTFSC  x6E.0
06EFC:  MOVLW  01
06EFE:  MOVWF  x6F
06F00:  MOVLW  00
06F02:  MOVLB  D
06F04:  BTFSC  xC7.2
06F06:  MOVLW  01
06F08:  MOVLB  E
06F0A:  MOVWF  x71
06F0C:  MOVLW  00
06F0E:  MOVLB  D
06F10:  BTFSC  xCB.2
06F12:  MOVLW  01
06F14:  MOVLB  E
06F16:  IORWF  x71,W
06F18:  MOVWF  x70
06F1A:  MOVLW  00
06F1C:  MOVLB  D
06F1E:  BTFSS  xC3.2
06F20:  MOVLW  01
06F22:  MOVLB  E
06F24:  ANDWF  x70,F
06F26:  MOVLW  00
06F28:  MOVLB  D
06F2A:  BTFSC  xB7.2
06F2C:  MOVLW  01
06F2E:  MOVLB  E
06F30:  MOVWF  x73
06F32:  MOVLW  00
06F34:  MOVLB  D
06F36:  BTFSC  xBB.2
06F38:  MOVLW  01
06F3A:  MOVLB  E
06F3C:  IORWF  x73,W
06F3E:  ANDWF  x70,W
06F40:  IORWF  x6F,W
06F42:  BCF    x6E.0
06F44:  BTFSC  FE8.0
06F46:  BSF    x6E.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
06F48:  MOVLW  00
06F4A:  BTFSC  x6E.0
06F4C:  MOVLW  01
06F4E:  MOVWF  x6F
06F50:  MOVLW  00
06F52:  MOVLB  D
06F54:  BTFSC  xC7.3
06F56:  MOVLW  01
06F58:  MOVLB  E
06F5A:  MOVWF  x71
06F5C:  MOVLW  00
06F5E:  MOVLB  D
06F60:  BTFSC  xCB.3
06F62:  MOVLW  01
06F64:  MOVLB  E
06F66:  IORWF  x71,W
06F68:  MOVWF  x70
06F6A:  MOVLW  00
06F6C:  MOVLB  D
06F6E:  BTFSS  xC3.3
06F70:  MOVLW  01
06F72:  MOVLB  E
06F74:  ANDWF  x70,F
06F76:  MOVLW  00
06F78:  MOVLB  D
06F7A:  BTFSC  xB7.3
06F7C:  MOVLW  01
06F7E:  MOVLB  E
06F80:  MOVWF  x73
06F82:  MOVLW  00
06F84:  MOVLB  D
06F86:  BTFSC  xBB.3
06F88:  MOVLW  01
06F8A:  MOVLB  E
06F8C:  IORWF  x73,W
06F8E:  ANDWF  x70,W
06F90:  IORWF  x6F,W
06F92:  BCF    x6E.0
06F94:  BTFSC  FE8.0
06F96:  BSF    x6E.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
06F98:  MOVLW  00
06F9A:  BTFSC  x6E.0
06F9C:  MOVLW  01
06F9E:  MOVWF  x6F
06FA0:  MOVLW  00
06FA2:  MOVLB  D
06FA4:  BTFSC  xC7.4
06FA6:  MOVLW  01
06FA8:  MOVLB  E
06FAA:  MOVWF  x71
06FAC:  MOVLW  00
06FAE:  MOVLB  D
06FB0:  BTFSC  xCB.4
06FB2:  MOVLW  01
06FB4:  MOVLB  E
06FB6:  IORWF  x71,W
06FB8:  MOVWF  x70
06FBA:  MOVLW  00
06FBC:  MOVLB  D
06FBE:  BTFSS  xC3.4
06FC0:  MOVLW  01
06FC2:  MOVLB  E
06FC4:  ANDWF  x70,F
06FC6:  MOVLW  00
06FC8:  MOVLB  D
06FCA:  BTFSC  xB7.4
06FCC:  MOVLW  01
06FCE:  MOVLB  E
06FD0:  MOVWF  x73
06FD2:  MOVLW  00
06FD4:  MOVLB  D
06FD6:  BTFSC  xBB.4
06FD8:  MOVLW  01
06FDA:  MOVLB  E
06FDC:  IORWF  x73,W
06FDE:  ANDWF  x70,W
06FE0:  IORWF  x6F,W
06FE2:  BCF    x6E.0
06FE4:  BTFSC  FE8.0
06FE6:  BSF    x6E.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
06FE8:  MOVLW  00
06FEA:  BTFSC  x6E.0
06FEC:  MOVLW  01
06FEE:  MOVWF  x6F
06FF0:  MOVLW  00
06FF2:  MOVLB  D
06FF4:  BTFSC  xC7.5
06FF6:  MOVLW  01
06FF8:  MOVLB  E
06FFA:  MOVWF  x71
06FFC:  MOVLW  00
06FFE:  MOVLB  D
07000:  BTFSC  xCB.5
07002:  MOVLW  01
07004:  MOVLB  E
07006:  IORWF  x71,W
07008:  MOVWF  x70
0700A:  MOVLW  00
0700C:  MOVLB  D
0700E:  BTFSS  xC3.5
07010:  MOVLW  01
07012:  MOVLB  E
07014:  ANDWF  x70,F
07016:  MOVLW  00
07018:  MOVLB  D
0701A:  BTFSC  xB7.5
0701C:  MOVLW  01
0701E:  MOVLB  E
07020:  MOVWF  x73
07022:  MOVLW  00
07024:  MOVLB  D
07026:  BTFSC  xBB.5
07028:  MOVLW  01
0702A:  MOVLB  E
0702C:  IORWF  x73,W
0702E:  ANDWF  x70,W
07030:  IORWF  x6F,W
07032:  BCF    x6E.0
07034:  BTFSC  FE8.0
07036:  BSF    x6E.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
07038:  MOVLW  00
0703A:  BTFSC  x6E.0
0703C:  MOVLW  01
0703E:  MOVWF  x6F
07040:  MOVLW  00
07042:  MOVLB  D
07044:  BTFSC  xC7.6
07046:  MOVLW  01
07048:  MOVLB  E
0704A:  MOVWF  x71
0704C:  MOVLW  00
0704E:  MOVLB  D
07050:  BTFSC  xCB.6
07052:  MOVLW  01
07054:  MOVLB  E
07056:  IORWF  x71,W
07058:  MOVWF  x70
0705A:  MOVLW  00
0705C:  MOVLB  D
0705E:  BTFSS  xC3.6
07060:  MOVLW  01
07062:  MOVLB  E
07064:  ANDWF  x70,F
07066:  MOVLW  00
07068:  MOVLB  D
0706A:  BTFSC  xB7.6
0706C:  MOVLW  01
0706E:  MOVLB  E
07070:  MOVWF  x73
07072:  MOVLW  00
07074:  MOVLB  D
07076:  BTFSC  xBB.6
07078:  MOVLW  01
0707A:  MOVLB  E
0707C:  IORWF  x73,W
0707E:  ANDWF  x70,W
07080:  IORWF  x6F,W
07082:  BCF    x6E.0
07084:  BTFSC  FE8.0
07086:  BSF    x6E.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
07088:  MOVLW  00
0708A:  BTFSC  x6E.0
0708C:  MOVLW  01
0708E:  MOVWF  x6F
07090:  MOVLW  00
07092:  MOVLB  D
07094:  BTFSC  xC7.7
07096:  MOVLW  01
07098:  MOVLB  E
0709A:  MOVWF  x71
0709C:  MOVLW  00
0709E:  MOVLB  D
070A0:  BTFSC  xCB.7
070A2:  MOVLW  01
070A4:  MOVLB  E
070A6:  IORWF  x71,W
070A8:  MOVWF  x70
070AA:  MOVLW  00
070AC:  MOVLB  D
070AE:  BTFSS  xC3.7
070B0:  MOVLW  01
070B2:  MOVLB  E
070B4:  ANDWF  x70,F
070B6:  MOVLW  00
070B8:  MOVLB  D
070BA:  BTFSC  xB7.7
070BC:  MOVLW  01
070BE:  MOVLB  E
070C0:  MOVWF  x73
070C2:  MOVLW  00
070C4:  MOVLB  D
070C6:  BTFSC  xBB.7
070C8:  MOVLW  01
070CA:  MOVLB  E
070CC:  IORWF  x73,W
070CE:  ANDWF  x70,W
070D0:  IORWF  x6F,W
070D2:  BCF    x6E.0
070D4:  BTFSC  FE8.0
070D6:  BSF    x6E.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
070D8:  MOVLW  00
070DA:  BTFSC  x6E.0
070DC:  MOVLW  01
070DE:  MOVWF  x6F
070E0:  MOVLW  00
070E2:  MOVLB  D
070E4:  BTFSC  xC8.0
070E6:  MOVLW  01
070E8:  MOVLB  E
070EA:  MOVWF  x71
070EC:  MOVLW  00
070EE:  MOVLB  D
070F0:  BTFSC  xCC.0
070F2:  MOVLW  01
070F4:  MOVLB  E
070F6:  IORWF  x71,W
070F8:  MOVWF  x70
070FA:  MOVLW  00
070FC:  MOVLB  D
070FE:  BTFSS  xC4.0
07100:  MOVLW  01
07102:  MOVLB  E
07104:  ANDWF  x70,F
07106:  MOVLW  00
07108:  MOVLB  D
0710A:  BTFSC  xB8.0
0710C:  MOVLW  01
0710E:  MOVLB  E
07110:  MOVWF  x73
07112:  MOVLW  00
07114:  MOVLB  D
07116:  BTFSC  xBC.0
07118:  MOVLW  01
0711A:  MOVLB  E
0711C:  IORWF  x73,W
0711E:  ANDWF  x70,W
07120:  IORWF  x6F,W
07122:  BCF    x6E.0
07124:  BTFSC  FE8.0
07126:  BSF    x6E.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
07128:  MOVLW  00
0712A:  BTFSC  x6E.0
0712C:  MOVLW  01
0712E:  MOVWF  x6F
07130:  MOVLW  00
07132:  MOVLB  D
07134:  BTFSC  xC8.1
07136:  MOVLW  01
07138:  MOVLB  E
0713A:  MOVWF  x71
0713C:  MOVLW  00
0713E:  MOVLB  D
07140:  BTFSC  xCC.1
07142:  MOVLW  01
07144:  MOVLB  E
07146:  IORWF  x71,W
07148:  MOVWF  x70
0714A:  MOVLW  00
0714C:  MOVLB  D
0714E:  BTFSS  xC4.1
07150:  MOVLW  01
07152:  MOVLB  E
07154:  ANDWF  x70,F
07156:  MOVLW  00
07158:  MOVLB  D
0715A:  BTFSC  xB8.1
0715C:  MOVLW  01
0715E:  MOVLB  E
07160:  MOVWF  x73
07162:  MOVLW  00
07164:  MOVLB  D
07166:  BTFSC  xBC.1
07168:  MOVLW  01
0716A:  MOVLB  E
0716C:  IORWF  x73,W
0716E:  ANDWF  x70,W
07170:  IORWF  x6F,W
07172:  BCF    x6E.0
07174:  BTFSC  FE8.0
07176:  BSF    x6E.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (OutputType.B11 | OutputBoth.B11));
07178:  MOVLW  00
0717A:  BTFSC  x6E.0
0717C:  MOVLW  01
0717E:  MOVWF  x6F
07180:  MOVLW  00
07182:  MOVLB  D
07184:  BTFSC  xC8.2
07186:  MOVLW  01
07188:  MOVLB  E
0718A:  MOVWF  x71
0718C:  MOVLW  00
0718E:  MOVLB  D
07190:  BTFSC  xCC.2
07192:  MOVLW  01
07194:  MOVLB  E
07196:  IORWF  x71,W
07198:  MOVWF  x70
0719A:  MOVLW  00
0719C:  MOVLB  D
0719E:  BTFSS  xC4.2
071A0:  MOVLW  01
071A2:  MOVLB  E
071A4:  ANDWF  x70,F
071A6:  MOVLW  00
071A8:  MOVLB  D
071AA:  BTFSC  xB8.2
071AC:  MOVLW  01
071AE:  MOVLB  E
071B0:  MOVWF  x73
071B2:  MOVLW  00
071B4:  MOVLB  D
071B6:  BTFSC  xBC.2
071B8:  MOVLW  01
071BA:  MOVLB  E
071BC:  IORWF  x73,W
071BE:  ANDWF  x70,W
071C0:  IORWF  x6F,W
071C2:  BCF    x6E.0
071C4:  BTFSC  FE8.0
071C6:  BSF    x6E.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (OutputType.B12 | OutputBoth.B12));
071C8:  MOVLW  00
071CA:  BTFSC  x6E.0
071CC:  MOVLW  01
071CE:  MOVWF  x6F
071D0:  MOVLW  00
071D2:  MOVLB  D
071D4:  BTFSC  xC8.3
071D6:  MOVLW  01
071D8:  MOVLB  E
071DA:  MOVWF  x71
071DC:  MOVLW  00
071DE:  MOVLB  D
071E0:  BTFSC  xCC.3
071E2:  MOVLW  01
071E4:  MOVLB  E
071E6:  IORWF  x71,W
071E8:  MOVWF  x70
071EA:  MOVLW  00
071EC:  MOVLB  D
071EE:  BTFSS  xC4.3
071F0:  MOVLW  01
071F2:  MOVLB  E
071F4:  ANDWF  x70,F
071F6:  MOVLW  00
071F8:  MOVLB  D
071FA:  BTFSC  xB8.3
071FC:  MOVLW  01
071FE:  MOVLB  E
07200:  MOVWF  x73
07202:  MOVLW  00
07204:  MOVLB  D
07206:  BTFSC  xBC.3
07208:  MOVLW  01
0720A:  MOVLB  E
0720C:  IORWF  x73,W
0720E:  ANDWF  x70,W
07210:  IORWF  x6F,W
07212:  BCF    x6E.0
07214:  BTFSC  FE8.0
07216:  BSF    x6E.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (OutputType.B13 | OutputBoth.B13));
07218:  MOVLW  00
0721A:  BTFSC  x6E.0
0721C:  MOVLW  01
0721E:  MOVWF  x6F
07220:  MOVLW  00
07222:  MOVLB  D
07224:  BTFSC  xC8.4
07226:  MOVLW  01
07228:  MOVLB  E
0722A:  MOVWF  x71
0722C:  MOVLW  00
0722E:  MOVLB  D
07230:  BTFSC  xCC.4
07232:  MOVLW  01
07234:  MOVLB  E
07236:  IORWF  x71,W
07238:  MOVWF  x70
0723A:  MOVLW  00
0723C:  MOVLB  D
0723E:  BTFSS  xC4.4
07240:  MOVLW  01
07242:  MOVLB  E
07244:  ANDWF  x70,F
07246:  MOVLW  00
07248:  MOVLB  D
0724A:  BTFSC  xB8.4
0724C:  MOVLW  01
0724E:  MOVLB  E
07250:  MOVWF  x73
07252:  MOVLW  00
07254:  MOVLB  D
07256:  BTFSC  xBC.4
07258:  MOVLW  01
0725A:  MOVLB  E
0725C:  IORWF  x73,W
0725E:  ANDWF  x70,W
07260:  IORWF  x6F,W
07262:  BCF    x6E.0
07264:  BTFSC  FE8.0
07266:  BSF    x6E.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (OutputType.B14 | OutputBoth.B14));
07268:  MOVLW  00
0726A:  BTFSC  x6E.0
0726C:  MOVLW  01
0726E:  MOVWF  x6F
07270:  MOVLW  00
07272:  MOVLB  D
07274:  BTFSC  xC8.5
07276:  MOVLW  01
07278:  MOVLB  E
0727A:  MOVWF  x71
0727C:  MOVLW  00
0727E:  MOVLB  D
07280:  BTFSC  xCC.5
07282:  MOVLW  01
07284:  MOVLB  E
07286:  IORWF  x71,W
07288:  MOVWF  x70
0728A:  MOVLW  00
0728C:  MOVLB  D
0728E:  BTFSS  xC4.5
07290:  MOVLW  01
07292:  MOVLB  E
07294:  ANDWF  x70,F
07296:  MOVLW  00
07298:  MOVLB  D
0729A:  BTFSC  xB8.5
0729C:  MOVLW  01
0729E:  MOVLB  E
072A0:  MOVWF  x73
072A2:  MOVLW  00
072A4:  MOVLB  D
072A6:  BTFSC  xBC.5
072A8:  MOVLW  01
072AA:  MOVLB  E
072AC:  IORWF  x73,W
072AE:  ANDWF  x70,W
072B0:  IORWF  x6F,W
072B2:  BCF    x6E.0
072B4:  BTFSC  FE8.0
072B6:  BSF    x6E.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (OutputType.B15 | OutputBoth.B15));
072B8:  MOVLW  00
072BA:  BTFSC  x6E.0
072BC:  MOVLW  01
072BE:  MOVWF  x6F
072C0:  MOVLW  00
072C2:  MOVLB  D
072C4:  BTFSC  xC8.6
072C6:  MOVLW  01
072C8:  MOVLB  E
072CA:  MOVWF  x71
072CC:  MOVLW  00
072CE:  MOVLB  D
072D0:  BTFSC  xCC.6
072D2:  MOVLW  01
072D4:  MOVLB  E
072D6:  IORWF  x71,W
072D8:  MOVWF  x70
072DA:  MOVLW  00
072DC:  MOVLB  D
072DE:  BTFSS  xC4.6
072E0:  MOVLW  01
072E2:  MOVLB  E
072E4:  ANDWF  x70,F
072E6:  MOVLW  00
072E8:  MOVLB  D
072EA:  BTFSC  xB8.6
072EC:  MOVLW  01
072EE:  MOVLB  E
072F0:  MOVWF  x73
072F2:  MOVLW  00
072F4:  MOVLB  D
072F6:  BTFSC  xBC.6
072F8:  MOVLW  01
072FA:  MOVLB  E
072FC:  IORWF  x73,W
072FE:  ANDWF  x70,W
07300:  IORWF  x6F,W
07302:  BCF    x6E.0
07304:  BTFSC  FE8.0
07306:  BSF    x6E.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (OutputType.B16 | OutputBoth.B16));
07308:  MOVLW  00
0730A:  BTFSC  x6E.0
0730C:  MOVLW  01
0730E:  MOVWF  x6F
07310:  MOVLW  00
07312:  MOVLB  D
07314:  BTFSC  xC8.7
07316:  MOVLW  01
07318:  MOVLB  E
0731A:  MOVWF  x71
0731C:  MOVLW  00
0731E:  MOVLB  D
07320:  BTFSC  xCC.7
07322:  MOVLW  01
07324:  MOVLB  E
07326:  IORWF  x71,W
07328:  MOVWF  x70
0732A:  MOVLW  00
0732C:  MOVLB  D
0732E:  BTFSS  xC4.7
07330:  MOVLW  01
07332:  MOVLB  E
07334:  ANDWF  x70,F
07336:  MOVLW  00
07338:  MOVLB  D
0733A:  BTFSC  xB8.7
0733C:  MOVLW  01
0733E:  MOVLB  E
07340:  MOVWF  x73
07342:  MOVLW  00
07344:  MOVLB  D
07346:  BTFSC  xBC.7
07348:  MOVLW  01
0734A:  MOVLB  E
0734C:  IORWF  x73,W
0734E:  ANDWF  x70,W
07350:  IORWF  x6F,W
07352:  BCF    x6E.0
07354:  BTFSC  FE8.0
07356:  BSF    x6E.0
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (OutputType.B17 | OutputBoth.B17));
07358:  MOVLW  00
0735A:  BTFSC  x6E.0
0735C:  MOVLW  01
0735E:  MOVWF  x6F
07360:  MOVLW  00
07362:  MOVLB  D
07364:  BTFSC  xC9.0
07366:  MOVLW  01
07368:  MOVLB  E
0736A:  MOVWF  x71
0736C:  MOVLW  00
0736E:  MOVLB  D
07370:  BTFSC  xCD.0
07372:  MOVLW  01
07374:  MOVLB  E
07376:  IORWF  x71,W
07378:  MOVWF  x70
0737A:  MOVLW  00
0737C:  MOVLB  D
0737E:  BTFSS  xC5.0
07380:  MOVLW  01
07382:  MOVLB  E
07384:  ANDWF  x70,F
07386:  MOVLW  00
07388:  MOVLB  D
0738A:  BTFSC  xB9.0
0738C:  MOVLW  01
0738E:  MOVLB  E
07390:  MOVWF  x73
07392:  MOVLW  00
07394:  MOVLB  D
07396:  BTFSC  xBD.0
07398:  MOVLW  01
0739A:  MOVLB  E
0739C:  IORWF  x73,W
0739E:  ANDWF  x70,W
073A0:  IORWF  x6F,W
073A2:  BCF    x6E.0
073A4:  BTFSC  FE8.0
073A6:  BSF    x6E.0
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (OutputType.B18 | OutputBoth.B18));
073A8:  MOVLW  00
073AA:  BTFSC  x6E.0
073AC:  MOVLW  01
073AE:  MOVWF  x6F
073B0:  MOVLW  00
073B2:  MOVLB  D
073B4:  BTFSC  xC9.1
073B6:  MOVLW  01
073B8:  MOVLB  E
073BA:  MOVWF  x71
073BC:  MOVLW  00
073BE:  MOVLB  D
073C0:  BTFSC  xCD.1
073C2:  MOVLW  01
073C4:  MOVLB  E
073C6:  IORWF  x71,W
073C8:  MOVWF  x70
073CA:  MOVLW  00
073CC:  MOVLB  D
073CE:  BTFSS  xC5.1
073D0:  MOVLW  01
073D2:  MOVLB  E
073D4:  ANDWF  x70,F
073D6:  MOVLW  00
073D8:  MOVLB  D
073DA:  BTFSC  xB9.1
073DC:  MOVLW  01
073DE:  MOVLB  E
073E0:  MOVWF  x73
073E2:  MOVLW  00
073E4:  MOVLB  D
073E6:  BTFSC  xBD.1
073E8:  MOVLW  01
073EA:  MOVLB  E
073EC:  IORWF  x73,W
073EE:  ANDWF  x70,W
073F0:  IORWF  x6F,W
073F2:  BCF    x6E.0
073F4:  BTFSC  FE8.0
073F6:  BSF    x6E.0
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (OutputType.B19 | OutputBoth.B19));
073F8:  MOVLW  00
073FA:  BTFSC  x6E.0
073FC:  MOVLW  01
073FE:  MOVWF  x6F
07400:  MOVLW  00
07402:  MOVLB  D
07404:  BTFSC  xC9.2
07406:  MOVLW  01
07408:  MOVLB  E
0740A:  MOVWF  x71
0740C:  MOVLW  00
0740E:  MOVLB  D
07410:  BTFSC  xCD.2
07412:  MOVLW  01
07414:  MOVLB  E
07416:  IORWF  x71,W
07418:  MOVWF  x70
0741A:  MOVLW  00
0741C:  MOVLB  D
0741E:  BTFSS  xC5.2
07420:  MOVLW  01
07422:  MOVLB  E
07424:  ANDWF  x70,F
07426:  MOVLW  00
07428:  MOVLB  D
0742A:  BTFSC  xB9.2
0742C:  MOVLW  01
0742E:  MOVLB  E
07430:  MOVWF  x73
07432:  MOVLW  00
07434:  MOVLB  D
07436:  BTFSC  xBD.2
07438:  MOVLW  01
0743A:  MOVLB  E
0743C:  IORWF  x73,W
0743E:  ANDWF  x70,W
07440:  IORWF  x6F,W
07442:  BCF    x6E.0
07444:  BTFSC  FE8.0
07446:  BSF    x6E.0
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (OutputType.B20 | OutputBoth.B20));
07448:  MOVLW  00
0744A:  BTFSC  x6E.0
0744C:  MOVLW  01
0744E:  MOVWF  x6F
07450:  MOVLW  00
07452:  MOVLB  D
07454:  BTFSC  xC9.3
07456:  MOVLW  01
07458:  MOVLB  E
0745A:  MOVWF  x71
0745C:  MOVLW  00
0745E:  MOVLB  D
07460:  BTFSC  xCD.3
07462:  MOVLW  01
07464:  MOVLB  E
07466:  IORWF  x71,W
07468:  MOVWF  x70
0746A:  MOVLW  00
0746C:  MOVLB  D
0746E:  BTFSS  xC5.3
07470:  MOVLW  01
07472:  MOVLB  E
07474:  ANDWF  x70,F
07476:  MOVLW  00
07478:  MOVLB  D
0747A:  BTFSC  xB9.3
0747C:  MOVLW  01
0747E:  MOVLB  E
07480:  MOVWF  x73
07482:  MOVLW  00
07484:  MOVLB  D
07486:  BTFSC  xBD.3
07488:  MOVLW  01
0748A:  MOVLB  E
0748C:  IORWF  x73,W
0748E:  ANDWF  x70,W
07490:  IORWF  x6F,W
07492:  BCF    x6E.0
07494:  BTFSC  FE8.0
07496:  BSF    x6E.0
....................      
....................    }
07498:  BRA    7AD8
....................    else if(DatType == 0x02)             //Bell
0749A:  MOVF   x6D,W
0749C:  SUBLW  02
0749E:  BTFSS  FD8.2
074A0:  BRA    7AD8
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
074A2:  MOVLW  00
074A4:  MOVLB  D
074A6:  BTFSC  xC7.0
074A8:  MOVLW  01
074AA:  MOVLB  E
074AC:  MOVWF  x70
074AE:  MOVLW  00
074B0:  MOVLB  D
074B2:  BTFSC  xCB.0
074B4:  MOVLW  01
074B6:  MOVLB  E
074B8:  IORWF  x70,W
074BA:  MOVWF  x6F
074BC:  MOVLW  00
074BE:  MOVLB  D
074C0:  BTFSS  xC3.0
074C2:  MOVLW  01
074C4:  MOVLB  E
074C6:  ANDWF  x6F,F
074C8:  MOVLW  00
074CA:  MOVLB  D
074CC:  BTFSS  xB7.0
074CE:  MOVLW  01
074D0:  MOVLB  E
074D2:  MOVWF  x72
074D4:  MOVLW  00
074D6:  MOVLB  D
074D8:  BTFSC  xBB.0
074DA:  MOVLW  01
074DC:  MOVLB  E
074DE:  IORWF  x72,W
074E0:  ANDWF  x6F,W
074E2:  BCF    x6E.0
074E4:  BTFSC  FE8.0
074E6:  BSF    x6E.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
074E8:  MOVLW  00
074EA:  BTFSC  x6E.0
074EC:  MOVLW  01
074EE:  MOVWF  x6F
074F0:  MOVLW  00
074F2:  MOVLB  D
074F4:  BTFSC  xC7.1
074F6:  MOVLW  01
074F8:  MOVLB  E
074FA:  MOVWF  x71
074FC:  MOVLW  00
074FE:  MOVLB  D
07500:  BTFSC  xCB.1
07502:  MOVLW  01
07504:  MOVLB  E
07506:  IORWF  x71,W
07508:  MOVWF  x70
0750A:  MOVLW  00
0750C:  MOVLB  D
0750E:  BTFSS  xC3.1
07510:  MOVLW  01
07512:  MOVLB  E
07514:  ANDWF  x70,F
07516:  MOVLW  00
07518:  MOVLB  D
0751A:  BTFSS  xB7.1
0751C:  MOVLW  01
0751E:  MOVLB  E
07520:  MOVWF  x73
07522:  MOVLW  00
07524:  MOVLB  D
07526:  BTFSC  xBB.1
07528:  MOVLW  01
0752A:  MOVLB  E
0752C:  IORWF  x73,W
0752E:  ANDWF  x70,W
07530:  IORWF  x6F,W
07532:  BCF    x6E.0
07534:  BTFSC  FE8.0
07536:  BSF    x6E.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
07538:  MOVLW  00
0753A:  BTFSC  x6E.0
0753C:  MOVLW  01
0753E:  MOVWF  x6F
07540:  MOVLW  00
07542:  MOVLB  D
07544:  BTFSC  xC7.2
07546:  MOVLW  01
07548:  MOVLB  E
0754A:  MOVWF  x71
0754C:  MOVLW  00
0754E:  MOVLB  D
07550:  BTFSC  xCB.2
07552:  MOVLW  01
07554:  MOVLB  E
07556:  IORWF  x71,W
07558:  MOVWF  x70
0755A:  MOVLW  00
0755C:  MOVLB  D
0755E:  BTFSS  xC3.2
07560:  MOVLW  01
07562:  MOVLB  E
07564:  ANDWF  x70,F
07566:  MOVLW  00
07568:  MOVLB  D
0756A:  BTFSS  xB7.2
0756C:  MOVLW  01
0756E:  MOVLB  E
07570:  MOVWF  x73
07572:  MOVLW  00
07574:  MOVLB  D
07576:  BTFSC  xBB.2
07578:  MOVLW  01
0757A:  MOVLB  E
0757C:  IORWF  x73,W
0757E:  ANDWF  x70,W
07580:  IORWF  x6F,W
07582:  BCF    x6E.0
07584:  BTFSC  FE8.0
07586:  BSF    x6E.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
07588:  MOVLW  00
0758A:  BTFSC  x6E.0
0758C:  MOVLW  01
0758E:  MOVWF  x6F
07590:  MOVLW  00
07592:  MOVLB  D
07594:  BTFSC  xC7.3
07596:  MOVLW  01
07598:  MOVLB  E
0759A:  MOVWF  x71
0759C:  MOVLW  00
0759E:  MOVLB  D
075A0:  BTFSC  xCB.3
075A2:  MOVLW  01
075A4:  MOVLB  E
075A6:  IORWF  x71,W
075A8:  MOVWF  x70
075AA:  MOVLW  00
075AC:  MOVLB  D
075AE:  BTFSS  xC3.3
075B0:  MOVLW  01
075B2:  MOVLB  E
075B4:  ANDWF  x70,F
075B6:  MOVLW  00
075B8:  MOVLB  D
075BA:  BTFSS  xB7.3
075BC:  MOVLW  01
075BE:  MOVLB  E
075C0:  MOVWF  x73
075C2:  MOVLW  00
075C4:  MOVLB  D
075C6:  BTFSC  xBB.3
075C8:  MOVLW  01
075CA:  MOVLB  E
075CC:  IORWF  x73,W
075CE:  ANDWF  x70,W
075D0:  IORWF  x6F,W
075D2:  BCF    x6E.0
075D4:  BTFSC  FE8.0
075D6:  BSF    x6E.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
075D8:  MOVLW  00
075DA:  BTFSC  x6E.0
075DC:  MOVLW  01
075DE:  MOVWF  x6F
075E0:  MOVLW  00
075E2:  MOVLB  D
075E4:  BTFSC  xC7.4
075E6:  MOVLW  01
075E8:  MOVLB  E
075EA:  MOVWF  x71
075EC:  MOVLW  00
075EE:  MOVLB  D
075F0:  BTFSC  xCB.4
075F2:  MOVLW  01
075F4:  MOVLB  E
075F6:  IORWF  x71,W
075F8:  MOVWF  x70
075FA:  MOVLW  00
075FC:  MOVLB  D
075FE:  BTFSS  xC3.4
07600:  MOVLW  01
07602:  MOVLB  E
07604:  ANDWF  x70,F
07606:  MOVLW  00
07608:  MOVLB  D
0760A:  BTFSS  xB7.4
0760C:  MOVLW  01
0760E:  MOVLB  E
07610:  MOVWF  x73
07612:  MOVLW  00
07614:  MOVLB  D
07616:  BTFSC  xBB.4
07618:  MOVLW  01
0761A:  MOVLB  E
0761C:  IORWF  x73,W
0761E:  ANDWF  x70,W
07620:  IORWF  x6F,W
07622:  BCF    x6E.0
07624:  BTFSC  FE8.0
07626:  BSF    x6E.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
07628:  MOVLW  00
0762A:  BTFSC  x6E.0
0762C:  MOVLW  01
0762E:  MOVWF  x6F
07630:  MOVLW  00
07632:  MOVLB  D
07634:  BTFSC  xC7.5
07636:  MOVLW  01
07638:  MOVLB  E
0763A:  MOVWF  x71
0763C:  MOVLW  00
0763E:  MOVLB  D
07640:  BTFSC  xCB.5
07642:  MOVLW  01
07644:  MOVLB  E
07646:  IORWF  x71,W
07648:  MOVWF  x70
0764A:  MOVLW  00
0764C:  MOVLB  D
0764E:  BTFSS  xC3.5
07650:  MOVLW  01
07652:  MOVLB  E
07654:  ANDWF  x70,F
07656:  MOVLW  00
07658:  MOVLB  D
0765A:  BTFSS  xB7.5
0765C:  MOVLW  01
0765E:  MOVLB  E
07660:  MOVWF  x73
07662:  MOVLW  00
07664:  MOVLB  D
07666:  BTFSC  xBB.5
07668:  MOVLW  01
0766A:  MOVLB  E
0766C:  IORWF  x73,W
0766E:  ANDWF  x70,W
07670:  IORWF  x6F,W
07672:  BCF    x6E.0
07674:  BTFSC  FE8.0
07676:  BSF    x6E.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
07678:  MOVLW  00
0767A:  BTFSC  x6E.0
0767C:  MOVLW  01
0767E:  MOVWF  x6F
07680:  MOVLW  00
07682:  MOVLB  D
07684:  BTFSC  xC7.6
07686:  MOVLW  01
07688:  MOVLB  E
0768A:  MOVWF  x71
0768C:  MOVLW  00
0768E:  MOVLB  D
07690:  BTFSC  xCB.6
07692:  MOVLW  01
07694:  MOVLB  E
07696:  IORWF  x71,W
07698:  MOVWF  x70
0769A:  MOVLW  00
0769C:  MOVLB  D
0769E:  BTFSS  xC3.6
076A0:  MOVLW  01
076A2:  MOVLB  E
076A4:  ANDWF  x70,F
076A6:  MOVLW  00
076A8:  MOVLB  D
076AA:  BTFSS  xB7.6
076AC:  MOVLW  01
076AE:  MOVLB  E
076B0:  MOVWF  x73
076B2:  MOVLW  00
076B4:  MOVLB  D
076B6:  BTFSC  xBB.6
076B8:  MOVLW  01
076BA:  MOVLB  E
076BC:  IORWF  x73,W
076BE:  ANDWF  x70,W
076C0:  IORWF  x6F,W
076C2:  BCF    x6E.0
076C4:  BTFSC  FE8.0
076C6:  BSF    x6E.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
076C8:  MOVLW  00
076CA:  BTFSC  x6E.0
076CC:  MOVLW  01
076CE:  MOVWF  x6F
076D0:  MOVLW  00
076D2:  MOVLB  D
076D4:  BTFSC  xC7.7
076D6:  MOVLW  01
076D8:  MOVLB  E
076DA:  MOVWF  x71
076DC:  MOVLW  00
076DE:  MOVLB  D
076E0:  BTFSC  xCB.7
076E2:  MOVLW  01
076E4:  MOVLB  E
076E6:  IORWF  x71,W
076E8:  MOVWF  x70
076EA:  MOVLW  00
076EC:  MOVLB  D
076EE:  BTFSS  xC3.7
076F0:  MOVLW  01
076F2:  MOVLB  E
076F4:  ANDWF  x70,F
076F6:  MOVLW  00
076F8:  MOVLB  D
076FA:  BTFSS  xB7.7
076FC:  MOVLW  01
076FE:  MOVLB  E
07700:  MOVWF  x73
07702:  MOVLW  00
07704:  MOVLB  D
07706:  BTFSC  xBB.7
07708:  MOVLW  01
0770A:  MOVLB  E
0770C:  IORWF  x73,W
0770E:  ANDWF  x70,W
07710:  IORWF  x6F,W
07712:  BCF    x6E.0
07714:  BTFSC  FE8.0
07716:  BSF    x6E.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
07718:  MOVLW  00
0771A:  BTFSC  x6E.0
0771C:  MOVLW  01
0771E:  MOVWF  x6F
07720:  MOVLW  00
07722:  MOVLB  D
07724:  BTFSC  xC8.0
07726:  MOVLW  01
07728:  MOVLB  E
0772A:  MOVWF  x71
0772C:  MOVLW  00
0772E:  MOVLB  D
07730:  BTFSC  xCC.0
07732:  MOVLW  01
07734:  MOVLB  E
07736:  IORWF  x71,W
07738:  MOVWF  x70
0773A:  MOVLW  00
0773C:  MOVLB  D
0773E:  BTFSS  xC4.0
07740:  MOVLW  01
07742:  MOVLB  E
07744:  ANDWF  x70,F
07746:  MOVLW  00
07748:  MOVLB  D
0774A:  BTFSS  xB8.0
0774C:  MOVLW  01
0774E:  MOVLB  E
07750:  MOVWF  x73
07752:  MOVLW  00
07754:  MOVLB  D
07756:  BTFSC  xBC.0
07758:  MOVLW  01
0775A:  MOVLB  E
0775C:  IORWF  x73,W
0775E:  ANDWF  x70,W
07760:  IORWF  x6F,W
07762:  BCF    x6E.0
07764:  BTFSC  FE8.0
07766:  BSF    x6E.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
07768:  MOVLW  00
0776A:  BTFSC  x6E.0
0776C:  MOVLW  01
0776E:  MOVWF  x6F
07770:  MOVLW  00
07772:  MOVLB  D
07774:  BTFSC  xC8.1
07776:  MOVLW  01
07778:  MOVLB  E
0777A:  MOVWF  x71
0777C:  MOVLW  00
0777E:  MOVLB  D
07780:  BTFSC  xCC.1
07782:  MOVLW  01
07784:  MOVLB  E
07786:  IORWF  x71,W
07788:  MOVWF  x70
0778A:  MOVLW  00
0778C:  MOVLB  D
0778E:  BTFSS  xC4.1
07790:  MOVLW  01
07792:  MOVLB  E
07794:  ANDWF  x70,F
07796:  MOVLW  00
07798:  MOVLB  D
0779A:  BTFSS  xB8.1
0779C:  MOVLW  01
0779E:  MOVLB  E
077A0:  MOVWF  x73
077A2:  MOVLW  00
077A4:  MOVLB  D
077A6:  BTFSC  xBC.1
077A8:  MOVLW  01
077AA:  MOVLB  E
077AC:  IORWF  x73,W
077AE:  ANDWF  x70,W
077B0:  IORWF  x6F,W
077B2:  BCF    x6E.0
077B4:  BTFSC  FE8.0
077B6:  BSF    x6E.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (~OutputType.B11 | OutputBoth.B11));
077B8:  MOVLW  00
077BA:  BTFSC  x6E.0
077BC:  MOVLW  01
077BE:  MOVWF  x6F
077C0:  MOVLW  00
077C2:  MOVLB  D
077C4:  BTFSC  xC8.2
077C6:  MOVLW  01
077C8:  MOVLB  E
077CA:  MOVWF  x71
077CC:  MOVLW  00
077CE:  MOVLB  D
077D0:  BTFSC  xCC.2
077D2:  MOVLW  01
077D4:  MOVLB  E
077D6:  IORWF  x71,W
077D8:  MOVWF  x70
077DA:  MOVLW  00
077DC:  MOVLB  D
077DE:  BTFSS  xC4.2
077E0:  MOVLW  01
077E2:  MOVLB  E
077E4:  ANDWF  x70,F
077E6:  MOVLW  00
077E8:  MOVLB  D
077EA:  BTFSS  xB8.2
077EC:  MOVLW  01
077EE:  MOVLB  E
077F0:  MOVWF  x73
077F2:  MOVLW  00
077F4:  MOVLB  D
077F6:  BTFSC  xBC.2
077F8:  MOVLW  01
077FA:  MOVLB  E
077FC:  IORWF  x73,W
077FE:  ANDWF  x70,W
07800:  IORWF  x6F,W
07802:  BCF    x6E.0
07804:  BTFSC  FE8.0
07806:  BSF    x6E.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (~OutputType.B12 | OutputBoth.B12));
07808:  MOVLW  00
0780A:  BTFSC  x6E.0
0780C:  MOVLW  01
0780E:  MOVWF  x6F
07810:  MOVLW  00
07812:  MOVLB  D
07814:  BTFSC  xC8.3
07816:  MOVLW  01
07818:  MOVLB  E
0781A:  MOVWF  x71
0781C:  MOVLW  00
0781E:  MOVLB  D
07820:  BTFSC  xCC.3
07822:  MOVLW  01
07824:  MOVLB  E
07826:  IORWF  x71,W
07828:  MOVWF  x70
0782A:  MOVLW  00
0782C:  MOVLB  D
0782E:  BTFSS  xC4.3
07830:  MOVLW  01
07832:  MOVLB  E
07834:  ANDWF  x70,F
07836:  MOVLW  00
07838:  MOVLB  D
0783A:  BTFSS  xB8.3
0783C:  MOVLW  01
0783E:  MOVLB  E
07840:  MOVWF  x73
07842:  MOVLW  00
07844:  MOVLB  D
07846:  BTFSC  xBC.3
07848:  MOVLW  01
0784A:  MOVLB  E
0784C:  IORWF  x73,W
0784E:  ANDWF  x70,W
07850:  IORWF  x6F,W
07852:  BCF    x6E.0
07854:  BTFSC  FE8.0
07856:  BSF    x6E.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (~OutputType.B13 | OutputBoth.B13));
07858:  MOVLW  00
0785A:  BTFSC  x6E.0
0785C:  MOVLW  01
0785E:  MOVWF  x6F
07860:  MOVLW  00
07862:  MOVLB  D
07864:  BTFSC  xC8.4
07866:  MOVLW  01
07868:  MOVLB  E
0786A:  MOVWF  x71
0786C:  MOVLW  00
0786E:  MOVLB  D
07870:  BTFSC  xCC.4
07872:  MOVLW  01
07874:  MOVLB  E
07876:  IORWF  x71,W
07878:  MOVWF  x70
0787A:  MOVLW  00
0787C:  MOVLB  D
0787E:  BTFSS  xC4.4
07880:  MOVLW  01
07882:  MOVLB  E
07884:  ANDWF  x70,F
07886:  MOVLW  00
07888:  MOVLB  D
0788A:  BTFSS  xB8.4
0788C:  MOVLW  01
0788E:  MOVLB  E
07890:  MOVWF  x73
07892:  MOVLW  00
07894:  MOVLB  D
07896:  BTFSC  xBC.4
07898:  MOVLW  01
0789A:  MOVLB  E
0789C:  IORWF  x73,W
0789E:  ANDWF  x70,W
078A0:  IORWF  x6F,W
078A2:  BCF    x6E.0
078A4:  BTFSC  FE8.0
078A6:  BSF    x6E.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (~OutputType.B14 | OutputBoth.B14));
078A8:  MOVLW  00
078AA:  BTFSC  x6E.0
078AC:  MOVLW  01
078AE:  MOVWF  x6F
078B0:  MOVLW  00
078B2:  MOVLB  D
078B4:  BTFSC  xC8.5
078B6:  MOVLW  01
078B8:  MOVLB  E
078BA:  MOVWF  x71
078BC:  MOVLW  00
078BE:  MOVLB  D
078C0:  BTFSC  xCC.5
078C2:  MOVLW  01
078C4:  MOVLB  E
078C6:  IORWF  x71,W
078C8:  MOVWF  x70
078CA:  MOVLW  00
078CC:  MOVLB  D
078CE:  BTFSS  xC4.5
078D0:  MOVLW  01
078D2:  MOVLB  E
078D4:  ANDWF  x70,F
078D6:  MOVLW  00
078D8:  MOVLB  D
078DA:  BTFSS  xB8.5
078DC:  MOVLW  01
078DE:  MOVLB  E
078E0:  MOVWF  x73
078E2:  MOVLW  00
078E4:  MOVLB  D
078E6:  BTFSC  xBC.5
078E8:  MOVLW  01
078EA:  MOVLB  E
078EC:  IORWF  x73,W
078EE:  ANDWF  x70,W
078F0:  IORWF  x6F,W
078F2:  BCF    x6E.0
078F4:  BTFSC  FE8.0
078F6:  BSF    x6E.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (~OutputType.B15 | OutputBoth.B15));
078F8:  MOVLW  00
078FA:  BTFSC  x6E.0
078FC:  MOVLW  01
078FE:  MOVWF  x6F
07900:  MOVLW  00
07902:  MOVLB  D
07904:  BTFSC  xC8.6
07906:  MOVLW  01
07908:  MOVLB  E
0790A:  MOVWF  x71
0790C:  MOVLW  00
0790E:  MOVLB  D
07910:  BTFSC  xCC.6
07912:  MOVLW  01
07914:  MOVLB  E
07916:  IORWF  x71,W
07918:  MOVWF  x70
0791A:  MOVLW  00
0791C:  MOVLB  D
0791E:  BTFSS  xC4.6
07920:  MOVLW  01
07922:  MOVLB  E
07924:  ANDWF  x70,F
07926:  MOVLW  00
07928:  MOVLB  D
0792A:  BTFSS  xB8.6
0792C:  MOVLW  01
0792E:  MOVLB  E
07930:  MOVWF  x73
07932:  MOVLW  00
07934:  MOVLB  D
07936:  BTFSC  xBC.6
07938:  MOVLW  01
0793A:  MOVLB  E
0793C:  IORWF  x73,W
0793E:  ANDWF  x70,W
07940:  IORWF  x6F,W
07942:  BCF    x6E.0
07944:  BTFSC  FE8.0
07946:  BSF    x6E.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (~OutputType.B16 | OutputBoth.B16));
07948:  MOVLW  00
0794A:  BTFSC  x6E.0
0794C:  MOVLW  01
0794E:  MOVWF  x6F
07950:  MOVLW  00
07952:  MOVLB  D
07954:  BTFSC  xC8.7
07956:  MOVLW  01
07958:  MOVLB  E
0795A:  MOVWF  x71
0795C:  MOVLW  00
0795E:  MOVLB  D
07960:  BTFSC  xCC.7
07962:  MOVLW  01
07964:  MOVLB  E
07966:  IORWF  x71,W
07968:  MOVWF  x70
0796A:  MOVLW  00
0796C:  MOVLB  D
0796E:  BTFSS  xC4.7
07970:  MOVLW  01
07972:  MOVLB  E
07974:  ANDWF  x70,F
07976:  MOVLW  00
07978:  MOVLB  D
0797A:  BTFSS  xB8.7
0797C:  MOVLW  01
0797E:  MOVLB  E
07980:  MOVWF  x73
07982:  MOVLW  00
07984:  MOVLB  D
07986:  BTFSC  xBC.7
07988:  MOVLW  01
0798A:  MOVLB  E
0798C:  IORWF  x73,W
0798E:  ANDWF  x70,W
07990:  IORWF  x6F,W
07992:  BCF    x6E.0
07994:  BTFSC  FE8.0
07996:  BSF    x6E.0
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (~OutputType.B17 | OutputBoth.B17));
07998:  MOVLW  00
0799A:  BTFSC  x6E.0
0799C:  MOVLW  01
0799E:  MOVWF  x6F
079A0:  MOVLW  00
079A2:  MOVLB  D
079A4:  BTFSC  xC9.0
079A6:  MOVLW  01
079A8:  MOVLB  E
079AA:  MOVWF  x71
079AC:  MOVLW  00
079AE:  MOVLB  D
079B0:  BTFSC  xCD.0
079B2:  MOVLW  01
079B4:  MOVLB  E
079B6:  IORWF  x71,W
079B8:  MOVWF  x70
079BA:  MOVLW  00
079BC:  MOVLB  D
079BE:  BTFSS  xC5.0
079C0:  MOVLW  01
079C2:  MOVLB  E
079C4:  ANDWF  x70,F
079C6:  MOVLW  00
079C8:  MOVLB  D
079CA:  BTFSS  xB9.0
079CC:  MOVLW  01
079CE:  MOVLB  E
079D0:  MOVWF  x73
079D2:  MOVLW  00
079D4:  MOVLB  D
079D6:  BTFSC  xBD.0
079D8:  MOVLW  01
079DA:  MOVLB  E
079DC:  IORWF  x73,W
079DE:  ANDWF  x70,W
079E0:  IORWF  x6F,W
079E2:  BCF    x6E.0
079E4:  BTFSC  FE8.0
079E6:  BSF    x6E.0
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (~OutputType.B18 | OutputBoth.B18));
079E8:  MOVLW  00
079EA:  BTFSC  x6E.0
079EC:  MOVLW  01
079EE:  MOVWF  x6F
079F0:  MOVLW  00
079F2:  MOVLB  D
079F4:  BTFSC  xC9.1
079F6:  MOVLW  01
079F8:  MOVLB  E
079FA:  MOVWF  x71
079FC:  MOVLW  00
079FE:  MOVLB  D
07A00:  BTFSC  xCD.1
07A02:  MOVLW  01
07A04:  MOVLB  E
07A06:  IORWF  x71,W
07A08:  MOVWF  x70
07A0A:  MOVLW  00
07A0C:  MOVLB  D
07A0E:  BTFSS  xC5.1
07A10:  MOVLW  01
07A12:  MOVLB  E
07A14:  ANDWF  x70,F
07A16:  MOVLW  00
07A18:  MOVLB  D
07A1A:  BTFSS  xB9.1
07A1C:  MOVLW  01
07A1E:  MOVLB  E
07A20:  MOVWF  x73
07A22:  MOVLW  00
07A24:  MOVLB  D
07A26:  BTFSC  xBD.1
07A28:  MOVLW  01
07A2A:  MOVLB  E
07A2C:  IORWF  x73,W
07A2E:  ANDWF  x70,W
07A30:  IORWF  x6F,W
07A32:  BCF    x6E.0
07A34:  BTFSC  FE8.0
07A36:  BSF    x6E.0
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (~OutputType.B19 | OutputBoth.B19));
07A38:  MOVLW  00
07A3A:  BTFSC  x6E.0
07A3C:  MOVLW  01
07A3E:  MOVWF  x6F
07A40:  MOVLW  00
07A42:  MOVLB  D
07A44:  BTFSC  xC9.2
07A46:  MOVLW  01
07A48:  MOVLB  E
07A4A:  MOVWF  x71
07A4C:  MOVLW  00
07A4E:  MOVLB  D
07A50:  BTFSC  xCD.2
07A52:  MOVLW  01
07A54:  MOVLB  E
07A56:  IORWF  x71,W
07A58:  MOVWF  x70
07A5A:  MOVLW  00
07A5C:  MOVLB  D
07A5E:  BTFSS  xC5.2
07A60:  MOVLW  01
07A62:  MOVLB  E
07A64:  ANDWF  x70,F
07A66:  MOVLW  00
07A68:  MOVLB  D
07A6A:  BTFSS  xB9.2
07A6C:  MOVLW  01
07A6E:  MOVLB  E
07A70:  MOVWF  x73
07A72:  MOVLW  00
07A74:  MOVLB  D
07A76:  BTFSC  xBD.2
07A78:  MOVLW  01
07A7A:  MOVLB  E
07A7C:  IORWF  x73,W
07A7E:  ANDWF  x70,W
07A80:  IORWF  x6F,W
07A82:  BCF    x6E.0
07A84:  BTFSC  FE8.0
07A86:  BSF    x6E.0
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (~OutputType.B20 | OutputBoth.B20));
07A88:  MOVLW  00
07A8A:  BTFSC  x6E.0
07A8C:  MOVLW  01
07A8E:  MOVWF  x6F
07A90:  MOVLW  00
07A92:  MOVLB  D
07A94:  BTFSC  xC9.3
07A96:  MOVLW  01
07A98:  MOVLB  E
07A9A:  MOVWF  x71
07A9C:  MOVLW  00
07A9E:  MOVLB  D
07AA0:  BTFSC  xCD.3
07AA2:  MOVLW  01
07AA4:  MOVLB  E
07AA6:  IORWF  x71,W
07AA8:  MOVWF  x70
07AAA:  MOVLW  00
07AAC:  MOVLB  D
07AAE:  BTFSS  xC5.3
07AB0:  MOVLW  01
07AB2:  MOVLB  E
07AB4:  ANDWF  x70,F
07AB6:  MOVLW  00
07AB8:  MOVLB  D
07ABA:  BTFSS  xB9.3
07ABC:  MOVLW  01
07ABE:  MOVLB  E
07AC0:  MOVWF  x73
07AC2:  MOVLW  00
07AC4:  MOVLB  D
07AC6:  BTFSC  xBD.3
07AC8:  MOVLW  01
07ACA:  MOVLB  E
07ACC:  IORWF  x73,W
07ACE:  ANDWF  x70,W
07AD0:  IORWF  x6F,W
07AD2:  BCF    x6E.0
07AD4:  BTFSC  FE8.0
07AD6:  BSF    x6E.0
.................... 
....................    }
....................    return(check);
07AD8:  MOVLW  00
07ADA:  BTFSC  x6E.0
07ADC:  MOVLW  01
07ADE:  MOVWF  01
07AE0:  MOVLB  0
07AE2:  RETURN 0
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
0B04A:  CLRF   FF8
0B04C:  BCF    FD0.7
0B04E:  BSF    07.7
0B050:  MOVLW  70
0B052:  MOVWF  FD3
0B054:  BCF    F9B.6
0B056:  BCF    F9B.7
0B058:  BSF    FB8.3
0B05A:  MOVLW  A0
0B05C:  MOVWF  FAF
0B05E:  MOVLW  01
0B060:  MOVWF  FB0
0B062:  MOVLW  A6
0B064:  MOVWF  FAC
0B066:  MOVLW  90
0B068:  MOVWF  FAB
0B06A:  BCF    F93.0
0B06C:  BSF    F8A.0
0B06E:  CLRF   1B
0B070:  BCF    1C.0
0B072:  MOVLW  19
0B074:  MOVWF  1D
0B076:  BCF    1C.1
0B078:  MOVLW  64
0B07A:  MOVWF  1E
0B07C:  CLRF   1F
0B07E:  BCF    1C.2
0B080:  BCF    1C.3
0B082:  BCF    1C.4
0B084:  CLRF   30
0B086:  BCF    1C.5
0B088:  CLRF   31
0B08A:  BCF    1C.6
0B08C:  BCF    1C.7
0B08E:  BCF    32.0
0B090:  BCF    32.1
0B092:  CLRF   33
0B094:  BCF    32.2
0B096:  BCF    32.3
0B098:  BCF    32.4
0B09A:  MOVLW  11
0B09C:  MOVWF  5A
0B09E:  MOVLW  12
0B0A0:  MOVWF  5B
0B0A2:  MOVLW  13
0B0A4:  MOVWF  5C
0B0A6:  MOVLW  14
0B0A8:  MOVWF  5D
0B0AA:  MOVLW  16
0B0AC:  MOVWF  5E
0B0AE:  MOVLW  17
0B0B0:  MOVWF  5F
0B0B2:  MOVLW  18
0B0B4:  MOVWF  x60
0B0B6:  MOVLW  19
0B0B8:  MOVWF  x61
0B0BA:  MOVLW  20
0B0BC:  MOVWF  x62
0B0BE:  BCF    32.5
0B0C0:  CLRF   x65
0B0C2:  MOVLW  01
0B0C4:  MOVLB  6
0B0C6:  MOVWF  x69
0B0C8:  MOVLW  F4
0B0CA:  MOVWF  x68
0B0CC:  CLRF   x6B
0B0CE:  CLRF   x6A
0B0D0:  CLRF   x6D
0B0D2:  CLRF   x6C
0B0D4:  CLRF   x6E
0B0D6:  MOVLB  A
0B0D8:  CLRF   x72
0B0DA:  CLRF   x71
0B0DC:  CLRF   x73
0B0DE:  MOVLB  E
0B0E0:  CLRF   x67
0B0E2:  CLRF   x66
0B0E4:  MOVLB  F
0B0E6:  CLRF   x38
0B0E8:  CLRF   x39
0B0EA:  CLRF   x3A
0B0EC:  CLRF   F77
0B0EE:  CLRF   F78
0B0F0:  CLRF   F79
0B0F2:  CLRF   19
0B0F4:  CLRF   1A
0B0F6:  MOVLW  3E
0B0F8:  MOVLB  D
0B0FA:  MOVWF  x03
0B0FC:  MOVWF  x04
0B0FE:  CLRF   x05
0B100:  MOVLW  20
0B102:  MOVWF  xA3
0B104:  CLRF   xA4
0B106:  MOVLW  3E
0B108:  MOVLB  E
0B10A:  MOVWF  x63
0B10C:  MOVWF  x64
0B10E:  CLRF   x65
0B110:  CLRF   x68
.................... {  
....................    delay_ms(50);
0B112:  MOVLW  32
0B114:  MOVWF  x76
0B116:  MOVLB  0
0B118:  CALL   0662
....................    output_bit(Pled,0);   //power on watchdog signal
0B11C:  BCF    F8A.5
0B11E:  BCF    F93.5
.................... 
....................    
....................    setup_timer_0(RTCC_INTERNAL);
0B120:  MOVLW  80
0B122:  MOVWF  FD5
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
0B124:  MOVLW  78
0B126:  IORLW  06
0B128:  MOVWF  FBA
0B12A:  MOVLW  C4
0B12C:  MOVWF  FBB
....................    enable_interrupts(INT_TIMER2);
0B12E:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
0B130:  BSF    F9D.5
.................... 
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H |SPI_SS_DISABLED | SPI_XMIT_L_TO_H| SPI_CLK_DIV_16 ); //master1 jj
0B132:  BCF    FC6.5
0B134:  BCF    F94.5
0B136:  BSF    F94.4
0B138:  BCF    F94.3
0B13A:  MOVLW  21
0B13C:  MOVWF  FC6
0B13E:  MOVLW  40
0B140:  MOVWF  FC7
.................... 
....................   
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
0B142:  GOTO   06C4
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
0B146:  MOVLB  E
0B148:  CLRF   x6D
0B14A:  SETF   x6E
0B14C:  MOVLB  0
0B14E:  CALL   075A
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
0B152:  MOVLB  E
0B154:  CLRF   x6D
0B156:  SETF   x6E
0B158:  MOVLB  0
0B15A:  CALL   076C
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
0B15E:  MOVLW  02
0B160:  MOVLB  E
0B162:  MOVWF  x6D
0B164:  SETF   x6E
0B166:  MOVLB  0
0B168:  CALL   075A
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt
0B16C:  MOVLW  02
0B16E:  MOVLB  E
0B170:  MOVWF  x6D
0B172:  SETF   x6E
0B174:  MOVLB  0
0B176:  CALL   076C
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0B17A:  MOVLB  E
0B17C:  CLRF   x77
0B17E:  MOVLW  06
0B180:  MOVWF  x78
0B182:  SETF   x79
0B184:  MOVLB  0
0B186:  CALL   0692
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0B18A:  MOVLB  E
0B18C:  CLRF   x77
0B18E:  MOVLW  16
0B190:  MOVWF  x78
0B192:  SETF   x79
0B194:  MOVLB  0
0B196:  CALL   0692
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0B19A:  MOVLW  02
0B19C:  MOVLB  E
0B19E:  MOVWF  x77
0B1A0:  MOVLW  06
0B1A2:  MOVWF  x78
0B1A4:  SETF   x79
0B1A6:  MOVLB  0
0B1A8:  CALL   0692
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0B1AC:  MOVLW  02
0B1AE:  MOVLB  E
0B1B0:  MOVWF  x77
0B1B2:  MOVLW  16
0B1B4:  MOVWF  x78
0B1B6:  SETF   x79
0B1B8:  MOVLB  0
0B1BA:  CALL   0692
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0B1BE:  MOVLW  04
0B1C0:  MOVLB  E
0B1C2:  MOVWF  x6D
0B1C4:  CLRF   x6E
0B1C6:  MOVLB  0
0B1C8:  CALL   075A
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0B1CC:  MOVLW  04
0B1CE:  MOVLB  E
0B1D0:  MOVWF  x6D
0B1D2:  CLRF   x6E
0B1D4:  MOVLB  0
0B1D6:  CALL   076C
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0B1DA:  MOVLW  06
0B1DC:  MOVLB  E
0B1DE:  MOVWF  x6D
0B1E0:  CLRF   x6E
0B1E2:  MOVLB  0
0B1E4:  CALL   075A
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0B1E8:  MOVLW  06
0B1EA:  MOVLB  E
0B1EC:  MOVWF  x6D
0B1EE:  CLRF   x6E
0B1F0:  MOVLB  0
0B1F2:  CALL   076C
....................    IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0B1F6:  MOVLW  08
0B1F8:  MOVLB  E
0B1FA:  MOVWF  x6D
0B1FC:  CLRF   x6E
0B1FE:  MOVLB  0
0B200:  CALL   075A
....................    IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0B204:  MOVLW  08
0B206:  MOVLB  E
0B208:  MOVWF  x6D
0B20A:  CLRF   x6E
0B20C:  MOVLB  0
0B20E:  CALL   076C
....................    IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0B212:  MOVLW  0A
0B214:  MOVLB  E
0B216:  MOVWF  x6D
0B218:  CLRF   x6E
0B21A:  MOVLB  0
0B21C:  CALL   075A
....................    IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0B220:  MOVLW  0A
0B222:  MOVLB  E
0B224:  MOVWF  x6D
0B226:  CLRF   x6E
0B228:  MOVLB  0
0B22A:  CALL   076C
....................    
....................    FlashingFlag = 1;
0B22E:  BSF    1C.1
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
0B230:  MOVFF  5A,63
....................    Address = 1;
0B234:  MOVLW  01
0B236:  MOVWF  x64
.................... 
....................    Output.B1 = 1;
0B238:  MOVLB  D
0B23A:  BSF    xAB.0
....................    Output.B2 = 1;
0B23C:  BSF    xAB.1
....................    Output.B3 = 1;
0B23E:  BSF    xAB.2
....................    Output.B4 = 1;
0B240:  BSF    xAB.3
....................    Output.B5 = 1;
0B242:  BSF    xAB.4
....................    Output.B6 = 1;
0B244:  BSF    xAB.5
....................    Output.B7 = 1;
0B246:  BSF    xAB.6
....................    Output.B8 = 1;
0B248:  BSF    xAB.7
....................    Output.B9 = 1;
0B24A:  BSF    xAC.0
....................    Output.B10 = 1;
0B24C:  BSF    xAC.1
....................    Output.B11 = 1;
0B24E:  BSF    xAC.2
....................    Output.B12 = 1;
0B250:  BSF    xAC.3
....................    Output.B13 = 1;
0B252:  BSF    xAC.4
....................    Output.B14 = 1;
0B254:  BSF    xAC.5
....................    Output.B15 = 1;
0B256:  BSF    xAC.6
....................    Output.B16 = 1;
0B258:  BSF    xAC.7
....................    Output.B17 = 1;
0B25A:  BSF    xAD.0
....................    Output.B18 = 1;
0B25C:  BSF    xAD.1
....................    Output.B19 = 1;
0B25E:  BSF    xAD.2
....................    Output.B20 = 1;
0B260:  BSF    xAD.3
....................    
....................    ////////////////////
....................    In.B1 = 0;
0B262:  BCF    xC7.0
....................    In.B2 = 0;
0B264:  BCF    xC7.1
....................    In.B3 = 0;
0B266:  BCF    xC7.2
....................    In.B4 = 0;
0B268:  BCF    xC7.3
....................    In.B5 = 0;
0B26A:  BCF    xC7.4
....................    In.B6 = 0;
0B26C:  BCF    xC7.5
....................    In.B7 = 0;
0B26E:  BCF    xC7.6
....................    In.B8 = 0;
0B270:  BCF    xC7.7
....................    In.B9 = 0;
0B272:  BCF    xC8.0
....................    In.B10 = 0;
0B274:  BCF    xC8.1
....................    In.B11 = 0;
0B276:  BCF    xC8.2
....................    In.B12 = 0;
0B278:  BCF    xC8.3
....................    In.B13 = 0;
0B27A:  BCF    xC8.4
....................    In.B14 = 0;
0B27C:  BCF    xC8.5
....................    In.B15 = 0;
0B27E:  BCF    xC8.6
....................    In.B16 = 0;
0B280:  BCF    xC8.7
....................    In.B17 = 0;
0B282:  BCF    xC9.0
....................    In.B18 = 0;
0B284:  BCF    xC9.1
....................    In.B19 = 0;
0B286:  BCF    xC9.2
....................    In.B20 = 0;
0B288:  BCF    xC9.3
....................    
....................    ////////////////////
....................    In2.B1 = 0;
0B28A:  BCF    xCB.0
....................    In2.B2 = 0;
0B28C:  BCF    xCB.1
....................    In2.B3 = 0;
0B28E:  BCF    xCB.2
....................    In2.B4 = 0;
0B290:  BCF    xCB.3
....................    In2.B5 = 0;
0B292:  BCF    xCB.4
....................    In2.B6 = 0;
0B294:  BCF    xCB.5
....................    In2.B7 = 0;
0B296:  BCF    xCB.6
....................    In2.B8 = 0;
0B298:  BCF    xCB.7
....................    In2.B9 = 0;
0B29A:  BCF    xCC.0
....................    In2.B10 = 0;
0B29C:  BCF    xCC.1
....................    In2.B11 = 0;
0B29E:  BCF    xCC.2
....................    In2.B12 = 0;
0B2A0:  BCF    xCC.3
....................    In2.B13 = 0;
0B2A2:  BCF    xCC.4
....................    In2.B14 = 0;
0B2A4:  BCF    xCC.5
....................    In2.B15 = 0;
0B2A6:  BCF    xCC.6
....................    In2.B16 = 0;
0B2A8:  BCF    xCC.7
....................    In2.B17 = 0;
0B2AA:  BCF    xCD.0
....................    In2.B18 = 0;
0B2AC:  BCF    xCD.1
....................    In2.B19 = 0;
0B2AE:  BCF    xCD.2
....................    In2.B20 = 0;
0B2B0:  BCF    xCD.3
....................    
....................    ////////////////////////
....................    Ack.B1 = 0;
0B2B2:  BCF    xC3.0
....................    Ack.B2 = 0;
0B2B4:  BCF    xC3.1
....................    Ack.B3 = 0;
0B2B6:  BCF    xC3.2
....................    Ack.B4 = 0;
0B2B8:  BCF    xC3.3
....................    Ack.B5 = 0;
0B2BA:  BCF    xC3.4
....................    Ack.B6 = 0;
0B2BC:  BCF    xC3.5
....................    Ack.B7 = 0;
0B2BE:  BCF    xC3.6
....................    Ack.B8 = 0;
0B2C0:  BCF    xC3.7
....................    Ack.B9 = 0;
0B2C2:  BCF    xC4.0
....................    Ack.B10 = 0;
0B2C4:  BCF    xC4.1
....................    Ack.B11 = 0;
0B2C6:  BCF    xC4.2
....................    Ack.B12 = 0;
0B2C8:  BCF    xC4.3
....................    Ack.B13 = 0;
0B2CA:  BCF    xC4.4
....................    Ack.B14 = 0;
0B2CC:  BCF    xC4.5
....................    Ack.B15 = 0;
0B2CE:  BCF    xC4.6
....................    Ack.B16 = 0;
0B2D0:  BCF    xC4.7
....................    Ack.B17 = 0;
0B2D2:  BCF    xC5.0
....................    Ack.B18 = 0;
0B2D4:  BCF    xC5.1
....................    Ack.B19 = 0;
0B2D6:  BCF    xC5.2
....................    Ack.B20 = 0;
0B2D8:  BCF    xC5.3
....................  
....................  /*
....................    Inputt.B1 = 0;
....................    Inputt.B2 = 0;
....................    Inputt.B3 = 0;
....................    Inputt.B4 = 0;
....................    Inputt.B5 = 0;
....................    Inputt.B6 = 0;
....................    Inputt.B7 = 0;
....................    Inputt.B8 = 0;
....................    Inputt.B9 = 0;
....................    Inputt.B10 = 0;
....................    Inputt.B11 = 0;
....................    Inputt.B12 = 0;
....................    Inputt.B13 = 0;
....................    Inputt.B14 = 0;
....................    Inputt.B15 = 0;
....................    Inputt.B16 = 0;
....................    Inputt.B17 = 0;
....................    Inputt.B18 = 0;
....................    Inputt.B19 = 0;
....................    Inputt.B20 = 0;
....................   */
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
0B2DA:  MOVFF  FF2,E6D
0B2DE:  BCF    FF2.7
0B2E0:  CLRF   FAA
0B2E2:  CLRF   FA9
0B2E4:  BCF    FA6.6
0B2E6:  BCF    FA6.7
0B2E8:  BSF    FA6.0
0B2EA:  MOVF   FA8,W
0B2EC:  MOVLB  E
0B2EE:  BTFSC  x6D.7
0B2F0:  BSF    FF2.7
0B2F2:  SUBLW  0F
0B2F4:  BNZ   B300
....................    {
....................       Read_Config();
0B2F6:  MOVLB  0
0B2F8:  CALL   0780
....................    }
0B2FC:  BRA    B71E
0B2FE:  MOVLB  E
....................    else
....................    {
....................       FlashingRateTime = 25;
0B300:  MOVLW  19
0B302:  MOVWF  1D
....................       AutoAck = 0xF0; //not use auto ack
0B304:  MOVLW  F0
0B306:  MOVWF  55
....................       Address = 0x01;
0B308:  MOVLW  01
0B30A:  MOVLB  0
0B30C:  MOVWF  x64
.................... 
....................       AutoAckTime = 5;
0B30E:  MOVLW  05
0B310:  MOVWF  56
....................       FlashingRate = 25;
0B312:  MOVLW  19
0B314:  MOVWF  57
....................       NoOfPoint = 20;
0B316:  MOVLW  14
0B318:  MOVWF  58
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
0B31A:  MOVLB  E
0B31C:  CLRF   x69
0B31E:  MOVF   x69,W
0B320:  SUBWF  58,W
0B322:  BNC   B33E
....................       {
....................          FaultDelayTime[i] = 0;
0B324:  BCF    FD8.0
0B326:  RLCF   x69,W
0B328:  CLRF   03
0B32A:  ADDLW  23
0B32C:  MOVWF  FE9
0B32E:  MOVLW  0E
0B330:  ADDWFC 03,W
0B332:  MOVWF  FEA
0B334:  CLRF   FEC
0B336:  MOVF   FED,F
0B338:  CLRF   FEF
0B33A:  INCF   x69,F
0B33C:  BRA    B31E
....................       }
.................... 
.................... 
....................       InputType.B1 = 1;
0B33E:  MOVLB  D
0B340:  BSF    xAF.0
....................       InputType.B2 = 1;
0B342:  BSF    xAF.1
....................       InputType.B3 = 1;
0B344:  BSF    xAF.2
....................       InputType.B4 = 1;
0B346:  BSF    xAF.3
....................       InputType.B5 = 1;
0B348:  BSF    xAF.4
....................       InputType.B6 = 1;
0B34A:  BSF    xAF.5
....................       InputType.B7 = 1;
0B34C:  BSF    xAF.6
....................       InputType.B8 = 1;
0B34E:  BSF    xAF.7
....................       InputType.B9 = 1;
0B350:  BSF    xB0.0
....................       InputType.B10 = 1;
0B352:  BSF    xB0.1
....................       InputType.B11 = 1;
0B354:  BSF    xB0.2
....................       InputType.B12 = 1;
0B356:  BSF    xB0.3
....................       InputType.B13 = 1;
0B358:  BSF    xB0.4
....................       InputType.B14 = 1;
0B35A:  BSF    xB0.5
....................       InputType.B15 = 1;
0B35C:  BSF    xB0.6
....................       InputType.B16 = 1;
0B35E:  BSF    xB0.7
....................       InputType.B17 = 1;
0B360:  BSF    xB1.0
....................       InputType.B18 = 1;
0B362:  BSF    xB1.1
....................       InputType.B19 = 1;
0B364:  BSF    xB1.2
....................       InputType.B20 = 1;
0B366:  BSF    xB1.3
....................       
....................       FaultNCNO[1] = 1;
0B368:  MOVLB  E
0B36A:  BSF    x5F.1
....................       FaultNCNO[2] = 1;
0B36C:  BSF    x5F.2
....................       FaultNCNO[3] = 1;
0B36E:  BSF    x5F.3
....................       FaultNCNO[4] = 1;
0B370:  BSF    x5F.4
....................       FaultNCNO[5] = 1;
0B372:  BSF    x5F.5
....................       FaultNCNO[6] = 1;
0B374:  BSF    x5F.6
....................       FaultNCNO[7] = 1;
0B376:  BSF    x5F.7
....................       FaultNCNO[8] = 1;
0B378:  BSF    x60.0
....................       FaultNCNO[9] = 1;
0B37A:  BSF    x60.1
....................       FaultNCNO[10] = 1;
0B37C:  BSF    x60.2
....................       FaultNCNO[11] = 1;
0B37E:  BSF    x60.3
....................       FaultNCNO[12] = 1;
0B380:  BSF    x60.4
....................       FaultNCNO[13] = 1;
0B382:  BSF    x60.5
....................       FaultNCNO[14] = 1;
0B384:  BSF    x60.6
....................       FaultNCNO[15] = 1;
0B386:  BSF    x60.7
....................       FaultNCNO[16] = 1;
0B388:  BSF    x61.0
....................       FaultNCNO[17] = 1;
0B38A:  BSF    x61.1
....................       FaultNCNO[18] = 1;
0B38C:  BSF    x61.2
....................       FaultNCNO[19] = 1;
0B38E:  BSF    x61.3
....................       FaultNCNO[20] = 1;
0B390:  BSF    x61.4
....................       /////////////////////////////
....................       FaultType.B1 = 1;
0B392:  MOVLB  D
0B394:  BSF    xB3.0
....................       FaultType.B2= 1;
0B396:  BSF    xB3.1
....................       FaultType.B3 = 1;
0B398:  BSF    xB3.2
....................       FaultType.B4 = 1;
0B39A:  BSF    xB3.3
....................       FaultType.B5 = 1;
0B39C:  BSF    xB3.4
....................       FaultType.B6 = 1;
0B39E:  BSF    xB3.5
....................       FaultType.B7 = 1;
0B3A0:  BSF    xB3.6
....................       FaultType.B8 = 1;
0B3A2:  BSF    xB3.7
....................       FaultType.B9 = 1;
0B3A4:  BSF    xB4.0
....................       FaultType.B10 = 1;
0B3A6:  BSF    xB4.1
....................       FaultType.B11 = 1;
0B3A8:  BSF    xB4.2
....................       FaultType.B12 = 1;
0B3AA:  BSF    xB4.3
....................       FaultType.B13 = 1;
0B3AC:  BSF    xB4.4
....................       FaultType.B14 = 1;
0B3AE:  BSF    xB4.5
....................       FaultType.B15 = 1;
0B3B0:  BSF    xB4.6
....................       FaultType.B16 = 1;
0B3B2:  BSF    xB4.7
....................       FaultType.B17 = 1;
0B3B4:  BSF    xB5.0
....................       FaultType.B18 = 1;
0B3B6:  BSF    xB5.1
....................       FaultType.B19 = 1;
0B3B8:  BSF    xB5.2
....................       FaultType.B20 = 1;
0B3BA:  BSF    xB5.3
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
0B3BC:  BSF    xB7.0
....................       OutputType.B2 = 1;
0B3BE:  BSF    xB7.1
....................       OutputType.B3 = 1;
0B3C0:  BSF    xB7.2
....................       OutputType.B4 = 1;
0B3C2:  BSF    xB7.3
....................       OutputType.B5 = 1;
0B3C4:  BSF    xB7.4
....................       OutputType.B6 = 1;
0B3C6:  BSF    xB7.5
....................       OutputType.B7 = 1;
0B3C8:  BSF    xB7.6
....................       OutputType.B8 = 1;
0B3CA:  BSF    xB7.7
....................       OutputType.B9 = 1;
0B3CC:  BSF    xB8.0
....................       OutputType.B10 = 1;
0B3CE:  BSF    xB8.1
....................       OutputType.B11 = 1;
0B3D0:  BSF    xB8.2
....................       OutputType.B12 = 1;
0B3D2:  BSF    xB8.3
....................       OutputType.B13 = 1;
0B3D4:  BSF    xB8.4
....................       OutputType.B14 = 1;
0B3D6:  BSF    xB8.5
....................       OutputType.B15 = 1;
0B3D8:  BSF    xB8.6
....................       OutputType.B16 = 1;
0B3DA:  BSF    xB8.7
....................       OutputType.B17 = 1;
0B3DC:  BSF    xB9.0
....................       OutputType.B18 = 1;
0B3DE:  BSF    xB9.1
....................       OutputType.B19 = 1;
0B3E0:  BSF    xB9.2
....................       OutputType.B20 = 1;
0B3E2:  BSF    xB9.3
....................  
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
0B3E4:  BSF    xBB.0
....................       OutputBoth.B2 = 1;
0B3E6:  BSF    xBB.1
....................       OutputBoth.B3 = 1;
0B3E8:  BSF    xBB.2
....................       OutputBoth.B4 = 1;
0B3EA:  BSF    xBB.3
....................       OutputBoth.B5 = 1;
0B3EC:  BSF    xBB.4
....................       OutputBoth.B6 = 1;
0B3EE:  BSF    xBB.5
....................       OutputBoth.B7 = 1;
0B3F0:  BSF    xBB.6
....................       OutputBoth.B8 = 1;
0B3F2:  BSF    xBB.7
....................       OutputBoth.B9 = 1;
0B3F4:  BSF    xBC.0
....................       OutputBoth.B10 = 1;
0B3F6:  BSF    xBC.1
....................       OutputBoth.B11 = 1;
0B3F8:  BSF    xBC.2
....................       OutputBoth.B12 = 1;
0B3FA:  BSF    xBC.3
....................       OutputBoth.B13 = 1;
0B3FC:  BSF    xBC.4
....................       OutputBoth.B14 = 1;
0B3FE:  BSF    xBC.5
....................       OutputBoth.B15 = 1;
0B400:  BSF    xBC.6
....................       OutputBoth.B16 = 1;
0B402:  BSF    xBC.7
....................       OutputBoth.B17 = 1;
0B404:  BSF    xBD.0
....................       OutputBoth.B18 = 1;
0B406:  BSF    xBD.1
....................       OutputBoth.B19 = 1;
0B408:  BSF    xBD.2
....................       OutputBoth.B20 = 1;
0B40A:  BSF    xBD.3
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
0B40C:  BSF    xBF.0
....................       AlarmIndicator.B2 = 1;
0B40E:  BSF    xBF.1
....................       AlarmIndicator.B3 = 1;
0B410:  BSF    xBF.2
....................       AlarmIndicator.B4 = 1;
0B412:  BSF    xBF.3
....................       AlarmIndicator.B5 = 1;
0B414:  BSF    xBF.4
....................       AlarmIndicator.B6 = 1;
0B416:  BSF    xBF.5
....................       AlarmIndicator.B7 = 1;
0B418:  BSF    xBF.6
....................       AlarmIndicator.B8 = 1;
0B41A:  BSF    xBF.7
....................       AlarmIndicator.B9 = 1;
0B41C:  BSF    xC0.0
....................       AlarmIndicator.B10 = 1;
0B41E:  BSF    xC0.1
....................       AlarmIndicator.B11 = 1;
0B420:  BSF    xC0.2
....................       AlarmIndicator.B12 = 1;
0B422:  BSF    xC0.3
....................       AlarmIndicator.B13 = 1;
0B424:  BSF    xC0.4
....................       AlarmIndicator.B14 = 1;
0B426:  BSF    xC0.5
....................       AlarmIndicator.B15 = 1;
0B428:  BSF    xC0.6
....................       AlarmIndicator.B16 = 1;
0B42A:  BSF    xC0.7
....................       AlarmIndicator.B17 = 1;
0B42C:  BSF    xC1.0
....................       AlarmIndicator.B18 = 1;
0B42E:  BSF    xC1.1
....................       AlarmIndicator.B19 = 1;
0B430:  BSF    xC1.2
....................       AlarmIndicator.B20 = 1;
0B432:  BSF    xC1.3
....................       
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
0B434:  MOVFF  FF2,E6D
0B438:  BCF    FF2.7
0B43A:  CLRF   FAA
0B43C:  MOVLW  10
0B43E:  MOVWF  FA9
0B440:  BCF    FA6.6
0B442:  BCF    FA6.7
0B444:  BSF    FA6.0
0B446:  MOVF   FA8,W
0B448:  MOVLB  E
0B44A:  BTFSC  x6D.7
0B44C:  BSF    FF2.7
0B44E:  MOVWF  36
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
0B450:  MOVLB  D
0B452:  BCF    xD3.0
0B454:  BTFSC  36.0
0B456:  BSF    xD3.0
....................    RED_Colour.B2 = EEpDat >> 1;
0B458:  BCF    FD8.0
0B45A:  RRCF   36,W
0B45C:  BCF    xD3.1
0B45E:  BTFSC  FE8.0
0B460:  BSF    xD3.1
....................    RED_Colour.B3 = EEpDat >> 2;
0B462:  RRCF   36,W
0B464:  MOVWF  00
0B466:  RRCF   00,F
0B468:  MOVLW  3F
0B46A:  ANDWF  00,F
0B46C:  BCF    xD3.2
0B46E:  BTFSC  00.0
0B470:  BSF    xD3.2
....................    RED_Colour.B4 = EEpDat >> 3;
0B472:  RRCF   36,W
0B474:  MOVWF  00
0B476:  RRCF   00,F
0B478:  RRCF   00,F
0B47A:  MOVLW  1F
0B47C:  ANDWF  00,F
0B47E:  BCF    xD3.3
0B480:  BTFSC  00.0
0B482:  BSF    xD3.3
....................    RED_Colour.B5 = EEpDat >> 4;
0B484:  SWAPF  36,W
0B486:  MOVWF  00
0B488:  MOVLW  0F
0B48A:  ANDWF  00,F
0B48C:  BCF    xD3.4
0B48E:  BTFSC  00.0
0B490:  BSF    xD3.4
....................    RED_Colour.B6 = EEpDat >> 5;
0B492:  SWAPF  36,W
0B494:  MOVWF  00
0B496:  RRCF   00,F
0B498:  MOVLW  07
0B49A:  ANDWF  00,F
0B49C:  BCF    xD3.5
0B49E:  BTFSC  00.0
0B4A0:  BSF    xD3.5
....................    RED_Colour.B7 = EEpDat >> 6;
0B4A2:  SWAPF  36,W
0B4A4:  MOVWF  00
0B4A6:  RRCF   00,F
0B4A8:  RRCF   00,F
0B4AA:  MOVLW  03
0B4AC:  ANDWF  00,F
0B4AE:  BCF    xD3.6
0B4B0:  BTFSC  00.0
0B4B2:  BSF    xD3.6
....................    RED_Colour.B8 = EEpDat >> 7;
0B4B4:  CLRF   00
0B4B6:  BTFSC  36.7
0B4B8:  BSF    00.0
0B4BA:  BCF    xD3.7
0B4BC:  BTFSC  00.0
0B4BE:  BSF    xD3.7
....................    
....................    EEpDat = read_eeprom(0x11);
0B4C0:  MOVFF  FF2,E6D
0B4C4:  BCF    FF2.7
0B4C6:  CLRF   FAA
0B4C8:  MOVLW  11
0B4CA:  MOVWF  FA9
0B4CC:  BCF    FA6.6
0B4CE:  BCF    FA6.7
0B4D0:  BSF    FA6.0
0B4D2:  MOVF   FA8,W
0B4D4:  MOVLB  E
0B4D6:  BTFSC  x6D.7
0B4D8:  BSF    FF2.7
0B4DA:  MOVWF  36
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
0B4DC:  MOVLB  D
0B4DE:  BCF    xD4.0
0B4E0:  BTFSC  36.0
0B4E2:  BSF    xD4.0
....................    RED_Colour.B10 = EEpDat >> 1;
0B4E4:  BCF    FD8.0
0B4E6:  RRCF   36,W
0B4E8:  BCF    xD4.1
0B4EA:  BTFSC  FE8.0
0B4EC:  BSF    xD4.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
0B4EE:  MOVFF  FF2,E6D
0B4F2:  BCF    FF2.7
0B4F4:  CLRF   FAA
0B4F6:  MOVLW  12
0B4F8:  MOVWF  FA9
0B4FA:  BCF    FA6.6
0B4FC:  BCF    FA6.7
0B4FE:  BSF    FA6.0
0B500:  MOVF   FA8,W
0B502:  MOVLB  E
0B504:  BTFSC  x6D.7
0B506:  BSF    FF2.7
0B508:  MOVWF  36
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
0B50A:  MOVLB  D
0B50C:  BCF    xD4.2
0B50E:  BTFSC  36.0
0B510:  BSF    xD4.2
....................    RED_Colour.B12 = EEpDat >> 1;
0B512:  BCF    FD8.0
0B514:  RRCF   36,W
0B516:  BCF    xD4.3
0B518:  BTFSC  FE8.0
0B51A:  BSF    xD4.3
....................    RED_Colour.B13 = EEpDat >> 2;
0B51C:  RRCF   36,W
0B51E:  MOVWF  00
0B520:  RRCF   00,F
0B522:  MOVLW  3F
0B524:  ANDWF  00,F
0B526:  BCF    xD4.4
0B528:  BTFSC  00.0
0B52A:  BSF    xD4.4
....................    RED_Colour.B14 = EEpDat >> 3;
0B52C:  RRCF   36,W
0B52E:  MOVWF  00
0B530:  RRCF   00,F
0B532:  RRCF   00,F
0B534:  MOVLW  1F
0B536:  ANDWF  00,F
0B538:  BCF    xD4.5
0B53A:  BTFSC  00.0
0B53C:  BSF    xD4.5
....................    RED_Colour.B15 = EEpDat >> 4;
0B53E:  SWAPF  36,W
0B540:  MOVWF  00
0B542:  MOVLW  0F
0B544:  ANDWF  00,F
0B546:  BCF    xD4.6
0B548:  BTFSC  00.0
0B54A:  BSF    xD4.6
....................    RED_Colour.B16 = EEpDat >> 5;
0B54C:  SWAPF  36,W
0B54E:  MOVWF  00
0B550:  RRCF   00,F
0B552:  MOVLW  07
0B554:  ANDWF  00,F
0B556:  BCF    xD4.7
0B558:  BTFSC  00.0
0B55A:  BSF    xD4.7
....................    RED_Colour.B17 = EEpDat >> 6;
0B55C:  SWAPF  36,W
0B55E:  MOVWF  00
0B560:  RRCF   00,F
0B562:  RRCF   00,F
0B564:  MOVLW  03
0B566:  ANDWF  00,F
0B568:  BCF    xD5.0
0B56A:  BTFSC  00.0
0B56C:  BSF    xD5.0
....................    RED_Colour.B18 = EEpDat >> 7;
0B56E:  CLRF   00
0B570:  BTFSC  36.7
0B572:  BSF    00.0
0B574:  BCF    xD5.1
0B576:  BTFSC  00.0
0B578:  BSF    xD5.1
....................    
....................    EEpDat = read_eeprom(0x13);
0B57A:  MOVFF  FF2,E6D
0B57E:  BCF    FF2.7
0B580:  CLRF   FAA
0B582:  MOVLW  13
0B584:  MOVWF  FA9
0B586:  BCF    FA6.6
0B588:  BCF    FA6.7
0B58A:  BSF    FA6.0
0B58C:  MOVF   FA8,W
0B58E:  MOVLB  E
0B590:  BTFSC  x6D.7
0B592:  BSF    FF2.7
0B594:  MOVWF  36
....................    //Red19_20 = EEpDat;
....................    RED_Colour.B19 = EEpDat;
0B596:  MOVLB  D
0B598:  BCF    xD5.2
0B59A:  BTFSC  36.0
0B59C:  BSF    xD5.2
....................    RED_Colour.B20 = EEpDat >> 1;
0B59E:  BCF    FD8.0
0B5A0:  RRCF   36,W
0B5A2:  BCF    xD5.3
0B5A4:  BTFSC  FE8.0
0B5A6:  BSF    xD5.3
....................    
....................    
....................    EEpDat = read_eeprom(0x14);
0B5A8:  MOVFF  FF2,E6D
0B5AC:  BCF    FF2.7
0B5AE:  CLRF   FAA
0B5B0:  MOVLW  14
0B5B2:  MOVWF  FA9
0B5B4:  BCF    FA6.6
0B5B6:  BCF    FA6.7
0B5B8:  BSF    FA6.0
0B5BA:  MOVF   FA8,W
0B5BC:  MOVLB  E
0B5BE:  BTFSC  x6D.7
0B5C0:  BSF    FF2.7
0B5C2:  MOVWF  36
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
0B5C4:  MOVLB  D
0B5C6:  BCF    xD7.0
0B5C8:  BTFSC  36.0
0B5CA:  BSF    xD7.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
0B5CC:  BCF    FD8.0
0B5CE:  RRCF   36,W
0B5D0:  BCF    xD7.1
0B5D2:  BTFSC  FE8.0
0B5D4:  BSF    xD7.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
0B5D6:  RRCF   36,W
0B5D8:  MOVWF  00
0B5DA:  RRCF   00,F
0B5DC:  MOVLW  3F
0B5DE:  ANDWF  00,F
0B5E0:  BCF    xD7.2
0B5E2:  BTFSC  00.0
0B5E4:  BSF    xD7.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
0B5E6:  RRCF   36,W
0B5E8:  MOVWF  00
0B5EA:  RRCF   00,F
0B5EC:  RRCF   00,F
0B5EE:  MOVLW  1F
0B5F0:  ANDWF  00,F
0B5F2:  BCF    xD7.3
0B5F4:  BTFSC  00.0
0B5F6:  BSF    xD7.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
0B5F8:  SWAPF  36,W
0B5FA:  MOVWF  00
0B5FC:  MOVLW  0F
0B5FE:  ANDWF  00,F
0B600:  BCF    xD7.4
0B602:  BTFSC  00.0
0B604:  BSF    xD7.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
0B606:  SWAPF  36,W
0B608:  MOVWF  00
0B60A:  RRCF   00,F
0B60C:  MOVLW  07
0B60E:  ANDWF  00,F
0B610:  BCF    xD7.5
0B612:  BTFSC  00.0
0B614:  BSF    xD7.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
0B616:  SWAPF  36,W
0B618:  MOVWF  00
0B61A:  RRCF   00,F
0B61C:  RRCF   00,F
0B61E:  MOVLW  03
0B620:  ANDWF  00,F
0B622:  BCF    xD7.6
0B624:  BTFSC  00.0
0B626:  BSF    xD7.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
0B628:  CLRF   00
0B62A:  BTFSC  36.7
0B62C:  BSF    00.0
0B62E:  BCF    xD7.7
0B630:  BTFSC  00.0
0B632:  BSF    xD7.7
....................    
....................    EEpDat = read_eeprom(0x15);
0B634:  MOVFF  FF2,E6D
0B638:  BCF    FF2.7
0B63A:  CLRF   FAA
0B63C:  MOVLW  15
0B63E:  MOVWF  FA9
0B640:  BCF    FA6.6
0B642:  BCF    FA6.7
0B644:  BSF    FA6.0
0B646:  MOVF   FA8,W
0B648:  MOVLB  E
0B64A:  BTFSC  x6D.7
0B64C:  BSF    FF2.7
0B64E:  MOVWF  36
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
0B650:  MOVLB  D
0B652:  BCF    xD8.0
0B654:  BTFSC  36.0
0B656:  BSF    xD8.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
0B658:  BCF    FD8.0
0B65A:  RRCF   36,W
0B65C:  BCF    xD8.1
0B65E:  BTFSC  FE8.0
0B660:  BSF    xD8.1
....................   
....................    EEpDat = read_eeprom(0x16);
0B662:  MOVFF  FF2,E6D
0B666:  BCF    FF2.7
0B668:  CLRF   FAA
0B66A:  MOVLW  16
0B66C:  MOVWF  FA9
0B66E:  BCF    FA6.6
0B670:  BCF    FA6.7
0B672:  BSF    FA6.0
0B674:  MOVF   FA8,W
0B676:  MOVLB  E
0B678:  BTFSC  x6D.7
0B67A:  BSF    FF2.7
0B67C:  MOVWF  36
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0B67E:  MOVLB  D
0B680:  BCF    xD8.2
0B682:  BTFSC  36.0
0B684:  BSF    xD8.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
0B686:  BCF    FD8.0
0B688:  RRCF   36,W
0B68A:  BCF    xD8.3
0B68C:  BTFSC  FE8.0
0B68E:  BSF    xD8.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
0B690:  RRCF   36,W
0B692:  MOVWF  00
0B694:  RRCF   00,F
0B696:  MOVLW  3F
0B698:  ANDWF  00,F
0B69A:  BCF    xD8.4
0B69C:  BTFSC  00.0
0B69E:  BSF    xD8.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
0B6A0:  RRCF   36,W
0B6A2:  MOVWF  00
0B6A4:  RRCF   00,F
0B6A6:  RRCF   00,F
0B6A8:  MOVLW  1F
0B6AA:  ANDWF  00,F
0B6AC:  BCF    xD8.5
0B6AE:  BTFSC  00.0
0B6B0:  BSF    xD8.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
0B6B2:  SWAPF  36,W
0B6B4:  MOVWF  00
0B6B6:  MOVLW  0F
0B6B8:  ANDWF  00,F
0B6BA:  BCF    xD8.6
0B6BC:  BTFSC  00.0
0B6BE:  BSF    xD8.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
0B6C0:  SWAPF  36,W
0B6C2:  MOVWF  00
0B6C4:  RRCF   00,F
0B6C6:  MOVLW  07
0B6C8:  ANDWF  00,F
0B6CA:  BCF    xD8.7
0B6CC:  BTFSC  00.0
0B6CE:  BSF    xD8.7
....................    GREEN_Colour.B17 = EEpDat >> 6;
0B6D0:  SWAPF  36,W
0B6D2:  MOVWF  00
0B6D4:  RRCF   00,F
0B6D6:  RRCF   00,F
0B6D8:  MOVLW  03
0B6DA:  ANDWF  00,F
0B6DC:  BCF    xD9.0
0B6DE:  BTFSC  00.0
0B6E0:  BSF    xD9.0
....................    GREEN_Colour.B18 = EEpDat >> 7;
0B6E2:  CLRF   00
0B6E4:  BTFSC  36.7
0B6E6:  BSF    00.0
0B6E8:  BCF    xD9.1
0B6EA:  BTFSC  00.0
0B6EC:  BSF    xD9.1
....................    
....................    EEpDat = read_eeprom(0x17);
0B6EE:  MOVFF  FF2,E6D
0B6F2:  BCF    FF2.7
0B6F4:  CLRF   FAA
0B6F6:  MOVLW  17
0B6F8:  MOVWF  FA9
0B6FA:  BCF    FA6.6
0B6FC:  BCF    FA6.7
0B6FE:  BSF    FA6.0
0B700:  MOVF   FA8,W
0B702:  MOVLB  E
0B704:  BTFSC  x6D.7
0B706:  BSF    FF2.7
0B708:  MOVWF  36
....................    //Green19_20 = EEpDat;
....................    GREEN_Colour.B19 = EEpDat;
0B70A:  MOVLB  D
0B70C:  BCF    xD9.2
0B70E:  BTFSC  36.0
0B710:  BSF    xD9.2
....................    GREEN_Colour.B20 = EEpDat >> 1;
0B712:  BCF    FD8.0
0B714:  RRCF   36,W
0B716:  BCF    xD9.3
0B718:  BTFSC  FE8.0
0B71A:  BSF    xD9.3
0B71C:  MOVLB  0
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
.................... 
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
0B71E:  MOVLW  00
0B720:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
0B722:  MOVWF  F93
....................    enable_interrupts(GLOBAL);
0B724:  MOVLW  C0
0B726:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
0B728:  BSF    FD1.0
....................    Read_input(); restart_wdt();
0B72A:  CALL   22D6
0B72E:  CLRWDT
....................    output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B730:  BCF    F89.4
0B732:  BCF    F92.4
....................    output_bit(Pbell,OffRelay);     //Clear Bell
0B734:  BCF    F89.3
0B736:  BCF    F92.3
....................    output_bit(P485ctrl,0);
0B738:  BCF    F8A.3
0B73A:  BCF    F93.3
....................    output_bit(PIN_B4,1); //jj
0B73C:  BSF    F8A.4
0B73E:  BCF    F93.4
....................    Send_Ouput();
0B740:  CALL   2EFC
....................    
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
0B744:  MOVLW  04
0B746:  MOVLB  E
0B748:  MOVWF  x75
0B74A:  SETF   x76
0B74C:  MOVLB  0
0B74E:  CALL   2ED0
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
0B752:  MOVLW  04
0B754:  MOVLB  E
0B756:  MOVWF  x75
0B758:  SETF   x76
0B75A:  MOVLB  0
0B75C:  CALL   2EE6
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
0B760:  MOVLW  06
0B762:  MOVLB  E
0B764:  MOVWF  x75
0B766:  SETF   x76
0B768:  MOVLB  0
0B76A:  CALL   2ED0
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
0B76E:  MOVLW  06
0B770:  MOVLB  E
0B772:  MOVWF  x75
0B774:  SETF   x76
0B776:  MOVLB  0
0B778:  CALL   2EE6
....................   
....................    IO_OUTPUT_A(IO_DEVICE_5, 0xff);  
0B77C:  MOVLW  0A
0B77E:  MOVLB  E
0B780:  MOVWF  x75
0B782:  SETF   x76
0B784:  MOVLB  0
0B786:  CALL   2ED0
....................    IO_OUTPUT_B(IO_DEVICE_5, 0xff);
0B78A:  MOVLW  0A
0B78C:  MOVLB  E
0B78E:  MOVWF  x75
0B790:  SETF   x76
0B792:  MOVLB  0
0B794:  CALL   2EE6
....................             
....................    IO_OUTPUT_A(IO_DEVICE_4, 0xff);
0B798:  MOVLW  08
0B79A:  MOVLB  E
0B79C:  MOVWF  x75
0B79E:  SETF   x76
0B7A0:  MOVLB  0
0B7A2:  CALL   2ED0
....................    IO_OUTPUT_B(IO_DEVICE_4, 0xff);
0B7A6:  MOVLW  08
0B7A8:  MOVLB  E
0B7AA:  MOVWF  x75
0B7AC:  SETF   x76
0B7AE:  MOVLB  0
0B7B0:  CALL   2EE6
....................    
....................    
....................    
....................    // jj
....................    char i;
....................    for(i=1;i<=20;i++)
0B7B4:  MOVLW  01
0B7B6:  MOVLB  E
0B7B8:  MOVWF  x6A
0B7BA:  MOVF   x6A,W
0B7BC:  SUBLW  14
0B7BE:  BTFSS  FD8.0
0B7C0:  BRA    B98E
....................    {
....................       FaultAgo[i] = 0;
0B7C2:  MOVFF  E6A,E78
0B7C6:  CLRF   x79
0B7C8:  MOVLW  0D
0B7CA:  MOVWF  x7B
0B7CC:  MOVLW  DF
0B7CE:  MOVWF  x7A
0B7D0:  MOVLB  0
0B7D2:  CALL   2252
....................       FaultNow[i] = 0;
0B7D6:  MOVFF  E6A,E78
0B7DA:  MOVLB  E
0B7DC:  CLRF   x79
0B7DE:  MOVLW  0D
0B7E0:  MOVWF  x7B
0B7E2:  MOVLW  E3
0B7E4:  MOVWF  x7A
0B7E6:  MOVLB  0
0B7E8:  CALL   2252
....................       ReleaseTime[i] = 0;
0B7EC:  BCF    FD8.0
0B7EE:  MOVLB  E
0B7F0:  RLCF   x6A,W
0B7F2:  CLRF   03
0B7F4:  ADDLW  E7
0B7F6:  MOVWF  FE9
0B7F8:  MOVLW  0D
0B7FA:  ADDWFC 03,W
0B7FC:  MOVWF  FEA
0B7FE:  CLRF   FEC
0B800:  MOVF   FED,F
0B802:  CLRF   FEF
....................       
....................       if(FaultNCNO[i] ==NO)
0B804:  MOVFF  E6A,E78
0B808:  MOVLW  0E
0B80A:  MOVWF  x7A
0B80C:  MOVLW  5F
0B80E:  MOVWF  x79
0B810:  MOVLB  0
0B812:  CALL   21FA
0B816:  MOVF   01,W
0B818:  ANDLW  01
0B81A:  SUBLW  01
0B81C:  BNZ   B8D6
....................       {
....................          switch(i)
0B81E:  MOVLW  01
0B820:  MOVLB  E
0B822:  SUBWF  x6A,W
0B824:  ADDLW  EC
0B826:  BC    B8D2
0B828:  ADDLW  14
0B82A:  MOVLB  0
0B82C:  GOTO   BCCE
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
0B830:  MOVLB  D
0B832:  BSF    xA7.0
....................             break;
0B834:  MOVLB  E
0B836:  BRA    B8D2
....................             case 2:
....................                Inputt.B2 = 1; 
0B838:  MOVLB  D
0B83A:  BSF    xA7.1
....................             break;
0B83C:  MOVLB  E
0B83E:  BRA    B8D2
....................             case 3:
....................                Inputt.B3 = 1; 
0B840:  MOVLB  D
0B842:  BSF    xA7.2
....................             break;
0B844:  MOVLB  E
0B846:  BRA    B8D2
....................             case 4:
....................                Inputt.B4 = 1; 
0B848:  MOVLB  D
0B84A:  BSF    xA7.3
....................             break;
0B84C:  MOVLB  E
0B84E:  BRA    B8D2
....................             case 5:
....................                Inputt.B5 = 1; 
0B850:  MOVLB  D
0B852:  BSF    xA7.4
....................             break;
0B854:  MOVLB  E
0B856:  BRA    B8D2
....................             case 6:
....................                Inputt.B6 = 1; 
0B858:  MOVLB  D
0B85A:  BSF    xA7.5
....................             break;
0B85C:  MOVLB  E
0B85E:  BRA    B8D2
....................             case 7:
....................                Inputt.B7 = 1; 
0B860:  MOVLB  D
0B862:  BSF    xA7.6
....................              break;
0B864:  MOVLB  E
0B866:  BRA    B8D2
....................              case 8:
....................                Inputt.B8 = 1; 
0B868:  MOVLB  D
0B86A:  BSF    xA7.7
....................             break;
0B86C:  MOVLB  E
0B86E:  BRA    B8D2
....................             case 9:
....................                Inputt.B9 = 1; 
0B870:  MOVLB  D
0B872:  BSF    xA8.0
....................             break;
0B874:  MOVLB  E
0B876:  BRA    B8D2
....................             case 10:
....................                Inputt.B10 = 1; 
0B878:  MOVLB  D
0B87A:  BSF    xA8.1
....................             break;
0B87C:  MOVLB  E
0B87E:  BRA    B8D2
....................             case 11:
....................                Inputt.B11 = 1; 
0B880:  MOVLB  D
0B882:  BSF    xA8.2
....................             break;
0B884:  MOVLB  E
0B886:  BRA    B8D2
....................             case 12:
....................                Inputt.B12 = 1; 
0B888:  MOVLB  D
0B88A:  BSF    xA8.3
....................             break;
0B88C:  MOVLB  E
0B88E:  BRA    B8D2
....................             case 13:
....................                Inputt.B13 = 1; 
0B890:  MOVLB  D
0B892:  BSF    xA8.4
....................             break;
0B894:  MOVLB  E
0B896:  BRA    B8D2
....................             case 14:
....................                Inputt.B14 = 1; 
0B898:  MOVLB  D
0B89A:  BSF    xA8.5
....................             break;
0B89C:  MOVLB  E
0B89E:  BRA    B8D2
....................             case 15:
....................                Inputt.B15 = 1; 
0B8A0:  MOVLB  D
0B8A2:  BSF    xA8.6
....................             break;
0B8A4:  MOVLB  E
0B8A6:  BRA    B8D2
....................             case 16:
....................                 Inputt.B16 = 1;
0B8A8:  MOVLB  D
0B8AA:  BSF    xA8.7
....................              break;
0B8AC:  MOVLB  E
0B8AE:  BRA    B8D2
....................              case 17:
....................                Inputt.B17 = 1; 
0B8B0:  MOVLB  D
0B8B2:  BSF    xA9.0
....................              break;
0B8B4:  MOVLB  E
0B8B6:  BRA    B8D2
....................              case 18:
....................                Inputt.B18 = 1; 
0B8B8:  MOVLB  D
0B8BA:  BSF    xA9.1
....................             break;
0B8BC:  MOVLB  E
0B8BE:  BRA    B8D2
....................             case 19:
....................                Inputt.B19 = 1; 
0B8C0:  MOVLB  D
0B8C2:  BSF    xA9.2
....................             break;
0B8C4:  MOVLB  E
0B8C6:  BRA    B8D2
....................             case 20:
....................                Inputt.B20 = 1; 
0B8C8:  MOVLB  D
0B8CA:  BSF    xA9.3
....................             break;
0B8CC:  MOVLB  E
0B8CE:  BRA    B8D2
0B8D0:  MOVLB  E
....................                        
....................          }                 
....................       }
0B8D2:  BRA    B98A
0B8D4:  MOVLB  0
....................       else
....................       {
....................          switch(i)
0B8D6:  MOVLW  01
0B8D8:  MOVLB  E
0B8DA:  SUBWF  x6A,W
0B8DC:  ADDLW  EC
0B8DE:  BC    B98A
0B8E0:  ADDLW  14
0B8E2:  MOVLB  0
0B8E4:  GOTO   BD10
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
0B8E8:  MOVLB  D
0B8EA:  BCF    xA7.0
....................             break;
0B8EC:  MOVLB  E
0B8EE:  BRA    B98A
....................             case 2:
....................                Inputt.B2 = 0; 
0B8F0:  MOVLB  D
0B8F2:  BCF    xA7.1
....................             break;
0B8F4:  MOVLB  E
0B8F6:  BRA    B98A
....................             case 3:
....................                Inputt.B3 = 0; 
0B8F8:  MOVLB  D
0B8FA:  BCF    xA7.2
....................             break;
0B8FC:  MOVLB  E
0B8FE:  BRA    B98A
....................             case 4:
....................                Inputt.B4 = 0; 
0B900:  MOVLB  D
0B902:  BCF    xA7.3
....................             break;
0B904:  MOVLB  E
0B906:  BRA    B98A
....................             case 5:
....................                Inputt.B5 = 0; 
0B908:  MOVLB  D
0B90A:  BCF    xA7.4
....................             break;
0B90C:  MOVLB  E
0B90E:  BRA    B98A
....................             case 6:
....................                Inputt.B6 = 0; 
0B910:  MOVLB  D
0B912:  BCF    xA7.5
....................             break;
0B914:  MOVLB  E
0B916:  BRA    B98A
....................             case 7:
....................                Inputt.B7 = 0; 
0B918:  MOVLB  D
0B91A:  BCF    xA7.6
....................              break;
0B91C:  MOVLB  E
0B91E:  BRA    B98A
....................              case 8:
....................                Inputt.B8 = 0; 
0B920:  MOVLB  D
0B922:  BCF    xA7.7
....................             break;
0B924:  MOVLB  E
0B926:  BRA    B98A
....................             case 9:
....................                Inputt.B9 = 0; 
0B928:  MOVLB  D
0B92A:  BCF    xA8.0
....................             break;
0B92C:  MOVLB  E
0B92E:  BRA    B98A
....................             case 10:
....................                Inputt.B10 = 0; 
0B930:  MOVLB  D
0B932:  BCF    xA8.1
....................             break;
0B934:  MOVLB  E
0B936:  BRA    B98A
....................             case 11:
....................                Inputt.B11 = 0; 
0B938:  MOVLB  D
0B93A:  BCF    xA8.2
....................             break;
0B93C:  MOVLB  E
0B93E:  BRA    B98A
....................             case 12:
....................                Inputt.B12 = 0; 
0B940:  MOVLB  D
0B942:  BCF    xA8.3
....................             break;
0B944:  MOVLB  E
0B946:  BRA    B98A
....................             case 13:
....................                Inputt.B13 = 0; 
0B948:  MOVLB  D
0B94A:  BCF    xA8.4
....................             break;
0B94C:  MOVLB  E
0B94E:  BRA    B98A
....................             case 14:
....................                Inputt.B14 = 0; 
0B950:  MOVLB  D
0B952:  BCF    xA8.5
....................             break;
0B954:  MOVLB  E
0B956:  BRA    B98A
....................             case 15:
....................                Inputt.B15 = 0; 
0B958:  MOVLB  D
0B95A:  BCF    xA8.6
....................             break;
0B95C:  MOVLB  E
0B95E:  BRA    B98A
....................             case 16:
....................                 Inputt.B16 = 0;
0B960:  MOVLB  D
0B962:  BCF    xA8.7
....................              break;
0B964:  MOVLB  E
0B966:  BRA    B98A
....................              case 17:
....................                Inputt.B17 = 0; 
0B968:  MOVLB  D
0B96A:  BCF    xA9.0
....................              break;
0B96C:  MOVLB  E
0B96E:  BRA    B98A
....................              case 18:
....................                Inputt.B18 = 0; 
0B970:  MOVLB  D
0B972:  BCF    xA9.1
....................             break;
0B974:  MOVLB  E
0B976:  BRA    B98A
....................             case 19:
....................                Inputt.B19 = 0; 
0B978:  MOVLB  D
0B97A:  BCF    xA9.2
....................             break;
0B97C:  MOVLB  E
0B97E:  BRA    B98A
....................             case 20:
....................                Inputt.B20 = 0; 
0B980:  MOVLB  D
0B982:  BCF    xA9.3
....................             break;
0B984:  MOVLB  E
0B986:  BRA    B98A
0B988:  MOVLB  E
....................                        
....................          }                 
....................       }
0B98A:  INCF   x6A,F
0B98C:  BRA    B7BA
....................       
....................    }
....................    
....................    //GSM SIM900 Init
....................    delay_ms(1000);
0B98E:  MOVLW  04
0B990:  MOVWF  x6D
0B992:  MOVLW  FA
0B994:  MOVWF  x76
0B996:  MOVLB  0
0B998:  CALL   0662
0B99C:  MOVLB  E
0B99E:  DECFSZ x6D,F
0B9A0:  BRA    B992
....................    fprintf(CH2,"AT+CMGF=1"); 
0B9A2:  MOVLW  58
0B9A4:  MOVWF  FF6
0B9A6:  MOVLW  06
0B9A8:  MOVWF  FF7
0B9AA:  MOVLB  0
0B9AC:  CALL   33D6
....................    putc('\n',CH2);
0B9B0:  MOVLW  0A
0B9B2:  MOVLB  E
0B9B4:  MOVWF  x6F
0B9B6:  MOVLB  0
0B9B8:  CALL   3390
....................    delay_ms(50);
0B9BC:  MOVLW  32
0B9BE:  MOVLB  E
0B9C0:  MOVWF  x76
0B9C2:  MOVLB  0
0B9C4:  CALL   0662
....................    
....................    SendSMS.B1 =0;
0B9C8:  MOVLB  D
0B9CA:  BCF    xDB.0
....................    SendSMS.B2 =0;
0B9CC:  BCF    xDB.1
....................    SendSMS.B3 =0;
0B9CE:  BCF    xDB.2
....................    SendSMS.B4 =0;
0B9D0:  BCF    xDB.3
....................    SendSMS.B5 =0;
0B9D2:  BCF    xDB.4
....................    SendSMS.B6 =0;
0B9D4:  BCF    xDB.5
....................    SendSMS.B7 =0;
0B9D6:  BCF    xDB.6
....................    SendSMS.B8 =0;
0B9D8:  BCF    xDB.7
....................    SendSMS.B9 =0;
0B9DA:  BCF    xDC.0
....................    SendSMS.B10 =0;
0B9DC:  BCF    xDC.1
....................    SendSMS.B11 =0;
0B9DE:  BCF    xDC.2
....................    SendSMS.B12 =0;
0B9E0:  BCF    xDC.3
....................    SendSMS.B13 =0;
0B9E2:  BCF    xDC.4
....................    SendSMS.B14 =0;
0B9E4:  BCF    xDC.5
....................    SendSMS.B15 =0;
0B9E6:  BCF    xDC.6
....................    SendSMS.B16 =0;
0B9E8:  BCF    xDC.7
....................    SendSMS.B17 =0;
0B9EA:  BCF    xDD.0
....................    SendSMS.B18 =0;
0B9EC:  BCF    xDD.1
....................    SendSMS.B19 =0;
0B9EE:  BCF    xDD.2
....................    SendSMS.B20 =0;
0B9F0:  BCF    xDD.3
....................    
....................    char m;
....................    for(m=0; m<10; m++)
0B9F2:  MOVLB  E
0B9F4:  CLRF   x6B
0B9F6:  MOVF   x6B,W
0B9F8:  SUBLW  09
0B9FA:  BNC   BA2E
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
0B9FC:  CLRF   03
0B9FE:  MOVF   x6B,W
0BA00:  ADDLW  74
0BA02:  MOVWF  FE9
0BA04:  MOVLW  0A
0BA06:  ADDWFC 03,W
0BA08:  MOVWF  FEA
0BA0A:  MOVLW  32
0BA0C:  ADDWF  x6B,W
0BA0E:  MOVWF  x6F
0BA10:  MOVFF  FF2,E70
0BA14:  BCF    FF2.7
0BA16:  CLRF   FAA
0BA18:  MOVFF  E6F,FA9
0BA1C:  BCF    FA6.6
0BA1E:  BCF    FA6.7
0BA20:  BSF    FA6.0
0BA22:  MOVF   FA8,W
0BA24:  BTFSC  x70.7
0BA26:  BSF    FF2.7
0BA28:  MOVWF  FEF
0BA2A:  INCF   x6B,F
0BA2C:  BRA    B9F6
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
0BA2E:  CLRF   03
0BA30:  MOVF   x6B,W
0BA32:  ADDLW  74
0BA34:  MOVWF  FE9
0BA36:  MOVLW  0A
0BA38:  ADDWFC 03,W
0BA3A:  MOVWF  FEA
0BA3C:  CLRF   FEF
....................    delay_ms(500);
0BA3E:  MOVLW  02
0BA40:  MOVWF  x6D
0BA42:  MOVLW  FA
0BA44:  MOVWF  x76
0BA46:  MOVLB  0
0BA48:  CALL   0662
0BA4C:  MOVLB  E
0BA4E:  DECFSZ x6D,F
0BA50:  BRA    BA42
....................    
....................    char j;
....................    for(j=1;j<=3;j++)
0BA52:  MOVLW  01
0BA54:  MOVWF  x6C
0BA56:  MOVF   x6C,W
0BA58:  SUBLW  03
0BA5A:  BTFSS  FD8.0
0BA5C:  BRA    BB5A
....................    {
.................... 
....................       IO_OUTPUT_A(IO_DEVICE_2, 0xff);
0BA5E:  MOVLW  04
0BA60:  MOVWF  x75
0BA62:  SETF   x76
0BA64:  MOVLB  0
0BA66:  CALL   2ED0
....................       IO_OUTPUT_B(IO_DEVICE_2, 0xff);
0BA6A:  MOVLW  04
0BA6C:  MOVLB  E
0BA6E:  MOVWF  x75
0BA70:  SETF   x76
0BA72:  MOVLB  0
0BA74:  CALL   2EE6
....................                
....................       IO_OUTPUT_A(IO_DEVICE_3, 0xff);
0BA78:  MOVLW  06
0BA7A:  MOVLB  E
0BA7C:  MOVWF  x75
0BA7E:  SETF   x76
0BA80:  MOVLB  0
0BA82:  CALL   2ED0
....................       IO_OUTPUT_B(IO_DEVICE_3, 0xff);
0BA86:  MOVLW  06
0BA88:  MOVLB  E
0BA8A:  MOVWF  x75
0BA8C:  SETF   x76
0BA8E:  MOVLB  0
0BA90:  CALL   2EE6
....................      
....................       IO_OUTPUT_A(IO_DEVICE_5, 0xff);  
0BA94:  MOVLW  0A
0BA96:  MOVLB  E
0BA98:  MOVWF  x75
0BA9A:  SETF   x76
0BA9C:  MOVLB  0
0BA9E:  CALL   2ED0
....................       IO_OUTPUT_B(IO_DEVICE_5, 0xff);
0BAA2:  MOVLW  0A
0BAA4:  MOVLB  E
0BAA6:  MOVWF  x75
0BAA8:  SETF   x76
0BAAA:  MOVLB  0
0BAAC:  CALL   2EE6
....................                
....................       IO_OUTPUT_A(IO_DEVICE_4, 0xff);
0BAB0:  MOVLW  08
0BAB2:  MOVLB  E
0BAB4:  MOVWF  x75
0BAB6:  SETF   x76
0BAB8:  MOVLB  0
0BABA:  CALL   2ED0
....................       IO_OUTPUT_B(IO_DEVICE_4, 0xff);
0BABE:  MOVLW  08
0BAC0:  MOVLB  E
0BAC2:  MOVWF  x75
0BAC4:  SETF   x76
0BAC6:  MOVLB  0
0BAC8:  CALL   2EE6
....................       
....................       delay_ms(250);
0BACC:  MOVLW  FA
0BACE:  MOVLB  E
0BAD0:  MOVWF  x76
0BAD2:  MOVLB  0
0BAD4:  CALL   0662
....................       IO_OUTPUT_A(IO_DEVICE_2, 0);
0BAD8:  MOVLW  04
0BADA:  MOVLB  E
0BADC:  MOVWF  x75
0BADE:  CLRF   x76
0BAE0:  MOVLB  0
0BAE2:  CALL   2ED0
....................       IO_OUTPUT_B(IO_DEVICE_2, 0);
0BAE6:  MOVLW  04
0BAE8:  MOVLB  E
0BAEA:  MOVWF  x75
0BAEC:  CLRF   x76
0BAEE:  MOVLB  0
0BAF0:  CALL   2EE6
....................                
....................       IO_OUTPUT_A(IO_DEVICE_3, 0);
0BAF4:  MOVLW  06
0BAF6:  MOVLB  E
0BAF8:  MOVWF  x75
0BAFA:  CLRF   x76
0BAFC:  MOVLB  0
0BAFE:  CALL   2ED0
....................       IO_OUTPUT_B(IO_DEVICE_3, 0);
0BB02:  MOVLW  06
0BB04:  MOVLB  E
0BB06:  MOVWF  x75
0BB08:  CLRF   x76
0BB0A:  MOVLB  0
0BB0C:  CALL   2EE6
....................      
....................       IO_OUTPUT_A(IO_DEVICE_5, 0);  
0BB10:  MOVLW  0A
0BB12:  MOVLB  E
0BB14:  MOVWF  x75
0BB16:  CLRF   x76
0BB18:  MOVLB  0
0BB1A:  CALL   2ED0
....................       IO_OUTPUT_B(IO_DEVICE_5, 0);
0BB1E:  MOVLW  0A
0BB20:  MOVLB  E
0BB22:  MOVWF  x75
0BB24:  CLRF   x76
0BB26:  MOVLB  0
0BB28:  CALL   2EE6
....................                
....................       IO_OUTPUT_A(IO_DEVICE_4, 0);
0BB2C:  MOVLW  08
0BB2E:  MOVLB  E
0BB30:  MOVWF  x75
0BB32:  CLRF   x76
0BB34:  MOVLB  0
0BB36:  CALL   2ED0
....................       IO_OUTPUT_B(IO_DEVICE_4, 0);
0BB3A:  MOVLW  08
0BB3C:  MOVLB  E
0BB3E:  MOVWF  x75
0BB40:  CLRF   x76
0BB42:  MOVLB  0
0BB44:  CALL   2EE6
....................       delay_ms(250);
0BB48:  MOVLW  FA
0BB4A:  MOVLB  E
0BB4C:  MOVWF  x76
0BB4E:  MOVLB  0
0BB50:  CALL   0662
0BB54:  MOVLB  E
0BB56:  INCF   x6C,F
0BB58:  BRA    BA56
....................    }
....................    functointest_f = 0;
0BB5A:  BCF    32.3
....................    
....................    while(TRUE)
....................    {
....................   
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
0BB5C:  CLRF   x75
0BB5E:  SETF   x76
0BB60:  MOVLB  0
0BB62:  CALL   2ED0
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
0BB66:  MOVLB  E
0BB68:  CLRF   x75
0BB6A:  SETF   x76
0BB6C:  MOVLB  0
0BB6E:  CALL   2EE6
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
0BB72:  MOVLW  02
0BB74:  MOVLB  E
0BB76:  MOVWF  x75
0BB78:  SETF   x76
0BB7A:  MOVLB  0
0BB7C:  CALL   2ED0
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
0BB80:  MOVLW  02
0BB82:  MOVLB  E
0BB84:  MOVWF  x75
0BB86:  SETF   x76
0BB88:  MOVLB  0
0BB8A:  CALL   2EE6
....................       restart_wdt();   
0BB8E:  CLRWDT
....................       if(recieve_completed == 1)
0BB90:  BTFSS  32.5
0BB92:  BRA    BB9A
....................       {
....................          Modbus_Function();
0BB94:  GOTO   3E2C
....................          recieve_completed = 0 ;
0BB98:  BCF    32.5
....................       }
....................       check_ack();restart_wdt();
0BB9A:  CALL   390E
0BB9E:  CLRWDT
....................       check_reset();restart_wdt();
0BBA0:  CALL   3ACA
0BBA4:  CLRWDT
....................       check_test();restart_wdt();      
0BBA6:  GOTO   6CE8
0BBAA:  CLRWDT
....................       
....................       if(StartRead)
0BBAC:  BTFSS  32.4
0BBAE:  BRA    BCC6
....................       {
....................          Anal_Function(); restart_wdt();
0BBB0:  GOTO   7AE4
0BBB4:  CLRWDT
....................          
....................          
....................          Send_Ouput(); restart_wdt();
0BBB6:  CALL   2EFC
0BBBA:  CLRWDT
....................         // Driver595(); restart_wdt();      
....................         // output_toggle(PIN_A0);
....................          Read_input(); restart_wdt(); //Must be first
0BBBC:  CALL   22D6
0BBC0:  CLRWDT
....................          
....................          if(send_SMS_period){
0BBC2:  MOVLB  D
0BBC4:  MOVF   xA5,F
0BBC6:  BZ    BBD2
....................             send_SMS_period =0;
0BBC8:  CLRF   xA5
....................             sendsum_sms();
0BBCA:  MOVLB  0
0BBCC:  GOTO   AF94
0BBD0:  MOVLB  D
....................          }
....................          
....................          if(RefreshConfigData)
0BBD2:  BTFSS  32.2
0BBD4:  BRA    BCC8
....................          {
....................             RefreshConfigData =0;
0BBD6:  BCF    32.2
....................             Read_Config();
0BBD8:  MOVLB  0
0BBDA:  CALL   0780
....................             //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................      
....................             IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
0BBDE:  MOVLB  E
0BBE0:  CLRF   x6D
0BBE2:  SETF   x6E
0BBE4:  MOVLB  0
0BBE6:  CALL   075A
....................             IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
0BBEA:  MOVLB  E
0BBEC:  CLRF   x6D
0BBEE:  SETF   x6E
0BBF0:  MOVLB  0
0BBF2:  CALL   076C
....................             IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
0BBF6:  MOVLW  02
0BBF8:  MOVLB  E
0BBFA:  MOVWF  x6D
0BBFC:  SETF   x6E
0BBFE:  MOVLB  0
0BC00:  CALL   075A
....................             IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input
0BC04:  MOVLW  02
0BC06:  MOVLB  E
0BC08:  MOVWF  x6D
0BC0A:  SETF   x6E
0BC0C:  MOVLB  0
0BC0E:  CALL   076C
....................             //  jj
....................             IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0BC12:  MOVLB  E
0BC14:  CLRF   x77
0BC16:  MOVLW  06
0BC18:  MOVWF  x78
0BC1A:  SETF   x79
0BC1C:  MOVLB  0
0BC1E:  CALL   0692
....................             IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0BC22:  MOVLB  E
0BC24:  CLRF   x77
0BC26:  MOVLW  16
0BC28:  MOVWF  x78
0BC2A:  SETF   x79
0BC2C:  MOVLB  0
0BC2E:  CALL   0692
....................             IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0BC32:  MOVLW  02
0BC34:  MOVLB  E
0BC36:  MOVWF  x77
0BC38:  MOVLW  06
0BC3A:  MOVWF  x78
0BC3C:  SETF   x79
0BC3E:  MOVLB  0
0BC40:  CALL   0692
....................             IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0BC44:  MOVLW  02
0BC46:  MOVLB  E
0BC48:  MOVWF  x77
0BC4A:  MOVLW  16
0BC4C:  MOVWF  x78
0BC4E:  SETF   x79
0BC50:  MOVLB  0
0BC52:  CALL   0692
....................             //  jj
....................             IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0BC56:  MOVLW  04
0BC58:  MOVLB  E
0BC5A:  MOVWF  x6D
0BC5C:  CLRF   x6E
0BC5E:  MOVLB  0
0BC60:  CALL   075A
....................             IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0BC64:  MOVLW  04
0BC66:  MOVLB  E
0BC68:  MOVWF  x6D
0BC6A:  CLRF   x6E
0BC6C:  MOVLB  0
0BC6E:  CALL   076C
....................             IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0BC72:  MOVLW  06
0BC74:  MOVLB  E
0BC76:  MOVWF  x6D
0BC78:  CLRF   x6E
0BC7A:  MOVLB  0
0BC7C:  CALL   075A
....................             IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0BC80:  MOVLW  06
0BC82:  MOVLB  E
0BC84:  MOVWF  x6D
0BC86:  CLRF   x6E
0BC88:  MOVLB  0
0BC8A:  CALL   076C
....................             IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0BC8E:  MOVLW  08
0BC90:  MOVLB  E
0BC92:  MOVWF  x6D
0BC94:  CLRF   x6E
0BC96:  MOVLB  0
0BC98:  CALL   075A
....................             IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0BC9C:  MOVLW  08
0BC9E:  MOVLB  E
0BCA0:  MOVWF  x6D
0BCA2:  CLRF   x6E
0BCA4:  MOVLB  0
0BCA6:  CALL   076C
....................             IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0BCAA:  MOVLW  0A
0BCAC:  MOVLB  E
0BCAE:  MOVWF  x6D
0BCB0:  CLRF   x6E
0BCB2:  MOVLB  0
0BCB4:  CALL   075A
....................             IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0BCB8:  MOVLW  0A
0BCBA:  MOVLB  E
0BCBC:  MOVWF  x6D
0BCBE:  CLRF   x6E
0BCC0:  MOVLB  0
0BCC2:  CALL   076C
0BCC6:  MOVLB  D
....................          }
....................          
....................       }     
0BCC8:  MOVLB  E
0BCCA:  BRA    BB5C
.................... 
....................    }
....................    
.................... }
0BCCC:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
