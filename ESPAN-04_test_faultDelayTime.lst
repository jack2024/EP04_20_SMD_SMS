CCS PCH C Compiler, Version 5.091, 5967               24-¡.Â.-21 08:39

               Filename:   D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - SMS\ESPAN-04_test_faultDelayTime.lst

               ROM used:   53432 bytes (82%)
                           Largest free fragment is 12100
               RAM used:   3648 (94%) at main() level
                           3674 (94%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 31

00000:  GOTO   C4CC
*
00008:  MOVWF  04
0000A:  MOVFF  FD8,05
0000E:  MOVFF  FE0,06
00012:  MOVLB  0
00014:  MOVFF  FE9,0C
00018:  MOVFF  FEA,07
0001C:  MOVFF  FE1,08
00020:  MOVFF  FE2,09
00024:  MOVFF  FD9,0A
00028:  MOVFF  FDA,0B
0002C:  MOVFF  FF3,12
00030:  MOVFF  FF4,13
00034:  MOVFF  FFA,14
00038:  MOVFF  FF5,15
0003C:  MOVFF  FF6,16
00040:  MOVFF  FF7,17
00044:  MOVFF  00,0E
00048:  MOVFF  01,0F
0004C:  MOVFF  02,10
00050:  MOVFF  03,11
00054:  BTFSS  F9D.1
00056:  GOTO   0060
0005A:  BTFSC  F9E.1
0005C:  GOTO   0592
00060:  BTFSS  F9D.5
00062:  GOTO   006C
00066:  BTFSC  F9E.5
00068:  GOTO   0582
0006C:  MOVFF  0E,00
00070:  MOVFF  0F,01
00074:  MOVFF  10,02
00078:  MOVFF  11,03
0007C:  MOVFF  0C,FE9
00080:  MOVFF  07,FEA
00084:  BSF    07.7
00086:  MOVFF  08,FE1
0008A:  MOVFF  09,FE2
0008E:  MOVFF  0A,FD9
00092:  MOVFF  0B,FDA
00096:  MOVFF  12,FF3
0009A:  MOVFF  13,FF4
0009E:  MOVFF  14,FFA
000A2:  MOVFF  15,FF5
000A6:  MOVFF  16,FF6
000AA:  MOVFF  17,FF7
000AE:  MOVF   04,W
000B0:  MOVFF  06,FE0
000B4:  MOVFF  05,FD8
000B8:  RETFIE 0
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\ESPAN-04.h"
.................... //#include <18F252.h>
.................... #include <18F26K22.h>
.................... //////////// Standard Header file for the PIC18F26K22 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F26K22
000BA:  CLRF   FF7
000BC:  ADDLW  CA
000BE:  MOVWF  FF6
000C0:  MOVLW  00
000C2:  ADDWFC FF7,F
000C4:  TBLRD*+
000C6:  MOVF   FF5,W
000C8:  RETURN 0
000CA:  DATA 00,C1
000CC:  DATA 81,40
000CE:  DATA 01,C0
000D0:  DATA 80,41
000D2:  DATA 01,C0
000D4:  DATA 80,41
000D6:  DATA 00,C1
000D8:  DATA 81,40
000DA:  DATA 01,C0
000DC:  DATA 80,41
000DE:  DATA 00,C1
000E0:  DATA 81,40
000E2:  DATA 00,C1
000E4:  DATA 81,40
000E6:  DATA 01,C0
000E8:  DATA 80,41
000EA:  DATA 01,C0
000EC:  DATA 80,41
000EE:  DATA 00,C1
000F0:  DATA 81,40
000F2:  DATA 00,C1
000F4:  DATA 81,40
000F6:  DATA 01,C0
000F8:  DATA 80,41
000FA:  DATA 00,C1
000FC:  DATA 81,40
000FE:  DATA 01,C0
00100:  DATA 80,41
00102:  DATA 01,C0
00104:  DATA 80,41
00106:  DATA 00,C1
00108:  DATA 81,40
0010A:  DATA 01,C0
0010C:  DATA 80,41
0010E:  DATA 00,C1
00110:  DATA 81,40
00112:  DATA 00,C1
00114:  DATA 81,40
00116:  DATA 01,C0
00118:  DATA 80,41
0011A:  DATA 00,C1
0011C:  DATA 81,40
0011E:  DATA 01,C0
00120:  DATA 80,41
00122:  DATA 01,C0
00124:  DATA 80,41
00126:  DATA 00,C1
00128:  DATA 81,40
0012A:  DATA 00,C1
0012C:  DATA 81,40
0012E:  DATA 01,C0
00130:  DATA 80,41
00132:  DATA 01,C0
00134:  DATA 80,41
00136:  DATA 00,C1
00138:  DATA 81,40
0013A:  DATA 01,C0
0013C:  DATA 80,41
0013E:  DATA 00,C1
00140:  DATA 81,40
00142:  DATA 00,C1
00144:  DATA 81,40
00146:  DATA 01,C0
00148:  DATA 80,41
0014A:  DATA 01,C0
0014C:  DATA 80,41
0014E:  DATA 00,C1
00150:  DATA 81,40
00152:  DATA 00,C1
00154:  DATA 81,40
00156:  DATA 01,C0
00158:  DATA 80,41
0015A:  DATA 00,C1
0015C:  DATA 81,40
0015E:  DATA 01,C0
00160:  DATA 80,41
00162:  DATA 01,C0
00164:  DATA 80,41
00166:  DATA 00,C1
00168:  DATA 81,40
0016A:  DATA 00,C1
0016C:  DATA 81,40
0016E:  DATA 01,C0
00170:  DATA 80,41
00172:  DATA 01,C0
00174:  DATA 80,41
00176:  DATA 00,C1
00178:  DATA 81,40
0017A:  DATA 01,C0
0017C:  DATA 80,41
0017E:  DATA 00,C1
00180:  DATA 81,40
00182:  DATA 00,C1
00184:  DATA 81,40
00186:  DATA 01,C0
00188:  DATA 80,41
0018A:  DATA 00,C1
0018C:  DATA 81,40
0018E:  DATA 01,C0
00190:  DATA 80,41
00192:  DATA 01,C0
00194:  DATA 80,41
00196:  DATA 00,C1
00198:  DATA 81,40
0019A:  DATA 01,C0
0019C:  DATA 80,41
0019E:  DATA 00,C1
001A0:  DATA 81,40
001A2:  DATA 00,C1
001A4:  DATA 81,40
001A6:  DATA 01,C0
001A8:  DATA 80,41
001AA:  DATA 01,C0
001AC:  DATA 80,41
001AE:  DATA 00,C1
001B0:  DATA 81,40
001B2:  DATA 00,C1
001B4:  DATA 81,40
001B6:  DATA 01,C0
001B8:  DATA 80,41
001BA:  DATA 00,C1
001BC:  DATA 81,40
001BE:  DATA 01,C0
001C0:  DATA 80,41
001C2:  DATA 01,C0
001C4:  DATA 80,41
001C6:  DATA 00,C1
001C8:  DATA 81,40
001CA:  CLRF   FF7
001CC:  ADDLW  DA
001CE:  MOVWF  FF6
001D0:  MOVLW  01
001D2:  ADDWFC FF7,F
001D4:  TBLRD*+
001D6:  MOVF   FF5,W
001D8:  RETURN 0
001DA:  DATA 00,C0
001DC:  DATA C1,01
001DE:  DATA C3,03
001E0:  DATA 02,C2
001E2:  DATA C6,06
001E4:  DATA 07,C7
001E6:  DATA 05,C5
001E8:  DATA C4,04
001EA:  DATA CC,0C
001EC:  DATA 0D,CD
001EE:  DATA 0F,CF
001F0:  DATA CE,0E
001F2:  DATA 0A,CA
001F4:  DATA CB,0B
001F6:  DATA C9,09
001F8:  DATA 08,C8
001FA:  DATA D8,18
001FC:  DATA 19,D9
001FE:  DATA 1B,DB
00200:  DATA DA,1A
00202:  DATA 1E,DE
00204:  DATA DF,1F
00206:  DATA DD,1D
00208:  DATA 1C,DC
0020A:  DATA 14,D4
0020C:  DATA D5,15
0020E:  DATA D7,17
00210:  DATA 16,D6
00212:  DATA D2,12
00214:  DATA 13,D3
00216:  DATA 11,D1
00218:  DATA D0,10
0021A:  DATA F0,30
0021C:  DATA 31,F1
0021E:  DATA 33,F3
00220:  DATA F2,32
00222:  DATA 36,F6
00224:  DATA F7,37
00226:  DATA F5,35
00228:  DATA 34,F4
0022A:  DATA 3C,FC
0022C:  DATA FD,3D
0022E:  DATA FF,3F
00230:  DATA 3E,FE
00232:  DATA FA,3A
00234:  DATA 3B,FB
00236:  DATA 39,F9
00238:  DATA F8,38
0023A:  DATA 28,E8
0023C:  DATA E9,29
0023E:  DATA EB,2B
00240:  DATA 2A,EA
00242:  DATA EE,2E
00244:  DATA 2F,EF
00246:  DATA 2D,ED
00248:  DATA EC,2C
0024A:  DATA E4,24
0024C:  DATA 25,E5
0024E:  DATA 27,E7
00250:  DATA E6,26
00252:  DATA 22,E2
00254:  DATA E3,23
00256:  DATA E1,21
00258:  DATA 20,E0
0025A:  DATA A0,60
0025C:  DATA 61,A1
0025E:  DATA 63,A3
00260:  DATA A2,62
00262:  DATA 66,A6
00264:  DATA A7,67
00266:  DATA A5,65
00268:  DATA 64,A4
0026A:  DATA 6C,AC
0026C:  DATA AD,6D
0026E:  DATA AF,6F
00270:  DATA 6E,AE
00272:  DATA AA,6A
00274:  DATA 6B,AB
00276:  DATA 69,A9
00278:  DATA A8,68
0027A:  DATA 78,B8
0027C:  DATA B9,79
0027E:  DATA BB,7B
00280:  DATA 7A,BA
00282:  DATA BE,7E
00284:  DATA 7F,BF
00286:  DATA 7D,BD
00288:  DATA BC,7C
0028A:  DATA B4,74
0028C:  DATA 75,B5
0028E:  DATA 77,B7
00290:  DATA B6,76
00292:  DATA 72,B2
00294:  DATA B3,73
00296:  DATA B1,71
00298:  DATA 70,B0
0029A:  DATA 50,90
0029C:  DATA 91,51
0029E:  DATA 93,53
002A0:  DATA 52,92
002A2:  DATA 96,56
002A4:  DATA 57,97
002A6:  DATA 55,95
002A8:  DATA 94,54
002AA:  DATA 9C,5C
002AC:  DATA 5D,9D
002AE:  DATA 5F,9F
002B0:  DATA 9E,5E
002B2:  DATA 5A,9A
002B4:  DATA 9B,5B
002B6:  DATA 99,59
002B8:  DATA 58,98
002BA:  DATA 88,48
002BC:  DATA 49,89
002BE:  DATA 4B,8B
002C0:  DATA 8A,4A
002C2:  DATA 4E,8E
002C4:  DATA 8F,4F
002C6:  DATA 8D,4D
002C8:  DATA 4C,8C
002CA:  DATA 44,84
002CC:  DATA 85,45
002CE:  DATA 87,47
002D0:  DATA 46,86
002D2:  DATA 82,42
002D4:  DATA 43,83
002D6:  DATA 41,81
002D8:  DATA 80,40
*
00632:  DATA 41,54
00634:  DATA 2B,43
00636:  DATA 4D,47
00638:  DATA 46,3D
0063A:  DATA 31,00
0063C:  DATA 41,54
0063E:  DATA 2B,43
00640:  DATA 4D,47
00642:  DATA 53,3D
00644:  DATA 22,00
00646:  DATA 41,54
00648:  DATA 2B,43
0064A:  DATA 4D,47
0064C:  DATA 46,3D
0064E:  DATA 31,00
00650:  DATA 41,54
00652:  DATA 2B,43
00654:  DATA 4D,47
00656:  DATA 53,3D
00658:  DATA 22,00
0065A:  DATA 41,54
0065C:  DATA 2B,43
0065E:  DATA 4D,47
00660:  DATA 46,3D
00662:  DATA 31,00
00664:  DATA 41,54
00666:  DATA 2B,43
00668:  DATA 4D,47
0066A:  DATA 53,3D
0066C:  DATA 22,00
0066E:  DATA 41,54
00670:  DATA 2B,43
00672:  DATA 4D,47
00674:  DATA 46,3D
00676:  DATA 31,00
00678:  DATA 41,54
0067A:  DATA 2B,43
0067C:  DATA 4D,47
0067E:  DATA 53,3D
00680:  DATA 22,00
00682:  DATA 41,54
00684:  DATA 2B,43
00686:  DATA 4D,47
00688:  DATA 46,3D
0068A:  DATA 31,00
0068C:  DATA 41,54
0068E:  DATA 2B,43
00690:  DATA 4D,47
00692:  DATA 53,3D
00694:  DATA 22,00
00696:  DATA 41,54
00698:  DATA 2B,43
0069A:  DATA 4D,47
0069C:  DATA 46,3D
0069E:  DATA 31,00
006A0:  DATA 41,54
006A2:  DATA 2B,43
006A4:  DATA 4D,47
006A6:  DATA 53,3D
006A8:  DATA 22,00
006AA:  DATA 41,54
006AC:  DATA 2B,43
006AE:  DATA 4D,47
006B0:  DATA 46,3D
006B2:  DATA 31,00
006B4:  DATA 41,54
006B6:  DATA 2B,43
006B8:  DATA 4D,47
006BA:  DATA 53,3D
006BC:  DATA 22,00
006BE:  DATA 41,54
006C0:  DATA 2B,43
006C2:  DATA 4D,47
006C4:  DATA 46,3D
006C6:  DATA 31,00
006C8:  DATA 41,54
006CA:  DATA 2B,43
006CC:  DATA 4D,47
006CE:  DATA 53,3D
006D0:  DATA 22,00
006D2:  DATA 41,54
006D4:  DATA 2B,43
006D6:  DATA 4D,47
006D8:  DATA 46,3D
006DA:  DATA 31,00
006DC:  DATA 41,54
006DE:  DATA 2B,43
006E0:  DATA 4D,47
006E2:  DATA 53,3D
006E4:  DATA 22,00
006E6:  DATA 41,54
006E8:  DATA 2B,43
006EA:  DATA 4D,47
006EC:  DATA 46,3D
006EE:  DATA 31,00
006F0:  DATA 41,54
006F2:  DATA 2B,43
006F4:  DATA 4D,47
006F6:  DATA 53,3D
006F8:  DATA 22,00
006FA:  DATA 41,54
006FC:  DATA 2B,43
006FE:  DATA 4D,47
00700:  DATA 46,3D
00702:  DATA 31,00
00704:  DATA 41,54
00706:  DATA 2B,43
00708:  DATA 4D,47
0070A:  DATA 53,3D
0070C:  DATA 22,00
0070E:  DATA 41,54
00710:  DATA 2B,43
00712:  DATA 4D,47
00714:  DATA 46,3D
00716:  DATA 31,00
00718:  DATA 41,54
0071A:  DATA 2B,43
0071C:  DATA 4D,47
0071E:  DATA 53,3D
00720:  DATA 22,00
00722:  DATA 41,54
00724:  DATA 2B,43
00726:  DATA 4D,47
00728:  DATA 46,3D
0072A:  DATA 31,00
0072C:  DATA 41,54
0072E:  DATA 2B,43
00730:  DATA 4D,47
00732:  DATA 53,3D
00734:  DATA 22,00
00736:  DATA 41,54
00738:  DATA 2B,43
0073A:  DATA 4D,47
0073C:  DATA 46,3D
0073E:  DATA 31,00
00740:  DATA 41,54
00742:  DATA 2B,43
00744:  DATA 4D,47
00746:  DATA 53,3D
00748:  DATA 22,00
0074A:  DATA 41,54
0074C:  DATA 2B,43
0074E:  DATA 4D,47
00750:  DATA 46,3D
00752:  DATA 31,00
00754:  DATA 41,54
00756:  DATA 2B,43
00758:  DATA 4D,47
0075A:  DATA 53,3D
0075C:  DATA 22,00
0075E:  DATA 41,54
00760:  DATA 2B,43
00762:  DATA 4D,47
00764:  DATA 46,3D
00766:  DATA 31,00
00768:  DATA 41,54
0076A:  DATA 2B,43
0076C:  DATA 4D,47
0076E:  DATA 53,3D
00770:  DATA 22,00
00772:  DATA 41,54
00774:  DATA 2B,43
00776:  DATA 4D,47
00778:  DATA 46,3D
0077A:  DATA 31,00
0077C:  DATA 41,54
0077E:  DATA 2B,43
00780:  DATA 4D,47
00782:  DATA 53,3D
00784:  DATA 22,00
00786:  DATA 41,54
00788:  DATA 2B,43
0078A:  DATA 4D,47
0078C:  DATA 46,3D
0078E:  DATA 31,00
00790:  DATA 41,54
00792:  DATA 2B,43
00794:  DATA 4D,47
00796:  DATA 53,3D
00798:  DATA 22,00
0079A:  DATA 41,54
0079C:  DATA 2B,43
0079E:  DATA 4D,47
007A0:  DATA 46,3D
007A2:  DATA 31,00
007A4:  DATA 41,54
007A6:  DATA 2B,43
007A8:  DATA 4D,47
007AA:  DATA 53,3D
007AC:  DATA 22,00
007AE:  DATA 41,54
007B0:  DATA 2B,43
007B2:  DATA 4D,47
007B4:  DATA 46,3D
007B6:  DATA 31,00
007B8:  DATA 41,54
007BA:  DATA 2B,43
007BC:  DATA 4D,47
007BE:  DATA 53,3D
007C0:  DATA 22,00
007C2:  DATA 41,54
007C4:  DATA 2B,43
007C6:  DATA 4D,47
007C8:  DATA 46,3D
007CA:  DATA 31,00
007CC:  DATA 41,54
007CE:  DATA 2B,43
007D0:  DATA 4D,47
007D2:  DATA 53,3D
007D4:  DATA 22,00
007D6:  DATA 41,54
007D8:  DATA 2B,43
007DA:  DATA 4D,47
007DC:  DATA 46,3D
007DE:  DATA 31,00
007E0:  DATA 41,54
007E2:  DATA 2B,43
007E4:  DATA 4D,47
007E6:  DATA 53,3D
007E8:  DATA 22,00
007EA:  DATA 41,54
007EC:  DATA 2B,43
007EE:  DATA 4D,47
007F0:  DATA 46,3D
007F2:  DATA 31,00
007F4:  DATA 41,54
007F6:  DATA 2B,43
007F8:  DATA 4D,47
007FA:  DATA 53,3D
007FC:  DATA 22,00
007FE:  DATA 41,54
00800:  DATA 2B,43
00802:  DATA 4D,47
00804:  DATA 46,3D
00806:  DATA 31,00
00808:  DATA 41,54
0080A:  DATA 2B,43
0080C:  DATA 4D,47
0080E:  DATA 53,3D
00810:  DATA 22,00
00812:  DATA 41,54
00814:  DATA 2B,43
00816:  DATA 4D,47
00818:  DATA 46,3D
0081A:  DATA 31,00
0081C:  DATA 41,54
0081E:  DATA 2B,43
00820:  DATA 4D,47
00822:  DATA 53,3D
00824:  DATA 22,00
00826:  DATA 41,54
00828:  DATA 2B,43
0082A:  DATA 4D,47
0082C:  DATA 46,3D
0082E:  DATA 31,00
00830:  DATA 41,54
00832:  DATA 2B,43
00834:  DATA 4D,47
00836:  DATA 53,3D
00838:  DATA 22,00
0083A:  DATA 41,54
0083C:  DATA 2B,43
0083E:  DATA 4D,47
00840:  DATA 46,3D
00842:  DATA 31,00
00844:  DATA 41,54
00846:  DATA 2B,43
00848:  DATA 4D,47
0084A:  DATA 53,3D
0084C:  DATA 22,00
0084E:  DATA 41,54
00850:  DATA 2B,43
00852:  DATA 4D,47
00854:  DATA 46,3D
00856:  DATA 31,00
00858:  DATA 41,54
0085A:  DATA 2B,43
0085C:  DATA 4D,47
0085E:  DATA 53,3D
00860:  DATA 22,00
00862:  DATA 41,54
00864:  DATA 2B,43
00866:  DATA 4D,47
00868:  DATA 46,3D
0086A:  DATA 31,00
0086C:  DATA 41,54
0086E:  DATA 2B,43
00870:  DATA 4D,47
00872:  DATA 53,3D
00874:  DATA 22,00
00876:  DATA 41,54
00878:  DATA 2B,43
0087A:  DATA 4D,47
0087C:  DATA 46,3D
0087E:  DATA 31,00
00880:  DATA 41,54
00882:  DATA 2B,43
00884:  DATA 4D,47
00886:  DATA 53,3D
00888:  DATA 22,00
0088A:  DATA 41,54
0088C:  DATA 2B,43
0088E:  DATA 4D,47
00890:  DATA 46,3D
00892:  DATA 31,00
00894:  DATA 41,54
00896:  DATA 2B,43
00898:  DATA 4D,47
0089A:  DATA 53,3D
0089C:  DATA 22,00
0089E:  DATA 41,54
008A0:  DATA 2B,43
008A2:  DATA 4D,47
008A4:  DATA 46,3D
008A6:  DATA 31,00
008A8:  DATA 41,54
008AA:  DATA 2B,43
008AC:  DATA 4D,47
008AE:  DATA 53,3D
008B0:  DATA 22,00
008B2:  DATA 41,54
008B4:  DATA 2B,43
008B6:  DATA 4D,47
008B8:  DATA 46,3D
008BA:  DATA 31,00
008BC:  DATA 41,54
008BE:  DATA 2B,43
008C0:  DATA 4D,47
008C2:  DATA 53,3D
008C4:  DATA 22,00
008C6:  DATA 41,54
008C8:  DATA 2B,43
008CA:  DATA 4D,47
008CC:  DATA 46,3D
008CE:  DATA 31,00
008D0:  DATA 41,54
008D2:  DATA 2B,43
008D4:  DATA 4D,47
008D6:  DATA 53,3D
008D8:  DATA 22,00
008DA:  DATA 41,54
008DC:  DATA 2B,43
008DE:  DATA 4D,47
008E0:  DATA 46,3D
008E2:  DATA 31,00
008E4:  DATA 41,54
008E6:  DATA 2B,43
008E8:  DATA 4D,47
008EA:  DATA 53,3D
008EC:  DATA 22,00
008EE:  DATA 41,54
008F0:  DATA 2B,43
008F2:  DATA 4D,47
008F4:  DATA 46,3D
008F6:  DATA 31,00
008F8:  DATA 41,54
008FA:  DATA 2B,43
008FC:  DATA 4D,47
008FE:  DATA 53,3D
00900:  DATA 22,00
00902:  DATA 41,54
00904:  DATA 2B,43
00906:  DATA 4D,47
00908:  DATA 46,3D
0090A:  DATA 31,00
0090C:  DATA 41,54
0090E:  DATA 2B,43
00910:  DATA 4D,47
00912:  DATA 53,3D
00914:  DATA 22,00
00916:  DATA 41,54
00918:  DATA 2B,43
0091A:  DATA 4D,47
0091C:  DATA 46,3D
0091E:  DATA 31,00
00920:  DATA 41,54
00922:  DATA 2B,43
00924:  DATA 4D,47
00926:  DATA 53,3D
00928:  DATA 22,00
0092A:  DATA 41,54
0092C:  DATA 2B,43
0092E:  DATA 4D,47
00930:  DATA 46,3D
00932:  DATA 31,00
00934:  DATA 41,54
00936:  DATA 2B,43
00938:  DATA 4D,47
0093A:  DATA 53,3D
0093C:  DATA 22,00
0093E:  DATA 41,54
00940:  DATA 2B,43
00942:  DATA 4D,47
00944:  DATA 46,3D
00946:  DATA 31,00
00948:  DATA 41,54
0094A:  DATA 2B,43
0094C:  DATA 4D,47
0094E:  DATA 53,3D
00950:  DATA 22,00
00952:  DATA 41,54
00954:  DATA 2B,43
00956:  DATA 4D,47
00958:  DATA 53,3D
0095A:  DATA 22,00
0095C:  DATA 41,54
0095E:  DATA 2B,43
00960:  DATA 4D,47
00962:  DATA 53,3D
00964:  DATA 22,00
00966:  DATA 41,54
00968:  DATA 2B,43
0096A:  DATA 4D,47
0096C:  DATA 53,3D
0096E:  DATA 22,00
00970:  DATA 41,54
00972:  DATA 2B,43
00974:  DATA 4D,47
00976:  DATA 53,3D
00978:  DATA 22,00
0097A:  DATA 41,54
0097C:  DATA 2B,43
0097E:  DATA 4D,47
00980:  DATA 53,3D
00982:  DATA 22,00
00984:  DATA 41,54
00986:  DATA 2B,43
00988:  DATA 4D,47
0098A:  DATA 53,3D
0098C:  DATA 22,00
0098E:  DATA 41,54
00990:  DATA 2B,43
00992:  DATA 4D,47
00994:  DATA 53,3D
00996:  DATA 22,00
00998:  DATA 41,54
0099A:  DATA 2B,43
0099C:  DATA 4D,47
0099E:  DATA 53,3D
009A0:  DATA 22,00
009A2:  DATA 41,54
009A4:  DATA 2B,43
009A6:  DATA 4D,47
009A8:  DATA 53,3D
009AA:  DATA 22,00
009AC:  DATA 41,54
009AE:  DATA 2B,43
009B0:  DATA 4D,47
009B2:  DATA 53,3D
009B4:  DATA 22,00
009B6:  DATA 41,54
009B8:  DATA 2B,43
009BA:  DATA 4D,47
009BC:  DATA 53,3D
009BE:  DATA 22,00
009C0:  DATA 41,54
009C2:  DATA 2B,43
009C4:  DATA 4D,47
009C6:  DATA 53,3D
009C8:  DATA 22,00
009CA:  DATA 41,54
009CC:  DATA 2B,43
009CE:  DATA 4D,47
009D0:  DATA 53,3D
009D2:  DATA 22,00
009D4:  DATA 41,54
009D6:  DATA 2B,43
009D8:  DATA 4D,47
009DA:  DATA 53,3D
009DC:  DATA 22,00
009DE:  DATA 41,54
009E0:  DATA 2B,43
009E2:  DATA 4D,47
009E4:  DATA 53,3D
009E6:  DATA 22,00
009E8:  DATA 41,54
009EA:  DATA 2B,43
009EC:  DATA 4D,47
009EE:  DATA 53,3D
009F0:  DATA 22,00
009F2:  DATA 41,54
009F4:  DATA 2B,43
009F6:  DATA 4D,47
009F8:  DATA 53,3D
009FA:  DATA 22,00
009FC:  DATA 41,54
009FE:  DATA 2B,43
00A00:  DATA 4D,47
00A02:  DATA 53,3D
00A04:  DATA 22,00
00A06:  DATA 41,54
00A08:  DATA 2B,43
00A0A:  DATA 4D,47
00A0C:  DATA 53,3D
00A0E:  DATA 22,00
00A10:  DATA 41,54
00A12:  DATA 2B,43
00A14:  DATA 4D,47
00A16:  DATA 53,3D
00A18:  DATA 22,00
00A1A:  DATA 41,54
00A1C:  DATA 2B,43
00A1E:  DATA 4D,47
00A20:  DATA 46,3D
00A22:  DATA 31,00
*
02578:  MOVLB  E
0257A:  MOVF   x49,W
0257C:  ANDLW  07
0257E:  MOVWF  00
02580:  RRCF   x49,W
02582:  MOVWF  01
02584:  RRCF   01,F
02586:  RRCF   01,F
02588:  MOVLW  1F
0258A:  ANDWF  01,F
0258C:  MOVF   01,W
0258E:  ADDWF  x4B,W
02590:  MOVWF  FE9
02592:  MOVLW  00
02594:  ADDWFC x4C,W
02596:  MOVWF  FEA
02598:  CLRF   01
0259A:  INCF   01,F
0259C:  INCF   00,F
0259E:  BRA    25A2
025A0:  RLCF   01,F
025A2:  DECFSZ 00,F
025A4:  BRA    25A0
025A6:  MOVF   x4A,F
025A8:  BZ    25B0
025AA:  MOVF   01,W
025AC:  IORWF  FEF,F
025AE:  BRA    25B6
025B0:  COMF   01,F
025B2:  MOVF   01,W
025B4:  ANDWF  FEF,F
025B6:  MOVLB  0
025B8:  RETURN 0
025BA:  MOVLB  E
025BC:  MOVF   x49,W
025BE:  ANDLW  07
025C0:  MOVWF  00
025C2:  RRCF   x49,W
025C4:  MOVWF  01
025C6:  RRCF   01,F
025C8:  RRCF   01,F
025CA:  MOVLW  1F
025CC:  ANDWF  01,F
025CE:  MOVF   01,W
025D0:  ADDWF  x4A,W
025D2:  MOVWF  FE9
025D4:  MOVLW  00
025D6:  ADDWFC x4B,W
025D8:  MOVWF  FEA
025DA:  MOVFF  FEF,01
025DE:  INCF   00,F
025E0:  BRA    25E4
025E2:  RRCF   01,F
025E4:  DECFSZ 00,F
025E6:  BRA    25E2
025E8:  MOVLW  01
025EA:  ANDWF  01,F
025EC:  MOVLB  0
025EE:  RETURN 0
*
02636:  TBLRD*+
02638:  MOVF   FF5,F
0263A:  BZ    2654
0263C:  MOVFF  FF6,E44
02640:  MOVFF  FF7,E45
02644:  MOVFF  FF5,E46
02648:  RCALL  25F0
0264A:  MOVFF  E44,FF6
0264E:  MOVFF  E45,FF7
02652:  BRA    2636
02654:  RETURN 0
*
02BDE:  MOVLB  E
02BE0:  MOVF   x4A,W
02BE2:  MULWF  x4C
02BE4:  MOVFF  FF3,01
02BE8:  MOVFF  FF4,00
02BEC:  MULWF  x4D
02BEE:  MOVF   FF3,W
02BF0:  ADDWF  00,F
02BF2:  MOVF   x4B,W
02BF4:  MULWF  x4C
02BF6:  MOVF   FF3,W
02BF8:  ADDWFC 00,W
02BFA:  MOVWF  02
02BFC:  MOVLB  0
02BFE:  RETURN 0
*
0375E:  ADDWF  FE8,W
03760:  CLRF   FF7
03762:  RLCF   FF7,F
03764:  ADDLW  79
03766:  MOVWF  FF6
03768:  MOVLW  37
0376A:  ADDWFC FF7,F
0376C:  TBLRD*-
0376E:  MOVF   FF5,W
03770:  MOVWF  FFA
03772:  TBLRD*
03774:  MOVF   FF5,W
03776:  MOVWF  FF9
03778:  DATA 1A,2F
0377A:  DATA 22,2F
0377C:  DATA 2A,2F
0377E:  DATA 32,2F
03780:  DATA 3A,2F
03782:  DATA 42,2F
03784:  DATA 4A,2F
03786:  DATA 52,2F
03788:  DATA 5A,2F
0378A:  DATA 62,2F
0378C:  DATA 6A,2F
0378E:  DATA 72,2F
03790:  DATA 7A,2F
03792:  DATA 82,2F
03794:  DATA 8A,2F
03796:  DATA 92,2F
03798:  DATA 9A,2F
0379A:  DATA A2,2F
0379C:  DATA AA,2F
0379E:  DATA B2,2F
037A0:  ADDWF  FE8,W
037A2:  CLRF   FF7
037A4:  RLCF   FF7,F
037A6:  ADDLW  BB
037A8:  MOVWF  FF6
037AA:  MOVLW  37
037AC:  ADDWFC FF7,F
037AE:  TBLRD*-
037B0:  MOVF   FF5,W
037B2:  MOVWF  FFA
037B4:  TBLRD*
037B6:  MOVF   FF5,W
037B8:  MOVWF  FF9
037BA:  DATA 9E,30
037BC:  DATA A6,30
037BE:  DATA AE,30
037C0:  DATA B6,30
037C2:  DATA BE,30
037C4:  DATA C6,30
037C6:  DATA CE,30
037C8:  DATA D6,30
037CA:  DATA DE,30
037CC:  DATA E6,30
037CE:  DATA EE,30
037D0:  DATA F6,30
037D2:  DATA FE,30
037D4:  DATA 06,31
037D6:  DATA 0E,31
037D8:  DATA 16,31
037DA:  DATA 1E,31
037DC:  DATA 26,31
037DE:  DATA 2E,31
037E0:  DATA 36,31
037E2:  ADDWF  FE8,W
037E4:  CLRF   FF7
037E6:  RLCF   FF7,F
037E8:  ADDLW  FD
037EA:  MOVWF  FF6
037EC:  MOVLW  37
037EE:  ADDWFC FF7,F
037F0:  TBLRD*-
037F2:  MOVF   FF5,W
037F4:  MOVWF  FFA
037F6:  TBLRD*
037F8:  MOVF   FF5,W
037FA:  MOVWF  FF9
037FC:  DATA 5A,32
037FE:  DATA 62,32
03800:  DATA 6A,32
03802:  DATA 72,32
03804:  DATA 7A,32
03806:  DATA 82,32
03808:  DATA 8A,32
0380A:  DATA 92,32
0380C:  DATA 9A,32
0380E:  DATA A2,32
03810:  DATA AA,32
03812:  DATA B2,32
03814:  DATA BA,32
03816:  DATA C2,32
03818:  DATA CA,32
0381A:  DATA D2,32
0381C:  DATA DA,32
0381E:  DATA E2,32
03820:  DATA EA,32
03822:  DATA F2,32
03824:  ADDWF  FE8,W
03826:  CLRF   FF7
03828:  RLCF   FF7,F
0382A:  ADDLW  3F
0382C:  MOVWF  FF6
0382E:  MOVLW  38
03830:  ADDWFC FF7,F
03832:  TBLRD*-
03834:  MOVF   FF5,W
03836:  MOVWF  FFA
03838:  TBLRD*
0383A:  MOVF   FF5,W
0383C:  MOVWF  FF9
0383E:  DATA DC,33
03840:  DATA E4,33
03842:  DATA EC,33
03844:  DATA F4,33
03846:  DATA FC,33
03848:  DATA 04,34
0384A:  DATA 0C,34
0384C:  DATA 14,34
0384E:  DATA 1C,34
03850:  DATA 24,34
03852:  DATA 2C,34
03854:  DATA 34,34
03856:  DATA 3C,34
03858:  DATA 44,34
0385A:  DATA 4C,34
0385C:  DATA 54,34
0385E:  DATA 5C,34
03860:  DATA 64,34
03862:  DATA 6C,34
03864:  DATA 74,34
*
06C76:  MOVF   FEF,F
06C78:  BZ    6C9A
06C7A:  MOVFF  FEA,E45
06C7E:  MOVFF  FE9,E44
06C82:  MOVFF  FEF,E46
06C86:  CALL   25F0
06C8A:  MOVFF  E45,FEA
06C8E:  MOVFF  E44,FE9
06C92:  INCF   FE9,F
06C94:  BTFSC  FD8.2
06C96:  INCF   FEA,F
06C98:  BRA    6C76
06C9A:  RETURN 0
*
0D038:  ADDWF  FE8,W
0D03A:  CLRF   FF7
0D03C:  RLCF   FF7,F
0D03E:  ADDLW  53
0D040:  MOVWF  FF6
0D042:  MOVLW  D0
0D044:  ADDWFC FF7,F
0D046:  TBLRD*-
0D048:  MOVF   FF5,W
0D04A:  MOVWF  FFA
0D04C:  TBLRD*
0D04E:  MOVF   FF5,W
0D050:  MOVWF  FF9
0D052:  DATA C4,CC
0D054:  DATA CC,CC
0D056:  DATA D4,CC
0D058:  DATA DC,CC
0D05A:  DATA E4,CC
0D05C:  DATA EC,CC
0D05E:  DATA F4,CC
0D060:  DATA FC,CC
0D062:  DATA 04,CD
0D064:  DATA 0C,CD
0D066:  DATA 14,CD
0D068:  DATA 1C,CD
0D06A:  DATA 24,CD
0D06C:  DATA 2C,CD
0D06E:  DATA 34,CD
0D070:  DATA 3C,CD
0D072:  DATA 44,CD
0D074:  DATA 4C,CD
0D076:  DATA 54,CD
0D078:  DATA 5C,CD
0D07A:  ADDWF  FE8,W
0D07C:  CLRF   FF7
0D07E:  RLCF   FF7,F
0D080:  ADDLW  95
0D082:  MOVWF  FF6
0D084:  MOVLW  D0
0D086:  ADDWFC FF7,F
0D088:  TBLRD*-
0D08A:  MOVF   FF5,W
0D08C:  MOVWF  FFA
0D08E:  TBLRD*
0D090:  MOVF   FF5,W
0D092:  MOVWF  FF9
0D094:  DATA 7C,CD
0D096:  DATA 84,CD
0D098:  DATA 8C,CD
0D09A:  DATA 94,CD
0D09C:  DATA 9C,CD
0D09E:  DATA A4,CD
0D0A0:  DATA AC,CD
0D0A2:  DATA B4,CD
0D0A4:  DATA BC,CD
0D0A6:  DATA C4,CD
0D0A8:  DATA CC,CD
0D0AA:  DATA D4,CD
0D0AC:  DATA DC,CD
0D0AE:  DATA E4,CD
0D0B0:  DATA EC,CD
0D0B2:  DATA F4,CD
0D0B4:  DATA FC,CD
0D0B6:  DATA 04,CE
0D0B8:  DATA 0C,CE
0D0BA:  DATA 14,CE
.................... 
.................... #list
.................... 
.................... //#device adc=8
.................... #FUSES WDT
.................... #FUSES WDT64                    //Watch Dog Timer uses 1:64 Postscale
.................... //#FUSES HS                     //High speed Osc (> 4mhz)(for 18F2525)
.................... #fuses INTRC_IO         //High speed Osc, high power 16MHz-25MHz(for 18F26k22)
.................... #FUSES NOPROTECT                //Code not protected from reading
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... #FUSES BROWNOUT                 //Reset when brownout detected
.................... //#FUSES BORV20                   //Brownout reset at 2.0V
.................... #FUSES NOPUT                    //No Power Up Timer
.................... #FUSES NOCPD                    //No EE protection
.................... //#FUSES STVREN                   //Stack full/underflow will cause reset
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... //#FUSES NOWRT                    //Program memory not write protected
.................... //#FUSES NOWRTD                   //Data EEPROM not write protected
.................... #FUSES NOEBTR                   //Memory not protected from table reads
.................... #FUSES NOCPB                    //No Boot Block code protection
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads
.................... #FUSES NOWRTC                   //configuration not registers write protected
.................... #FUSES NOWRTB                   //Boot block not write protected
.................... //#FUES FCMEN                    //Fail-safe clock monitor enabled
.................... 
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#device icd = true
.................... 
.................... /* //jj
.................... #FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation
.................... #FUSES MCLR                     //Master Clear pin enabled
.................... */
.................... #define CLOCK_SP   16000000   //Clock Speed 20MHz
.................... 
.................... //23S17 Define
.................... #define IO_MULTIPLE_DEVICES
.................... #define IO_CS_PIN PIN_A5
.................... 
.................... #use delay(clock=16000000,RESTART_WDT)
*
00A24:  MOVLW  0E
00A26:  MOVWF  FEA
00A28:  MOVLW  45
00A2A:  MOVWF  FE9
00A2C:  MOVF   FEF,W
00A2E:  BZ    0A52
00A30:  MOVLW  05
00A32:  MOVWF  01
00A34:  MOVLW  BF
00A36:  MOVWF  00
00A38:  CLRWDT
00A3A:  DECFSZ 00,F
00A3C:  BRA    0A38
00A3E:  DECFSZ 01,F
00A40:  BRA    0A34
00A42:  MOVLW  2E
00A44:  MOVWF  00
00A46:  DECFSZ 00,F
00A48:  BRA    0A46
00A4A:  NOP   
00A4C:  CLRWDT
00A4E:  DECFSZ FEF,F
00A50:  BRA    0A30
00A52:  RETURN 0
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8)
.................... 
.................... /*
.................... #include <16F886.h>
.................... #device adc=10
.................... 
.................... #FUSES WDT                      //Watch Dog Timer
.................... #FUSES HS                       //High speed Osc (> 4mhz)
.................... #FUSES NOPUT                    //No Power Up Timer
.................... //#FUSES MCLR                     //Master Clear pin enabled
.................... #FUSES PROTECT                  //Code protected from reads
.................... //#FUSES CPD                      //Data EEPROM Code Protected
.................... #FUSES NOBROWNOUT               //No brownout reset
.................... //#FUSES IESO                     //Internal External Switch Over mode enabled
.................... //#FUSES FCMEN                    //Fail-safe clock monitor enabled
.................... //#FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18)
.................... #FUSES NODEBUG                  //No Debug mode for ICD
.................... //#FUSES BORV21                   //Brownout reset at 2.1V
.................... //#FUSES WRT                      //Program Memory Write Protected
.................... 
.................... #use delay(clock=20000000,RESTART_WDT)
.................... #use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,restart_wdt)
.................... */
.................... 
.................... 
.................... #include "D:\jobESP\ESPAN-04\Firmware\SPAN-04\ESPAN04_20 - Delay - SP - SMD - PIC18F252\23S17.c" // 16 bit I/O Expander
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... ////                        23S17.c                                      ////
.................... ////                                                                   ////
.................... ////   Library for a MicroChip MCP23S17 SPI Port Expansion Chip        ////
.................... ////                                                                   ////
.................... //// The MCP23S17 device provides 16-bit, general purpose parallel I/O ////
.................... //// expansion for SPI applications. The 16-bit I/O port functionally  ////
.................... //// consists of two 8-bit ports (PORTA and PORTB). There are two      ////
.................... //// interrupt pins, INTA and INTB, that can be associated with their  ////
.................... //// respective ports, or can be logically ORed together so that both ////
.................... //// pins will activate if either port causes an interrupt. The        ////
.................... //// hardware address pins are used to determine the device address.   ////                                                 ////
.................... ////                                                                   ////
.................... ////  A #use spi must be provided by the main program.                 ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  PIN LAYOUT                                                       ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                    ////
.................... ////        -------------------------------------------                ////
.................... ////        | 1 : GPB0          | 28: GPA7            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 2 : GPB1          | 27: GPA6            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 3 : GPB2          | 26: GPA5            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 4 : GPB3          | 25: GPA4            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 5 : GPB4          | 24: GPA3            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 6 : GPB5          | 23: GPA2            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 7 : GPB6          | 22: GPA1            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 8 : GPB7          | 21: GPA0            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 9 : Vdd           | 20: INTA            |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 10: Vss           | 19: INTB            |                ////
.................... ////        |     __            |     _____           |                ////
.................... ////        | 11: CS            | 18: RESET           |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 12: SCK           | 17: A2              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 13: SI            | 16: A1              |                ////
.................... ////        |                   |                     |                ////
.................... ////        | 14: SO            | 15: A0              |                ////
.................... ////        -------------------------------------------                ////
.................... ////                                                                   ////
.................... ////  -------------------------------------------------------------    ////
.................... ////  FUNCTIONS                                                        ////
.................... ////  -------------------------------------------------------------    ////
.................... ////                                                                   ////
.................... ////   void IO_INIT()                                                   ////                   
.................... ////     Initializes the 23S17 chips on the SPI bus                      ////                                                 
.................... ////                                                                   ////  
.................... ////  void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data)        ////
.................... ////     Writes the value to the specified register and device          ////                                                            
.................... ////                                                                   ////  
.................... ////  int8 IO_READ_REGISTER(int8 address, int8 reg);                    ////
.................... ////     Reads the value of the specified register and device          ////                                                           
.................... ////                                                                   ////  
.................... ////  void IO_OUTPUT_A(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_B(int8 address, int8 data);                       ////
.................... ////     Outputs the value to PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_A(int8 address)                                    ////
.................... ////     Returns the value of PORTA on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  int8 IO_INPUT_B(int8 address)                                    ////
.................... ////     Returns the value of PORTB on the specified device. Doesn't   ////
.................... ////     change the direction of the port.                             ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state)           ////
.................... ////     Outputs the value to specified pin and device. Doesn't change ////
.................... ////      the direction of the pin.                                     ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_HIGH(int8 address, int8 pin)                      ////
.................... ////     Sets the output high on the specified pin and device. Doesn't ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_LOW(int8 address, int8 pin)                       ////
.................... ////     Sets the output low on the specified pin and device. Doesn't  ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////   
.................... ////  void IO_OUTPUT_FLOAT(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an input on the specified device.             ////
.................... ////                                                                   ////
.................... ////  void IO_OUTPUT_TOGGLE(int8 address, int8 pin)                    ////
.................... ////     Toggles the output on the specified pin and device. Doesn't   ////
.................... ////     change the direction of the pin.                              ////
.................... ////                                                                   ////      
.................... ////  void IO_OUTPUT_DRIVE(int8 address, int8 pin)                     ////
.................... ////     Sets the pin to an output on the specified device.            ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT(int8 address, int8 pin)                            ////
.................... ////     Gets the current value on the specified pin and device.       ////
.................... ////                                                                   ////      
.................... ////  int1 IO_INPUT_STATE(int8 address, int8 pin)                      ////
.................... ////     Gets the current value on the specified pin and device.       //// 
.................... ////     Doesn't change the direction of the pin.                      ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_A(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_A(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTA on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  int8 IO_GET_TRIS_B(int8 address)                                 ////
.................... ////     Gets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////      
.................... ////  void IO_SET_TRIS_B(int8 address, int8 data)                      ////
.................... ////     Sets the data direction register for PORTB on the specified   //// 
.................... ////      device.                                                       ////
.................... ////                                                                   ////                                                                    ////
.................... ////  NOTE: address is only valid if IO_MULTIPLE_DEVICES is defined    ////
.................... ////        in your main program. Use the provided #defines as         ////
.................... ////        parameters for the address, pin, and reg fields.           ////
.................... ////                                                                    ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////                                                                   ////
.................... //// VERSION HISTORY:                                                  ////
.................... ////                                                                   ////
.................... //// Author Date        Comments                                       ////
.................... //// -----  -------     ----------------------------------             ////
.................... //// TMH    Jul-29-2009 File Created                                   ////
.................... ////                                                                   ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2009 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #ifndef MCP23S17
.................... #define MCP23S17
.................... 
.................... /******************************************************************************
.................... **** DEFINES
.................... ******************************************************************************/
.................... 
.................... //This is the device address mask. Device supports up to 8 of the chips on the
.................... //same bus. If multiple devices are to be used on the same bus, define 
.................... //IO_MULTIPLE_DEVICES in your program. This will add an address field to all 
.................... //functions. If IO_MULTIPLE_DEVICE is not defined, an address of 0 will be 
.................... //assumed (i.e. ground A2, A1, A0)
.................... #define IO_DEVICE_ADDRESS_READ   0b01000001
.................... #define IO_DEVICE_ADDRESS_WRITE  0b01000000
.................... 
.................... //User must define a CS pin in main. This pin can be connected to all similar
.................... //devices on the bus.
.................... //!#ifndef IO_CS_PIN
.................... //!#error Must define a chip select pin.
.................... //!#endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Address Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use these in the address field if using multiple 23S17 devices. If bit 3
.................... //// in IOCON is cleared these no longer work and only device 0 can be operated
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifdef IO_MULTIPLE_DEVICES
.................... 
.................... #define IO_DEVICE_0   0b00000000
.................... #define IO_DEVICE_1   0b00000010
.................... #define IO_DEVICE_2   0b00000100
.................... #define IO_DEVICE_3   0b00000110
.................... #define IO_DEVICE_4   0b00001000
.................... #define IO_DEVICE_5   0b00001010
.................... #define IO_DEVICE_6   0b00001100
.................... #define IO_DEVICE_7   0b00001110
.................... 
.................... #endif
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Device Register Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Used in the reg field. If IOCON bit 7 is cleared these no longer are 
.................... //// correct, use values to right. Refer to data sheet for more information
.................... //// on their use.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #define IODIRA      0x00     //0x00   Data Direction Register for PORTA
.................... #define IPOLA     0x01     //0x02   Input Polarity Register for PORTA
.................... #define GPINTENA    0x02     //0x04     Interrupt-on-change enable Register for PORTA                        
.................... #define DEFVALA   0x03     //0x06   Default Value Register for PORTA
.................... #define INTCONA   0x04     //0x08   Interrupt-on-change control Register for PORTA                          
.................... #define IOCON      0x05     //0x0A   Configuration register for device                      
.................... #define GPPUA      0x06     //0x0C   100kOhm pullup resistor register for PORTA (sets pin to input when set)                           
.................... #define INTFA      0x07     //0x0E   Interrupt flag Register for PORTA                             
.................... #define INTCAPA   0x08     //0x10   Interrupt captured value Register for PORTA                  
.................... #define GPIOA      0x09     //0x12   General purpose I/O Register for PORTA                            
.................... #define OLATA      0x0A     //0x14   Output latch Register for PORTA
.................... 
.................... #define IODIRB    0x10     //0x01   Data Direction Register for PORTB
.................... #define IPOLB     0x11     //0x03   Input Polarity Register for PORTB
.................... #define GPINTENB    0x12     //0x05     Interrupt-on-change enable Register for PORTB
.................... #define DEFVALB   0x13     //0x07   Default Value Register for PORTB
.................... #define INTCONB   0x14     //0x09   Interrupt-on-change control Register for PORTB
.................... //#define IOCON      0x15     //0x0B   //IOCON has 2 different addresses, both write to same register                              
.................... #define GPPUB      0x16     //0x0D   100kOhm pullup resistor register for PORTB (sets pin to input when set)
.................... #define INTFB      0x17     //0x0F   Interrupt flag Register for PORTB 
.................... #define INTCAPB   0x18     //0x11   Interrupt captured value Register for PORTB
.................... #define GPIOB      0x19     //0x13   General purpose I/O Register for PORTB
.................... #define OLATB      0x1A     //0x15   Output latch Register for PORTB
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Pin Defines
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Use in the Pin field.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_PIN_A0      0x80
.................... #define IO_PIN_A1      0x81
.................... #define IO_PIN_A2      0x82
.................... #define IO_PIN_A3      0x83
.................... #define IO_PIN_A4      0x84
.................... #define IO_PIN_A5      0x85
.................... #define IO_PIN_A6      0x86
.................... #define IO_PIN_A7      0x87
.................... 
.................... #define IO_PIN_B0      0x00
.................... #define IO_PIN_B1      0x01
.................... #define IO_PIN_B2      0x02
.................... #define IO_PIN_B3      0x03
.................... #define IO_PIN_B4      0x04
.................... #define IO_PIN_B5      0x05
.................... #define IO_PIN_B6      0x06
.................... #define IO_PIN_B7      0x07
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IOCON Bits
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// OR wanted options together when setting the IOCON register.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... #define IO_IOCON_BANK      0x80   //Sets register addresses. Initialized to 1.                            
.................... #define IO_IOCON_MIRROR    0x40   //Internally connect interrupt PINs. 
.................... #define IO_IOCON_SEQOP     0x20   //Sets ~Sequential/Byte mode. Driver only uses byte mode.
.................... #define IO_IOCON_DISSLW    0x10    //Enables slew rate for SDA output                             
.................... #define IO_IOCON_HAEN      0x08   //Enables hardware address pins. If 0 only one device can be used.
.................... #define IO_IOCON_ODR       0x04   //Open drain/~active drive interrupt pin outputs
.................... #define IO_IOCON_INTPOL    0x02   //Sets INT output as active high/~low
.................... 
.................... /******************************************************************************
.................... **** FUNCTION PROTOTYPES
.................... ******************************************************************************/
.................... 
.................... void IO_INIT();   //don't need multiple inits because all devices are assumed 0 before HAEN is set
.................... 
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 reg);
.................... void IO_OUTPUT_A(int8 data);
.................... void IO_OUTPUT_B(int8 data);
.................... int8 IO_INPUT_A();
.................... int8 IO_INPUT_B();
.................... void IO_OUTPUT_BIT(int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 pin);
.................... void IO_OUTPUT_LOW(int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 pin);
.................... int1 IO_INPUT(int8 pin);
.................... int1 IO_INPUT_STATE(int8 pin);
.................... int8 IO_GET_TRIS_A();
.................... void IO_SET_TRIS_A(int8 data);
.................... int8 IO_GET_TRIS_B();
.................... void IO_SET_TRIS_B(int8 data);
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data);
.................... int8 IO_READ_REGISTER(int8 address, int8 reg);
.................... void IO_OUTPUT_A(int8 address, int8 data);
.................... void IO_OUTPUT_B(int8 address, int8 data);
.................... int8 IO_INPUT_A(int8 address);
.................... int8 IO_INPUT_B(int8 address);
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state);
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin);
.................... void IO_OUTPUT_LOW(int8 address, int8 pin);
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin);
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin);
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin);
.................... int1 IO_INPUT(int8 address, int8 pin);
.................... int1 IO_INPUT_STATE(int8 address, int8 pin);
.................... int8 IO_GET_TRIS_A(int8 address);
.................... void IO_SET_TRIS_A(int8 address, int8 data);
.................... int8 IO_GET_TRIS_B(int8 address);
.................... void IO_SET_TRIS_B(int8 address, int8 data);
.................... #endif
.................... 
.................... /******************************************************************************
.................... **** FUNCTIONS
.................... ******************************************************************************/
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Must be called before anything else. Enables the MCP23S17 chip to have 
.................... //// the following settings:
.................... ////      IO_IOCON_BANK    = 1    Sets addresses to align with the #defines
.................... ////      IO_IOCON_MIRROR  = 0      INT pins are not internally connected
.................... ////      IO_IOCON_SEQOP     = 1      Operating in Byte mode   
.................... ////      IO_IOCON_DISSLW  = 0      SDA output slew rate is enabled                             
.................... ////      IO_IOCON_HAEN     = x      A2, A1, A0 enabled only if IO_MULTIPLE_DEVICES is defined   
.................... ////      IO_IOCON_ODR      = 0      Interrupt will drive its level   
.................... ////      IO_IOCON_INTPOL  = 1      Interrupt is active-high
.................... ////
.................... //// If different settings are required, use an IO_WRITE_REGISTER() with IOCON
.................... //// as the reg parameter. Note: if IO_IOCON_BANK is cleared then the #defines
.................... //// for the register values are no longer valid.
.................... ///////////////////////////////////////////////////////////////////////////////
.................... void IO_INIT(){
.................... 
....................    output_high(IO_CS_PIN);
*
00A86:  BCF    F92.5
00A88:  BSF    F89.5
....................    output_drive(IO_CS_PIN);
00A8A:  BCF    F92.5
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(0x0A, 0xA2);   //IOCON's address is 0xA until IOCON.Bank is set                         
....................    #else
....................    IO_WRITE_REGISTER(IO_DEVICE_0, 0x0A, 0xAA);
00A8C:  MOVLB  E
00A8E:  CLRF   x46
00A90:  MOVLW  0A
00A92:  MOVWF  x47
00A94:  MOVLW  AA
00A96:  MOVWF  x48
00A98:  MOVLB  0
00A9A:  RCALL  0A54
....................    IO_WRITE_REGISTER(IO_DEVICE_1, 0x0A, 0xAA);  //Edit by Jack
00A9C:  MOVLW  02
00A9E:  MOVLB  E
00AA0:  MOVWF  x46
00AA2:  MOVLW  0A
00AA4:  MOVWF  x47
00AA6:  MOVLW  AA
00AA8:  MOVWF  x48
00AAA:  MOVLB  0
00AAC:  RCALL  0A54
....................    IO_WRITE_REGISTER(IO_DEVICE_2, 0x0A, 0xAA);  //Edit by Jack
00AAE:  MOVLW  04
00AB0:  MOVLB  E
00AB2:  MOVWF  x46
00AB4:  MOVLW  0A
00AB6:  MOVWF  x47
00AB8:  MOVLW  AA
00ABA:  MOVWF  x48
00ABC:  MOVLB  0
00ABE:  RCALL  0A54
....................    IO_WRITE_REGISTER(IO_DEVICE_3, 0x0A, 0xAA);  //Edit by Jack
00AC0:  MOVLW  06
00AC2:  MOVLB  E
00AC4:  MOVWF  x46
00AC6:  MOVLW  0A
00AC8:  MOVWF  x47
00ACA:  MOVLW  AA
00ACC:  MOVWF  x48
00ACE:  MOVLB  0
00AD0:  RCALL  0A54
....................    IO_WRITE_REGISTER(IO_DEVICE_4, 0x0A, 0xAA);  //Edit by Jack
00AD2:  MOVLW  08
00AD4:  MOVLB  E
00AD6:  MOVWF  x46
00AD8:  MOVLW  0A
00ADA:  MOVWF  x47
00ADC:  MOVLW  AA
00ADE:  MOVWF  x48
00AE0:  MOVLB  0
00AE2:  RCALL  0A54
....................    IO_WRITE_REGISTER(IO_DEVICE_5, 0x0A, 0xAA);  //Edit by Jack
00AE4:  MOVLW  0A
00AE6:  MOVLB  E
00AE8:  MOVWF  x46
00AEA:  MOVWF  x47
00AEC:  MOVLW  AA
00AEE:  MOVWF  x48
00AF0:  MOVLB  0
00AF2:  RCALL  0A54
....................    IO_WRITE_REGISTER(IO_DEVICE_6, 0x0A, 0xAA);  //Edit by Jack
00AF4:  MOVLW  0C
00AF6:  MOVLB  E
00AF8:  MOVWF  x46
00AFA:  MOVLW  0A
00AFC:  MOVWF  x47
00AFE:  MOVLW  AA
00B00:  MOVWF  x48
00B02:  MOVLB  0
00B04:  RCALL  0A54
....................    IO_WRITE_REGISTER(IO_DEVICE_7, 0x0A, 0xAA);  //Edit by Jack
00B06:  MOVLW  0E
00B08:  MOVLB  E
00B0A:  MOVWF  x46
00B0C:  MOVLW  0A
00B0E:  MOVWF  x47
00B10:  MOVLW  AA
00B12:  MOVWF  x48
00B14:  MOVLB  0
00B16:  RCALL  0A54
....................    #endif
00B18:  GOTO   C5AC (RETURN)
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_WRITE_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be written. use provided defines.
.................... ////      data - the data to be written.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_WRITE_REGISTER(int8 reg, int8 data){
.................... #else
.................... void IO_WRITE_REGISTER(int8 address, int8 reg, int8 data){
.................... #endif
....................    
....................    output_low(IO_CS_PIN);
*
00A54:  BCF    F92.5
00A56:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_WRITE);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_WRITE | address);
00A58:  MOVLB  E
00A5A:  MOVF   x46,W
00A5C:  IORLW  40
00A5E:  MOVWF  x49
00A60:  MOVF   FC9,W
00A62:  MOVFF  E49,FC9
00A66:  RRCF   FC7,W
00A68:  BNC   0A66
....................    #endif
....................    
....................    spi_write(reg);
00A6A:  MOVF   FC9,W
00A6C:  MOVFF  E47,FC9
00A70:  RRCF   FC7,W
00A72:  BNC   0A70
....................    spi_write(data);
00A74:  MOVF   FC9,W
00A76:  MOVFF  E48,FC9
00A7A:  RRCF   FC7,W
00A7C:  BNC   0A7A
....................    
....................    output_high(IO_CS_PIN);
00A7E:  BCF    F92.5
00A80:  BSF    F89.5
00A82:  MOVLB  0
00A84:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_READ_REGISTER
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current value of the specified register.
.................... ////
.................... //// Parameters:
.................... ////      reg - the register to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - the current value of the requested register
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_READ_REGISTER(int8 reg){
.................... #else
.................... int8 IO_READ_REGISTER(int8 address, int8 reg){
.................... #endif
....................    int8 retVal;
.................... 
....................    output_low(IO_CS_PIN);
*
02B6E:  BCF    F92.5
02B70:  BCF    F89.5
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    spi_write(IO_DEVICE_ADDRESS_READ);
....................    #else
....................    spi_write(IO_DEVICE_ADDRESS_READ | address);
02B72:  MOVLB  E
02B74:  MOVF   x48,W
02B76:  IORLW  41
02B78:  MOVWF  x4B
02B7A:  MOVF   FC9,W
02B7C:  MOVFF  E4B,FC9
02B80:  RRCF   FC7,W
02B82:  BNC   2B80
....................    #endif
....................    
....................    spi_write(reg);
02B84:  MOVF   FC9,W
02B86:  MOVFF  E49,FC9
02B8A:  RRCF   FC7,W
02B8C:  BNC   2B8A
....................    retVal = spi_read(0);
02B8E:  MOVF   FC9,W
02B90:  CLRF   FC9
02B92:  RRCF   FC7,W
02B94:  BNC   2B92
02B96:  MOVFF  FC9,E4A
....................    
....................    output_high(IO_CS_PIN);
02B9A:  BCF    F92.5
02B9C:  BSF    F89.5
....................    
....................    return retVal;
02B9E:  MOVFF  E4A,01
02BA2:  MOVLB  0
02BA4:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port A
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_A(int8 data){
.................... #else
.................... void IO_OUTPUT_A(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATA, data);
*
0254C:  MOVFF  E44,E46
02550:  MOVLW  0A
02552:  MOVLB  E
02554:  MOVWF  x47
02556:  MOVFF  E45,E48
0255A:  MOVLB  0
0255C:  CALL   0A54
....................    #endif
02560:  RETURN 0
.................... 
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the current output value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      data - the value to be written to Port B
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_B(int8 data){
.................... #else
.................... void IO_OUTPUT_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(OLATB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, OLATB, data);
02562:  MOVFF  E44,E46
02566:  MOVLW  1A
02568:  MOVLB  E
0256A:  MOVWF  x47
0256C:  MOVFF  E45,E48
02570:  MOVLB  0
02572:  CALL   0A54
....................    #endif
02576:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port A. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTA's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_A(){
.................... #else
.................... int8 IO_INPUT_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOA);
*
02BA6:  MOVFF  E46,E48
02BAA:  MOVLW  09
02BAC:  MOVLB  E
02BAE:  MOVWF  x49
02BB0:  MOVLB  0
02BB2:  RCALL  2B6E
02BB4:  MOVFF  01,E47
....................    #endif
....................    
....................    return retVal;
02BB8:  MOVLB  E
02BBA:  MOVFF  E47,01
02BBE:  MOVLB  0
02BC0:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the current input value of Port B. Does NOT change the PORT's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int8 - PORTB's input value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_INPUT_B(){
.................... #else
.................... int8 IO_INPUT_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(GPIOB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, GPIOB);
02BC2:  MOVFF  E46,E48
02BC6:  MOVLW  19
02BC8:  MOVLB  E
02BCA:  MOVWF  x49
02BCC:  MOVLB  0
02BCE:  RCALL  2B6E
02BD0:  MOVFF  01,E47
....................    #endif
....................    
....................    return retVal;
02BD4:  MOVLB  E
02BD6:  MOVFF  E47,01
02BDA:  MOVLB  0
02BDC:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_BIT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to the desired state. Does NOT change the PIN's 
.................... //// direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_BIT(int8 pin, int1 state){
.................... #else
.................... void IO_OUTPUT_BIT(int8 address, int8 pin, int1 state){
.................... #endif
....................    
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin &0x0F);     
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin &0x0F);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       if(state){    //set high                      
....................          bit_set(tempReg, pin);      
....................       }else{        //set low                      
....................          bit_clear(tempReg, pin);
....................       }
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_HIGH
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output high. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be set. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_HIGH(int8 pin){
.................... #else
.................... void IO_OUTPUT_HIGH(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_set(tempReg, pin); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_LOW
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to output low. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be cleared. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_LOW(int8 pin){
.................... #else
.................... void IO_OUTPUT_LOW(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       bit_clear(tempReg, pin);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_FLOAT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_FLOAT(int8 pin){
.................... #else
.................... void IO_OUTPUT_FLOAT(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_set(tempReg, pin &0x0F); 
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_set(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_TOGGLE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Toggles the specified PIN's output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be toggled. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_TOGGLE(int8 pin){
.................... #else
.................... void IO_OUTPUT_TOGGLE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATA);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATA, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATA, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(OLATB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, OLATB);
....................       #endif
....................       tempReg ^= (1<< (pin&0x0F));
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_WRITE_REGISTER(OLATB, tempReg);
....................       #else
....................       IO_WRITE_REGISTER(address, OLATB, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_OUTPUT_DRIVE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the specified PIN to an output.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be changed. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_OUTPUT_DRIVE(int8 pin){
.................... #else
.................... void IO_OUTPUT_DRIVE(int8 address, int8 pin){
.................... #endif
.................... 
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){ //PIN A
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_A();
....................       #else
....................       tempReg = IO_GET_TRIS_A(address);
....................       #endif
....................       bit_clear(tempReg, pin &0x0F);
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_A(tempReg);
....................       #else
....................       IO_SET_TRIS_A(address, tempReg);
....................       #endif
....................    }else{    //PIN B   
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_GET_TRIS_B();
....................       #else
....................       tempReg = IO_GET_TRIS_B(address);
....................       #endif
....................       bit_clear(tempReg, pin);      
....................       #ifndef IO_MULTIPLE_DEVICES
....................       IO_SET_TRIS_B(tempReg);
....................       #else
....................       IO_SET_TRIS_B(address, tempReg);
....................       #endif
....................    }
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Changes the PIN's direction to an
.................... //// input.
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT(int8 pin){
.................... #else
.................... int1 IO_INPUT(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_OUTPUT_FLOAT(pin);
....................    #else
....................    IO_OUTPUT_FLOAT(address, pin);
....................    #endif
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_INPUT_STATE
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the specified PIN's current input. Does NOT change the PIN's direction
.................... ////
.................... //// Parameters:
.................... ////      pin - pin to be read. use provided defines.
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      int1 - the state of the pin
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int1 IO_INPUT_STATE(int8 pin){
.................... #else
.................... int1 IO_INPUT_STATE(int8 address, int8 pin){
.................... #endif
....................    int1 retVal;
....................    int8 tempReg;
....................    
....................    if(bit_test(pin, 7)){
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOA);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOA);
....................       #endif
....................    }else{
....................       #ifndef IO_MULTIPLE_DEVICES
....................       tempReg = IO_READ_REGISTER(GPIOB);
....................       #else
....................       tempReg = IO_READ_REGISTER(address, GPIOB);
....................       #endif
....................    }
....................    retVal = bit_test(tempReg, pin&0x0F);
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port A data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_A(){
.................... #else
.................... int8 IO_GET_TRIS_A(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRA);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRA);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_A
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port A data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_A(int8 data){
.................... #else
.................... void IO_SET_TRIS_A(int8 address, int8 data){
.................... #endif
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRA, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRA, data);
*
00B1C:  MOVFF  E3C,E46
00B20:  MOVLB  E
00B22:  CLRF   x47
00B24:  MOVFF  E3D,E48
00B28:  MOVLB  0
00B2A:  RCALL  0A54
....................    #endif
00B2C:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_GET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Gets the device's port B data direction register.
.................... ////
.................... //// Parameters:
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      The device's IODIRB register value
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... int8 IO_GET_TRIS_B(){
.................... #else
.................... int8 IO_GET_TRIS_B(int8 address){
.................... #endif
.................... 
....................    int8 retVal;
....................    
....................    #ifndef IO_MULTIPLE_DEVICES
....................    retVal = IO_READ_REGISTER(IODIRB);
....................    #else
....................    retVal = IO_READ_REGISTER(address, IODIRB);
....................    #endif
....................    
....................    return retVal;
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// IO_SET_TRIS_B
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //// Sets the device's port B data direction register to the specified value.
.................... ////
.................... //// Parameters:
.................... ////      data - value to be written to the register
.................... ////     address - address of the device. use provided defines.
.................... ////
.................... //// Returns:
.................... ////      void
.................... ///////////////////////////////////////////////////////////////////////////////
.................... #ifndef IO_MULTIPLE_DEVICES
.................... void IO_SET_TRIS_B(int8 data){
.................... #else
.................... void IO_SET_TRIS_B(int8 address, int8 data){
.................... #endif
.................... 
....................    #ifndef IO_MULTIPLE_DEVICES
....................    IO_WRITE_REGISTER(IODIRB, data);
....................    #else
....................    IO_WRITE_REGISTER(address, IODIRB, data);
00B2E:  MOVFF  E3C,E46
00B32:  MOVLW  10
00B34:  MOVLB  E
00B36:  MOVWF  x47
00B38:  MOVFF  E3D,E48
00B3C:  MOVLB  0
00B3E:  RCALL  0A54
....................    #endif
00B40:  RETURN 0
.................... 
.................... }
.................... 
.................... #endif
.................... 
.................... 
.................... #define OnRelay   1
.................... #define OffRelay   0
.................... 
.................... #define Pled        PIN_B5
.................... #define I2C_SDA     PIN_C4
.................... #define I2C_SCL     PIN_C3
.................... 
.................... #define Pack        PIN_C0
.................... #define Preset      PIN_C1
.................... #define Ptest       PIN_C2
.................... 
.................... #define Pbell       PIN_A3
.................... #define Pbuzzer     PIN_A4
.................... 
.................... #define P485ctrl    PIN_B3       // ---jj
.................... #define PTxD        PIN_C6
.................... #define PRxD        PIN_C7
.................... 
.................... //#define PsyncR      PIN_B3
.................... //#define PsyncS      PIN_B4
.................... 
.................... #define EXP_OUT_ENABLE  PIN_B0
.................... #define EXP_OUT_CLOCK   PIN_B1
.................... #define EXP_OUT_DO      PIN_B2
.................... 
.................... #define Red       0
.................... #define Green     1
.................... #define Ambian    2
.................... 
.................... //#define NUMBER_OF_595 8
.................... 
.................... //#use rs232(baud=9600,parity=N,xmit=PTxD,rcv=PRxD,bits=8,restart_wdt)
.................... /* Config and Enable Hardware UART1(RC6=TX1,RC7=RX1 */
.................... #use rs232(uart1, baud=9600, stream=CH1)
*
026AC:  BTFSS  F9E.4
026AE:  BRA    26AC
026B0:  MOVWF  FAD
026B2:  RETURN 0
.................... 
.................... /* Config and Enable Software UART2(RC0=TX2,RC1=RX2 */
.................... 
.................... #define TX2 PIN_B0                                                            // RC0 = TXD
.................... #define RX2 PIN_B1                                                            // RC1 = RXD
.................... #use rs232(baud=9600, xmit=TX2, rcv=RX2,stream=CH2)
*
025F0:  BCF    F93.0
025F2:  BCF    F8A.0
025F4:  MOVLW  08
025F6:  MOVWF  01
025F8:  BRA    25FA
025FA:  NOP   
025FC:  BSF    01.7
025FE:  BRA    2620
02600:  BCF    01.7
02602:  MOVLB  E
02604:  RRCF   x46,F
02606:  MOVLB  0
02608:  BTFSC  FD8.0
0260A:  BSF    F8A.0
0260C:  BTFSS  FD8.0
0260E:  BCF    F8A.0
02610:  BSF    01.6
02612:  BRA    2620
02614:  BCF    01.6
02616:  DECFSZ 01,F
02618:  BRA    2602
0261A:  BRA    261C
0261C:  NOP   
0261E:  BSF    F8A.0
02620:  MOVLW  84
02622:  MOVWF  FE9
02624:  DECFSZ FE9,F
02626:  BRA    2624
02628:  BRA    262A
0262A:  NOP   
0262C:  BTFSC  01.7
0262E:  BRA    2600
02630:  BTFSC  01.6
02632:  BRA    2614
02634:  RETURN 0
.................... 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM) 
.................... //#USE SPI (  FORCE_HW, BITS=16, ENABLE=IO_CS_PIN, SAMPLE_RISE, stream=SPI_STREAM2)
.................... 
.................... //#use spi(MASTER, MODE=0, SPI1, FORCE_HW)
.................... //#use spi(MASTER, MSB_FIRST, BITS=8, MODE=0, BAUD=100000)
.................... //#use spi(DI=PIN_B1, DO=PIN_B0, CLK=PIN_B2, ENABLE=PIN_B4, BITS=8)
.................... 
.................... void check_ack(void);
.................... void check_test(void);
.................... void check_reset(void);
.................... int1 CheckAutoReset(unsigned char DatType);
.................... void Read_Config(void);
.................... void ForceAllAlarm(void);
.................... void Read_input(void);
.................... 
.................... void initialIC(void);
.................... 
.................... int8 StatusTime = 0;         //Hearth beat LED Timer
.................... int1 HearthbeatInd = 0;      //Hearth beat Indicator
.................... int8 FlashingRateTime = 25;
.................... int1 FlashingFlag = 0;
.................... int8 TimeBase1s = 100;
.................... int8 AutoAckDelayTime = 0;
.................... 
.................... int8 Input1_8_Send;
.................... int8 Input9_16_Send;
.................... int8 Input17_24_Send;
.................... int8 Input25_32_Send;
.................... int8 Input33_40_Send;
.................... int8 Input41_48_Send;
.................... int8 Input49_56_Send;
.................... int8 Input57_64_Send;
.................... 
.................... int8 Ack1_8_Send;
.................... int8 Ack9_16_Send;
.................... int8 Ack17_24_Send;
.................... int8 Ack25_32_Send;
.................... int8 Ack33_40_Send;
.................... int8 Ack41_48_Send;
.................... int8 Ack49_56_Send;
.................... int8 Ack57_64_Send;
.................... 
.................... int1 AutoAckFlag = 0;
.................... int1 AutoResetFlag = 0;
.................... int1 AutoTestFlag = 0;
.................... 
.................... int8 SBUF = 0x00;
.................... 
.................... int1 Test_fault = 0;
.................... int8 T_test = 0x00;
.................... 
.................... int1 Test = 0;
.................... int1 Ack_F = 0;
.................... int1 Reset_F = 0;
.................... 
.................... int1 SyncStatus = 0;   //"0" -> No Sync signal
.................... //int1 SyncFlag = 0;     //use for debounce sync signal
.................... int8 Synctimer = 0x00; //use for debounce sync signal
.................... 
.................... int8 Output1_8;
.................... int8 Output9_16;
.................... 
.................... //int8 Output595[4];
.................... 
.................... //int8 tempdata;
.................... //int8 EEP_Config = 0x00;   //
.................... //int8 NUMBER_OF_595 ;
.................... 
.................... int8 EEpDat;
.................... 
.................... volatile int1 RefreshConfigData =0;
.................... 
.................... volatile int1 functointest_f = 0;
.................... 
.................... ///////// Data from EEProm ///////
.................... //int Device_Addr;
.................... 
.................... int8 InputType1_8;
.................... int8 InputType9_16;
.................... int8 InputType17_24;
.................... 
.................... int8 FaultType1_8;
.................... int8 FaultType9_16;
.................... int8 FaultType17_24;
.................... 
.................... 
.................... int8 OutputType1_8;
.................... int8 OutputType9_16;
.................... int8 OutputType17_24;
.................... 
.................... int8 OutputBoth1_8;
.................... int8 OutputBoth9_16;
.................... int8 OutputBoth17_24;
.................... 
.................... int8 Alarm_Indicator1_8;
.................... int8 Alarm_Indicator9_16;
.................... int8 Alarm_Indicator17_24;
.................... 
.................... int8 Input1_8;
.................... int8 Input9_10;
.................... int8 Input11_18;
.................... int8 Input19_20;
.................... 
.................... int8 Input9_16;
.................... int8 Input17_24;
.................... int8 Input25_32;
.................... 
.................... int8 Red1_8;
.................... int8 Red9_10 ;
.................... int8 Red11_18 ;
.................... int8 Red19_20 ;
.................... int8 Green1_8 ;
.................... int8 Green9_10 ;
.................... int8 Green11_18 ;
.................... int8 Green19_20 ;
.................... 
.................... /*
.................... int8 OUTRed1_8;
.................... int8 OUTRed9_10 ;
.................... int8 OUTRed11_18 ;
.................... int8 OUTRed19_20 ;
.................... int8 OUTGreen1_8 ;
.................... int8 OUTGreen9_10 ;
.................... int8 OUTGreen11_18 ;
.................... int8 OUTGreen19_20 ;
.................... */
.................... int8 AutoAck;
.................... int8 AutoAckTime;
.................... int8 FlashingRate;
.................... int8 NoOfPoint;
.................... //int8 MasterSlaveSync;
.................... 
.................... int1 StartRead = 0;
.................... volatile int8 StartReadCount;
.................... 
.................... ////////////////////////////////
.................... ///////// tempolary register //////////
.................... //int8 temp;
.................... //int1 RxDreceive = 0;
.................... 
.................... //////////////////////////////////////
.................... unsigned char const addr_sq = 0x10,end_sq = 0x11,code_sq = 0x12,start_addr_hi_sq = 0x13,start_addr_lo_sq = 0x14;         //serial sequnce
.................... unsigned char const ubyte_hi_sq = 0x15,ubyte_lo_sq = 0x16,crc_hi_sq = 0x17, second_numofdata = 0x18,byte_count_sq = 0x19,data_sq = 0x20;      //serial sequnce
.................... 
.................... 
.................... int1 recieve_completed = 0;
.................... unsigned char sequence;         //keep sequence use for RxD
.................... unsigned char Address;
.................... unsigned char RxD_DataLen = 0x00;
.................... unsigned char TxD_Buff[512];
.................... unsigned char RxD_Buff[1024];
.................... unsigned char CRC_Lo;
.................... unsigned char CRC_Hi;
.................... int16 Send_check_Time = 500; //if no send reset buffer every 5 second
.................... 
.................... int16 Start_Address = 0x0000;
.................... int16 No_PointCount = 0x0000;
.................... unsigned char Data_ByteCount = 0x00;
.................... unsigned char Data_Buff[1024];
.................... //unsigned char DataTemp;
.................... //unsigned char TxD_DataLen;
.................... 
.................... int8 MCP23s17_Ip_dat;
.................... 
.................... 
.................... //int8 MCP23s17_Op_dat;
.................... 
.................... unsigned char T_timeout;    //use for calculate RxD timeout
.................... int16 index = 0x00; //use for Loop
.................... 
.................... int8 outmcp23 = 0;
.................... 
.................... unsigned char sms_phonenumber[15];
.................... 
.................... unsigned char SMS_Massage1[32];
.................... unsigned char SMS_Massage2[32];
.................... unsigned char SMS_Massage3[32];
.................... unsigned char SMS_Massage4[32];
.................... unsigned char SMS_Massage5[32];
.................... unsigned char SMS_Massage6[32];
.................... unsigned char SMS_Massage7[32];
.................... unsigned char SMS_Massage8[32];
.................... unsigned char SMS_Massage9[32];
.................... unsigned char SMS_Massage10[32];
.................... unsigned char SMS_Massage11[32];
.................... unsigned char SMS_Massage12[32];
.................... unsigned char SMS_Massage13[32];
.................... unsigned char SMS_Massage14[32];
.................... unsigned char SMS_Massage15[32];
.................... unsigned char SMS_Massage16[32];
.................... unsigned char SMS_Massage17[32];
.................... unsigned char SMS_Massage18[32];
.................... unsigned char SMS_Massage19[32];
.................... unsigned char SMS_Massage20[32];
.................... 
.................... unsigned char SMS_MassageSUM[160];
.................... 
.................... unsigned char const CRC_Table_Hi[] = {
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
.................... 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
.................... 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
.................... 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
.................... 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
.................... 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
.................... 0x40
.................... }; 
.................... 
.................... unsigned  char const CRC_Table_Lo[] = {
.................... 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
.................... 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
.................... 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
.................... 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
.................... 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
.................... 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
.................... 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
.................... 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
.................... 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
.................... 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
.................... 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
.................... 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
.................... 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
.................... 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
.................... 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
.................... 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
.................... 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
.................... 0x40
.................... } ;
.................... 
.................... ///////////// Define Bit register ////////////////////////////
.................... 
.................... struct Bit64    // Inputt
.................... {
....................    int1 B1,B2,B3,B4,B5,B6,B7,B8,B9,B10;
....................    int1 B11,B12,B13,B14,B15,B16,B17,B18,B19,B20;
....................    int1 B21,B22,B23,B24,B25,B26,B27,B28,B29,B30;
....................    //int1 B31,B32,B33,B34,B35,B36,B37,B38,B39,B40;
....................    //int1 B41,B42,B43,B44,B45,B46,B47,B48,B49,B50;
....................    //int1 B51,B52,B53,B54,B55,B56,B57,B58,B59,B60;
....................    //int1 B61,B62,B63,B64;
.................... };
.................... 
....................    //Output   (LED Lit = "0")
....................    //Inputt Type NO/NC (NO = "1" , NC = "0")
....................    //Fault Type Manual/Auto (Manual = "1" , Auto = "0")
....................    //Output Type Buz/Bell (Buzzer = "1" , Bell = "0")
....................    //Output Both (Normal = "1" , Both = "0")
....................    //Acknowledge flag (Acked = "1" , non Ack = "0")
.................... 
.................... struct Bit64 Inputt;//,Output,InputType;//,FaultType,OutputType,OutputBoth;
.................... struct Bit64 Output,InputType;
.................... struct Bit64 FaultType,OutputType,OutputBoth;
.................... struct Bit64 AlarmIndicator,Ack,In,In2;
.................... struct Bit64 AckSend,RED_Colour,GREEN_Colour;
.................... struct Bit64 SendSMS;
.................... 
.................... int1 FaultAgo[21];
.................... int1 FaultNow[21];
.................... int16 ReleaseTime[21];
.................... int16 FaultDelayTime[21];
.................... 
.................... int1 FaultNCNO[21];
.................... #define NO 1
.................... #define NC 0
.................... 
.................... //volatile int16 ReadIn_Count =0;
.................... //int1 ReadIn_flag = 0;
.................... /*
.................... int8 DelayTime1 = 0;
.................... int8 DelayTime2 = 0;
.................... int8 DelayTime3 = 0;
.................... int8 DelayTime4 = 0;
.................... int8 DelayTime5 = 0;
.................... int8 DelayTime6 = 0;
.................... int8 DelayTime7 = 0;
.................... int8 DelayTime8 = 0;
.................... int8 DelayTime9 = 0;
.................... int8 DelayTime10 = 0;
.................... int8 DelayTime11 = 0;
.................... int8 DelayTime12 = 0;
.................... int8 DelayTime13 = 0;
.................... int8 DelayTime14 = 0;
.................... int8 DelayTime15 = 0;
.................... int8 DelayTime16 = 0;
.................... int8 DelayTime17 = 0;
.................... int8 DelayTime18 = 0;
.................... int8 DelayTime19 = 0;
.................... int8 DelayTime20 = 0;
.................... */
.................... 
.................... //////////////////////////////--Function--/////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////MODBUS Routine//////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Alarmtosend(void)
.................... {
....................    Input1_8_Send = 0x00;
*
026B4:  CLRF   1E
....................    Input9_16_Send = 0x00;
026B6:  CLRF   1F
....................    Input17_24_Send = 0x00;
026B8:  CLRF   20
....................    
....................    
....................    Ack1_8_Send = 0x00;
026BA:  CLRF   26
....................    Ack9_16_Send = 0x00;
026BC:  CLRF   27
....................    Ack17_24_Send = 0x00;
026BE:  CLRF   28
.................... 
....................    
....................    /////////////////////////////////////////////////////
....................   
....................    if((In.B1 == 0) && (Output.B1 ==0))
026C0:  MOVLB  D
026C2:  BTFSC  xC1.0
026C4:  BRA    26CE
026C6:  BTFSC  xA5.0
026C8:  BRA    26CE
....................       AckSend.B1 = 1;
026CA:  BSF    xC9.0
026CC:  BRA    26D0
....................    else
....................       AckSend.B1 = 0;
026CE:  BCF    xC9.0
....................       
....................    if((In.B2 == 0) && (Output.B2 ==0))
026D0:  BTFSC  xC1.1
026D2:  BRA    26DC
026D4:  BTFSC  xA5.1
026D6:  BRA    26DC
....................       AckSend.B2 = 1;
026D8:  BSF    xC9.1
026DA:  BRA    26DE
....................    else
....................       AckSend.B2 = 0;
026DC:  BCF    xC9.1
....................       
....................    if((In.B3 == 0) && (Output.B3 ==0))
026DE:  BTFSC  xC1.2
026E0:  BRA    26EA
026E2:  BTFSC  xA5.2
026E4:  BRA    26EA
....................       AckSend.B3 = 1;
026E6:  BSF    xC9.2
026E8:  BRA    26EC
....................    else
....................       AckSend.B3 = 0;
026EA:  BCF    xC9.2
....................       
....................    if((In.B4 == 0) && (Output.B4 ==0))
026EC:  BTFSC  xC1.3
026EE:  BRA    26F8
026F0:  BTFSC  xA5.3
026F2:  BRA    26F8
....................       AckSend.B4 = 1;
026F4:  BSF    xC9.3
026F6:  BRA    26FA
....................    else
....................       AckSend.B4 = 0;
026F8:  BCF    xC9.3
....................       
....................    if((In.B5 == 0) && (Output.B5 ==0))
026FA:  BTFSC  xC1.4
026FC:  BRA    2706
026FE:  BTFSC  xA5.4
02700:  BRA    2706
....................       AckSend.B5 = 1;
02702:  BSF    xC9.4
02704:  BRA    2708
....................    else
....................       AckSend.B5 = 0;
02706:  BCF    xC9.4
....................       
....................    if((In.B6 == 0) && (Output.B6 ==0))
02708:  BTFSC  xC1.5
0270A:  BRA    2714
0270C:  BTFSC  xA5.5
0270E:  BRA    2714
....................       AckSend.B6 = 1;
02710:  BSF    xC9.5
02712:  BRA    2716
....................    else
....................       AckSend.B6 = 0;
02714:  BCF    xC9.5
....................       
....................    if((In.B7 == 0) && (Output.B7 ==0))
02716:  BTFSC  xC1.6
02718:  BRA    2722
0271A:  BTFSC  xA5.6
0271C:  BRA    2722
....................       AckSend.B7 = 1;
0271E:  BSF    xC9.6
02720:  BRA    2724
....................    else
....................       AckSend.B7 = 0;
02722:  BCF    xC9.6
....................       
....................    if((In.B8 == 0) && (Output.B8 ==0))
02724:  BTFSC  xC1.7
02726:  BRA    2730
02728:  BTFSC  xA5.7
0272A:  BRA    2730
....................       AckSend.B8 = 1;
0272C:  BSF    xC9.7
0272E:  BRA    2732
....................    else
....................       AckSend.B8 = 0;
02730:  BCF    xC9.7
....................       
....................    if((In.B9 == 0) && (Output.B9 ==0))
02732:  BTFSC  xC2.0
02734:  BRA    273E
02736:  BTFSC  xA6.0
02738:  BRA    273E
....................       AckSend.B9 = 1;
0273A:  BSF    xCA.0
0273C:  BRA    2740
....................    else
....................       AckSend.B9 = 0;
0273E:  BCF    xCA.0
....................       
....................    if((In.B10 == 0) && (Output.B10 ==0))
02740:  BTFSC  xC2.1
02742:  BRA    274C
02744:  BTFSC  xA6.1
02746:  BRA    274C
....................       AckSend.B10 = 1;
02748:  BSF    xCA.1
0274A:  BRA    274E
....................    else
....................       AckSend.B10 = 0;
0274C:  BCF    xCA.1
....................       
....................    if((In.B11 == 0) && (Output.B11 ==0))
0274E:  BTFSC  xC2.2
02750:  BRA    275A
02752:  BTFSC  xA6.2
02754:  BRA    275A
....................       AckSend.B11 = 1;
02756:  BSF    xCA.2
02758:  BRA    275C
....................    else
....................       AckSend.B11 = 0;
0275A:  BCF    xCA.2
....................       
....................    if((In.B12 == 0) && (Output.B12 ==0))
0275C:  BTFSC  xC2.3
0275E:  BRA    2768
02760:  BTFSC  xA6.3
02762:  BRA    2768
....................       AckSend.B12 = 1;
02764:  BSF    xCA.3
02766:  BRA    276A
....................    else
....................       AckSend.B12 = 0;
02768:  BCF    xCA.3
....................       
....................    if((In.B13 == 0) && (Output.B13 ==0))
0276A:  BTFSC  xC2.4
0276C:  BRA    2776
0276E:  BTFSC  xA6.4
02770:  BRA    2776
....................       AckSend.B13 = 1;
02772:  BSF    xCA.4
02774:  BRA    2778
....................    else
....................       AckSend.B13 = 0;
02776:  BCF    xCA.4
....................       
....................    if((In.B14 == 0) && (Output.B14 ==0))
02778:  BTFSC  xC2.5
0277A:  BRA    2784
0277C:  BTFSC  xA6.5
0277E:  BRA    2784
....................       AckSend.B14 = 1;
02780:  BSF    xCA.5
02782:  BRA    2786
....................    else
....................       AckSend.B14 = 0;
02784:  BCF    xCA.5
....................       
....................    if((In.B15 == 0) && (Output.B15 ==0))
02786:  BTFSC  xC2.6
02788:  BRA    2792
0278A:  BTFSC  xA6.6
0278C:  BRA    2792
....................       AckSend.B15 = 1;
0278E:  BSF    xCA.6
02790:  BRA    2794
....................    else
....................       AckSend.B15 = 0;
02792:  BCF    xCA.6
....................       
....................    if((In.B16 == 0) && (Output.B16 ==0))
02794:  BTFSC  xC2.7
02796:  BRA    27A0
02798:  BTFSC  xA6.7
0279A:  BRA    27A0
....................       AckSend.B16 = 1;
0279C:  BSF    xCA.7
0279E:  BRA    27A2
....................    else
....................       AckSend.B16 = 0;
027A0:  BCF    xCA.7
....................       
....................    if((In.B17 == 0) && (Output.B17 ==0))
027A2:  BTFSC  xC3.0
027A4:  BRA    27AE
027A6:  BTFSC  xA7.0
027A8:  BRA    27AE
....................       AckSend.B17 = 1;
027AA:  BSF    xCB.0
027AC:  BRA    27B0
....................    else
....................       AckSend.B17 = 0;
027AE:  BCF    xCB.0
....................       
....................    if((In.B18 == 0) && (Output.B18 ==0))
027B0:  BTFSC  xC3.1
027B2:  BRA    27BC
027B4:  BTFSC  xA7.1
027B6:  BRA    27BC
....................       AckSend.B18 = 1;
027B8:  BSF    xCB.1
027BA:  BRA    27BE
....................    else
....................       AckSend.B18 = 0;
027BC:  BCF    xCB.1
....................       
....................    if((In.B19 == 0) && (Output.B19 ==0))
027BE:  BTFSC  xC3.2
027C0:  BRA    27CA
027C2:  BTFSC  xA7.2
027C4:  BRA    27CA
....................       AckSend.B19 = 1;
027C6:  BSF    xCB.2
027C8:  BRA    27CC
....................    else
....................       AckSend.B19 = 0;
027CA:  BCF    xCB.2
....................       
....................    if((In.B20 == 0) && (Output.B20 ==0))
027CC:  BTFSC  xC3.3
027CE:  BRA    27D8
027D0:  BTFSC  xA7.3
027D2:  BRA    27D8
....................       AckSend.B20 = 1;
027D4:  BSF    xCB.3
027D6:  BRA    27DA
....................    else
....................       AckSend.B20 = 0;
027D8:  BCF    xCB.3
....................    
....................    
....................    
....................    ///////////////////Ack/////////////////////////////////
....................    Ack1_8_Send = Ack1_8_Send | AckSend.B8;
027DA:  MOVLW  00
027DC:  BTFSC  xC9.7
027DE:  MOVLW  01
027E0:  IORWF  26,F
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B7;
027E2:  BCF    FD8.0
027E4:  RLCF   26,W
027E6:  MOVLB  E
027E8:  MOVWF  x46
027EA:  MOVLW  00
027EC:  MOVLB  D
027EE:  BTFSC  xC9.6
027F0:  MOVLW  01
027F2:  MOVLB  E
027F4:  IORWF  x46,W
027F6:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B6;
027F8:  BCF    FD8.0
027FA:  RLCF   26,W
027FC:  MOVWF  x46
027FE:  MOVLW  00
02800:  MOVLB  D
02802:  BTFSC  xC9.5
02804:  MOVLW  01
02806:  MOVLB  E
02808:  IORWF  x46,W
0280A:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B5;
0280C:  BCF    FD8.0
0280E:  RLCF   26,W
02810:  MOVWF  x46
02812:  MOVLW  00
02814:  MOVLB  D
02816:  BTFSC  xC9.4
02818:  MOVLW  01
0281A:  MOVLB  E
0281C:  IORWF  x46,W
0281E:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B4;
02820:  BCF    FD8.0
02822:  RLCF   26,W
02824:  MOVWF  x46
02826:  MOVLW  00
02828:  MOVLB  D
0282A:  BTFSC  xC9.3
0282C:  MOVLW  01
0282E:  MOVLB  E
02830:  IORWF  x46,W
02832:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B3;
02834:  BCF    FD8.0
02836:  RLCF   26,W
02838:  MOVWF  x46
0283A:  MOVLW  00
0283C:  MOVLB  D
0283E:  BTFSC  xC9.2
02840:  MOVLW  01
02842:  MOVLB  E
02844:  IORWF  x46,W
02846:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B2;
02848:  BCF    FD8.0
0284A:  RLCF   26,W
0284C:  MOVWF  x46
0284E:  MOVLW  00
02850:  MOVLB  D
02852:  BTFSC  xC9.1
02854:  MOVLW  01
02856:  MOVLB  E
02858:  IORWF  x46,W
0285A:  MOVWF  26
....................    Ack1_8_Send = (Ack1_8_Send << 1) | AckSend.B1;
0285C:  BCF    FD8.0
0285E:  RLCF   26,W
02860:  MOVWF  x46
02862:  MOVLW  00
02864:  MOVLB  D
02866:  BTFSC  xC9.0
02868:  MOVLW  01
0286A:  MOVLB  E
0286C:  IORWF  x46,W
0286E:  MOVWF  26
....................    
....................    Ack9_16_Send = Ack9_16_Send | AckSend.B16;
02870:  MOVLW  00
02872:  MOVLB  D
02874:  BTFSC  xCA.7
02876:  MOVLW  01
02878:  IORWF  27,F
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B15;
0287A:  BCF    FD8.0
0287C:  RLCF   27,W
0287E:  MOVLB  E
02880:  MOVWF  x46
02882:  MOVLW  00
02884:  MOVLB  D
02886:  BTFSC  xCA.6
02888:  MOVLW  01
0288A:  MOVLB  E
0288C:  IORWF  x46,W
0288E:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B14;
02890:  BCF    FD8.0
02892:  RLCF   27,W
02894:  MOVWF  x46
02896:  MOVLW  00
02898:  MOVLB  D
0289A:  BTFSC  xCA.5
0289C:  MOVLW  01
0289E:  MOVLB  E
028A0:  IORWF  x46,W
028A2:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B13;
028A4:  BCF    FD8.0
028A6:  RLCF   27,W
028A8:  MOVWF  x46
028AA:  MOVLW  00
028AC:  MOVLB  D
028AE:  BTFSC  xCA.4
028B0:  MOVLW  01
028B2:  MOVLB  E
028B4:  IORWF  x46,W
028B6:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B12;
028B8:  BCF    FD8.0
028BA:  RLCF   27,W
028BC:  MOVWF  x46
028BE:  MOVLW  00
028C0:  MOVLB  D
028C2:  BTFSC  xCA.3
028C4:  MOVLW  01
028C6:  MOVLB  E
028C8:  IORWF  x46,W
028CA:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B11;
028CC:  BCF    FD8.0
028CE:  RLCF   27,W
028D0:  MOVWF  x46
028D2:  MOVLW  00
028D4:  MOVLB  D
028D6:  BTFSC  xCA.2
028D8:  MOVLW  01
028DA:  MOVLB  E
028DC:  IORWF  x46,W
028DE:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B10;
028E0:  BCF    FD8.0
028E2:  RLCF   27,W
028E4:  MOVWF  x46
028E6:  MOVLW  00
028E8:  MOVLB  D
028EA:  BTFSC  xCA.1
028EC:  MOVLW  01
028EE:  MOVLB  E
028F0:  IORWF  x46,W
028F2:  MOVWF  27
....................    Ack9_16_Send = (Ack9_16_Send << 1) | AckSend.B9;
028F4:  BCF    FD8.0
028F6:  RLCF   27,W
028F8:  MOVWF  x46
028FA:  MOVLW  00
028FC:  MOVLB  D
028FE:  BTFSC  xCA.0
02900:  MOVLW  01
02902:  MOVLB  E
02904:  IORWF  x46,W
02906:  MOVWF  27
....................    
....................    Ack17_24_Send = Ack17_24_Send | AckSend.B24;
02908:  MOVLW  00
0290A:  MOVLB  D
0290C:  BTFSC  xCB.7
0290E:  MOVLW  01
02910:  IORWF  28,F
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B23;
02912:  BCF    FD8.0
02914:  RLCF   28,W
02916:  MOVLB  E
02918:  MOVWF  x46
0291A:  MOVLW  00
0291C:  MOVLB  D
0291E:  BTFSC  xCB.6
02920:  MOVLW  01
02922:  MOVLB  E
02924:  IORWF  x46,W
02926:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B22;
02928:  BCF    FD8.0
0292A:  RLCF   28,W
0292C:  MOVWF  x46
0292E:  MOVLW  00
02930:  MOVLB  D
02932:  BTFSC  xCB.5
02934:  MOVLW  01
02936:  MOVLB  E
02938:  IORWF  x46,W
0293A:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B21;
0293C:  BCF    FD8.0
0293E:  RLCF   28,W
02940:  MOVWF  x46
02942:  MOVLW  00
02944:  MOVLB  D
02946:  BTFSC  xCB.4
02948:  MOVLW  01
0294A:  MOVLB  E
0294C:  IORWF  x46,W
0294E:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B20;
02950:  BCF    FD8.0
02952:  RLCF   28,W
02954:  MOVWF  x46
02956:  MOVLW  00
02958:  MOVLB  D
0295A:  BTFSC  xCB.3
0295C:  MOVLW  01
0295E:  MOVLB  E
02960:  IORWF  x46,W
02962:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B19;
02964:  BCF    FD8.0
02966:  RLCF   28,W
02968:  MOVWF  x46
0296A:  MOVLW  00
0296C:  MOVLB  D
0296E:  BTFSC  xCB.2
02970:  MOVLW  01
02972:  MOVLB  E
02974:  IORWF  x46,W
02976:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B18;
02978:  BCF    FD8.0
0297A:  RLCF   28,W
0297C:  MOVWF  x46
0297E:  MOVLW  00
02980:  MOVLB  D
02982:  BTFSC  xCB.1
02984:  MOVLW  01
02986:  MOVLB  E
02988:  IORWF  x46,W
0298A:  MOVWF  28
....................    Ack17_24_Send = (Ack17_24_Send << 1) | AckSend.B17;
0298C:  BCF    FD8.0
0298E:  RLCF   28,W
02990:  MOVWF  x46
02992:  MOVLW  00
02994:  MOVLB  D
02996:  BTFSC  xCB.0
02998:  MOVLW  01
0299A:  MOVLB  E
0299C:  IORWF  x46,W
0299E:  MOVWF  28
....................    
....................    ///////////////////Fault/////////////////////////////////
....................    Input1_8_Send = Input1_8_Send | In.B8;
029A0:  MOVLW  00
029A2:  MOVLB  D
029A4:  BTFSC  xC1.7
029A6:  MOVLW  01
029A8:  IORWF  1E,F
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B7;
029AA:  BCF    FD8.0
029AC:  RLCF   1E,W
029AE:  MOVLB  E
029B0:  MOVWF  x46
029B2:  MOVLW  00
029B4:  MOVLB  D
029B6:  BTFSC  xC1.6
029B8:  MOVLW  01
029BA:  MOVLB  E
029BC:  IORWF  x46,W
029BE:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B6;
029C0:  BCF    FD8.0
029C2:  RLCF   1E,W
029C4:  MOVWF  x46
029C6:  MOVLW  00
029C8:  MOVLB  D
029CA:  BTFSC  xC1.5
029CC:  MOVLW  01
029CE:  MOVLB  E
029D0:  IORWF  x46,W
029D2:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B5;
029D4:  BCF    FD8.0
029D6:  RLCF   1E,W
029D8:  MOVWF  x46
029DA:  MOVLW  00
029DC:  MOVLB  D
029DE:  BTFSC  xC1.4
029E0:  MOVLW  01
029E2:  MOVLB  E
029E4:  IORWF  x46,W
029E6:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B4;
029E8:  BCF    FD8.0
029EA:  RLCF   1E,W
029EC:  MOVWF  x46
029EE:  MOVLW  00
029F0:  MOVLB  D
029F2:  BTFSC  xC1.3
029F4:  MOVLW  01
029F6:  MOVLB  E
029F8:  IORWF  x46,W
029FA:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B3;
029FC:  BCF    FD8.0
029FE:  RLCF   1E,W
02A00:  MOVWF  x46
02A02:  MOVLW  00
02A04:  MOVLB  D
02A06:  BTFSC  xC1.2
02A08:  MOVLW  01
02A0A:  MOVLB  E
02A0C:  IORWF  x46,W
02A0E:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B2;
02A10:  BCF    FD8.0
02A12:  RLCF   1E,W
02A14:  MOVWF  x46
02A16:  MOVLW  00
02A18:  MOVLB  D
02A1A:  BTFSC  xC1.1
02A1C:  MOVLW  01
02A1E:  MOVLB  E
02A20:  IORWF  x46,W
02A22:  MOVWF  1E
....................    Input1_8_Send = (Input1_8_Send << 1) | In.B1;
02A24:  BCF    FD8.0
02A26:  RLCF   1E,W
02A28:  MOVWF  x46
02A2A:  MOVLW  00
02A2C:  MOVLB  D
02A2E:  BTFSC  xC1.0
02A30:  MOVLW  01
02A32:  MOVLB  E
02A34:  IORWF  x46,W
02A36:  MOVWF  1E
....................    
....................    Input9_16_Send = Input9_16_Send | In.B16;
02A38:  MOVLW  00
02A3A:  MOVLB  D
02A3C:  BTFSC  xC2.7
02A3E:  MOVLW  01
02A40:  IORWF  1F,F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B15;
02A42:  BCF    FD8.0
02A44:  RLCF   1F,W
02A46:  MOVLB  E
02A48:  MOVWF  x46
02A4A:  MOVLW  00
02A4C:  MOVLB  D
02A4E:  BTFSC  xC2.6
02A50:  MOVLW  01
02A52:  MOVLB  E
02A54:  IORWF  x46,W
02A56:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B14;
02A58:  BCF    FD8.0
02A5A:  RLCF   1F,W
02A5C:  MOVWF  x46
02A5E:  MOVLW  00
02A60:  MOVLB  D
02A62:  BTFSC  xC2.5
02A64:  MOVLW  01
02A66:  MOVLB  E
02A68:  IORWF  x46,W
02A6A:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B13;
02A6C:  BCF    FD8.0
02A6E:  RLCF   1F,W
02A70:  MOVWF  x46
02A72:  MOVLW  00
02A74:  MOVLB  D
02A76:  BTFSC  xC2.4
02A78:  MOVLW  01
02A7A:  MOVLB  E
02A7C:  IORWF  x46,W
02A7E:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B12;
02A80:  BCF    FD8.0
02A82:  RLCF   1F,W
02A84:  MOVWF  x46
02A86:  MOVLW  00
02A88:  MOVLB  D
02A8A:  BTFSC  xC2.3
02A8C:  MOVLW  01
02A8E:  MOVLB  E
02A90:  IORWF  x46,W
02A92:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B11;
02A94:  BCF    FD8.0
02A96:  RLCF   1F,W
02A98:  MOVWF  x46
02A9A:  MOVLW  00
02A9C:  MOVLB  D
02A9E:  BTFSC  xC2.2
02AA0:  MOVLW  01
02AA2:  MOVLB  E
02AA4:  IORWF  x46,W
02AA6:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B10;
02AA8:  BCF    FD8.0
02AAA:  RLCF   1F,W
02AAC:  MOVWF  x46
02AAE:  MOVLW  00
02AB0:  MOVLB  D
02AB2:  BTFSC  xC2.1
02AB4:  MOVLW  01
02AB6:  MOVLB  E
02AB8:  IORWF  x46,W
02ABA:  MOVWF  1F
....................    Input9_16_Send = (Input9_16_Send << 1) | In.B9;
02ABC:  BCF    FD8.0
02ABE:  RLCF   1F,W
02AC0:  MOVWF  x46
02AC2:  MOVLW  00
02AC4:  MOVLB  D
02AC6:  BTFSC  xC2.0
02AC8:  MOVLW  01
02ACA:  MOVLB  E
02ACC:  IORWF  x46,W
02ACE:  MOVWF  1F
....................    
....................    Input17_24_Send = Input17_24_Send | In.B24;
02AD0:  MOVLW  00
02AD2:  MOVLB  D
02AD4:  BTFSC  xC3.7
02AD6:  MOVLW  01
02AD8:  IORWF  20,F
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B23;
02ADA:  BCF    FD8.0
02ADC:  RLCF   20,W
02ADE:  MOVLB  E
02AE0:  MOVWF  x46
02AE2:  MOVLW  00
02AE4:  MOVLB  D
02AE6:  BTFSC  xC3.6
02AE8:  MOVLW  01
02AEA:  MOVLB  E
02AEC:  IORWF  x46,W
02AEE:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B22;
02AF0:  BCF    FD8.0
02AF2:  RLCF   20,W
02AF4:  MOVWF  x46
02AF6:  MOVLW  00
02AF8:  MOVLB  D
02AFA:  BTFSC  xC3.5
02AFC:  MOVLW  01
02AFE:  MOVLB  E
02B00:  IORWF  x46,W
02B02:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B21;
02B04:  BCF    FD8.0
02B06:  RLCF   20,W
02B08:  MOVWF  x46
02B0A:  MOVLW  00
02B0C:  MOVLB  D
02B0E:  BTFSC  xC3.4
02B10:  MOVLW  01
02B12:  MOVLB  E
02B14:  IORWF  x46,W
02B16:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B20;
02B18:  BCF    FD8.0
02B1A:  RLCF   20,W
02B1C:  MOVWF  x46
02B1E:  MOVLW  00
02B20:  MOVLB  D
02B22:  BTFSC  xC3.3
02B24:  MOVLW  01
02B26:  MOVLB  E
02B28:  IORWF  x46,W
02B2A:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B19;
02B2C:  BCF    FD8.0
02B2E:  RLCF   20,W
02B30:  MOVWF  x46
02B32:  MOVLW  00
02B34:  MOVLB  D
02B36:  BTFSC  xC3.2
02B38:  MOVLW  01
02B3A:  MOVLB  E
02B3C:  IORWF  x46,W
02B3E:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B18;
02B40:  BCF    FD8.0
02B42:  RLCF   20,W
02B44:  MOVWF  x46
02B46:  MOVLW  00
02B48:  MOVLB  D
02B4A:  BTFSC  xC3.1
02B4C:  MOVLW  01
02B4E:  MOVLB  E
02B50:  IORWF  x46,W
02B52:  MOVWF  20
....................    Input17_24_Send = (Input17_24_Send << 1) | In.B17;
02B54:  BCF    FD8.0
02B56:  RLCF   20,W
02B58:  MOVWF  x46
02B5A:  MOVLW  00
02B5C:  MOVLB  D
02B5E:  BTFSC  xC3.0
02B60:  MOVLW  01
02B62:  MOVLB  E
02B64:  IORWF  x46,W
02B66:  MOVWF  20
02B68:  MOVLB  0
02B6A:  GOTO   45D2 (RETURN)
.................... }
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void StoreReleaseFault()
*
02C00:  MOVLB  E
02C02:  CLRF   x46
.................... {
....................    Signed int8 i=0;
....................    for(i=0;i<30;i++)
02C04:  CLRF   x46
02C06:  BTFSC  x46.7
02C08:  BRA    2C10
02C0A:  MOVF   x46,W
02C0C:  SUBLW  1D
02C0E:  BNC   2C56
....................    {
....................       FaultAgo[i] = FaultNow[i];
02C10:  CLRF   03
02C12:  MOVF   x46,W
02C14:  MOVWF  00
02C16:  BTFSC  FE8.7
02C18:  DECF   03,F
02C1A:  MOVWF  x47
02C1C:  MOVFF  03,E48
02C20:  CLRF   03
02C22:  MOVF   x46,W
02C24:  MOVWF  00
02C26:  BTFSC  FE8.7
02C28:  DECF   03,F
02C2A:  MOVWF  x49
02C2C:  MOVLW  0D
02C2E:  MOVWF  x4B
02C30:  MOVLW  DC
02C32:  MOVWF  x4A
02C34:  MOVLB  0
02C36:  RCALL  25BA
02C38:  MOVFF  E47,E49
02C3C:  MOVLB  E
02C3E:  CLRF   x4A
02C40:  BTFSC  01.0
02C42:  INCF   x4A,F
02C44:  MOVLW  0D
02C46:  MOVWF  x4C
02C48:  MOVLW  D9
02C4A:  MOVWF  x4B
02C4C:  MOVLB  0
02C4E:  RCALL  2578
02C50:  MOVLB  E
02C52:  INCF   x46,F
02C54:  BRA    2C06
....................    }
02C56:  MOVLB  0
02C58:  GOTO   34A8 (RETURN)
.................... }
.................... 
.................... 
.................... void CRC(unsigned char *puchMsg , unsigned char usDataLen)
.................... { 
....................    unsigned char uIndex ;                   /* fill index into CRC lookup table */
....................    unsigned char i ;
.................... 
....................    CRC_Hi = 0xFF ;                      /* high byte of CRC initialized */
*
02656:  MOVLB  6
02658:  SETF   x65
....................    CRC_Lo = 0xFF ;                      /* low byte of CRC initialized */
0265A:  SETF   x64
.................... 
....................    for(i = 0;i < usDataLen;i++)
0265C:  MOVLB  E
0265E:  CLRF   x4A
02660:  MOVF   x48,W
02662:  SUBWF  x4A,W
02664:  BC    26A8
....................    {
....................       restart_wdt();
02666:  CLRWDT
....................       uIndex = CRC_Hi ^ (unsigned char) puchMsg[i] ;
02668:  MOVF   x4A,W
0266A:  ADDWF  x46,W
0266C:  MOVWF  FE9
0266E:  MOVLW  00
02670:  ADDWFC x47,W
02672:  MOVWF  FEA
02674:  MOVF   FEF,W
02676:  MOVLB  6
02678:  XORWF  x65,W
0267A:  MOVLB  E
0267C:  MOVWF  x49
....................       CRC_Hi = CRC_Lo ^ CRC_Table_Hi[uIndex] ;
0267E:  CLRF   03
02680:  MOVF   x49,W
02682:  MOVLB  0
02684:  CALL   00BA
02688:  MOVWF  01
0268A:  MOVLB  6
0268C:  MOVF   x64,W
0268E:  XORWF  01,W
02690:  MOVWF  x65
....................       CRC_Lo = CRC_Table_Lo[uIndex] ;
02692:  CLRF   03
02694:  MOVLB  E
02696:  MOVF   x49,W
02698:  MOVLB  0
0269A:  CALL   01CA
0269E:  MOVFF  FE8,664
026A2:  MOVLB  E
026A4:  INCF   x4A,F
026A6:  BRA    2660
....................    }
026A8:  MOVLB  0
026AA:  RETURN 0
.................... }
.................... 
.................... /********************************6B595 Driver*********************************/
.................... /*
.................... void Driver595()
.................... {
....................    Signed int8 j=0;
....................    int8 data_out ;
.................... 
....................    restart_wdt();
....................    
....................     data_out = (~Input19_20);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input11_18);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input9_10);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................     
....................     data_out = (~Input1_8);
....................     for(j=7;j>=0;j--)
....................     {
....................      //output_bit(EXP_OUT_DO,bit_test(Output595[i],j));
....................      output_bit(EXP_OUT_DO,bit_test(data_out,j));
....................      output_high(EXP_OUT_CLOCK);
....................      delay_us(1);
....................      output_low(EXP_OUT_CLOCK);
....................     }
....................  // } 
....................    output_high(EXP_OUT_ENABLE);
....................    delay_us(1);
....................    output_low(EXP_OUT_ENABLE);
.................... }
.................... */
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void checkCommand(void)
.................... {
....................    restart_wdt();
*
002DA:  CLRWDT
.................... 
....................    //if(sequence == end_sq && Address == SBUF)     //check Address
....................    if(sequence == end_sq )     //check Address
002DC:  MOVF   58,W
002DE:  SUBWF  x61,W
002E0:  BNZ   0308
....................    {
....................      RxD_DataLen = 0x00 ;
002E2:  CLRF   x63
....................      RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 1   Address
002E4:  MOVLW  64
002E6:  ADDWF  x63,W
002E8:  MOVWF  FE9
002EA:  MOVLW  02
002EC:  MOVWF  FEA
002EE:  BTFSC  FD8.0
002F0:  INCF   FEA,F
002F2:  MOVFF  2E,FEF
....................      restart_wdt();
002F6:  CLRWDT
....................      RxD_DataLen ++ ;
002F8:  INCF   x63,F
....................      sequence = addr_sq;
002FA:  MOVLW  10
002FC:  MOVWF  x61
....................      T_timeout = 0x14; //200ms
002FE:  MOVLW  14
00300:  MOVLB  A
00302:  MOVWF  x6E
....................    }
00304:  BRA    057C
00306:  MOVLB  0
....................    else if(sequence == addr_sq)
00308:  MOVF   x61,W
0030A:  SUBLW  10
0030C:  BNZ   03C6
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 2   Function Code
0030E:  MOVLW  64
00310:  ADDWF  x63,W
00312:  MOVWF  FE9
00314:  MOVLW  02
00316:  MOVWF  FEA
00318:  BTFSC  FD8.0
0031A:  INCF   FEA,F
0031C:  MOVFF  2E,FEF
....................       restart_wdt();
00320:  CLRWDT
....................       RxD_DataLen ++ ;
00322:  INCF   x63,F
.................... 
....................        if(RxD_Buff[RxD_DataLen - 1] < 0x17)   //Function Code Must be less than 0x20
00324:  MOVLW  01
00326:  SUBWF  x63,W
00328:  ADDLW  64
0032A:  MOVWF  FE9
0032C:  MOVLW  02
0032E:  MOVWF  FEA
00330:  BTFSC  FD8.0
00332:  INCF   FEA,F
00334:  MOVF   FEF,W
00336:  SUBLW  16
00338:  BNC   0348
....................        {
....................            sequence = code_sq;
0033A:  MOVFF  59,61
....................            T_timeout = 0x14; //200ms
0033E:  MOVLW  14
00340:  MOVLB  A
00342:  MOVWF  x6E
....................        }
00344:  BRA    03C2
00346:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x20)   /////Read Setting//////
00348:  MOVLW  01
0034A:  SUBWF  x63,W
0034C:  ADDLW  64
0034E:  MOVWF  FE9
00350:  MOVLW  02
00352:  MOVWF  FEA
00354:  BTFSC  FD8.0
00356:  INCF   FEA,F
00358:  MOVF   FEF,W
0035A:  SUBLW  20
0035C:  BNZ   036C
....................        {
....................           sequence = ubyte_lo_sq;
0035E:  MOVFF  5C,61
....................           T_timeout = 0x14; //200ms
00362:  MOVLW  14
00364:  MOVLB  A
00366:  MOVWF  x6E
....................        }
00368:  BRA    03C2
0036A:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x21)   /////Write setting/////
0036C:  MOVLW  01
0036E:  SUBWF  x63,W
00370:  ADDLW  64
00372:  MOVWF  FE9
00374:  MOVLW  02
00376:  MOVWF  FEA
00378:  BTFSC  FD8.0
0037A:  INCF   FEA,F
0037C:  MOVF   FEF,W
0037E:  SUBLW  21
00380:  BNZ   0390
....................        {
....................           sequence = byte_count_sq ;
00382:  MOVFF  5F,61
....................           T_timeout = 0x14; //200ms
00386:  MOVLW  14
00388:  MOVLB  A
0038A:  MOVWF  x6E
....................        }
0038C:  BRA    03C2
0038E:  MOVLB  0
....................        else if(RxD_Buff[RxD_DataLen - 1] == 0x22)   /////SMS setting/////
00390:  MOVLW  01
00392:  SUBWF  x63,W
00394:  ADDLW  64
00396:  MOVWF  FE9
00398:  MOVLW  02
0039A:  MOVWF  FEA
0039C:  BTFSC  FD8.0
0039E:  INCF   FEA,F
003A0:  MOVF   FEF,W
003A2:  SUBLW  22
003A4:  BNZ   03B4
....................        {
....................           sequence = second_numofdata ;
003A6:  MOVFF  5E,61
....................           T_timeout = 0x14; //200ms
003AA:  MOVLW  14
003AC:  MOVLB  A
003AE:  MOVWF  x6E
....................        }
003B0:  BRA    03C2
003B2:  MOVLB  0
....................        else                           // Invalid Code
....................        {
....................           RxD_DataLen = 0x00;
003B4:  CLRF   x63
....................           sequence = end_sq;
003B6:  MOVFF  58,61
....................           T_timeout = 0x00;
003BA:  MOVLB  A
003BC:  CLRF   x6E
....................           output_bit(P485ctrl,0);
003BE:  BCF    F8A.3
003C0:  BCF    F93.3
....................        }
....................    }
003C2:  BRA    057C
003C4:  MOVLB  0
....................    else if(sequence == second_numofdata)
003C6:  MOVF   5E,W
003C8:  SUBWF  x61,W
003CA:  BNZ   03F0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
003CC:  MOVLW  64
003CE:  ADDWF  x63,W
003D0:  MOVWF  FE9
003D2:  MOVLW  02
003D4:  MOVWF  FEA
003D6:  BTFSC  FD8.0
003D8:  INCF   FEA,F
003DA:  MOVFF  2E,FEF
....................       restart_wdt();
003DE:  CLRWDT
....................       RxD_DataLen ++ ;
003E0:  INCF   x63,F
....................       sequence = byte_count_sq;
003E2:  MOVFF  5F,61
....................       T_timeout = 0x14; //200ms
003E6:  MOVLW  14
003E8:  MOVLB  A
003EA:  MOVWF  x6E
....................    }
003EC:  BRA    057C
003EE:  MOVLB  0
....................    else if(sequence == byte_count_sq)
003F0:  MOVF   5F,W
003F2:  SUBWF  x61,W
003F4:  BNZ   044C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Data Byte Count
003F6:  MOVLW  64
003F8:  ADDWF  x63,W
003FA:  MOVWF  FE9
003FC:  MOVLW  02
003FE:  MOVWF  FEA
00400:  BTFSC  FD8.0
00402:  INCF   FEA,F
00404:  MOVFF  2E,FEF
....................       restart_wdt();
00408:  CLRWDT
....................       RxD_DataLen ++ ;
0040A:  INCF   x63,F
....................       if(RxD_Buff[1] == 0x22)   /////SMS setting/////
0040C:  MOVLB  2
0040E:  MOVF   x65,W
00410:  SUBLW  22
00412:  BNZ   0426
....................       {
....................          index = (RxD_Buff[2] * 0x64) + RxD_Buff[3];
00414:  MOVF   x66,W
00416:  MULLW  64
00418:  MOVF   FF3,W
0041A:  ADDWF  x67,W
0041C:  MOVLB  A
0041E:  MOVWF  x6F
00420:  CLRF   x70
....................       }
00422:  BRA    0440
00424:  MOVLB  2
....................       else{
....................          index = RxD_Buff[RxD_DataLen - 1] ;    //Data Byte Count
00426:  MOVLW  01
00428:  MOVLB  0
0042A:  SUBWF  x63,W
0042C:  ADDLW  64
0042E:  MOVWF  FE9
00430:  MOVLW  02
00432:  MOVWF  FEA
00434:  BTFSC  FD8.0
00436:  INCF   FEA,F
00438:  MOVLB  A
0043A:  CLRF   x70
0043C:  MOVFF  FEF,A6F
....................       }
....................       T_timeout = 0x14; //200ms
00440:  MOVLW  14
00442:  MOVWF  x6E
....................       sequence = data_sq ;
00444:  MOVFF  60,61
....................    }
00448:  BRA    057C
0044A:  MOVLB  0
....................    else if(sequence == data_sq)
0044C:  MOVF   x60,W
0044E:  SUBWF  x61,W
00450:  BNZ   0486
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //
00452:  MOVLW  64
00454:  ADDWF  x63,W
00456:  MOVWF  FE9
00458:  MOVLW  02
0045A:  MOVWF  FEA
0045C:  BTFSC  FD8.0
0045E:  INCF   FEA,F
00460:  MOVFF  2E,FEF
....................       restart_wdt();
00464:  CLRWDT
....................       RxD_DataLen ++ ;
00466:  INCF   x63,F
....................       index -- ;                     //Data Byte Count
00468:  MOVLB  A
0046A:  MOVF   x6F,W
0046C:  BTFSC  FD8.2
0046E:  DECF   x70,F
00470:  DECF   x6F,F
....................       if(index == 0x00)
00472:  MOVF   x6F,F
00474:  BNZ   047E
00476:  MOVF   x70,F
00478:  BNZ   047E
....................       {
....................          sequence = ubyte_lo_sq ;      //next CRC
0047A:  MOVFF  5C,61
....................       }
....................       T_timeout = 0x14; //200ms
0047E:  MOVLW  14
00480:  MOVWF  x6E
....................    }
00482:  BRA    057C
00484:  MOVLB  0
....................    else if(sequence == code_sq)
00486:  MOVF   59,W
00488:  SUBWF  x61,W
0048A:  BNZ   04B0
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;      //Byte 3   Start address High Byte
0048C:  MOVLW  64
0048E:  ADDWF  x63,W
00490:  MOVWF  FE9
00492:  MOVLW  02
00494:  MOVWF  FEA
00496:  BTFSC  FD8.0
00498:  INCF   FEA,F
0049A:  MOVFF  2E,FEF
....................       restart_wdt();
0049E:  CLRWDT
....................       RxD_DataLen ++ ;
004A0:  INCF   x63,F
....................       sequence = start_addr_hi_sq;
004A2:  MOVFF  5A,61
....................       T_timeout = 0x14; //200ms
004A6:  MOVLW  14
004A8:  MOVLB  A
004AA:  MOVWF  x6E
.................... 
....................    }
004AC:  BRA    057C
004AE:  MOVLB  0
....................    else if(sequence == start_addr_hi_sq)
004B0:  MOVF   5A,W
004B2:  SUBWF  x61,W
004B4:  BNZ   04DA
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 4   Start address Low Byte
004B6:  MOVLW  64
004B8:  ADDWF  x63,W
004BA:  MOVWF  FE9
004BC:  MOVLW  02
004BE:  MOVWF  FEA
004C0:  BTFSC  FD8.0
004C2:  INCF   FEA,F
004C4:  MOVFF  2E,FEF
....................       restart_wdt();
004C8:  CLRWDT
....................       RxD_DataLen ++ ;
004CA:  INCF   x63,F
....................       sequence = start_addr_lo_sq;
004CC:  MOVFF  5B,61
....................       T_timeout = 0x14; //200ms
004D0:  MOVLW  14
004D2:  MOVLB  A
004D4:  MOVWF  x6E
....................    }
004D6:  BRA    057C
004D8:  MOVLB  0
....................    else if(sequence == start_addr_lo_sq)
004DA:  MOVF   5B,W
004DC:  SUBWF  x61,W
004DE:  BNZ   0504
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 5   No. of point/force data High Byte
004E0:  MOVLW  64
004E2:  ADDWF  x63,W
004E4:  MOVWF  FE9
004E6:  MOVLW  02
004E8:  MOVWF  FEA
004EA:  BTFSC  FD8.0
004EC:  INCF   FEA,F
004EE:  MOVFF  2E,FEF
....................       restart_wdt();
004F2:  CLRWDT
....................       RxD_DataLen ++ ;
004F4:  INCF   x63,F
....................       sequence = ubyte_hi_sq;
004F6:  MOVLW  15
004F8:  MOVWF  x61
....................       T_timeout = 0x14; //200ms
004FA:  MOVLW  14
004FC:  MOVLB  A
004FE:  MOVWF  x6E
....................    }
00500:  BRA    057C
00502:  MOVLB  0
....................    else if(sequence == ubyte_hi_sq)
00504:  MOVF   x61,W
00506:  SUBLW  15
00508:  BNZ   052E
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 6   No. of point/force data Low Byte
0050A:  MOVLW  64
0050C:  ADDWF  x63,W
0050E:  MOVWF  FE9
00510:  MOVLW  02
00512:  MOVWF  FEA
00514:  BTFSC  FD8.0
00516:  INCF   FEA,F
00518:  MOVFF  2E,FEF
....................       restart_wdt();
0051C:  CLRWDT
....................       RxD_DataLen ++ ;
0051E:  INCF   x63,F
....................       sequence = ubyte_lo_sq;
00520:  MOVFF  5C,61
....................       T_timeout = 0x14; //200ms
00524:  MOVLW  14
00526:  MOVLB  A
00528:  MOVWF  x6E
....................    }
0052A:  BRA    057C
0052C:  MOVLB  0
....................    else if(sequence == ubyte_lo_sq)
0052E:  MOVF   5C,W
00530:  SUBWF  x61,W
00532:  BNZ   0558
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 7   CRC High Byte
00534:  MOVLW  64
00536:  ADDWF  x63,W
00538:  MOVWF  FE9
0053A:  MOVLW  02
0053C:  MOVWF  FEA
0053E:  BTFSC  FD8.0
00540:  INCF   FEA,F
00542:  MOVFF  2E,FEF
....................       restart_wdt();
00546:  CLRWDT
....................       RxD_DataLen ++ ;
00548:  INCF   x63,F
....................       sequence = crc_hi_sq;
0054A:  MOVFF  5D,61
....................       T_timeout = 0x14; //200ms
0054E:  MOVLW  14
00550:  MOVLB  A
00552:  MOVWF  x6E
....................    }
00554:  BRA    057C
00556:  MOVLB  0
....................    else if(sequence == crc_hi_sq)
00558:  MOVF   5D,W
0055A:  SUBWF  x61,W
0055C:  BNZ   057C
....................    {
....................       RxD_Buff[RxD_DataLen] = SBUF ;         //Byte 8   CRC Low Byte
0055E:  MOVLW  64
00560:  ADDWF  x63,W
00562:  MOVWF  FE9
00564:  MOVLW  02
00566:  MOVWF  FEA
00568:  BTFSC  FD8.0
0056A:  INCF   FEA,F
0056C:  MOVFF  2E,FEF
....................       restart_wdt();
00570:  CLRWDT
....................       sequence = end_sq;
00572:  MOVFF  58,61
....................       T_timeout = 0x00;
00576:  MOVLB  A
00578:  CLRF   x6E
....................       //T_timeout = 0x14; //200ms
....................       recieve_completed = 1 ;            //Recieve completed then translate
0057A:  BSF    30.5
0057C:  MOVLB  0
....................    }
0057E:  GOTO   058C (RETURN)
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////// MODBUS FUNCTION //////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... void Modbus_Function(void)
.................... {
....................    restart_wdt();
*
03D56:  CLRWDT
....................    CRC(RxD_Buff , RxD_DataLen - 1);
03D58:  MOVLW  01
03D5A:  SUBWF  x63,W
03D5C:  MOVLB  E
03D5E:  MOVWF  x45
03D60:  MOVLW  02
03D62:  MOVWF  x47
03D64:  MOVLW  64
03D66:  MOVWF  x46
03D68:  MOVFF  E45,E48
03D6C:  MOVLB  0
03D6E:  CALL   2656
.................... 
....................    if(CRC_Hi == RxD_Buff[RxD_DataLen - 1] && CRC_Lo == RxD_Buff[RxD_DataLen])
03D72:  MOVLW  01
03D74:  SUBWF  x63,W
03D76:  ADDLW  64
03D78:  MOVWF  FE9
03D7A:  MOVLW  02
03D7C:  MOVWF  FEA
03D7E:  BTFSC  FD8.0
03D80:  INCF   FEA,F
03D82:  MOVF   FEF,W
03D84:  MOVLB  6
03D86:  SUBWF  x65,W
03D88:  BTFSS  FD8.2
03D8A:  GOTO   6BA4
03D8E:  MOVLW  64
03D90:  MOVLB  0
03D92:  ADDWF  x63,W
03D94:  MOVWF  FE9
03D96:  MOVLW  02
03D98:  MOVWF  FEA
03D9A:  BTFSC  FD8.0
03D9C:  INCF   FEA,F
03D9E:  MOVF   FEF,W
03DA0:  MOVLB  6
03DA2:  SUBWF  x64,W
03DA4:  BTFSS  FD8.2
03DA6:  GOTO   6BA4
....................    {
....................    
....................       if((RxD_Buff[0] == 0xAA)&&(RxD_Buff[1] == 0x20)) //Read Setting//0xAA Is Any Address 
03DAA:  MOVLB  2
03DAC:  MOVF   x64,W
03DAE:  SUBLW  AA
03DB0:  BTFSS  FD8.2
03DB2:  BRA    40DE
03DB4:  MOVF   x65,W
03DB6:  SUBLW  20
03DB8:  BTFSS  FD8.2
03DBA:  BRA    40DE
....................       {
....................          TxD_Buff[0] = Address ;         //Address
03DBC:  MOVFF  62,64
....................          TxD_Buff[1] = 0x20 ;            //function code
03DC0:  MOVLW  20
03DC2:  MOVLB  0
03DC4:  MOVWF  x65
....................          TxD_Buff[2] = 0x1C ;           //28 Byte  //Data Byte count
03DC6:  MOVLW  1C
03DC8:  MOVWF  x66
....................          TxD_Buff[3] = InputType1_8 ;    //1
03DCA:  MOVFF  35,67
....................          TxD_Buff[4] = InputType9_16 ;  //2
03DCE:  MOVFF  36,68
....................          TxD_Buff[5] = InputType17_24 ;//3
03DD2:  MOVFF  37,69
....................          
....................          TxD_Buff[6] = FaultType1_8 ;  //4
03DD6:  MOVFF  38,6A
....................          TxD_Buff[7] = FaultType9_16 ; //5
03DDA:  MOVFF  39,6B
....................          TxD_Buff[8] = FaultType17_24 ;   //6
03DDE:  MOVFF  3A,6C
....................         
....................          TxD_Buff[9] = OutputType1_8 ; //7
03DE2:  MOVFF  3B,6D
....................          TxD_Buff[10] = OutputType9_16 ;  //8
03DE6:  MOVFF  3C,6E
....................          TxD_Buff[11] = OutputType17_24 ; //9
03DEA:  MOVFF  3D,6F
....................         
....................          TxD_Buff[12] = OutputBoth1_8 ;   //10
03DEE:  MOVFF  3E,70
....................          TxD_Buff[13] = OutputBoth9_16 ;  //11
03DF2:  MOVFF  3F,71
....................          TxD_Buff[14] = OutputBoth17_24 ; //12
03DF6:  MOVFF  40,72
....................         
....................          TxD_Buff[15] = Alarm_Indicator1_8 ; //13
03DFA:  MOVFF  41,73
....................          TxD_Buff[16] = Alarm_Indicator9_16 ;   //14
03DFE:  MOVFF  42,74
....................          TxD_Buff[17] = Alarm_Indicator17_24 ;  //15
03E02:  MOVFF  43,75
....................         
....................           TxD_Buff[18] = read_eeprom(0x10);//Red1_8;    //16
03E06:  MOVFF  FF2,E45
03E0A:  BCF    FF2.7
03E0C:  CLRF   FAA
03E0E:  MOVLW  10
03E10:  MOVWF  FA9
03E12:  BCF    FA6.6
03E14:  BCF    FA6.7
03E16:  BSF    FA6.0
03E18:  MOVF   FA8,W
03E1A:  MOVLB  E
03E1C:  BTFSC  x45.7
03E1E:  BSF    FF2.7
03E20:  MOVLB  0
03E22:  MOVWF  x76
....................           TxD_Buff[19] = read_eeprom(0x11);//Red9_10;      //17
03E24:  MOVFF  FF2,E45
03E28:  BCF    FF2.7
03E2A:  CLRF   FAA
03E2C:  MOVLW  11
03E2E:  MOVWF  FA9
03E30:  BCF    FA6.6
03E32:  BCF    FA6.7
03E34:  BSF    FA6.0
03E36:  MOVF   FA8,W
03E38:  MOVLB  E
03E3A:  BTFSC  x45.7
03E3C:  BSF    FF2.7
03E3E:  MOVLB  0
03E40:  MOVWF  x77
....................           TxD_Buff[20] = read_eeprom(0x12);//Red11_18;     //18
03E42:  MOVFF  FF2,E45
03E46:  BCF    FF2.7
03E48:  CLRF   FAA
03E4A:  MOVLW  12
03E4C:  MOVWF  FA9
03E4E:  BCF    FA6.6
03E50:  BCF    FA6.7
03E52:  BSF    FA6.0
03E54:  MOVF   FA8,W
03E56:  MOVLB  E
03E58:  BTFSC  x45.7
03E5A:  BSF    FF2.7
03E5C:  MOVLB  0
03E5E:  MOVWF  x78
....................           TxD_Buff[21] = read_eeprom(0x13);//Red19_20;     //19
03E60:  MOVFF  FF2,E45
03E64:  BCF    FF2.7
03E66:  CLRF   FAA
03E68:  MOVLW  13
03E6A:  MOVWF  FA9
03E6C:  BCF    FA6.6
03E6E:  BCF    FA6.7
03E70:  BSF    FA6.0
03E72:  MOVF   FA8,W
03E74:  MOVLB  E
03E76:  BTFSC  x45.7
03E78:  BSF    FF2.7
03E7A:  MOVLB  0
03E7C:  MOVWF  x79
....................           
....................           TxD_Buff[22] = read_eeprom(0x14);//Green1_8;     //20
03E7E:  MOVFF  FF2,E45
03E82:  BCF    FF2.7
03E84:  CLRF   FAA
03E86:  MOVLW  14
03E88:  MOVWF  FA9
03E8A:  BCF    FA6.6
03E8C:  BCF    FA6.7
03E8E:  BSF    FA6.0
03E90:  MOVF   FA8,W
03E92:  MOVLB  E
03E94:  BTFSC  x45.7
03E96:  BSF    FF2.7
03E98:  MOVLB  0
03E9A:  MOVWF  x7A
....................           TxD_Buff[23] = read_eeprom(0x15);//Green9_10;    //21
03E9C:  MOVFF  FF2,E45
03EA0:  BCF    FF2.7
03EA2:  CLRF   FAA
03EA4:  MOVLW  15
03EA6:  MOVWF  FA9
03EA8:  BCF    FA6.6
03EAA:  BCF    FA6.7
03EAC:  BSF    FA6.0
03EAE:  MOVF   FA8,W
03EB0:  MOVLB  E
03EB2:  BTFSC  x45.7
03EB4:  BSF    FF2.7
03EB6:  MOVLB  0
03EB8:  MOVWF  x7B
....................           TxD_Buff[24] = read_eeprom(0x16);//Green11_18;      //22
03EBA:  MOVFF  FF2,E45
03EBE:  BCF    FF2.7
03EC0:  CLRF   FAA
03EC2:  MOVLW  16
03EC4:  MOVWF  FA9
03EC6:  BCF    FA6.6
03EC8:  BCF    FA6.7
03ECA:  BSF    FA6.0
03ECC:  MOVF   FA8,W
03ECE:  MOVLB  E
03ED0:  BTFSC  x45.7
03ED2:  BSF    FF2.7
03ED4:  MOVLB  0
03ED6:  MOVWF  x7C
....................           TxD_Buff[25] = read_eeprom(0x17);//Green19_20;      //23
03ED8:  MOVFF  FF2,E45
03EDC:  BCF    FF2.7
03EDE:  CLRF   FAA
03EE0:  MOVLW  17
03EE2:  MOVWF  FA9
03EE4:  BCF    FA6.6
03EE6:  BCF    FA6.7
03EE8:  BSF    FA6.0
03EEA:  MOVF   FA8,W
03EEC:  MOVLB  E
03EEE:  BTFSC  x45.7
03EF0:  BSF    FF2.7
03EF2:  MOVLB  0
03EF4:  MOVWF  x7D
....................        
....................        
....................          TxD_Buff[26] = AutoAck ;            //24
03EF6:  MOVFF  53,7E
....................          TxD_Buff[27] = AutoAckTime ;        //25
03EFA:  MOVFF  54,7F
....................          TxD_Buff[28] = FlashingRate ;       //26
03EFE:  MOVFF  55,80
....................          TxD_Buff[29] = NoOfPoint ;          //27
03F02:  MOVFF  56,81
....................          TxD_Buff[30] = FaultDelayTime[0] ;    //28
03F06:  MOVFF  E09,82
....................          TxD_Buff[31] = Address ;            //29
03F0A:  MOVFF  62,83
.................... 
.................... 
....................          TxD_Buff[32] = FaultDelayTime[1] ;
03F0E:  MOVFF  E0B,84
....................          TxD_Buff[33] = FaultDelayTime[2] ;
03F12:  MOVFF  E0D,85
....................          TxD_Buff[34] = FaultDelayTime[3] ;
03F16:  MOVFF  E0F,86
....................          TxD_Buff[35] = FaultDelayTime[4] ;
03F1A:  MOVFF  E11,87
....................          TxD_Buff[36] = FaultDelayTime[5] ;
03F1E:  MOVFF  E13,88
....................          TxD_Buff[37] = FaultDelayTime[6] ;
03F22:  MOVFF  E15,89
....................          TxD_Buff[38] = FaultDelayTime[7] ;
03F26:  MOVFF  E17,8A
....................          TxD_Buff[39] = FaultDelayTime[8] ;
03F2A:  MOVFF  E19,8B
....................          TxD_Buff[40] = FaultDelayTime[9] ;
03F2E:  MOVFF  E1B,8C
....................          TxD_Buff[41] = FaultDelayTime[10] ;
03F32:  MOVFF  E1D,8D
....................          TxD_Buff[42] = FaultDelayTime[11] ;
03F36:  MOVFF  E1F,8E
....................          TxD_Buff[43] = FaultDelayTime[12] ;
03F3A:  MOVFF  E21,8F
....................          TxD_Buff[44] = FaultDelayTime[13] ;
03F3E:  MOVFF  E23,90
....................          TxD_Buff[45] = FaultDelayTime[14] ;
03F42:  MOVFF  E25,91
....................          TxD_Buff[46] = FaultDelayTime[15] ;
03F46:  MOVFF  E27,92
....................          TxD_Buff[47] = FaultDelayTime[16] ;
03F4A:  MOVFF  E29,93
....................          TxD_Buff[48] = FaultDelayTime[17] ;
03F4E:  MOVFF  E2B,94
....................          TxD_Buff[49] = FaultDelayTime[18] ;
03F52:  MOVFF  E2D,95
....................          TxD_Buff[50] = FaultDelayTime[19] ;
03F56:  MOVFF  E2F,96
....................          TxD_Buff[51] = FaultDelayTime[20] ;
03F5A:  MOVFF  E31,97
....................          
....................          
....................          CRC(TxD_Buff,52)   ; //Cal CRC 49 byte
03F5E:  MOVLB  E
03F60:  CLRF   x47
03F62:  MOVLW  64
03F64:  MOVWF  x46
03F66:  MOVLW  34
03F68:  MOVWF  x48
03F6A:  MOVLB  0
03F6C:  CALL   2656
.................... 
....................          TxD_Buff[52] = CRC_Hi ;
03F70:  MOVFF  665,98
....................          TxD_Buff[53] = CRC_Lo ;
03F74:  MOVFF  664,99
.................... 
....................          output_bit(P485ctrl,1);
03F78:  BSF    F8A.3
03F7A:  BCF    F93.3
....................          delay_ms(10);
03F7C:  MOVLW  0A
03F7E:  MOVLB  E
03F80:  MOVWF  x45
03F82:  MOVLB  0
03F84:  CALL   0A24
.................... 
....................          putc(Txd_Buff[0]);
03F88:  MOVF   x64,W
03F8A:  CALL   26AC
....................          putc(Txd_Buff[1]);
03F8E:  MOVF   x65,W
03F90:  CALL   26AC
....................          putc(Txd_Buff[2]);
03F94:  MOVF   x66,W
03F96:  CALL   26AC
....................          putc(Txd_Buff[3]);
03F9A:  MOVF   x67,W
03F9C:  CALL   26AC
....................          putc(Txd_Buff[4]);
03FA0:  MOVF   x68,W
03FA2:  CALL   26AC
....................          putc(Txd_Buff[5]);
03FA6:  MOVF   x69,W
03FA8:  CALL   26AC
....................          putc(Txd_Buff[6]);
03FAC:  MOVF   x6A,W
03FAE:  CALL   26AC
....................          putc(Txd_Buff[7]);
03FB2:  MOVF   x6B,W
03FB4:  CALL   26AC
....................          putc(Txd_Buff[8]);
03FB8:  MOVF   x6C,W
03FBA:  CALL   26AC
....................          putc(Txd_Buff[9]);
03FBE:  MOVF   x6D,W
03FC0:  CALL   26AC
....................          putc(Txd_Buff[10]);
03FC4:  MOVF   x6E,W
03FC6:  CALL   26AC
....................          putc(Txd_Buff[11]);
03FCA:  MOVF   x6F,W
03FCC:  CALL   26AC
....................          putc(Txd_Buff[12]);
03FD0:  MOVF   x70,W
03FD2:  CALL   26AC
....................          putc(Txd_Buff[13]);
03FD6:  MOVF   x71,W
03FD8:  CALL   26AC
....................          putc(Txd_Buff[14]);
03FDC:  MOVF   x72,W
03FDE:  CALL   26AC
....................          putc(Txd_Buff[15]);
03FE2:  MOVF   x73,W
03FE4:  CALL   26AC
....................          putc(Txd_Buff[16]);
03FE8:  MOVF   x74,W
03FEA:  CALL   26AC
....................          putc(Txd_Buff[17]);
03FEE:  MOVF   x75,W
03FF0:  CALL   26AC
....................          putc(Txd_Buff[18]);
03FF4:  MOVF   x76,W
03FF6:  CALL   26AC
....................          putc(Txd_Buff[19]);
03FFA:  MOVF   x77,W
03FFC:  CALL   26AC
....................          putc(Txd_Buff[20]);
04000:  MOVF   x78,W
04002:  CALL   26AC
....................          putc(Txd_Buff[21]);
04006:  MOVF   x79,W
04008:  CALL   26AC
....................          putc(Txd_Buff[22]);
0400C:  MOVF   x7A,W
0400E:  CALL   26AC
....................          putc(Txd_Buff[23]);
04012:  MOVF   x7B,W
04014:  CALL   26AC
....................          putc(Txd_Buff[24]);
04018:  MOVF   x7C,W
0401A:  CALL   26AC
....................          putc(Txd_Buff[25]);
0401E:  MOVF   x7D,W
04020:  CALL   26AC
....................          putc(Txd_Buff[26]);
04024:  MOVF   x7E,W
04026:  CALL   26AC
....................          putc(Txd_Buff[27]);
0402A:  MOVF   x7F,W
0402C:  CALL   26AC
....................          putc(Txd_Buff[28]);
04030:  MOVF   x80,W
04032:  CALL   26AC
....................          putc(Txd_Buff[29]);
04036:  MOVF   x81,W
04038:  CALL   26AC
....................          putc(Txd_Buff[30]);
0403C:  MOVF   x82,W
0403E:  CALL   26AC
....................          putc(Txd_Buff[31]);
04042:  MOVF   x83,W
04044:  CALL   26AC
....................          
....................          putc(Txd_Buff[32]);
04048:  MOVF   x84,W
0404A:  CALL   26AC
....................          putc(Txd_Buff[33]);
0404E:  MOVF   x85,W
04050:  CALL   26AC
....................          putc(Txd_Buff[34]);
04054:  MOVF   x86,W
04056:  CALL   26AC
....................          putc(Txd_Buff[35]);
0405A:  MOVF   x87,W
0405C:  CALL   26AC
....................          putc(Txd_Buff[36]);
04060:  MOVF   x88,W
04062:  CALL   26AC
....................          putc(Txd_Buff[37]);
04066:  MOVF   x89,W
04068:  CALL   26AC
....................          putc(Txd_Buff[38]);
0406C:  MOVF   x8A,W
0406E:  CALL   26AC
....................          putc(Txd_Buff[39]);
04072:  MOVF   x8B,W
04074:  CALL   26AC
....................          putc(Txd_Buff[40]);
04078:  MOVF   x8C,W
0407A:  CALL   26AC
....................          putc(Txd_Buff[41]);
0407E:  MOVF   x8D,W
04080:  CALL   26AC
....................          
....................          putc(Txd_Buff[42]);
04084:  MOVF   x8E,W
04086:  CALL   26AC
....................          putc(Txd_Buff[43]);
0408A:  MOVF   x8F,W
0408C:  CALL   26AC
....................          putc(Txd_Buff[44]);
04090:  MOVF   x90,W
04092:  CALL   26AC
....................          putc(Txd_Buff[45]);
04096:  MOVF   x91,W
04098:  CALL   26AC
....................          putc(Txd_Buff[46]);
0409C:  MOVF   x92,W
0409E:  CALL   26AC
....................          putc(Txd_Buff[47]);
040A2:  MOVF   x93,W
040A4:  CALL   26AC
....................          putc(Txd_Buff[48]);
040A8:  MOVF   x94,W
040AA:  CALL   26AC
....................          putc(Txd_Buff[49]);
040AE:  MOVF   x95,W
040B0:  CALL   26AC
....................          putc(Txd_Buff[50]);
040B4:  MOVF   x96,W
040B6:  CALL   26AC
....................          putc(Txd_Buff[51]);
040BA:  MOVF   x97,W
040BC:  CALL   26AC
....................          
....................          putc(Txd_Buff[52]);
040C0:  MOVF   x98,W
040C2:  CALL   26AC
....................          putc(Txd_Buff[53]);
040C6:  MOVF   x99,W
040C8:  CALL   26AC
....................        
....................          delay_ms(3);
040CC:  MOVLW  03
040CE:  MOVLB  E
040D0:  MOVWF  x45
040D2:  MOVLB  0
040D4:  CALL   0A24
....................          output_bit(P485ctrl,0);
040D8:  BCF    F8A.3
040DA:  BCF    F93.3
040DC:  MOVLB  2
....................          
....................       }
....................      
....................    ///////////////////////////////////////////////////////////////
....................    if(RxD_Buff[0] == Address)
040DE:  MOVLB  0
040E0:  MOVF   x62,W
040E2:  MOVLB  2
040E4:  SUBWF  x64,W
040E6:  BTFSS  FD8.2
040E8:  GOTO   6B9A
....................    {
....................          
....................       if(RxD_Buff[1] == 0x01)///////////// READ COIL /////////////////////
040EC:  DECFSZ x65,W
040EE:  BRA    45C4
....................          {
....................             //Do Read Coil
....................             Start_Address = RxD_Buff[2] ;
040F0:  MOVLB  6
040F2:  CLRF   x69
040F4:  MOVFF  266,668
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Start Address 16 bit
040F8:  MOVFF  668,669
040FC:  MOVLB  E
040FE:  CLRF   x45
04100:  MOVF   x45,W
04102:  MOVLB  2
04104:  IORWF  x67,W
04106:  MOVLB  6
04108:  MOVWF  x68
0410A:  MOVLB  6
....................             No_PointCount = RxD_Buff[4] ;
0410C:  CLRF   x6B
0410E:  MOVFF  268,66A
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;      //No. of Point 16 bit
04112:  MOVFF  66A,66B
04116:  MOVLB  E
04118:  CLRF   x45
0411A:  MOVF   x45,W
0411C:  MOVLB  2
0411E:  IORWF  x69,W
04120:  MOVLB  6
04122:  MOVWF  x6A
04124:  MOVLB  6
.................... 
....................             if(Start_Address < 0x10 && (Start_Address + No_PointCount) <= 0x14)  //Valid point 0-20
04126:  MOVF   x69,F
04128:  BTFSS  FD8.2
0412A:  BRA    4552
0412C:  MOVF   x68,W
0412E:  SUBLW  0F
04130:  BTFSS  FD8.0
04132:  BRA    4552
04134:  MOVF   x6A,W
04136:  ADDWF  x68,W
04138:  MOVLB  E
0413A:  MOVWF  x45
0413C:  MOVLB  6
0413E:  MOVF   x6B,W
04140:  ADDWFC x69,W
04142:  MOVLB  E
04144:  MOVWF  x46
04146:  MOVF   x46,F
04148:  BTFSC  FD8.2
0414A:  BRA    4150
0414C:  MOVLB  6
0414E:  BRA    4552
04150:  MOVF   x45,W
04152:  SUBLW  14
04154:  BTFSC  FD8.0
04156:  BRA    415C
04158:  MOVLB  6
0415A:  BRA    4552
....................             {
....................                if(No_PointCount < 9) Data_ByteCount = 0x01;
0415C:  MOVLB  6
0415E:  MOVF   x6B,F
04160:  BNZ   416E
04162:  MOVF   x6A,W
04164:  SUBLW  08
04166:  BNC   416E
04168:  MOVLW  01
0416A:  MOVWF  x6C
0416C:  BRA    4192
....................                else if(No_PointCount < 17) Data_ByteCount = 0x02 ;
0416E:  MOVF   x6B,F
04170:  BNZ   417E
04172:  MOVF   x6A,W
04174:  SUBLW  10
04176:  BNC   417E
04178:  MOVLW  02
0417A:  MOVWF  x6C
0417C:  BRA    4192
....................                else if(No_PointCount < 25) Data_ByteCount = 0x03 ;
0417E:  MOVF   x6B,F
04180:  BNZ   418E
04182:  MOVF   x6A,W
04184:  SUBLW  18
04186:  BNC   418E
04188:  MOVLW  03
0418A:  MOVWF  x6C
0418C:  BRA    4192
....................                else   Data_ByteCount = 0x01 ; //----Jack
0418E:  MOVLW  01
04190:  MOVWF  x6C
.................... 
....................                if(Data_ByteCount == 0x01)
04192:  DECFSZ x6C,W
04194:  BRA    42DA
....................                {
.................... 
....................                   if(Start_Address < 0x09)
04196:  MOVF   x69,F
04198:  BNZ   41B4
0419A:  MOVF   x68,W
0419C:  SUBLW  08
0419E:  BNC   41B4
....................                   {
....................                      //Data_Buff[0] = ~output[0] >> Start_Address ;
....................                      //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                      //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                       Data_Buff[0] = Input1_8 >> Start_Address ;
041A0:  MOVFF  44,66D
041A4:  MOVF   x68,W
041A6:  MOVWF  01
041A8:  BZ    41B2
041AA:  BCF    FD8.0
041AC:  RRCF   x6D,F
041AE:  DECFSZ 01,F
041B0:  BRA    41AA
....................                       //DataTemp = Input9_16 << (0x08 - Start_Address) ;//JJ
....................                       //Data_Buff[0] = (Input1_8 >> Start_Address) | DataTemp;   //Low Byte//JJ
....................                   }
041B2:  BRA    41E8
....................                   else if(Start_Address > 0x08 && Start_Address < 0x10)
041B4:  MOVF   x69,F
041B6:  BNZ   41BE
041B8:  MOVF   x68,W
041BA:  SUBLW  08
041BC:  BC    41E8
041BE:  MOVF   x69,F
041C0:  BNZ   41E8
041C2:  MOVF   x68,W
041C4:  SUBLW  0F
041C6:  BNC   41E8
....................                   {
....................                      //Data_Buff[0] = ~output[1] >> (Start_Address - 0x08) ;
....................                      Data_Buff[0] = Input9_16 >> (Start_Address - 0x08) ;
041C8:  MOVLW  08
041CA:  SUBWF  x68,W
041CC:  MOVWF  00
041CE:  MOVLW  00
041D0:  SUBWFB x69,W
041D2:  MOVWF  03
041D4:  MOVFF  00,01
041D8:  MOVFF  48,66D
041DC:  MOVF   01,F
041DE:  BZ    41E8
041E0:  BCF    FD8.0
041E2:  RRCF   x6D,F
041E4:  DECFSZ 01,F
041E6:  BRA    41E0
....................                   }
.................... 
.................... 
....................                   if(No_PointCount == 0x08)
041E8:  MOVF   x6A,W
041EA:  SUBLW  08
041EC:  BNZ   41F4
041EE:  MOVF   x6B,F
041F0:  BNZ   41F4
....................                   {
....................                      Data_Buff[0] = Data_Buff[0] & 0xFF ; //8 Point High Byte
....................                   }
041F2:  BRA    425E
....................                   else if(No_PointCount == 0x07)
041F4:  MOVF   x6A,W
041F6:  SUBLW  07
041F8:  BNZ   4202
041FA:  MOVF   x6B,F
041FC:  BNZ   4202
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x7F ; //7 Point High Byte
041FE:  BCF    x6D.7
....................                   }
04200:  BRA    425E
....................                   else if(No_PointCount == 0x06)
04202:  MOVF   x6A,W
04204:  SUBLW  06
04206:  BNZ   4212
04208:  MOVF   x6B,F
0420A:  BNZ   4212
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x3F ; //6 Point High Byte
0420C:  MOVLW  3F
0420E:  ANDWF  x6D,F
....................                   }
04210:  BRA    425E
....................                   else if(No_PointCount == 0x05)
04212:  MOVF   x6A,W
04214:  SUBLW  05
04216:  BNZ   4222
04218:  MOVF   x6B,F
0421A:  BNZ   4222
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x1F ; //5 Point High Byte
0421C:  MOVLW  1F
0421E:  ANDWF  x6D,F
....................                   }
04220:  BRA    425E
....................                   else if(No_PointCount == 0x04)
04222:  MOVF   x6A,W
04224:  SUBLW  04
04226:  BNZ   4232
04228:  MOVF   x6B,F
0422A:  BNZ   4232
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x0F ; //4 Point High Byte
0422C:  MOVLW  0F
0422E:  ANDWF  x6D,F
....................                   }
04230:  BRA    425E
....................                   else if(No_PointCount == 0x03)
04232:  MOVF   x6A,W
04234:  SUBLW  03
04236:  BNZ   4242
04238:  MOVF   x6B,F
0423A:  BNZ   4242
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x07 ; //3 Point High Byte
0423C:  MOVLW  07
0423E:  ANDWF  x6D,F
....................                   }
04240:  BRA    425E
....................                   else if(No_PointCount == 0x02)
04242:  MOVF   x6A,W
04244:  SUBLW  02
04246:  BNZ   4252
04248:  MOVF   x6B,F
0424A:  BNZ   4252
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x03 ; //2 Point High Byte
0424C:  MOVLW  03
0424E:  ANDWF  x6D,F
....................                   }
04250:  BRA    425E
....................                   else if(No_PointCount == 0x01)
04252:  DECFSZ x6A,W
04254:  BRA    425E
04256:  MOVF   x6B,F
04258:  BNZ   425E
....................                   {
....................                      Data_Buff[0] =    Data_Buff[0] & 0x01 ; //1 Point High Byte
0425A:  MOVLW  01
0425C:  ANDWF  x6D,F
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
0425E:  MOVFF  62,64
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
04262:  MOVLW  01
04264:  MOVLB  0
04266:  MOVWF  x65
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
04268:  MOVFF  66C,66
....................                   TxD_Buff[3] = Data_Buff[0] ;   //Data
0426C:  MOVFF  66D,67
.................... 
....................                   CRC(TxD_Buff,4)   ;            //Cal CRC 5 Byte
04270:  MOVLB  E
04272:  CLRF   x47
04274:  MOVLW  64
04276:  MOVWF  x46
04278:  MOVLW  04
0427A:  MOVWF  x48
0427C:  MOVLB  0
0427E:  CALL   2656
.................... 
....................                   TxD_Buff[4] = CRC_Hi ;
04282:  MOVFF  665,68
....................                   TxD_Buff[5] = CRC_Lo ;
04286:  MOVFF  664,69
.................... 
....................                   //TxD_DataLen = 0x06 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
0428A:  BSF    F8A.3
0428C:  BCF    F93.3
....................                   restart_wdt();
0428E:  CLRWDT
....................                   delay_ms(4);
04290:  MOVLW  04
04292:  MOVLB  E
04294:  MOVWF  x45
04296:  MOVLB  0
04298:  CALL   0A24
....................                   restart_wdt();
0429C:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
0429E:  MOVF   x64,W
042A0:  CALL   26AC
....................                   putc(TxD_Buff[1]) ;               //Function Code
042A4:  MOVF   x65,W
042A6:  CALL   26AC
....................                   putc(TxD_Buff[2]) ;               //Byte Count
042AA:  MOVF   x66,W
042AC:  CALL   26AC
....................                   putc(TxD_Buff[3]) ;
042B0:  MOVF   x67,W
042B2:  CALL   26AC
....................                   putc(TxD_Buff[4]) ;
042B6:  MOVF   x68,W
042B8:  CALL   26AC
....................                   putc(TxD_Buff[5]) ;
042BC:  MOVF   x69,W
042BE:  CALL   26AC
....................                   //putc(TxD_Buff[6]) ;
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
....................                
....................                   restart_wdt();
042C2:  CLRWDT
....................                   delay_ms(3);
042C4:  MOVLW  03
042C6:  MOVLB  E
042C8:  MOVWF  x45
042CA:  MOVLB  0
042CC:  CALL   0A24
....................                   restart_wdt();
042D0:  CLRWDT
....................                   output_bit(P485ctrl,0);
042D2:  BCF    F8A.3
042D4:  BCF    F93.3
....................               
....................                }
042D6:  BRA    454E
042D8:  MOVLB  6
....................                else if(Data_ByteCount == 0x02)
042DA:  MOVF   x6C,W
042DC:  SUBLW  02
042DE:  BTFSS  FD8.2
042E0:  BRA    44A2
....................                {
....................                   //Data_Buff[1] = ~output[1] >> Start_Address ;
....................                   //DataTemp = ~output[1] << (0x08 - Start_Address) ;
....................                   //Data_Buff[0] = (~output[0] >> Start_Address) | DataTemp;   //Low Byte
....................                   
....................                   //Data_Buff[1] = Output9_16 >> Start_Address ;//jj
....................                   //DataTemp = Output9_16 << (0x08 - Start_Address) ;//jj
....................                   //Data_Buff[0] = (Output1_8 >> Start_Address) | DataTemp;   //Low Byte//jj
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
042E2:  MOVFF  44,66D
042E6:  MOVF   x68,W
042E8:  MOVWF  01
042EA:  BZ    42F4
042EC:  BCF    FD8.0
042EE:  RRCF   x6D,F
042F0:  DECFSZ 01,F
042F2:  BRA    42EC
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
042F4:  MOVFF  48,66E
.................... 
.................... 
....................                   if((No_PointCount - 0x07) == 0x08)
042F8:  MOVLW  07
042FA:  SUBWF  x6A,W
042FC:  MOVLB  E
042FE:  MOVWF  x45
04300:  MOVLW  00
04302:  MOVLB  6
04304:  SUBWFB x6B,W
04306:  MOVLB  E
04308:  MOVWF  x46
0430A:  MOVF   x45,W
0430C:  SUBLW  08
0430E:  BNZ   4316
04310:  MOVF   x46,F
04312:  BNZ   4316
....................                   {
....................                      Data_Buff[1] = Data_Buff[1] & 0xFF ; //16 Point High Byte
....................                   }
04314:  BRA    441C
....................                   else if((No_PointCount - 0x07) == 0x07)
04316:  MOVLW  07
04318:  MOVLB  6
0431A:  SUBWF  x6A,W
0431C:  MOVLB  E
0431E:  MOVWF  x45
04320:  MOVLW  00
04322:  MOVLB  6
04324:  SUBWFB x6B,W
04326:  MOVLB  E
04328:  MOVWF  x46
0432A:  MOVF   x45,W
0432C:  SUBLW  07
0432E:  BNZ   433A
04330:  MOVF   x46,F
04332:  BNZ   433A
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x7F ; //15 Point High Byte
04334:  MOVLB  6
04336:  BCF    x6E.7
....................                   }
04338:  BRA    441A
....................                   else if((No_PointCount - 0x07) == 0x06)
0433A:  MOVLW  07
0433C:  MOVLB  6
0433E:  SUBWF  x6A,W
04340:  MOVLB  E
04342:  MOVWF  x45
04344:  MOVLW  00
04346:  MOVLB  6
04348:  SUBWFB x6B,W
0434A:  MOVLB  E
0434C:  MOVWF  x46
0434E:  MOVF   x45,W
04350:  SUBLW  06
04352:  BNZ   4360
04354:  MOVF   x46,F
04356:  BNZ   4360
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x3F ; //14 Point High Byte
04358:  MOVLW  3F
0435A:  MOVLB  6
0435C:  ANDWF  x6E,F
....................                   }
0435E:  BRA    441A
....................                   else if((No_PointCount - 0x07) == 0x05)
04360:  MOVLW  07
04362:  MOVLB  6
04364:  SUBWF  x6A,W
04366:  MOVLB  E
04368:  MOVWF  x45
0436A:  MOVLW  00
0436C:  MOVLB  6
0436E:  SUBWFB x6B,W
04370:  MOVLB  E
04372:  MOVWF  x46
04374:  MOVF   x45,W
04376:  SUBLW  05
04378:  BNZ   4386
0437A:  MOVF   x46,F
0437C:  BNZ   4386
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x1F ; //13 Point High Byte
0437E:  MOVLW  1F
04380:  MOVLB  6
04382:  ANDWF  x6E,F
....................                   }
04384:  BRA    441A
....................                   else if((No_PointCount - 0x07) == 0x04)
04386:  MOVLW  07
04388:  MOVLB  6
0438A:  SUBWF  x6A,W
0438C:  MOVLB  E
0438E:  MOVWF  x45
04390:  MOVLW  00
04392:  MOVLB  6
04394:  SUBWFB x6B,W
04396:  MOVLB  E
04398:  MOVWF  x46
0439A:  MOVF   x45,W
0439C:  SUBLW  04
0439E:  BNZ   43AC
043A0:  MOVF   x46,F
043A2:  BNZ   43AC
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x0F ; //12 Point High Byte
043A4:  MOVLW  0F
043A6:  MOVLB  6
043A8:  ANDWF  x6E,F
....................                   }
043AA:  BRA    441A
....................                   else if((No_PointCount - 0x07) == 0x03)
043AC:  MOVLW  07
043AE:  MOVLB  6
043B0:  SUBWF  x6A,W
043B2:  MOVLB  E
043B4:  MOVWF  x45
043B6:  MOVLW  00
043B8:  MOVLB  6
043BA:  SUBWFB x6B,W
043BC:  MOVLB  E
043BE:  MOVWF  x46
043C0:  MOVF   x45,W
043C2:  SUBLW  03
043C4:  BNZ   43D2
043C6:  MOVF   x46,F
043C8:  BNZ   43D2
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x07 ; //11 Point High Byte
043CA:  MOVLW  07
043CC:  MOVLB  6
043CE:  ANDWF  x6E,F
....................                   }
043D0:  BRA    441A
....................                   else if((No_PointCount - 0x07) == 0x02)
043D2:  MOVLW  07
043D4:  MOVLB  6
043D6:  SUBWF  x6A,W
043D8:  MOVLB  E
043DA:  MOVWF  x45
043DC:  MOVLW  00
043DE:  MOVLB  6
043E0:  SUBWFB x6B,W
043E2:  MOVLB  E
043E4:  MOVWF  x46
043E6:  MOVF   x45,W
043E8:  SUBLW  02
043EA:  BNZ   43F8
043EC:  MOVF   x46,F
043EE:  BNZ   43F8
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x03 ; //10 Point High Byte
043F0:  MOVLW  03
043F2:  MOVLB  6
043F4:  ANDWF  x6E,F
....................                   }
043F6:  BRA    441A
....................                   else if((No_PointCount - 0x07) == 0x01)
043F8:  MOVLW  07
043FA:  MOVLB  6
043FC:  SUBWF  x6A,W
043FE:  MOVLB  E
04400:  MOVWF  x45
04402:  MOVLW  00
04404:  MOVLB  6
04406:  SUBWFB x6B,W
04408:  MOVLB  E
0440A:  MOVWF  x46
0440C:  DECFSZ x45,W
0440E:  BRA    441C
04410:  MOVF   x46,F
04412:  BNZ   441C
....................                   {
....................                      Data_Buff[1] =    Data_Buff[1] & 0x01 ; //9 Point High Byte
04414:  MOVLW  01
04416:  MOVLB  6
04418:  ANDWF  x6E,F
0441A:  MOVLB  E
....................                   }
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
0441C:  MOVFF  62,64
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
04420:  MOVLW  01
04422:  MOVLB  0
04424:  MOVWF  x65
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
04426:  MOVFF  66C,66
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
0442A:  MOVFF  66D,67
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
0442E:  MOVFF  66E,68
.................... 
....................                   CRC(TxD_Buff,5)   ;            //Cal CRC 5 Byte
04432:  MOVLB  E
04434:  CLRF   x47
04436:  MOVLW  64
04438:  MOVWF  x46
0443A:  MOVLW  05
0443C:  MOVWF  x48
0443E:  MOVLB  0
04440:  CALL   2656
.................... 
....................                   TxD_Buff[5] = CRC_Hi ;
04444:  MOVFF  665,69
....................                   TxD_Buff[6] = CRC_Lo ;
04448:  MOVFF  664,6A
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
0444C:  BSF    F8A.3
0444E:  BCF    F93.3
....................                   restart_wdt();
04450:  CLRWDT
....................                   delay_ms(4);
04452:  MOVLW  04
04454:  MOVLB  E
04456:  MOVWF  x45
04458:  MOVLB  0
0445A:  CALL   0A24
....................                   restart_wdt();
0445E:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04460:  MOVF   x64,W
04462:  CALL   26AC
....................                   putc(TxD_Buff[1]) ;               //Function Code
04466:  MOVF   x65,W
04468:  CALL   26AC
....................                   putc(TxD_Buff[2]) ;               //Byte Count
0446C:  MOVF   x66,W
0446E:  CALL   26AC
....................                   putc(TxD_Buff[3]) ;
04472:  MOVF   x67,W
04474:  CALL   26AC
....................                   putc(TxD_Buff[4]) ;
04478:  MOVF   x68,W
0447A:  CALL   26AC
....................                   putc(TxD_Buff[5]) ;
0447E:  MOVF   x69,W
04480:  CALL   26AC
....................                   putc(TxD_Buff[6]) ;
04484:  MOVF   x6A,W
04486:  CALL   26AC
....................                   //putc(TxD_Buff[7]) ;
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
0448A:  CLRWDT
....................                   delay_ms(3);
0448C:  MOVLW  03
0448E:  MOVLB  E
04490:  MOVWF  x45
04492:  MOVLB  0
04494:  CALL   0A24
....................                   restart_wdt();
04498:  CLRWDT
....................                   output_bit(P485ctrl,0);
0449A:  BCF    F8A.3
0449C:  BCF    F93.3
....................               
....................                }
0449E:  BRA    454E
044A0:  MOVLB  6
....................                else if(Data_ByteCount == 0x03)
044A2:  MOVF   x6C,W
044A4:  SUBLW  03
044A6:  BNZ   4550
....................                {
....................                   Data_Buff[0] = Input1_8 >> Start_Address ;
044A8:  MOVFF  44,66D
044AC:  MOVF   x68,W
044AE:  MOVWF  01
044B0:  BZ    44BA
044B2:  BCF    FD8.0
044B4:  RRCF   x6D,F
044B6:  DECFSZ 01,F
044B8:  BRA    44B2
....................                   Data_Buff[1] = Input9_16 ;// >> Start_Address ;
044BA:  MOVFF  48,66E
....................                   Data_Buff[2] = Input17_24 ;// >> Start_Address ;
044BE:  MOVFF  49,66F
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
044C2:  MOVFF  62,64
....................                   TxD_Buff[1] = 0x01 ;         //Function Code
044C6:  MOVLW  01
044C8:  MOVLB  0
044CA:  MOVWF  x65
....................                   TxD_Buff[2] = Data_ByteCount ;   //Byte Count
044CC:  MOVFF  66C,66
....................                   TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
044D0:  MOVFF  66D,67
....................                   TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
044D4:  MOVFF  66E,68
....................                   TxD_Buff[5] = Data_Buff[2] ;  
044D8:  MOVFF  66F,69
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 5 Byte
044DC:  MOVLB  E
044DE:  CLRF   x47
044E0:  MOVLW  64
044E2:  MOVWF  x46
044E4:  MOVLW  06
044E6:  MOVWF  x48
044E8:  MOVLB  0
044EA:  CALL   2656
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
044EE:  MOVFF  665,6A
....................                   TxD_Buff[7] = CRC_Lo ;
044F2:  MOVFF  664,6B
.................... 
....................                   //TxD_DataLen = 0x07 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
044F6:  BSF    F8A.3
044F8:  BCF    F93.3
....................                   restart_wdt();
044FA:  CLRWDT
....................                   delay_ms(4);
044FC:  MOVLW  04
044FE:  MOVLB  E
04500:  MOVWF  x45
04502:  MOVLB  0
04504:  CALL   0A24
....................                   restart_wdt();
04508:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
0450A:  MOVF   x64,W
0450C:  CALL   26AC
....................                   putc(TxD_Buff[1]) ;               //Function Code
04510:  MOVF   x65,W
04512:  CALL   26AC
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04516:  MOVF   x66,W
04518:  CALL   26AC
....................                   putc(TxD_Buff[3]) ;
0451C:  MOVF   x67,W
0451E:  CALL   26AC
....................                   putc(TxD_Buff[4]) ;
04522:  MOVF   x68,W
04524:  CALL   26AC
....................                   putc(TxD_Buff[5]) ;
04528:  MOVF   x69,W
0452A:  CALL   26AC
....................                   putc(TxD_Buff[6]) ;
0452E:  MOVF   x6A,W
04530:  CALL   26AC
....................                   putc(TxD_Buff[7]) ;
04534:  MOVF   x6B,W
04536:  CALL   26AC
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
0453A:  CLRWDT
....................                   delay_ms(3);
0453C:  MOVLW  03
0453E:  MOVLB  E
04540:  MOVWF  x45
04542:  MOVLB  0
04544:  CALL   0A24
....................                   restart_wdt();
04548:  CLRWDT
....................                   output_bit(P485ctrl,0);
0454A:  BCF    F8A.3
0454C:  BCF    F93.3
0454E:  MOVLB  6
....................                
....................                }
....................             }
04550:  BRA    45C2
....................             else
....................             {
....................                //invalid parameter
....................                TxD_Buff[0] = Address ;         //Address
04552:  MOVFF  62,64
....................                TxD_Buff[1] = 0x81 ;         //Function Code
04556:  MOVLW  81
04558:  MOVLB  0
0455A:  MOVWF  x65
....................                TxD_Buff[2] = 0x02 ;         //illegal data address
0455C:  MOVLW  02
0455E:  MOVWF  x66
.................... 
....................                CRC(TxD_Buff,3)   ;            //Cal CRC 3 Byte
04560:  MOVLB  E
04562:  CLRF   x47
04564:  MOVLW  64
04566:  MOVWF  x46
04568:  MOVLW  03
0456A:  MOVWF  x48
0456C:  MOVLB  0
0456E:  CALL   2656
.................... 
....................                TxD_Buff[3] = CRC_Hi ;
04572:  MOVFF  665,67
....................                TxD_Buff[4] = CRC_Lo ;
04576:  MOVFF  664,68
.................... 
....................                //TxD_DataLen = 0x05 ;
....................                //rs485_ctrl = 1;
....................                //restart_wdt();
....................                //dmsec(4);
....................                //restart_wdt();
....................                //send = 1;
....................                //TI=1;
....................                output_bit(P485ctrl,1);
0457A:  BSF    F8A.3
0457C:  BCF    F93.3
....................                restart_wdt();
0457E:  CLRWDT
....................                delay_ms(4);
04580:  MOVLW  04
04582:  MOVLB  E
04584:  MOVWF  x45
04586:  MOVLB  0
04588:  CALL   0A24
....................                restart_wdt();
0458C:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
0458E:  MOVF   x64,W
04590:  CALL   26AC
....................                putc(TxD_Buff[1]) ;               //Function Code
04594:  MOVF   x65,W
04596:  CALL   26AC
....................                putc(TxD_Buff[2]) ;               //Byte Count
0459A:  MOVF   x66,W
0459C:  CALL   26AC
....................                putc(TxD_Buff[3]) ;
045A0:  MOVF   x67,W
045A2:  CALL   26AC
....................                putc(TxD_Buff[4]) ;
045A6:  MOVF   x68,W
045A8:  CALL   26AC
.................... 
....................                restart_wdt();
045AC:  CLRWDT
....................                delay_ms(3);
045AE:  MOVLW  03
045B0:  MOVLB  E
045B2:  MOVWF  x45
045B4:  MOVLB  0
045B6:  CALL   0A24
....................                restart_wdt();
045BA:  CLRWDT
....................                output_bit(P485ctrl,0);
045BC:  BCF    F8A.3
045BE:  BCF    F93.3
045C0:  MOVLB  6
045C2:  MOVLB  2
....................                
....................             }
....................          }
.................... ////\*/
....................                  /*-------------jack----*/
....................  
....................       if(RxD_Buff[1] == 0x07)///////////// READ COIL (esp code)////////////
045C4:  MOVF   x65,W
045C6:  SUBLW  07
045C8:  BTFSS  FD8.2
045CA:  BRA    472E
....................       {
....................          Alarmtosend();
045CC:  MOVLB  0
045CE:  GOTO   26B4
....................          
....................          disable_interrupts(INT_TIMER2);
045D2:  BCF    F9D.1
....................          //----------------------------------jj----------------------------//
....................          
....................             Data_Buff[0] = Input1_8_Send ; //>> Start_Address ;
045D4:  MOVFF  1E,66D
....................             Data_Buff[1] = Input9_16_Send ;// >> Start_Address ;
045D8:  MOVFF  1F,66E
....................             Data_Buff[2] = Input17_24_Send ;// >> Start_Address ;
045DC:  MOVFF  20,66F
....................             Data_Buff[3] = Input25_32_Send ;
045E0:  MOVFF  21,670
....................             Data_Buff[4] = Input33_40_Send ;
045E4:  MOVFF  22,671
....................             Data_Buff[5] = Input41_48_Send ;
045E8:  MOVFF  23,672
....................             Data_Buff[6] = Input49_56_Send ;
045EC:  MOVFF  24,673
....................             Data_Buff[7] = Input57_64_Send ;
045F0:  MOVFF  25,674
....................            
....................             Data_Buff[8] = Ack1_8_Send ;
045F4:  MOVFF  26,675
....................             Data_Buff[9] = Ack9_16_Send ;
045F8:  MOVFF  27,676
....................             Data_Buff[10] = Ack17_24_Send ;
045FC:  MOVFF  28,677
....................             Data_Buff[11] = Ack25_32_Send ;
04600:  MOVFF  29,678
....................             Data_Buff[12] = Ack33_40_Send ;
04604:  MOVFF  2A,679
....................             Data_Buff[13] = Ack41_48_Send ;
04608:  MOVFF  2B,67A
....................             Data_Buff[14] = Ack49_56_Send ;
0460C:  MOVFF  2C,67B
....................             Data_Buff[15] = Ack57_64_Send ;
04610:  MOVFF  2D,67C
....................    
....................             
....................             
....................             TxD_Buff[0] = Address ;         //Address
04614:  MOVFF  62,64
....................             TxD_Buff[1] = 0x07 ;         //Function Code
04618:  MOVLW  07
0461A:  MOVWF  x65
....................             TxD_Buff[2] = Data_ByteCount=0x10;   //Byte Count
0461C:  MOVLW  10
0461E:  MOVLB  6
04620:  MOVWF  x6C
04622:  MOVFF  66C,66
....................             TxD_Buff[3] = Data_Buff[0] ;      //first byte Data
04626:  MOVFF  66D,67
....................             TxD_Buff[4] = Data_Buff[1] ;      //second byte Data
0462A:  MOVFF  66E,68
....................             TxD_Buff[5] = Data_Buff[2] ;  
0462E:  MOVFF  66F,69
....................             TxD_Buff[6] = Data_Buff[3] ;
04632:  MOVFF  670,6A
....................             TxD_Buff[7] = Data_Buff[4] ;
04636:  MOVFF  671,6B
....................             TxD_Buff[8] = Data_Buff[5] ;
0463A:  MOVFF  672,6C
....................             TxD_Buff[9] = Data_Buff[6] ;
0463E:  MOVFF  673,6D
....................             TxD_Buff[10] = Data_Buff[7] ;
04642:  MOVFF  674,6E
....................               
....................            TxD_Buff[11] = Data_Buff[8] ; //Ack1-8
04646:  MOVFF  675,6F
....................            TxD_Buff[12] = Data_Buff[9] ;
0464A:  MOVFF  676,70
....................            TxD_Buff[13] = Data_Buff[10] ;
0464E:  MOVFF  677,71
....................            TxD_Buff[14] = Data_Buff[11] ;
04652:  MOVFF  678,72
....................            TxD_Buff[15] = Data_Buff[12] ;
04656:  MOVFF  679,73
....................            TxD_Buff[16] = Data_Buff[13] ;
0465A:  MOVFF  67A,74
....................            TxD_Buff[17] = Data_Buff[14] ;
0465E:  MOVFF  67B,75
....................            TxD_Buff[18] = Data_Buff[15] ; //Ack57-64
04662:  MOVFF  67C,76
.................... 
....................            CRC(TxD_Buff,19);            //Cal CRC 5 Byte
04666:  MOVLB  E
04668:  CLRF   x47
0466A:  MOVLW  64
0466C:  MOVWF  x46
0466E:  MOVLW  13
04670:  MOVWF  x48
04672:  MOVLB  0
04674:  CALL   2656
.................... 
....................           TxD_Buff[19] = CRC_Hi ;
04678:  MOVFF  665,77
....................           TxD_Buff[20] = CRC_Lo ;
0467C:  MOVFF  664,78
.................... 
....................         
....................          output_bit(P485ctrl,1);
04680:  BSF    F8A.3
04682:  BCF    F93.3
....................          restart_wdt();
04684:  CLRWDT
....................          delay_ms(4);
04686:  MOVLW  04
04688:  MOVLB  E
0468A:  MOVWF  x45
0468C:  MOVLB  0
0468E:  CALL   0A24
....................          restart_wdt();
04692:  CLRWDT
....................                
....................          putc(TxD_Buff[0]) ;               //Address
04694:  MOVF   x64,W
04696:  CALL   26AC
....................          putc(TxD_Buff[1]) ;               //Function Code
0469A:  MOVF   x65,W
0469C:  CALL   26AC
....................          putc(TxD_Buff[2]) ;               //Byte Count
046A0:  MOVF   x66,W
046A2:  CALL   26AC
....................          putc(TxD_Buff[3]) ;
046A6:  MOVF   x67,W
046A8:  CALL   26AC
....................          putc(TxD_Buff[4]) ;
046AC:  MOVF   x68,W
046AE:  CALL   26AC
....................          putc(TxD_Buff[5]) ;
046B2:  MOVF   x69,W
046B4:  CALL   26AC
....................          putc(TxD_Buff[6]) ;
046B8:  MOVF   x6A,W
046BA:  CALL   26AC
....................          putc(TxD_Buff[7]) ;
046BE:  MOVF   x6B,W
046C0:  CALL   26AC
....................          putc(TxD_Buff[8]) ;
046C4:  MOVF   x6C,W
046C6:  CALL   26AC
....................          putc(TxD_Buff[9]) ;
046CA:  MOVF   x6D,W
046CC:  CALL   26AC
....................          putc(TxD_Buff[10]) ;
046D0:  MOVF   x6E,W
046D2:  CALL   26AC
....................          putc(TxD_Buff[11]) ;
046D6:  MOVF   x6F,W
046D8:  CALL   26AC
....................          putc(TxD_Buff[12]) ;
046DC:  MOVF   x70,W
046DE:  CALL   26AC
....................          putc(TxD_Buff[13]) ;
046E2:  MOVF   x71,W
046E4:  CALL   26AC
....................          putc(TxD_Buff[14]) ;
046E8:  MOVF   x72,W
046EA:  CALL   26AC
....................          putc(TxD_Buff[15]) ;
046EE:  MOVF   x73,W
046F0:  CALL   26AC
....................          putc(TxD_Buff[16]) ;
046F4:  MOVF   x74,W
046F6:  CALL   26AC
....................          putc(TxD_Buff[17]) ;
046FA:  MOVF   x75,W
046FC:  CALL   26AC
....................          putc(TxD_Buff[18]) ;
04700:  MOVF   x76,W
04702:  CALL   26AC
....................          putc(TxD_Buff[19]) ;
04706:  MOVF   x77,W
04708:  CALL   26AC
....................          putc(TxD_Buff[20]) ;
0470C:  MOVF   x78,W
0470E:  CALL   26AC
.................... 
....................          restart_wdt();
04712:  CLRWDT
....................          delay_ms(3);
04714:  MOVLW  03
04716:  MOVLB  E
04718:  MOVWF  x45
0471A:  MOVLB  0
0471C:  CALL   0A24
....................          restart_wdt();
04720:  CLRWDT
....................          output_bit(P485ctrl,0);
04722:  BCF    F8A.3
04724:  BCF    F93.3
....................            
....................         
....................          /////////////////////////////////////////
....................          
....................         enable_interrupts(INT_TIMER2); 
04726:  BSF    F9D.1
....................      
....................        }
04728:  GOTO   6AE8
0472C:  MOVLB  2
....................       /////////////////////////////////////////////////////////////////
.................... 
....................        else if(RxD_Buff[1] == 0x05)///////////// FORCE COIL /////////////////////
0472E:  MOVF   x65,W
04730:  SUBLW  05
04732:  BTFSS  FD8.2
04734:  BRA    4C22
....................          {
....................             //Do Force Coil
....................             Start_Address = RxD_Buff[2] ;
04736:  MOVLB  6
04738:  CLRF   x69
0473A:  MOVFF  266,668
....................             Start_Address = (Start_Address << 8) | RxD_Buff[3] ;   //Coil Address 16 bit
0473E:  MOVFF  668,669
04742:  MOVLB  E
04744:  CLRF   x45
04746:  MOVF   x45,W
04748:  MOVLB  2
0474A:  IORWF  x67,W
0474C:  MOVLB  6
0474E:  MOVWF  x68
04750:  MOVLB  6
....................             No_PointCount = RxD_Buff[4] ;
04752:  CLRF   x6B
04754:  MOVFF  268,66A
....................             No_PointCount = (No_PointCount << 8) | RxD_Buff[5] ;   //Force Data 16 bit FF00 = ON, 00FF = OFF
04758:  MOVFF  66A,66B
0475C:  MOVLB  E
0475E:  CLRF   x45
04760:  MOVF   x45,W
04762:  MOVLB  2
04764:  IORWF  x69,W
04766:  MOVLB  6
04768:  MOVWF  x6A
0476A:  MOVLB  6
.................... 
....................             if(Start_Address == 0x00)   ////// Acknowlegde //////
0476C:  MOVF   x68,F
0476E:  BNZ   480E
04770:  MOVF   x69,F
04772:  BNZ   480E
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
04774:  MOVF   x6A,F
04776:  BNZ   480C
04778:  INCFSZ x6B,W
0477A:  BRA    480C
....................                {
....................                   //Modbus_ACK = 1 ;
....................                   AutoAckFlag = 1;
0477C:  BSF    1A.2
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
0477E:  MOVFF  62,64
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04782:  MOVLW  05
04784:  MOVLB  0
04786:  MOVWF  x65
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04788:  MOVFF  266,66
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0478C:  MOVFF  267,67
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04790:  MOVFF  268,68
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04794:  MOVFF  269,69
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04798:  MOVLB  E
0479A:  CLRF   x47
0479C:  MOVLW  64
0479E:  MOVWF  x46
047A0:  MOVLW  06
047A2:  MOVWF  x48
047A4:  MOVLB  0
047A6:  CALL   2656
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
047AA:  MOVFF  665,6A
....................                   TxD_Buff[7] = CRC_Lo ;
047AE:  MOVFF  664,6B
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................               output_bit(P485ctrl,1);
047B2:  BSF    F8A.3
047B4:  BCF    F93.3
....................                   restart_wdt();
047B6:  CLRWDT
....................                   delay_ms(4);
047B8:  MOVLW  04
047BA:  MOVLB  E
047BC:  MOVWF  x45
047BE:  MOVLB  0
047C0:  CALL   0A24
....................                   restart_wdt();
047C4:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
047C6:  MOVF   x64,W
047C8:  CALL   26AC
....................                   putc(TxD_Buff[1]) ;               //Function Code
047CC:  MOVF   x65,W
047CE:  CALL   26AC
....................                   putc(TxD_Buff[2]) ;               //Byte Count
047D2:  MOVF   x66,W
047D4:  CALL   26AC
....................                   putc(TxD_Buff[3]) ;
047D8:  MOVF   x67,W
047DA:  CALL   26AC
....................                   putc(TxD_Buff[4]) ;
047DE:  MOVF   x68,W
047E0:  CALL   26AC
....................                   putc(TxD_Buff[5]) ;
047E4:  MOVF   x69,W
047E6:  CALL   26AC
....................                   putc(TxD_Buff[6]) ;
047EA:  MOVF   x6A,W
047EC:  CALL   26AC
....................                   putc(TxD_Buff[7]) ;
047F0:  MOVF   x6B,W
047F2:  CALL   26AC
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
047F6:  CLRWDT
....................                   delay_ms(3);
047F8:  MOVLW  03
047FA:  MOVLB  E
047FC:  MOVWF  x45
047FE:  MOVLB  0
04800:  CALL   0A24
....................                   restart_wdt();
04804:  CLRWDT
....................                   output_bit(P485ctrl,0);
04806:  BCF    F8A.3
04808:  BCF    F93.3
0480A:  MOVLB  6
....................               
....................                }
....................             }
0480C:  BRA    4C1C
....................             else if(Start_Address == 0x01)   ///// Reset //////
0480E:  DECFSZ x68,W
04810:  BRA    48B0
04812:  MOVF   x69,F
04814:  BNZ   48B0
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
04816:  MOVF   x6A,F
04818:  BNZ   48AE
0481A:  INCFSZ x6B,W
0481C:  BRA    48AE
....................                {
....................                   //Modbus_RET = 1 ;
....................                   AutoResetFlag = 1;
0481E:  BSF    1A.3
....................                   
....................                   TxD_Buff[0] = Address ;         //Address
04820:  MOVFF  62,64
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04824:  MOVLW  05
04826:  MOVLB  0
04828:  MOVWF  x65
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0482A:  MOVFF  266,66
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
0482E:  MOVFF  267,67
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04832:  MOVFF  268,68
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04836:  MOVFF  269,69
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0483A:  MOVLB  E
0483C:  CLRF   x47
0483E:  MOVLW  64
04840:  MOVWF  x46
04842:  MOVLW  06
04844:  MOVWF  x48
04846:  MOVLB  0
04848:  CALL   2656
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
0484C:  MOVFF  665,6A
....................                   TxD_Buff[7] = CRC_Lo ;
04850:  MOVFF  664,6B
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                  //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................               output_bit(P485ctrl,1);
04854:  BSF    F8A.3
04856:  BCF    F93.3
....................                   restart_wdt();
04858:  CLRWDT
....................                   delay_ms(4);
0485A:  MOVLW  04
0485C:  MOVLB  E
0485E:  MOVWF  x45
04860:  MOVLB  0
04862:  CALL   0A24
....................                   restart_wdt();
04866:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04868:  MOVF   x64,W
0486A:  CALL   26AC
....................                   putc(TxD_Buff[1]) ;               //Function Code
0486E:  MOVF   x65,W
04870:  CALL   26AC
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04874:  MOVF   x66,W
04876:  CALL   26AC
....................                   putc(TxD_Buff[3]) ;
0487A:  MOVF   x67,W
0487C:  CALL   26AC
....................                   putc(TxD_Buff[4]) ;
04880:  MOVF   x68,W
04882:  CALL   26AC
....................                   putc(TxD_Buff[5]) ;
04886:  MOVF   x69,W
04888:  CALL   26AC
....................                   putc(TxD_Buff[6]) ;
0488C:  MOVF   x6A,W
0488E:  CALL   26AC
....................                   putc(TxD_Buff[7]) ;
04892:  MOVF   x6B,W
04894:  CALL   26AC
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04898:  CLRWDT
....................                   delay_ms(3);
0489A:  MOVLW  03
0489C:  MOVLB  E
0489E:  MOVWF  x45
048A0:  MOVLB  0
048A2:  CALL   0A24
....................                   restart_wdt();
048A6:  CLRWDT
....................                   output_bit(P485ctrl,0);
048A8:  BCF    F8A.3
048AA:  BCF    F93.3
048AC:  MOVLB  6
....................               
....................                }
....................             }
048AE:  BRA    4C1C
....................             else if(Start_Address == 0x02)   ///// Test //////
048B0:  MOVF   x68,W
048B2:  SUBLW  02
048B4:  BTFSS  FD8.2
048B6:  BRA    4A02
048B8:  MOVF   x69,F
048BA:  BTFSS  FD8.2
048BC:  BRA    4A02
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
048BE:  MOVF   x6A,F
048C0:  BNZ   4958
048C2:  INCFSZ x6B,W
048C4:  BRA    4958
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   AutoTestFlag = 1;
048C6:  BSF    1A.4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
048C8:  MOVFF  62,64
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
048CC:  MOVLW  05
048CE:  MOVLB  0
048D0:  MOVWF  x65
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
048D2:  MOVFF  266,66
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
048D6:  MOVFF  267,67
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
048DA:  MOVFF  268,68
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
048DE:  MOVFF  269,69
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
048E2:  MOVLB  E
048E4:  CLRF   x47
048E6:  MOVLW  64
048E8:  MOVWF  x46
048EA:  MOVLW  06
048EC:  MOVWF  x48
048EE:  MOVLB  0
048F0:  CALL   2656
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
048F4:  MOVFF  665,6A
....................                   TxD_Buff[7] = CRC_Lo ;
048F8:  MOVFF  664,6B
.................... 
....................                  //TxD_DataLen = 0x08 ;
....................                  //rs485_ctrl = 1;
....................                  //dmsec(4);
....................                  //send = 1;
....................                  //TI=1;
....................                   output_bit(P485ctrl,1);
048FC:  BSF    F8A.3
048FE:  BCF    F93.3
....................                   restart_wdt();
04900:  CLRWDT
....................                   delay_ms(4);
04902:  MOVLW  04
04904:  MOVLB  E
04906:  MOVWF  x45
04908:  MOVLB  0
0490A:  CALL   0A24
....................                   restart_wdt();
0490E:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04910:  MOVF   x64,W
04912:  CALL   26AC
....................                   putc(TxD_Buff[1]) ;               //Function Code
04916:  MOVF   x65,W
04918:  CALL   26AC
....................                   putc(TxD_Buff[2]) ;               //Byte Count
0491C:  MOVF   x66,W
0491E:  CALL   26AC
....................                   putc(TxD_Buff[3]) ;
04922:  MOVF   x67,W
04924:  CALL   26AC
....................                   putc(TxD_Buff[4]) ;
04928:  MOVF   x68,W
0492A:  CALL   26AC
....................                   putc(TxD_Buff[5]) ;
0492E:  MOVF   x69,W
04930:  CALL   26AC
....................                   putc(TxD_Buff[6]) ;
04934:  MOVF   x6A,W
04936:  CALL   26AC
....................                   putc(TxD_Buff[7]) ;
0493A:  MOVF   x6B,W
0493C:  CALL   26AC
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04940:  CLRWDT
....................                   delay_ms(3);
04942:  MOVLW  03
04944:  MOVLB  E
04946:  MOVWF  x45
04948:  MOVLB  0
0494A:  CALL   0A24
....................                   restart_wdt();
0494E:  CLRWDT
....................                   output_bit(P485ctrl,0);
04950:  BCF    F8A.3
04952:  BCF    F93.3
....................              
....................                }
04954:  BRA    49FE
04956:  MOVLB  6
....................                else if(No_PointCount == 0x00)   //OFF
04958:  MOVF   x6A,F
0495A:  BNZ   4A00
0495C:  MOVF   x6B,F
0495E:  BNZ   4A00
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   AutoTestFlag = 0;
04960:  BCF    1A.4
....................                   Read_input();
04962:  MOVLB  0
04964:  CALL   2C5C
....................                   AutoAckFlag = 1;
04968:  BSF    1A.2
....................                   check_ack();
0496A:  CALL   3866
....................                   AutoResetFlag = 1;
0496E:  BSF    1A.3
....................                   check_reset();
04970:  CALL   39F4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04974:  MOVFF  62,64
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04978:  MOVLW  05
0497A:  MOVWF  x65
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
0497C:  MOVFF  266,66
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04980:  MOVFF  267,67
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04984:  MOVFF  268,68
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04988:  MOVFF  269,69
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
0498C:  MOVLB  E
0498E:  CLRF   x47
04990:  MOVLW  64
04992:  MOVWF  x46
04994:  MOVLW  06
04996:  MOVWF  x48
04998:  MOVLB  0
0499A:  CALL   2656
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
0499E:  MOVFF  665,6A
....................                   TxD_Buff[7] = CRC_Lo ;
049A2:  MOVFF  664,6B
.................... 
....................                   output_bit(P485ctrl,1);
049A6:  BSF    F8A.3
049A8:  BCF    F93.3
....................                   restart_wdt();
049AA:  CLRWDT
....................                   delay_ms(4);
049AC:  MOVLW  04
049AE:  MOVLB  E
049B0:  MOVWF  x45
049B2:  MOVLB  0
049B4:  CALL   0A24
....................                   restart_wdt();
049B8:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
049BA:  MOVF   x64,W
049BC:  CALL   26AC
....................                   putc(TxD_Buff[1]) ;               //Function Code
049C0:  MOVF   x65,W
049C2:  CALL   26AC
....................                   putc(TxD_Buff[2]) ;               //Byte Count
049C6:  MOVF   x66,W
049C8:  CALL   26AC
....................                   putc(TxD_Buff[3]) ;
049CC:  MOVF   x67,W
049CE:  CALL   26AC
....................                   putc(TxD_Buff[4]) ;
049D2:  MOVF   x68,W
049D4:  CALL   26AC
....................                   putc(TxD_Buff[5]) ;
049D8:  MOVF   x69,W
049DA:  CALL   26AC
....................                   putc(TxD_Buff[6]) ;
049DE:  MOVF   x6A,W
049E0:  CALL   26AC
....................                   putc(TxD_Buff[7]) ;
049E4:  MOVF   x6B,W
049E6:  CALL   26AC
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
049EA:  CLRWDT
....................                   delay_ms(3);
049EC:  MOVLW  03
049EE:  MOVLB  E
049F0:  MOVWF  x45
049F2:  MOVLB  0
049F4:  CALL   0A24
....................                   restart_wdt();
049F8:  CLRWDT
....................                   output_bit(P485ctrl,0);
049FA:  BCF    F8A.3
049FC:  BCF    F93.3
049FE:  MOVLB  6
....................                   
....................                }
....................             }
04A00:  BRA    4C1C
....................             else if(Start_Address == 0x03)   ///// Function Test //////
04A02:  MOVF   x68,W
04A04:  SUBLW  03
04A06:  BTFSS  FD8.2
04A08:  BRA    4B54
04A0A:  MOVF   x69,F
04A0C:  BTFSS  FD8.2
04A0E:  BRA    4B54
....................             {
....................                if(No_PointCount == 0xFF00)   //ON
04A10:  MOVF   x6A,F
04A12:  BNZ   4AAA
04A14:  INCFSZ x6B,W
04A16:  BRA    4AAA
....................                {
....................                   //Modbus_Lamp_Test = 1 ;
....................                   Test_fault = 1 ;
04A18:  BSF    1A.5
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04A1A:  MOVFF  62,64
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04A1E:  MOVLW  05
04A20:  MOVLB  0
04A22:  MOVWF  x65
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04A24:  MOVFF  266,66
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04A28:  MOVFF  267,67
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04A2C:  MOVFF  268,68
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04A30:  MOVFF  269,69
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04A34:  MOVLB  E
04A36:  CLRF   x47
04A38:  MOVLW  64
04A3A:  MOVWF  x46
04A3C:  MOVLW  06
04A3E:  MOVWF  x48
04A40:  MOVLB  0
04A42:  CALL   2656
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
04A46:  MOVFF  665,6A
....................                   TxD_Buff[7] = CRC_Lo ;
04A4A:  MOVFF  664,6B
.................... 
....................                   output_bit(P485ctrl,1);
04A4E:  BSF    F8A.3
04A50:  BCF    F93.3
....................                   restart_wdt();
04A52:  CLRWDT
....................                   delay_ms(8);
04A54:  MOVLW  08
04A56:  MOVLB  E
04A58:  MOVWF  x45
04A5A:  MOVLB  0
04A5C:  CALL   0A24
....................                   restart_wdt();
04A60:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04A62:  MOVF   x64,W
04A64:  CALL   26AC
....................                   putc(TxD_Buff[1]) ;               //Function Code
04A68:  MOVF   x65,W
04A6A:  CALL   26AC
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04A6E:  MOVF   x66,W
04A70:  CALL   26AC
....................                   putc(TxD_Buff[3]) ;
04A74:  MOVF   x67,W
04A76:  CALL   26AC
....................                   putc(TxD_Buff[4]) ;
04A7A:  MOVF   x68,W
04A7C:  CALL   26AC
....................                   putc(TxD_Buff[5]) ;
04A80:  MOVF   x69,W
04A82:  CALL   26AC
....................                   putc(TxD_Buff[6]) ;
04A86:  MOVF   x6A,W
04A88:  CALL   26AC
....................                   putc(TxD_Buff[7]) ;
04A8C:  MOVF   x6B,W
04A8E:  CALL   26AC
....................                   //putc(TxD_Buff[8]) ;
....................                   //putc(TxD_Buff[9]) ;
.................... 
....................                   restart_wdt();
04A92:  CLRWDT
....................                   delay_ms(8);
04A94:  MOVLW  08
04A96:  MOVLB  E
04A98:  MOVWF  x45
04A9A:  MOVLB  0
04A9C:  CALL   0A24
....................                   restart_wdt();
04AA0:  CLRWDT
....................                   output_bit(P485ctrl,0);
04AA2:  BCF    F8A.3
04AA4:  BCF    F93.3
....................               
....................                }
04AA6:  BRA    4B50
04AA8:  MOVLB  6
....................                else if(No_PointCount == 0x00)   //OFF
04AAA:  MOVF   x6A,F
04AAC:  BNZ   4B52
04AAE:  MOVF   x6B,F
04AB0:  BNZ   4B52
....................                {
....................                   //Modbus_Lamp_Test = 0 ;
....................                   Test_fault = 0;
04AB2:  BCF    1A.5
....................                   Read_input();
04AB4:  MOVLB  0
04AB6:  CALL   2C5C
....................                   AutoAckFlag = 1;
04ABA:  BSF    1A.2
....................                   check_ack();
04ABC:  CALL   3866
....................                   AutoResetFlag = 1;
04AC0:  BSF    1A.3
....................                   check_reset();
04AC2:  CALL   39F4
.................... 
....................                   TxD_Buff[0] = Address ;         //Address
04AC6:  MOVFF  62,64
....................                   TxD_Buff[1] = 0x05 ;         //Function Code
04ACA:  MOVLW  05
04ACC:  MOVWF  x65
....................                   TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04ACE:  MOVFF  266,66
....................                   TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04AD2:  MOVFF  267,67
....................                   TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04AD6:  MOVFF  268,68
....................                   TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04ADA:  MOVFF  269,69
.................... 
....................                   CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04ADE:  MOVLB  E
04AE0:  CLRF   x47
04AE2:  MOVLW  64
04AE4:  MOVWF  x46
04AE6:  MOVLW  06
04AE8:  MOVWF  x48
04AEA:  MOVLB  0
04AEC:  CALL   2656
.................... 
....................                   TxD_Buff[6] = CRC_Hi ;
04AF0:  MOVFF  665,6A
....................                   TxD_Buff[7] = CRC_Lo ;
04AF4:  MOVFF  664,6B
.................... 
....................                   //TxD_DataLen = 0x08 ;
....................                   //rs485_ctrl = 1;
....................                   //dmsec(4);
....................                   //send = 1;
....................                   //TI=1;
....................                   output_bit(P485ctrl,1);
04AF8:  BSF    F8A.3
04AFA:  BCF    F93.3
....................                   restart_wdt();
04AFC:  CLRWDT
....................                   delay_ms(4);
04AFE:  MOVLW  04
04B00:  MOVLB  E
04B02:  MOVWF  x45
04B04:  MOVLB  0
04B06:  CALL   0A24
....................                   restart_wdt();
04B0A:  CLRWDT
.................... 
....................                   putc(TxD_Buff[0]) ;               //Address
04B0C:  MOVF   x64,W
04B0E:  CALL   26AC
....................                   putc(TxD_Buff[1]) ;               //Function Code
04B12:  MOVF   x65,W
04B14:  CALL   26AC
....................                   putc(TxD_Buff[2]) ;               //Byte Count
04B18:  MOVF   x66,W
04B1A:  CALL   26AC
....................                   putc(TxD_Buff[3]) ;
04B1E:  MOVF   x67,W
04B20:  CALL   26AC
....................                   putc(TxD_Buff[4]) ;
04B24:  MOVF   x68,W
04B26:  CALL   26AC
....................                   putc(TxD_Buff[5]) ;
04B2A:  MOVF   x69,W
04B2C:  CALL   26AC
....................                   putc(TxD_Buff[6]) ;
04B30:  MOVF   x6A,W
04B32:  CALL   26AC
....................                   putc(TxD_Buff[7]) ;
04B36:  MOVF   x6B,W
04B38:  CALL   26AC
.................... 
....................                   restart_wdt();
04B3C:  CLRWDT
....................                   delay_ms(3);
04B3E:  MOVLW  03
04B40:  MOVLB  E
04B42:  MOVWF  x45
04B44:  MOVLB  0
04B46:  CALL   0A24
....................                   restart_wdt();
04B4A:  CLRWDT
....................                   output_bit(P485ctrl,0);
04B4C:  BCF    F8A.3
04B4E:  BCF    F93.3
04B50:  MOVLB  6
....................                   
....................                }
....................             }
04B52:  BRA    4C1C
....................             else if(Start_Address == 0x64)   ///// Change Modbus Addr //////
04B54:  MOVF   x68,W
04B56:  SUBLW  64
04B58:  BNZ   4C1C
04B5A:  MOVF   x69,F
04B5C:  BNZ   4C1C
....................             {
....................                Address = No_PointCount;
04B5E:  MOVFF  66A,62
....................                write_eeprom(0x1D,Address);   //Communication Address
04B62:  MOVF   FF2,W
04B64:  MOVWF  00
04B66:  BCF    FF2.7
04B68:  CLRF   FAA
04B6A:  MOVLW  1D
04B6C:  MOVWF  FA9
04B6E:  MOVFF  62,FA8
04B72:  BCF    FA6.6
04B74:  BCF    FA6.7
04B76:  BSF    FA6.2
04B78:  MOVLB  F
04B7A:  MOVLW  55
04B7C:  MOVWF  FA7
04B7E:  MOVLW  AA
04B80:  MOVWF  FA7
04B82:  BSF    FA6.1
04B84:  BTFSC  FA6.1
04B86:  BRA    4B84
04B88:  BCF    FA6.2
04B8A:  MOVF   00,W
04B8C:  IORWF  FF2,F
....................                
....................                TxD_Buff[0] = Address ;         //Address
04B8E:  MOVFF  62,64
....................                TxD_Buff[1] = 0x05 ;         //Function Code
04B92:  MOVLW  05
04B94:  MOVLB  0
04B96:  MOVWF  x65
....................                TxD_Buff[2] = RxD_Buff[2] ;      //Coil Address Hi
04B98:  MOVFF  266,66
....................                TxD_Buff[3] = RxD_Buff[3] ;      //Coil Address Lo
04B9C:  MOVFF  267,67
....................                TxD_Buff[4] = RxD_Buff[4] ;      //Force Data Hi
04BA0:  MOVFF  268,68
....................                TxD_Buff[5] = RxD_Buff[5] ;      //Force Data Lo
04BA4:  MOVFF  269,69
.................... 
....................                CRC(TxD_Buff,6)   ;            //Cal CRC 6 Byte
04BA8:  MOVLB  E
04BAA:  CLRF   x47
04BAC:  MOVLW  64
04BAE:  MOVWF  x46
04BB0:  MOVLW  06
04BB2:  MOVWF  x48
04BB4:  MOVLB  0
04BB6:  CALL   2656
.................... 
....................                TxD_Buff[6] = CRC_Hi ;
04BBA:  MOVFF  665,6A
....................                TxD_Buff[7] = CRC_Lo ;
04BBE:  MOVFF  664,6B
.................... 
....................                output_bit(P485ctrl,1);
04BC2:  BSF    F8A.3
04BC4:  BCF    F93.3
....................                restart_wdt();
04BC6:  CLRWDT
....................                delay_ms(4);
04BC8:  MOVLW  04
04BCA:  MOVLB  E
04BCC:  MOVWF  x45
04BCE:  MOVLB  0
04BD0:  CALL   0A24
....................                restart_wdt();
04BD4:  CLRWDT
.................... 
....................                putc(TxD_Buff[0]) ;               //Address
04BD6:  MOVF   x64,W
04BD8:  CALL   26AC
....................                putc(TxD_Buff[1]) ;               //Function Code
04BDC:  MOVF   x65,W
04BDE:  CALL   26AC
....................                putc(TxD_Buff[2]) ;               //Byte Count
04BE2:  MOVF   x66,W
04BE4:  CALL   26AC
....................                putc(TxD_Buff[3]) ;
04BE8:  MOVF   x67,W
04BEA:  CALL   26AC
....................                putc(TxD_Buff[4]) ;
04BEE:  MOVF   x68,W
04BF0:  CALL   26AC
....................                putc(TxD_Buff[5]) ;
04BF4:  MOVF   x69,W
04BF6:  CALL   26AC
....................                putc(TxD_Buff[6]) ;
04BFA:  MOVF   x6A,W
04BFC:  CALL   26AC
....................                putc(TxD_Buff[7]) ;
04C00:  MOVF   x6B,W
04C02:  CALL   26AC
....................                //putc(TxD_Buff[8]) ;
....................                //putc(TxD_Buff[9]) ;
.................... 
....................                restart_wdt();
04C06:  CLRWDT
....................                delay_ms(3);
04C08:  MOVLW  03
04C0A:  MOVLB  E
04C0C:  MOVWF  x45
04C0E:  MOVLB  0
04C10:  CALL   0A24
....................                restart_wdt();
04C14:  CLRWDT
....................                output_bit(P485ctrl,0);
04C16:  BCF    F8A.3
04C18:  BCF    F93.3
04C1A:  MOVLB  6
.................... 
.................... 
....................                //save_addr();
....................             }
....................          }
04C1C:  GOTO   6AEA
04C20:  MOVLB  2
....................          //--------------------------------------------------//
....................          
....................          else if(RxD_Buff[1] == 0x21)///////////// WRITE SETTING /////////////////////
04C22:  MOVF   x65,W
04C24:  SUBLW  21
04C26:  BTFSS  FD8.2
04C28:  GOTO   5590
....................          {
.................... 
....................             write_eeprom(0x00,0x0F);
04C2C:  MOVF   FF2,W
04C2E:  MOVWF  00
04C30:  BCF    FF2.7
04C32:  CLRF   FAA
04C34:  CLRF   FA9
04C36:  MOVLW  0F
04C38:  MOVWF  FA8
04C3A:  BCF    FA6.6
04C3C:  BCF    FA6.7
04C3E:  BSF    FA6.2
04C40:  MOVLB  F
04C42:  MOVLW  55
04C44:  MOVWF  FA7
04C46:  MOVLW  AA
04C48:  MOVWF  FA7
04C4A:  BSF    FA6.1
04C4C:  BTFSC  FA6.1
04C4E:  BRA    4C4C
04C50:  BCF    FA6.2
04C52:  MOVF   00,W
04C54:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x01,RxD_Buff[3]);   //Inputt Type
04C56:  MOVFF  FF2,00
04C5A:  BCF    FF2.7
04C5C:  CLRF   FAA
04C5E:  MOVLW  01
04C60:  MOVWF  FA9
04C62:  MOVFF  267,FA8
04C66:  BCF    FA6.6
04C68:  BCF    FA6.7
04C6A:  BSF    FA6.2
04C6C:  MOVLW  55
04C6E:  MOVWF  FA7
04C70:  MOVLW  AA
04C72:  MOVWF  FA7
04C74:  BSF    FA6.1
04C76:  BTFSC  FA6.1
04C78:  BRA    4C76
04C7A:  BCF    FA6.2
04C7C:  MOVF   00,W
04C7E:  IORWF  FF2,F
....................             write_eeprom(0x02,RxD_Buff[4]);
04C80:  MOVFF  FF2,00
04C84:  BCF    FF2.7
04C86:  CLRF   FAA
04C88:  MOVLW  02
04C8A:  MOVWF  FA9
04C8C:  MOVFF  268,FA8
04C90:  BCF    FA6.6
04C92:  BCF    FA6.7
04C94:  BSF    FA6.2
04C96:  MOVLW  55
04C98:  MOVWF  FA7
04C9A:  MOVLW  AA
04C9C:  MOVWF  FA7
04C9E:  BSF    FA6.1
04CA0:  BTFSC  FA6.1
04CA2:  BRA    4CA0
04CA4:  BCF    FA6.2
04CA6:  MOVF   00,W
04CA8:  IORWF  FF2,F
....................             write_eeprom(0x03,RxD_Buff[5]);
04CAA:  MOVFF  FF2,00
04CAE:  BCF    FF2.7
04CB0:  CLRF   FAA
04CB2:  MOVLW  03
04CB4:  MOVWF  FA9
04CB6:  MOVFF  269,FA8
04CBA:  BCF    FA6.6
04CBC:  BCF    FA6.7
04CBE:  BSF    FA6.2
04CC0:  MOVLW  55
04CC2:  MOVWF  FA7
04CC4:  MOVLW  AA
04CC6:  MOVWF  FA7
04CC8:  BSF    FA6.1
04CCA:  BTFSC  FA6.1
04CCC:  BRA    4CCA
04CCE:  BCF    FA6.2
04CD0:  MOVF   00,W
04CD2:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x04,RxD_Buff[6]);   //Fault Type
04CD4:  MOVFF  FF2,00
04CD8:  BCF    FF2.7
04CDA:  CLRF   FAA
04CDC:  MOVLW  04
04CDE:  MOVWF  FA9
04CE0:  MOVFF  26A,FA8
04CE4:  BCF    FA6.6
04CE6:  BCF    FA6.7
04CE8:  BSF    FA6.2
04CEA:  MOVLW  55
04CEC:  MOVWF  FA7
04CEE:  MOVLW  AA
04CF0:  MOVWF  FA7
04CF2:  BSF    FA6.1
04CF4:  BTFSC  FA6.1
04CF6:  BRA    4CF4
04CF8:  BCF    FA6.2
04CFA:  MOVF   00,W
04CFC:  IORWF  FF2,F
....................             write_eeprom(0x05,RxD_Buff[7]);
04CFE:  MOVFF  FF2,00
04D02:  BCF    FF2.7
04D04:  CLRF   FAA
04D06:  MOVLW  05
04D08:  MOVWF  FA9
04D0A:  MOVFF  26B,FA8
04D0E:  BCF    FA6.6
04D10:  BCF    FA6.7
04D12:  BSF    FA6.2
04D14:  MOVLW  55
04D16:  MOVWF  FA7
04D18:  MOVLW  AA
04D1A:  MOVWF  FA7
04D1C:  BSF    FA6.1
04D1E:  BTFSC  FA6.1
04D20:  BRA    4D1E
04D22:  BCF    FA6.2
04D24:  MOVF   00,W
04D26:  IORWF  FF2,F
....................             write_eeprom(0x06,RxD_Buff[8]);
04D28:  MOVFF  FF2,00
04D2C:  BCF    FF2.7
04D2E:  CLRF   FAA
04D30:  MOVLW  06
04D32:  MOVWF  FA9
04D34:  MOVFF  26C,FA8
04D38:  BCF    FA6.6
04D3A:  BCF    FA6.7
04D3C:  BSF    FA6.2
04D3E:  MOVLW  55
04D40:  MOVWF  FA7
04D42:  MOVLW  AA
04D44:  MOVWF  FA7
04D46:  BSF    FA6.1
04D48:  BTFSC  FA6.1
04D4A:  BRA    4D48
04D4C:  BCF    FA6.2
04D4E:  MOVF   00,W
04D50:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x07,RxD_Buff[9]);   //Output Type
04D52:  MOVFF  FF2,00
04D56:  BCF    FF2.7
04D58:  CLRF   FAA
04D5A:  MOVLW  07
04D5C:  MOVWF  FA9
04D5E:  MOVFF  26D,FA8
04D62:  BCF    FA6.6
04D64:  BCF    FA6.7
04D66:  BSF    FA6.2
04D68:  MOVLW  55
04D6A:  MOVWF  FA7
04D6C:  MOVLW  AA
04D6E:  MOVWF  FA7
04D70:  BSF    FA6.1
04D72:  BTFSC  FA6.1
04D74:  BRA    4D72
04D76:  BCF    FA6.2
04D78:  MOVF   00,W
04D7A:  IORWF  FF2,F
....................             write_eeprom(0x08,RxD_Buff[10]);
04D7C:  MOVFF  FF2,00
04D80:  BCF    FF2.7
04D82:  CLRF   FAA
04D84:  MOVLW  08
04D86:  MOVWF  FA9
04D88:  MOVFF  26E,FA8
04D8C:  BCF    FA6.6
04D8E:  BCF    FA6.7
04D90:  BSF    FA6.2
04D92:  MOVLW  55
04D94:  MOVWF  FA7
04D96:  MOVLW  AA
04D98:  MOVWF  FA7
04D9A:  BSF    FA6.1
04D9C:  BTFSC  FA6.1
04D9E:  BRA    4D9C
04DA0:  BCF    FA6.2
04DA2:  MOVF   00,W
04DA4:  IORWF  FF2,F
....................             write_eeprom(0x09,RxD_Buff[11]);
04DA6:  MOVFF  FF2,00
04DAA:  BCF    FF2.7
04DAC:  CLRF   FAA
04DAE:  MOVLW  09
04DB0:  MOVWF  FA9
04DB2:  MOVFF  26F,FA8
04DB6:  BCF    FA6.6
04DB8:  BCF    FA6.7
04DBA:  BSF    FA6.2
04DBC:  MOVLW  55
04DBE:  MOVWF  FA7
04DC0:  MOVLW  AA
04DC2:  MOVWF  FA7
04DC4:  BSF    FA6.1
04DC6:  BTFSC  FA6.1
04DC8:  BRA    4DC6
04DCA:  BCF    FA6.2
04DCC:  MOVF   00,W
04DCE:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0A,RxD_Buff[12]);   //Output Both
04DD0:  MOVFF  FF2,00
04DD4:  BCF    FF2.7
04DD6:  CLRF   FAA
04DD8:  MOVLW  0A
04DDA:  MOVWF  FA9
04DDC:  MOVFF  270,FA8
04DE0:  BCF    FA6.6
04DE2:  BCF    FA6.7
04DE4:  BSF    FA6.2
04DE6:  MOVLW  55
04DE8:  MOVWF  FA7
04DEA:  MOVLW  AA
04DEC:  MOVWF  FA7
04DEE:  BSF    FA6.1
04DF0:  BTFSC  FA6.1
04DF2:  BRA    4DF0
04DF4:  BCF    FA6.2
04DF6:  MOVF   00,W
04DF8:  IORWF  FF2,F
....................             write_eeprom(0x0B,RxD_Buff[13]);
04DFA:  MOVFF  FF2,00
04DFE:  BCF    FF2.7
04E00:  CLRF   FAA
04E02:  MOVLW  0B
04E04:  MOVWF  FA9
04E06:  MOVFF  271,FA8
04E0A:  BCF    FA6.6
04E0C:  BCF    FA6.7
04E0E:  BSF    FA6.2
04E10:  MOVLW  55
04E12:  MOVWF  FA7
04E14:  MOVLW  AA
04E16:  MOVWF  FA7
04E18:  BSF    FA6.1
04E1A:  BTFSC  FA6.1
04E1C:  BRA    4E1A
04E1E:  BCF    FA6.2
04E20:  MOVF   00,W
04E22:  IORWF  FF2,F
....................             write_eeprom(0x0C,RxD_Buff[14]);
04E24:  MOVFF  FF2,00
04E28:  BCF    FF2.7
04E2A:  CLRF   FAA
04E2C:  MOVLW  0C
04E2E:  MOVWF  FA9
04E30:  MOVFF  272,FA8
04E34:  BCF    FA6.6
04E36:  BCF    FA6.7
04E38:  BSF    FA6.2
04E3A:  MOVLW  55
04E3C:  MOVWF  FA7
04E3E:  MOVLW  AA
04E40:  MOVWF  FA7
04E42:  BSF    FA6.1
04E44:  BTFSC  FA6.1
04E46:  BRA    4E44
04E48:  BCF    FA6.2
04E4A:  MOVF   00,W
04E4C:  IORWF  FF2,F
.................... 
....................             write_eeprom(0x0D,RxD_Buff[15]);   //Alarm / Indicator
04E4E:  MOVFF  FF2,00
04E52:  BCF    FF2.7
04E54:  CLRF   FAA
04E56:  MOVLW  0D
04E58:  MOVWF  FA9
04E5A:  MOVFF  273,FA8
04E5E:  BCF    FA6.6
04E60:  BCF    FA6.7
04E62:  BSF    FA6.2
04E64:  MOVLW  55
04E66:  MOVWF  FA7
04E68:  MOVLW  AA
04E6A:  MOVWF  FA7
04E6C:  BSF    FA6.1
04E6E:  BTFSC  FA6.1
04E70:  BRA    4E6E
04E72:  BCF    FA6.2
04E74:  MOVF   00,W
04E76:  IORWF  FF2,F
....................             write_eeprom(0x0E,RxD_Buff[16]);
04E78:  MOVFF  FF2,00
04E7C:  BCF    FF2.7
04E7E:  CLRF   FAA
04E80:  MOVLW  0E
04E82:  MOVWF  FA9
04E84:  MOVFF  274,FA8
04E88:  BCF    FA6.6
04E8A:  BCF    FA6.7
04E8C:  BSF    FA6.2
04E8E:  MOVLW  55
04E90:  MOVWF  FA7
04E92:  MOVLW  AA
04E94:  MOVWF  FA7
04E96:  BSF    FA6.1
04E98:  BTFSC  FA6.1
04E9A:  BRA    4E98
04E9C:  BCF    FA6.2
04E9E:  MOVF   00,W
04EA0:  IORWF  FF2,F
....................             write_eeprom(0x0F,RxD_Buff[17]);
04EA2:  MOVFF  FF2,00
04EA6:  BCF    FF2.7
04EA8:  CLRF   FAA
04EAA:  MOVLW  0F
04EAC:  MOVWF  FA9
04EAE:  MOVFF  275,FA8
04EB2:  BCF    FA6.6
04EB4:  BCF    FA6.7
04EB6:  BSF    FA6.2
04EB8:  MOVLW  55
04EBA:  MOVWF  FA7
04EBC:  MOVLW  AA
04EBE:  MOVWF  FA7
04EC0:  BSF    FA6.1
04EC2:  BTFSC  FA6.1
04EC4:  BRA    4EC2
04EC6:  BCF    FA6.2
04EC8:  MOVF   00,W
04ECA:  IORWF  FF2,F
....................          
....................             // LED Colour Config
....................             write_eeprom(0x10,RxD_Buff[18]); //Red1_8
04ECC:  MOVFF  FF2,00
04ED0:  BCF    FF2.7
04ED2:  CLRF   FAA
04ED4:  MOVLW  10
04ED6:  MOVWF  FA9
04ED8:  MOVFF  276,FA8
04EDC:  BCF    FA6.6
04EDE:  BCF    FA6.7
04EE0:  BSF    FA6.2
04EE2:  MOVLW  55
04EE4:  MOVWF  FA7
04EE6:  MOVLW  AA
04EE8:  MOVWF  FA7
04EEA:  BSF    FA6.1
04EEC:  BTFSC  FA6.1
04EEE:  BRA    4EEC
04EF0:  BCF    FA6.2
04EF2:  MOVF   00,W
04EF4:  IORWF  FF2,F
....................             write_eeprom(0x11,RxD_Buff[19]); //Red9_10
04EF6:  MOVFF  FF2,00
04EFA:  BCF    FF2.7
04EFC:  CLRF   FAA
04EFE:  MOVLW  11
04F00:  MOVWF  FA9
04F02:  MOVFF  277,FA8
04F06:  BCF    FA6.6
04F08:  BCF    FA6.7
04F0A:  BSF    FA6.2
04F0C:  MOVLW  55
04F0E:  MOVWF  FA7
04F10:  MOVLW  AA
04F12:  MOVWF  FA7
04F14:  BSF    FA6.1
04F16:  BTFSC  FA6.1
04F18:  BRA    4F16
04F1A:  BCF    FA6.2
04F1C:  MOVF   00,W
04F1E:  IORWF  FF2,F
....................             write_eeprom(0x12,RxD_Buff[20]); //Red11_18
04F20:  MOVFF  FF2,00
04F24:  BCF    FF2.7
04F26:  CLRF   FAA
04F28:  MOVLW  12
04F2A:  MOVWF  FA9
04F2C:  MOVFF  278,FA8
04F30:  BCF    FA6.6
04F32:  BCF    FA6.7
04F34:  BSF    FA6.2
04F36:  MOVLW  55
04F38:  MOVWF  FA7
04F3A:  MOVLW  AA
04F3C:  MOVWF  FA7
04F3E:  BSF    FA6.1
04F40:  BTFSC  FA6.1
04F42:  BRA    4F40
04F44:  BCF    FA6.2
04F46:  MOVF   00,W
04F48:  IORWF  FF2,F
....................             write_eeprom(0x13,RxD_Buff[21]); //Red19_20
04F4A:  MOVFF  FF2,00
04F4E:  BCF    FF2.7
04F50:  CLRF   FAA
04F52:  MOVLW  13
04F54:  MOVWF  FA9
04F56:  MOVFF  279,FA8
04F5A:  BCF    FA6.6
04F5C:  BCF    FA6.7
04F5E:  BSF    FA6.2
04F60:  MOVLW  55
04F62:  MOVWF  FA7
04F64:  MOVLW  AA
04F66:  MOVWF  FA7
04F68:  BSF    FA6.1
04F6A:  BTFSC  FA6.1
04F6C:  BRA    4F6A
04F6E:  BCF    FA6.2
04F70:  MOVF   00,W
04F72:  IORWF  FF2,F
....................             write_eeprom(0x14,RxD_Buff[22]); //Green1_8
04F74:  MOVFF  FF2,00
04F78:  BCF    FF2.7
04F7A:  CLRF   FAA
04F7C:  MOVLW  14
04F7E:  MOVWF  FA9
04F80:  MOVFF  27A,FA8
04F84:  BCF    FA6.6
04F86:  BCF    FA6.7
04F88:  BSF    FA6.2
04F8A:  MOVLW  55
04F8C:  MOVWF  FA7
04F8E:  MOVLW  AA
04F90:  MOVWF  FA7
04F92:  BSF    FA6.1
04F94:  BTFSC  FA6.1
04F96:  BRA    4F94
04F98:  BCF    FA6.2
04F9A:  MOVF   00,W
04F9C:  IORWF  FF2,F
....................             write_eeprom(0x15,RxD_Buff[23]); //Green9_10
04F9E:  MOVFF  FF2,00
04FA2:  BCF    FF2.7
04FA4:  CLRF   FAA
04FA6:  MOVLW  15
04FA8:  MOVWF  FA9
04FAA:  MOVFF  27B,FA8
04FAE:  BCF    FA6.6
04FB0:  BCF    FA6.7
04FB2:  BSF    FA6.2
04FB4:  MOVLW  55
04FB6:  MOVWF  FA7
04FB8:  MOVLW  AA
04FBA:  MOVWF  FA7
04FBC:  BSF    FA6.1
04FBE:  BTFSC  FA6.1
04FC0:  BRA    4FBE
04FC2:  BCF    FA6.2
04FC4:  MOVF   00,W
04FC6:  IORWF  FF2,F
....................             write_eeprom(0x16,RxD_Buff[24]); //Green11_18
04FC8:  MOVFF  FF2,00
04FCC:  BCF    FF2.7
04FCE:  CLRF   FAA
04FD0:  MOVLW  16
04FD2:  MOVWF  FA9
04FD4:  MOVFF  27C,FA8
04FD8:  BCF    FA6.6
04FDA:  BCF    FA6.7
04FDC:  BSF    FA6.2
04FDE:  MOVLW  55
04FE0:  MOVWF  FA7
04FE2:  MOVLW  AA
04FE4:  MOVWF  FA7
04FE6:  BSF    FA6.1
04FE8:  BTFSC  FA6.1
04FEA:  BRA    4FE8
04FEC:  BCF    FA6.2
04FEE:  MOVF   00,W
04FF0:  IORWF  FF2,F
....................             write_eeprom(0x17,RxD_Buff[25]); //Green19_20
04FF2:  MOVFF  FF2,00
04FF6:  BCF    FF2.7
04FF8:  CLRF   FAA
04FFA:  MOVLW  17
04FFC:  MOVWF  FA9
04FFE:  MOVFF  27D,FA8
05002:  BCF    FA6.6
05004:  BCF    FA6.7
05006:  BSF    FA6.2
05008:  MOVLW  55
0500A:  MOVWF  FA7
0500C:  MOVLW  AA
0500E:  MOVWF  FA7
05010:  BSF    FA6.1
05012:  BTFSC  FA6.1
05014:  BRA    5012
05016:  BCF    FA6.2
05018:  MOVF   00,W
0501A:  IORWF  FF2,F
....................                
....................             write_eeprom(0x18,RxD_Buff[26]);   //Auto acknowledge
0501C:  MOVFF  FF2,00
05020:  BCF    FF2.7
05022:  CLRF   FAA
05024:  MOVLW  18
05026:  MOVWF  FA9
05028:  MOVFF  27E,FA8
0502C:  BCF    FA6.6
0502E:  BCF    FA6.7
05030:  BSF    FA6.2
05032:  MOVLW  55
05034:  MOVWF  FA7
05036:  MOVLW  AA
05038:  MOVWF  FA7
0503A:  BSF    FA6.1
0503C:  BTFSC  FA6.1
0503E:  BRA    503C
05040:  BCF    FA6.2
05042:  MOVF   00,W
05044:  IORWF  FF2,F
....................             write_eeprom(0x19,RxD_Buff[27]);   //Auto acknowledge Time
05046:  MOVFF  FF2,00
0504A:  BCF    FF2.7
0504C:  CLRF   FAA
0504E:  MOVLW  19
05050:  MOVWF  FA9
05052:  MOVFF  27F,FA8
05056:  BCF    FA6.6
05058:  BCF    FA6.7
0505A:  BSF    FA6.2
0505C:  MOVLW  55
0505E:  MOVWF  FA7
05060:  MOVLW  AA
05062:  MOVWF  FA7
05064:  BSF    FA6.1
05066:  BTFSC  FA6.1
05068:  BRA    5066
0506A:  BCF    FA6.2
0506C:  MOVF   00,W
0506E:  IORWF  FF2,F
....................             write_eeprom(0x1A,RxD_Buff[28]);   //Flashing Rate
05070:  MOVFF  FF2,00
05074:  BCF    FF2.7
05076:  CLRF   FAA
05078:  MOVLW  1A
0507A:  MOVWF  FA9
0507C:  MOVFF  280,FA8
05080:  BCF    FA6.6
05082:  BCF    FA6.7
05084:  BSF    FA6.2
05086:  MOVLW  55
05088:  MOVWF  FA7
0508A:  MOVLW  AA
0508C:  MOVWF  FA7
0508E:  BSF    FA6.1
05090:  BTFSC  FA6.1
05092:  BRA    5090
05094:  BCF    FA6.2
05096:  MOVF   00,W
05098:  IORWF  FF2,F
....................             write_eeprom(0x1B,RxD_Buff[29]);   //No of point
0509A:  MOVFF  FF2,00
0509E:  BCF    FF2.7
050A0:  CLRF   FAA
050A2:  MOVLW  1B
050A4:  MOVWF  FA9
050A6:  MOVFF  281,FA8
050AA:  BCF    FA6.6
050AC:  BCF    FA6.7
050AE:  BSF    FA6.2
050B0:  MOVLW  55
050B2:  MOVWF  FA7
050B4:  MOVLW  AA
050B6:  MOVWF  FA7
050B8:  BSF    FA6.1
050BA:  BTFSC  FA6.1
050BC:  BRA    50BA
050BE:  BCF    FA6.2
050C0:  MOVF   00,W
050C2:  IORWF  FF2,F
....................             write_eeprom(0x1C,RxD_Buff[30]);   //FaultDelayTime
050C4:  MOVFF  FF2,00
050C8:  BCF    FF2.7
050CA:  CLRF   FAA
050CC:  MOVLW  1C
050CE:  MOVWF  FA9
050D0:  MOVFF  282,FA8
050D4:  BCF    FA6.6
050D6:  BCF    FA6.7
050D8:  BSF    FA6.2
050DA:  MOVLW  55
050DC:  MOVWF  FA7
050DE:  MOVLW  AA
050E0:  MOVWF  FA7
050E2:  BSF    FA6.1
050E4:  BTFSC  FA6.1
050E6:  BRA    50E4
050E8:  BCF    FA6.2
050EA:  MOVF   00,W
050EC:  IORWF  FF2,F
....................             write_eeprom(0x1D,RxD_Buff[31]);   //Communication Address
050EE:  MOVFF  FF2,00
050F2:  BCF    FF2.7
050F4:  CLRF   FAA
050F6:  MOVLW  1D
050F8:  MOVWF  FA9
050FA:  MOVFF  283,FA8
050FE:  BCF    FA6.6
05100:  BCF    FA6.7
05102:  BSF    FA6.2
05104:  MOVLW  55
05106:  MOVWF  FA7
05108:  MOVLW  AA
0510A:  MOVWF  FA7
0510C:  BSF    FA6.1
0510E:  BTFSC  FA6.1
05110:  BRA    510E
05112:  BCF    FA6.2
05114:  MOVF   00,W
05116:  IORWF  FF2,F
....................             
....................             write_eeprom(0x1E,RxD_Buff[32]);   //Communication Address
05118:  MOVFF  FF2,00
0511C:  BCF    FF2.7
0511E:  CLRF   FAA
05120:  MOVLW  1E
05122:  MOVWF  FA9
05124:  MOVFF  284,FA8
05128:  BCF    FA6.6
0512A:  BCF    FA6.7
0512C:  BSF    FA6.2
0512E:  MOVLW  55
05130:  MOVWF  FA7
05132:  MOVLW  AA
05134:  MOVWF  FA7
05136:  BSF    FA6.1
05138:  BTFSC  FA6.1
0513A:  BRA    5138
0513C:  BCF    FA6.2
0513E:  MOVF   00,W
05140:  IORWF  FF2,F
....................             write_eeprom(0x1F,RxD_Buff[33]);   //Communication Address
05142:  MOVFF  FF2,00
05146:  BCF    FF2.7
05148:  CLRF   FAA
0514A:  MOVLW  1F
0514C:  MOVWF  FA9
0514E:  MOVFF  285,FA8
05152:  BCF    FA6.6
05154:  BCF    FA6.7
05156:  BSF    FA6.2
05158:  MOVLW  55
0515A:  MOVWF  FA7
0515C:  MOVLW  AA
0515E:  MOVWF  FA7
05160:  BSF    FA6.1
05162:  BTFSC  FA6.1
05164:  BRA    5162
05166:  BCF    FA6.2
05168:  MOVF   00,W
0516A:  IORWF  FF2,F
....................             write_eeprom(0x20,RxD_Buff[34]);   //Communication Address
0516C:  MOVFF  FF2,00
05170:  BCF    FF2.7
05172:  CLRF   FAA
05174:  MOVLW  20
05176:  MOVWF  FA9
05178:  MOVFF  286,FA8
0517C:  BCF    FA6.6
0517E:  BCF    FA6.7
05180:  BSF    FA6.2
05182:  MOVLW  55
05184:  MOVWF  FA7
05186:  MOVLW  AA
05188:  MOVWF  FA7
0518A:  BSF    FA6.1
0518C:  BTFSC  FA6.1
0518E:  BRA    518C
05190:  BCF    FA6.2
05192:  MOVF   00,W
05194:  IORWF  FF2,F
....................             write_eeprom(0x21,RxD_Buff[35]);   //Communication Address
05196:  MOVFF  FF2,00
0519A:  BCF    FF2.7
0519C:  CLRF   FAA
0519E:  MOVLW  21
051A0:  MOVWF  FA9
051A2:  MOVFF  287,FA8
051A6:  BCF    FA6.6
051A8:  BCF    FA6.7
051AA:  BSF    FA6.2
051AC:  MOVLW  55
051AE:  MOVWF  FA7
051B0:  MOVLW  AA
051B2:  MOVWF  FA7
051B4:  BSF    FA6.1
051B6:  BTFSC  FA6.1
051B8:  BRA    51B6
051BA:  BCF    FA6.2
051BC:  MOVF   00,W
051BE:  IORWF  FF2,F
....................             write_eeprom(0x22,RxD_Buff[36]);   //Communication Address
051C0:  MOVFF  FF2,00
051C4:  BCF    FF2.7
051C6:  CLRF   FAA
051C8:  MOVLW  22
051CA:  MOVWF  FA9
051CC:  MOVFF  288,FA8
051D0:  BCF    FA6.6
051D2:  BCF    FA6.7
051D4:  BSF    FA6.2
051D6:  MOVLW  55
051D8:  MOVWF  FA7
051DA:  MOVLW  AA
051DC:  MOVWF  FA7
051DE:  BSF    FA6.1
051E0:  BTFSC  FA6.1
051E2:  BRA    51E0
051E4:  BCF    FA6.2
051E6:  MOVF   00,W
051E8:  IORWF  FF2,F
....................             write_eeprom(0x23,RxD_Buff[37]);   //Communication Address
051EA:  MOVFF  FF2,00
051EE:  BCF    FF2.7
051F0:  CLRF   FAA
051F2:  MOVLW  23
051F4:  MOVWF  FA9
051F6:  MOVFF  289,FA8
051FA:  BCF    FA6.6
051FC:  BCF    FA6.7
051FE:  BSF    FA6.2
05200:  MOVLW  55
05202:  MOVWF  FA7
05204:  MOVLW  AA
05206:  MOVWF  FA7
05208:  BSF    FA6.1
0520A:  BTFSC  FA6.1
0520C:  BRA    520A
0520E:  BCF    FA6.2
05210:  MOVF   00,W
05212:  IORWF  FF2,F
....................             write_eeprom(0x24,RxD_Buff[38]);   //Communication Address
05214:  MOVFF  FF2,00
05218:  BCF    FF2.7
0521A:  CLRF   FAA
0521C:  MOVLW  24
0521E:  MOVWF  FA9
05220:  MOVFF  28A,FA8
05224:  BCF    FA6.6
05226:  BCF    FA6.7
05228:  BSF    FA6.2
0522A:  MOVLW  55
0522C:  MOVWF  FA7
0522E:  MOVLW  AA
05230:  MOVWF  FA7
05232:  BSF    FA6.1
05234:  BTFSC  FA6.1
05236:  BRA    5234
05238:  BCF    FA6.2
0523A:  MOVF   00,W
0523C:  IORWF  FF2,F
....................             write_eeprom(0x25,RxD_Buff[39]);   //Communication Address
0523E:  MOVFF  FF2,00
05242:  BCF    FF2.7
05244:  CLRF   FAA
05246:  MOVLW  25
05248:  MOVWF  FA9
0524A:  MOVFF  28B,FA8
0524E:  BCF    FA6.6
05250:  BCF    FA6.7
05252:  BSF    FA6.2
05254:  MOVLW  55
05256:  MOVWF  FA7
05258:  MOVLW  AA
0525A:  MOVWF  FA7
0525C:  BSF    FA6.1
0525E:  BTFSC  FA6.1
05260:  BRA    525E
05262:  BCF    FA6.2
05264:  MOVF   00,W
05266:  IORWF  FF2,F
....................             write_eeprom(0x26,RxD_Buff[40]);   //Communication Address
05268:  MOVFF  FF2,00
0526C:  BCF    FF2.7
0526E:  CLRF   FAA
05270:  MOVLW  26
05272:  MOVWF  FA9
05274:  MOVFF  28C,FA8
05278:  BCF    FA6.6
0527A:  BCF    FA6.7
0527C:  BSF    FA6.2
0527E:  MOVLW  55
05280:  MOVWF  FA7
05282:  MOVLW  AA
05284:  MOVWF  FA7
05286:  BSF    FA6.1
05288:  BTFSC  FA6.1
0528A:  BRA    5288
0528C:  BCF    FA6.2
0528E:  MOVF   00,W
05290:  IORWF  FF2,F
....................             write_eeprom(0x27,RxD_Buff[41]);   //Communication Address
05292:  MOVFF  FF2,00
05296:  BCF    FF2.7
05298:  CLRF   FAA
0529A:  MOVLW  27
0529C:  MOVWF  FA9
0529E:  MOVFF  28D,FA8
052A2:  BCF    FA6.6
052A4:  BCF    FA6.7
052A6:  BSF    FA6.2
052A8:  MOVLW  55
052AA:  MOVWF  FA7
052AC:  MOVLW  AA
052AE:  MOVWF  FA7
052B0:  BSF    FA6.1
052B2:  BTFSC  FA6.1
052B4:  BRA    52B2
052B6:  BCF    FA6.2
052B8:  MOVF   00,W
052BA:  IORWF  FF2,F
....................             write_eeprom(0x28,RxD_Buff[42]);   //Communication Address
052BC:  MOVFF  FF2,00
052C0:  BCF    FF2.7
052C2:  CLRF   FAA
052C4:  MOVLW  28
052C6:  MOVWF  FA9
052C8:  MOVFF  28E,FA8
052CC:  BCF    FA6.6
052CE:  BCF    FA6.7
052D0:  BSF    FA6.2
052D2:  MOVLW  55
052D4:  MOVWF  FA7
052D6:  MOVLW  AA
052D8:  MOVWF  FA7
052DA:  BSF    FA6.1
052DC:  BTFSC  FA6.1
052DE:  BRA    52DC
052E0:  BCF    FA6.2
052E2:  MOVF   00,W
052E4:  IORWF  FF2,F
....................             write_eeprom(0x29,RxD_Buff[43]);   //Communication Address
052E6:  MOVFF  FF2,00
052EA:  BCF    FF2.7
052EC:  CLRF   FAA
052EE:  MOVLW  29
052F0:  MOVWF  FA9
052F2:  MOVFF  28F,FA8
052F6:  BCF    FA6.6
052F8:  BCF    FA6.7
052FA:  BSF    FA6.2
052FC:  MOVLW  55
052FE:  MOVWF  FA7
05300:  MOVLW  AA
05302:  MOVWF  FA7
05304:  BSF    FA6.1
05306:  BTFSC  FA6.1
05308:  BRA    5306
0530A:  BCF    FA6.2
0530C:  MOVF   00,W
0530E:  IORWF  FF2,F
....................             write_eeprom(0x2A,RxD_Buff[44]);   //Communication Address
05310:  MOVFF  FF2,00
05314:  BCF    FF2.7
05316:  CLRF   FAA
05318:  MOVLW  2A
0531A:  MOVWF  FA9
0531C:  MOVFF  290,FA8
05320:  BCF    FA6.6
05322:  BCF    FA6.7
05324:  BSF    FA6.2
05326:  MOVLW  55
05328:  MOVWF  FA7
0532A:  MOVLW  AA
0532C:  MOVWF  FA7
0532E:  BSF    FA6.1
05330:  BTFSC  FA6.1
05332:  BRA    5330
05334:  BCF    FA6.2
05336:  MOVF   00,W
05338:  IORWF  FF2,F
....................             write_eeprom(0x2B,RxD_Buff[45]);   //Communication Address
0533A:  MOVFF  FF2,00
0533E:  BCF    FF2.7
05340:  CLRF   FAA
05342:  MOVLW  2B
05344:  MOVWF  FA9
05346:  MOVFF  291,FA8
0534A:  BCF    FA6.6
0534C:  BCF    FA6.7
0534E:  BSF    FA6.2
05350:  MOVLW  55
05352:  MOVWF  FA7
05354:  MOVLW  AA
05356:  MOVWF  FA7
05358:  BSF    FA6.1
0535A:  BTFSC  FA6.1
0535C:  BRA    535A
0535E:  BCF    FA6.2
05360:  MOVF   00,W
05362:  IORWF  FF2,F
....................             write_eeprom(0x2C,RxD_Buff[46]);   //Communication Address
05364:  MOVFF  FF2,00
05368:  BCF    FF2.7
0536A:  CLRF   FAA
0536C:  MOVLW  2C
0536E:  MOVWF  FA9
05370:  MOVFF  292,FA8
05374:  BCF    FA6.6
05376:  BCF    FA6.7
05378:  BSF    FA6.2
0537A:  MOVLW  55
0537C:  MOVWF  FA7
0537E:  MOVLW  AA
05380:  MOVWF  FA7
05382:  BSF    FA6.1
05384:  BTFSC  FA6.1
05386:  BRA    5384
05388:  BCF    FA6.2
0538A:  MOVF   00,W
0538C:  IORWF  FF2,F
....................             write_eeprom(0x2D,RxD_Buff[47]);   //Communication Address
0538E:  MOVFF  FF2,00
05392:  BCF    FF2.7
05394:  CLRF   FAA
05396:  MOVLW  2D
05398:  MOVWF  FA9
0539A:  MOVFF  293,FA8
0539E:  BCF    FA6.6
053A0:  BCF    FA6.7
053A2:  BSF    FA6.2
053A4:  MOVLW  55
053A6:  MOVWF  FA7
053A8:  MOVLW  AA
053AA:  MOVWF  FA7
053AC:  BSF    FA6.1
053AE:  BTFSC  FA6.1
053B0:  BRA    53AE
053B2:  BCF    FA6.2
053B4:  MOVF   00,W
053B6:  IORWF  FF2,F
....................             write_eeprom(0x2E,RxD_Buff[48]);   //Communication Address
053B8:  MOVFF  FF2,00
053BC:  BCF    FF2.7
053BE:  CLRF   FAA
053C0:  MOVLW  2E
053C2:  MOVWF  FA9
053C4:  MOVFF  294,FA8
053C8:  BCF    FA6.6
053CA:  BCF    FA6.7
053CC:  BSF    FA6.2
053CE:  MOVLW  55
053D0:  MOVWF  FA7
053D2:  MOVLW  AA
053D4:  MOVWF  FA7
053D6:  BSF    FA6.1
053D8:  BTFSC  FA6.1
053DA:  BRA    53D8
053DC:  BCF    FA6.2
053DE:  MOVF   00,W
053E0:  IORWF  FF2,F
....................             write_eeprom(0x2F,RxD_Buff[49]);   //Communication Address
053E2:  MOVFF  FF2,00
053E6:  BCF    FF2.7
053E8:  CLRF   FAA
053EA:  MOVLW  2F
053EC:  MOVWF  FA9
053EE:  MOVFF  295,FA8
053F2:  BCF    FA6.6
053F4:  BCF    FA6.7
053F6:  BSF    FA6.2
053F8:  MOVLW  55
053FA:  MOVWF  FA7
053FC:  MOVLW  AA
053FE:  MOVWF  FA7
05400:  BSF    FA6.1
05402:  BTFSC  FA6.1
05404:  BRA    5402
05406:  BCF    FA6.2
05408:  MOVF   00,W
0540A:  IORWF  FF2,F
....................             write_eeprom(0x30,RxD_Buff[50]);   //Communication Address
0540C:  MOVFF  FF2,00
05410:  BCF    FF2.7
05412:  CLRF   FAA
05414:  MOVLW  30
05416:  MOVWF  FA9
05418:  MOVFF  296,FA8
0541C:  BCF    FA6.6
0541E:  BCF    FA6.7
05420:  BSF    FA6.2
05422:  MOVLW  55
05424:  MOVWF  FA7
05426:  MOVLW  AA
05428:  MOVWF  FA7
0542A:  BSF    FA6.1
0542C:  BTFSC  FA6.1
0542E:  BRA    542C
05430:  BCF    FA6.2
05432:  MOVF   00,W
05434:  IORWF  FF2,F
....................             write_eeprom(0x31,RxD_Buff[51]);   //Communication Address
05436:  MOVFF  FF2,00
0543A:  BCF    FF2.7
0543C:  CLRF   FAA
0543E:  MOVLW  31
05440:  MOVWF  FA9
05442:  MOVFF  297,FA8
05446:  BCF    FA6.6
05448:  BCF    FA6.7
0544A:  BSF    FA6.2
0544C:  MOVLW  55
0544E:  MOVWF  FA7
05450:  MOVLW  AA
05452:  MOVWF  FA7
05454:  BSF    FA6.1
05456:  BTFSC  FA6.1
05458:  BRA    5456
0545A:  BCF    FA6.2
0545C:  MOVF   00,W
0545E:  IORWF  FF2,F
....................             
....................             int16  a = 0; 
....................             unsigned char  phonenum;
05460:  MOVLB  E
05462:  CLRF   x3D
05464:  CLRF   x3C
....................             for(; ; a++)
....................             {
....................                restart_wdt();
05466:  CLRWDT
....................                phonenum = RxD_Buff[52 + a];
05468:  MOVLW  98
0546A:  ADDWF  x3C,W
0546C:  MOVWF  FE9
0546E:  MOVLW  02
05470:  ADDWFC x3D,W
05472:  MOVWF  FEA
05474:  MOVFF  FEF,E3E
....................                if((phonenum == 0x0D) || (a > 15))
05478:  MOVF   x3E,W
0547A:  SUBLW  0D
0547C:  BZ    5488
0547E:  MOVF   x3D,F
05480:  BNZ   5488
05482:  MOVF   x3C,W
05484:  SUBLW  0F
05486:  BC    54D6
....................                {
....................                   sms_phonenumber[a] =  '\0' ;
05488:  MOVLW  72
0548A:  ADDWF  x3C,W
0548C:  MOVWF  FE9
0548E:  MOVLW  0A
05490:  ADDWFC x3D,W
05492:  MOVWF  FEA
05494:  CLRF   FEF
....................                   write_eeprom(0x32+a,phonenum);
05496:  MOVLW  32
05498:  ADDWF  x3C,W
0549A:  MOVWF  x45
0549C:  MOVLW  00
0549E:  ADDWFC x3D,W
054A0:  MOVWF  x46
054A2:  MOVF   FF2,W
054A4:  MOVWF  00
054A6:  BCF    FF2.7
054A8:  MOVFF  E46,FAA
054AC:  MOVFF  E45,FA9
054B0:  MOVFF  E3E,FA8
054B4:  BCF    FA6.6
054B6:  BCF    FA6.7
054B8:  BSF    FA6.2
054BA:  MOVLB  F
054BC:  MOVLW  55
054BE:  MOVWF  FA7
054C0:  MOVLW  AA
054C2:  MOVWF  FA7
054C4:  BSF    FA6.1
054C6:  BTFSC  FA6.1
054C8:  BRA    54C6
054CA:  BCF    FA6.2
054CC:  MOVF   00,W
054CE:  IORWF  FF2,F
....................                   break;
054D0:  BRA    552C
....................                }
054D2:  BRA    5520
054D4:  MOVLB  E
....................                else
....................                {
....................                   sms_phonenumber[a] = phonenum;
054D6:  MOVLW  72
054D8:  ADDWF  x3C,W
054DA:  MOVWF  FE9
054DC:  MOVLW  0A
054DE:  ADDWFC x3D,W
054E0:  MOVWF  FEA
054E2:  MOVFF  E3E,FEF
....................                   
....................                   write_eeprom(0x32+a,phonenum);
054E6:  MOVLW  32
054E8:  ADDWF  x3C,W
054EA:  MOVWF  x45
054EC:  MOVLW  00
054EE:  ADDWFC x3D,W
054F0:  MOVWF  x46
054F2:  MOVF   FF2,W
054F4:  MOVWF  00
054F6:  BCF    FF2.7
054F8:  MOVFF  E46,FAA
054FC:  MOVFF  E45,FA9
05500:  MOVFF  E3E,FA8
05504:  BCF    FA6.6
05506:  BCF    FA6.7
05508:  BSF    FA6.2
0550A:  MOVLB  F
0550C:  MOVLW  55
0550E:  MOVWF  FA7
05510:  MOVLW  AA
05512:  MOVWF  FA7
05514:  BSF    FA6.1
05516:  BTFSC  FA6.1
05518:  BRA    5516
0551A:  BCF    FA6.2
0551C:  MOVF   00,W
0551E:  IORWF  FF2,F
....................                }
05520:  MOVLB  E
05522:  INCF   x3C,F
05524:  BTFSC  FD8.2
05526:  INCF   x3D,F
05528:  BRA    5466
0552A:  MOVLB  F
....................             }
....................             
....................             TxD_Buff[0] = Address ;         //Address
0552C:  MOVFF  62,64
....................             TxD_Buff[1] = 0x21 ;            //return function code
05530:  MOVLW  21
05532:  MOVLB  0
05534:  MOVWF  x65
.................... 
....................             CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
05536:  MOVLB  E
05538:  CLRF   x47
0553A:  MOVLW  64
0553C:  MOVWF  x46
0553E:  MOVLW  02
05540:  MOVWF  x48
05542:  MOVLB  0
05544:  CALL   2656
.................... 
....................             TxD_Buff[2] = CRC_Hi ;
05548:  MOVFF  665,66
....................             TxD_Buff[3] = CRC_Lo ;
0554C:  MOVFF  664,67
.................... 
....................             output_bit(P485ctrl,1);
05550:  BSF    F8A.3
05552:  BCF    F93.3
....................             delay_ms(10);
05554:  MOVLW  0A
05556:  MOVLB  E
05558:  MOVWF  x45
0555A:  MOVLB  0
0555C:  CALL   0A24
.................... 
....................             putc(Txd_Buff[0]);
05560:  MOVF   x64,W
05562:  CALL   26AC
....................             putc(Txd_Buff[1]);
05566:  MOVF   x65,W
05568:  CALL   26AC
....................             putc(Txd_Buff[2]);
0556C:  MOVF   x66,W
0556E:  CALL   26AC
....................             putc(Txd_Buff[3]);
05572:  MOVF   x67,W
05574:  CALL   26AC
.................... 
....................             delay_ms(3);
05578:  MOVLW  03
0557A:  MOVLB  E
0557C:  MOVWF  x45
0557E:  MOVLB  0
05580:  CALL   0A24
....................             output_bit(P485ctrl,0);
05584:  BCF    F8A.3
05586:  BCF    F93.3
....................             
....................             reset_cpu();
05588:  RESET
....................             //Read_Config(); //jj
....................          }
0558A:  GOTO   6AE8
0558E:  MOVLB  2
....................          
....................          else if(RxD_Buff[1] == 0x22)///////////// WRITE Faultname /////////////////////
05590:  MOVF   x65,W
05592:  SUBLW  22
05594:  BTFSS  FD8.2
05596:  GOTO   6AE8
....................             {
....................                
....................                //SMS_Massage
....................                int16  i =4,j=0,k=0; //i =4 are first data from RxD_Buff[]
0559A:  MOVLB  E
0559C:  CLRF   x40
0559E:  MOVLW  04
055A0:  MOVWF  x3F
055A2:  CLRF   x42
055A4:  CLRF   x41
055A6:  CLRF   x44
055A8:  CLRF   x43
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
055AA:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
055AC:  MOVLW  64
055AE:  ADDWF  x3F,W
055B0:  MOVWF  FE9
055B2:  MOVLW  02
055B4:  ADDWFC x40,W
055B6:  MOVWF  FEA
055B8:  MOVF   FEF,W
055BA:  SUBLW  0D
055BC:  BZ    55C8
055BE:  MOVF   x42,F
055C0:  BNZ   55C8
055C2:  MOVF   x41,W
055C4:  SUBLW  1E
055C6:  BC    5608
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
055C8:  MOVLW  5D
055CA:  ADDWF  x3F,W
055CC:  MOVWF  x45
055CE:  MOVLW  00
055D0:  ADDWFC x40,W
055D2:  MOVWF  x46
055D4:  MOVF   FF2,W
055D6:  MOVWF  00
055D8:  BCF    FF2.7
055DA:  MOVFF  E46,FAA
055DE:  MOVFF  E45,FA9
055E2:  MOVLW  0D
055E4:  MOVWF  FA8
055E6:  BCF    FA6.6
055E8:  BCF    FA6.7
055EA:  BSF    FA6.2
055EC:  MOVLB  F
055EE:  MOVLW  55
055F0:  MOVWF  FA7
055F2:  MOVLW  AA
055F4:  MOVWF  FA7
055F6:  BSF    FA6.1
055F8:  BTFSC  FA6.1
055FA:  BRA    55F8
055FC:  BCF    FA6.2
055FE:  MOVF   00,W
05600:  IORWF  FF2,F
....................                      break;
05602:  BRA    5692
....................                   }
05604:  BRA    567A
05606:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage1[j] = RxD_Buff[i];
05608:  MOVLW  81
0560A:  ADDWF  x41,W
0560C:  MOVWF  01
0560E:  MOVLW  0A
05610:  ADDWFC x42,W
05612:  MOVWF  03
05614:  MOVLW  64
05616:  ADDWF  x3F,W
05618:  MOVWF  FE9
0561A:  MOVLW  02
0561C:  ADDWFC x40,W
0561E:  MOVWF  FEA
05620:  MOVFF  FEF,E47
05624:  MOVFF  03,FEA
05628:  MOVFF  01,FE9
0562C:  MOVFF  E47,FEF
....................                      
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05630:  MOVLW  5D
05632:  ADDWF  x3F,W
05634:  MOVWF  x45
05636:  MOVLW  00
05638:  ADDWFC x40,W
0563A:  MOVWF  x46
0563C:  MOVLW  64
0563E:  ADDWF  x3F,W
05640:  MOVWF  FE9
05642:  MOVLW  02
05644:  ADDWFC x40,W
05646:  MOVWF  FEA
05648:  MOVFF  FEF,E47
0564C:  MOVF   FF2,W
0564E:  MOVWF  00
05650:  BCF    FF2.7
05652:  MOVFF  E46,FAA
05656:  MOVFF  E45,FA9
0565A:  MOVFF  E47,FA8
0565E:  BCF    FA6.6
05660:  BCF    FA6.7
05662:  BSF    FA6.2
05664:  MOVLB  F
05666:  MOVLW  55
05668:  MOVWF  FA7
0566A:  MOVLW  AA
0566C:  MOVWF  FA7
0566E:  BSF    FA6.1
05670:  BTFSC  FA6.1
05672:  BRA    5670
05674:  BCF    FA6.2
05676:  MOVF   00,W
05678:  IORWF  FF2,F
....................                   }
0567A:  MOVLB  E
0567C:  MOVFF  E40,03
05680:  MOVF   x3F,W
05682:  INCF   x3F,F
05684:  BTFSC  FD8.2
05686:  INCF   x40,F
05688:  INCF   x41,F
0568A:  BTFSC  FD8.2
0568C:  INCF   x42,F
0568E:  BRA    55AA
05690:  MOVLB  F
....................                }
....................                SMS_Massage1[j] = '\0' ; // end string
05692:  MOVLW  81
05694:  MOVLB  E
05696:  ADDWF  x41,W
05698:  MOVWF  FE9
0569A:  MOVLW  0A
0569C:  ADDWFC x42,W
0569E:  MOVWF  FEA
056A0:  CLRF   FEF
....................                
....................                j=0;
056A2:  CLRF   x42
056A4:  CLRF   x41
....................                i++;
056A6:  INCF   x3F,F
056A8:  BTFSC  FD8.2
056AA:  INCF   x40,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
056AC:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
056AE:  MOVLW  64
056B0:  ADDWF  x3F,W
056B2:  MOVWF  FE9
056B4:  MOVLW  02
056B6:  ADDWFC x40,W
056B8:  MOVWF  FEA
056BA:  MOVF   FEF,W
056BC:  SUBLW  0D
056BE:  BZ    56CA
056C0:  MOVF   x42,F
056C2:  BNZ   56CA
056C4:  MOVF   x41,W
056C6:  SUBLW  1E
056C8:  BC    570A
....................                   {  
....................                      write_eeprom(0x5D+i,0x0D);
056CA:  MOVLW  5D
056CC:  ADDWF  x3F,W
056CE:  MOVWF  x45
056D0:  MOVLW  00
056D2:  ADDWFC x40,W
056D4:  MOVWF  x46
056D6:  MOVF   FF2,W
056D8:  MOVWF  00
056DA:  BCF    FF2.7
056DC:  MOVFF  E46,FAA
056E0:  MOVFF  E45,FA9
056E4:  MOVLW  0D
056E6:  MOVWF  FA8
056E8:  BCF    FA6.6
056EA:  BCF    FA6.7
056EC:  BSF    FA6.2
056EE:  MOVLB  F
056F0:  MOVLW  55
056F2:  MOVWF  FA7
056F4:  MOVLW  AA
056F6:  MOVWF  FA7
056F8:  BSF    FA6.1
056FA:  BTFSC  FA6.1
056FC:  BRA    56FA
056FE:  BCF    FA6.2
05700:  MOVF   00,W
05702:  IORWF  FF2,F
....................                      break;
05704:  BRA    5794
....................                   }
05706:  BRA    577C
05708:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage2[j] = RxD_Buff[i];
0570A:  MOVLW  A1
0570C:  ADDWF  x41,W
0570E:  MOVWF  01
05710:  MOVLW  0A
05712:  ADDWFC x42,W
05714:  MOVWF  03
05716:  MOVLW  64
05718:  ADDWF  x3F,W
0571A:  MOVWF  FE9
0571C:  MOVLW  02
0571E:  ADDWFC x40,W
05720:  MOVWF  FEA
05722:  MOVFF  FEF,E47
05726:  MOVFF  03,FEA
0572A:  MOVFF  01,FE9
0572E:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05732:  MOVLW  5D
05734:  ADDWF  x3F,W
05736:  MOVWF  x45
05738:  MOVLW  00
0573A:  ADDWFC x40,W
0573C:  MOVWF  x46
0573E:  MOVLW  64
05740:  ADDWF  x3F,W
05742:  MOVWF  FE9
05744:  MOVLW  02
05746:  ADDWFC x40,W
05748:  MOVWF  FEA
0574A:  MOVFF  FEF,E47
0574E:  MOVF   FF2,W
05750:  MOVWF  00
05752:  BCF    FF2.7
05754:  MOVFF  E46,FAA
05758:  MOVFF  E45,FA9
0575C:  MOVFF  E47,FA8
05760:  BCF    FA6.6
05762:  BCF    FA6.7
05764:  BSF    FA6.2
05766:  MOVLB  F
05768:  MOVLW  55
0576A:  MOVWF  FA7
0576C:  MOVLW  AA
0576E:  MOVWF  FA7
05770:  BSF    FA6.1
05772:  BTFSC  FA6.1
05774:  BRA    5772
05776:  BCF    FA6.2
05778:  MOVF   00,W
0577A:  IORWF  FF2,F
....................                   }
0577C:  MOVLB  E
0577E:  MOVFF  E40,03
05782:  MOVF   x3F,W
05784:  INCF   x3F,F
05786:  BTFSC  FD8.2
05788:  INCF   x40,F
0578A:  INCF   x41,F
0578C:  BTFSC  FD8.2
0578E:  INCF   x42,F
05790:  BRA    56AC
05792:  MOVLB  F
....................                }
....................                SMS_Massage2[j] = '\0' ; // end string
05794:  MOVLW  A1
05796:  MOVLB  E
05798:  ADDWF  x41,W
0579A:  MOVWF  FE9
0579C:  MOVLW  0A
0579E:  ADDWFC x42,W
057A0:  MOVWF  FEA
057A2:  CLRF   FEF
....................                
....................                j=0;
057A4:  CLRF   x42
057A6:  CLRF   x41
....................                i++;
057A8:  INCF   x3F,F
057AA:  BTFSC  FD8.2
057AC:  INCF   x40,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
057AE:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
057B0:  MOVLW  64
057B2:  ADDWF  x3F,W
057B4:  MOVWF  FE9
057B6:  MOVLW  02
057B8:  ADDWFC x40,W
057BA:  MOVWF  FEA
057BC:  MOVF   FEF,W
057BE:  SUBLW  0D
057C0:  BZ    57CC
057C2:  MOVF   x42,F
057C4:  BNZ   57CC
057C6:  MOVF   x41,W
057C8:  SUBLW  1E
057CA:  BC    580C
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
057CC:  MOVLW  5D
057CE:  ADDWF  x3F,W
057D0:  MOVWF  x45
057D2:  MOVLW  00
057D4:  ADDWFC x40,W
057D6:  MOVWF  x46
057D8:  MOVF   FF2,W
057DA:  MOVWF  00
057DC:  BCF    FF2.7
057DE:  MOVFF  E46,FAA
057E2:  MOVFF  E45,FA9
057E6:  MOVLW  0D
057E8:  MOVWF  FA8
057EA:  BCF    FA6.6
057EC:  BCF    FA6.7
057EE:  BSF    FA6.2
057F0:  MOVLB  F
057F2:  MOVLW  55
057F4:  MOVWF  FA7
057F6:  MOVLW  AA
057F8:  MOVWF  FA7
057FA:  BSF    FA6.1
057FC:  BTFSC  FA6.1
057FE:  BRA    57FC
05800:  BCF    FA6.2
05802:  MOVF   00,W
05804:  IORWF  FF2,F
....................                      break;
05806:  BRA    5896
....................                   }
05808:  BRA    587E
0580A:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage3[j] = RxD_Buff[i];
0580C:  MOVLW  C1
0580E:  ADDWF  x41,W
05810:  MOVWF  01
05812:  MOVLW  0A
05814:  ADDWFC x42,W
05816:  MOVWF  03
05818:  MOVLW  64
0581A:  ADDWF  x3F,W
0581C:  MOVWF  FE9
0581E:  MOVLW  02
05820:  ADDWFC x40,W
05822:  MOVWF  FEA
05824:  MOVFF  FEF,E47
05828:  MOVFF  03,FEA
0582C:  MOVFF  01,FE9
05830:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05834:  MOVLW  5D
05836:  ADDWF  x3F,W
05838:  MOVWF  x45
0583A:  MOVLW  00
0583C:  ADDWFC x40,W
0583E:  MOVWF  x46
05840:  MOVLW  64
05842:  ADDWF  x3F,W
05844:  MOVWF  FE9
05846:  MOVLW  02
05848:  ADDWFC x40,W
0584A:  MOVWF  FEA
0584C:  MOVFF  FEF,E47
05850:  MOVF   FF2,W
05852:  MOVWF  00
05854:  BCF    FF2.7
05856:  MOVFF  E46,FAA
0585A:  MOVFF  E45,FA9
0585E:  MOVFF  E47,FA8
05862:  BCF    FA6.6
05864:  BCF    FA6.7
05866:  BSF    FA6.2
05868:  MOVLB  F
0586A:  MOVLW  55
0586C:  MOVWF  FA7
0586E:  MOVLW  AA
05870:  MOVWF  FA7
05872:  BSF    FA6.1
05874:  BTFSC  FA6.1
05876:  BRA    5874
05878:  BCF    FA6.2
0587A:  MOVF   00,W
0587C:  IORWF  FF2,F
....................                   }
0587E:  MOVLB  E
05880:  MOVFF  E40,03
05884:  MOVF   x3F,W
05886:  INCF   x3F,F
05888:  BTFSC  FD8.2
0588A:  INCF   x40,F
0588C:  INCF   x41,F
0588E:  BTFSC  FD8.2
05890:  INCF   x42,F
05892:  BRA    57AE
05894:  MOVLB  F
....................                }
....................                SMS_Massage3[j] = '\0' ; // end string
05896:  MOVLW  C1
05898:  MOVLB  E
0589A:  ADDWF  x41,W
0589C:  MOVWF  FE9
0589E:  MOVLW  0A
058A0:  ADDWFC x42,W
058A2:  MOVWF  FEA
058A4:  CLRF   FEF
....................                
....................                j=0;
058A6:  CLRF   x42
058A8:  CLRF   x41
....................                i++;
058AA:  INCF   x3F,F
058AC:  BTFSC  FD8.2
058AE:  INCF   x40,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
058B0:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
058B2:  MOVLW  64
058B4:  ADDWF  x3F,W
058B6:  MOVWF  FE9
058B8:  MOVLW  02
058BA:  ADDWFC x40,W
058BC:  MOVWF  FEA
058BE:  MOVF   FEF,W
058C0:  SUBLW  0D
058C2:  BZ    58CE
058C4:  MOVF   x42,F
058C6:  BNZ   58CE
058C8:  MOVF   x41,W
058CA:  SUBLW  1E
058CC:  BC    590E
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
058CE:  MOVLW  5D
058D0:  ADDWF  x3F,W
058D2:  MOVWF  x45
058D4:  MOVLW  00
058D6:  ADDWFC x40,W
058D8:  MOVWF  x46
058DA:  MOVF   FF2,W
058DC:  MOVWF  00
058DE:  BCF    FF2.7
058E0:  MOVFF  E46,FAA
058E4:  MOVFF  E45,FA9
058E8:  MOVLW  0D
058EA:  MOVWF  FA8
058EC:  BCF    FA6.6
058EE:  BCF    FA6.7
058F0:  BSF    FA6.2
058F2:  MOVLB  F
058F4:  MOVLW  55
058F6:  MOVWF  FA7
058F8:  MOVLW  AA
058FA:  MOVWF  FA7
058FC:  BSF    FA6.1
058FE:  BTFSC  FA6.1
05900:  BRA    58FE
05902:  BCF    FA6.2
05904:  MOVF   00,W
05906:  IORWF  FF2,F
....................                      break;
05908:  BRA    5998
....................                   }
0590A:  BRA    5980
0590C:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage4[j] = RxD_Buff[i];
0590E:  MOVLW  E1
05910:  ADDWF  x41,W
05912:  MOVWF  01
05914:  MOVLW  0A
05916:  ADDWFC x42,W
05918:  MOVWF  03
0591A:  MOVLW  64
0591C:  ADDWF  x3F,W
0591E:  MOVWF  FE9
05920:  MOVLW  02
05922:  ADDWFC x40,W
05924:  MOVWF  FEA
05926:  MOVFF  FEF,E47
0592A:  MOVFF  03,FEA
0592E:  MOVFF  01,FE9
05932:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05936:  MOVLW  5D
05938:  ADDWF  x3F,W
0593A:  MOVWF  x45
0593C:  MOVLW  00
0593E:  ADDWFC x40,W
05940:  MOVWF  x46
05942:  MOVLW  64
05944:  ADDWF  x3F,W
05946:  MOVWF  FE9
05948:  MOVLW  02
0594A:  ADDWFC x40,W
0594C:  MOVWF  FEA
0594E:  MOVFF  FEF,E47
05952:  MOVF   FF2,W
05954:  MOVWF  00
05956:  BCF    FF2.7
05958:  MOVFF  E46,FAA
0595C:  MOVFF  E45,FA9
05960:  MOVFF  E47,FA8
05964:  BCF    FA6.6
05966:  BCF    FA6.7
05968:  BSF    FA6.2
0596A:  MOVLB  F
0596C:  MOVLW  55
0596E:  MOVWF  FA7
05970:  MOVLW  AA
05972:  MOVWF  FA7
05974:  BSF    FA6.1
05976:  BTFSC  FA6.1
05978:  BRA    5976
0597A:  BCF    FA6.2
0597C:  MOVF   00,W
0597E:  IORWF  FF2,F
....................                   }
05980:  MOVLB  E
05982:  MOVFF  E40,03
05986:  MOVF   x3F,W
05988:  INCF   x3F,F
0598A:  BTFSC  FD8.2
0598C:  INCF   x40,F
0598E:  INCF   x41,F
05990:  BTFSC  FD8.2
05992:  INCF   x42,F
05994:  BRA    58B0
05996:  MOVLB  F
....................                }
....................                SMS_Massage4[j] = '\0' ; // end string
05998:  MOVLW  E1
0599A:  MOVLB  E
0599C:  ADDWF  x41,W
0599E:  MOVWF  FE9
059A0:  MOVLW  0A
059A2:  ADDWFC x42,W
059A4:  MOVWF  FEA
059A6:  CLRF   FEF
....................                
....................                j=0;
059A8:  CLRF   x42
059AA:  CLRF   x41
....................                i++;
059AC:  INCF   x3F,F
059AE:  BTFSC  FD8.2
059B0:  INCF   x40,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
059B2:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
059B4:  MOVLW  64
059B6:  ADDWF  x3F,W
059B8:  MOVWF  FE9
059BA:  MOVLW  02
059BC:  ADDWFC x40,W
059BE:  MOVWF  FEA
059C0:  MOVF   FEF,W
059C2:  SUBLW  0D
059C4:  BZ    59D0
059C6:  MOVF   x42,F
059C8:  BNZ   59D0
059CA:  MOVF   x41,W
059CC:  SUBLW  1E
059CE:  BC    5A10
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
059D0:  MOVLW  5D
059D2:  ADDWF  x3F,W
059D4:  MOVWF  x45
059D6:  MOVLW  00
059D8:  ADDWFC x40,W
059DA:  MOVWF  x46
059DC:  MOVF   FF2,W
059DE:  MOVWF  00
059E0:  BCF    FF2.7
059E2:  MOVFF  E46,FAA
059E6:  MOVFF  E45,FA9
059EA:  MOVLW  0D
059EC:  MOVWF  FA8
059EE:  BCF    FA6.6
059F0:  BCF    FA6.7
059F2:  BSF    FA6.2
059F4:  MOVLB  F
059F6:  MOVLW  55
059F8:  MOVWF  FA7
059FA:  MOVLW  AA
059FC:  MOVWF  FA7
059FE:  BSF    FA6.1
05A00:  BTFSC  FA6.1
05A02:  BRA    5A00
05A04:  BCF    FA6.2
05A06:  MOVF   00,W
05A08:  IORWF  FF2,F
....................                      break;
05A0A:  BRA    5A9A
....................                   }
05A0C:  BRA    5A82
05A0E:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage5[j] = RxD_Buff[i];
05A10:  MOVLW  01
05A12:  ADDWF  x41,W
05A14:  MOVWF  01
05A16:  MOVLW  0B
05A18:  ADDWFC x42,W
05A1A:  MOVWF  03
05A1C:  MOVLW  64
05A1E:  ADDWF  x3F,W
05A20:  MOVWF  FE9
05A22:  MOVLW  02
05A24:  ADDWFC x40,W
05A26:  MOVWF  FEA
05A28:  MOVFF  FEF,E47
05A2C:  MOVFF  03,FEA
05A30:  MOVFF  01,FE9
05A34:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05A38:  MOVLW  5D
05A3A:  ADDWF  x3F,W
05A3C:  MOVWF  x45
05A3E:  MOVLW  00
05A40:  ADDWFC x40,W
05A42:  MOVWF  x46
05A44:  MOVLW  64
05A46:  ADDWF  x3F,W
05A48:  MOVWF  FE9
05A4A:  MOVLW  02
05A4C:  ADDWFC x40,W
05A4E:  MOVWF  FEA
05A50:  MOVFF  FEF,E47
05A54:  MOVF   FF2,W
05A56:  MOVWF  00
05A58:  BCF    FF2.7
05A5A:  MOVFF  E46,FAA
05A5E:  MOVFF  E45,FA9
05A62:  MOVFF  E47,FA8
05A66:  BCF    FA6.6
05A68:  BCF    FA6.7
05A6A:  BSF    FA6.2
05A6C:  MOVLB  F
05A6E:  MOVLW  55
05A70:  MOVWF  FA7
05A72:  MOVLW  AA
05A74:  MOVWF  FA7
05A76:  BSF    FA6.1
05A78:  BTFSC  FA6.1
05A7A:  BRA    5A78
05A7C:  BCF    FA6.2
05A7E:  MOVF   00,W
05A80:  IORWF  FF2,F
....................                   }
05A82:  MOVLB  E
05A84:  MOVFF  E40,03
05A88:  MOVF   x3F,W
05A8A:  INCF   x3F,F
05A8C:  BTFSC  FD8.2
05A8E:  INCF   x40,F
05A90:  INCF   x41,F
05A92:  BTFSC  FD8.2
05A94:  INCF   x42,F
05A96:  BRA    59B2
05A98:  MOVLB  F
....................                }
....................                SMS_Massage5[j] = '\0' ; // end string
05A9A:  MOVLW  01
05A9C:  MOVLB  E
05A9E:  ADDWF  x41,W
05AA0:  MOVWF  FE9
05AA2:  MOVLW  0B
05AA4:  ADDWFC x42,W
05AA6:  MOVWF  FEA
05AA8:  CLRF   FEF
....................                
....................                j=0;
05AAA:  CLRF   x42
05AAC:  CLRF   x41
....................                i++;
05AAE:  INCF   x3F,F
05AB0:  BTFSC  FD8.2
05AB2:  INCF   x40,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05AB4:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05AB6:  MOVLW  64
05AB8:  ADDWF  x3F,W
05ABA:  MOVWF  FE9
05ABC:  MOVLW  02
05ABE:  ADDWFC x40,W
05AC0:  MOVWF  FEA
05AC2:  MOVF   FEF,W
05AC4:  SUBLW  0D
05AC6:  BZ    5AD2
05AC8:  MOVF   x42,F
05ACA:  BNZ   5AD2
05ACC:  MOVF   x41,W
05ACE:  SUBLW  1E
05AD0:  BC    5B12
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05AD2:  MOVLW  5D
05AD4:  ADDWF  x3F,W
05AD6:  MOVWF  x45
05AD8:  MOVLW  00
05ADA:  ADDWFC x40,W
05ADC:  MOVWF  x46
05ADE:  MOVF   FF2,W
05AE0:  MOVWF  00
05AE2:  BCF    FF2.7
05AE4:  MOVFF  E46,FAA
05AE8:  MOVFF  E45,FA9
05AEC:  MOVLW  0D
05AEE:  MOVWF  FA8
05AF0:  BCF    FA6.6
05AF2:  BCF    FA6.7
05AF4:  BSF    FA6.2
05AF6:  MOVLB  F
05AF8:  MOVLW  55
05AFA:  MOVWF  FA7
05AFC:  MOVLW  AA
05AFE:  MOVWF  FA7
05B00:  BSF    FA6.1
05B02:  BTFSC  FA6.1
05B04:  BRA    5B02
05B06:  BCF    FA6.2
05B08:  MOVF   00,W
05B0A:  IORWF  FF2,F
....................                      break;
05B0C:  BRA    5BA0
....................                   }
05B0E:  BRA    5B88
05B10:  MOVLB  E
....................                   else
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05B12:  MOVLW  5D
05B14:  ADDWF  x3F,W
05B16:  MOVWF  x45
05B18:  MOVLW  00
05B1A:  ADDWFC x40,W
05B1C:  MOVWF  x46
05B1E:  MOVLW  64
05B20:  ADDWF  x3F,W
05B22:  MOVWF  FE9
05B24:  MOVLW  02
05B26:  ADDWFC x40,W
05B28:  MOVWF  FEA
05B2A:  MOVFF  FEF,E47
05B2E:  MOVF   FF2,W
05B30:  MOVWF  00
05B32:  BCF    FF2.7
05B34:  MOVFF  E46,FAA
05B38:  MOVFF  E45,FA9
05B3C:  MOVFF  E47,FA8
05B40:  BCF    FA6.6
05B42:  BCF    FA6.7
05B44:  BSF    FA6.2
05B46:  MOVLB  F
05B48:  MOVLW  55
05B4A:  MOVWF  FA7
05B4C:  MOVLW  AA
05B4E:  MOVWF  FA7
05B50:  BSF    FA6.1
05B52:  BTFSC  FA6.1
05B54:  BRA    5B52
05B56:  BCF    FA6.2
05B58:  MOVF   00,W
05B5A:  IORWF  FF2,F
....................                      SMS_Massage6[j] = RxD_Buff[i];
05B5C:  MOVLW  21
05B5E:  MOVLB  E
05B60:  ADDWF  x41,W
05B62:  MOVWF  01
05B64:  MOVLW  0B
05B66:  ADDWFC x42,W
05B68:  MOVWF  03
05B6A:  MOVLW  64
05B6C:  ADDWF  x3F,W
05B6E:  MOVWF  FE9
05B70:  MOVLW  02
05B72:  ADDWFC x40,W
05B74:  MOVWF  FEA
05B76:  MOVFF  FEF,E47
05B7A:  MOVFF  03,FEA
05B7E:  MOVFF  01,FE9
05B82:  MOVFF  E47,FEF
05B86:  MOVLB  F
....................                   }
05B88:  MOVLB  E
05B8A:  MOVFF  E40,03
05B8E:  MOVF   x3F,W
05B90:  INCF   x3F,F
05B92:  BTFSC  FD8.2
05B94:  INCF   x40,F
05B96:  INCF   x41,F
05B98:  BTFSC  FD8.2
05B9A:  INCF   x42,F
05B9C:  BRA    5AB4
05B9E:  MOVLB  F
....................                }
....................                SMS_Massage6[j] = '\0' ; // end string
05BA0:  MOVLW  21
05BA2:  MOVLB  E
05BA4:  ADDWF  x41,W
05BA6:  MOVWF  FE9
05BA8:  MOVLW  0B
05BAA:  ADDWFC x42,W
05BAC:  MOVWF  FEA
05BAE:  CLRF   FEF
....................                
....................                j=0;
05BB0:  CLRF   x42
05BB2:  CLRF   x41
....................                i++;
05BB4:  INCF   x3F,F
05BB6:  BTFSC  FD8.2
05BB8:  INCF   x40,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05BBA:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05BBC:  MOVLW  64
05BBE:  ADDWF  x3F,W
05BC0:  MOVWF  FE9
05BC2:  MOVLW  02
05BC4:  ADDWFC x40,W
05BC6:  MOVWF  FEA
05BC8:  MOVF   FEF,W
05BCA:  SUBLW  0D
05BCC:  BZ    5BD8
05BCE:  MOVF   x42,F
05BD0:  BNZ   5BD8
05BD2:  MOVF   x41,W
05BD4:  SUBLW  1E
05BD6:  BC    5C18
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05BD8:  MOVLW  5D
05BDA:  ADDWF  x3F,W
05BDC:  MOVWF  x45
05BDE:  MOVLW  00
05BE0:  ADDWFC x40,W
05BE2:  MOVWF  x46
05BE4:  MOVF   FF2,W
05BE6:  MOVWF  00
05BE8:  BCF    FF2.7
05BEA:  MOVFF  E46,FAA
05BEE:  MOVFF  E45,FA9
05BF2:  MOVLW  0D
05BF4:  MOVWF  FA8
05BF6:  BCF    FA6.6
05BF8:  BCF    FA6.7
05BFA:  BSF    FA6.2
05BFC:  MOVLB  F
05BFE:  MOVLW  55
05C00:  MOVWF  FA7
05C02:  MOVLW  AA
05C04:  MOVWF  FA7
05C06:  BSF    FA6.1
05C08:  BTFSC  FA6.1
05C0A:  BRA    5C08
05C0C:  BCF    FA6.2
05C0E:  MOVF   00,W
05C10:  IORWF  FF2,F
....................                      break;
05C12:  BRA    5CA2
....................                   }
05C14:  BRA    5C8A
05C16:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage7[j] = RxD_Buff[i];
05C18:  MOVLW  41
05C1A:  ADDWF  x41,W
05C1C:  MOVWF  01
05C1E:  MOVLW  0B
05C20:  ADDWFC x42,W
05C22:  MOVWF  03
05C24:  MOVLW  64
05C26:  ADDWF  x3F,W
05C28:  MOVWF  FE9
05C2A:  MOVLW  02
05C2C:  ADDWFC x40,W
05C2E:  MOVWF  FEA
05C30:  MOVFF  FEF,E47
05C34:  MOVFF  03,FEA
05C38:  MOVFF  01,FE9
05C3C:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05C40:  MOVLW  5D
05C42:  ADDWF  x3F,W
05C44:  MOVWF  x45
05C46:  MOVLW  00
05C48:  ADDWFC x40,W
05C4A:  MOVWF  x46
05C4C:  MOVLW  64
05C4E:  ADDWF  x3F,W
05C50:  MOVWF  FE9
05C52:  MOVLW  02
05C54:  ADDWFC x40,W
05C56:  MOVWF  FEA
05C58:  MOVFF  FEF,E47
05C5C:  MOVF   FF2,W
05C5E:  MOVWF  00
05C60:  BCF    FF2.7
05C62:  MOVFF  E46,FAA
05C66:  MOVFF  E45,FA9
05C6A:  MOVFF  E47,FA8
05C6E:  BCF    FA6.6
05C70:  BCF    FA6.7
05C72:  BSF    FA6.2
05C74:  MOVLB  F
05C76:  MOVLW  55
05C78:  MOVWF  FA7
05C7A:  MOVLW  AA
05C7C:  MOVWF  FA7
05C7E:  BSF    FA6.1
05C80:  BTFSC  FA6.1
05C82:  BRA    5C80
05C84:  BCF    FA6.2
05C86:  MOVF   00,W
05C88:  IORWF  FF2,F
....................                   }
05C8A:  MOVLB  E
05C8C:  MOVFF  E40,03
05C90:  MOVF   x3F,W
05C92:  INCF   x3F,F
05C94:  BTFSC  FD8.2
05C96:  INCF   x40,F
05C98:  INCF   x41,F
05C9A:  BTFSC  FD8.2
05C9C:  INCF   x42,F
05C9E:  BRA    5BBA
05CA0:  MOVLB  F
....................                }
....................                SMS_Massage7[j] = '\0' ; // end string
05CA2:  MOVLW  41
05CA4:  MOVLB  E
05CA6:  ADDWF  x41,W
05CA8:  MOVWF  FE9
05CAA:  MOVLW  0B
05CAC:  ADDWFC x42,W
05CAE:  MOVWF  FEA
05CB0:  CLRF   FEF
....................                
....................                j=0;
05CB2:  CLRF   x42
05CB4:  CLRF   x41
....................                i++;
05CB6:  INCF   x3F,F
05CB8:  BTFSC  FD8.2
05CBA:  INCF   x40,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05CBC:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05CBE:  MOVLW  64
05CC0:  ADDWF  x3F,W
05CC2:  MOVWF  FE9
05CC4:  MOVLW  02
05CC6:  ADDWFC x40,W
05CC8:  MOVWF  FEA
05CCA:  MOVF   FEF,W
05CCC:  SUBLW  0D
05CCE:  BZ    5CDA
05CD0:  MOVF   x42,F
05CD2:  BNZ   5CDA
05CD4:  MOVF   x41,W
05CD6:  SUBLW  1E
05CD8:  BC    5D1A
....................                   {
....................                      write_eeprom(0x5D+i,0x0D);
05CDA:  MOVLW  5D
05CDC:  ADDWF  x3F,W
05CDE:  MOVWF  x45
05CE0:  MOVLW  00
05CE2:  ADDWFC x40,W
05CE4:  MOVWF  x46
05CE6:  MOVF   FF2,W
05CE8:  MOVWF  00
05CEA:  BCF    FF2.7
05CEC:  MOVFF  E46,FAA
05CF0:  MOVFF  E45,FA9
05CF4:  MOVLW  0D
05CF6:  MOVWF  FA8
05CF8:  BCF    FA6.6
05CFA:  BCF    FA6.7
05CFC:  BSF    FA6.2
05CFE:  MOVLB  F
05D00:  MOVLW  55
05D02:  MOVWF  FA7
05D04:  MOVLW  AA
05D06:  MOVWF  FA7
05D08:  BSF    FA6.1
05D0A:  BTFSC  FA6.1
05D0C:  BRA    5D0A
05D0E:  BCF    FA6.2
05D10:  MOVF   00,W
05D12:  IORWF  FF2,F
....................                      break;
05D14:  BRA    5DA4
....................                   }
05D16:  BRA    5D8C
05D18:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage8[j] = RxD_Buff[i];
05D1A:  MOVLW  61
05D1C:  ADDWF  x41,W
05D1E:  MOVWF  01
05D20:  MOVLW  0B
05D22:  ADDWFC x42,W
05D24:  MOVWF  03
05D26:  MOVLW  64
05D28:  ADDWF  x3F,W
05D2A:  MOVWF  FE9
05D2C:  MOVLW  02
05D2E:  ADDWFC x40,W
05D30:  MOVWF  FEA
05D32:  MOVFF  FEF,E47
05D36:  MOVFF  03,FEA
05D3A:  MOVFF  01,FE9
05D3E:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05D42:  MOVLW  5D
05D44:  ADDWF  x3F,W
05D46:  MOVWF  x45
05D48:  MOVLW  00
05D4A:  ADDWFC x40,W
05D4C:  MOVWF  x46
05D4E:  MOVLW  64
05D50:  ADDWF  x3F,W
05D52:  MOVWF  FE9
05D54:  MOVLW  02
05D56:  ADDWFC x40,W
05D58:  MOVWF  FEA
05D5A:  MOVFF  FEF,E47
05D5E:  MOVF   FF2,W
05D60:  MOVWF  00
05D62:  BCF    FF2.7
05D64:  MOVFF  E46,FAA
05D68:  MOVFF  E45,FA9
05D6C:  MOVFF  E47,FA8
05D70:  BCF    FA6.6
05D72:  BCF    FA6.7
05D74:  BSF    FA6.2
05D76:  MOVLB  F
05D78:  MOVLW  55
05D7A:  MOVWF  FA7
05D7C:  MOVLW  AA
05D7E:  MOVWF  FA7
05D80:  BSF    FA6.1
05D82:  BTFSC  FA6.1
05D84:  BRA    5D82
05D86:  BCF    FA6.2
05D88:  MOVF   00,W
05D8A:  IORWF  FF2,F
....................                   }
05D8C:  MOVLB  E
05D8E:  MOVFF  E40,03
05D92:  MOVF   x3F,W
05D94:  INCF   x3F,F
05D96:  BTFSC  FD8.2
05D98:  INCF   x40,F
05D9A:  INCF   x41,F
05D9C:  BTFSC  FD8.2
05D9E:  INCF   x42,F
05DA0:  BRA    5CBC
05DA2:  MOVLB  F
....................                }
....................                SMS_Massage8[j] = '\0' ; // end string
05DA4:  MOVLW  61
05DA6:  MOVLB  E
05DA8:  ADDWF  x41,W
05DAA:  MOVWF  FE9
05DAC:  MOVLW  0B
05DAE:  ADDWFC x42,W
05DB0:  MOVWF  FEA
05DB2:  CLRF   FEF
....................                
....................                /////////////////////////////////////////////
....................                j=0;
05DB4:  CLRF   x42
05DB6:  CLRF   x41
....................                i++;
05DB8:  INCF   x3F,F
05DBA:  BTFSC  FD8.2
05DBC:  INCF   x40,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05DBE:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05DC0:  MOVLW  64
05DC2:  ADDWF  x3F,W
05DC4:  MOVWF  FE9
05DC6:  MOVLW  02
05DC8:  ADDWFC x40,W
05DCA:  MOVWF  FEA
05DCC:  MOVF   FEF,W
05DCE:  SUBLW  0D
05DD0:  BZ    5DDC
05DD2:  MOVF   x42,F
05DD4:  BNZ   5DDC
05DD6:  MOVF   x41,W
05DD8:  SUBLW  1E
05DDA:  BC    5E2C
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05DDC:  MOVLW  5D
05DDE:  ADDWF  x3F,W
05DE0:  MOVWF  x45
05DE2:  MOVLW  00
05DE4:  ADDWFC x40,W
05DE6:  MOVWF  x46
05DE8:  MOVLW  64
05DEA:  ADDWF  x3F,W
05DEC:  MOVWF  FE9
05DEE:  MOVLW  02
05DF0:  ADDWFC x40,W
05DF2:  MOVWF  FEA
05DF4:  MOVFF  FEF,E47
05DF8:  MOVF   FF2,W
05DFA:  MOVWF  00
05DFC:  BCF    FF2.7
05DFE:  MOVFF  E46,FAA
05E02:  MOVFF  E45,FA9
05E06:  MOVFF  E47,FA8
05E0A:  BCF    FA6.6
05E0C:  BCF    FA6.7
05E0E:  BSF    FA6.2
05E10:  MOVLB  F
05E12:  MOVLW  55
05E14:  MOVWF  FA7
05E16:  MOVLW  AA
05E18:  MOVWF  FA7
05E1A:  BSF    FA6.1
05E1C:  BTFSC  FA6.1
05E1E:  BRA    5E1C
05E20:  BCF    FA6.2
05E22:  MOVF   00,W
05E24:  IORWF  FF2,F
....................                      break;
05E26:  BRA    5EB6
....................                   }
05E28:  BRA    5E9E
05E2A:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage9[j] = RxD_Buff[i];
05E2C:  MOVLW  81
05E2E:  ADDWF  x41,W
05E30:  MOVWF  01
05E32:  MOVLW  0B
05E34:  ADDWFC x42,W
05E36:  MOVWF  03
05E38:  MOVLW  64
05E3A:  ADDWF  x3F,W
05E3C:  MOVWF  FE9
05E3E:  MOVLW  02
05E40:  ADDWFC x40,W
05E42:  MOVWF  FEA
05E44:  MOVFF  FEF,E47
05E48:  MOVFF  03,FEA
05E4C:  MOVFF  01,FE9
05E50:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05E54:  MOVLW  5D
05E56:  ADDWF  x3F,W
05E58:  MOVWF  x45
05E5A:  MOVLW  00
05E5C:  ADDWFC x40,W
05E5E:  MOVWF  x46
05E60:  MOVLW  64
05E62:  ADDWF  x3F,W
05E64:  MOVWF  FE9
05E66:  MOVLW  02
05E68:  ADDWFC x40,W
05E6A:  MOVWF  FEA
05E6C:  MOVFF  FEF,E47
05E70:  MOVF   FF2,W
05E72:  MOVWF  00
05E74:  BCF    FF2.7
05E76:  MOVFF  E46,FAA
05E7A:  MOVFF  E45,FA9
05E7E:  MOVFF  E47,FA8
05E82:  BCF    FA6.6
05E84:  BCF    FA6.7
05E86:  BSF    FA6.2
05E88:  MOVLB  F
05E8A:  MOVLW  55
05E8C:  MOVWF  FA7
05E8E:  MOVLW  AA
05E90:  MOVWF  FA7
05E92:  BSF    FA6.1
05E94:  BTFSC  FA6.1
05E96:  BRA    5E94
05E98:  BCF    FA6.2
05E9A:  MOVF   00,W
05E9C:  IORWF  FF2,F
....................                   }
05E9E:  MOVLB  E
05EA0:  MOVFF  E40,03
05EA4:  MOVF   x3F,W
05EA6:  INCF   x3F,F
05EA8:  BTFSC  FD8.2
05EAA:  INCF   x40,F
05EAC:  INCF   x41,F
05EAE:  BTFSC  FD8.2
05EB0:  INCF   x42,F
05EB2:  BRA    5DBE
05EB4:  MOVLB  F
....................                }
....................                SMS_Massage9[j] = '\0' ; // end string
05EB6:  MOVLW  81
05EB8:  MOVLB  E
05EBA:  ADDWF  x41,W
05EBC:  MOVWF  FE9
05EBE:  MOVLW  0B
05EC0:  ADDWFC x42,W
05EC2:  MOVWF  FEA
05EC4:  CLRF   FEF
....................                j=0;
05EC6:  CLRF   x42
05EC8:  CLRF   x41
....................                i++;
05ECA:  INCF   x3F,F
05ECC:  BTFSC  FD8.2
05ECE:  INCF   x40,F
....................                
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05ED0:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05ED2:  MOVLW  64
05ED4:  ADDWF  x3F,W
05ED6:  MOVWF  FE9
05ED8:  MOVLW  02
05EDA:  ADDWFC x40,W
05EDC:  MOVWF  FEA
05EDE:  MOVF   FEF,W
05EE0:  SUBLW  0D
05EE2:  BZ    5EEE
05EE4:  MOVF   x42,F
05EE6:  BNZ   5EEE
05EE8:  MOVF   x41,W
05EEA:  SUBLW  1E
05EEC:  BC    5F3E
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05EEE:  MOVLW  5D
05EF0:  ADDWF  x3F,W
05EF2:  MOVWF  x45
05EF4:  MOVLW  00
05EF6:  ADDWFC x40,W
05EF8:  MOVWF  x46
05EFA:  MOVLW  64
05EFC:  ADDWF  x3F,W
05EFE:  MOVWF  FE9
05F00:  MOVLW  02
05F02:  ADDWFC x40,W
05F04:  MOVWF  FEA
05F06:  MOVFF  FEF,E47
05F0A:  MOVF   FF2,W
05F0C:  MOVWF  00
05F0E:  BCF    FF2.7
05F10:  MOVFF  E46,FAA
05F14:  MOVFF  E45,FA9
05F18:  MOVFF  E47,FA8
05F1C:  BCF    FA6.6
05F1E:  BCF    FA6.7
05F20:  BSF    FA6.2
05F22:  MOVLB  F
05F24:  MOVLW  55
05F26:  MOVWF  FA7
05F28:  MOVLW  AA
05F2A:  MOVWF  FA7
05F2C:  BSF    FA6.1
05F2E:  BTFSC  FA6.1
05F30:  BRA    5F2E
05F32:  BCF    FA6.2
05F34:  MOVF   00,W
05F36:  IORWF  FF2,F
....................                      break;
05F38:  BRA    5FC8
....................                   }
05F3A:  BRA    5FB0
05F3C:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage10[j] = RxD_Buff[i];
05F3E:  MOVLW  A1
05F40:  ADDWF  x41,W
05F42:  MOVWF  01
05F44:  MOVLW  0B
05F46:  ADDWFC x42,W
05F48:  MOVWF  03
05F4A:  MOVLW  64
05F4C:  ADDWF  x3F,W
05F4E:  MOVWF  FE9
05F50:  MOVLW  02
05F52:  ADDWFC x40,W
05F54:  MOVWF  FEA
05F56:  MOVFF  FEF,E47
05F5A:  MOVFF  03,FEA
05F5E:  MOVFF  01,FE9
05F62:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
05F66:  MOVLW  5D
05F68:  ADDWF  x3F,W
05F6A:  MOVWF  x45
05F6C:  MOVLW  00
05F6E:  ADDWFC x40,W
05F70:  MOVWF  x46
05F72:  MOVLW  64
05F74:  ADDWF  x3F,W
05F76:  MOVWF  FE9
05F78:  MOVLW  02
05F7A:  ADDWFC x40,W
05F7C:  MOVWF  FEA
05F7E:  MOVFF  FEF,E47
05F82:  MOVF   FF2,W
05F84:  MOVWF  00
05F86:  BCF    FF2.7
05F88:  MOVFF  E46,FAA
05F8C:  MOVFF  E45,FA9
05F90:  MOVFF  E47,FA8
05F94:  BCF    FA6.6
05F96:  BCF    FA6.7
05F98:  BSF    FA6.2
05F9A:  MOVLB  F
05F9C:  MOVLW  55
05F9E:  MOVWF  FA7
05FA0:  MOVLW  AA
05FA2:  MOVWF  FA7
05FA4:  BSF    FA6.1
05FA6:  BTFSC  FA6.1
05FA8:  BRA    5FA6
05FAA:  BCF    FA6.2
05FAC:  MOVF   00,W
05FAE:  IORWF  FF2,F
....................                   }
05FB0:  MOVLB  E
05FB2:  MOVFF  E40,03
05FB6:  MOVF   x3F,W
05FB8:  INCF   x3F,F
05FBA:  BTFSC  FD8.2
05FBC:  INCF   x40,F
05FBE:  INCF   x41,F
05FC0:  BTFSC  FD8.2
05FC2:  INCF   x42,F
05FC4:  BRA    5ED0
05FC6:  MOVLB  F
....................                }
....................                SMS_Massage10[j] = '\0' ; // end string
05FC8:  MOVLW  A1
05FCA:  MOVLB  E
05FCC:  ADDWF  x41,W
05FCE:  MOVWF  FE9
05FD0:  MOVLW  0B
05FD2:  ADDWFC x42,W
05FD4:  MOVWF  FEA
05FD6:  CLRF   FEF
....................                
....................                j=0;
05FD8:  CLRF   x42
05FDA:  CLRF   x41
....................                i++;
05FDC:  INCF   x3F,F
05FDE:  BTFSC  FD8.2
05FE0:  INCF   x40,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
05FE2:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
05FE4:  MOVLW  64
05FE6:  ADDWF  x3F,W
05FE8:  MOVWF  FE9
05FEA:  MOVLW  02
05FEC:  ADDWFC x40,W
05FEE:  MOVWF  FEA
05FF0:  MOVF   FEF,W
05FF2:  SUBLW  0D
05FF4:  BZ    6000
05FF6:  MOVF   x42,F
05FF8:  BNZ   6000
05FFA:  MOVF   x41,W
05FFC:  SUBLW  1E
05FFE:  BC    6050
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06000:  MOVLW  5D
06002:  ADDWF  x3F,W
06004:  MOVWF  x45
06006:  MOVLW  00
06008:  ADDWFC x40,W
0600A:  MOVWF  x46
0600C:  MOVLW  64
0600E:  ADDWF  x3F,W
06010:  MOVWF  FE9
06012:  MOVLW  02
06014:  ADDWFC x40,W
06016:  MOVWF  FEA
06018:  MOVFF  FEF,E47
0601C:  MOVF   FF2,W
0601E:  MOVWF  00
06020:  BCF    FF2.7
06022:  MOVFF  E46,FAA
06026:  MOVFF  E45,FA9
0602A:  MOVFF  E47,FA8
0602E:  BCF    FA6.6
06030:  BCF    FA6.7
06032:  BSF    FA6.2
06034:  MOVLB  F
06036:  MOVLW  55
06038:  MOVWF  FA7
0603A:  MOVLW  AA
0603C:  MOVWF  FA7
0603E:  BSF    FA6.1
06040:  BTFSC  FA6.1
06042:  BRA    6040
06044:  BCF    FA6.2
06046:  MOVF   00,W
06048:  IORWF  FF2,F
....................                      break;
0604A:  BRA    60DA
....................                   }
0604C:  BRA    60C2
0604E:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage11[j] = RxD_Buff[i];
06050:  MOVLW  C1
06052:  ADDWF  x41,W
06054:  MOVWF  01
06056:  MOVLW  0B
06058:  ADDWFC x42,W
0605A:  MOVWF  03
0605C:  MOVLW  64
0605E:  ADDWF  x3F,W
06060:  MOVWF  FE9
06062:  MOVLW  02
06064:  ADDWFC x40,W
06066:  MOVWF  FEA
06068:  MOVFF  FEF,E47
0606C:  MOVFF  03,FEA
06070:  MOVFF  01,FE9
06074:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06078:  MOVLW  5D
0607A:  ADDWF  x3F,W
0607C:  MOVWF  x45
0607E:  MOVLW  00
06080:  ADDWFC x40,W
06082:  MOVWF  x46
06084:  MOVLW  64
06086:  ADDWF  x3F,W
06088:  MOVWF  FE9
0608A:  MOVLW  02
0608C:  ADDWFC x40,W
0608E:  MOVWF  FEA
06090:  MOVFF  FEF,E47
06094:  MOVF   FF2,W
06096:  MOVWF  00
06098:  BCF    FF2.7
0609A:  MOVFF  E46,FAA
0609E:  MOVFF  E45,FA9
060A2:  MOVFF  E47,FA8
060A6:  BCF    FA6.6
060A8:  BCF    FA6.7
060AA:  BSF    FA6.2
060AC:  MOVLB  F
060AE:  MOVLW  55
060B0:  MOVWF  FA7
060B2:  MOVLW  AA
060B4:  MOVWF  FA7
060B6:  BSF    FA6.1
060B8:  BTFSC  FA6.1
060BA:  BRA    60B8
060BC:  BCF    FA6.2
060BE:  MOVF   00,W
060C0:  IORWF  FF2,F
....................                   }
060C2:  MOVLB  E
060C4:  MOVFF  E40,03
060C8:  MOVF   x3F,W
060CA:  INCF   x3F,F
060CC:  BTFSC  FD8.2
060CE:  INCF   x40,F
060D0:  INCF   x41,F
060D2:  BTFSC  FD8.2
060D4:  INCF   x42,F
060D6:  BRA    5FE2
060D8:  MOVLB  F
....................                }
....................                SMS_Massage11[j] = '\0' ; // end string
060DA:  MOVLW  C1
060DC:  MOVLB  E
060DE:  ADDWF  x41,W
060E0:  MOVWF  FE9
060E2:  MOVLW  0B
060E4:  ADDWFC x42,W
060E6:  MOVWF  FEA
060E8:  CLRF   FEF
....................                
....................                j=0;
060EA:  CLRF   x42
060EC:  CLRF   x41
....................                i++;
060EE:  INCF   x3F,F
060F0:  BTFSC  FD8.2
060F2:  INCF   x40,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
060F4:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
060F6:  MOVLW  64
060F8:  ADDWF  x3F,W
060FA:  MOVWF  FE9
060FC:  MOVLW  02
060FE:  ADDWFC x40,W
06100:  MOVWF  FEA
06102:  MOVF   FEF,W
06104:  SUBLW  0D
06106:  BZ    6112
06108:  MOVF   x42,F
0610A:  BNZ   6112
0610C:  MOVF   x41,W
0610E:  SUBLW  1E
06110:  BC    6162
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06112:  MOVLW  5D
06114:  ADDWF  x3F,W
06116:  MOVWF  x45
06118:  MOVLW  00
0611A:  ADDWFC x40,W
0611C:  MOVWF  x46
0611E:  MOVLW  64
06120:  ADDWF  x3F,W
06122:  MOVWF  FE9
06124:  MOVLW  02
06126:  ADDWFC x40,W
06128:  MOVWF  FEA
0612A:  MOVFF  FEF,E47
0612E:  MOVF   FF2,W
06130:  MOVWF  00
06132:  BCF    FF2.7
06134:  MOVFF  E46,FAA
06138:  MOVFF  E45,FA9
0613C:  MOVFF  E47,FA8
06140:  BCF    FA6.6
06142:  BCF    FA6.7
06144:  BSF    FA6.2
06146:  MOVLB  F
06148:  MOVLW  55
0614A:  MOVWF  FA7
0614C:  MOVLW  AA
0614E:  MOVWF  FA7
06150:  BSF    FA6.1
06152:  BTFSC  FA6.1
06154:  BRA    6152
06156:  BCF    FA6.2
06158:  MOVF   00,W
0615A:  IORWF  FF2,F
....................                      break;
0615C:  BRA    61EC
....................                   }
0615E:  BRA    61D4
06160:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage12[j] = RxD_Buff[i];
06162:  MOVLW  E1
06164:  ADDWF  x41,W
06166:  MOVWF  01
06168:  MOVLW  0B
0616A:  ADDWFC x42,W
0616C:  MOVWF  03
0616E:  MOVLW  64
06170:  ADDWF  x3F,W
06172:  MOVWF  FE9
06174:  MOVLW  02
06176:  ADDWFC x40,W
06178:  MOVWF  FEA
0617A:  MOVFF  FEF,E47
0617E:  MOVFF  03,FEA
06182:  MOVFF  01,FE9
06186:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0618A:  MOVLW  5D
0618C:  ADDWF  x3F,W
0618E:  MOVWF  x45
06190:  MOVLW  00
06192:  ADDWFC x40,W
06194:  MOVWF  x46
06196:  MOVLW  64
06198:  ADDWF  x3F,W
0619A:  MOVWF  FE9
0619C:  MOVLW  02
0619E:  ADDWFC x40,W
061A0:  MOVWF  FEA
061A2:  MOVFF  FEF,E47
061A6:  MOVF   FF2,W
061A8:  MOVWF  00
061AA:  BCF    FF2.7
061AC:  MOVFF  E46,FAA
061B0:  MOVFF  E45,FA9
061B4:  MOVFF  E47,FA8
061B8:  BCF    FA6.6
061BA:  BCF    FA6.7
061BC:  BSF    FA6.2
061BE:  MOVLB  F
061C0:  MOVLW  55
061C2:  MOVWF  FA7
061C4:  MOVLW  AA
061C6:  MOVWF  FA7
061C8:  BSF    FA6.1
061CA:  BTFSC  FA6.1
061CC:  BRA    61CA
061CE:  BCF    FA6.2
061D0:  MOVF   00,W
061D2:  IORWF  FF2,F
....................                   }
061D4:  MOVLB  E
061D6:  MOVFF  E40,03
061DA:  MOVF   x3F,W
061DC:  INCF   x3F,F
061DE:  BTFSC  FD8.2
061E0:  INCF   x40,F
061E2:  INCF   x41,F
061E4:  BTFSC  FD8.2
061E6:  INCF   x42,F
061E8:  BRA    60F4
061EA:  MOVLB  F
....................                }
....................                SMS_Massage12[j] = '\0' ; // end string
061EC:  MOVLW  E1
061EE:  MOVLB  E
061F0:  ADDWF  x41,W
061F2:  MOVWF  FE9
061F4:  MOVLW  0B
061F6:  ADDWFC x42,W
061F8:  MOVWF  FEA
061FA:  CLRF   FEF
....................                
....................                j=0;
061FC:  CLRF   x42
061FE:  CLRF   x41
....................                i++;
06200:  INCF   x3F,F
06202:  BTFSC  FD8.2
06204:  INCF   x40,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06206:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06208:  MOVLW  64
0620A:  ADDWF  x3F,W
0620C:  MOVWF  FE9
0620E:  MOVLW  02
06210:  ADDWFC x40,W
06212:  MOVWF  FEA
06214:  MOVF   FEF,W
06216:  SUBLW  0D
06218:  BZ    6224
0621A:  MOVF   x42,F
0621C:  BNZ   6224
0621E:  MOVF   x41,W
06220:  SUBLW  1E
06222:  BC    6274
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06224:  MOVLW  5D
06226:  ADDWF  x3F,W
06228:  MOVWF  x45
0622A:  MOVLW  00
0622C:  ADDWFC x40,W
0622E:  MOVWF  x46
06230:  MOVLW  64
06232:  ADDWF  x3F,W
06234:  MOVWF  FE9
06236:  MOVLW  02
06238:  ADDWFC x40,W
0623A:  MOVWF  FEA
0623C:  MOVFF  FEF,E47
06240:  MOVF   FF2,W
06242:  MOVWF  00
06244:  BCF    FF2.7
06246:  MOVFF  E46,FAA
0624A:  MOVFF  E45,FA9
0624E:  MOVFF  E47,FA8
06252:  BCF    FA6.6
06254:  BCF    FA6.7
06256:  BSF    FA6.2
06258:  MOVLB  F
0625A:  MOVLW  55
0625C:  MOVWF  FA7
0625E:  MOVLW  AA
06260:  MOVWF  FA7
06262:  BSF    FA6.1
06264:  BTFSC  FA6.1
06266:  BRA    6264
06268:  BCF    FA6.2
0626A:  MOVF   00,W
0626C:  IORWF  FF2,F
....................                      break;
0626E:  BRA    62FE
....................                   }
06270:  BRA    62E6
06272:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage13[j] = RxD_Buff[i];
06274:  MOVLW  01
06276:  ADDWF  x41,W
06278:  MOVWF  01
0627A:  MOVLW  0C
0627C:  ADDWFC x42,W
0627E:  MOVWF  03
06280:  MOVLW  64
06282:  ADDWF  x3F,W
06284:  MOVWF  FE9
06286:  MOVLW  02
06288:  ADDWFC x40,W
0628A:  MOVWF  FEA
0628C:  MOVFF  FEF,E47
06290:  MOVFF  03,FEA
06294:  MOVFF  01,FE9
06298:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0629C:  MOVLW  5D
0629E:  ADDWF  x3F,W
062A0:  MOVWF  x45
062A2:  MOVLW  00
062A4:  ADDWFC x40,W
062A6:  MOVWF  x46
062A8:  MOVLW  64
062AA:  ADDWF  x3F,W
062AC:  MOVWF  FE9
062AE:  MOVLW  02
062B0:  ADDWFC x40,W
062B2:  MOVWF  FEA
062B4:  MOVFF  FEF,E47
062B8:  MOVF   FF2,W
062BA:  MOVWF  00
062BC:  BCF    FF2.7
062BE:  MOVFF  E46,FAA
062C2:  MOVFF  E45,FA9
062C6:  MOVFF  E47,FA8
062CA:  BCF    FA6.6
062CC:  BCF    FA6.7
062CE:  BSF    FA6.2
062D0:  MOVLB  F
062D2:  MOVLW  55
062D4:  MOVWF  FA7
062D6:  MOVLW  AA
062D8:  MOVWF  FA7
062DA:  BSF    FA6.1
062DC:  BTFSC  FA6.1
062DE:  BRA    62DC
062E0:  BCF    FA6.2
062E2:  MOVF   00,W
062E4:  IORWF  FF2,F
....................                   }
062E6:  MOVLB  E
062E8:  MOVFF  E40,03
062EC:  MOVF   x3F,W
062EE:  INCF   x3F,F
062F0:  BTFSC  FD8.2
062F2:  INCF   x40,F
062F4:  INCF   x41,F
062F6:  BTFSC  FD8.2
062F8:  INCF   x42,F
062FA:  BRA    6206
062FC:  MOVLB  F
....................                }
....................                SMS_Massage13[j] = '\0' ; // end string
062FE:  MOVLW  01
06300:  MOVLB  E
06302:  ADDWF  x41,W
06304:  MOVWF  FE9
06306:  MOVLW  0C
06308:  ADDWFC x42,W
0630A:  MOVWF  FEA
0630C:  CLRF   FEF
....................                
....................                j=0;
0630E:  CLRF   x42
06310:  CLRF   x41
....................                i++;
06312:  INCF   x3F,F
06314:  BTFSC  FD8.2
06316:  INCF   x40,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06318:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0631A:  MOVLW  64
0631C:  ADDWF  x3F,W
0631E:  MOVWF  FE9
06320:  MOVLW  02
06322:  ADDWFC x40,W
06324:  MOVWF  FEA
06326:  MOVF   FEF,W
06328:  SUBLW  0D
0632A:  BZ    6336
0632C:  MOVF   x42,F
0632E:  BNZ   6336
06330:  MOVF   x41,W
06332:  SUBLW  1E
06334:  BC    6386
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06336:  MOVLW  5D
06338:  ADDWF  x3F,W
0633A:  MOVWF  x45
0633C:  MOVLW  00
0633E:  ADDWFC x40,W
06340:  MOVWF  x46
06342:  MOVLW  64
06344:  ADDWF  x3F,W
06346:  MOVWF  FE9
06348:  MOVLW  02
0634A:  ADDWFC x40,W
0634C:  MOVWF  FEA
0634E:  MOVFF  FEF,E47
06352:  MOVF   FF2,W
06354:  MOVWF  00
06356:  BCF    FF2.7
06358:  MOVFF  E46,FAA
0635C:  MOVFF  E45,FA9
06360:  MOVFF  E47,FA8
06364:  BCF    FA6.6
06366:  BCF    FA6.7
06368:  BSF    FA6.2
0636A:  MOVLB  F
0636C:  MOVLW  55
0636E:  MOVWF  FA7
06370:  MOVLW  AA
06372:  MOVWF  FA7
06374:  BSF    FA6.1
06376:  BTFSC  FA6.1
06378:  BRA    6376
0637A:  BCF    FA6.2
0637C:  MOVF   00,W
0637E:  IORWF  FF2,F
....................                      break;
06380:  BRA    6410
....................                   }
06382:  BRA    63F8
06384:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage14[j] = RxD_Buff[i];
06386:  MOVLW  21
06388:  ADDWF  x41,W
0638A:  MOVWF  01
0638C:  MOVLW  0C
0638E:  ADDWFC x42,W
06390:  MOVWF  03
06392:  MOVLW  64
06394:  ADDWF  x3F,W
06396:  MOVWF  FE9
06398:  MOVLW  02
0639A:  ADDWFC x40,W
0639C:  MOVWF  FEA
0639E:  MOVFF  FEF,E47
063A2:  MOVFF  03,FEA
063A6:  MOVFF  01,FE9
063AA:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
063AE:  MOVLW  5D
063B0:  ADDWF  x3F,W
063B2:  MOVWF  x45
063B4:  MOVLW  00
063B6:  ADDWFC x40,W
063B8:  MOVWF  x46
063BA:  MOVLW  64
063BC:  ADDWF  x3F,W
063BE:  MOVWF  FE9
063C0:  MOVLW  02
063C2:  ADDWFC x40,W
063C4:  MOVWF  FEA
063C6:  MOVFF  FEF,E47
063CA:  MOVF   FF2,W
063CC:  MOVWF  00
063CE:  BCF    FF2.7
063D0:  MOVFF  E46,FAA
063D4:  MOVFF  E45,FA9
063D8:  MOVFF  E47,FA8
063DC:  BCF    FA6.6
063DE:  BCF    FA6.7
063E0:  BSF    FA6.2
063E2:  MOVLB  F
063E4:  MOVLW  55
063E6:  MOVWF  FA7
063E8:  MOVLW  AA
063EA:  MOVWF  FA7
063EC:  BSF    FA6.1
063EE:  BTFSC  FA6.1
063F0:  BRA    63EE
063F2:  BCF    FA6.2
063F4:  MOVF   00,W
063F6:  IORWF  FF2,F
....................                   }
063F8:  MOVLB  E
063FA:  MOVFF  E40,03
063FE:  MOVF   x3F,W
06400:  INCF   x3F,F
06402:  BTFSC  FD8.2
06404:  INCF   x40,F
06406:  INCF   x41,F
06408:  BTFSC  FD8.2
0640A:  INCF   x42,F
0640C:  BRA    6318
0640E:  MOVLB  F
....................                }
....................                SMS_Massage14[j] = '\0' ; // end string
06410:  MOVLW  21
06412:  MOVLB  E
06414:  ADDWF  x41,W
06416:  MOVWF  FE9
06418:  MOVLW  0C
0641A:  ADDWFC x42,W
0641C:  MOVWF  FEA
0641E:  CLRF   FEF
....................                
....................                j=0;
06420:  CLRF   x42
06422:  CLRF   x41
....................                i++;
06424:  INCF   x3F,F
06426:  BTFSC  FD8.2
06428:  INCF   x40,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0642A:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0642C:  MOVLW  64
0642E:  ADDWF  x3F,W
06430:  MOVWF  FE9
06432:  MOVLW  02
06434:  ADDWFC x40,W
06436:  MOVWF  FEA
06438:  MOVF   FEF,W
0643A:  SUBLW  0D
0643C:  BZ    6448
0643E:  MOVF   x42,F
06440:  BNZ   6448
06442:  MOVF   x41,W
06444:  SUBLW  1E
06446:  BC    6498
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06448:  MOVLW  5D
0644A:  ADDWF  x3F,W
0644C:  MOVWF  x45
0644E:  MOVLW  00
06450:  ADDWFC x40,W
06452:  MOVWF  x46
06454:  MOVLW  64
06456:  ADDWF  x3F,W
06458:  MOVWF  FE9
0645A:  MOVLW  02
0645C:  ADDWFC x40,W
0645E:  MOVWF  FEA
06460:  MOVFF  FEF,E47
06464:  MOVF   FF2,W
06466:  MOVWF  00
06468:  BCF    FF2.7
0646A:  MOVFF  E46,FAA
0646E:  MOVFF  E45,FA9
06472:  MOVFF  E47,FA8
06476:  BCF    FA6.6
06478:  BCF    FA6.7
0647A:  BSF    FA6.2
0647C:  MOVLB  F
0647E:  MOVLW  55
06480:  MOVWF  FA7
06482:  MOVLW  AA
06484:  MOVWF  FA7
06486:  BSF    FA6.1
06488:  BTFSC  FA6.1
0648A:  BRA    6488
0648C:  BCF    FA6.2
0648E:  MOVF   00,W
06490:  IORWF  FF2,F
....................                      break;
06492:  BRA    6522
....................                   }
06494:  BRA    650A
06496:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage15[j] = RxD_Buff[i];
06498:  MOVLW  41
0649A:  ADDWF  x41,W
0649C:  MOVWF  01
0649E:  MOVLW  0C
064A0:  ADDWFC x42,W
064A2:  MOVWF  03
064A4:  MOVLW  64
064A6:  ADDWF  x3F,W
064A8:  MOVWF  FE9
064AA:  MOVLW  02
064AC:  ADDWFC x40,W
064AE:  MOVWF  FEA
064B0:  MOVFF  FEF,E47
064B4:  MOVFF  03,FEA
064B8:  MOVFF  01,FE9
064BC:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
064C0:  MOVLW  5D
064C2:  ADDWF  x3F,W
064C4:  MOVWF  x45
064C6:  MOVLW  00
064C8:  ADDWFC x40,W
064CA:  MOVWF  x46
064CC:  MOVLW  64
064CE:  ADDWF  x3F,W
064D0:  MOVWF  FE9
064D2:  MOVLW  02
064D4:  ADDWFC x40,W
064D6:  MOVWF  FEA
064D8:  MOVFF  FEF,E47
064DC:  MOVF   FF2,W
064DE:  MOVWF  00
064E0:  BCF    FF2.7
064E2:  MOVFF  E46,FAA
064E6:  MOVFF  E45,FA9
064EA:  MOVFF  E47,FA8
064EE:  BCF    FA6.6
064F0:  BCF    FA6.7
064F2:  BSF    FA6.2
064F4:  MOVLB  F
064F6:  MOVLW  55
064F8:  MOVWF  FA7
064FA:  MOVLW  AA
064FC:  MOVWF  FA7
064FE:  BSF    FA6.1
06500:  BTFSC  FA6.1
06502:  BRA    6500
06504:  BCF    FA6.2
06506:  MOVF   00,W
06508:  IORWF  FF2,F
....................                   }
0650A:  MOVLB  E
0650C:  MOVFF  E40,03
06510:  MOVF   x3F,W
06512:  INCF   x3F,F
06514:  BTFSC  FD8.2
06516:  INCF   x40,F
06518:  INCF   x41,F
0651A:  BTFSC  FD8.2
0651C:  INCF   x42,F
0651E:  BRA    642A
06520:  MOVLB  F
....................                }
....................                SMS_Massage15[j] = '\0' ; // end string
06522:  MOVLW  41
06524:  MOVLB  E
06526:  ADDWF  x41,W
06528:  MOVWF  FE9
0652A:  MOVLW  0C
0652C:  ADDWFC x42,W
0652E:  MOVWF  FEA
06530:  CLRF   FEF
....................                
....................                j=0;
06532:  CLRF   x42
06534:  CLRF   x41
....................                i++;
06536:  INCF   x3F,F
06538:  BTFSC  FD8.2
0653A:  INCF   x40,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0653C:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
0653E:  MOVLW  64
06540:  ADDWF  x3F,W
06542:  MOVWF  FE9
06544:  MOVLW  02
06546:  ADDWFC x40,W
06548:  MOVWF  FEA
0654A:  MOVF   FEF,W
0654C:  SUBLW  0D
0654E:  BZ    655A
06550:  MOVF   x42,F
06552:  BNZ   655A
06554:  MOVF   x41,W
06556:  SUBLW  1E
06558:  BC    65AA
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0655A:  MOVLW  5D
0655C:  ADDWF  x3F,W
0655E:  MOVWF  x45
06560:  MOVLW  00
06562:  ADDWFC x40,W
06564:  MOVWF  x46
06566:  MOVLW  64
06568:  ADDWF  x3F,W
0656A:  MOVWF  FE9
0656C:  MOVLW  02
0656E:  ADDWFC x40,W
06570:  MOVWF  FEA
06572:  MOVFF  FEF,E47
06576:  MOVF   FF2,W
06578:  MOVWF  00
0657A:  BCF    FF2.7
0657C:  MOVFF  E46,FAA
06580:  MOVFF  E45,FA9
06584:  MOVFF  E47,FA8
06588:  BCF    FA6.6
0658A:  BCF    FA6.7
0658C:  BSF    FA6.2
0658E:  MOVLB  F
06590:  MOVLW  55
06592:  MOVWF  FA7
06594:  MOVLW  AA
06596:  MOVWF  FA7
06598:  BSF    FA6.1
0659A:  BTFSC  FA6.1
0659C:  BRA    659A
0659E:  BCF    FA6.2
065A0:  MOVF   00,W
065A2:  IORWF  FF2,F
....................                      break;
065A4:  BRA    6634
....................                   }
065A6:  BRA    661C
065A8:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage16[j] = RxD_Buff[i];
065AA:  MOVLW  61
065AC:  ADDWF  x41,W
065AE:  MOVWF  01
065B0:  MOVLW  0C
065B2:  ADDWFC x42,W
065B4:  MOVWF  03
065B6:  MOVLW  64
065B8:  ADDWF  x3F,W
065BA:  MOVWF  FE9
065BC:  MOVLW  02
065BE:  ADDWFC x40,W
065C0:  MOVWF  FEA
065C2:  MOVFF  FEF,E47
065C6:  MOVFF  03,FEA
065CA:  MOVFF  01,FE9
065CE:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
065D2:  MOVLW  5D
065D4:  ADDWF  x3F,W
065D6:  MOVWF  x45
065D8:  MOVLW  00
065DA:  ADDWFC x40,W
065DC:  MOVWF  x46
065DE:  MOVLW  64
065E0:  ADDWF  x3F,W
065E2:  MOVWF  FE9
065E4:  MOVLW  02
065E6:  ADDWFC x40,W
065E8:  MOVWF  FEA
065EA:  MOVFF  FEF,E47
065EE:  MOVF   FF2,W
065F0:  MOVWF  00
065F2:  BCF    FF2.7
065F4:  MOVFF  E46,FAA
065F8:  MOVFF  E45,FA9
065FC:  MOVFF  E47,FA8
06600:  BCF    FA6.6
06602:  BCF    FA6.7
06604:  BSF    FA6.2
06606:  MOVLB  F
06608:  MOVLW  55
0660A:  MOVWF  FA7
0660C:  MOVLW  AA
0660E:  MOVWF  FA7
06610:  BSF    FA6.1
06612:  BTFSC  FA6.1
06614:  BRA    6612
06616:  BCF    FA6.2
06618:  MOVF   00,W
0661A:  IORWF  FF2,F
....................                   }
0661C:  MOVLB  E
0661E:  MOVFF  E40,03
06622:  MOVF   x3F,W
06624:  INCF   x3F,F
06626:  BTFSC  FD8.2
06628:  INCF   x40,F
0662A:  INCF   x41,F
0662C:  BTFSC  FD8.2
0662E:  INCF   x42,F
06630:  BRA    653C
06632:  MOVLB  F
....................                }
....................                SMS_Massage16[j] = '\0' ; // end string
06634:  MOVLW  61
06636:  MOVLB  E
06638:  ADDWF  x41,W
0663A:  MOVWF  FE9
0663C:  MOVLW  0C
0663E:  ADDWFC x42,W
06640:  MOVWF  FEA
06642:  CLRF   FEF
....................                
....................                j=0;
06644:  CLRF   x42
06646:  CLRF   x41
....................                i++;
06648:  INCF   x3F,F
0664A:  BTFSC  FD8.2
0664C:  INCF   x40,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
0664E:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06650:  MOVLW  64
06652:  ADDWF  x3F,W
06654:  MOVWF  FE9
06656:  MOVLW  02
06658:  ADDWFC x40,W
0665A:  MOVWF  FEA
0665C:  MOVF   FEF,W
0665E:  SUBLW  0D
06660:  BZ    666C
06662:  MOVF   x42,F
06664:  BNZ   666C
06666:  MOVF   x41,W
06668:  SUBLW  1E
0666A:  BC    66BC
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0666C:  MOVLW  5D
0666E:  ADDWF  x3F,W
06670:  MOVWF  x45
06672:  MOVLW  00
06674:  ADDWFC x40,W
06676:  MOVWF  x46
06678:  MOVLW  64
0667A:  ADDWF  x3F,W
0667C:  MOVWF  FE9
0667E:  MOVLW  02
06680:  ADDWFC x40,W
06682:  MOVWF  FEA
06684:  MOVFF  FEF,E47
06688:  MOVF   FF2,W
0668A:  MOVWF  00
0668C:  BCF    FF2.7
0668E:  MOVFF  E46,FAA
06692:  MOVFF  E45,FA9
06696:  MOVFF  E47,FA8
0669A:  BCF    FA6.6
0669C:  BCF    FA6.7
0669E:  BSF    FA6.2
066A0:  MOVLB  F
066A2:  MOVLW  55
066A4:  MOVWF  FA7
066A6:  MOVLW  AA
066A8:  MOVWF  FA7
066AA:  BSF    FA6.1
066AC:  BTFSC  FA6.1
066AE:  BRA    66AC
066B0:  BCF    FA6.2
066B2:  MOVF   00,W
066B4:  IORWF  FF2,F
....................                      break;
066B6:  BRA    6746
....................                   }
066B8:  BRA    672E
066BA:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage17[j] = RxD_Buff[i];
066BC:  MOVLW  81
066BE:  ADDWF  x41,W
066C0:  MOVWF  01
066C2:  MOVLW  0C
066C4:  ADDWFC x42,W
066C6:  MOVWF  03
066C8:  MOVLW  64
066CA:  ADDWF  x3F,W
066CC:  MOVWF  FE9
066CE:  MOVLW  02
066D0:  ADDWFC x40,W
066D2:  MOVWF  FEA
066D4:  MOVFF  FEF,E47
066D8:  MOVFF  03,FEA
066DC:  MOVFF  01,FE9
066E0:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
066E4:  MOVLW  5D
066E6:  ADDWF  x3F,W
066E8:  MOVWF  x45
066EA:  MOVLW  00
066EC:  ADDWFC x40,W
066EE:  MOVWF  x46
066F0:  MOVLW  64
066F2:  ADDWF  x3F,W
066F4:  MOVWF  FE9
066F6:  MOVLW  02
066F8:  ADDWFC x40,W
066FA:  MOVWF  FEA
066FC:  MOVFF  FEF,E47
06700:  MOVF   FF2,W
06702:  MOVWF  00
06704:  BCF    FF2.7
06706:  MOVFF  E46,FAA
0670A:  MOVFF  E45,FA9
0670E:  MOVFF  E47,FA8
06712:  BCF    FA6.6
06714:  BCF    FA6.7
06716:  BSF    FA6.2
06718:  MOVLB  F
0671A:  MOVLW  55
0671C:  MOVWF  FA7
0671E:  MOVLW  AA
06720:  MOVWF  FA7
06722:  BSF    FA6.1
06724:  BTFSC  FA6.1
06726:  BRA    6724
06728:  BCF    FA6.2
0672A:  MOVF   00,W
0672C:  IORWF  FF2,F
....................                   }
0672E:  MOVLB  E
06730:  MOVFF  E40,03
06734:  MOVF   x3F,W
06736:  INCF   x3F,F
06738:  BTFSC  FD8.2
0673A:  INCF   x40,F
0673C:  INCF   x41,F
0673E:  BTFSC  FD8.2
06740:  INCF   x42,F
06742:  BRA    664E
06744:  MOVLB  F
....................                }
....................                SMS_Massage17[j] = '\0' ; // end string
06746:  MOVLW  81
06748:  MOVLB  E
0674A:  ADDWF  x41,W
0674C:  MOVWF  FE9
0674E:  MOVLW  0C
06750:  ADDWFC x42,W
06752:  MOVWF  FEA
06754:  CLRF   FEF
....................                
....................                j=0;
06756:  CLRF   x42
06758:  CLRF   x41
....................                i++;
0675A:  INCF   x3F,F
0675C:  BTFSC  FD8.2
0675E:  INCF   x40,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06760:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06762:  MOVLW  64
06764:  ADDWF  x3F,W
06766:  MOVWF  FE9
06768:  MOVLW  02
0676A:  ADDWFC x40,W
0676C:  MOVWF  FEA
0676E:  MOVF   FEF,W
06770:  SUBLW  0D
06772:  BZ    677E
06774:  MOVF   x42,F
06776:  BNZ   677E
06778:  MOVF   x41,W
0677A:  SUBLW  1E
0677C:  BC    67CE
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
0677E:  MOVLW  5D
06780:  ADDWF  x3F,W
06782:  MOVWF  x45
06784:  MOVLW  00
06786:  ADDWFC x40,W
06788:  MOVWF  x46
0678A:  MOVLW  64
0678C:  ADDWF  x3F,W
0678E:  MOVWF  FE9
06790:  MOVLW  02
06792:  ADDWFC x40,W
06794:  MOVWF  FEA
06796:  MOVFF  FEF,E47
0679A:  MOVF   FF2,W
0679C:  MOVWF  00
0679E:  BCF    FF2.7
067A0:  MOVFF  E46,FAA
067A4:  MOVFF  E45,FA9
067A8:  MOVFF  E47,FA8
067AC:  BCF    FA6.6
067AE:  BCF    FA6.7
067B0:  BSF    FA6.2
067B2:  MOVLB  F
067B4:  MOVLW  55
067B6:  MOVWF  FA7
067B8:  MOVLW  AA
067BA:  MOVWF  FA7
067BC:  BSF    FA6.1
067BE:  BTFSC  FA6.1
067C0:  BRA    67BE
067C2:  BCF    FA6.2
067C4:  MOVF   00,W
067C6:  IORWF  FF2,F
....................                      break;
067C8:  BRA    6858
....................                   }
067CA:  BRA    6840
067CC:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage18[j] = RxD_Buff[i];
067CE:  MOVLW  A1
067D0:  ADDWF  x41,W
067D2:  MOVWF  01
067D4:  MOVLW  0C
067D6:  ADDWFC x42,W
067D8:  MOVWF  03
067DA:  MOVLW  64
067DC:  ADDWF  x3F,W
067DE:  MOVWF  FE9
067E0:  MOVLW  02
067E2:  ADDWFC x40,W
067E4:  MOVWF  FEA
067E6:  MOVFF  FEF,E47
067EA:  MOVFF  03,FEA
067EE:  MOVFF  01,FE9
067F2:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
067F6:  MOVLW  5D
067F8:  ADDWF  x3F,W
067FA:  MOVWF  x45
067FC:  MOVLW  00
067FE:  ADDWFC x40,W
06800:  MOVWF  x46
06802:  MOVLW  64
06804:  ADDWF  x3F,W
06806:  MOVWF  FE9
06808:  MOVLW  02
0680A:  ADDWFC x40,W
0680C:  MOVWF  FEA
0680E:  MOVFF  FEF,E47
06812:  MOVF   FF2,W
06814:  MOVWF  00
06816:  BCF    FF2.7
06818:  MOVFF  E46,FAA
0681C:  MOVFF  E45,FA9
06820:  MOVFF  E47,FA8
06824:  BCF    FA6.6
06826:  BCF    FA6.7
06828:  BSF    FA6.2
0682A:  MOVLB  F
0682C:  MOVLW  55
0682E:  MOVWF  FA7
06830:  MOVLW  AA
06832:  MOVWF  FA7
06834:  BSF    FA6.1
06836:  BTFSC  FA6.1
06838:  BRA    6836
0683A:  BCF    FA6.2
0683C:  MOVF   00,W
0683E:  IORWF  FF2,F
....................                   }
06840:  MOVLB  E
06842:  MOVFF  E40,03
06846:  MOVF   x3F,W
06848:  INCF   x3F,F
0684A:  BTFSC  FD8.2
0684C:  INCF   x40,F
0684E:  INCF   x41,F
06850:  BTFSC  FD8.2
06852:  INCF   x42,F
06854:  BRA    6760
06856:  MOVLB  F
....................                }
....................                SMS_Massage18[j] = '\0' ; // end string
06858:  MOVLW  A1
0685A:  MOVLB  E
0685C:  ADDWF  x41,W
0685E:  MOVWF  FE9
06860:  MOVLW  0C
06862:  ADDWFC x42,W
06864:  MOVWF  FEA
06866:  CLRF   FEF
....................                
....................                j=0;
06868:  CLRF   x42
0686A:  CLRF   x41
....................                i++;
0686C:  INCF   x3F,F
0686E:  BTFSC  FD8.2
06870:  INCF   x40,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06872:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06874:  MOVLW  64
06876:  ADDWF  x3F,W
06878:  MOVWF  FE9
0687A:  MOVLW  02
0687C:  ADDWFC x40,W
0687E:  MOVWF  FEA
06880:  MOVF   FEF,W
06882:  SUBLW  0D
06884:  BZ    6890
06886:  MOVF   x42,F
06888:  BNZ   6890
0688A:  MOVF   x41,W
0688C:  SUBLW  1E
0688E:  BC    68E0
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06890:  MOVLW  5D
06892:  ADDWF  x3F,W
06894:  MOVWF  x45
06896:  MOVLW  00
06898:  ADDWFC x40,W
0689A:  MOVWF  x46
0689C:  MOVLW  64
0689E:  ADDWF  x3F,W
068A0:  MOVWF  FE9
068A2:  MOVLW  02
068A4:  ADDWFC x40,W
068A6:  MOVWF  FEA
068A8:  MOVFF  FEF,E47
068AC:  MOVF   FF2,W
068AE:  MOVWF  00
068B0:  BCF    FF2.7
068B2:  MOVFF  E46,FAA
068B6:  MOVFF  E45,FA9
068BA:  MOVFF  E47,FA8
068BE:  BCF    FA6.6
068C0:  BCF    FA6.7
068C2:  BSF    FA6.2
068C4:  MOVLB  F
068C6:  MOVLW  55
068C8:  MOVWF  FA7
068CA:  MOVLW  AA
068CC:  MOVWF  FA7
068CE:  BSF    FA6.1
068D0:  BTFSC  FA6.1
068D2:  BRA    68D0
068D4:  BCF    FA6.2
068D6:  MOVF   00,W
068D8:  IORWF  FF2,F
....................                      break;
068DA:  BRA    696A
....................                   }
068DC:  BRA    6952
068DE:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage19[j] = RxD_Buff[i];
068E0:  MOVLW  C1
068E2:  ADDWF  x41,W
068E4:  MOVWF  01
068E6:  MOVLW  0C
068E8:  ADDWFC x42,W
068EA:  MOVWF  03
068EC:  MOVLW  64
068EE:  ADDWF  x3F,W
068F0:  MOVWF  FE9
068F2:  MOVLW  02
068F4:  ADDWFC x40,W
068F6:  MOVWF  FEA
068F8:  MOVFF  FEF,E47
068FC:  MOVFF  03,FEA
06900:  MOVFF  01,FE9
06904:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06908:  MOVLW  5D
0690A:  ADDWF  x3F,W
0690C:  MOVWF  x45
0690E:  MOVLW  00
06910:  ADDWFC x40,W
06912:  MOVWF  x46
06914:  MOVLW  64
06916:  ADDWF  x3F,W
06918:  MOVWF  FE9
0691A:  MOVLW  02
0691C:  ADDWFC x40,W
0691E:  MOVWF  FEA
06920:  MOVFF  FEF,E47
06924:  MOVF   FF2,W
06926:  MOVWF  00
06928:  BCF    FF2.7
0692A:  MOVFF  E46,FAA
0692E:  MOVFF  E45,FA9
06932:  MOVFF  E47,FA8
06936:  BCF    FA6.6
06938:  BCF    FA6.7
0693A:  BSF    FA6.2
0693C:  MOVLB  F
0693E:  MOVLW  55
06940:  MOVWF  FA7
06942:  MOVLW  AA
06944:  MOVWF  FA7
06946:  BSF    FA6.1
06948:  BTFSC  FA6.1
0694A:  BRA    6948
0694C:  BCF    FA6.2
0694E:  MOVF   00,W
06950:  IORWF  FF2,F
....................                   }
06952:  MOVLB  E
06954:  MOVFF  E40,03
06958:  MOVF   x3F,W
0695A:  INCF   x3F,F
0695C:  BTFSC  FD8.2
0695E:  INCF   x40,F
06960:  INCF   x41,F
06962:  BTFSC  FD8.2
06964:  INCF   x42,F
06966:  BRA    6872
06968:  MOVLB  F
....................                }
....................                SMS_Massage19[j] = '\0' ; // end string
0696A:  MOVLW  C1
0696C:  MOVLB  E
0696E:  ADDWF  x41,W
06970:  MOVWF  FE9
06972:  MOVLW  0C
06974:  ADDWFC x42,W
06976:  MOVWF  FEA
06978:  CLRF   FEF
....................                
....................                j=0;
0697A:  CLRF   x42
0697C:  CLRF   x41
....................                i++;
0697E:  INCF   x3F,F
06980:  BTFSC  FD8.2
06982:  INCF   x40,F
....................                for(; ; i++,j++)
....................                {
....................                   restart_wdt();
06984:  CLRWDT
....................                   if((RxD_Buff[i] == 0x0D) || (j > 30))
06986:  MOVLW  64
06988:  ADDWF  x3F,W
0698A:  MOVWF  FE9
0698C:  MOVLW  02
0698E:  ADDWFC x40,W
06990:  MOVWF  FEA
06992:  MOVF   FEF,W
06994:  SUBLW  0D
06996:  BZ    69A2
06998:  MOVF   x42,F
0699A:  BNZ   69A2
0699C:  MOVF   x41,W
0699E:  SUBLW  1E
069A0:  BC    69F2
....................                   {
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
069A2:  MOVLW  5D
069A4:  ADDWF  x3F,W
069A6:  MOVWF  x45
069A8:  MOVLW  00
069AA:  ADDWFC x40,W
069AC:  MOVWF  x46
069AE:  MOVLW  64
069B0:  ADDWF  x3F,W
069B2:  MOVWF  FE9
069B4:  MOVLW  02
069B6:  ADDWFC x40,W
069B8:  MOVWF  FEA
069BA:  MOVFF  FEF,E47
069BE:  MOVF   FF2,W
069C0:  MOVWF  00
069C2:  BCF    FF2.7
069C4:  MOVFF  E46,FAA
069C8:  MOVFF  E45,FA9
069CC:  MOVFF  E47,FA8
069D0:  BCF    FA6.6
069D2:  BCF    FA6.7
069D4:  BSF    FA6.2
069D6:  MOVLB  F
069D8:  MOVLW  55
069DA:  MOVWF  FA7
069DC:  MOVLW  AA
069DE:  MOVWF  FA7
069E0:  BSF    FA6.1
069E2:  BTFSC  FA6.1
069E4:  BRA    69E2
069E6:  BCF    FA6.2
069E8:  MOVF   00,W
069EA:  IORWF  FF2,F
....................                      break;
069EC:  BRA    6A7C
....................                   }
069EE:  BRA    6A64
069F0:  MOVLB  E
....................                   else
....................                   {
....................                      SMS_Massage20[j] = RxD_Buff[i];
069F2:  MOVLW  E1
069F4:  ADDWF  x41,W
069F6:  MOVWF  01
069F8:  MOVLW  0C
069FA:  ADDWFC x42,W
069FC:  MOVWF  03
069FE:  MOVLW  64
06A00:  ADDWF  x3F,W
06A02:  MOVWF  FE9
06A04:  MOVLW  02
06A06:  ADDWFC x40,W
06A08:  MOVWF  FEA
06A0A:  MOVFF  FEF,E47
06A0E:  MOVFF  03,FEA
06A12:  MOVFF  01,FE9
06A16:  MOVFF  E47,FEF
....................                      write_eeprom(0x5D+i,RxD_Buff[i]);
06A1A:  MOVLW  5D
06A1C:  ADDWF  x3F,W
06A1E:  MOVWF  x45
06A20:  MOVLW  00
06A22:  ADDWFC x40,W
06A24:  MOVWF  x46
06A26:  MOVLW  64
06A28:  ADDWF  x3F,W
06A2A:  MOVWF  FE9
06A2C:  MOVLW  02
06A2E:  ADDWFC x40,W
06A30:  MOVWF  FEA
06A32:  MOVFF  FEF,E47
06A36:  MOVF   FF2,W
06A38:  MOVWF  00
06A3A:  BCF    FF2.7
06A3C:  MOVFF  E46,FAA
06A40:  MOVFF  E45,FA9
06A44:  MOVFF  E47,FA8
06A48:  BCF    FA6.6
06A4A:  BCF    FA6.7
06A4C:  BSF    FA6.2
06A4E:  MOVLB  F
06A50:  MOVLW  55
06A52:  MOVWF  FA7
06A54:  MOVLW  AA
06A56:  MOVWF  FA7
06A58:  BSF    FA6.1
06A5A:  BTFSC  FA6.1
06A5C:  BRA    6A5A
06A5E:  BCF    FA6.2
06A60:  MOVF   00,W
06A62:  IORWF  FF2,F
....................                   }
06A64:  MOVLB  E
06A66:  MOVFF  E40,03
06A6A:  MOVF   x3F,W
06A6C:  INCF   x3F,F
06A6E:  BTFSC  FD8.2
06A70:  INCF   x40,F
06A72:  INCF   x41,F
06A74:  BTFSC  FD8.2
06A76:  INCF   x42,F
06A78:  BRA    6984
06A7A:  MOVLB  F
....................                }
....................                SMS_Massage20[j] = '\0' ; // end string
06A7C:  MOVLW  E1
06A7E:  MOVLB  E
06A80:  ADDWF  x41,W
06A82:  MOVWF  FE9
06A84:  MOVLW  0C
06A86:  ADDWFC x42,W
06A88:  MOVWF  FEA
06A8A:  CLRF   FEF
....................                
....................             
....................                TxD_Buff[0] = Address ;         //Address
06A8C:  MOVFF  62,64
....................                TxD_Buff[1] = 0x22 ;            //return function code
06A90:  MOVLW  22
06A92:  MOVLB  0
06A94:  MOVWF  x65
....................    
....................                CRC(TxD_Buff,2)   ;            //Cal CRC 2 byte
06A96:  MOVLB  E
06A98:  CLRF   x47
06A9A:  MOVLW  64
06A9C:  MOVWF  x46
06A9E:  MOVLW  02
06AA0:  MOVWF  x48
06AA2:  MOVLB  0
06AA4:  CALL   2656
....................    
....................                TxD_Buff[2] = CRC_Hi ;
06AA8:  MOVFF  665,66
....................                TxD_Buff[3] = CRC_Lo ;
06AAC:  MOVFF  664,67
....................    
....................                output_bit(P485ctrl,1);
06AB0:  BSF    F8A.3
06AB2:  BCF    F93.3
....................                delay_ms(10);
06AB4:  MOVLW  0A
06AB6:  MOVLB  E
06AB8:  MOVWF  x45
06ABA:  MOVLB  0
06ABC:  CALL   0A24
....................    
....................                putc(Txd_Buff[0]);
06AC0:  MOVF   x64,W
06AC2:  CALL   26AC
....................                putc(Txd_Buff[1]);
06AC6:  MOVF   x65,W
06AC8:  CALL   26AC
....................                putc(Txd_Buff[2]);
06ACC:  MOVF   x66,W
06ACE:  CALL   26AC
....................                putc(Txd_Buff[3]);
06AD2:  MOVF   x67,W
06AD4:  CALL   26AC
....................    
....................                delay_ms(3);
06AD8:  MOVLW  03
06ADA:  MOVLB  E
06ADC:  MOVWF  x45
06ADE:  MOVLB  0
06AE0:  CALL   0A24
....................                output_bit(P485ctrl,0);
06AE4:  BCF    F8A.3
06AE6:  BCF    F93.3
06AE8:  MOVLB  6
....................             }
....................             ////////////////////////////// WRITE Faultname //////////////////////////
.................... 
....................          
....................                   if(RxD_Buff[1] == 0x03)///////////// READ HOLDING REGGISTER /////////////////////
06AEA:  MOVLB  2
06AEC:  MOVF   x65,W
06AEE:  SUBLW  03
06AF0:  BNZ   6B9A
....................          {
....................             Data_Buff[0] = Input9_16; //>> Start_Address ;
06AF2:  MOVFF  48,66D
....................             Data_Buff[1] = Input1_8;// >> Start_Address ;
06AF6:  MOVFF  44,66E
....................             Data_Buff[2] = Input25_32;
06AFA:  MOVFF  4A,66F
....................             Data_Buff[3] = Input17_24;// >> Start_Address ;
06AFE:  MOVFF  49,670
....................             
....................             TxD_Buff[0] = Address ;         //Address
06B02:  MOVFF  62,64
....................             TxD_Buff[1] = 0x03 ;           //Function Code
06B06:  MOVLW  03
06B08:  MOVLB  0
06B0A:  MOVWF  x65
....................             TxD_Buff[2] = 0x04 ;          //Byte Count
06B0C:  MOVLW  04
06B0E:  MOVWF  x66
....................             TxD_Buff[3] = Data_Buff[0];   //first byte Data
06B10:  MOVFF  66D,67
....................             TxD_Buff[4] = Data_Buff[1];  //second byte Data
06B14:  MOVFF  66E,68
....................             TxD_Buff[5] = Data_Buff[2]; 
06B18:  MOVFF  66F,69
....................             TxD_Buff[6] = Data_Buff[3]; 
06B1C:  MOVFF  670,6A
.................... 
....................             CRC(TxD_Buff,7)   ;            //Cal CRC 5 Byte
06B20:  MOVLB  E
06B22:  CLRF   x47
06B24:  MOVLW  64
06B26:  MOVWF  x46
06B28:  MOVLW  07
06B2A:  MOVWF  x48
06B2C:  MOVLB  0
06B2E:  CALL   2656
.................... 
....................             TxD_Buff[7] = CRC_Hi ;
06B32:  MOVFF  665,6B
....................             TxD_Buff[8] = CRC_Lo ;
06B36:  MOVFF  664,6C
.................... 
....................             output_bit(P485ctrl,1);
06B3A:  BSF    F8A.3
06B3C:  BCF    F93.3
....................             restart_wdt();
06B3E:  CLRWDT
....................             delay_ms(4);
06B40:  MOVLW  04
06B42:  MOVLB  E
06B44:  MOVWF  x45
06B46:  MOVLB  0
06B48:  CALL   0A24
....................             restart_wdt();
06B4C:  CLRWDT
.................... 
....................             putc(TxD_Buff[0]) ;               //Address
06B4E:  MOVF   x64,W
06B50:  CALL   26AC
....................             putc(TxD_Buff[1]) ;               //Function Code
06B54:  MOVF   x65,W
06B56:  CALL   26AC
....................             putc(TxD_Buff[2]) ;               //Byte Count
06B5A:  MOVF   x66,W
06B5C:  CALL   26AC
....................             putc(TxD_Buff[3]) ;
06B60:  MOVF   x67,W
06B62:  CALL   26AC
....................             putc(TxD_Buff[4]) ;
06B66:  MOVF   x68,W
06B68:  CALL   26AC
....................             putc(TxD_Buff[5]) ;
06B6C:  MOVF   x69,W
06B6E:  CALL   26AC
....................             putc(TxD_Buff[6]) ;
06B72:  MOVF   x6A,W
06B74:  CALL   26AC
....................             putc(TxD_Buff[7]) ;
06B78:  MOVF   x6B,W
06B7A:  CALL   26AC
....................             putc(TxD_Buff[8]) ;
06B7E:  MOVF   x6C,W
06B80:  CALL   26AC
....................             //putc(TxD_Buff[9]) ;
.................... 
....................             restart_wdt();
06B84:  CLRWDT
....................             delay_ms(3);
06B86:  MOVLW  03
06B88:  MOVLB  E
06B8A:  MOVWF  x45
06B8C:  MOVLB  0
06B8E:  CALL   0A24
....................             restart_wdt();
06B92:  CLRWDT
....................             output_bit(P485ctrl,0);
06B94:  BCF    F8A.3
06B96:  BCF    F93.3
06B98:  MOVLB  2
.................... 
....................          }
....................        
....................       }  
.................... 
....................       Send_check_Time = 500; //5 Second
06B9A:  MOVLW  01
06B9C:  MOVLB  6
06B9E:  MOVWF  x67
06BA0:  MOVLW  F4
06BA2:  MOVWF  x66
....................    }
.................... 
....................    recieve_completed = 0 ;
06BA4:  BCF    30.5
....................    sequence = end_sq ;
06BA6:  MOVFF  58,61
....................    T_timeout = 0x00;
06BAA:  MOVLB  A
06BAC:  CLRF   x6E
....................    RxD_DataLen = 0x00 ;
06BAE:  MOVLB  0
06BB0:  CLRF   x63
....................    output_bit(P485ctrl,0);
06BB2:  BCF    F8A.3
06BB4:  BCF    F93.3
06BB6:  GOTO   CF1A (RETURN)
.................... }
.................... 
.................... 
.................... ////////////////////////////////////////////////////////////////////
.................... 
.................... void Read_Input(void)
.................... {
.................... 
....................     ///////////////////////--Edit--///////////////////
....................     //unsigned char MCP23s17_dat1=0;
....................     //unsigned char MCP23s17_dat2=0;
....................     //unsigned char MCP23s17_dat3=0;
....................     //unsigned char MCP23s17_dat4=0;
....................     
....................     /*
....................     MCP23s17_dat1 = IO_INPUT_A(IO_DEVICE_0);
....................     MCP23s17_dat2 = IO_INPUT_B(IO_DEVICE_0);
....................     MCP23s17_dat3 = IO_INPUT_A(IO_DEVICE_1);
....................     MCP23s17_dat4 = IO_INPUT_B(IO_DEVICE_1);
....................     if((MCP23s17_dat1==0)&&(MCP23s17_dat2==0)&&(MCP23s17_dat3==0)&&(MCP23s17_dat4==0))
....................      return;
....................      */
....................     /*
....................     do
....................     {
....................       MCP23s17_dat1 = IO_INPUT_A(IO_DEVICE_0);
....................       //MCP23s17_dat2 = IO_INPUT_B(IO_DEVICE_0);
....................       MCP23s17_dat3 = IO_INPUT_A(IO_DEVICE_1);
....................       //MCP23s17_dat4 = IO_INPUT_B(IO_DEVICE_1);
....................       restart_wdt();
....................     }while((MCP23s17_dat1==0)&&(MCP23s17_dat3==0));
....................     */
....................      
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_0);
*
02C5C:  MOVLB  E
02C5E:  CLRF   x46
02C60:  MOVLB  0
02C62:  RCALL  2BA6
02C64:  MOVFF  01,A6D
....................         
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02C68:  BTFSS  1A.4
02C6A:  BRA    2C72
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;         
02C6C:  MOVLB  A
02C6E:  COMF   x6D,F
02C70:  MOVLB  0
....................       }
....................       
....................       FaultNow[11] = MCP23s17_Ip_dat;
02C72:  MOVLB  D
02C74:  BCF    xDD.3
02C76:  MOVLB  A
02C78:  BTFSS  x6D.0
02C7A:  BRA    2C82
02C7C:  MOVLB  D
02C7E:  BSF    xDD.3
02C80:  MOVLB  A
....................       FaultNow[12] = MCP23s17_Ip_dat >> 1;
02C82:  BCF    FD8.0
02C84:  RRCF   x6D,W
02C86:  MOVLB  D
02C88:  BCF    xDD.4
02C8A:  BTFSC  FE8.0
02C8C:  BSF    xDD.4
....................       FaultNow[13] = MCP23s17_Ip_dat >> 2;
02C8E:  MOVLB  A
02C90:  RRCF   x6D,W
02C92:  MOVWF  00
02C94:  RRCF   00,F
02C96:  MOVLW  3F
02C98:  ANDWF  00,F
02C9A:  MOVLB  D
02C9C:  BCF    xDD.5
02C9E:  BTFSC  00.0
02CA0:  BSF    xDD.5
....................       FaultNow[14] = MCP23s17_Ip_dat >> 3;
02CA2:  MOVLB  A
02CA4:  RRCF   x6D,W
02CA6:  MOVWF  00
02CA8:  RRCF   00,F
02CAA:  RRCF   00,F
02CAC:  MOVLW  1F
02CAE:  ANDWF  00,F
02CB0:  MOVLB  D
02CB2:  BCF    xDD.6
02CB4:  BTFSC  00.0
02CB6:  BSF    xDD.6
....................       FaultNow[15] = MCP23s17_Ip_dat >> 4;
02CB8:  MOVLB  A
02CBA:  SWAPF  x6D,W
02CBC:  MOVWF  00
02CBE:  MOVLW  0F
02CC0:  ANDWF  00,F
02CC2:  MOVLB  D
02CC4:  BCF    xDD.7
02CC6:  BTFSC  00.0
02CC8:  BSF    xDD.7
....................       FaultNow[16] = MCP23s17_Ip_dat >> 5;
02CCA:  MOVLB  A
02CCC:  SWAPF  x6D,W
02CCE:  MOVWF  00
02CD0:  RRCF   00,F
02CD2:  MOVLW  07
02CD4:  ANDWF  00,F
02CD6:  MOVLB  D
02CD8:  BCF    xDE.0
02CDA:  BTFSC  00.0
02CDC:  BSF    xDE.0
....................       FaultNow[17] = MCP23s17_Ip_dat >> 6;
02CDE:  MOVLB  A
02CE0:  SWAPF  x6D,W
02CE2:  MOVWF  00
02CE4:  RRCF   00,F
02CE6:  RRCF   00,F
02CE8:  MOVLW  03
02CEA:  ANDWF  00,F
02CEC:  MOVLB  D
02CEE:  BCF    xDE.1
02CF0:  BTFSC  00.0
02CF2:  BSF    xDE.1
....................       FaultNow[18] = MCP23s17_Ip_dat >> 7;
02CF4:  CLRF   00
02CF6:  MOVLB  A
02CF8:  BTFSC  x6D.7
02CFA:  BSF    00.0
02CFC:  MOVLB  D
02CFE:  BCF    xDE.2
02D00:  BTFSC  00.0
02D02:  BSF    xDE.2
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_0);
02D04:  MOVLB  E
02D06:  CLRF   x46
02D08:  MOVLB  0
02D0A:  RCALL  2BC2
02D0C:  MOVFF  01,A6D
....................       
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02D10:  BTFSS  1A.4
02D12:  BRA    2D1A
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
02D14:  MOVLB  A
02D16:  COMF   x6D,F
02D18:  MOVLB  0
....................       }
....................       
....................       FaultNow[19] = MCP23s17_Ip_dat;
02D1A:  MOVLB  D
02D1C:  BCF    xDE.3
02D1E:  MOVLB  A
02D20:  BTFSS  x6D.0
02D22:  BRA    2D2A
02D24:  MOVLB  D
02D26:  BSF    xDE.3
02D28:  MOVLB  A
....................       FaultNow[20] = MCP23s17_Ip_dat >> 1;
02D2A:  BCF    FD8.0
02D2C:  RRCF   x6D,W
02D2E:  MOVLB  D
02D30:  BCF    xDE.4
02D32:  BTFSC  FE8.0
02D34:  BSF    xDE.4
....................       
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_A(IO_DEVICE_1);
02D36:  MOVLW  02
02D38:  MOVLB  E
02D3A:  MOVWF  x46
02D3C:  MOVLB  0
02D3E:  RCALL  2BA6
02D40:  MOVFF  01,A6D
....................       
....................           
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02D44:  BTFSS  1A.4
02D46:  BRA    2D4E
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
02D48:  MOVLB  A
02D4A:  COMF   x6D,F
02D4C:  MOVLB  0
....................          
....................       }
....................       
....................       FaultNow[1] = MCP23s17_Ip_dat;
02D4E:  MOVLB  D
02D50:  BCF    xDC.1
02D52:  MOVLB  A
02D54:  BTFSS  x6D.0
02D56:  BRA    2D5E
02D58:  MOVLB  D
02D5A:  BSF    xDC.1
02D5C:  MOVLB  A
....................       FaultNow[2] = MCP23s17_Ip_dat >> 1;
02D5E:  BCF    FD8.0
02D60:  RRCF   x6D,W
02D62:  MOVLB  D
02D64:  BCF    xDC.2
02D66:  BTFSC  FE8.0
02D68:  BSF    xDC.2
....................       FaultNow[3] = MCP23s17_Ip_dat >> 2;
02D6A:  MOVLB  A
02D6C:  RRCF   x6D,W
02D6E:  MOVWF  00
02D70:  RRCF   00,F
02D72:  MOVLW  3F
02D74:  ANDWF  00,F
02D76:  MOVLB  D
02D78:  BCF    xDC.3
02D7A:  BTFSC  00.0
02D7C:  BSF    xDC.3
....................       FaultNow[4] = MCP23s17_Ip_dat >> 3;
02D7E:  MOVLB  A
02D80:  RRCF   x6D,W
02D82:  MOVWF  00
02D84:  RRCF   00,F
02D86:  RRCF   00,F
02D88:  MOVLW  1F
02D8A:  ANDWF  00,F
02D8C:  MOVLB  D
02D8E:  BCF    xDC.4
02D90:  BTFSC  00.0
02D92:  BSF    xDC.4
....................       FaultNow[5] = MCP23s17_Ip_dat >> 4;
02D94:  MOVLB  A
02D96:  SWAPF  x6D,W
02D98:  MOVWF  00
02D9A:  MOVLW  0F
02D9C:  ANDWF  00,F
02D9E:  MOVLB  D
02DA0:  BCF    xDC.5
02DA2:  BTFSC  00.0
02DA4:  BSF    xDC.5
....................       FaultNow[6] = MCP23s17_Ip_dat >> 5;
02DA6:  MOVLB  A
02DA8:  SWAPF  x6D,W
02DAA:  MOVWF  00
02DAC:  RRCF   00,F
02DAE:  MOVLW  07
02DB0:  ANDWF  00,F
02DB2:  MOVLB  D
02DB4:  BCF    xDC.6
02DB6:  BTFSC  00.0
02DB8:  BSF    xDC.6
....................       FaultNow[7] = MCP23s17_Ip_dat >> 6;
02DBA:  MOVLB  A
02DBC:  SWAPF  x6D,W
02DBE:  MOVWF  00
02DC0:  RRCF   00,F
02DC2:  RRCF   00,F
02DC4:  MOVLW  03
02DC6:  ANDWF  00,F
02DC8:  MOVLB  D
02DCA:  BCF    xDC.7
02DCC:  BTFSC  00.0
02DCE:  BSF    xDC.7
....................       FaultNow[8] = MCP23s17_Ip_dat >> 7;
02DD0:  CLRF   00
02DD2:  MOVLB  A
02DD4:  BTFSC  x6D.7
02DD6:  BSF    00.0
02DD8:  MOVLB  D
02DDA:  BCF    xDD.0
02DDC:  BTFSC  00.0
02DDE:  BSF    xDD.0
....................       
....................       MCP23s17_Ip_dat = IO_INPUT_B(IO_DEVICE_1);
02DE0:  MOVLW  02
02DE2:  MOVLB  E
02DE4:  MOVWF  x46
02DE6:  MOVLB  0
02DE8:  RCALL  2BC2
02DEA:  MOVFF  01,A6D
....................       
....................       if (AutoTestFlag)  // TEST FROM MODBUS
02DEE:  BTFSS  1A.4
02DF0:  BRA    2DF8
....................       {
....................          MCP23s17_Ip_dat = ~MCP23s17_Ip_dat;
02DF2:  MOVLB  A
02DF4:  COMF   x6D,F
02DF6:  MOVLB  0
....................       }
....................       
....................       FaultNow[9] = MCP23s17_Ip_dat;
02DF8:  MOVLB  D
02DFA:  BCF    xDD.1
02DFC:  MOVLB  A
02DFE:  BTFSS  x6D.0
02E00:  BRA    2E08
02E02:  MOVLB  D
02E04:  BSF    xDD.1
02E06:  MOVLB  A
....................       FaultNow[10] = MCP23s17_Ip_dat >> 1;
02E08:  BCF    FD8.0
02E0A:  RRCF   x6D,W
02E0C:  MOVLB  D
02E0E:  BCF    xDD.2
02E10:  BTFSC  FE8.0
02E12:  BSF    xDD.2
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       unsigned char i;
....................       for( i=1; i<=20; i++)
02E14:  MOVLW  01
02E16:  MOVLB  E
02E18:  MOVWF  x45
02E1A:  MOVF   x45,W
02E1C:  SUBLW  14
02E1E:  BTFSS  FD8.0
02E20:  BRA    34A2
....................       {
....................          if(FaultNCNO[i] ==NO)
02E22:  MOVFF  E45,E49
02E26:  MOVLW  0E
02E28:  MOVWF  x4B
02E2A:  MOVLW  33
02E2C:  MOVWF  x4A
02E2E:  MOVLB  0
02E30:  CALL   25BA
02E34:  MOVF   01,W
02E36:  ANDLW  01
02E38:  SUBLW  01
02E3A:  BTFSS  FD8.2
02E3C:  BRA    315E
....................          {
....................              if(FaultNow[i]==0)
02E3E:  MOVFF  E45,E49
02E42:  MOVLW  0D
02E44:  MOVLB  E
02E46:  MOVWF  x4B
02E48:  MOVLW  DC
02E4A:  MOVWF  x4A
02E4C:  MOVLB  0
02E4E:  CALL   25BA
02E52:  MOVF   01,W
02E54:  ANDLW  01
02E56:  BTFSS  FD8.2
02E58:  BRA    2FDC
....................              {   
....................                if(FaultAgo[i]==0)
02E5A:  MOVFF  E45,E49
02E5E:  MOVLW  0D
02E60:  MOVLB  E
02E62:  MOVWF  x4B
02E64:  MOVLW  D9
02E66:  MOVWF  x4A
02E68:  MOVLB  0
02E6A:  CALL   25BA
02E6E:  MOVF   01,W
02E70:  ANDLW  01
02E72:  BTFSS  FD8.2
02E74:  BRA    2FC0
....................                {
....................                    ReleaseTime[i]++;
02E76:  BCF    FD8.0
02E78:  MOVLB  E
02E7A:  RLCF   x45,W
02E7C:  CLRF   03
02E7E:  ADDLW  DF
02E80:  MOVWF  FE9
02E82:  MOVLW  0D
02E84:  ADDWFC 03,W
02E86:  MOVWF  FEA
02E88:  MOVLW  01
02E8A:  ADDWF  FEE,F
02E8C:  BNC   2E90
02E8E:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
02E90:  BCF    FD8.0
02E92:  RLCF   x45,W
02E94:  CLRF   03
02E96:  ADDLW  DF
02E98:  MOVWF  FE9
02E9A:  MOVLW  0D
02E9C:  ADDWFC 03,W
02E9E:  MOVWF  FEA
02EA0:  MOVFF  FEC,E47
02EA4:  MOVF   FED,F
02EA6:  MOVFF  FEF,E46
02EAA:  BCF    FD8.0
02EAC:  RLCF   x45,W
02EAE:  CLRF   03
02EB0:  ADDLW  09
02EB2:  MOVWF  FE9
02EB4:  MOVLW  0E
02EB6:  ADDWFC 03,W
02EB8:  MOVWF  FEA
02EBA:  MOVFF  FEC,E4B
02EBE:  MOVF   FED,F
02EC0:  MOVFF  FEF,E4A
02EC4:  CLRF   x4D
02EC6:  MOVLW  4B
02EC8:  MOVWF  x4C
02ECA:  MOVLB  0
02ECC:  RCALL  2BDE
02ECE:  MOVFF  02,E49
02ED2:  MOVFF  01,E48
02ED6:  MOVLW  0F
02ED8:  MOVLB  E
02EDA:  ADDWF  01,W
02EDC:  MOVWF  01
02EDE:  MOVLW  00
02EE0:  ADDWFC 02,W
02EE2:  MOVWF  03
02EE4:  MOVF   03,W
02EE6:  SUBWF  x47,W
02EE8:  BTFSS  FD8.0
02EEA:  BRA    2FBC
02EEC:  BNZ   2EF4
02EEE:  MOVF   01,W
02EF0:  SUBWF  x46,W
02EF2:  BNC   2FBC
....................                    {   
....................                      ReleaseTime[i] = 0;
02EF4:  BCF    FD8.0
02EF6:  RLCF   x45,W
02EF8:  CLRF   03
02EFA:  ADDLW  DF
02EFC:  MOVWF  FE9
02EFE:  MOVLW  0D
02F00:  ADDWFC 03,W
02F02:  MOVWF  FEA
02F04:  CLRF   FEC
02F06:  MOVF   FED,F
02F08:  CLRF   FEF
....................                      switch(i)
02F0A:  MOVLW  01
02F0C:  SUBWF  x45,W
02F0E:  ADDLW  EC
02F10:  BC    2FBC
02F12:  ADDLW  14
02F14:  MOVLB  0
02F16:  GOTO   375E
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
02F1A:  MOVLB  D
02F1C:  BCF    xA1.0
....................                         break;
02F1E:  MOVLB  E
02F20:  BRA    2FBC
....................                         case 2:
....................                            Inputt.B2 = 0; 
02F22:  MOVLB  D
02F24:  BCF    xA1.1
....................                         break;
02F26:  MOVLB  E
02F28:  BRA    2FBC
....................                         case 3:
....................                            Inputt.B3 = 0; 
02F2A:  MOVLB  D
02F2C:  BCF    xA1.2
....................                         break;
02F2E:  MOVLB  E
02F30:  BRA    2FBC
....................                         case 4:
....................                            Inputt.B4 = 0; 
02F32:  MOVLB  D
02F34:  BCF    xA1.3
....................                         break;
02F36:  MOVLB  E
02F38:  BRA    2FBC
....................                         case 5:
....................                            Inputt.B5 = 0; 
02F3A:  MOVLB  D
02F3C:  BCF    xA1.4
....................                         break;
02F3E:  MOVLB  E
02F40:  BRA    2FBC
....................                         case 6:
....................                            Inputt.B6 = 0; 
02F42:  MOVLB  D
02F44:  BCF    xA1.5
....................                         break;
02F46:  MOVLB  E
02F48:  BRA    2FBC
....................                         case 7:
....................                            Inputt.B7 = 0; 
02F4A:  MOVLB  D
02F4C:  BCF    xA1.6
....................                          break;
02F4E:  MOVLB  E
02F50:  BRA    2FBC
....................                          case 8:
....................                            Inputt.B8 = 0; 
02F52:  MOVLB  D
02F54:  BCF    xA1.7
....................                         break;
02F56:  MOVLB  E
02F58:  BRA    2FBC
....................                         case 9:
....................                            Inputt.B9 = 0; 
02F5A:  MOVLB  D
02F5C:  BCF    xA2.0
....................                         break;
02F5E:  MOVLB  E
02F60:  BRA    2FBC
....................                         case 10:
....................                            Inputt.B10 = 0; 
02F62:  MOVLB  D
02F64:  BCF    xA2.1
....................                         break;
02F66:  MOVLB  E
02F68:  BRA    2FBC
....................                         case 11:
....................                            Inputt.B11 = 0; 
02F6A:  MOVLB  D
02F6C:  BCF    xA2.2
....................                         break;
02F6E:  MOVLB  E
02F70:  BRA    2FBC
....................                         case 12:
....................                            Inputt.B12 = 0; 
02F72:  MOVLB  D
02F74:  BCF    xA2.3
....................                         break;
02F76:  MOVLB  E
02F78:  BRA    2FBC
....................                         case 13:
....................                            Inputt.B13 = 0; 
02F7A:  MOVLB  D
02F7C:  BCF    xA2.4
....................                         break;
02F7E:  MOVLB  E
02F80:  BRA    2FBC
....................                         case 14:
....................                            Inputt.B14 = 0; 
02F82:  MOVLB  D
02F84:  BCF    xA2.5
....................                         break;
02F86:  MOVLB  E
02F88:  BRA    2FBC
....................                         case 15:
....................                            Inputt.B15 = 0; 
02F8A:  MOVLB  D
02F8C:  BCF    xA2.6
....................                         break;
02F8E:  MOVLB  E
02F90:  BRA    2FBC
....................                         case 16:
....................                             Inputt.B16 = 0; 
02F92:  MOVLB  D
02F94:  BCF    xA2.7
....................                          break; 
02F96:  MOVLB  E
02F98:  BRA    2FBC
....................                         case 17:
....................                            Inputt.B17 = 0; 
02F9A:  MOVLB  D
02F9C:  BCF    xA3.0
....................                          break;
02F9E:  MOVLB  E
02FA0:  BRA    2FBC
....................                          case 18:
....................                            Inputt.B18 = 0; 
02FA2:  MOVLB  D
02FA4:  BCF    xA3.1
....................                         break;
02FA6:  MOVLB  E
02FA8:  BRA    2FBC
....................                         case 19:
....................                            Inputt.B19 = 0; 
02FAA:  MOVLB  D
02FAC:  BCF    xA3.2
....................                         break;
02FAE:  MOVLB  E
02FB0:  BRA    2FBC
....................                         case 20:
....................                            Inputt.B20 = 0; 
02FB2:  MOVLB  D
02FB4:  BCF    xA3.3
....................                         break;
02FB6:  MOVLB  E
02FB8:  BRA    2FBC
02FBA:  MOVLB  E
....................                                    
....................                      }                 
....................                    }
....................                }
02FBC:  BRA    2FD8
02FBE:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
02FC0:  BCF    FD8.0
02FC2:  MOVLB  E
02FC4:  RLCF   x45,W
02FC6:  CLRF   03
02FC8:  ADDLW  DF
02FCA:  MOVWF  FE9
02FCC:  MOVLW  0D
02FCE:  ADDWFC 03,W
02FD0:  MOVWF  FEA
02FD2:  CLRF   FEC
02FD4:  MOVF   FED,F
02FD6:  CLRF   FEF
....................                }
....................              }
02FD8:  BRA    315C
02FDA:  MOVLB  0
....................              else //if(FaultNow[i]==1
....................              {
....................                if(FaultAgo[i]==1)
02FDC:  MOVFF  E45,E49
02FE0:  MOVLW  0D
02FE2:  MOVLB  E
02FE4:  MOVWF  x4B
02FE6:  MOVLW  D9
02FE8:  MOVWF  x4A
02FEA:  MOVLB  0
02FEC:  CALL   25BA
02FF0:  MOVF   01,W
02FF2:  ANDLW  01
02FF4:  SUBLW  01
02FF6:  BTFSS  FD8.2
02FF8:  BRA    3144
....................                {
....................                    ReleaseTime[i]++;
02FFA:  BCF    FD8.0
02FFC:  MOVLB  E
02FFE:  RLCF   x45,W
03000:  CLRF   03
03002:  ADDLW  DF
03004:  MOVWF  FE9
03006:  MOVLW  0D
03008:  ADDWFC 03,W
0300A:  MOVWF  FEA
0300C:  MOVLW  01
0300E:  ADDWF  FEE,F
03010:  BNC   3014
03012:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
03014:  BCF    FD8.0
03016:  RLCF   x45,W
03018:  CLRF   03
0301A:  ADDLW  DF
0301C:  MOVWF  FE9
0301E:  MOVLW  0D
03020:  ADDWFC 03,W
03022:  MOVWF  FEA
03024:  MOVFF  FEC,E47
03028:  MOVF   FED,F
0302A:  MOVFF  FEF,E46
0302E:  BCF    FD8.0
03030:  RLCF   x45,W
03032:  CLRF   03
03034:  ADDLW  09
03036:  MOVWF  FE9
03038:  MOVLW  0E
0303A:  ADDWFC 03,W
0303C:  MOVWF  FEA
0303E:  MOVFF  FEC,E4B
03042:  MOVF   FED,F
03044:  MOVFF  FEF,E4A
03048:  CLRF   x4D
0304A:  MOVLW  4B
0304C:  MOVWF  x4C
0304E:  MOVLB  0
03050:  RCALL  2BDE
03052:  MOVFF  02,E49
03056:  MOVFF  01,E48
0305A:  MOVLW  0F
0305C:  MOVLB  E
0305E:  ADDWF  01,W
03060:  MOVWF  01
03062:  MOVLW  00
03064:  ADDWFC 02,W
03066:  MOVWF  03
03068:  MOVF   03,W
0306A:  SUBWF  x47,W
0306C:  BTFSS  FD8.0
0306E:  BRA    3140
03070:  BNZ   3078
03072:  MOVF   01,W
03074:  SUBWF  x46,W
03076:  BNC   3140
....................                    {   
....................                      ReleaseTime[i] = 1;
03078:  BCF    FD8.0
0307A:  RLCF   x45,W
0307C:  CLRF   03
0307E:  ADDLW  DF
03080:  MOVWF  FE9
03082:  MOVLW  0D
03084:  ADDWFC 03,W
03086:  MOVWF  FEA
03088:  CLRF   FEC
0308A:  MOVF   FED,F
0308C:  MOVLW  01
0308E:  MOVWF  FEF
....................                      switch(i)
03090:  SUBWF  x45,W
03092:  ADDLW  EC
03094:  BC    3140
03096:  ADDLW  14
03098:  MOVLB  0
0309A:  GOTO   37A0
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
0309E:  MOVLB  D
030A0:  BSF    xA1.0
....................                         break;
030A2:  MOVLB  E
030A4:  BRA    3140
....................                         case 2:
....................                            Inputt.B2 = 1; 
030A6:  MOVLB  D
030A8:  BSF    xA1.1
....................                         break;
030AA:  MOVLB  E
030AC:  BRA    3140
....................                         case 3:
....................                            Inputt.B3 = 1; 
030AE:  MOVLB  D
030B0:  BSF    xA1.2
....................                         break;
030B2:  MOVLB  E
030B4:  BRA    3140
....................                         case 4:
....................                            Inputt.B4 = 1; 
030B6:  MOVLB  D
030B8:  BSF    xA1.3
....................                         break;
030BA:  MOVLB  E
030BC:  BRA    3140
....................                         case 5:
....................                            Inputt.B5 = 1; 
030BE:  MOVLB  D
030C0:  BSF    xA1.4
....................                         break;
030C2:  MOVLB  E
030C4:  BRA    3140
....................                         case 6:
....................                            Inputt.B6 = 1; 
030C6:  MOVLB  D
030C8:  BSF    xA1.5
....................                         break;
030CA:  MOVLB  E
030CC:  BRA    3140
....................                         case 7:
....................                            Inputt.B7 = 1; 
030CE:  MOVLB  D
030D0:  BSF    xA1.6
....................                          break;
030D2:  MOVLB  E
030D4:  BRA    3140
....................                          case 8:
....................                            Inputt.B8 = 1; 
030D6:  MOVLB  D
030D8:  BSF    xA1.7
....................                         break;
030DA:  MOVLB  E
030DC:  BRA    3140
....................                         case 9:
....................                            Inputt.B9 = 1; 
030DE:  MOVLB  D
030E0:  BSF    xA2.0
....................                         break;
030E2:  MOVLB  E
030E4:  BRA    3140
....................                         case 10:
....................                            Inputt.B10 = 1; 
030E6:  MOVLB  D
030E8:  BSF    xA2.1
....................                         break;
030EA:  MOVLB  E
030EC:  BRA    3140
....................                         case 11:
....................                            Inputt.B11 = 1; 
030EE:  MOVLB  D
030F0:  BSF    xA2.2
....................                         break;
030F2:  MOVLB  E
030F4:  BRA    3140
....................                         case 12:
....................                            Inputt.B12 = 1; 
030F6:  MOVLB  D
030F8:  BSF    xA2.3
....................                         break;
030FA:  MOVLB  E
030FC:  BRA    3140
....................                         case 13:
....................                            Inputt.B13 = 1; 
030FE:  MOVLB  D
03100:  BSF    xA2.4
....................                         break;
03102:  MOVLB  E
03104:  BRA    3140
....................                         case 14:
....................                            Inputt.B14 = 1; 
03106:  MOVLB  D
03108:  BSF    xA2.5
....................                         break;
0310A:  MOVLB  E
0310C:  BRA    3140
....................                         case 15:
....................                            Inputt.B15 = 1; 
0310E:  MOVLB  D
03110:  BSF    xA2.6
....................                         break;
03112:  MOVLB  E
03114:  BRA    3140
....................                         case 16:
....................                             Inputt.B16 = 1;
03116:  MOVLB  D
03118:  BSF    xA2.7
....................                          break;
0311A:  MOVLB  E
0311C:  BRA    3140
....................                          
....................                          case 17:
....................                            Inputt.B17 = 1; 
0311E:  MOVLB  D
03120:  BSF    xA3.0
....................                          break;
03122:  MOVLB  E
03124:  BRA    3140
....................                          case 18:
....................                            Inputt.B18 = 1; 
03126:  MOVLB  D
03128:  BSF    xA3.1
....................                         break;
0312A:  MOVLB  E
0312C:  BRA    3140
....................                         case 19:
....................                            Inputt.B19 = 1; 
0312E:  MOVLB  D
03130:  BSF    xA3.2
....................                         break;
03132:  MOVLB  E
03134:  BRA    3140
....................                         case 20:
....................                            Inputt.B20 = 1; 
03136:  MOVLB  D
03138:  BSF    xA3.3
....................                         break;
0313A:  MOVLB  E
0313C:  BRA    3140
0313E:  MOVLB  E
....................                                    
....................                      }                 
....................                    }
....................                }
03140:  BRA    315C
03142:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
03144:  BCF    FD8.0
03146:  MOVLB  E
03148:  RLCF   x45,W
0314A:  CLRF   03
0314C:  ADDLW  DF
0314E:  MOVWF  FE9
03150:  MOVLW  0D
03152:  ADDWFC 03,W
03154:  MOVWF  FEA
03156:  CLRF   FEC
03158:  MOVF   FED,F
0315A:  CLRF   FEF
....................                }
....................              
....................              /*
....................                   ReleaseTime[i] = 0;
....................                   switch(i)
....................                   {
....................                       case 1:
....................                          Input.B1 = 1; 
....................                       break;
....................                       case 2:
....................                          Input.B2 = 1; 
....................                       break;
....................                       case 3:
....................                          Input.B3 = 1; 
....................                       break;
....................                       case 4:
....................                          Input.B4 = 1; 
....................                       break;
....................                       case 5:
....................                          Input.B5 = 1; 
....................                       break;
....................                       case 6:
....................                          Input.B6 = 1; 
....................                       break;
....................                       case 7:
....................                          Input.B7 = 1; 
....................                       break;
....................                       case 8:
....................                          Input.B8 = 1; 
....................                       break;
....................                       case 9:
....................                          Input.B9 = 1; 
....................                       break;
....................                       case 10:
....................                          Input.B10 = 1; 
....................                       break;
....................                       case 11:
....................                          Input.B11 = 1; 
....................                       break;
....................                       case 12:
....................                          Input.B12 = 1; 
....................                       break;
....................                       case 13:
....................                          Input.B13 = 1; 
....................                       break;
....................                       case 14:
....................                          Input.B14 = 1; 
....................                       break;
....................                       case 15:
....................                          Input.B15 = 1; 
....................                       break;
....................                       case 16:
....................                          Input.B16 = 1; 
....................                       break;
....................                          
....................                   }
....................                   */
....................              }
....................           }
0315C:  BRA    349A
....................           else if(FaultNCNO[i] ==NC)
0315E:  MOVFF  E45,E49
03162:  MOVLW  0E
03164:  MOVLB  E
03166:  MOVWF  x4B
03168:  MOVLW  33
0316A:  MOVWF  x4A
0316C:  MOVLB  0
0316E:  CALL   25BA
03172:  MOVF   01,W
03174:  ANDLW  01
03176:  BTFSS  FD8.2
03178:  BRA    349C
....................           {
....................              if(FaultNow[i]==1)
0317A:  MOVFF  E45,E49
0317E:  MOVLW  0D
03180:  MOVLB  E
03182:  MOVWF  x4B
03184:  MOVLW  DC
03186:  MOVWF  x4A
03188:  MOVLB  0
0318A:  CALL   25BA
0318E:  MOVF   01,W
03190:  ANDLW  01
03192:  SUBLW  01
03194:  BTFSS  FD8.2
03196:  BRA    331C
....................              {
....................                if(FaultAgo[i]==1)
03198:  MOVFF  E45,E49
0319C:  MOVLW  0D
0319E:  MOVLB  E
031A0:  MOVWF  x4B
031A2:  MOVLW  D9
031A4:  MOVWF  x4A
031A6:  MOVLB  0
031A8:  CALL   25BA
031AC:  MOVF   01,W
031AE:  ANDLW  01
031B0:  SUBLW  01
031B2:  BTFSS  FD8.2
031B4:  BRA    3300
....................                {
....................                    ReleaseTime[i]++;
031B6:  BCF    FD8.0
031B8:  MOVLB  E
031BA:  RLCF   x45,W
031BC:  CLRF   03
031BE:  ADDLW  DF
031C0:  MOVWF  FE9
031C2:  MOVLW  0D
031C4:  ADDWFC 03,W
031C6:  MOVWF  FEA
031C8:  MOVLW  01
031CA:  ADDWF  FEE,F
031CC:  BNC   31D0
031CE:  INCF   FEF,F
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
031D0:  BCF    FD8.0
031D2:  RLCF   x45,W
031D4:  CLRF   03
031D6:  ADDLW  DF
031D8:  MOVWF  FE9
031DA:  MOVLW  0D
031DC:  ADDWFC 03,W
031DE:  MOVWF  FEA
031E0:  MOVFF  FEC,E47
031E4:  MOVF   FED,F
031E6:  MOVFF  FEF,E46
031EA:  BCF    FD8.0
031EC:  RLCF   x45,W
031EE:  CLRF   03
031F0:  ADDLW  09
031F2:  MOVWF  FE9
031F4:  MOVLW  0E
031F6:  ADDWFC 03,W
031F8:  MOVWF  FEA
031FA:  MOVFF  FEC,E4B
031FE:  MOVF   FED,F
03200:  MOVFF  FEF,E4A
03204:  CLRF   x4D
03206:  MOVLW  4B
03208:  MOVWF  x4C
0320A:  MOVLB  0
0320C:  RCALL  2BDE
0320E:  MOVFF  02,E49
03212:  MOVFF  01,E48
03216:  MOVLW  0F
03218:  MOVLB  E
0321A:  ADDWF  01,W
0321C:  MOVWF  01
0321E:  MOVLW  00
03220:  ADDWFC 02,W
03222:  MOVWF  03
03224:  MOVF   03,W
03226:  SUBWF  x47,W
03228:  BTFSS  FD8.0
0322A:  BRA    32FC
0322C:  BNZ   3234
0322E:  MOVF   01,W
03230:  SUBWF  x46,W
03232:  BNC   32FC
....................                    {   
....................                      ReleaseTime[i] = 0;
03234:  BCF    FD8.0
03236:  RLCF   x45,W
03238:  CLRF   03
0323A:  ADDLW  DF
0323C:  MOVWF  FE9
0323E:  MOVLW  0D
03240:  ADDWFC 03,W
03242:  MOVWF  FEA
03244:  CLRF   FEC
03246:  MOVF   FED,F
03248:  CLRF   FEF
....................                      switch(i)
0324A:  MOVLW  01
0324C:  SUBWF  x45,W
0324E:  ADDLW  EC
03250:  BC    32FC
03252:  ADDLW  14
03254:  MOVLB  0
03256:  GOTO   37E2
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 1; 
0325A:  MOVLB  D
0325C:  BSF    xA1.0
....................                         break;
0325E:  MOVLB  E
03260:  BRA    32FC
....................                         case 2:
....................                            Inputt.B2 = 1; 
03262:  MOVLB  D
03264:  BSF    xA1.1
....................                         break;
03266:  MOVLB  E
03268:  BRA    32FC
....................                         case 3:
....................                            Inputt.B3 = 1; 
0326A:  MOVLB  D
0326C:  BSF    xA1.2
....................                         break;
0326E:  MOVLB  E
03270:  BRA    32FC
....................                         case 4:
....................                            Inputt.B4 = 1; 
03272:  MOVLB  D
03274:  BSF    xA1.3
....................                         break;
03276:  MOVLB  E
03278:  BRA    32FC
....................                         case 5:
....................                            Inputt.B5 = 1; 
0327A:  MOVLB  D
0327C:  BSF    xA1.4
....................                         break;
0327E:  MOVLB  E
03280:  BRA    32FC
....................                         case 6:
....................                            Inputt.B6 = 1; 
03282:  MOVLB  D
03284:  BSF    xA1.5
....................                         break;
03286:  MOVLB  E
03288:  BRA    32FC
....................                         case 7:
....................                            Inputt.B7 = 1; 
0328A:  MOVLB  D
0328C:  BSF    xA1.6
....................                          break;
0328E:  MOVLB  E
03290:  BRA    32FC
....................                          case 8:
....................                            Inputt.B8 = 1; 
03292:  MOVLB  D
03294:  BSF    xA1.7
....................                         break;
03296:  MOVLB  E
03298:  BRA    32FC
....................                         case 9:
....................                            Inputt.B9 = 1; 
0329A:  MOVLB  D
0329C:  BSF    xA2.0
....................                         break;
0329E:  MOVLB  E
032A0:  BRA    32FC
....................                         case 10:
....................                            Inputt.B10 = 1; 
032A2:  MOVLB  D
032A4:  BSF    xA2.1
....................                         break;
032A6:  MOVLB  E
032A8:  BRA    32FC
....................                         case 11:
....................                            Inputt.B11 = 1; 
032AA:  MOVLB  D
032AC:  BSF    xA2.2
....................                         break;
032AE:  MOVLB  E
032B0:  BRA    32FC
....................                         case 12:
....................                            Inputt.B12 = 1; 
032B2:  MOVLB  D
032B4:  BSF    xA2.3
....................                         break;
032B6:  MOVLB  E
032B8:  BRA    32FC
....................                         case 13:
....................                            Inputt.B13 = 1; 
032BA:  MOVLB  D
032BC:  BSF    xA2.4
....................                         break;
032BE:  MOVLB  E
032C0:  BRA    32FC
....................                         case 14:
....................                            Inputt.B14 = 1; 
032C2:  MOVLB  D
032C4:  BSF    xA2.5
....................                         break;
032C6:  MOVLB  E
032C8:  BRA    32FC
....................                         case 15:
....................                            Inputt.B15 = 1; 
032CA:  MOVLB  D
032CC:  BSF    xA2.6
....................                         break;
032CE:  MOVLB  E
032D0:  BRA    32FC
....................                         case 16:
....................                             Inputt.B16 = 1; 
032D2:  MOVLB  D
032D4:  BSF    xA2.7
....................                          break;
032D6:  MOVLB  E
032D8:  BRA    32FC
....................                          
....................                          case 17:
....................                            Inputt.B17 = 1; 
032DA:  MOVLB  D
032DC:  BSF    xA3.0
....................                          break;
032DE:  MOVLB  E
032E0:  BRA    32FC
....................                          case 18:
....................                            Inputt.B18 = 1; 
032E2:  MOVLB  D
032E4:  BSF    xA3.1
....................                         break;
032E6:  MOVLB  E
032E8:  BRA    32FC
....................                         case 19:
....................                            Inputt.B19 = 1; 
032EA:  MOVLB  D
032EC:  BSF    xA3.2
....................                         break;
032EE:  MOVLB  E
032F0:  BRA    32FC
....................                         case 20:
....................                            Inputt.B20 = 1; 
032F2:  MOVLB  D
032F4:  BSF    xA3.3
....................                         break;
032F6:  MOVLB  E
032F8:  BRA    32FC
032FA:  MOVLB  E
....................                                                                    
....................                      }                 
....................                   }
....................                }
032FC:  BRA    3318
032FE:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
03300:  BCF    FD8.0
03302:  MOVLB  E
03304:  RLCF   x45,W
03306:  CLRF   03
03308:  ADDLW  DF
0330A:  MOVWF  FE9
0330C:  MOVLW  0D
0330E:  ADDWFC 03,W
03310:  MOVWF  FEA
03312:  CLRF   FEC
03314:  MOVF   FED,F
03316:  CLRF   FEF
....................                }
....................              }
03318:  BRA    349A
0331A:  MOVLB  0
....................              else //if(FaultNow[i]==0
....................              {
....................                if(FaultAgo[i]==0)
0331C:  MOVFF  E45,E49
03320:  MOVLW  0D
03322:  MOVLB  E
03324:  MOVWF  x4B
03326:  MOVLW  D9
03328:  MOVWF  x4A
0332A:  MOVLB  0
0332C:  CALL   25BA
03330:  MOVF   01,W
03332:  ANDLW  01
03334:  BTFSS  FD8.2
03336:  BRA    3482
....................                {
....................                    ReleaseTime[i]++;
03338:  BCF    FD8.0
0333A:  MOVLB  E
0333C:  RLCF   x45,W
0333E:  CLRF   03
03340:  ADDLW  DF
03342:  MOVWF  FE9
03344:  MOVLW  0D
03346:  ADDWFC 03,W
03348:  MOVWF  FEA
0334A:  MOVLW  01
0334C:  ADDWF  FEE,F
0334E:  BNC   3352
03350:  INCF   FEF,F
....................                   
....................                    if(ReleaseTime[i]>=((FaultDelayTime[i]*75)+15)) //time per loop are 368 microSec. (1.89*10=200ms)
03352:  BCF    FD8.0
03354:  RLCF   x45,W
03356:  CLRF   03
03358:  ADDLW  DF
0335A:  MOVWF  FE9
0335C:  MOVLW  0D
0335E:  ADDWFC 03,W
03360:  MOVWF  FEA
03362:  MOVFF  FEC,E47
03366:  MOVF   FED,F
03368:  MOVFF  FEF,E46
0336C:  BCF    FD8.0
0336E:  RLCF   x45,W
03370:  CLRF   03
03372:  ADDLW  09
03374:  MOVWF  FE9
03376:  MOVLW  0E
03378:  ADDWFC 03,W
0337A:  MOVWF  FEA
0337C:  MOVFF  FEC,E4B
03380:  MOVF   FED,F
03382:  MOVFF  FEF,E4A
03386:  CLRF   x4D
03388:  MOVLW  4B
0338A:  MOVWF  x4C
0338C:  MOVLB  0
0338E:  RCALL  2BDE
03390:  MOVFF  02,E49
03394:  MOVFF  01,E48
03398:  MOVLW  0F
0339A:  MOVLB  E
0339C:  ADDWF  01,W
0339E:  MOVWF  01
033A0:  MOVLW  00
033A2:  ADDWFC 02,W
033A4:  MOVWF  03
033A6:  MOVF   03,W
033A8:  SUBWF  x47,W
033AA:  BTFSS  FD8.0
033AC:  BRA    347E
033AE:  BNZ   33B6
033B0:  MOVF   01,W
033B2:  SUBWF  x46,W
033B4:  BNC   347E
....................                    {   
....................                      ReleaseTime[i] = 0;
033B6:  BCF    FD8.0
033B8:  RLCF   x45,W
033BA:  CLRF   03
033BC:  ADDLW  DF
033BE:  MOVWF  FE9
033C0:  MOVLW  0D
033C2:  ADDWFC 03,W
033C4:  MOVWF  FEA
033C6:  CLRF   FEC
033C8:  MOVF   FED,F
033CA:  CLRF   FEF
....................                      switch(i)
033CC:  MOVLW  01
033CE:  SUBWF  x45,W
033D0:  ADDLW  EC
033D2:  BC    347E
033D4:  ADDLW  14
033D6:  MOVLB  0
033D8:  GOTO   3824
....................                      {
....................                         case 1:
....................                            Inputt.B1 = 0; 
033DC:  MOVLB  D
033DE:  BCF    xA1.0
....................                         break;
033E0:  MOVLB  E
033E2:  BRA    347E
....................                         case 2:
....................                            Inputt.B2 = 0; 
033E4:  MOVLB  D
033E6:  BCF    xA1.1
....................                         break;
033E8:  MOVLB  E
033EA:  BRA    347E
....................                         case 3:
....................                            Inputt.B3 = 0; 
033EC:  MOVLB  D
033EE:  BCF    xA1.2
....................                         break;
033F0:  MOVLB  E
033F2:  BRA    347E
....................                         case 4:
....................                            Inputt.B4 = 0; 
033F4:  MOVLB  D
033F6:  BCF    xA1.3
....................                         break;
033F8:  MOVLB  E
033FA:  BRA    347E
....................                         case 5:
....................                            Inputt.B5 = 0; 
033FC:  MOVLB  D
033FE:  BCF    xA1.4
....................                         break;
03400:  MOVLB  E
03402:  BRA    347E
....................                         case 6:
....................                            Inputt.B6 = 0; 
03404:  MOVLB  D
03406:  BCF    xA1.5
....................                         break;
03408:  MOVLB  E
0340A:  BRA    347E
....................                         case 7:
....................                            Inputt.B7 = 0; 
0340C:  MOVLB  D
0340E:  BCF    xA1.6
....................                          break;
03410:  MOVLB  E
03412:  BRA    347E
....................                          case 8:
....................                            Inputt.B8 = 0; 
03414:  MOVLB  D
03416:  BCF    xA1.7
....................                         break;
03418:  MOVLB  E
0341A:  BRA    347E
....................                         case 9:
....................                            Inputt.B9 = 0; 
0341C:  MOVLB  D
0341E:  BCF    xA2.0
....................                         break;
03420:  MOVLB  E
03422:  BRA    347E
....................                         case 10:
....................                            Inputt.B10 = 0; 
03424:  MOVLB  D
03426:  BCF    xA2.1
....................                         break;
03428:  MOVLB  E
0342A:  BRA    347E
....................                         case 11:
....................                            Inputt.B11 = 0; 
0342C:  MOVLB  D
0342E:  BCF    xA2.2
....................                         break;
03430:  MOVLB  E
03432:  BRA    347E
....................                         case 12:
....................                            Inputt.B12 = 0; 
03434:  MOVLB  D
03436:  BCF    xA2.3
....................                         break;
03438:  MOVLB  E
0343A:  BRA    347E
....................                         case 13:
....................                            Inputt.B13 = 0; 
0343C:  MOVLB  D
0343E:  BCF    xA2.4
....................                         break;
03440:  MOVLB  E
03442:  BRA    347E
....................                         case 14:
....................                            Inputt.B14 = 0; 
03444:  MOVLB  D
03446:  BCF    xA2.5
....................                         break;
03448:  MOVLB  E
0344A:  BRA    347E
....................                         case 15:
....................                            Inputt.B15 = 0; 
0344C:  MOVLB  D
0344E:  BCF    xA2.6
....................                         break;
03450:  MOVLB  E
03452:  BRA    347E
....................                         case 16:
....................                             Inputt.B16 = 0;
03454:  MOVLB  D
03456:  BCF    xA2.7
....................                          break;
03458:  MOVLB  E
0345A:  BRA    347E
....................                          
....................                          case 17:
....................                            Inputt.B17 = 0; 
0345C:  MOVLB  D
0345E:  BCF    xA3.0
....................                          break;
03460:  MOVLB  E
03462:  BRA    347E
....................                          case 18:
....................                            Inputt.B18 = 0; 
03464:  MOVLB  D
03466:  BCF    xA3.1
....................                         break;
03468:  MOVLB  E
0346A:  BRA    347E
....................                         case 19:
....................                            Inputt.B19 = 0; 
0346C:  MOVLB  D
0346E:  BCF    xA3.2
....................                         break;
03470:  MOVLB  E
03472:  BRA    347E
....................                         case 20:
....................                            Inputt.B20 = 0; 
03474:  MOVLB  D
03476:  BCF    xA3.3
....................                         break;
03478:  MOVLB  E
0347A:  BRA    347E
0347C:  MOVLB  E
....................                                    
....................                      }                 
....................                    }
....................                }
0347E:  BRA    349A
03480:  MOVLB  0
....................                else
....................                {
....................                   ReleaseTime[i] = 0;
03482:  BCF    FD8.0
03484:  MOVLB  E
03486:  RLCF   x45,W
03488:  CLRF   03
0348A:  ADDLW  DF
0348C:  MOVWF  FE9
0348E:  MOVLW  0D
03490:  ADDWFC 03,W
03492:  MOVWF  FEA
03494:  CLRF   FEC
03496:  MOVF   FED,F
03498:  CLRF   FEF
0349A:  MOVLB  0
....................                }
.................... 
....................              }
....................           }
0349C:  MOVLB  E
0349E:  INCF   x45,F
034A0:  BRA    2E1A
....................       }
....................       
....................       
....................       StoreReleaseFault();
034A2:  MOVLB  0
034A4:  GOTO   2C00
....................       
....................       ///////////////---Anal Fault---//////////////////
....................       
....................       ///////////////////////--Edit--///////////////////
....................            
....................       Input11_18 = 0x00;
034A8:  CLRF   46
....................       Input11_18 = Input11_18 | ~Inputt.B18;
034AA:  MOVLW  00
034AC:  MOVLB  D
034AE:  BTFSS  xA3.1
034B0:  MOVLW  01
034B2:  IORWF  46,F
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B17;
034B4:  BCF    FD8.0
034B6:  RLCF   46,W
034B8:  MOVLB  E
034BA:  MOVWF  x46
034BC:  MOVLW  00
034BE:  MOVLB  D
034C0:  BTFSS  xA3.0
034C2:  MOVLW  01
034C4:  MOVLB  E
034C6:  IORWF  x46,W
034C8:  MOVWF  46
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B16;
034CA:  BCF    FD8.0
034CC:  RLCF   46,W
034CE:  MOVWF  x46
034D0:  MOVLW  00
034D2:  MOVLB  D
034D4:  BTFSS  xA2.7
034D6:  MOVLW  01
034D8:  MOVLB  E
034DA:  IORWF  x46,W
034DC:  MOVWF  46
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B15;
034DE:  BCF    FD8.0
034E0:  RLCF   46,W
034E2:  MOVWF  x46
034E4:  MOVLW  00
034E6:  MOVLB  D
034E8:  BTFSS  xA2.6
034EA:  MOVLW  01
034EC:  MOVLB  E
034EE:  IORWF  x46,W
034F0:  MOVWF  46
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B14;
034F2:  BCF    FD8.0
034F4:  RLCF   46,W
034F6:  MOVWF  x46
034F8:  MOVLW  00
034FA:  MOVLB  D
034FC:  BTFSS  xA2.5
034FE:  MOVLW  01
03500:  MOVLB  E
03502:  IORWF  x46,W
03504:  MOVWF  46
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B13;
03506:  BCF    FD8.0
03508:  RLCF   46,W
0350A:  MOVWF  x46
0350C:  MOVLW  00
0350E:  MOVLB  D
03510:  BTFSS  xA2.4
03512:  MOVLW  01
03514:  MOVLB  E
03516:  IORWF  x46,W
03518:  MOVWF  46
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B12;
0351A:  BCF    FD8.0
0351C:  RLCF   46,W
0351E:  MOVWF  x46
03520:  MOVLW  00
03522:  MOVLB  D
03524:  BTFSS  xA2.3
03526:  MOVLW  01
03528:  MOVLB  E
0352A:  IORWF  x46,W
0352C:  MOVWF  46
....................       Input11_18 = (Input11_18 << 1) | ~Inputt.B11;
0352E:  BCF    FD8.0
03530:  RLCF   46,W
03532:  MOVWF  x46
03534:  MOVLW  00
03536:  MOVLB  D
03538:  BTFSS  xA2.2
0353A:  MOVLW  01
0353C:  MOVLB  E
0353E:  IORWF  x46,W
03540:  MOVWF  46
....................       
....................      
....................    
....................       Input19_20 = 0x00;
03542:  CLRF   47
....................       Input19_20 = Input19_20 | ~Inputt.B20;
03544:  MOVLW  00
03546:  MOVLB  D
03548:  BTFSS  xA3.3
0354A:  MOVLW  01
0354C:  IORWF  47,F
....................       Input19_20 = (Input19_20 << 1) | ~Inputt.B19;
0354E:  BCF    FD8.0
03550:  RLCF   47,W
03552:  MOVLB  E
03554:  MOVWF  x46
03556:  MOVLW  00
03558:  MOVLB  D
0355A:  BTFSS  xA3.2
0355C:  MOVLW  01
0355E:  MOVLB  E
03560:  IORWF  x46,W
03562:  MOVWF  47
....................       //}
....................    
....................       Input1_8 = 0x00;
03564:  CLRF   44
....................       Input1_8 = Input1_8 | ~Inputt.B8;
03566:  MOVLW  00
03568:  MOVLB  D
0356A:  BTFSS  xA1.7
0356C:  MOVLW  01
0356E:  IORWF  44,F
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B7;
03570:  BCF    FD8.0
03572:  RLCF   44,W
03574:  MOVLB  E
03576:  MOVWF  x46
03578:  MOVLW  00
0357A:  MOVLB  D
0357C:  BTFSS  xA1.6
0357E:  MOVLW  01
03580:  MOVLB  E
03582:  IORWF  x46,W
03584:  MOVWF  44
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B6;
03586:  BCF    FD8.0
03588:  RLCF   44,W
0358A:  MOVWF  x46
0358C:  MOVLW  00
0358E:  MOVLB  D
03590:  BTFSS  xA1.5
03592:  MOVLW  01
03594:  MOVLB  E
03596:  IORWF  x46,W
03598:  MOVWF  44
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B5;
0359A:  BCF    FD8.0
0359C:  RLCF   44,W
0359E:  MOVWF  x46
035A0:  MOVLW  00
035A2:  MOVLB  D
035A4:  BTFSS  xA1.4
035A6:  MOVLW  01
035A8:  MOVLB  E
035AA:  IORWF  x46,W
035AC:  MOVWF  44
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B4;
035AE:  BCF    FD8.0
035B0:  RLCF   44,W
035B2:  MOVWF  x46
035B4:  MOVLW  00
035B6:  MOVLB  D
035B8:  BTFSS  xA1.3
035BA:  MOVLW  01
035BC:  MOVLB  E
035BE:  IORWF  x46,W
035C0:  MOVWF  44
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B3;
035C2:  BCF    FD8.0
035C4:  RLCF   44,W
035C6:  MOVWF  x46
035C8:  MOVLW  00
035CA:  MOVLB  D
035CC:  BTFSS  xA1.2
035CE:  MOVLW  01
035D0:  MOVLB  E
035D2:  IORWF  x46,W
035D4:  MOVWF  44
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B2;
035D6:  BCF    FD8.0
035D8:  RLCF   44,W
035DA:  MOVWF  x46
035DC:  MOVLW  00
035DE:  MOVLB  D
035E0:  BTFSS  xA1.1
035E2:  MOVLW  01
035E4:  MOVLB  E
035E6:  IORWF  x46,W
035E8:  MOVWF  44
....................       Input1_8 = (Input1_8 << 1) | ~Inputt.B1;
035EA:  BCF    FD8.0
035EC:  RLCF   44,W
035EE:  MOVWF  x46
035F0:  MOVLW  00
035F2:  MOVLB  D
035F4:  BTFSS  xA1.0
035F6:  MOVLW  01
035F8:  MOVLB  E
035FA:  IORWF  x46,W
035FC:  MOVWF  44
....................       
....................       Input9_16 = 0x00;
035FE:  CLRF   48
....................       Input9_16 = Input9_16 | ~Inputt.B16;
03600:  MOVLW  00
03602:  MOVLB  D
03604:  BTFSS  xA2.7
03606:  MOVLW  01
03608:  IORWF  48,F
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B15;
0360A:  BCF    FD8.0
0360C:  RLCF   48,W
0360E:  MOVLB  E
03610:  MOVWF  x46
03612:  MOVLW  00
03614:  MOVLB  D
03616:  BTFSS  xA2.6
03618:  MOVLW  01
0361A:  MOVLB  E
0361C:  IORWF  x46,W
0361E:  MOVWF  48
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B14;
03620:  BCF    FD8.0
03622:  RLCF   48,W
03624:  MOVWF  x46
03626:  MOVLW  00
03628:  MOVLB  D
0362A:  BTFSS  xA2.5
0362C:  MOVLW  01
0362E:  MOVLB  E
03630:  IORWF  x46,W
03632:  MOVWF  48
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B13;
03634:  BCF    FD8.0
03636:  RLCF   48,W
03638:  MOVWF  x46
0363A:  MOVLW  00
0363C:  MOVLB  D
0363E:  BTFSS  xA2.4
03640:  MOVLW  01
03642:  MOVLB  E
03644:  IORWF  x46,W
03646:  MOVWF  48
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B12;
03648:  BCF    FD8.0
0364A:  RLCF   48,W
0364C:  MOVWF  x46
0364E:  MOVLW  00
03650:  MOVLB  D
03652:  BTFSS  xA2.3
03654:  MOVLW  01
03656:  MOVLB  E
03658:  IORWF  x46,W
0365A:  MOVWF  48
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B11;
0365C:  BCF    FD8.0
0365E:  RLCF   48,W
03660:  MOVWF  x46
03662:  MOVLW  00
03664:  MOVLB  D
03666:  BTFSS  xA2.2
03668:  MOVLW  01
0366A:  MOVLB  E
0366C:  IORWF  x46,W
0366E:  MOVWF  48
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B10;
03670:  BCF    FD8.0
03672:  RLCF   48,W
03674:  MOVWF  x46
03676:  MOVLW  00
03678:  MOVLB  D
0367A:  BTFSS  xA2.1
0367C:  MOVLW  01
0367E:  MOVLB  E
03680:  IORWF  x46,W
03682:  MOVWF  48
....................       Input9_16 = (Input9_16 << 1) | ~Inputt.B9;
03684:  BCF    FD8.0
03686:  RLCF   48,W
03688:  MOVWF  x46
0368A:  MOVLW  00
0368C:  MOVLB  D
0368E:  BTFSS  xA2.0
03690:  MOVLW  01
03692:  MOVLB  E
03694:  IORWF  x46,W
03696:  MOVWF  48
....................       
....................       Input17_24 = 0x00;
03698:  CLRF   49
....................       Input17_24 = Input17_24 | ~Inputt.B24;
0369A:  MOVLW  00
0369C:  MOVLB  D
0369E:  BTFSS  xA3.7
036A0:  MOVLW  01
036A2:  IORWF  49,F
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B23;
036A4:  BCF    FD8.0
036A6:  RLCF   49,W
036A8:  MOVLB  E
036AA:  MOVWF  x46
036AC:  MOVLW  00
036AE:  MOVLB  D
036B0:  BTFSS  xA3.6
036B2:  MOVLW  01
036B4:  MOVLB  E
036B6:  IORWF  x46,W
036B8:  MOVWF  49
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B22;
036BA:  BCF    FD8.0
036BC:  RLCF   49,W
036BE:  MOVWF  x46
036C0:  MOVLW  00
036C2:  MOVLB  D
036C4:  BTFSS  xA3.5
036C6:  MOVLW  01
036C8:  MOVLB  E
036CA:  IORWF  x46,W
036CC:  MOVWF  49
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B21;
036CE:  BCF    FD8.0
036D0:  RLCF   49,W
036D2:  MOVWF  x46
036D4:  MOVLW  00
036D6:  MOVLB  D
036D8:  BTFSS  xA3.4
036DA:  MOVLW  01
036DC:  MOVLB  E
036DE:  IORWF  x46,W
036E0:  MOVWF  49
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B20;
036E2:  BCF    FD8.0
036E4:  RLCF   49,W
036E6:  MOVWF  x46
036E8:  MOVLW  00
036EA:  MOVLB  D
036EC:  BTFSS  xA3.3
036EE:  MOVLW  01
036F0:  MOVLB  E
036F2:  IORWF  x46,W
036F4:  MOVWF  49
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B19;
036F6:  BCF    FD8.0
036F8:  RLCF   49,W
036FA:  MOVWF  x46
036FC:  MOVLW  00
036FE:  MOVLB  D
03700:  BTFSS  xA3.2
03702:  MOVLW  01
03704:  MOVLB  E
03706:  IORWF  x46,W
03708:  MOVWF  49
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B18;
0370A:  BCF    FD8.0
0370C:  RLCF   49,W
0370E:  MOVWF  x46
03710:  MOVLW  00
03712:  MOVLB  D
03714:  BTFSS  xA3.1
03716:  MOVLW  01
03718:  MOVLB  E
0371A:  IORWF  x46,W
0371C:  MOVWF  49
....................       Input17_24 = (Input17_24 << 1) | ~Inputt.B17;
0371E:  BCF    FD8.0
03720:  RLCF   49,W
03722:  MOVWF  x46
03724:  MOVLW  00
03726:  MOVLB  D
03728:  BTFSS  xA3.0
0372A:  MOVLW  01
0372C:  MOVLB  E
0372E:  IORWF  x46,W
03730:  MOVWF  49
....................     
....................    
.................... 
....................       Input9_10 = 0x00;
03732:  CLRF   45
....................       Input9_10 = Input9_10 | ~Inputt.B10;
03734:  MOVLW  00
03736:  MOVLB  D
03738:  BTFSS  xA2.1
0373A:  MOVLW  01
0373C:  IORWF  45,F
....................       Input9_10 = (Input9_10 << 1) | ~Inputt.B9;
0373E:  BCF    FD8.0
03740:  RLCF   45,W
03742:  MOVLB  E
03744:  MOVWF  x46
03746:  MOVLW  00
03748:  MOVLB  D
0374A:  BTFSS  xA2.0
0374C:  MOVLW  01
0374E:  MOVLB  E
03750:  IORWF  x46,W
03752:  MOVWF  45
....................       
....................       Input17_24 &= 0x0F;
03754:  MOVLW  0F
03756:  ANDWF  49,F
....................       Input25_32 = 0x00;
03758:  CLRF   4A
0375A:  MOVLB  0
0375C:  RETURN 0
....................       //+++++++++++++++++++++++++++++++++++++++++++
.................... 
.................... }
.................... /*----------------------------------------------------------------------------*/
.................... 
.................... 
.................... void Read_Config(void)
.................... {
....................    
.................... 
....................    EEpDat = read_eeprom(0x01);   // Inputt type 1-8
*
00B42:  MOVFF  FF2,E46
00B46:  BCF    FF2.7
00B48:  CLRF   FAA
00B4A:  MOVLW  01
00B4C:  MOVWF  FA9
00B4E:  BCF    FA6.6
00B50:  BCF    FA6.7
00B52:  BSF    FA6.0
00B54:  MOVF   FA8,W
00B56:  MOVLB  E
00B58:  BTFSC  x46.7
00B5A:  BSF    FF2.7
00B5C:  MOVWF  34
....................    InputType1_8 = EEpDat;
00B5E:  MOVFF  34,35
.................... 
....................    InputType.B1 = EEpDat;
00B62:  MOVLB  D
00B64:  BCF    xA9.0
00B66:  BTFSC  34.0
00B68:  BSF    xA9.0
....................    InputType.B2 = EEpDat >> 1;
00B6A:  BCF    FD8.0
00B6C:  RRCF   34,W
00B6E:  BCF    xA9.1
00B70:  BTFSC  FE8.0
00B72:  BSF    xA9.1
....................    InputType.B3 = EEpDat >> 2;
00B74:  RRCF   34,W
00B76:  MOVWF  00
00B78:  RRCF   00,F
00B7A:  MOVLW  3F
00B7C:  ANDWF  00,F
00B7E:  BCF    xA9.2
00B80:  BTFSC  00.0
00B82:  BSF    xA9.2
....................    InputType.B4 = EEpDat >> 3;
00B84:  RRCF   34,W
00B86:  MOVWF  00
00B88:  RRCF   00,F
00B8A:  RRCF   00,F
00B8C:  MOVLW  1F
00B8E:  ANDWF  00,F
00B90:  BCF    xA9.3
00B92:  BTFSC  00.0
00B94:  BSF    xA9.3
....................    InputType.B5 = EEpDat >> 4;
00B96:  SWAPF  34,W
00B98:  MOVWF  00
00B9A:  MOVLW  0F
00B9C:  ANDWF  00,F
00B9E:  BCF    xA9.4
00BA0:  BTFSC  00.0
00BA2:  BSF    xA9.4
....................    InputType.B6 = EEpDat >> 5;
00BA4:  SWAPF  34,W
00BA6:  MOVWF  00
00BA8:  RRCF   00,F
00BAA:  MOVLW  07
00BAC:  ANDWF  00,F
00BAE:  BCF    xA9.5
00BB0:  BTFSC  00.0
00BB2:  BSF    xA9.5
....................    InputType.B7 = EEpDat >> 6;
00BB4:  SWAPF  34,W
00BB6:  MOVWF  00
00BB8:  RRCF   00,F
00BBA:  RRCF   00,F
00BBC:  MOVLW  03
00BBE:  ANDWF  00,F
00BC0:  BCF    xA9.6
00BC2:  BTFSC  00.0
00BC4:  BSF    xA9.6
....................    InputType.B8 = EEpDat >> 7;
00BC6:  CLRF   00
00BC8:  BTFSC  34.7
00BCA:  BSF    00.0
00BCC:  BCF    xA9.7
00BCE:  BTFSC  00.0
00BD0:  BSF    xA9.7
.................... 
....................    EEpDat = read_eeprom(0x02);   // Inputt type 9-16
00BD2:  MOVFF  FF2,E46
00BD6:  BCF    FF2.7
00BD8:  CLRF   FAA
00BDA:  MOVLW  02
00BDC:  MOVWF  FA9
00BDE:  BCF    FA6.6
00BE0:  BCF    FA6.7
00BE2:  BSF    FA6.0
00BE4:  MOVF   FA8,W
00BE6:  MOVLB  E
00BE8:  BTFSC  x46.7
00BEA:  BSF    FF2.7
00BEC:  MOVWF  34
....................    InputType9_16 = EEpDat;
00BEE:  MOVFF  34,36
.................... 
....................    InputType.B9 = EEpDat;
00BF2:  MOVLB  D
00BF4:  BCF    xAA.0
00BF6:  BTFSC  34.0
00BF8:  BSF    xAA.0
....................    InputType.B10 = EEpDat >> 1;
00BFA:  BCF    FD8.0
00BFC:  RRCF   34,W
00BFE:  BCF    xAA.1
00C00:  BTFSC  FE8.0
00C02:  BSF    xAA.1
....................    InputType.B11 = EEpDat >> 2;
00C04:  RRCF   34,W
00C06:  MOVWF  00
00C08:  RRCF   00,F
00C0A:  MOVLW  3F
00C0C:  ANDWF  00,F
00C0E:  BCF    xAA.2
00C10:  BTFSC  00.0
00C12:  BSF    xAA.2
....................    InputType.B12 = EEpDat >> 3;
00C14:  RRCF   34,W
00C16:  MOVWF  00
00C18:  RRCF   00,F
00C1A:  RRCF   00,F
00C1C:  MOVLW  1F
00C1E:  ANDWF  00,F
00C20:  BCF    xAA.3
00C22:  BTFSC  00.0
00C24:  BSF    xAA.3
....................    InputType.B13 = EEpDat >> 4;
00C26:  SWAPF  34,W
00C28:  MOVWF  00
00C2A:  MOVLW  0F
00C2C:  ANDWF  00,F
00C2E:  BCF    xAA.4
00C30:  BTFSC  00.0
00C32:  BSF    xAA.4
....................    InputType.B14 = EEpDat >> 5;
00C34:  SWAPF  34,W
00C36:  MOVWF  00
00C38:  RRCF   00,F
00C3A:  MOVLW  07
00C3C:  ANDWF  00,F
00C3E:  BCF    xAA.5
00C40:  BTFSC  00.0
00C42:  BSF    xAA.5
....................    InputType.B15 = EEpDat >> 6;
00C44:  SWAPF  34,W
00C46:  MOVWF  00
00C48:  RRCF   00,F
00C4A:  RRCF   00,F
00C4C:  MOVLW  03
00C4E:  ANDWF  00,F
00C50:  BCF    xAA.6
00C52:  BTFSC  00.0
00C54:  BSF    xAA.6
....................    InputType.B16 = EEpDat >> 7;
00C56:  CLRF   00
00C58:  BTFSC  34.7
00C5A:  BSF    00.0
00C5C:  BCF    xAA.7
00C5E:  BTFSC  00.0
00C60:  BSF    xAA.7
....................    
....................    EEpDat = read_eeprom(0x03);   // Inputt type 9-16
00C62:  MOVFF  FF2,E46
00C66:  BCF    FF2.7
00C68:  CLRF   FAA
00C6A:  MOVLW  03
00C6C:  MOVWF  FA9
00C6E:  BCF    FA6.6
00C70:  BCF    FA6.7
00C72:  BSF    FA6.0
00C74:  MOVF   FA8,W
00C76:  MOVLB  E
00C78:  BTFSC  x46.7
00C7A:  BSF    FF2.7
00C7C:  MOVWF  34
....................    InputType17_24 = EEpDat;
00C7E:  MOVFF  34,37
.................... 
....................    InputType.B17 = EEpDat;
00C82:  MOVLB  D
00C84:  BCF    xAB.0
00C86:  BTFSC  34.0
00C88:  BSF    xAB.0
....................    InputType.B18 = EEpDat >> 1;
00C8A:  BCF    FD8.0
00C8C:  RRCF   34,W
00C8E:  BCF    xAB.1
00C90:  BTFSC  FE8.0
00C92:  BSF    xAB.1
....................    InputType.B19 = EEpDat >> 2;
00C94:  RRCF   34,W
00C96:  MOVWF  00
00C98:  RRCF   00,F
00C9A:  MOVLW  3F
00C9C:  ANDWF  00,F
00C9E:  BCF    xAB.2
00CA0:  BTFSC  00.0
00CA2:  BSF    xAB.2
....................    InputType.B20 = EEpDat >> 3;
00CA4:  RRCF   34,W
00CA6:  MOVWF  00
00CA8:  RRCF   00,F
00CAA:  RRCF   00,F
00CAC:  MOVLW  1F
00CAE:  ANDWF  00,F
00CB0:  BCF    xAB.3
00CB2:  BTFSC  00.0
00CB4:  BSF    xAB.3
....................    InputType.B21 = EEpDat >> 4;
00CB6:  SWAPF  34,W
00CB8:  MOVWF  00
00CBA:  MOVLW  0F
00CBC:  ANDWF  00,F
00CBE:  BCF    xAB.4
00CC0:  BTFSC  00.0
00CC2:  BSF    xAB.4
....................    InputType.B22 = EEpDat >> 5;
00CC4:  SWAPF  34,W
00CC6:  MOVWF  00
00CC8:  RRCF   00,F
00CCA:  MOVLW  07
00CCC:  ANDWF  00,F
00CCE:  BCF    xAB.5
00CD0:  BTFSC  00.0
00CD2:  BSF    xAB.5
....................    InputType.B23 = EEpDat >> 6;
00CD4:  SWAPF  34,W
00CD6:  MOVWF  00
00CD8:  RRCF   00,F
00CDA:  RRCF   00,F
00CDC:  MOVLW  03
00CDE:  ANDWF  00,F
00CE0:  BCF    xAB.6
00CE2:  BTFSC  00.0
00CE4:  BSF    xAB.6
....................    InputType.B24 = EEpDat >> 7;
00CE6:  CLRF   00
00CE8:  BTFSC  34.7
00CEA:  BSF    00.0
00CEC:  BCF    xAB.7
00CEE:  BTFSC  00.0
00CF0:  BSF    xAB.7
....................    
....................    FaultNCNO[1] = InputType.B1;
00CF2:  MOVLB  E
00CF4:  BCF    x33.1
00CF6:  MOVLB  D
00CF8:  BTFSS  xA9.0
00CFA:  BRA    0D02
00CFC:  MOVLB  E
00CFE:  BSF    x33.1
00D00:  MOVLB  D
....................    FaultNCNO[2] = InputType.B2;
00D02:  MOVLB  E
00D04:  BCF    x33.2
00D06:  MOVLB  D
00D08:  BTFSS  xA9.1
00D0A:  BRA    0D12
00D0C:  MOVLB  E
00D0E:  BSF    x33.2
00D10:  MOVLB  D
....................    FaultNCNO[3] = InputType.B3;
00D12:  MOVLB  E
00D14:  BCF    x33.3
00D16:  MOVLB  D
00D18:  BTFSS  xA9.2
00D1A:  BRA    0D22
00D1C:  MOVLB  E
00D1E:  BSF    x33.3
00D20:  MOVLB  D
....................    FaultNCNO[4] = InputType.B4;
00D22:  MOVLB  E
00D24:  BCF    x33.4
00D26:  MOVLB  D
00D28:  BTFSS  xA9.3
00D2A:  BRA    0D32
00D2C:  MOVLB  E
00D2E:  BSF    x33.4
00D30:  MOVLB  D
....................    FaultNCNO[5] = InputType.B5;
00D32:  MOVLB  E
00D34:  BCF    x33.5
00D36:  MOVLB  D
00D38:  BTFSS  xA9.4
00D3A:  BRA    0D42
00D3C:  MOVLB  E
00D3E:  BSF    x33.5
00D40:  MOVLB  D
....................    FaultNCNO[6] = InputType.B6;
00D42:  MOVLB  E
00D44:  BCF    x33.6
00D46:  MOVLB  D
00D48:  BTFSS  xA9.5
00D4A:  BRA    0D52
00D4C:  MOVLB  E
00D4E:  BSF    x33.6
00D50:  MOVLB  D
....................    FaultNCNO[7] = InputType.B7;
00D52:  MOVLB  E
00D54:  BCF    x33.7
00D56:  MOVLB  D
00D58:  BTFSS  xA9.6
00D5A:  BRA    0D62
00D5C:  MOVLB  E
00D5E:  BSF    x33.7
00D60:  MOVLB  D
....................    FaultNCNO[8] = InputType.B8;
00D62:  MOVLB  E
00D64:  BCF    x34.0
00D66:  MOVLB  D
00D68:  BTFSS  xA9.7
00D6A:  BRA    0D72
00D6C:  MOVLB  E
00D6E:  BSF    x34.0
00D70:  MOVLB  D
....................    FaultNCNO[9] = InputType.B9;
00D72:  MOVLB  E
00D74:  BCF    x34.1
00D76:  MOVLB  D
00D78:  BTFSS  xAA.0
00D7A:  BRA    0D82
00D7C:  MOVLB  E
00D7E:  BSF    x34.1
00D80:  MOVLB  D
....................    FaultNCNO[10] = InputType.B10;
00D82:  MOVLB  E
00D84:  BCF    x34.2
00D86:  MOVLB  D
00D88:  BTFSS  xAA.1
00D8A:  BRA    0D92
00D8C:  MOVLB  E
00D8E:  BSF    x34.2
00D90:  MOVLB  D
....................    FaultNCNO[11] = InputType.B11;
00D92:  MOVLB  E
00D94:  BCF    x34.3
00D96:  MOVLB  D
00D98:  BTFSS  xAA.2
00D9A:  BRA    0DA2
00D9C:  MOVLB  E
00D9E:  BSF    x34.3
00DA0:  MOVLB  D
....................    FaultNCNO[12] = InputType.B12;
00DA2:  MOVLB  E
00DA4:  BCF    x34.4
00DA6:  MOVLB  D
00DA8:  BTFSS  xAA.3
00DAA:  BRA    0DB2
00DAC:  MOVLB  E
00DAE:  BSF    x34.4
00DB0:  MOVLB  D
....................    FaultNCNO[13] = InputType.B13;
00DB2:  MOVLB  E
00DB4:  BCF    x34.5
00DB6:  MOVLB  D
00DB8:  BTFSS  xAA.4
00DBA:  BRA    0DC2
00DBC:  MOVLB  E
00DBE:  BSF    x34.5
00DC0:  MOVLB  D
....................    FaultNCNO[14] = InputType.B14;
00DC2:  MOVLB  E
00DC4:  BCF    x34.6
00DC6:  MOVLB  D
00DC8:  BTFSS  xAA.5
00DCA:  BRA    0DD2
00DCC:  MOVLB  E
00DCE:  BSF    x34.6
00DD0:  MOVLB  D
....................    FaultNCNO[15] = InputType.B15;
00DD2:  MOVLB  E
00DD4:  BCF    x34.7
00DD6:  MOVLB  D
00DD8:  BTFSS  xAA.6
00DDA:  BRA    0DE2
00DDC:  MOVLB  E
00DDE:  BSF    x34.7
00DE0:  MOVLB  D
....................    FaultNCNO[16] = InputType.B16;
00DE2:  MOVLB  E
00DE4:  BCF    x35.0
00DE6:  MOVLB  D
00DE8:  BTFSS  xAA.7
00DEA:  BRA    0DF2
00DEC:  MOVLB  E
00DEE:  BSF    x35.0
00DF0:  MOVLB  D
....................    FaultNCNO[17] = InputType.B17;
00DF2:  MOVLB  E
00DF4:  BCF    x35.1
00DF6:  MOVLB  D
00DF8:  BTFSS  xAB.0
00DFA:  BRA    0E02
00DFC:  MOVLB  E
00DFE:  BSF    x35.1
00E00:  MOVLB  D
....................    FaultNCNO[18] = InputType.B18;
00E02:  MOVLB  E
00E04:  BCF    x35.2
00E06:  MOVLB  D
00E08:  BTFSS  xAB.1
00E0A:  BRA    0E12
00E0C:  MOVLB  E
00E0E:  BSF    x35.2
00E10:  MOVLB  D
....................    FaultNCNO[19] = InputType.B19;
00E12:  MOVLB  E
00E14:  BCF    x35.3
00E16:  MOVLB  D
00E18:  BTFSS  xAB.2
00E1A:  BRA    0E22
00E1C:  MOVLB  E
00E1E:  BSF    x35.3
00E20:  MOVLB  D
....................    FaultNCNO[20] = InputType.B20;
00E22:  MOVLB  E
00E24:  BCF    x35.4
00E26:  MOVLB  D
00E28:  BTFSS  xAB.3
00E2A:  BRA    0E32
00E2C:  MOVLB  E
00E2E:  BSF    x35.4
00E30:  MOVLB  D
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x04);   // Fault type 1-8
00E32:  MOVFF  FF2,E46
00E36:  BCF    FF2.7
00E38:  CLRF   FAA
00E3A:  MOVLW  04
00E3C:  MOVWF  FA9
00E3E:  BCF    FA6.6
00E40:  BCF    FA6.7
00E42:  BSF    FA6.0
00E44:  MOVF   FA8,W
00E46:  MOVLB  E
00E48:  BTFSC  x46.7
00E4A:  BSF    FF2.7
00E4C:  MOVWF  34
....................    FaultType1_8 = EEpDat;
00E4E:  MOVFF  34,38
.................... 
....................    FaultType.B1 = EEpDat;
00E52:  MOVLB  D
00E54:  BCF    xAD.0
00E56:  BTFSC  34.0
00E58:  BSF    xAD.0
....................    FaultType.B2 = EEpDat >> 1;
00E5A:  BCF    FD8.0
00E5C:  RRCF   34,W
00E5E:  BCF    xAD.1
00E60:  BTFSC  FE8.0
00E62:  BSF    xAD.1
....................    FaultType.B3 = EEpDat >> 2;
00E64:  RRCF   34,W
00E66:  MOVWF  00
00E68:  RRCF   00,F
00E6A:  MOVLW  3F
00E6C:  ANDWF  00,F
00E6E:  BCF    xAD.2
00E70:  BTFSC  00.0
00E72:  BSF    xAD.2
....................    FaultType.B4 = EEpDat >> 3;
00E74:  RRCF   34,W
00E76:  MOVWF  00
00E78:  RRCF   00,F
00E7A:  RRCF   00,F
00E7C:  MOVLW  1F
00E7E:  ANDWF  00,F
00E80:  BCF    xAD.3
00E82:  BTFSC  00.0
00E84:  BSF    xAD.3
....................    FaultType.B5 = EEpDat >> 4;
00E86:  SWAPF  34,W
00E88:  MOVWF  00
00E8A:  MOVLW  0F
00E8C:  ANDWF  00,F
00E8E:  BCF    xAD.4
00E90:  BTFSC  00.0
00E92:  BSF    xAD.4
....................    FaultType.B6 = EEpDat >> 5;
00E94:  SWAPF  34,W
00E96:  MOVWF  00
00E98:  RRCF   00,F
00E9A:  MOVLW  07
00E9C:  ANDWF  00,F
00E9E:  BCF    xAD.5
00EA0:  BTFSC  00.0
00EA2:  BSF    xAD.5
....................    FaultType.B7 = EEpDat >> 6;
00EA4:  SWAPF  34,W
00EA6:  MOVWF  00
00EA8:  RRCF   00,F
00EAA:  RRCF   00,F
00EAC:  MOVLW  03
00EAE:  ANDWF  00,F
00EB0:  BCF    xAD.6
00EB2:  BTFSC  00.0
00EB4:  BSF    xAD.6
....................    FaultType.B8 = EEpDat >> 7;
00EB6:  CLRF   00
00EB8:  BTFSC  34.7
00EBA:  BSF    00.0
00EBC:  BCF    xAD.7
00EBE:  BTFSC  00.0
00EC0:  BSF    xAD.7
.................... 
....................    EEpDat = read_eeprom(0x05);   // Fault type 9-16
00EC2:  MOVFF  FF2,E46
00EC6:  BCF    FF2.7
00EC8:  CLRF   FAA
00ECA:  MOVLW  05
00ECC:  MOVWF  FA9
00ECE:  BCF    FA6.6
00ED0:  BCF    FA6.7
00ED2:  BSF    FA6.0
00ED4:  MOVF   FA8,W
00ED6:  MOVLB  E
00ED8:  BTFSC  x46.7
00EDA:  BSF    FF2.7
00EDC:  MOVWF  34
....................    FaultType9_16 = EEpDat;
00EDE:  MOVFF  34,39
.................... 
....................    FaultType.B9 = EEpDat;
00EE2:  MOVLB  D
00EE4:  BCF    xAE.0
00EE6:  BTFSC  34.0
00EE8:  BSF    xAE.0
....................    FaultType.B10 = EEpDat >> 1;
00EEA:  BCF    FD8.0
00EEC:  RRCF   34,W
00EEE:  BCF    xAE.1
00EF0:  BTFSC  FE8.0
00EF2:  BSF    xAE.1
....................    FaultType.B11 = EEpDat >> 2;
00EF4:  RRCF   34,W
00EF6:  MOVWF  00
00EF8:  RRCF   00,F
00EFA:  MOVLW  3F
00EFC:  ANDWF  00,F
00EFE:  BCF    xAE.2
00F00:  BTFSC  00.0
00F02:  BSF    xAE.2
....................    FaultType.B12 = EEpDat >> 3;
00F04:  RRCF   34,W
00F06:  MOVWF  00
00F08:  RRCF   00,F
00F0A:  RRCF   00,F
00F0C:  MOVLW  1F
00F0E:  ANDWF  00,F
00F10:  BCF    xAE.3
00F12:  BTFSC  00.0
00F14:  BSF    xAE.3
....................    FaultType.B13 = EEpDat >> 4;
00F16:  SWAPF  34,W
00F18:  MOVWF  00
00F1A:  MOVLW  0F
00F1C:  ANDWF  00,F
00F1E:  BCF    xAE.4
00F20:  BTFSC  00.0
00F22:  BSF    xAE.4
....................    FaultType.B14 = EEpDat >> 5;
00F24:  SWAPF  34,W
00F26:  MOVWF  00
00F28:  RRCF   00,F
00F2A:  MOVLW  07
00F2C:  ANDWF  00,F
00F2E:  BCF    xAE.5
00F30:  BTFSC  00.0
00F32:  BSF    xAE.5
....................    FaultType.B15 = EEpDat >> 6;
00F34:  SWAPF  34,W
00F36:  MOVWF  00
00F38:  RRCF   00,F
00F3A:  RRCF   00,F
00F3C:  MOVLW  03
00F3E:  ANDWF  00,F
00F40:  BCF    xAE.6
00F42:  BTFSC  00.0
00F44:  BSF    xAE.6
....................    FaultType.B16 = EEpDat >> 7;
00F46:  CLRF   00
00F48:  BTFSC  34.7
00F4A:  BSF    00.0
00F4C:  BCF    xAE.7
00F4E:  BTFSC  00.0
00F50:  BSF    xAE.7
....................    
....................    EEpDat = read_eeprom(0x06);   // Fault type 9-16
00F52:  MOVFF  FF2,E46
00F56:  BCF    FF2.7
00F58:  CLRF   FAA
00F5A:  MOVLW  06
00F5C:  MOVWF  FA9
00F5E:  BCF    FA6.6
00F60:  BCF    FA6.7
00F62:  BSF    FA6.0
00F64:  MOVF   FA8,W
00F66:  MOVLB  E
00F68:  BTFSC  x46.7
00F6A:  BSF    FF2.7
00F6C:  MOVWF  34
....................    FaultType17_24 = EEpDat;
00F6E:  MOVFF  34,3A
.................... 
....................    FaultType.B17 = EEpDat;
00F72:  MOVLB  D
00F74:  BCF    xAF.0
00F76:  BTFSC  34.0
00F78:  BSF    xAF.0
....................    FaultType.B18 = EEpDat >> 1;
00F7A:  BCF    FD8.0
00F7C:  RRCF   34,W
00F7E:  BCF    xAF.1
00F80:  BTFSC  FE8.0
00F82:  BSF    xAF.1
....................    FaultType.B19 = EEpDat >> 2;
00F84:  RRCF   34,W
00F86:  MOVWF  00
00F88:  RRCF   00,F
00F8A:  MOVLW  3F
00F8C:  ANDWF  00,F
00F8E:  BCF    xAF.2
00F90:  BTFSC  00.0
00F92:  BSF    xAF.2
....................    FaultType.B20 = EEpDat >> 3;
00F94:  RRCF   34,W
00F96:  MOVWF  00
00F98:  RRCF   00,F
00F9A:  RRCF   00,F
00F9C:  MOVLW  1F
00F9E:  ANDWF  00,F
00FA0:  BCF    xAF.3
00FA2:  BTFSC  00.0
00FA4:  BSF    xAF.3
....................    FaultType.B21 = EEpDat >> 4;
00FA6:  SWAPF  34,W
00FA8:  MOVWF  00
00FAA:  MOVLW  0F
00FAC:  ANDWF  00,F
00FAE:  BCF    xAF.4
00FB0:  BTFSC  00.0
00FB2:  BSF    xAF.4
....................    FaultType.B22 = EEpDat >> 5;
00FB4:  SWAPF  34,W
00FB6:  MOVWF  00
00FB8:  RRCF   00,F
00FBA:  MOVLW  07
00FBC:  ANDWF  00,F
00FBE:  BCF    xAF.5
00FC0:  BTFSC  00.0
00FC2:  BSF    xAF.5
....................    FaultType.B23 = EEpDat >> 6;
00FC4:  SWAPF  34,W
00FC6:  MOVWF  00
00FC8:  RRCF   00,F
00FCA:  RRCF   00,F
00FCC:  MOVLW  03
00FCE:  ANDWF  00,F
00FD0:  BCF    xAF.6
00FD2:  BTFSC  00.0
00FD4:  BSF    xAF.6
....................    FaultType.B24 = EEpDat >> 7;
00FD6:  CLRF   00
00FD8:  BTFSC  34.7
00FDA:  BSF    00.0
00FDC:  BCF    xAF.7
00FDE:  BTFSC  00.0
00FE0:  BSF    xAF.7
.................... 
.................... 
....................    ////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x07);   // Output type 1-8
00FE2:  MOVFF  FF2,E46
00FE6:  BCF    FF2.7
00FE8:  CLRF   FAA
00FEA:  MOVLW  07
00FEC:  MOVWF  FA9
00FEE:  BCF    FA6.6
00FF0:  BCF    FA6.7
00FF2:  BSF    FA6.0
00FF4:  MOVF   FA8,W
00FF6:  MOVLB  E
00FF8:  BTFSC  x46.7
00FFA:  BSF    FF2.7
00FFC:  MOVWF  34
....................    OutputType1_8 = EEpDat;
00FFE:  MOVFF  34,3B
.................... 
....................    OutputType.B1 = EEpDat;
01002:  MOVLB  D
01004:  BCF    xB1.0
01006:  BTFSC  34.0
01008:  BSF    xB1.0
....................    OutputType.B2 = EEpDat >> 1;
0100A:  BCF    FD8.0
0100C:  RRCF   34,W
0100E:  BCF    xB1.1
01010:  BTFSC  FE8.0
01012:  BSF    xB1.1
....................    OutputType.B3 = EEpDat >> 2;
01014:  RRCF   34,W
01016:  MOVWF  00
01018:  RRCF   00,F
0101A:  MOVLW  3F
0101C:  ANDWF  00,F
0101E:  BCF    xB1.2
01020:  BTFSC  00.0
01022:  BSF    xB1.2
....................    OutputType.B4 = EEpDat >> 3;
01024:  RRCF   34,W
01026:  MOVWF  00
01028:  RRCF   00,F
0102A:  RRCF   00,F
0102C:  MOVLW  1F
0102E:  ANDWF  00,F
01030:  BCF    xB1.3
01032:  BTFSC  00.0
01034:  BSF    xB1.3
....................    OutputType.B5 = EEpDat >> 4;
01036:  SWAPF  34,W
01038:  MOVWF  00
0103A:  MOVLW  0F
0103C:  ANDWF  00,F
0103E:  BCF    xB1.4
01040:  BTFSC  00.0
01042:  BSF    xB1.4
....................    OutputType.B6 = EEpDat >> 5;
01044:  SWAPF  34,W
01046:  MOVWF  00
01048:  RRCF   00,F
0104A:  MOVLW  07
0104C:  ANDWF  00,F
0104E:  BCF    xB1.5
01050:  BTFSC  00.0
01052:  BSF    xB1.5
....................    OutputType.B7 = EEpDat >> 6;
01054:  SWAPF  34,W
01056:  MOVWF  00
01058:  RRCF   00,F
0105A:  RRCF   00,F
0105C:  MOVLW  03
0105E:  ANDWF  00,F
01060:  BCF    xB1.6
01062:  BTFSC  00.0
01064:  BSF    xB1.6
....................    OutputType.B8 = EEpDat >> 7;
01066:  CLRF   00
01068:  BTFSC  34.7
0106A:  BSF    00.0
0106C:  BCF    xB1.7
0106E:  BTFSC  00.0
01070:  BSF    xB1.7
.................... 
....................    EEpDat = read_eeprom(0x08);   // Output type 9-16
01072:  MOVFF  FF2,E46
01076:  BCF    FF2.7
01078:  CLRF   FAA
0107A:  MOVLW  08
0107C:  MOVWF  FA9
0107E:  BCF    FA6.6
01080:  BCF    FA6.7
01082:  BSF    FA6.0
01084:  MOVF   FA8,W
01086:  MOVLB  E
01088:  BTFSC  x46.7
0108A:  BSF    FF2.7
0108C:  MOVWF  34
....................    OutputType9_16 = EEpDat;
0108E:  MOVFF  34,3C
.................... 
....................    OutputType.B9 = EEpDat;
01092:  MOVLB  D
01094:  BCF    xB2.0
01096:  BTFSC  34.0
01098:  BSF    xB2.0
....................    OutputType.B10 = EEpDat >> 1;
0109A:  BCF    FD8.0
0109C:  RRCF   34,W
0109E:  BCF    xB2.1
010A0:  BTFSC  FE8.0
010A2:  BSF    xB2.1
....................    OutputType.B11 = EEpDat >> 2;
010A4:  RRCF   34,W
010A6:  MOVWF  00
010A8:  RRCF   00,F
010AA:  MOVLW  3F
010AC:  ANDWF  00,F
010AE:  BCF    xB2.2
010B0:  BTFSC  00.0
010B2:  BSF    xB2.2
....................    OutputType.B12 = EEpDat >> 3;
010B4:  RRCF   34,W
010B6:  MOVWF  00
010B8:  RRCF   00,F
010BA:  RRCF   00,F
010BC:  MOVLW  1F
010BE:  ANDWF  00,F
010C0:  BCF    xB2.3
010C2:  BTFSC  00.0
010C4:  BSF    xB2.3
....................    OutputType.B13 = EEpDat >> 4;
010C6:  SWAPF  34,W
010C8:  MOVWF  00
010CA:  MOVLW  0F
010CC:  ANDWF  00,F
010CE:  BCF    xB2.4
010D0:  BTFSC  00.0
010D2:  BSF    xB2.4
....................    OutputType.B14 = EEpDat >> 5;
010D4:  SWAPF  34,W
010D6:  MOVWF  00
010D8:  RRCF   00,F
010DA:  MOVLW  07
010DC:  ANDWF  00,F
010DE:  BCF    xB2.5
010E0:  BTFSC  00.0
010E2:  BSF    xB2.5
....................    OutputType.B15 = EEpDat >> 6;
010E4:  SWAPF  34,W
010E6:  MOVWF  00
010E8:  RRCF   00,F
010EA:  RRCF   00,F
010EC:  MOVLW  03
010EE:  ANDWF  00,F
010F0:  BCF    xB2.6
010F2:  BTFSC  00.0
010F4:  BSF    xB2.6
....................    OutputType.B16 = EEpDat >> 7;
010F6:  CLRF   00
010F8:  BTFSC  34.7
010FA:  BSF    00.0
010FC:  BCF    xB2.7
010FE:  BTFSC  00.0
01100:  BSF    xB2.7
....................    
....................    EEpDat = read_eeprom(0x09);   // Output type 9-16
01102:  MOVFF  FF2,E46
01106:  BCF    FF2.7
01108:  CLRF   FAA
0110A:  MOVLW  09
0110C:  MOVWF  FA9
0110E:  BCF    FA6.6
01110:  BCF    FA6.7
01112:  BSF    FA6.0
01114:  MOVF   FA8,W
01116:  MOVLB  E
01118:  BTFSC  x46.7
0111A:  BSF    FF2.7
0111C:  MOVWF  34
....................    OutputType17_24 = EEpDat;
0111E:  MOVFF  34,3D
.................... 
....................    OutputType.B17 = EEpDat;
01122:  MOVLB  D
01124:  BCF    xB3.0
01126:  BTFSC  34.0
01128:  BSF    xB3.0
....................    OutputType.B18 = EEpDat >> 1;
0112A:  BCF    FD8.0
0112C:  RRCF   34,W
0112E:  BCF    xB3.1
01130:  BTFSC  FE8.0
01132:  BSF    xB3.1
....................    OutputType.B19 = EEpDat >> 2;
01134:  RRCF   34,W
01136:  MOVWF  00
01138:  RRCF   00,F
0113A:  MOVLW  3F
0113C:  ANDWF  00,F
0113E:  BCF    xB3.2
01140:  BTFSC  00.0
01142:  BSF    xB3.2
....................    OutputType.B20 = EEpDat >> 3;
01144:  RRCF   34,W
01146:  MOVWF  00
01148:  RRCF   00,F
0114A:  RRCF   00,F
0114C:  MOVLW  1F
0114E:  ANDWF  00,F
01150:  BCF    xB3.3
01152:  BTFSC  00.0
01154:  BSF    xB3.3
....................    OutputType.B21 = EEpDat >> 4;
01156:  SWAPF  34,W
01158:  MOVWF  00
0115A:  MOVLW  0F
0115C:  ANDWF  00,F
0115E:  BCF    xB3.4
01160:  BTFSC  00.0
01162:  BSF    xB3.4
....................    OutputType.B22 = EEpDat >> 5;
01164:  SWAPF  34,W
01166:  MOVWF  00
01168:  RRCF   00,F
0116A:  MOVLW  07
0116C:  ANDWF  00,F
0116E:  BCF    xB3.5
01170:  BTFSC  00.0
01172:  BSF    xB3.5
....................    OutputType.B23 = EEpDat >> 6;
01174:  SWAPF  34,W
01176:  MOVWF  00
01178:  RRCF   00,F
0117A:  RRCF   00,F
0117C:  MOVLW  03
0117E:  ANDWF  00,F
01180:  BCF    xB3.6
01182:  BTFSC  00.0
01184:  BSF    xB3.6
....................    OutputType.B24 = EEpDat >> 7;
01186:  CLRF   00
01188:  BTFSC  34.7
0118A:  BSF    00.0
0118C:  BCF    xB3.7
0118E:  BTFSC  00.0
01190:  BSF    xB3.7
.................... 
.................... 
....................    ////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0A);   // Output Both 1-8
01192:  MOVFF  FF2,E46
01196:  BCF    FF2.7
01198:  CLRF   FAA
0119A:  MOVLW  0A
0119C:  MOVWF  FA9
0119E:  BCF    FA6.6
011A0:  BCF    FA6.7
011A2:  BSF    FA6.0
011A4:  MOVF   FA8,W
011A6:  MOVLB  E
011A8:  BTFSC  x46.7
011AA:  BSF    FF2.7
011AC:  MOVWF  34
....................    OutputBoth1_8 = EEpDat;
011AE:  MOVFF  34,3E
.................... 
....................    OutputBoth.B1 = EEpDat;
011B2:  MOVLB  D
011B4:  BCF    xB5.0
011B6:  BTFSC  34.0
011B8:  BSF    xB5.0
....................    OutputBoth.B2 = EEpDat >> 1;
011BA:  BCF    FD8.0
011BC:  RRCF   34,W
011BE:  BCF    xB5.1
011C0:  BTFSC  FE8.0
011C2:  BSF    xB5.1
....................    OutputBoth.B3 = EEpDat >> 2;
011C4:  RRCF   34,W
011C6:  MOVWF  00
011C8:  RRCF   00,F
011CA:  MOVLW  3F
011CC:  ANDWF  00,F
011CE:  BCF    xB5.2
011D0:  BTFSC  00.0
011D2:  BSF    xB5.2
....................    OutputBoth.B4 = EEpDat >> 3;
011D4:  RRCF   34,W
011D6:  MOVWF  00
011D8:  RRCF   00,F
011DA:  RRCF   00,F
011DC:  MOVLW  1F
011DE:  ANDWF  00,F
011E0:  BCF    xB5.3
011E2:  BTFSC  00.0
011E4:  BSF    xB5.3
....................    OutputBoth.B5 = EEpDat >> 4;
011E6:  SWAPF  34,W
011E8:  MOVWF  00
011EA:  MOVLW  0F
011EC:  ANDWF  00,F
011EE:  BCF    xB5.4
011F0:  BTFSC  00.0
011F2:  BSF    xB5.4
....................    OutputBoth.B6 = EEpDat >> 5;
011F4:  SWAPF  34,W
011F6:  MOVWF  00
011F8:  RRCF   00,F
011FA:  MOVLW  07
011FC:  ANDWF  00,F
011FE:  BCF    xB5.5
01200:  BTFSC  00.0
01202:  BSF    xB5.5
....................    OutputBoth.B7 = EEpDat >> 6;
01204:  SWAPF  34,W
01206:  MOVWF  00
01208:  RRCF   00,F
0120A:  RRCF   00,F
0120C:  MOVLW  03
0120E:  ANDWF  00,F
01210:  BCF    xB5.6
01212:  BTFSC  00.0
01214:  BSF    xB5.6
....................    OutputBoth.B8 = EEpDat >> 7;
01216:  CLRF   00
01218:  BTFSC  34.7
0121A:  BSF    00.0
0121C:  BCF    xB5.7
0121E:  BTFSC  00.0
01220:  BSF    xB5.7
.................... 
....................    EEpDat = read_eeprom(0x0B);   // Output Both 9-16
01222:  MOVFF  FF2,E46
01226:  BCF    FF2.7
01228:  CLRF   FAA
0122A:  MOVLW  0B
0122C:  MOVWF  FA9
0122E:  BCF    FA6.6
01230:  BCF    FA6.7
01232:  BSF    FA6.0
01234:  MOVF   FA8,W
01236:  MOVLB  E
01238:  BTFSC  x46.7
0123A:  BSF    FF2.7
0123C:  MOVWF  34
....................    OutputBoth9_16 = EEpDat;
0123E:  MOVFF  34,3F
.................... 
....................    OutputBoth.B9 = EEpDat;
01242:  MOVLB  D
01244:  BCF    xB6.0
01246:  BTFSC  34.0
01248:  BSF    xB6.0
....................    OutputBoth.B10 = EEpDat >> 1;
0124A:  BCF    FD8.0
0124C:  RRCF   34,W
0124E:  BCF    xB6.1
01250:  BTFSC  FE8.0
01252:  BSF    xB6.1
....................    OutputBoth.B11 = EEpDat >> 2;
01254:  RRCF   34,W
01256:  MOVWF  00
01258:  RRCF   00,F
0125A:  MOVLW  3F
0125C:  ANDWF  00,F
0125E:  BCF    xB6.2
01260:  BTFSC  00.0
01262:  BSF    xB6.2
....................    OutputBoth.B12 = EEpDat >> 3;
01264:  RRCF   34,W
01266:  MOVWF  00
01268:  RRCF   00,F
0126A:  RRCF   00,F
0126C:  MOVLW  1F
0126E:  ANDWF  00,F
01270:  BCF    xB6.3
01272:  BTFSC  00.0
01274:  BSF    xB6.3
....................    OutputBoth.B13 = EEpDat >> 4;
01276:  SWAPF  34,W
01278:  MOVWF  00
0127A:  MOVLW  0F
0127C:  ANDWF  00,F
0127E:  BCF    xB6.4
01280:  BTFSC  00.0
01282:  BSF    xB6.4
....................    OutputBoth.B14 = EEpDat >> 5;
01284:  SWAPF  34,W
01286:  MOVWF  00
01288:  RRCF   00,F
0128A:  MOVLW  07
0128C:  ANDWF  00,F
0128E:  BCF    xB6.5
01290:  BTFSC  00.0
01292:  BSF    xB6.5
....................    OutputBoth.B15 = EEpDat >> 6;
01294:  SWAPF  34,W
01296:  MOVWF  00
01298:  RRCF   00,F
0129A:  RRCF   00,F
0129C:  MOVLW  03
0129E:  ANDWF  00,F
012A0:  BCF    xB6.6
012A2:  BTFSC  00.0
012A4:  BSF    xB6.6
....................    OutputBoth.B16 = EEpDat >> 7;
012A6:  CLRF   00
012A8:  BTFSC  34.7
012AA:  BSF    00.0
012AC:  BCF    xB6.7
012AE:  BTFSC  00.0
012B0:  BSF    xB6.7
....................    
....................    EEpDat = read_eeprom(0x0C);   // Output Both 9-16
012B2:  MOVFF  FF2,E46
012B6:  BCF    FF2.7
012B8:  CLRF   FAA
012BA:  MOVLW  0C
012BC:  MOVWF  FA9
012BE:  BCF    FA6.6
012C0:  BCF    FA6.7
012C2:  BSF    FA6.0
012C4:  MOVF   FA8,W
012C6:  MOVLB  E
012C8:  BTFSC  x46.7
012CA:  BSF    FF2.7
012CC:  MOVWF  34
....................    OutputBoth17_24 = EEpDat;
012CE:  MOVFF  34,40
.................... 
....................    OutputBoth.B17 = EEpDat;
012D2:  MOVLB  D
012D4:  BCF    xB7.0
012D6:  BTFSC  34.0
012D8:  BSF    xB7.0
....................    OutputBoth.B18 = EEpDat >> 1;
012DA:  BCF    FD8.0
012DC:  RRCF   34,W
012DE:  BCF    xB7.1
012E0:  BTFSC  FE8.0
012E2:  BSF    xB7.1
....................    OutputBoth.B19 = EEpDat >> 2;
012E4:  RRCF   34,W
012E6:  MOVWF  00
012E8:  RRCF   00,F
012EA:  MOVLW  3F
012EC:  ANDWF  00,F
012EE:  BCF    xB7.2
012F0:  BTFSC  00.0
012F2:  BSF    xB7.2
....................    OutputBoth.B20 = EEpDat >> 3;
012F4:  RRCF   34,W
012F6:  MOVWF  00
012F8:  RRCF   00,F
012FA:  RRCF   00,F
012FC:  MOVLW  1F
012FE:  ANDWF  00,F
01300:  BCF    xB7.3
01302:  BTFSC  00.0
01304:  BSF    xB7.3
....................    OutputBoth.B21 = EEpDat >> 4;
01306:  SWAPF  34,W
01308:  MOVWF  00
0130A:  MOVLW  0F
0130C:  ANDWF  00,F
0130E:  BCF    xB7.4
01310:  BTFSC  00.0
01312:  BSF    xB7.4
....................    OutputBoth.B22 = EEpDat >> 5;
01314:  SWAPF  34,W
01316:  MOVWF  00
01318:  RRCF   00,F
0131A:  MOVLW  07
0131C:  ANDWF  00,F
0131E:  BCF    xB7.5
01320:  BTFSC  00.0
01322:  BSF    xB7.5
....................    OutputBoth.B23 = EEpDat >> 6;
01324:  SWAPF  34,W
01326:  MOVWF  00
01328:  RRCF   00,F
0132A:  RRCF   00,F
0132C:  MOVLW  03
0132E:  ANDWF  00,F
01330:  BCF    xB7.6
01332:  BTFSC  00.0
01334:  BSF    xB7.6
....................    OutputBoth.B24 = EEpDat >> 7;
01336:  CLRF   00
01338:  BTFSC  34.7
0133A:  BSF    00.0
0133C:  BCF    xB7.7
0133E:  BTFSC  00.0
01340:  BSF    xB7.7
.................... 
.................... 
....................    /////////////////////////////////////////////////
.................... 
....................    EEpDat = read_eeprom(0x0D);   // AlarmIndicator 1-8
01342:  MOVFF  FF2,E46
01346:  BCF    FF2.7
01348:  CLRF   FAA
0134A:  MOVLW  0D
0134C:  MOVWF  FA9
0134E:  BCF    FA6.6
01350:  BCF    FA6.7
01352:  BSF    FA6.0
01354:  MOVF   FA8,W
01356:  MOVLB  E
01358:  BTFSC  x46.7
0135A:  BSF    FF2.7
0135C:  MOVWF  34
....................    Alarm_Indicator1_8 = EEpDat;
0135E:  MOVFF  34,41
.................... 
....................    AlarmIndicator.B1 = EEpDat;
01362:  MOVLB  D
01364:  BCF    xB9.0
01366:  BTFSC  34.0
01368:  BSF    xB9.0
....................    AlarmIndicator.B2 = EEpDat >> 1;
0136A:  BCF    FD8.0
0136C:  RRCF   34,W
0136E:  BCF    xB9.1
01370:  BTFSC  FE8.0
01372:  BSF    xB9.1
....................    AlarmIndicator.B3 = EEpDat >> 2;
01374:  RRCF   34,W
01376:  MOVWF  00
01378:  RRCF   00,F
0137A:  MOVLW  3F
0137C:  ANDWF  00,F
0137E:  BCF    xB9.2
01380:  BTFSC  00.0
01382:  BSF    xB9.2
....................    AlarmIndicator.B4 = EEpDat >> 3;
01384:  RRCF   34,W
01386:  MOVWF  00
01388:  RRCF   00,F
0138A:  RRCF   00,F
0138C:  MOVLW  1F
0138E:  ANDWF  00,F
01390:  BCF    xB9.3
01392:  BTFSC  00.0
01394:  BSF    xB9.3
....................    AlarmIndicator.B5 = EEpDat >> 4;
01396:  SWAPF  34,W
01398:  MOVWF  00
0139A:  MOVLW  0F
0139C:  ANDWF  00,F
0139E:  BCF    xB9.4
013A0:  BTFSC  00.0
013A2:  BSF    xB9.4
....................    AlarmIndicator.B6 = EEpDat >> 5;
013A4:  SWAPF  34,W
013A6:  MOVWF  00
013A8:  RRCF   00,F
013AA:  MOVLW  07
013AC:  ANDWF  00,F
013AE:  BCF    xB9.5
013B0:  BTFSC  00.0
013B2:  BSF    xB9.5
....................    AlarmIndicator.B7 = EEpDat >> 6;
013B4:  SWAPF  34,W
013B6:  MOVWF  00
013B8:  RRCF   00,F
013BA:  RRCF   00,F
013BC:  MOVLW  03
013BE:  ANDWF  00,F
013C0:  BCF    xB9.6
013C2:  BTFSC  00.0
013C4:  BSF    xB9.6
....................    AlarmIndicator.B8 = EEpDat >> 7;
013C6:  CLRF   00
013C8:  BTFSC  34.7
013CA:  BSF    00.0
013CC:  BCF    xB9.7
013CE:  BTFSC  00.0
013D0:  BSF    xB9.7
.................... 
....................    EEpDat = read_eeprom(0x0E);   // AlarmIndicator 9-16
013D2:  MOVFF  FF2,E46
013D6:  BCF    FF2.7
013D8:  CLRF   FAA
013DA:  MOVLW  0E
013DC:  MOVWF  FA9
013DE:  BCF    FA6.6
013E0:  BCF    FA6.7
013E2:  BSF    FA6.0
013E4:  MOVF   FA8,W
013E6:  MOVLB  E
013E8:  BTFSC  x46.7
013EA:  BSF    FF2.7
013EC:  MOVWF  34
....................    Alarm_Indicator9_16 = EEpDat;
013EE:  MOVFF  34,42
.................... 
....................    AlarmIndicator.B9 = EEpDat;
013F2:  MOVLB  D
013F4:  BCF    xBA.0
013F6:  BTFSC  34.0
013F8:  BSF    xBA.0
....................    AlarmIndicator.B10 = EEpDat >> 1;
013FA:  BCF    FD8.0
013FC:  RRCF   34,W
013FE:  BCF    xBA.1
01400:  BTFSC  FE8.0
01402:  BSF    xBA.1
....................    AlarmIndicator.B11 = EEpDat >> 2;
01404:  RRCF   34,W
01406:  MOVWF  00
01408:  RRCF   00,F
0140A:  MOVLW  3F
0140C:  ANDWF  00,F
0140E:  BCF    xBA.2
01410:  BTFSC  00.0
01412:  BSF    xBA.2
....................    AlarmIndicator.B12 = EEpDat >> 3;
01414:  RRCF   34,W
01416:  MOVWF  00
01418:  RRCF   00,F
0141A:  RRCF   00,F
0141C:  MOVLW  1F
0141E:  ANDWF  00,F
01420:  BCF    xBA.3
01422:  BTFSC  00.0
01424:  BSF    xBA.3
....................    AlarmIndicator.B13 = EEpDat >> 4;
01426:  SWAPF  34,W
01428:  MOVWF  00
0142A:  MOVLW  0F
0142C:  ANDWF  00,F
0142E:  BCF    xBA.4
01430:  BTFSC  00.0
01432:  BSF    xBA.4
....................    AlarmIndicator.B14 = EEpDat >> 5;
01434:  SWAPF  34,W
01436:  MOVWF  00
01438:  RRCF   00,F
0143A:  MOVLW  07
0143C:  ANDWF  00,F
0143E:  BCF    xBA.5
01440:  BTFSC  00.0
01442:  BSF    xBA.5
....................    AlarmIndicator.B15 = EEpDat >> 6;
01444:  SWAPF  34,W
01446:  MOVWF  00
01448:  RRCF   00,F
0144A:  RRCF   00,F
0144C:  MOVLW  03
0144E:  ANDWF  00,F
01450:  BCF    xBA.6
01452:  BTFSC  00.0
01454:  BSF    xBA.6
....................    AlarmIndicator.B16 = EEpDat >> 7;
01456:  CLRF   00
01458:  BTFSC  34.7
0145A:  BSF    00.0
0145C:  BCF    xBA.7
0145E:  BTFSC  00.0
01460:  BSF    xBA.7
....................    
....................    EEpDat = read_eeprom(0x0F);   // AlarmIndicator 9-16
01462:  MOVFF  FF2,E46
01466:  BCF    FF2.7
01468:  CLRF   FAA
0146A:  MOVLW  0F
0146C:  MOVWF  FA9
0146E:  BCF    FA6.6
01470:  BCF    FA6.7
01472:  BSF    FA6.0
01474:  MOVF   FA8,W
01476:  MOVLB  E
01478:  BTFSC  x46.7
0147A:  BSF    FF2.7
0147C:  MOVWF  34
....................    Alarm_Indicator17_24 = EEpDat;
0147E:  MOVFF  34,43
.................... 
....................    AlarmIndicator.B17 = EEpDat;
01482:  MOVLB  D
01484:  BCF    xBB.0
01486:  BTFSC  34.0
01488:  BSF    xBB.0
....................    AlarmIndicator.B18 = EEpDat >> 1;
0148A:  BCF    FD8.0
0148C:  RRCF   34,W
0148E:  BCF    xBB.1
01490:  BTFSC  FE8.0
01492:  BSF    xBB.1
....................    AlarmIndicator.B19 = EEpDat >> 2;
01494:  RRCF   34,W
01496:  MOVWF  00
01498:  RRCF   00,F
0149A:  MOVLW  3F
0149C:  ANDWF  00,F
0149E:  BCF    xBB.2
014A0:  BTFSC  00.0
014A2:  BSF    xBB.2
....................    AlarmIndicator.B20 = EEpDat >> 3;
014A4:  RRCF   34,W
014A6:  MOVWF  00
014A8:  RRCF   00,F
014AA:  RRCF   00,F
014AC:  MOVLW  1F
014AE:  ANDWF  00,F
014B0:  BCF    xBB.3
014B2:  BTFSC  00.0
014B4:  BSF    xBB.3
....................    AlarmIndicator.B21 = EEpDat >> 4;
014B6:  SWAPF  34,W
014B8:  MOVWF  00
014BA:  MOVLW  0F
014BC:  ANDWF  00,F
014BE:  BCF    xBB.4
014C0:  BTFSC  00.0
014C2:  BSF    xBB.4
....................    AlarmIndicator.B22 = EEpDat >> 5;
014C4:  SWAPF  34,W
014C6:  MOVWF  00
014C8:  RRCF   00,F
014CA:  MOVLW  07
014CC:  ANDWF  00,F
014CE:  BCF    xBB.5
014D0:  BTFSC  00.0
014D2:  BSF    xBB.5
....................    AlarmIndicator.B23 = EEpDat >> 6;
014D4:  SWAPF  34,W
014D6:  MOVWF  00
014D8:  RRCF   00,F
014DA:  RRCF   00,F
014DC:  MOVLW  03
014DE:  ANDWF  00,F
014E0:  BCF    xBB.6
014E2:  BTFSC  00.0
014E4:  BSF    xBB.6
....................    AlarmIndicator.B24 = EEpDat >> 7;
014E6:  CLRF   00
014E8:  BTFSC  34.7
014EA:  BSF    00.0
014EC:  BCF    xBB.7
014EE:  BTFSC  00.0
014F0:  BSF    xBB.7
.................... 
....................    //////////////////////////////////////////////////
....................    EEpDat = read_eeprom(0x10);
014F2:  MOVFF  FF2,E46
014F6:  BCF    FF2.7
014F8:  CLRF   FAA
014FA:  MOVLW  10
014FC:  MOVWF  FA9
014FE:  BCF    FA6.6
01500:  BCF    FA6.7
01502:  BSF    FA6.0
01504:  MOVF   FA8,W
01506:  MOVLB  E
01508:  BTFSC  x46.7
0150A:  BSF    FF2.7
0150C:  MOVWF  34
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
0150E:  MOVLB  D
01510:  BCF    xCD.0
01512:  BTFSC  34.0
01514:  BSF    xCD.0
....................    RED_Colour.B2 = EEpDat >> 1;
01516:  BCF    FD8.0
01518:  RRCF   34,W
0151A:  BCF    xCD.1
0151C:  BTFSC  FE8.0
0151E:  BSF    xCD.1
....................    RED_Colour.B3 = EEpDat >> 2;
01520:  RRCF   34,W
01522:  MOVWF  00
01524:  RRCF   00,F
01526:  MOVLW  3F
01528:  ANDWF  00,F
0152A:  BCF    xCD.2
0152C:  BTFSC  00.0
0152E:  BSF    xCD.2
....................    RED_Colour.B4 = EEpDat >> 3;
01530:  RRCF   34,W
01532:  MOVWF  00
01534:  RRCF   00,F
01536:  RRCF   00,F
01538:  MOVLW  1F
0153A:  ANDWF  00,F
0153C:  BCF    xCD.3
0153E:  BTFSC  00.0
01540:  BSF    xCD.3
....................    RED_Colour.B5 = EEpDat >> 4;
01542:  SWAPF  34,W
01544:  MOVWF  00
01546:  MOVLW  0F
01548:  ANDWF  00,F
0154A:  BCF    xCD.4
0154C:  BTFSC  00.0
0154E:  BSF    xCD.4
....................    RED_Colour.B6 = EEpDat >> 5;
01550:  SWAPF  34,W
01552:  MOVWF  00
01554:  RRCF   00,F
01556:  MOVLW  07
01558:  ANDWF  00,F
0155A:  BCF    xCD.5
0155C:  BTFSC  00.0
0155E:  BSF    xCD.5
....................    RED_Colour.B7 = EEpDat >> 6;
01560:  SWAPF  34,W
01562:  MOVWF  00
01564:  RRCF   00,F
01566:  RRCF   00,F
01568:  MOVLW  03
0156A:  ANDWF  00,F
0156C:  BCF    xCD.6
0156E:  BTFSC  00.0
01570:  BSF    xCD.6
....................    RED_Colour.B8 = EEpDat >> 7;
01572:  CLRF   00
01574:  BTFSC  34.7
01576:  BSF    00.0
01578:  BCF    xCD.7
0157A:  BTFSC  00.0
0157C:  BSF    xCD.7
....................    
....................    EEpDat = read_eeprom(0x11);
0157E:  MOVFF  FF2,E46
01582:  BCF    FF2.7
01584:  CLRF   FAA
01586:  MOVLW  11
01588:  MOVWF  FA9
0158A:  BCF    FA6.6
0158C:  BCF    FA6.7
0158E:  BSF    FA6.0
01590:  MOVF   FA8,W
01592:  MOVLB  E
01594:  BTFSC  x46.7
01596:  BSF    FF2.7
01598:  MOVWF  34
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
0159A:  MOVLB  D
0159C:  BCF    xCE.0
0159E:  BTFSC  34.0
015A0:  BSF    xCE.0
....................    RED_Colour.B10 = EEpDat >> 1;
015A2:  BCF    FD8.0
015A4:  RRCF   34,W
015A6:  BCF    xCE.1
015A8:  BTFSC  FE8.0
015AA:  BSF    xCE.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
015AC:  MOVFF  FF2,E46
015B0:  BCF    FF2.7
015B2:  CLRF   FAA
015B4:  MOVLW  12
015B6:  MOVWF  FA9
015B8:  BCF    FA6.6
015BA:  BCF    FA6.7
015BC:  BSF    FA6.0
015BE:  MOVF   FA8,W
015C0:  MOVLB  E
015C2:  BTFSC  x46.7
015C4:  BSF    FF2.7
015C6:  MOVWF  34
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
015C8:  MOVLB  D
015CA:  BCF    xCE.2
015CC:  BTFSC  34.0
015CE:  BSF    xCE.2
....................    RED_Colour.B12 = EEpDat >> 1;
015D0:  BCF    FD8.0
015D2:  RRCF   34,W
015D4:  BCF    xCE.3
015D6:  BTFSC  FE8.0
015D8:  BSF    xCE.3
....................    RED_Colour.B13 = EEpDat >> 2;
015DA:  RRCF   34,W
015DC:  MOVWF  00
015DE:  RRCF   00,F
015E0:  MOVLW  3F
015E2:  ANDWF  00,F
015E4:  BCF    xCE.4
015E6:  BTFSC  00.0
015E8:  BSF    xCE.4
....................    RED_Colour.B14 = EEpDat >> 3;
015EA:  RRCF   34,W
015EC:  MOVWF  00
015EE:  RRCF   00,F
015F0:  RRCF   00,F
015F2:  MOVLW  1F
015F4:  ANDWF  00,F
015F6:  BCF    xCE.5
015F8:  BTFSC  00.0
015FA:  BSF    xCE.5
....................    RED_Colour.B15 = EEpDat >> 4;
015FC:  SWAPF  34,W
015FE:  MOVWF  00
01600:  MOVLW  0F
01602:  ANDWF  00,F
01604:  BCF    xCE.6
01606:  BTFSC  00.0
01608:  BSF    xCE.6
....................    RED_Colour.B16 = EEpDat >> 5;
0160A:  SWAPF  34,W
0160C:  MOVWF  00
0160E:  RRCF   00,F
01610:  MOVLW  07
01612:  ANDWF  00,F
01614:  BCF    xCE.7
01616:  BTFSC  00.0
01618:  BSF    xCE.7
....................    RED_Colour.B17 = EEpDat >> 6;
0161A:  SWAPF  34,W
0161C:  MOVWF  00
0161E:  RRCF   00,F
01620:  RRCF   00,F
01622:  MOVLW  03
01624:  ANDWF  00,F
01626:  BCF    xCF.0
01628:  BTFSC  00.0
0162A:  BSF    xCF.0
....................    RED_Colour.B18 = EEpDat >> 7;
0162C:  CLRF   00
0162E:  BTFSC  34.7
01630:  BSF    00.0
01632:  BCF    xCF.1
01634:  BTFSC  00.0
01636:  BSF    xCF.1
....................    
....................    EEpDat = read_eeprom(0x13);
01638:  MOVFF  FF2,E46
0163C:  BCF    FF2.7
0163E:  CLRF   FAA
01640:  MOVLW  13
01642:  MOVWF  FA9
01644:  BCF    FA6.6
01646:  BCF    FA6.7
01648:  BSF    FA6.0
0164A:  MOVF   FA8,W
0164C:  MOVLB  E
0164E:  BTFSC  x46.7
01650:  BSF    FF2.7
01652:  MOVWF  34
....................    //Red19_20 = EEpDat;
....................    RED_Colour.B19 = EEpDat;
01654:  MOVLB  D
01656:  BCF    xCF.2
01658:  BTFSC  34.0
0165A:  BSF    xCF.2
....................    RED_Colour.B20 = EEpDat >> 1;
0165C:  BCF    FD8.0
0165E:  RRCF   34,W
01660:  BCF    xCF.3
01662:  BTFSC  FE8.0
01664:  BSF    xCF.3
....................    
....................    
....................    EEpDat = read_eeprom(0x14);
01666:  MOVFF  FF2,E46
0166A:  BCF    FF2.7
0166C:  CLRF   FAA
0166E:  MOVLW  14
01670:  MOVWF  FA9
01672:  BCF    FA6.6
01674:  BCF    FA6.7
01676:  BSF    FA6.0
01678:  MOVF   FA8,W
0167A:  MOVLB  E
0167C:  BTFSC  x46.7
0167E:  BSF    FF2.7
01680:  MOVWF  34
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
01682:  MOVLB  D
01684:  BCF    xD1.0
01686:  BTFSC  34.0
01688:  BSF    xD1.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
0168A:  BCF    FD8.0
0168C:  RRCF   34,W
0168E:  BCF    xD1.1
01690:  BTFSC  FE8.0
01692:  BSF    xD1.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
01694:  RRCF   34,W
01696:  MOVWF  00
01698:  RRCF   00,F
0169A:  MOVLW  3F
0169C:  ANDWF  00,F
0169E:  BCF    xD1.2
016A0:  BTFSC  00.0
016A2:  BSF    xD1.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
016A4:  RRCF   34,W
016A6:  MOVWF  00
016A8:  RRCF   00,F
016AA:  RRCF   00,F
016AC:  MOVLW  1F
016AE:  ANDWF  00,F
016B0:  BCF    xD1.3
016B2:  BTFSC  00.0
016B4:  BSF    xD1.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
016B6:  SWAPF  34,W
016B8:  MOVWF  00
016BA:  MOVLW  0F
016BC:  ANDWF  00,F
016BE:  BCF    xD1.4
016C0:  BTFSC  00.0
016C2:  BSF    xD1.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
016C4:  SWAPF  34,W
016C6:  MOVWF  00
016C8:  RRCF   00,F
016CA:  MOVLW  07
016CC:  ANDWF  00,F
016CE:  BCF    xD1.5
016D0:  BTFSC  00.0
016D2:  BSF    xD1.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
016D4:  SWAPF  34,W
016D6:  MOVWF  00
016D8:  RRCF   00,F
016DA:  RRCF   00,F
016DC:  MOVLW  03
016DE:  ANDWF  00,F
016E0:  BCF    xD1.6
016E2:  BTFSC  00.0
016E4:  BSF    xD1.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
016E6:  CLRF   00
016E8:  BTFSC  34.7
016EA:  BSF    00.0
016EC:  BCF    xD1.7
016EE:  BTFSC  00.0
016F0:  BSF    xD1.7
....................    
....................    EEpDat = read_eeprom(0x15);
016F2:  MOVFF  FF2,E46
016F6:  BCF    FF2.7
016F8:  CLRF   FAA
016FA:  MOVLW  15
016FC:  MOVWF  FA9
016FE:  BCF    FA6.6
01700:  BCF    FA6.7
01702:  BSF    FA6.0
01704:  MOVF   FA8,W
01706:  MOVLB  E
01708:  BTFSC  x46.7
0170A:  BSF    FF2.7
0170C:  MOVWF  34
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
0170E:  MOVLB  D
01710:  BCF    xD2.0
01712:  BTFSC  34.0
01714:  BSF    xD2.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
01716:  BCF    FD8.0
01718:  RRCF   34,W
0171A:  BCF    xD2.1
0171C:  BTFSC  FE8.0
0171E:  BSF    xD2.1
....................    
....................    EEpDat = read_eeprom(0x16);
01720:  MOVFF  FF2,E46
01724:  BCF    FF2.7
01726:  CLRF   FAA
01728:  MOVLW  16
0172A:  MOVWF  FA9
0172C:  BCF    FA6.6
0172E:  BCF    FA6.7
01730:  BSF    FA6.0
01732:  MOVF   FA8,W
01734:  MOVLB  E
01736:  BTFSC  x46.7
01738:  BSF    FF2.7
0173A:  MOVWF  34
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0173C:  MOVLB  D
0173E:  BCF    xD2.2
01740:  BTFSC  34.0
01742:  BSF    xD2.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
01744:  BCF    FD8.0
01746:  RRCF   34,W
01748:  BCF    xD2.3
0174A:  BTFSC  FE8.0
0174C:  BSF    xD2.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
0174E:  RRCF   34,W
01750:  MOVWF  00
01752:  RRCF   00,F
01754:  MOVLW  3F
01756:  ANDWF  00,F
01758:  BCF    xD2.4
0175A:  BTFSC  00.0
0175C:  BSF    xD2.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
0175E:  RRCF   34,W
01760:  MOVWF  00
01762:  RRCF   00,F
01764:  RRCF   00,F
01766:  MOVLW  1F
01768:  ANDWF  00,F
0176A:  BCF    xD2.5
0176C:  BTFSC  00.0
0176E:  BSF    xD2.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
01770:  SWAPF  34,W
01772:  MOVWF  00
01774:  MOVLW  0F
01776:  ANDWF  00,F
01778:  BCF    xD2.6
0177A:  BTFSC  00.0
0177C:  BSF    xD2.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
0177E:  SWAPF  34,W
01780:  MOVWF  00
01782:  RRCF   00,F
01784:  MOVLW  07
01786:  ANDWF  00,F
01788:  BCF    xD2.7
0178A:  BTFSC  00.0
0178C:  BSF    xD2.7
....................    GREEN_Colour.B17 = EEpDat >> 6;
0178E:  SWAPF  34,W
01790:  MOVWF  00
01792:  RRCF   00,F
01794:  RRCF   00,F
01796:  MOVLW  03
01798:  ANDWF  00,F
0179A:  BCF    xD3.0
0179C:  BTFSC  00.0
0179E:  BSF    xD3.0
....................    GREEN_Colour.B18 = EEpDat >> 7;
017A0:  CLRF   00
017A2:  BTFSC  34.7
017A4:  BSF    00.0
017A6:  BCF    xD3.1
017A8:  BTFSC  00.0
017AA:  BSF    xD3.1
....................    
....................    EEpDat = read_eeprom(0x17);
017AC:  MOVFF  FF2,E46
017B0:  BCF    FF2.7
017B2:  CLRF   FAA
017B4:  MOVLW  17
017B6:  MOVWF  FA9
017B8:  BCF    FA6.6
017BA:  BCF    FA6.7
017BC:  BSF    FA6.0
017BE:  MOVF   FA8,W
017C0:  MOVLB  E
017C2:  BTFSC  x46.7
017C4:  BSF    FF2.7
017C6:  MOVWF  34
....................    //Green19_20 = EEpDat;
....................    GREEN_Colour.B19 = EEpDat;
017C8:  MOVLB  D
017CA:  BCF    xD3.2
017CC:  BTFSC  34.0
017CE:  BSF    xD3.2
....................    GREEN_Colour.B20 = EEpDat >> 1;
017D0:  BCF    FD8.0
017D2:  RRCF   34,W
017D4:  BCF    xD3.3
017D6:  BTFSC  FE8.0
017D8:  BSF    xD3.3
....................    
....................   
.................... 
....................    //////////////////////////////////////////////////
.................... 
....................    AutoAck = read_eeprom(0x18);          // Auto Acknoeledge
017DA:  MOVFF  FF2,E46
017DE:  BCF    FF2.7
017E0:  CLRF   FAA
017E2:  MOVLW  18
017E4:  MOVWF  FA9
017E6:  BCF    FA6.6
017E8:  BCF    FA6.7
017EA:  BSF    FA6.0
017EC:  MOVF   FA8,W
017EE:  MOVLB  E
017F0:  BTFSC  x46.7
017F2:  BSF    FF2.7
017F4:  MOVWF  53
....................    AutoAckTime = read_eeprom(0x19);      // Auto Acknoeledge Time
017F6:  MOVFF  FF2,E46
017FA:  BCF    FF2.7
017FC:  CLRF   FAA
017FE:  MOVLW  19
01800:  MOVWF  FA9
01802:  BCF    FA6.6
01804:  BCF    FA6.7
01806:  BSF    FA6.0
01808:  MOVF   FA8,W
0180A:  BTFSC  x46.7
0180C:  BSF    FF2.7
0180E:  MOVWF  54
....................    FlashingRate = read_eeprom(0x1A); // Flashing rate
01810:  MOVFF  FF2,E46
01814:  BCF    FF2.7
01816:  CLRF   FAA
01818:  MOVLW  1A
0181A:  MOVWF  FA9
0181C:  BCF    FA6.6
0181E:  BCF    FA6.7
01820:  BSF    FA6.0
01822:  MOVF   FA8,W
01824:  BTFSC  x46.7
01826:  BSF    FF2.7
01828:  MOVWF  55
....................    NoOfPoint = read_eeprom(0x1B);        // Number of total point
0182A:  MOVFF  FF2,E46
0182E:  BCF    FF2.7
01830:  CLRF   FAA
01832:  MOVLW  1B
01834:  MOVWF  FA9
01836:  BCF    FA6.6
01838:  BCF    FA6.7
0183A:  BSF    FA6.0
0183C:  MOVF   FA8,W
0183E:  BTFSC  x46.7
01840:  BSF    FF2.7
01842:  MOVWF  56
....................    FaultDelayTime[0] = read_eeprom(0x1C);  // Master or slave sync(flashing)
01844:  MOVFF  FF2,E46
01848:  BCF    FF2.7
0184A:  CLRF   FAA
0184C:  MOVLW  1C
0184E:  MOVWF  FA9
01850:  BCF    FA6.6
01852:  BCF    FA6.7
01854:  BSF    FA6.0
01856:  MOVF   FA8,W
01858:  BTFSC  x46.7
0185A:  BSF    FF2.7
0185C:  CLRF   x0A
0185E:  MOVWF  x09
.................... 
....................    Address = read_eeprom(0x1D);          //Communication address
01860:  MOVFF  FF2,E46
01864:  BCF    FF2.7
01866:  CLRF   FAA
01868:  MOVLW  1D
0186A:  MOVWF  FA9
0186C:  BCF    FA6.6
0186E:  BCF    FA6.7
01870:  BSF    FA6.0
01872:  MOVF   FA8,W
01874:  BTFSC  x46.7
01876:  BSF    FF2.7
01878:  MOVLB  0
0187A:  MOVWF  x62
....................    
....................    FaultDelayTime[1] = read_eeprom(0x1E);
0187C:  MOVFF  FF2,E46
01880:  BCF    FF2.7
01882:  CLRF   FAA
01884:  MOVLW  1E
01886:  MOVWF  FA9
01888:  BCF    FA6.6
0188A:  BCF    FA6.7
0188C:  BSF    FA6.0
0188E:  MOVF   FA8,W
01890:  MOVLB  E
01892:  BTFSC  x46.7
01894:  BSF    FF2.7
01896:  CLRF   x0C
01898:  MOVWF  x0B
....................    FaultDelayTime[2] = read_eeprom(0x1F);
0189A:  MOVFF  FF2,E46
0189E:  BCF    FF2.7
018A0:  CLRF   FAA
018A2:  MOVLW  1F
018A4:  MOVWF  FA9
018A6:  BCF    FA6.6
018A8:  BCF    FA6.7
018AA:  BSF    FA6.0
018AC:  MOVF   FA8,W
018AE:  BTFSC  x46.7
018B0:  BSF    FF2.7
018B2:  CLRF   x0E
018B4:  MOVWF  x0D
....................    FaultDelayTime[3] = read_eeprom(0x20);
018B6:  MOVFF  FF2,E46
018BA:  BCF    FF2.7
018BC:  CLRF   FAA
018BE:  MOVLW  20
018C0:  MOVWF  FA9
018C2:  BCF    FA6.6
018C4:  BCF    FA6.7
018C6:  BSF    FA6.0
018C8:  MOVF   FA8,W
018CA:  BTFSC  x46.7
018CC:  BSF    FF2.7
018CE:  CLRF   x10
018D0:  MOVWF  x0F
....................    FaultDelayTime[4] = read_eeprom(0x21);
018D2:  MOVFF  FF2,E46
018D6:  BCF    FF2.7
018D8:  CLRF   FAA
018DA:  MOVLW  21
018DC:  MOVWF  FA9
018DE:  BCF    FA6.6
018E0:  BCF    FA6.7
018E2:  BSF    FA6.0
018E4:  MOVF   FA8,W
018E6:  BTFSC  x46.7
018E8:  BSF    FF2.7
018EA:  CLRF   x12
018EC:  MOVWF  x11
....................    FaultDelayTime[5] = read_eeprom(0x22);
018EE:  MOVFF  FF2,E46
018F2:  BCF    FF2.7
018F4:  CLRF   FAA
018F6:  MOVLW  22
018F8:  MOVWF  FA9
018FA:  BCF    FA6.6
018FC:  BCF    FA6.7
018FE:  BSF    FA6.0
01900:  MOVF   FA8,W
01902:  BTFSC  x46.7
01904:  BSF    FF2.7
01906:  CLRF   x14
01908:  MOVWF  x13
....................    FaultDelayTime[6] = read_eeprom(0x23);
0190A:  MOVFF  FF2,E46
0190E:  BCF    FF2.7
01910:  CLRF   FAA
01912:  MOVLW  23
01914:  MOVWF  FA9
01916:  BCF    FA6.6
01918:  BCF    FA6.7
0191A:  BSF    FA6.0
0191C:  MOVF   FA8,W
0191E:  BTFSC  x46.7
01920:  BSF    FF2.7
01922:  CLRF   x16
01924:  MOVWF  x15
....................    FaultDelayTime[7] = read_eeprom(0x24);
01926:  MOVFF  FF2,E46
0192A:  BCF    FF2.7
0192C:  CLRF   FAA
0192E:  MOVLW  24
01930:  MOVWF  FA9
01932:  BCF    FA6.6
01934:  BCF    FA6.7
01936:  BSF    FA6.0
01938:  MOVF   FA8,W
0193A:  BTFSC  x46.7
0193C:  BSF    FF2.7
0193E:  CLRF   x18
01940:  MOVWF  x17
....................    FaultDelayTime[8] = read_eeprom(0x25);
01942:  MOVFF  FF2,E46
01946:  BCF    FF2.7
01948:  CLRF   FAA
0194A:  MOVLW  25
0194C:  MOVWF  FA9
0194E:  BCF    FA6.6
01950:  BCF    FA6.7
01952:  BSF    FA6.0
01954:  MOVF   FA8,W
01956:  BTFSC  x46.7
01958:  BSF    FF2.7
0195A:  CLRF   x1A
0195C:  MOVWF  x19
....................    FaultDelayTime[9] = read_eeprom(0x26);
0195E:  MOVFF  FF2,E46
01962:  BCF    FF2.7
01964:  CLRF   FAA
01966:  MOVLW  26
01968:  MOVWF  FA9
0196A:  BCF    FA6.6
0196C:  BCF    FA6.7
0196E:  BSF    FA6.0
01970:  MOVF   FA8,W
01972:  BTFSC  x46.7
01974:  BSF    FF2.7
01976:  CLRF   x1C
01978:  MOVWF  x1B
....................    FaultDelayTime[10] = read_eeprom(0x27);
0197A:  MOVFF  FF2,E46
0197E:  BCF    FF2.7
01980:  CLRF   FAA
01982:  MOVLW  27
01984:  MOVWF  FA9
01986:  BCF    FA6.6
01988:  BCF    FA6.7
0198A:  BSF    FA6.0
0198C:  MOVF   FA8,W
0198E:  BTFSC  x46.7
01990:  BSF    FF2.7
01992:  CLRF   x1E
01994:  MOVWF  x1D
....................    FaultDelayTime[11] = read_eeprom(0x28);
01996:  MOVFF  FF2,E46
0199A:  BCF    FF2.7
0199C:  CLRF   FAA
0199E:  MOVLW  28
019A0:  MOVWF  FA9
019A2:  BCF    FA6.6
019A4:  BCF    FA6.7
019A6:  BSF    FA6.0
019A8:  MOVF   FA8,W
019AA:  BTFSC  x46.7
019AC:  BSF    FF2.7
019AE:  CLRF   x20
019B0:  MOVWF  x1F
....................    FaultDelayTime[12] = read_eeprom(0x29);
019B2:  MOVFF  FF2,E46
019B6:  BCF    FF2.7
019B8:  CLRF   FAA
019BA:  MOVLW  29
019BC:  MOVWF  FA9
019BE:  BCF    FA6.6
019C0:  BCF    FA6.7
019C2:  BSF    FA6.0
019C4:  MOVF   FA8,W
019C6:  BTFSC  x46.7
019C8:  BSF    FF2.7
019CA:  CLRF   x22
019CC:  MOVWF  x21
....................    FaultDelayTime[13] = read_eeprom(0x2A);
019CE:  MOVFF  FF2,E46
019D2:  BCF    FF2.7
019D4:  CLRF   FAA
019D6:  MOVLW  2A
019D8:  MOVWF  FA9
019DA:  BCF    FA6.6
019DC:  BCF    FA6.7
019DE:  BSF    FA6.0
019E0:  MOVF   FA8,W
019E2:  BTFSC  x46.7
019E4:  BSF    FF2.7
019E6:  CLRF   x24
019E8:  MOVWF  x23
....................    FaultDelayTime[14] = read_eeprom(0x2B);
019EA:  MOVFF  FF2,E46
019EE:  BCF    FF2.7
019F0:  CLRF   FAA
019F2:  MOVLW  2B
019F4:  MOVWF  FA9
019F6:  BCF    FA6.6
019F8:  BCF    FA6.7
019FA:  BSF    FA6.0
019FC:  MOVF   FA8,W
019FE:  BTFSC  x46.7
01A00:  BSF    FF2.7
01A02:  CLRF   x26
01A04:  MOVWF  x25
....................    FaultDelayTime[15] = read_eeprom(0x2C);
01A06:  MOVFF  FF2,E46
01A0A:  BCF    FF2.7
01A0C:  CLRF   FAA
01A0E:  MOVLW  2C
01A10:  MOVWF  FA9
01A12:  BCF    FA6.6
01A14:  BCF    FA6.7
01A16:  BSF    FA6.0
01A18:  MOVF   FA8,W
01A1A:  BTFSC  x46.7
01A1C:  BSF    FF2.7
01A1E:  CLRF   x28
01A20:  MOVWF  x27
....................    FaultDelayTime[16] = read_eeprom(0x2D);
01A22:  MOVFF  FF2,E46
01A26:  BCF    FF2.7
01A28:  CLRF   FAA
01A2A:  MOVLW  2D
01A2C:  MOVWF  FA9
01A2E:  BCF    FA6.6
01A30:  BCF    FA6.7
01A32:  BSF    FA6.0
01A34:  MOVF   FA8,W
01A36:  BTFSC  x46.7
01A38:  BSF    FF2.7
01A3A:  CLRF   x2A
01A3C:  MOVWF  x29
....................    FaultDelayTime[17] = read_eeprom(0x2E);
01A3E:  MOVFF  FF2,E46
01A42:  BCF    FF2.7
01A44:  CLRF   FAA
01A46:  MOVLW  2E
01A48:  MOVWF  FA9
01A4A:  BCF    FA6.6
01A4C:  BCF    FA6.7
01A4E:  BSF    FA6.0
01A50:  MOVF   FA8,W
01A52:  BTFSC  x46.7
01A54:  BSF    FF2.7
01A56:  CLRF   x2C
01A58:  MOVWF  x2B
....................    FaultDelayTime[18] = read_eeprom(0x2F);
01A5A:  MOVFF  FF2,E46
01A5E:  BCF    FF2.7
01A60:  CLRF   FAA
01A62:  MOVLW  2F
01A64:  MOVWF  FA9
01A66:  BCF    FA6.6
01A68:  BCF    FA6.7
01A6A:  BSF    FA6.0
01A6C:  MOVF   FA8,W
01A6E:  BTFSC  x46.7
01A70:  BSF    FF2.7
01A72:  CLRF   x2E
01A74:  MOVWF  x2D
....................    FaultDelayTime[19] = read_eeprom(0x30);
01A76:  MOVFF  FF2,E46
01A7A:  BCF    FF2.7
01A7C:  CLRF   FAA
01A7E:  MOVLW  30
01A80:  MOVWF  FA9
01A82:  BCF    FA6.6
01A84:  BCF    FA6.7
01A86:  BSF    FA6.0
01A88:  MOVF   FA8,W
01A8A:  BTFSC  x46.7
01A8C:  BSF    FF2.7
01A8E:  CLRF   x30
01A90:  MOVWF  x2F
....................    FaultDelayTime[20] = read_eeprom(0x31);
01A92:  MOVFF  FF2,E46
01A96:  BCF    FF2.7
01A98:  CLRF   FAA
01A9A:  MOVLW  31
01A9C:  MOVWF  FA9
01A9E:  BCF    FA6.6
01AA0:  BCF    FA6.7
01AA2:  BSF    FA6.0
01AA4:  MOVF   FA8,W
01AA6:  BTFSC  x46.7
01AA8:  BSF    FF2.7
01AAA:  CLRF   x32
01AAC:  MOVWF  x31
....................    
....................    unsigned int  a = 0; 
....................    unsigned char  phonenum;
01AAE:  CLRF   x3C
....................    for(; ; a++)
....................    {
....................       restart_wdt();
01AB0:  CLRWDT
....................       phonenum = read_eeprom(0x32 + a);
01AB2:  MOVLW  32
01AB4:  ADDWF  x3C,W
01AB6:  MOVWF  x46
01AB8:  MOVFF  FF2,E47
01ABC:  BCF    FF2.7
01ABE:  CLRF   FAA
01AC0:  MOVFF  E46,FA9
01AC4:  BCF    FA6.6
01AC6:  BCF    FA6.7
01AC8:  BSF    FA6.0
01ACA:  MOVF   FA8,W
01ACC:  BTFSC  x47.7
01ACE:  BSF    FF2.7
01AD0:  MOVWF  x3D
....................       if((phonenum == 0x0D) || (a > 15))
01AD2:  MOVF   x3D,W
01AD4:  SUBLW  0D
01AD6:  BZ    1ADE
01AD8:  MOVF   x3C,W
01ADA:  SUBLW  0F
01ADC:  BC    1B26
....................       {
....................          sms_phonenumber[a] =  '\0';
01ADE:  CLRF   03
01AE0:  MOVF   x3C,W
01AE2:  ADDLW  72
01AE4:  MOVWF  FE9
01AE6:  MOVLW  0A
01AE8:  ADDWFC 03,W
01AEA:  MOVWF  FEA
01AEC:  CLRF   FEF
....................          write_eeprom(0x32+a,phonenum);
01AEE:  MOVLW  32
01AF0:  ADDWF  x3C,W
01AF2:  MOVWF  x46
01AF4:  MOVF   FF2,W
01AF6:  MOVWF  00
01AF8:  BCF    FF2.7
01AFA:  CLRF   FAA
01AFC:  MOVFF  E46,FA9
01B00:  MOVFF  E3D,FA8
01B04:  BCF    FA6.6
01B06:  BCF    FA6.7
01B08:  BSF    FA6.2
01B0A:  MOVLB  F
01B0C:  MOVLW  55
01B0E:  MOVWF  FA7
01B10:  MOVLW  AA
01B12:  MOVWF  FA7
01B14:  BSF    FA6.1
01B16:  BTFSC  FA6.1
01B18:  BRA    1B16
01B1A:  BCF    FA6.2
01B1C:  MOVF   00,W
01B1E:  IORWF  FF2,F
....................          break;
01B20:  BRA    1B42
....................       }
01B22:  BRA    1B3A
01B24:  MOVLB  E
....................       else
....................       {
....................          sms_phonenumber[a] = phonenum;
01B26:  CLRF   03
01B28:  MOVF   x3C,W
01B2A:  ADDLW  72
01B2C:  MOVWF  FE9
01B2E:  MOVLW  0A
01B30:  ADDWFC 03,W
01B32:  MOVWF  FEA
01B34:  MOVFF  E3D,FEF
01B38:  MOVLB  F
....................       }
01B3A:  MOVLB  E
01B3C:  INCF   x3C,F
01B3E:  BRA    1AB0
01B40:  MOVLB  F
....................    }
....................    
....................       
....................    int16  i =3,j=0,k=0 , buff;
01B42:  MOVLB  E
01B44:  CLRF   x3F
01B46:  MOVLW  03
01B48:  MOVWF  x3E
01B4A:  CLRF   x41
01B4C:  CLRF   x40
01B4E:  CLRF   x43
01B50:  CLRF   x42
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01B52:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01B54:  MOVLW  5D
01B56:  ADDWF  x3E,W
01B58:  MOVWF  x46
01B5A:  MOVLW  00
01B5C:  ADDWFC x3F,W
01B5E:  MOVWF  x47
01B60:  MOVFF  FF2,E48
01B64:  BCF    FF2.7
01B66:  MOVFF  E47,FAA
01B6A:  MOVFF  E46,FA9
01B6E:  BCF    FA6.6
01B70:  BCF    FA6.7
01B72:  BSF    FA6.0
01B74:  MOVF   FA8,W
01B76:  BTFSC  x48.7
01B78:  BSF    FF2.7
01B7A:  CLRF   x45
01B7C:  MOVWF  x44
....................       
....................       if((buff == 0x0D)|| (j>30))
01B7E:  MOVF   x44,W
01B80:  SUBLW  0D
01B82:  BNZ   1B88
01B84:  MOVF   x45,F
01B86:  BZ    1B92
01B88:  MOVF   x41,F
01B8A:  BNZ   1B92
01B8C:  MOVF   x40,W
01B8E:  SUBLW  1E
01B90:  BC    1BA4
....................       {
....................          SMS_Massage1[j] = '\0' ; // end string
01B92:  MOVLW  81
01B94:  ADDWF  x40,W
01B96:  MOVWF  FE9
01B98:  MOVLW  0A
01B9A:  ADDWFC x41,W
01B9C:  MOVWF  FEA
01B9E:  CLRF   FEF
....................          break;
01BA0:  BRA    1BC8
....................       }
01BA2:  BRA    1BB4
....................       else
....................       {
....................          SMS_Massage1[j] = buff;  
01BA4:  MOVLW  81
01BA6:  ADDWF  x40,W
01BA8:  MOVWF  FE9
01BAA:  MOVLW  0A
01BAC:  ADDWFC x41,W
01BAE:  MOVWF  FEA
01BB0:  MOVFF  E44,FEF
....................       }
01BB4:  MOVFF  E3F,03
01BB8:  MOVF   x3E,W
01BBA:  INCF   x3E,F
01BBC:  BTFSC  FD8.2
01BBE:  INCF   x3F,F
01BC0:  INCF   x40,F
01BC2:  BTFSC  FD8.2
01BC4:  INCF   x41,F
01BC6:  BRA    1B52
....................    }
....................    
....................    i++;
01BC8:  INCF   x3E,F
01BCA:  BTFSC  FD8.2
01BCC:  INCF   x3F,F
....................    j=0;
01BCE:  CLRF   x41
01BD0:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01BD2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01BD4:  MOVLW  5D
01BD6:  ADDWF  x3E,W
01BD8:  MOVWF  x46
01BDA:  MOVLW  00
01BDC:  ADDWFC x3F,W
01BDE:  MOVWF  x47
01BE0:  MOVFF  FF2,E48
01BE4:  BCF    FF2.7
01BE6:  MOVFF  E47,FAA
01BEA:  MOVFF  E46,FA9
01BEE:  BCF    FA6.6
01BF0:  BCF    FA6.7
01BF2:  BSF    FA6.0
01BF4:  MOVF   FA8,W
01BF6:  BTFSC  x48.7
01BF8:  BSF    FF2.7
01BFA:  CLRF   x45
01BFC:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
01BFE:  MOVF   x44,W
01C00:  SUBLW  0D
01C02:  BNZ   1C08
01C04:  MOVF   x45,F
01C06:  BZ    1C12
01C08:  MOVF   x41,F
01C0A:  BNZ   1C12
01C0C:  MOVF   x40,W
01C0E:  SUBLW  1E
01C10:  BC    1C24
....................       {
....................          SMS_Massage2[j] = '\0' ; // end string
01C12:  MOVLW  A1
01C14:  ADDWF  x40,W
01C16:  MOVWF  FE9
01C18:  MOVLW  0A
01C1A:  ADDWFC x41,W
01C1C:  MOVWF  FEA
01C1E:  CLRF   FEF
....................          break;
01C20:  BRA    1C48
....................       }
01C22:  BRA    1C34
....................       else
....................       {
....................          SMS_Massage2[j] = buff;         
01C24:  MOVLW  A1
01C26:  ADDWF  x40,W
01C28:  MOVWF  FE9
01C2A:  MOVLW  0A
01C2C:  ADDWFC x41,W
01C2E:  MOVWF  FEA
01C30:  MOVFF  E44,FEF
....................       }
01C34:  MOVFF  E3F,03
01C38:  MOVF   x3E,W
01C3A:  INCF   x3E,F
01C3C:  BTFSC  FD8.2
01C3E:  INCF   x3F,F
01C40:  INCF   x40,F
01C42:  BTFSC  FD8.2
01C44:  INCF   x41,F
01C46:  BRA    1BD2
....................    }
....................    
....................    i++;
01C48:  INCF   x3E,F
01C4A:  BTFSC  FD8.2
01C4C:  INCF   x3F,F
....................    j=0;
01C4E:  CLRF   x41
01C50:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01C52:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01C54:  MOVLW  5D
01C56:  ADDWF  x3E,W
01C58:  MOVWF  x46
01C5A:  MOVLW  00
01C5C:  ADDWFC x3F,W
01C5E:  MOVWF  x47
01C60:  MOVFF  FF2,E48
01C64:  BCF    FF2.7
01C66:  MOVFF  E47,FAA
01C6A:  MOVFF  E46,FA9
01C6E:  BCF    FA6.6
01C70:  BCF    FA6.7
01C72:  BSF    FA6.0
01C74:  MOVF   FA8,W
01C76:  BTFSC  x48.7
01C78:  BSF    FF2.7
01C7A:  CLRF   x45
01C7C:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
01C7E:  MOVF   x44,W
01C80:  SUBLW  0D
01C82:  BNZ   1C88
01C84:  MOVF   x45,F
01C86:  BZ    1C92
01C88:  MOVF   x41,F
01C8A:  BNZ   1C92
01C8C:  MOVF   x40,W
01C8E:  SUBLW  1E
01C90:  BC    1CA4
....................       {
....................          SMS_Massage3[j] = '\0' ; // end string
01C92:  MOVLW  C1
01C94:  ADDWF  x40,W
01C96:  MOVWF  FE9
01C98:  MOVLW  0A
01C9A:  ADDWFC x41,W
01C9C:  MOVWF  FEA
01C9E:  CLRF   FEF
....................          break;
01CA0:  BRA    1CC8
....................       }
01CA2:  BRA    1CB4
....................       else
....................       {
....................          SMS_Massage3[j] = buff;         
01CA4:  MOVLW  C1
01CA6:  ADDWF  x40,W
01CA8:  MOVWF  FE9
01CAA:  MOVLW  0A
01CAC:  ADDWFC x41,W
01CAE:  MOVWF  FEA
01CB0:  MOVFF  E44,FEF
....................       }
01CB4:  MOVFF  E3F,03
01CB8:  MOVF   x3E,W
01CBA:  INCF   x3E,F
01CBC:  BTFSC  FD8.2
01CBE:  INCF   x3F,F
01CC0:  INCF   x40,F
01CC2:  BTFSC  FD8.2
01CC4:  INCF   x41,F
01CC6:  BRA    1C52
....................    }
....................    
....................    i++;
01CC8:  INCF   x3E,F
01CCA:  BTFSC  FD8.2
01CCC:  INCF   x3F,F
....................    j=0;
01CCE:  CLRF   x41
01CD0:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01CD2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01CD4:  MOVLW  5D
01CD6:  ADDWF  x3E,W
01CD8:  MOVWF  x46
01CDA:  MOVLW  00
01CDC:  ADDWFC x3F,W
01CDE:  MOVWF  x47
01CE0:  MOVFF  FF2,E48
01CE4:  BCF    FF2.7
01CE6:  MOVFF  E47,FAA
01CEA:  MOVFF  E46,FA9
01CEE:  BCF    FA6.6
01CF0:  BCF    FA6.7
01CF2:  BSF    FA6.0
01CF4:  MOVF   FA8,W
01CF6:  BTFSC  x48.7
01CF8:  BSF    FF2.7
01CFA:  CLRF   x45
01CFC:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
01CFE:  MOVF   x44,W
01D00:  SUBLW  0D
01D02:  BNZ   1D08
01D04:  MOVF   x45,F
01D06:  BZ    1D12
01D08:  MOVF   x41,F
01D0A:  BNZ   1D12
01D0C:  MOVF   x40,W
01D0E:  SUBLW  1E
01D10:  BC    1D24
....................       {
....................          SMS_Massage4[j] = '\0' ; // end string
01D12:  MOVLW  E1
01D14:  ADDWF  x40,W
01D16:  MOVWF  FE9
01D18:  MOVLW  0A
01D1A:  ADDWFC x41,W
01D1C:  MOVWF  FEA
01D1E:  CLRF   FEF
....................          break;
01D20:  BRA    1D48
....................       }
01D22:  BRA    1D34
....................       else
....................       {
....................          SMS_Massage4[j] = buff;         
01D24:  MOVLW  E1
01D26:  ADDWF  x40,W
01D28:  MOVWF  FE9
01D2A:  MOVLW  0A
01D2C:  ADDWFC x41,W
01D2E:  MOVWF  FEA
01D30:  MOVFF  E44,FEF
....................       }
01D34:  MOVFF  E3F,03
01D38:  MOVF   x3E,W
01D3A:  INCF   x3E,F
01D3C:  BTFSC  FD8.2
01D3E:  INCF   x3F,F
01D40:  INCF   x40,F
01D42:  BTFSC  FD8.2
01D44:  INCF   x41,F
01D46:  BRA    1CD2
....................    }
....................    
....................    i++;
01D48:  INCF   x3E,F
01D4A:  BTFSC  FD8.2
01D4C:  INCF   x3F,F
....................    j=0;
01D4E:  CLRF   x41
01D50:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01D52:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01D54:  MOVLW  5D
01D56:  ADDWF  x3E,W
01D58:  MOVWF  x46
01D5A:  MOVLW  00
01D5C:  ADDWFC x3F,W
01D5E:  MOVWF  x47
01D60:  MOVFF  FF2,E48
01D64:  BCF    FF2.7
01D66:  MOVFF  E47,FAA
01D6A:  MOVFF  E46,FA9
01D6E:  BCF    FA6.6
01D70:  BCF    FA6.7
01D72:  BSF    FA6.0
01D74:  MOVF   FA8,W
01D76:  BTFSC  x48.7
01D78:  BSF    FF2.7
01D7A:  CLRF   x45
01D7C:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
01D7E:  MOVF   x44,W
01D80:  SUBLW  0D
01D82:  BNZ   1D88
01D84:  MOVF   x45,F
01D86:  BZ    1D92
01D88:  MOVF   x41,F
01D8A:  BNZ   1D92
01D8C:  MOVF   x40,W
01D8E:  SUBLW  1E
01D90:  BC    1DA4
....................       {
....................          SMS_Massage5[j] = '\0' ; // end string
01D92:  MOVLW  01
01D94:  ADDWF  x40,W
01D96:  MOVWF  FE9
01D98:  MOVLW  0B
01D9A:  ADDWFC x41,W
01D9C:  MOVWF  FEA
01D9E:  CLRF   FEF
....................          break;
01DA0:  BRA    1DC8
....................       }
01DA2:  BRA    1DB4
....................       else
....................       {
....................          SMS_Massage5[j] = buff;         
01DA4:  MOVLW  01
01DA6:  ADDWF  x40,W
01DA8:  MOVWF  FE9
01DAA:  MOVLW  0B
01DAC:  ADDWFC x41,W
01DAE:  MOVWF  FEA
01DB0:  MOVFF  E44,FEF
....................       }
01DB4:  MOVFF  E3F,03
01DB8:  MOVF   x3E,W
01DBA:  INCF   x3E,F
01DBC:  BTFSC  FD8.2
01DBE:  INCF   x3F,F
01DC0:  INCF   x40,F
01DC2:  BTFSC  FD8.2
01DC4:  INCF   x41,F
01DC6:  BRA    1D52
....................    }
....................    
....................    i++;
01DC8:  INCF   x3E,F
01DCA:  BTFSC  FD8.2
01DCC:  INCF   x3F,F
....................    j=0;
01DCE:  CLRF   x41
01DD0:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01DD2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01DD4:  MOVLW  5D
01DD6:  ADDWF  x3E,W
01DD8:  MOVWF  x46
01DDA:  MOVLW  00
01DDC:  ADDWFC x3F,W
01DDE:  MOVWF  x47
01DE0:  MOVFF  FF2,E48
01DE4:  BCF    FF2.7
01DE6:  MOVFF  E47,FAA
01DEA:  MOVFF  E46,FA9
01DEE:  BCF    FA6.6
01DF0:  BCF    FA6.7
01DF2:  BSF    FA6.0
01DF4:  MOVF   FA8,W
01DF6:  BTFSC  x48.7
01DF8:  BSF    FF2.7
01DFA:  CLRF   x45
01DFC:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
01DFE:  MOVF   x44,W
01E00:  SUBLW  0D
01E02:  BNZ   1E08
01E04:  MOVF   x45,F
01E06:  BZ    1E12
01E08:  MOVF   x41,F
01E0A:  BNZ   1E12
01E0C:  MOVF   x40,W
01E0E:  SUBLW  1E
01E10:  BC    1E24
....................       {
....................          SMS_Massage6[j] = '\0' ; // end string
01E12:  MOVLW  21
01E14:  ADDWF  x40,W
01E16:  MOVWF  FE9
01E18:  MOVLW  0B
01E1A:  ADDWFC x41,W
01E1C:  MOVWF  FEA
01E1E:  CLRF   FEF
....................          break;
01E20:  BRA    1E48
....................       }
01E22:  BRA    1E34
....................       else
....................       {
....................          SMS_Massage6[j] = buff;         
01E24:  MOVLW  21
01E26:  ADDWF  x40,W
01E28:  MOVWF  FE9
01E2A:  MOVLW  0B
01E2C:  ADDWFC x41,W
01E2E:  MOVWF  FEA
01E30:  MOVFF  E44,FEF
....................       }
01E34:  MOVFF  E3F,03
01E38:  MOVF   x3E,W
01E3A:  INCF   x3E,F
01E3C:  BTFSC  FD8.2
01E3E:  INCF   x3F,F
01E40:  INCF   x40,F
01E42:  BTFSC  FD8.2
01E44:  INCF   x41,F
01E46:  BRA    1DD2
....................    }
....................    
....................    i++;
01E48:  INCF   x3E,F
01E4A:  BTFSC  FD8.2
01E4C:  INCF   x3F,F
....................    j=0;
01E4E:  CLRF   x41
01E50:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01E52:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01E54:  MOVLW  5D
01E56:  ADDWF  x3E,W
01E58:  MOVWF  x46
01E5A:  MOVLW  00
01E5C:  ADDWFC x3F,W
01E5E:  MOVWF  x47
01E60:  MOVFF  FF2,E48
01E64:  BCF    FF2.7
01E66:  MOVFF  E47,FAA
01E6A:  MOVFF  E46,FA9
01E6E:  BCF    FA6.6
01E70:  BCF    FA6.7
01E72:  BSF    FA6.0
01E74:  MOVF   FA8,W
01E76:  BTFSC  x48.7
01E78:  BSF    FF2.7
01E7A:  CLRF   x45
01E7C:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
01E7E:  MOVF   x44,W
01E80:  SUBLW  0D
01E82:  BNZ   1E88
01E84:  MOVF   x45,F
01E86:  BZ    1E92
01E88:  MOVF   x41,F
01E8A:  BNZ   1E92
01E8C:  MOVF   x40,W
01E8E:  SUBLW  1E
01E90:  BC    1EA4
....................       {
....................          SMS_Massage7[j] = '\0' ; // end string
01E92:  MOVLW  41
01E94:  ADDWF  x40,W
01E96:  MOVWF  FE9
01E98:  MOVLW  0B
01E9A:  ADDWFC x41,W
01E9C:  MOVWF  FEA
01E9E:  CLRF   FEF
....................          break;
01EA0:  BRA    1EC8
....................       }
01EA2:  BRA    1EB4
....................       else
....................       {
....................          SMS_Massage7[j] = buff;         
01EA4:  MOVLW  41
01EA6:  ADDWF  x40,W
01EA8:  MOVWF  FE9
01EAA:  MOVLW  0B
01EAC:  ADDWFC x41,W
01EAE:  MOVWF  FEA
01EB0:  MOVFF  E44,FEF
....................       }
01EB4:  MOVFF  E3F,03
01EB8:  MOVF   x3E,W
01EBA:  INCF   x3E,F
01EBC:  BTFSC  FD8.2
01EBE:  INCF   x3F,F
01EC0:  INCF   x40,F
01EC2:  BTFSC  FD8.2
01EC4:  INCF   x41,F
01EC6:  BRA    1E52
....................    }
....................    
....................    i++;
01EC8:  INCF   x3E,F
01ECA:  BTFSC  FD8.2
01ECC:  INCF   x3F,F
....................    j=0;
01ECE:  CLRF   x41
01ED0:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01ED2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01ED4:  MOVLW  5D
01ED6:  ADDWF  x3E,W
01ED8:  MOVWF  x46
01EDA:  MOVLW  00
01EDC:  ADDWFC x3F,W
01EDE:  MOVWF  x47
01EE0:  MOVFF  FF2,E48
01EE4:  BCF    FF2.7
01EE6:  MOVFF  E47,FAA
01EEA:  MOVFF  E46,FA9
01EEE:  BCF    FA6.6
01EF0:  BCF    FA6.7
01EF2:  BSF    FA6.0
01EF4:  MOVF   FA8,W
01EF6:  BTFSC  x48.7
01EF8:  BSF    FF2.7
01EFA:  CLRF   x45
01EFC:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
01EFE:  MOVF   x44,W
01F00:  SUBLW  0D
01F02:  BNZ   1F08
01F04:  MOVF   x45,F
01F06:  BZ    1F12
01F08:  MOVF   x41,F
01F0A:  BNZ   1F12
01F0C:  MOVF   x40,W
01F0E:  SUBLW  1E
01F10:  BC    1F24
....................       {
....................          SMS_Massage8[j] = '\0' ; // end string
01F12:  MOVLW  61
01F14:  ADDWF  x40,W
01F16:  MOVWF  FE9
01F18:  MOVLW  0B
01F1A:  ADDWFC x41,W
01F1C:  MOVWF  FEA
01F1E:  CLRF   FEF
....................          break;
01F20:  BRA    1F48
....................       }
01F22:  BRA    1F34
....................       else
....................       {
....................          SMS_Massage8[j] = buff;        
01F24:  MOVLW  61
01F26:  ADDWF  x40,W
01F28:  MOVWF  FE9
01F2A:  MOVLW  0B
01F2C:  ADDWFC x41,W
01F2E:  MOVWF  FEA
01F30:  MOVFF  E44,FEF
....................       }
01F34:  MOVFF  E3F,03
01F38:  MOVF   x3E,W
01F3A:  INCF   x3E,F
01F3C:  BTFSC  FD8.2
01F3E:  INCF   x3F,F
01F40:  INCF   x40,F
01F42:  BTFSC  FD8.2
01F44:  INCF   x41,F
01F46:  BRA    1ED2
....................    }
....................    
....................    i++;
01F48:  INCF   x3E,F
01F4A:  BTFSC  FD8.2
01F4C:  INCF   x3F,F
....................    j=0;
01F4E:  CLRF   x41
01F50:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01F52:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01F54:  MOVLW  5D
01F56:  ADDWF  x3E,W
01F58:  MOVWF  x46
01F5A:  MOVLW  00
01F5C:  ADDWFC x3F,W
01F5E:  MOVWF  x47
01F60:  MOVFF  FF2,E48
01F64:  BCF    FF2.7
01F66:  MOVFF  E47,FAA
01F6A:  MOVFF  E46,FA9
01F6E:  BCF    FA6.6
01F70:  BCF    FA6.7
01F72:  BSF    FA6.0
01F74:  MOVF   FA8,W
01F76:  BTFSC  x48.7
01F78:  BSF    FF2.7
01F7A:  CLRF   x45
01F7C:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
01F7E:  MOVF   x44,W
01F80:  SUBLW  0D
01F82:  BNZ   1F88
01F84:  MOVF   x45,F
01F86:  BZ    1F92
01F88:  MOVF   x41,F
01F8A:  BNZ   1F92
01F8C:  MOVF   x40,W
01F8E:  SUBLW  1E
01F90:  BC    1FA4
....................       {
....................          SMS_Massage9[j] = '\0' ; // end string
01F92:  MOVLW  81
01F94:  ADDWF  x40,W
01F96:  MOVWF  FE9
01F98:  MOVLW  0B
01F9A:  ADDWFC x41,W
01F9C:  MOVWF  FEA
01F9E:  CLRF   FEF
....................          break;
01FA0:  BRA    1FC8
....................       }
01FA2:  BRA    1FB4
....................       else
....................       {
....................          SMS_Massage9[j] = buff;         
01FA4:  MOVLW  81
01FA6:  ADDWF  x40,W
01FA8:  MOVWF  FE9
01FAA:  MOVLW  0B
01FAC:  ADDWFC x41,W
01FAE:  MOVWF  FEA
01FB0:  MOVFF  E44,FEF
....................       }
01FB4:  MOVFF  E3F,03
01FB8:  MOVF   x3E,W
01FBA:  INCF   x3E,F
01FBC:  BTFSC  FD8.2
01FBE:  INCF   x3F,F
01FC0:  INCF   x40,F
01FC2:  BTFSC  FD8.2
01FC4:  INCF   x41,F
01FC6:  BRA    1F52
....................    }
....................    
....................    i++;
01FC8:  INCF   x3E,F
01FCA:  BTFSC  FD8.2
01FCC:  INCF   x3F,F
....................    j=0;
01FCE:  CLRF   x41
01FD0:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
01FD2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
01FD4:  MOVLW  5D
01FD6:  ADDWF  x3E,W
01FD8:  MOVWF  x46
01FDA:  MOVLW  00
01FDC:  ADDWFC x3F,W
01FDE:  MOVWF  x47
01FE0:  MOVFF  FF2,E48
01FE4:  BCF    FF2.7
01FE6:  MOVFF  E47,FAA
01FEA:  MOVFF  E46,FA9
01FEE:  BCF    FA6.6
01FF0:  BCF    FA6.7
01FF2:  BSF    FA6.0
01FF4:  MOVF   FA8,W
01FF6:  BTFSC  x48.7
01FF8:  BSF    FF2.7
01FFA:  CLRF   x45
01FFC:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
01FFE:  MOVF   x44,W
02000:  SUBLW  0D
02002:  BNZ   2008
02004:  MOVF   x45,F
02006:  BZ    2012
02008:  MOVF   x41,F
0200A:  BNZ   2012
0200C:  MOVF   x40,W
0200E:  SUBLW  1E
02010:  BC    2024
....................       {
....................          SMS_Massage10[j] = '\0' ; // end string
02012:  MOVLW  A1
02014:  ADDWF  x40,W
02016:  MOVWF  FE9
02018:  MOVLW  0B
0201A:  ADDWFC x41,W
0201C:  MOVWF  FEA
0201E:  CLRF   FEF
....................          break;
02020:  BRA    2048
....................       }
02022:  BRA    2034
....................       else
....................       {
....................          SMS_Massage10[j] = buff;        
02024:  MOVLW  A1
02026:  ADDWF  x40,W
02028:  MOVWF  FE9
0202A:  MOVLW  0B
0202C:  ADDWFC x41,W
0202E:  MOVWF  FEA
02030:  MOVFF  E44,FEF
....................       }
02034:  MOVFF  E3F,03
02038:  MOVF   x3E,W
0203A:  INCF   x3E,F
0203C:  BTFSC  FD8.2
0203E:  INCF   x3F,F
02040:  INCF   x40,F
02042:  BTFSC  FD8.2
02044:  INCF   x41,F
02046:  BRA    1FD2
....................    }
....................       
....................    i++;
02048:  INCF   x3E,F
0204A:  BTFSC  FD8.2
0204C:  INCF   x3F,F
....................    j=0;
0204E:  CLRF   x41
02050:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02052:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02054:  MOVLW  5D
02056:  ADDWF  x3E,W
02058:  MOVWF  x46
0205A:  MOVLW  00
0205C:  ADDWFC x3F,W
0205E:  MOVWF  x47
02060:  MOVFF  FF2,E48
02064:  BCF    FF2.7
02066:  MOVFF  E47,FAA
0206A:  MOVFF  E46,FA9
0206E:  BCF    FA6.6
02070:  BCF    FA6.7
02072:  BSF    FA6.0
02074:  MOVF   FA8,W
02076:  BTFSC  x48.7
02078:  BSF    FF2.7
0207A:  CLRF   x45
0207C:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
0207E:  MOVF   x44,W
02080:  SUBLW  0D
02082:  BNZ   2088
02084:  MOVF   x45,F
02086:  BZ    2092
02088:  MOVF   x41,F
0208A:  BNZ   2092
0208C:  MOVF   x40,W
0208E:  SUBLW  1E
02090:  BC    20A4
....................       {
....................          SMS_Massage11[j] = '\0' ; // end string
02092:  MOVLW  C1
02094:  ADDWF  x40,W
02096:  MOVWF  FE9
02098:  MOVLW  0B
0209A:  ADDWFC x41,W
0209C:  MOVWF  FEA
0209E:  CLRF   FEF
....................          break;
020A0:  BRA    20C8
....................       }
020A2:  BRA    20B4
....................       else
....................       {
....................          SMS_Massage11[j] = buff;        
020A4:  MOVLW  C1
020A6:  ADDWF  x40,W
020A8:  MOVWF  FE9
020AA:  MOVLW  0B
020AC:  ADDWFC x41,W
020AE:  MOVWF  FEA
020B0:  MOVFF  E44,FEF
....................       }
020B4:  MOVFF  E3F,03
020B8:  MOVF   x3E,W
020BA:  INCF   x3E,F
020BC:  BTFSC  FD8.2
020BE:  INCF   x3F,F
020C0:  INCF   x40,F
020C2:  BTFSC  FD8.2
020C4:  INCF   x41,F
020C6:  BRA    2052
....................    }
....................       
....................    i++;
020C8:  INCF   x3E,F
020CA:  BTFSC  FD8.2
020CC:  INCF   x3F,F
....................    j=0;
020CE:  CLRF   x41
020D0:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
020D2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
020D4:  MOVLW  5D
020D6:  ADDWF  x3E,W
020D8:  MOVWF  x46
020DA:  MOVLW  00
020DC:  ADDWFC x3F,W
020DE:  MOVWF  x47
020E0:  MOVFF  FF2,E48
020E4:  BCF    FF2.7
020E6:  MOVFF  E47,FAA
020EA:  MOVFF  E46,FA9
020EE:  BCF    FA6.6
020F0:  BCF    FA6.7
020F2:  BSF    FA6.0
020F4:  MOVF   FA8,W
020F6:  BTFSC  x48.7
020F8:  BSF    FF2.7
020FA:  CLRF   x45
020FC:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
020FE:  MOVF   x44,W
02100:  SUBLW  0D
02102:  BNZ   2108
02104:  MOVF   x45,F
02106:  BZ    2112
02108:  MOVF   x41,F
0210A:  BNZ   2112
0210C:  MOVF   x40,W
0210E:  SUBLW  1E
02110:  BC    2124
....................       {
....................          SMS_Massage12[j] = '\0' ; // end string
02112:  MOVLW  E1
02114:  ADDWF  x40,W
02116:  MOVWF  FE9
02118:  MOVLW  0B
0211A:  ADDWFC x41,W
0211C:  MOVWF  FEA
0211E:  CLRF   FEF
....................          break;
02120:  BRA    2148
....................       }
02122:  BRA    2134
....................       else
....................       {
....................          SMS_Massage12[j] = buff;         
02124:  MOVLW  E1
02126:  ADDWF  x40,W
02128:  MOVWF  FE9
0212A:  MOVLW  0B
0212C:  ADDWFC x41,W
0212E:  MOVWF  FEA
02130:  MOVFF  E44,FEF
....................       }
02134:  MOVFF  E3F,03
02138:  MOVF   x3E,W
0213A:  INCF   x3E,F
0213C:  BTFSC  FD8.2
0213E:  INCF   x3F,F
02140:  INCF   x40,F
02142:  BTFSC  FD8.2
02144:  INCF   x41,F
02146:  BRA    20D2
....................    }
....................       
....................    i++;
02148:  INCF   x3E,F
0214A:  BTFSC  FD8.2
0214C:  INCF   x3F,F
....................    j=0;
0214E:  CLRF   x41
02150:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02152:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02154:  MOVLW  5D
02156:  ADDWF  x3E,W
02158:  MOVWF  x46
0215A:  MOVLW  00
0215C:  ADDWFC x3F,W
0215E:  MOVWF  x47
02160:  MOVFF  FF2,E48
02164:  BCF    FF2.7
02166:  MOVFF  E47,FAA
0216A:  MOVFF  E46,FA9
0216E:  BCF    FA6.6
02170:  BCF    FA6.7
02172:  BSF    FA6.0
02174:  MOVF   FA8,W
02176:  BTFSC  x48.7
02178:  BSF    FF2.7
0217A:  CLRF   x45
0217C:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
0217E:  MOVF   x44,W
02180:  SUBLW  0D
02182:  BNZ   2188
02184:  MOVF   x45,F
02186:  BZ    2192
02188:  MOVF   x41,F
0218A:  BNZ   2192
0218C:  MOVF   x40,W
0218E:  SUBLW  1E
02190:  BC    21A4
....................       {
....................          SMS_Massage13[j] = '\0' ; // end string
02192:  MOVLW  01
02194:  ADDWF  x40,W
02196:  MOVWF  FE9
02198:  MOVLW  0C
0219A:  ADDWFC x41,W
0219C:  MOVWF  FEA
0219E:  CLRF   FEF
....................          break;
021A0:  BRA    21C8
....................       }
021A2:  BRA    21B4
....................       else
....................       {
....................          SMS_Massage13[j] = buff;       
021A4:  MOVLW  01
021A6:  ADDWF  x40,W
021A8:  MOVWF  FE9
021AA:  MOVLW  0C
021AC:  ADDWFC x41,W
021AE:  MOVWF  FEA
021B0:  MOVFF  E44,FEF
....................       }
021B4:  MOVFF  E3F,03
021B8:  MOVF   x3E,W
021BA:  INCF   x3E,F
021BC:  BTFSC  FD8.2
021BE:  INCF   x3F,F
021C0:  INCF   x40,F
021C2:  BTFSC  FD8.2
021C4:  INCF   x41,F
021C6:  BRA    2152
....................    }
....................       
....................    i++;
021C8:  INCF   x3E,F
021CA:  BTFSC  FD8.2
021CC:  INCF   x3F,F
....................    j=0;
021CE:  CLRF   x41
021D0:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
021D2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
021D4:  MOVLW  5D
021D6:  ADDWF  x3E,W
021D8:  MOVWF  x46
021DA:  MOVLW  00
021DC:  ADDWFC x3F,W
021DE:  MOVWF  x47
021E0:  MOVFF  FF2,E48
021E4:  BCF    FF2.7
021E6:  MOVFF  E47,FAA
021EA:  MOVFF  E46,FA9
021EE:  BCF    FA6.6
021F0:  BCF    FA6.7
021F2:  BSF    FA6.0
021F4:  MOVF   FA8,W
021F6:  BTFSC  x48.7
021F8:  BSF    FF2.7
021FA:  CLRF   x45
021FC:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
021FE:  MOVF   x44,W
02200:  SUBLW  0D
02202:  BNZ   2208
02204:  MOVF   x45,F
02206:  BZ    2212
02208:  MOVF   x41,F
0220A:  BNZ   2212
0220C:  MOVF   x40,W
0220E:  SUBLW  1E
02210:  BC    2224
....................       {
....................          SMS_Massage14[j] = '\0' ; // end string
02212:  MOVLW  21
02214:  ADDWF  x40,W
02216:  MOVWF  FE9
02218:  MOVLW  0C
0221A:  ADDWFC x41,W
0221C:  MOVWF  FEA
0221E:  CLRF   FEF
....................          break;
02220:  BRA    2248
....................       }
02222:  BRA    2234
....................       else
....................       {
....................          SMS_Massage14[j] = buff;        
02224:  MOVLW  21
02226:  ADDWF  x40,W
02228:  MOVWF  FE9
0222A:  MOVLW  0C
0222C:  ADDWFC x41,W
0222E:  MOVWF  FEA
02230:  MOVFF  E44,FEF
....................       }
02234:  MOVFF  E3F,03
02238:  MOVF   x3E,W
0223A:  INCF   x3E,F
0223C:  BTFSC  FD8.2
0223E:  INCF   x3F,F
02240:  INCF   x40,F
02242:  BTFSC  FD8.2
02244:  INCF   x41,F
02246:  BRA    21D2
....................    }
....................       
....................    i++;
02248:  INCF   x3E,F
0224A:  BTFSC  FD8.2
0224C:  INCF   x3F,F
....................    j=0;
0224E:  CLRF   x41
02250:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02252:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02254:  MOVLW  5D
02256:  ADDWF  x3E,W
02258:  MOVWF  x46
0225A:  MOVLW  00
0225C:  ADDWFC x3F,W
0225E:  MOVWF  x47
02260:  MOVFF  FF2,E48
02264:  BCF    FF2.7
02266:  MOVFF  E47,FAA
0226A:  MOVFF  E46,FA9
0226E:  BCF    FA6.6
02270:  BCF    FA6.7
02272:  BSF    FA6.0
02274:  MOVF   FA8,W
02276:  BTFSC  x48.7
02278:  BSF    FF2.7
0227A:  CLRF   x45
0227C:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
0227E:  MOVF   x44,W
02280:  SUBLW  0D
02282:  BNZ   2288
02284:  MOVF   x45,F
02286:  BZ    2292
02288:  MOVF   x41,F
0228A:  BNZ   2292
0228C:  MOVF   x40,W
0228E:  SUBLW  1E
02290:  BC    22A4
....................       {
....................          SMS_Massage15[j] = '\0' ; // end string
02292:  MOVLW  41
02294:  ADDWF  x40,W
02296:  MOVWF  FE9
02298:  MOVLW  0C
0229A:  ADDWFC x41,W
0229C:  MOVWF  FEA
0229E:  CLRF   FEF
....................          break;
022A0:  BRA    22C8
....................       }
022A2:  BRA    22B4
....................       else
....................       {
....................          SMS_Massage15[j] = buff;         
022A4:  MOVLW  41
022A6:  ADDWF  x40,W
022A8:  MOVWF  FE9
022AA:  MOVLW  0C
022AC:  ADDWFC x41,W
022AE:  MOVWF  FEA
022B0:  MOVFF  E44,FEF
....................       }
022B4:  MOVFF  E3F,03
022B8:  MOVF   x3E,W
022BA:  INCF   x3E,F
022BC:  BTFSC  FD8.2
022BE:  INCF   x3F,F
022C0:  INCF   x40,F
022C2:  BTFSC  FD8.2
022C4:  INCF   x41,F
022C6:  BRA    2252
....................    }
....................       
....................    i++;
022C8:  INCF   x3E,F
022CA:  BTFSC  FD8.2
022CC:  INCF   x3F,F
....................    j=0;
022CE:  CLRF   x41
022D0:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
022D2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
022D4:  MOVLW  5D
022D6:  ADDWF  x3E,W
022D8:  MOVWF  x46
022DA:  MOVLW  00
022DC:  ADDWFC x3F,W
022DE:  MOVWF  x47
022E0:  MOVFF  FF2,E48
022E4:  BCF    FF2.7
022E6:  MOVFF  E47,FAA
022EA:  MOVFF  E46,FA9
022EE:  BCF    FA6.6
022F0:  BCF    FA6.7
022F2:  BSF    FA6.0
022F4:  MOVF   FA8,W
022F6:  BTFSC  x48.7
022F8:  BSF    FF2.7
022FA:  CLRF   x45
022FC:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
022FE:  MOVF   x44,W
02300:  SUBLW  0D
02302:  BNZ   2308
02304:  MOVF   x45,F
02306:  BZ    2312
02308:  MOVF   x41,F
0230A:  BNZ   2312
0230C:  MOVF   x40,W
0230E:  SUBLW  1E
02310:  BC    2324
....................       {
....................          SMS_Massage16[j] = '\0' ; // end string
02312:  MOVLW  61
02314:  ADDWF  x40,W
02316:  MOVWF  FE9
02318:  MOVLW  0C
0231A:  ADDWFC x41,W
0231C:  MOVWF  FEA
0231E:  CLRF   FEF
....................          break;
02320:  BRA    2348
....................       }
02322:  BRA    2334
....................       else
....................       {
....................          SMS_Massage16[j] = buff;         
02324:  MOVLW  61
02326:  ADDWF  x40,W
02328:  MOVWF  FE9
0232A:  MOVLW  0C
0232C:  ADDWFC x41,W
0232E:  MOVWF  FEA
02330:  MOVFF  E44,FEF
....................       }
02334:  MOVFF  E3F,03
02338:  MOVF   x3E,W
0233A:  INCF   x3E,F
0233C:  BTFSC  FD8.2
0233E:  INCF   x3F,F
02340:  INCF   x40,F
02342:  BTFSC  FD8.2
02344:  INCF   x41,F
02346:  BRA    22D2
....................    }
....................    
....................    i++;
02348:  INCF   x3E,F
0234A:  BTFSC  FD8.2
0234C:  INCF   x3F,F
....................    j=0;
0234E:  CLRF   x41
02350:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02352:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02354:  MOVLW  5D
02356:  ADDWF  x3E,W
02358:  MOVWF  x46
0235A:  MOVLW  00
0235C:  ADDWFC x3F,W
0235E:  MOVWF  x47
02360:  MOVFF  FF2,E48
02364:  BCF    FF2.7
02366:  MOVFF  E47,FAA
0236A:  MOVFF  E46,FA9
0236E:  BCF    FA6.6
02370:  BCF    FA6.7
02372:  BSF    FA6.0
02374:  MOVF   FA8,W
02376:  BTFSC  x48.7
02378:  BSF    FF2.7
0237A:  CLRF   x45
0237C:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
0237E:  MOVF   x44,W
02380:  SUBLW  0D
02382:  BNZ   2388
02384:  MOVF   x45,F
02386:  BZ    2392
02388:  MOVF   x41,F
0238A:  BNZ   2392
0238C:  MOVF   x40,W
0238E:  SUBLW  1E
02390:  BC    23A4
....................       {
....................          SMS_Massage17[j] = '\0' ; // end string
02392:  MOVLW  81
02394:  ADDWF  x40,W
02396:  MOVWF  FE9
02398:  MOVLW  0C
0239A:  ADDWFC x41,W
0239C:  MOVWF  FEA
0239E:  CLRF   FEF
....................          break;
023A0:  BRA    23C8
....................       }
023A2:  BRA    23B4
....................       else
....................       {
....................          SMS_Massage17[j] = buff;         
023A4:  MOVLW  81
023A6:  ADDWF  x40,W
023A8:  MOVWF  FE9
023AA:  MOVLW  0C
023AC:  ADDWFC x41,W
023AE:  MOVWF  FEA
023B0:  MOVFF  E44,FEF
....................       }
023B4:  MOVFF  E3F,03
023B8:  MOVF   x3E,W
023BA:  INCF   x3E,F
023BC:  BTFSC  FD8.2
023BE:  INCF   x3F,F
023C0:  INCF   x40,F
023C2:  BTFSC  FD8.2
023C4:  INCF   x41,F
023C6:  BRA    2352
....................    }
....................    
....................    i++;
023C8:  INCF   x3E,F
023CA:  BTFSC  FD8.2
023CC:  INCF   x3F,F
....................    j=0;
023CE:  CLRF   x41
023D0:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
023D2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
023D4:  MOVLW  5D
023D6:  ADDWF  x3E,W
023D8:  MOVWF  x46
023DA:  MOVLW  00
023DC:  ADDWFC x3F,W
023DE:  MOVWF  x47
023E0:  MOVFF  FF2,E48
023E4:  BCF    FF2.7
023E6:  MOVFF  E47,FAA
023EA:  MOVFF  E46,FA9
023EE:  BCF    FA6.6
023F0:  BCF    FA6.7
023F2:  BSF    FA6.0
023F4:  MOVF   FA8,W
023F6:  BTFSC  x48.7
023F8:  BSF    FF2.7
023FA:  CLRF   x45
023FC:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
023FE:  MOVF   x44,W
02400:  SUBLW  0D
02402:  BNZ   2408
02404:  MOVF   x45,F
02406:  BZ    2412
02408:  MOVF   x41,F
0240A:  BNZ   2412
0240C:  MOVF   x40,W
0240E:  SUBLW  1E
02410:  BC    2424
....................       {
....................          SMS_Massage18[j] = '\0' ; // end string
02412:  MOVLW  A1
02414:  ADDWF  x40,W
02416:  MOVWF  FE9
02418:  MOVLW  0C
0241A:  ADDWFC x41,W
0241C:  MOVWF  FEA
0241E:  CLRF   FEF
....................          break;
02420:  BRA    2448
....................       }
02422:  BRA    2434
....................       else
....................       {
....................          SMS_Massage18[j] = buff;         
02424:  MOVLW  A1
02426:  ADDWF  x40,W
02428:  MOVWF  FE9
0242A:  MOVLW  0C
0242C:  ADDWFC x41,W
0242E:  MOVWF  FEA
02430:  MOVFF  E44,FEF
....................       }
02434:  MOVFF  E3F,03
02438:  MOVF   x3E,W
0243A:  INCF   x3E,F
0243C:  BTFSC  FD8.2
0243E:  INCF   x3F,F
02440:  INCF   x40,F
02442:  BTFSC  FD8.2
02444:  INCF   x41,F
02446:  BRA    23D2
....................    }
....................    
....................    i++;
02448:  INCF   x3E,F
0244A:  BTFSC  FD8.2
0244C:  INCF   x3F,F
....................    j=0;
0244E:  CLRF   x41
02450:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
02452:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
02454:  MOVLW  5D
02456:  ADDWF  x3E,W
02458:  MOVWF  x46
0245A:  MOVLW  00
0245C:  ADDWFC x3F,W
0245E:  MOVWF  x47
02460:  MOVFF  FF2,E48
02464:  BCF    FF2.7
02466:  MOVFF  E47,FAA
0246A:  MOVFF  E46,FA9
0246E:  BCF    FA6.6
02470:  BCF    FA6.7
02472:  BSF    FA6.0
02474:  MOVF   FA8,W
02476:  BTFSC  x48.7
02478:  BSF    FF2.7
0247A:  CLRF   x45
0247C:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
0247E:  MOVF   x44,W
02480:  SUBLW  0D
02482:  BNZ   2488
02484:  MOVF   x45,F
02486:  BZ    2492
02488:  MOVF   x41,F
0248A:  BNZ   2492
0248C:  MOVF   x40,W
0248E:  SUBLW  1E
02490:  BC    24A4
....................       {
....................          SMS_Massage19[j] = '\0' ; // end string
02492:  MOVLW  C1
02494:  ADDWF  x40,W
02496:  MOVWF  FE9
02498:  MOVLW  0C
0249A:  ADDWFC x41,W
0249C:  MOVWF  FEA
0249E:  CLRF   FEF
....................          break;
024A0:  BRA    24C8
....................       }
024A2:  BRA    24B4
....................       else
....................       {
....................          SMS_Massage19[j] = buff;        
024A4:  MOVLW  C1
024A6:  ADDWF  x40,W
024A8:  MOVWF  FE9
024AA:  MOVLW  0C
024AC:  ADDWFC x41,W
024AE:  MOVWF  FEA
024B0:  MOVFF  E44,FEF
....................       }
024B4:  MOVFF  E3F,03
024B8:  MOVF   x3E,W
024BA:  INCF   x3E,F
024BC:  BTFSC  FD8.2
024BE:  INCF   x3F,F
024C0:  INCF   x40,F
024C2:  BTFSC  FD8.2
024C4:  INCF   x41,F
024C6:  BRA    2452
....................    }
....................    
....................    i++;
024C8:  INCF   x3E,F
024CA:  BTFSC  FD8.2
024CC:  INCF   x3F,F
....................    j=0;
024CE:  CLRF   x41
024D0:  CLRF   x40
....................    
....................    for(; ; i++,j++)
....................    {
....................       restart_wdt();
024D2:  CLRWDT
....................       buff = read_eeprom(0x5D+i);
024D4:  MOVLW  5D
024D6:  ADDWF  x3E,W
024D8:  MOVWF  x46
024DA:  MOVLW  00
024DC:  ADDWFC x3F,W
024DE:  MOVWF  x47
024E0:  MOVFF  FF2,E48
024E4:  BCF    FF2.7
024E6:  MOVFF  E47,FAA
024EA:  MOVFF  E46,FA9
024EE:  BCF    FA6.6
024F0:  BCF    FA6.7
024F2:  BSF    FA6.0
024F4:  MOVF   FA8,W
024F6:  BTFSC  x48.7
024F8:  BSF    FF2.7
024FA:  CLRF   x45
024FC:  MOVWF  x44
....................       
....................       if((buff == 0x0D) || (j>30))
024FE:  MOVF   x44,W
02500:  SUBLW  0D
02502:  BNZ   2508
02504:  MOVF   x45,F
02506:  BZ    2512
02508:  MOVF   x41,F
0250A:  BNZ   2512
0250C:  MOVF   x40,W
0250E:  SUBLW  1E
02510:  BC    2524
....................       {
....................          SMS_Massage20[j] = '\0' ; // end string
02512:  MOVLW  E1
02514:  ADDWF  x40,W
02516:  MOVWF  FE9
02518:  MOVLW  0C
0251A:  ADDWFC x41,W
0251C:  MOVWF  FEA
0251E:  CLRF   FEF
....................          break;
02520:  BRA    2548
....................       }
02522:  BRA    2534
....................       else
....................       {
....................          SMS_Massage20[j] = buff;         
02524:  MOVLW  E1
02526:  ADDWF  x40,W
02528:  MOVWF  FE9
0252A:  MOVLW  0C
0252C:  ADDWFC x41,W
0252E:  MOVWF  FEA
02530:  MOVFF  E44,FEF
....................       }
02534:  MOVFF  E3F,03
02538:  MOVF   x3E,W
0253A:  INCF   x3E,F
0253C:  BTFSC  FD8.2
0253E:  INCF   x3F,F
02540:  INCF   x40,F
02542:  BTFSC  FD8.2
02544:  INCF   x41,F
02546:  BRA    24D2
....................    }
02548:  MOVLB  0
0254A:  RETURN 0
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... #int_RDA
.................... void RDA_isr(void)
.................... {
.................... 
....................    //Data = getc();
....................    //putc(Data);
....................    SBUF = getc();
*
00582:  BTFSS  F9E.5
00584:  BRA    0582
00586:  MOVFF  FAE,2E
....................    checkCommand();
0058A:  BRA    02DA
.................... }
.................... /*
.................... #int_TIMER1
.................... void  TIMER1_isr(void) 
.................... {
....................    //ReadIn_flag =1;
.................... }
.................... */
0058C:  BCF    F9E.5
0058E:  GOTO   006C
.................... #int_TIMER2
.................... void TIMER2_isr(void)      //10ms
.................... {
....................    StatusTime++;
00592:  INCF   19,F
.................... 
....................    if(T_timeout != 0)
00594:  MOVLB  A
00596:  MOVF   x6E,F
00598:  BZ    05A8
....................    {
....................       T_timeout--;
0059A:  DECF   x6E,F
....................       if(T_timeout == 0)
0059C:  MOVF   x6E,F
0059E:  BNZ   05A8
....................       {
....................          //sequence = stop_sq;         //timeout
....................          sequence = end_sq;         //timeout 
005A0:  MOVFF  58,61
....................          output_bit(P485ctrl,0);
005A4:  BCF    F8A.3
005A6:  BCF    F93.3
....................       }
....................    }
....................    ////////// Time Base 1 Second /////////////
....................    if(TimeBase1s != 0x00)
005A8:  MOVF   1C,F
005AA:  BZ    05D2
....................    {
....................       TimeBase1s--;
005AC:  DECF   1C,F
....................       if(TimeBase1s == 0x00)      // <====== code in time base 1 second
005AE:  MOVF   1C,F
005B0:  BNZ   05D2
....................       {
....................          if(AutoAckDelayTime != 0x00)
005B2:  MOVF   1D,F
005B4:  BZ    05BE
....................          {
....................             AutoAckDelayTime--;
005B6:  DECF   1D,F
....................             if(AutoAckDelayTime == 0x00)
005B8:  MOVF   1D,F
005BA:  BNZ   05BE
....................             {
....................                AutoAckFlag = 1 ;
005BC:  BSF    1A.2
....................             }
....................          }
....................          //////////////////////////////
....................          
....................          if(++StartReadCount >=2)
005BE:  INCF   57,F
005C0:  MOVF   57,W
005C2:  SUBLW  01
005C4:  BC    05CC
....................          {
....................             StartRead = 1;
005C6:  BSF    30.4
....................             StartReadCount =2;
005C8:  MOVLW  02
005CA:  MOVWF  57
....................          }
....................          //////////////////////////////
....................          RefreshConfigData = 1;
005CC:  BSF    30.2
....................          TimeBase1s = 100;
005CE:  MOVLW  64
005D0:  MOVWF  1C
....................       }
.................... 
....................    }
....................    ///////////// End Time base 1 Second ///////
.................... 
.................... 
.................... 
....................    if(StatusTime == 40)    //500mS
005D2:  MOVF   19,W
005D4:  SUBLW  28
005D6:  BNZ   0600
....................    {
....................       StatusTime = 0;
005D8:  CLRF   19
....................       if(HearthbeatInd == 0)
005DA:  BTFSC  1A.0
005DC:  BRA    05E6
....................       {
....................          HearthbeatInd = 1;
005DE:  BSF    1A.0
....................          output_bit(Pled,1);
005E0:  BSF    F8A.5
005E2:  BCF    F93.5
....................       }
005E4:  BRA    05EC
....................       else
....................       {
....................          HearthbeatInd = 0;
005E6:  BCF    1A.0
....................          output_bit(Pled,0);
005E8:  BCF    F8A.5
005EA:  BCF    F93.5
....................       }
....................       /////////////////////////////////////////// time base 500 ms
....................       if(Test == 1)            //Test function
005EC:  BTFSS  1A.6
005EE:  BRA    05FE
....................          {
....................              if(T_test > 0x00) T_test --;
005F0:  MOVF   2F,F
005F2:  BZ    05F6
005F4:  DECF   2F,F
....................              if(T_test == 0x00) Test_fault = 1;
005F6:  MOVF   2F,F
005F8:  BNZ   05FC
005FA:  BSF    1A.5
....................          }
005FC:  BRA    0600
....................          else
....................          {
....................              //Test = 0;
....................              T_test = 0x00;
005FE:  CLRF   2F
....................          }
....................    }
....................    ///////////////////////////////
....................    if(FlashingRateTime != 0)
00600:  MOVF   1B,F
00602:  BZ    062A
....................    {
....................       FlashingRateTime--;
00604:  DECF   1B,F
....................       if(FlashingRateTime == 0)
00606:  MOVF   1B,F
00608:  BNZ   061E
....................       {
....................          outmcp23 = 0xff;
0060A:  SETF   x71
....................          
....................          if(SyncStatus == 0)
0060C:  BTFSC  30.1
0060E:  BRA    061A
....................          {
....................             if(FlashingFlag == 1)
00610:  BTFSS  1A.1
00612:  BRA    0618
....................             {
....................                FlashingFlag = 0;
00614:  BCF    1A.1
....................                //output_bit(PSyncS,0);
....................             }
00616:  BRA    061A
....................             else
....................             {
.................... 
....................                FlashingFlag = 1;
00618:  BSF    1A.1
....................                //output_bit(PSyncS,1);
....................             }
....................          }
....................          //FlashingFlag = ~FlashingFlag;
....................          FlashingRateTime = FlashingRate;      //reload value
0061A:  MOVFF  55,1B
....................       }
.................... 
....................       if(Synctimer != 0x00)
0061E:  MOVF   31,F
00620:  BZ    062A
....................       {
....................          Synctimer--;
00622:  DECF   31,F
....................          if(Synctimer == 0x00)
00624:  MOVF   31,F
00626:  BNZ   062A
....................          {
....................             SyncStatus = 0;
00628:  BCF    30.1
....................          }
....................       }
.................... 
....................    }
....................    /*
....................    ReadIn_Count=ReadIn_Count+1;
....................    if(ReadIn_Count==10)
....................    {
....................       ReadIn_Count=0;
....................       ReadIn_flag = 1;
....................    }
....................    */
0062A:  BCF    F9E.1
0062C:  MOVLB  0
0062E:  GOTO   006C
.................... }
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //////////////////////////////////////////////////////////////////////////////
.................... void Anal_Function(void)
.................... {
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// MANUAL RESET /////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... 
.................... //input1
....................    if(AlarmIndicator.B1 == 1)    // Alarm Function
*
07924:  MOVLB  D
07926:  BTFSS  xB9.0
07928:  BRA    7A36
....................    {
....................       if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 1))|| In.B1 == 1)    // alarm1 occure and "Lock type"
0792A:  MOVLW  00
0792C:  BTFSC  xA1.0
0792E:  MOVLW  01
07930:  MOVLB  E
07932:  MOVWF  x45
07934:  MOVLW  00
07936:  MOVLB  D
07938:  BTFSC  xA9.0
0793A:  MOVLW  01
0793C:  MOVLB  E
0793E:  XORWF  x45,W
07940:  SUBLW  01
07942:  BNZ   794A
07944:  MOVLB  D
07946:  BTFSC  xAD.0
07948:  BRA    7950
0794A:  MOVLB  D
0794C:  BTFSS  xC1.0
0794E:  BRA    7A2E
....................       //if(Inputt.B1 == 0)
....................       {
....................          if(Ack.B1 == 0)
07950:  BTFSC  xBD.0
07952:  BRA    7A2C
....................          {
....................             if(In.B1 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07954:  BTFSC  xC1.0
07956:  BRA    7966
07958:  MOVF   53,W
0795A:  SUBLW  0F
0795C:  BNZ   7966
....................             {
....................                TimeBase1s = 100 ;            //reload again
0795E:  MOVLW  64
07960:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07962:  MOVFF  54,1D
....................             }
.................... 
....................             In.B1 = 1;                                 // setbit in1
07966:  BSF    xC1.0
....................             if(FlashingFlag == 0)                                                                                                                                                                                                                                                                
07968:  BTFSC  1A.1
0796A:  BRA    7970
....................             {
....................                Output.B1 = 0;           //Flash output1
0796C:  BCF    xA5.0
....................             }
0796E:  BRA    7972
....................             else
....................             {
....................                Output.B1 = 1;
07970:  BSF    xA5.0
....................             }
.................... 
....................             if (~AutoTestFlag)
07972:  BTFSC  1A.4
07974:  BRA    7992
....................             {
....................                if(OutputBoth.B1 == 0)                  //Both output
07976:  BTFSC  xB5.0
07978:  BRA    7984
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0797A:  BSF    F89.4
0797C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0797E:  BSF    F89.3
07980:  BCF    F92.3
....................                }
07982:  BRA    7992
....................                else
....................                {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07984:  BTFSS  xB1.0
07986:  BRA    798E
07988:  BSF    F89.4
0798A:  BCF    F92.4
0798C:  BRA    7992
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0798E:  BSF    F89.3
07990:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending 
....................             if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
07992:  BTFSC  xD5.0
07994:  BRA    7A2C
07996:  BTFSC  30.3
07998:  BRA    7A2C
0799A:  BTFSC  xBD.0
0799C:  BRA    7A2C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0799E:  MOVLW  32
079A0:  MOVWF  FF6
079A2:  MOVLW  06
079A4:  MOVWF  FF7
079A6:  MOVLB  0
079A8:  CALL   2636
....................                putc('\n',CH2);
079AC:  MOVLW  0A
079AE:  MOVLB  E
079B0:  MOVWF  x46
079B2:  MOVLB  0
079B4:  CALL   25F0
....................                delay_ms(10);
079B8:  MOVLW  0A
079BA:  MOVLB  E
079BC:  MOVWF  x45
079BE:  MOVLB  0
079C0:  CALL   0A24
....................             
....................                SendSMS.B1 =1;
079C4:  MOVLB  D
079C6:  BSF    xD5.0
....................                fprintf(CH2,"AT+CMGS=\"");
079C8:  MOVLW  3C
079CA:  MOVWF  FF6
079CC:  MOVLW  06
079CE:  MOVWF  FF7
079D0:  MOVLB  0
079D2:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
079D6:  MOVLW  0A
079D8:  MOVWF  FEA
079DA:  MOVLW  72
079DC:  MOVWF  FE9
079DE:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
079E2:  MOVLW  22
079E4:  MOVLB  E
079E6:  MOVWF  x46
079E8:  MOVLB  0
079EA:  CALL   25F0
....................                putc('\n',CH2);
079EE:  MOVLW  0A
079F0:  MOVLB  E
079F2:  MOVWF  x46
079F4:  MOVLB  0
079F6:  CALL   25F0
....................                delay_ms(50);
079FA:  MOVLW  32
079FC:  MOVLB  E
079FE:  MOVWF  x45
07A00:  MOVLB  0
07A02:  CALL   0A24
....................               
....................               fprintf(CH2,SMS_Massage1);
07A06:  MOVLW  0A
07A08:  MOVWF  FEA
07A0A:  MOVLW  81
07A0C:  MOVWF  FE9
07A0E:  CALL   6C76
....................               putc('\n',CH2);
07A12:  MOVLW  0A
07A14:  MOVLB  E
07A16:  MOVWF  x46
07A18:  MOVLB  0
07A1A:  CALL   25F0
....................               putc(26,CH2);
07A1E:  MOVLW  1A
07A20:  MOVLB  E
07A22:  MOVWF  x46
07A24:  MOVLB  0
07A26:  CALL   25F0
07A2A:  MOVLB  D
....................             }
....................         }
....................       }
07A2C:  BRA    7A34
....................       else if(FaultType.B1 == 1) Ack.B1 = 0;
07A2E:  BTFSS  xAD.0
07A30:  BRA    7A34
07A32:  BCF    xBD.0
....................    }
07A34:  BRA    7AFA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B1 ^ InputType.B1) == 1)
07A36:  MOVLW  00
07A38:  BTFSC  xA1.0
07A3A:  MOVLW  01
07A3C:  MOVLB  E
07A3E:  MOVWF  x45
07A40:  MOVLW  00
07A42:  MOVLB  D
07A44:  BTFSC  xA9.0
07A46:  MOVLW  01
07A48:  MOVLB  E
07A4A:  XORWF  x45,W
07A4C:  SUBLW  01
07A4E:  BNZ   7AF2
....................       {
....................          Output.B1 = 0;
07A50:  MOVLB  D
07A52:  BCF    xA5.0
....................          // SMS Sending 
....................          if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
07A54:  BTFSC  xD5.0
07A56:  BRA    7AEE
07A58:  BTFSC  30.3
07A5A:  BRA    7AEE
07A5C:  BTFSC  xBD.0
07A5E:  BRA    7AEE
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07A60:  MOVLW  46
07A62:  MOVWF  FF6
07A64:  MOVLW  06
07A66:  MOVWF  FF7
07A68:  MOVLB  0
07A6A:  CALL   2636
....................             putc('\n',CH2);
07A6E:  MOVLW  0A
07A70:  MOVLB  E
07A72:  MOVWF  x46
07A74:  MOVLB  0
07A76:  CALL   25F0
....................             delay_ms(10);
07A7A:  MOVLW  0A
07A7C:  MOVLB  E
07A7E:  MOVWF  x45
07A80:  MOVLB  0
07A82:  CALL   0A24
....................          
....................             SendSMS.B1 =1;
07A86:  MOVLB  D
07A88:  BSF    xD5.0
....................             fprintf(CH2,"AT+CMGS=\"");
07A8A:  MOVLW  50
07A8C:  MOVWF  FF6
07A8E:  MOVLW  06
07A90:  MOVWF  FF7
07A92:  MOVLB  0
07A94:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
07A98:  MOVLW  0A
07A9A:  MOVWF  FEA
07A9C:  MOVLW  72
07A9E:  MOVWF  FE9
07AA0:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
07AA4:  MOVLW  22
07AA6:  MOVLB  E
07AA8:  MOVWF  x46
07AAA:  MOVLB  0
07AAC:  CALL   25F0
....................             putc('\n',CH2);
07AB0:  MOVLW  0A
07AB2:  MOVLB  E
07AB4:  MOVWF  x46
07AB6:  MOVLB  0
07AB8:  CALL   25F0
....................             delay_ms(50);
07ABC:  MOVLW  32
07ABE:  MOVLB  E
07AC0:  MOVWF  x45
07AC2:  MOVLB  0
07AC4:  CALL   0A24
....................            
....................            fprintf(CH2,SMS_Massage1);
07AC8:  MOVLW  0A
07ACA:  MOVWF  FEA
07ACC:  MOVLW  81
07ACE:  MOVWF  FE9
07AD0:  CALL   6C76
....................            putc('\n',CH2);
07AD4:  MOVLW  0A
07AD6:  MOVLB  E
07AD8:  MOVWF  x46
07ADA:  MOVLB  0
07ADC:  CALL   25F0
....................            putc(26,CH2);
07AE0:  MOVLW  1A
07AE2:  MOVLB  E
07AE4:  MOVWF  x46
07AE6:  MOVLB  0
07AE8:  CALL   25F0
07AEC:  MOVLB  D
....................          }
....................       }
07AEE:  BRA    7AFA
07AF0:  MOVLB  E
....................       else
....................       {
....................          Output.B1 = 1;
07AF2:  MOVLB  D
07AF4:  BSF    xA5.0
....................          SendSMS.B1 =0;
07AF6:  BCF    xD5.0
....................          functointest_f =0;
07AF8:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if(AlarmIndicator.B2 == 1)    // Alarm Function
07AFA:  BTFSS  xB9.1
07AFC:  BRA    7C0A
....................    {
....................       if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 1))|| In.B2 == 1)    // alarm1 occure and "Lock type"
07AFE:  MOVLW  00
07B00:  BTFSC  xA1.1
07B02:  MOVLW  01
07B04:  MOVLB  E
07B06:  MOVWF  x45
07B08:  MOVLW  00
07B0A:  MOVLB  D
07B0C:  BTFSC  xA9.1
07B0E:  MOVLW  01
07B10:  MOVLB  E
07B12:  XORWF  x45,W
07B14:  SUBLW  01
07B16:  BNZ   7B1E
07B18:  MOVLB  D
07B1A:  BTFSC  xAD.1
07B1C:  BRA    7B24
07B1E:  MOVLB  D
07B20:  BTFSS  xC1.1
07B22:  BRA    7C02
....................       //if(Inputt.B2 == 0)
....................       {
....................          if(Ack.B2 == 0)
07B24:  BTFSC  xBD.1
07B26:  BRA    7C00
....................          {
....................             if(In.B2 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07B28:  BTFSC  xC1.1
07B2A:  BRA    7B3A
07B2C:  MOVF   53,W
07B2E:  SUBLW  0F
07B30:  BNZ   7B3A
....................             {
....................                TimeBase1s = 100 ;            //reload again
07B32:  MOVLW  64
07B34:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07B36:  MOVFF  54,1D
....................             }
.................... 
....................             In.B2 = 1;                                 // setbit in1
07B3A:  BSF    xC1.1
....................             if(FlashingFlag == 0)
07B3C:  BTFSC  1A.1
07B3E:  BRA    7B44
....................             {
....................                Output.B2 = 0;           //Flash output1
07B40:  BCF    xA5.1
....................             }
07B42:  BRA    7B46
....................             else
....................             {
....................                Output.B2 = 1;
07B44:  BSF    xA5.1
....................             }
.................... 
....................             if (~AutoTestFlag)
07B46:  BTFSC  1A.4
07B48:  BRA    7B66
....................             {
....................                if(OutputBoth.B2 == 0)                  //Both output
07B4A:  BTFSC  xB5.1
07B4C:  BRA    7B58
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07B4E:  BSF    F89.4
07B50:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07B52:  BSF    F89.3
07B54:  BCF    F92.3
....................                }
07B56:  BRA    7B66
....................                else
....................                {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07B58:  BTFSS  xB1.1
07B5A:  BRA    7B62
07B5C:  BSF    F89.4
07B5E:  BCF    F92.4
07B60:  BRA    7B66
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07B62:  BSF    F89.3
07B64:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
07B66:  BTFSC  xD5.1
07B68:  BRA    7C00
07B6A:  BTFSC  30.3
07B6C:  BRA    7C00
07B6E:  BTFSC  xBD.1
07B70:  BRA    7C00
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07B72:  MOVLW  5A
07B74:  MOVWF  FF6
07B76:  MOVLW  06
07B78:  MOVWF  FF7
07B7A:  MOVLB  0
07B7C:  CALL   2636
....................                putc('\n',CH2);
07B80:  MOVLW  0A
07B82:  MOVLB  E
07B84:  MOVWF  x46
07B86:  MOVLB  0
07B88:  CALL   25F0
....................                delay_ms(10);
07B8C:  MOVLW  0A
07B8E:  MOVLB  E
07B90:  MOVWF  x45
07B92:  MOVLB  0
07B94:  CALL   0A24
....................                 
....................                SendSMS.B2 =1;
07B98:  MOVLB  D
07B9A:  BSF    xD5.1
....................                fprintf(CH2,"AT+CMGS=\"");
07B9C:  MOVLW  64
07B9E:  MOVWF  FF6
07BA0:  MOVLW  06
07BA2:  MOVWF  FF7
07BA4:  MOVLB  0
07BA6:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
07BAA:  MOVLW  0A
07BAC:  MOVWF  FEA
07BAE:  MOVLW  72
07BB0:  MOVWF  FE9
07BB2:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
07BB6:  MOVLW  22
07BB8:  MOVLB  E
07BBA:  MOVWF  x46
07BBC:  MOVLB  0
07BBE:  CALL   25F0
....................                putc('\n',CH2);
07BC2:  MOVLW  0A
07BC4:  MOVLB  E
07BC6:  MOVWF  x46
07BC8:  MOVLB  0
07BCA:  CALL   25F0
....................                delay_ms(50);
07BCE:  MOVLW  32
07BD0:  MOVLB  E
07BD2:  MOVWF  x45
07BD4:  MOVLB  0
07BD6:  CALL   0A24
....................                
....................               fprintf(CH2,SMS_Massage2);
07BDA:  MOVLW  0A
07BDC:  MOVWF  FEA
07BDE:  MOVLW  A1
07BE0:  MOVWF  FE9
07BE2:  CALL   6C76
....................               putc('\n',CH2);
07BE6:  MOVLW  0A
07BE8:  MOVLB  E
07BEA:  MOVWF  x46
07BEC:  MOVLB  0
07BEE:  CALL   25F0
....................              putc(26,CH2);
07BF2:  MOVLW  1A
07BF4:  MOVLB  E
07BF6:  MOVWF  x46
07BF8:  MOVLB  0
07BFA:  CALL   25F0
07BFE:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
07C00:  BRA    7C08
....................       else if(FaultType.B2 == 1) Ack.B2 = 0;
07C02:  BTFSS  xAD.1
07C04:  BRA    7C08
07C06:  BCF    xBD.1
....................    }
07C08:  BRA    7CCE
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B2 ^ InputType.B2) == 1)
07C0A:  MOVLW  00
07C0C:  BTFSC  xA1.1
07C0E:  MOVLW  01
07C10:  MOVLB  E
07C12:  MOVWF  x45
07C14:  MOVLW  00
07C16:  MOVLB  D
07C18:  BTFSC  xA9.1
07C1A:  MOVLW  01
07C1C:  MOVLB  E
07C1E:  XORWF  x45,W
07C20:  SUBLW  01
07C22:  BNZ   7CC6
....................       {
....................          Output.B2 = 0;
07C24:  MOVLB  D
07C26:  BCF    xA5.1
....................          // SMS Sending   
....................          if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
07C28:  BTFSC  xD5.1
07C2A:  BRA    7CC2
07C2C:  BTFSC  30.3
07C2E:  BRA    7CC2
07C30:  BTFSC  xBD.1
07C32:  BRA    7CC2
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07C34:  MOVLW  6E
07C36:  MOVWF  FF6
07C38:  MOVLW  06
07C3A:  MOVWF  FF7
07C3C:  MOVLB  0
07C3E:  CALL   2636
....................             putc('\n',CH2);
07C42:  MOVLW  0A
07C44:  MOVLB  E
07C46:  MOVWF  x46
07C48:  MOVLB  0
07C4A:  CALL   25F0
....................             delay_ms(10);
07C4E:  MOVLW  0A
07C50:  MOVLB  E
07C52:  MOVWF  x45
07C54:  MOVLB  0
07C56:  CALL   0A24
....................              
....................             SendSMS.B2 =1;
07C5A:  MOVLB  D
07C5C:  BSF    xD5.1
....................             fprintf(CH2,"AT+CMGS=\"");
07C5E:  MOVLW  78
07C60:  MOVWF  FF6
07C62:  MOVLW  06
07C64:  MOVWF  FF7
07C66:  MOVLB  0
07C68:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
07C6C:  MOVLW  0A
07C6E:  MOVWF  FEA
07C70:  MOVLW  72
07C72:  MOVWF  FE9
07C74:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
07C78:  MOVLW  22
07C7A:  MOVLB  E
07C7C:  MOVWF  x46
07C7E:  MOVLB  0
07C80:  CALL   25F0
....................             putc('\n',CH2);
07C84:  MOVLW  0A
07C86:  MOVLB  E
07C88:  MOVWF  x46
07C8A:  MOVLB  0
07C8C:  CALL   25F0
....................             delay_ms(50);
07C90:  MOVLW  32
07C92:  MOVLB  E
07C94:  MOVWF  x45
07C96:  MOVLB  0
07C98:  CALL   0A24
....................             
....................            fprintf(CH2,SMS_Massage2);
07C9C:  MOVLW  0A
07C9E:  MOVWF  FEA
07CA0:  MOVLW  A1
07CA2:  MOVWF  FE9
07CA4:  CALL   6C76
....................            putc('\n',CH2);
07CA8:  MOVLW  0A
07CAA:  MOVLB  E
07CAC:  MOVWF  x46
07CAE:  MOVLB  0
07CB0:  CALL   25F0
....................           putc(26,CH2);
07CB4:  MOVLW  1A
07CB6:  MOVLB  E
07CB8:  MOVWF  x46
07CBA:  MOVLB  0
07CBC:  CALL   25F0
07CC0:  MOVLB  D
....................          }
....................       }
07CC2:  BRA    7CCE
07CC4:  MOVLB  E
....................       else
....................       {
....................          Output.B2 = 1;
07CC6:  MOVLB  D
07CC8:  BSF    xA5.1
....................          SendSMS.B2 =0;
07CCA:  BCF    xD5.1
....................          functointest_f =0;
07CCC:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if(AlarmIndicator.B3 == 1)    // Alarm Function
07CCE:  BTFSS  xB9.2
07CD0:  BRA    7DDE
....................    {
....................       if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 1))|| In.B3 == 1)    // alarm1 occure and "Lock type"
07CD2:  MOVLW  00
07CD4:  BTFSC  xA1.2
07CD6:  MOVLW  01
07CD8:  MOVLB  E
07CDA:  MOVWF  x45
07CDC:  MOVLW  00
07CDE:  MOVLB  D
07CE0:  BTFSC  xA9.2
07CE2:  MOVLW  01
07CE4:  MOVLB  E
07CE6:  XORWF  x45,W
07CE8:  SUBLW  01
07CEA:  BNZ   7CF2
07CEC:  MOVLB  D
07CEE:  BTFSC  xAD.2
07CF0:  BRA    7CF8
07CF2:  MOVLB  D
07CF4:  BTFSS  xC1.2
07CF6:  BRA    7DD6
....................       //if(Inputt.B3 == 0)
....................       {
....................          if(Ack.B3 == 0)
07CF8:  BTFSC  xBD.2
07CFA:  BRA    7DD4
....................          {
....................             if(In.B3 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07CFC:  BTFSC  xC1.2
07CFE:  BRA    7D0E
07D00:  MOVF   53,W
07D02:  SUBLW  0F
07D04:  BNZ   7D0E
....................             {
....................                TimeBase1s = 100 ;            //reload again
07D06:  MOVLW  64
07D08:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07D0A:  MOVFF  54,1D
....................             }
.................... 
....................             In.B3 = 1;                                 // setbit in1
07D0E:  BSF    xC1.2
....................             if(FlashingFlag == 0)
07D10:  BTFSC  1A.1
07D12:  BRA    7D18
....................             {
....................                Output.B3 = 0;           //Flash output1
07D14:  BCF    xA5.2
....................             }
07D16:  BRA    7D1A
....................             else
....................             {
....................                Output.B3 = 1;
07D18:  BSF    xA5.2
....................             }
.................... 
....................             if (~AutoTestFlag)
07D1A:  BTFSC  1A.4
07D1C:  BRA    7D3A
....................             {
....................                if(OutputBoth.B3 == 0)                  //Both output
07D1E:  BTFSC  xB5.2
07D20:  BRA    7D2C
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07D22:  BSF    F89.4
07D24:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07D26:  BSF    F89.3
07D28:  BCF    F92.3
....................                }
07D2A:  BRA    7D3A
....................                else
....................                {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07D2C:  BTFSS  xB1.2
07D2E:  BRA    7D36
07D30:  BSF    F89.4
07D32:  BCF    F92.4
07D34:  BRA    7D3A
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07D36:  BSF    F89.3
07D38:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
07D3A:  BTFSC  xD5.2
07D3C:  BRA    7DD4
07D3E:  BTFSC  30.3
07D40:  BRA    7DD4
07D42:  BTFSC  xBD.2
07D44:  BRA    7DD4
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07D46:  MOVLW  82
07D48:  MOVWF  FF6
07D4A:  MOVLW  06
07D4C:  MOVWF  FF7
07D4E:  MOVLB  0
07D50:  CALL   2636
....................                putc('\n',CH2);
07D54:  MOVLW  0A
07D56:  MOVLB  E
07D58:  MOVWF  x46
07D5A:  MOVLB  0
07D5C:  CALL   25F0
....................                delay_ms(10);
07D60:  MOVLW  0A
07D62:  MOVLB  E
07D64:  MOVWF  x45
07D66:  MOVLB  0
07D68:  CALL   0A24
....................                
....................                SendSMS.B3 =1;
07D6C:  MOVLB  D
07D6E:  BSF    xD5.2
....................                fprintf(CH2,"AT+CMGS=\"");
07D70:  MOVLW  8C
07D72:  MOVWF  FF6
07D74:  MOVLW  06
07D76:  MOVWF  FF7
07D78:  MOVLB  0
07D7A:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
07D7E:  MOVLW  0A
07D80:  MOVWF  FEA
07D82:  MOVLW  72
07D84:  MOVWF  FE9
07D86:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
07D8A:  MOVLW  22
07D8C:  MOVLB  E
07D8E:  MOVWF  x46
07D90:  MOVLB  0
07D92:  CALL   25F0
....................                putc('\n',CH2);
07D96:  MOVLW  0A
07D98:  MOVLB  E
07D9A:  MOVWF  x46
07D9C:  MOVLB  0
07D9E:  CALL   25F0
....................                delay_ms(50);
07DA2:  MOVLW  32
07DA4:  MOVLB  E
07DA6:  MOVWF  x45
07DA8:  MOVLB  0
07DAA:  CALL   0A24
....................               
....................               fprintf(CH2,SMS_Massage3);
07DAE:  MOVLW  0A
07DB0:  MOVWF  FEA
07DB2:  MOVLW  C1
07DB4:  MOVWF  FE9
07DB6:  CALL   6C76
....................               putc('\n',CH2);
07DBA:  MOVLW  0A
07DBC:  MOVLB  E
07DBE:  MOVWF  x46
07DC0:  MOVLB  0
07DC2:  CALL   25F0
....................              putc(26,CH2);
07DC6:  MOVLW  1A
07DC8:  MOVLB  E
07DCA:  MOVWF  x46
07DCC:  MOVLB  0
07DCE:  CALL   25F0
07DD2:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
07DD4:  BRA    7DDC
....................       else if(FaultType.B3 == 1) Ack.B3 = 0;
07DD6:  BTFSS  xAD.2
07DD8:  BRA    7DDC
07DDA:  BCF    xBD.2
....................    }
07DDC:  BRA    7EA2
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B3 ^ InputType.B3) == 1)
07DDE:  MOVLW  00
07DE0:  BTFSC  xA1.2
07DE2:  MOVLW  01
07DE4:  MOVLB  E
07DE6:  MOVWF  x45
07DE8:  MOVLW  00
07DEA:  MOVLB  D
07DEC:  BTFSC  xA9.2
07DEE:  MOVLW  01
07DF0:  MOVLB  E
07DF2:  XORWF  x45,W
07DF4:  SUBLW  01
07DF6:  BNZ   7E9A
....................       {
....................          Output.B3 = 0;
07DF8:  MOVLB  D
07DFA:  BCF    xA5.2
....................          // SMS Sending   
....................          if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
07DFC:  BTFSC  xD5.2
07DFE:  BRA    7E96
07E00:  BTFSC  30.3
07E02:  BRA    7E96
07E04:  BTFSC  xBD.2
07E06:  BRA    7E96
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07E08:  MOVLW  96
07E0A:  MOVWF  FF6
07E0C:  MOVLW  06
07E0E:  MOVWF  FF7
07E10:  MOVLB  0
07E12:  CALL   2636
....................             putc('\n',CH2);
07E16:  MOVLW  0A
07E18:  MOVLB  E
07E1A:  MOVWF  x46
07E1C:  MOVLB  0
07E1E:  CALL   25F0
....................             delay_ms(10);
07E22:  MOVLW  0A
07E24:  MOVLB  E
07E26:  MOVWF  x45
07E28:  MOVLB  0
07E2A:  CALL   0A24
....................             
....................             SendSMS.B3 =1;
07E2E:  MOVLB  D
07E30:  BSF    xD5.2
....................             fprintf(CH2,"AT+CMGS=\"");
07E32:  MOVLW  A0
07E34:  MOVWF  FF6
07E36:  MOVLW  06
07E38:  MOVWF  FF7
07E3A:  MOVLB  0
07E3C:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
07E40:  MOVLW  0A
07E42:  MOVWF  FEA
07E44:  MOVLW  72
07E46:  MOVWF  FE9
07E48:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
07E4C:  MOVLW  22
07E4E:  MOVLB  E
07E50:  MOVWF  x46
07E52:  MOVLB  0
07E54:  CALL   25F0
....................             putc('\n',CH2);
07E58:  MOVLW  0A
07E5A:  MOVLB  E
07E5C:  MOVWF  x46
07E5E:  MOVLB  0
07E60:  CALL   25F0
....................             delay_ms(50);
07E64:  MOVLW  32
07E66:  MOVLB  E
07E68:  MOVWF  x45
07E6A:  MOVLB  0
07E6C:  CALL   0A24
....................            
....................            fprintf(CH2,SMS_Massage3);
07E70:  MOVLW  0A
07E72:  MOVWF  FEA
07E74:  MOVLW  C1
07E76:  MOVWF  FE9
07E78:  CALL   6C76
....................            putc('\n',CH2);
07E7C:  MOVLW  0A
07E7E:  MOVLB  E
07E80:  MOVWF  x46
07E82:  MOVLB  0
07E84:  CALL   25F0
....................           putc(26,CH2);
07E88:  MOVLW  1A
07E8A:  MOVLB  E
07E8C:  MOVWF  x46
07E8E:  MOVLB  0
07E90:  CALL   25F0
07E94:  MOVLB  D
....................          }
....................       }
07E96:  BRA    7EA2
07E98:  MOVLB  E
....................       else
....................       {
....................          Output.B3 = 1;
07E9A:  MOVLB  D
07E9C:  BSF    xA5.2
....................          SendSMS.B3 =0;
07E9E:  BCF    xD5.2
....................          functointest_f =0;
07EA0:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if(AlarmIndicator.B4 == 1)    // Alarm Function
07EA2:  BTFSS  xB9.3
07EA4:  BRA    7FB2
....................    {
....................       if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 1))|| In.B4 == 1)    // alarm1 occure and "Lock type"
07EA6:  MOVLW  00
07EA8:  BTFSC  xA1.3
07EAA:  MOVLW  01
07EAC:  MOVLB  E
07EAE:  MOVWF  x45
07EB0:  MOVLW  00
07EB2:  MOVLB  D
07EB4:  BTFSC  xA9.3
07EB6:  MOVLW  01
07EB8:  MOVLB  E
07EBA:  XORWF  x45,W
07EBC:  SUBLW  01
07EBE:  BNZ   7EC6
07EC0:  MOVLB  D
07EC2:  BTFSC  xAD.3
07EC4:  BRA    7ECC
07EC6:  MOVLB  D
07EC8:  BTFSS  xC1.3
07ECA:  BRA    7FAA
....................       //if(Inputt.B4 == 0)
....................       {
....................          if(Ack.B4 == 0)
07ECC:  BTFSC  xBD.3
07ECE:  BRA    7FA8
....................          {
....................             if(In.B4 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
07ED0:  BTFSC  xC1.3
07ED2:  BRA    7EE2
07ED4:  MOVF   53,W
07ED6:  SUBLW  0F
07ED8:  BNZ   7EE2
....................             {
....................                TimeBase1s = 100 ;            //reload again
07EDA:  MOVLW  64
07EDC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
07EDE:  MOVFF  54,1D
....................             }
.................... 
....................             In.B4 = 1;                                 // setbit in1
07EE2:  BSF    xC1.3
....................             if(FlashingFlag == 0)
07EE4:  BTFSC  1A.1
07EE6:  BRA    7EEC
....................             {
....................                Output.B4 = 0;           //Flash output1
07EE8:  BCF    xA5.3
....................             }
07EEA:  BRA    7EEE
....................             else
....................             {
....................                Output.B4 = 1;
07EEC:  BSF    xA5.3
....................             }
.................... 
....................             if (~AutoTestFlag)
07EEE:  BTFSC  1A.4
07EF0:  BRA    7F0E
....................             {
....................                if(OutputBoth.B4 == 0)                  //Both output
07EF2:  BTFSC  xB5.3
07EF4:  BRA    7F00
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
07EF6:  BSF    F89.4
07EF8:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
07EFA:  BSF    F89.3
07EFC:  BCF    F92.3
....................                }
07EFE:  BRA    7F0E
....................                else
....................                {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
07F00:  BTFSS  xB1.3
07F02:  BRA    7F0A
07F04:  BSF    F89.4
07F06:  BCF    F92.4
07F08:  BRA    7F0E
....................                   else output_bit(Pbell,OnRelay);                          //Bell
07F0A:  BSF    F89.3
07F0C:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07F0E:  BTFSC  xD5.3
07F10:  BRA    7FA8
07F12:  BTFSC  30.3
07F14:  BRA    7FA8
07F16:  BTFSC  xBD.3
07F18:  BRA    7FA8
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
07F1A:  MOVLW  AA
07F1C:  MOVWF  FF6
07F1E:  MOVLW  06
07F20:  MOVWF  FF7
07F22:  MOVLB  0
07F24:  CALL   2636
....................                putc('\n',CH2);
07F28:  MOVLW  0A
07F2A:  MOVLB  E
07F2C:  MOVWF  x46
07F2E:  MOVLB  0
07F30:  CALL   25F0
....................                delay_ms(10);
07F34:  MOVLW  0A
07F36:  MOVLB  E
07F38:  MOVWF  x45
07F3A:  MOVLB  0
07F3C:  CALL   0A24
....................                
....................                SendSMS.B4 =1;
07F40:  MOVLB  D
07F42:  BSF    xD5.3
....................                fprintf(CH2,"AT+CMGS=\"");
07F44:  MOVLW  B4
07F46:  MOVWF  FF6
07F48:  MOVLW  06
07F4A:  MOVWF  FF7
07F4C:  MOVLB  0
07F4E:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
07F52:  MOVLW  0A
07F54:  MOVWF  FEA
07F56:  MOVLW  72
07F58:  MOVWF  FE9
07F5A:  CALL   6C76
....................             
....................                fprintf(CH2,"\"");
07F5E:  MOVLW  22
07F60:  MOVLB  E
07F62:  MOVWF  x46
07F64:  MOVLB  0
07F66:  CALL   25F0
....................                putc('\n',CH2);
07F6A:  MOVLW  0A
07F6C:  MOVLB  E
07F6E:  MOVWF  x46
07F70:  MOVLB  0
07F72:  CALL   25F0
....................                delay_ms(50);
07F76:  MOVLW  32
07F78:  MOVLB  E
07F7A:  MOVWF  x45
07F7C:  MOVLB  0
07F7E:  CALL   0A24
....................               
....................               fprintf(CH2,SMS_Massage4);
07F82:  MOVLW  0A
07F84:  MOVWF  FEA
07F86:  MOVLW  E1
07F88:  MOVWF  FE9
07F8A:  CALL   6C76
....................               putc('\n',CH2);
07F8E:  MOVLW  0A
07F90:  MOVLB  E
07F92:  MOVWF  x46
07F94:  MOVLB  0
07F96:  CALL   25F0
....................               putc(26,CH2);
07F9A:  MOVLW  1A
07F9C:  MOVLB  E
07F9E:  MOVWF  x46
07FA0:  MOVLB  0
07FA2:  CALL   25F0
07FA6:  MOVLB  D
....................             }
....................           }
....................       }
07FA8:  BRA    7FB0
....................       else if(FaultType.B4 == 1) Ack.B4 = 0;
07FAA:  BTFSS  xAD.3
07FAC:  BRA    7FB0
07FAE:  BCF    xBD.3
....................    }
07FB0:  BRA    8076
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B4 ^ InputType.B4) == 1)
07FB2:  MOVLW  00
07FB4:  BTFSC  xA1.3
07FB6:  MOVLW  01
07FB8:  MOVLB  E
07FBA:  MOVWF  x45
07FBC:  MOVLW  00
07FBE:  MOVLB  D
07FC0:  BTFSC  xA9.3
07FC2:  MOVLW  01
07FC4:  MOVLB  E
07FC6:  XORWF  x45,W
07FC8:  SUBLW  01
07FCA:  BNZ   806E
....................       {
....................          Output.B4 = 0;
07FCC:  MOVLB  D
07FCE:  BCF    xA5.3
....................          // SMS Sending   
....................          if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
07FD0:  BTFSC  xD5.3
07FD2:  BRA    806A
07FD4:  BTFSC  30.3
07FD6:  BRA    806A
07FD8:  BTFSC  xBD.3
07FDA:  BRA    806A
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
07FDC:  MOVLW  BE
07FDE:  MOVWF  FF6
07FE0:  MOVLW  06
07FE2:  MOVWF  FF7
07FE4:  MOVLB  0
07FE6:  CALL   2636
....................             putc('\n',CH2);
07FEA:  MOVLW  0A
07FEC:  MOVLB  E
07FEE:  MOVWF  x46
07FF0:  MOVLB  0
07FF2:  CALL   25F0
....................             delay_ms(10);
07FF6:  MOVLW  0A
07FF8:  MOVLB  E
07FFA:  MOVWF  x45
07FFC:  MOVLB  0
07FFE:  CALL   0A24
....................             
....................             SendSMS.B4 =1;
08002:  MOVLB  D
08004:  BSF    xD5.3
....................             fprintf(CH2,"AT+CMGS=\"");
08006:  MOVLW  C8
08008:  MOVWF  FF6
0800A:  MOVLW  06
0800C:  MOVWF  FF7
0800E:  MOVLB  0
08010:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
08014:  MOVLW  0A
08016:  MOVWF  FEA
08018:  MOVLW  72
0801A:  MOVWF  FE9
0801C:  CALL   6C76
....................          
....................             fprintf(CH2,"\"");
08020:  MOVLW  22
08022:  MOVLB  E
08024:  MOVWF  x46
08026:  MOVLB  0
08028:  CALL   25F0
....................             putc('\n',CH2);
0802C:  MOVLW  0A
0802E:  MOVLB  E
08030:  MOVWF  x46
08032:  MOVLB  0
08034:  CALL   25F0
....................             delay_ms(50);
08038:  MOVLW  32
0803A:  MOVLB  E
0803C:  MOVWF  x45
0803E:  MOVLB  0
08040:  CALL   0A24
....................            
....................            fprintf(CH2,SMS_Massage4);
08044:  MOVLW  0A
08046:  MOVWF  FEA
08048:  MOVLW  E1
0804A:  MOVWF  FE9
0804C:  CALL   6C76
....................            putc('\n',CH2);
08050:  MOVLW  0A
08052:  MOVLB  E
08054:  MOVWF  x46
08056:  MOVLB  0
08058:  CALL   25F0
....................           putc(26,CH2);
0805C:  MOVLW  1A
0805E:  MOVLB  E
08060:  MOVWF  x46
08062:  MOVLB  0
08064:  CALL   25F0
08068:  MOVLB  D
....................          }
....................       }
0806A:  BRA    8076
0806C:  MOVLB  E
....................       else
....................       {
....................          Output.B4 = 1;
0806E:  MOVLB  D
08070:  BSF    xA5.3
....................          SendSMS.B4 =0;
08072:  BCF    xD5.3
....................          functointest_f =0;
08074:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if(AlarmIndicator.B5 == 1)    // Alarm Function
08076:  BTFSS  xB9.4
08078:  BRA    8186
....................    {
....................       if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 1))|| In.B5 == 1)    // alarm1 occure and "Lock type"
0807A:  MOVLW  00
0807C:  BTFSC  xA1.4
0807E:  MOVLW  01
08080:  MOVLB  E
08082:  MOVWF  x45
08084:  MOVLW  00
08086:  MOVLB  D
08088:  BTFSC  xA9.4
0808A:  MOVLW  01
0808C:  MOVLB  E
0808E:  XORWF  x45,W
08090:  SUBLW  01
08092:  BNZ   809A
08094:  MOVLB  D
08096:  BTFSC  xAD.4
08098:  BRA    80A0
0809A:  MOVLB  D
0809C:  BTFSS  xC1.4
0809E:  BRA    817E
....................       //if(Inputt.B5 == 0)
....................       {
....................          if(Ack.B5 == 0)
080A0:  BTFSC  xBD.4
080A2:  BRA    817C
....................          {
....................             if(In.B5 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
080A4:  BTFSC  xC1.4
080A6:  BRA    80B6
080A8:  MOVF   53,W
080AA:  SUBLW  0F
080AC:  BNZ   80B6
....................             {
....................                TimeBase1s = 100 ;            //reload again
080AE:  MOVLW  64
080B0:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
080B2:  MOVFF  54,1D
....................             }
.................... 
....................             In.B5 = 1;                                 // setbit in1
080B6:  BSF    xC1.4
....................             if(FlashingFlag == 0)
080B8:  BTFSC  1A.1
080BA:  BRA    80C0
....................             {
....................                Output.B5 = 0;           //Flash output1
080BC:  BCF    xA5.4
....................             }
080BE:  BRA    80C2
....................             else
....................             {
....................                Output.B5 = 1;
080C0:  BSF    xA5.4
....................             }
.................... 
....................             if (~AutoTestFlag)
080C2:  BTFSC  1A.4
080C4:  BRA    80E2
....................             {
....................                if(OutputBoth.B5 == 0)                  //Both output
080C6:  BTFSC  xB5.4
080C8:  BRA    80D4
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
080CA:  BSF    F89.4
080CC:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
080CE:  BSF    F89.3
080D0:  BCF    F92.3
....................                }
080D2:  BRA    80E2
....................                else
....................                {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
080D4:  BTFSS  xB1.4
080D6:  BRA    80DE
080D8:  BSF    F89.4
080DA:  BCF    F92.4
080DC:  BRA    80E2
....................                   else output_bit(Pbell,OnRelay);                          //Bell
080DE:  BSF    F89.3
080E0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
080E2:  BTFSC  xD5.4
080E4:  BRA    817C
080E6:  BTFSC  30.3
080E8:  BRA    817C
080EA:  BTFSC  xBD.4
080EC:  BRA    817C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
080EE:  MOVLW  D2
080F0:  MOVWF  FF6
080F2:  MOVLW  06
080F4:  MOVWF  FF7
080F6:  MOVLB  0
080F8:  CALL   2636
....................                putc('\n',CH2);
080FC:  MOVLW  0A
080FE:  MOVLB  E
08100:  MOVWF  x46
08102:  MOVLB  0
08104:  CALL   25F0
....................                delay_ms(10);
08108:  MOVLW  0A
0810A:  MOVLB  E
0810C:  MOVWF  x45
0810E:  MOVLB  0
08110:  CALL   0A24
....................                
....................                SendSMS.B5 =1;
08114:  MOVLB  D
08116:  BSF    xD5.4
....................                fprintf(CH2,"AT+CMGS=\"");
08118:  MOVLW  DC
0811A:  MOVWF  FF6
0811C:  MOVLW  06
0811E:  MOVWF  FF7
08120:  MOVLB  0
08122:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
08126:  MOVLW  0A
08128:  MOVWF  FEA
0812A:  MOVLW  72
0812C:  MOVWF  FE9
0812E:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
08132:  MOVLW  22
08134:  MOVLB  E
08136:  MOVWF  x46
08138:  MOVLB  0
0813A:  CALL   25F0
....................                putc('\n',CH2);
0813E:  MOVLW  0A
08140:  MOVLB  E
08142:  MOVWF  x46
08144:  MOVLB  0
08146:  CALL   25F0
....................                delay_ms(50);
0814A:  MOVLW  32
0814C:  MOVLB  E
0814E:  MOVWF  x45
08150:  MOVLB  0
08152:  CALL   0A24
....................               
....................               fprintf(CH2,SMS_Massage5);
08156:  MOVLW  0B
08158:  MOVWF  FEA
0815A:  MOVLW  01
0815C:  MOVWF  FE9
0815E:  CALL   6C76
....................               putc('\n',CH2);
08162:  MOVLW  0A
08164:  MOVLB  E
08166:  MOVWF  x46
08168:  MOVLB  0
0816A:  CALL   25F0
....................              putc(26,CH2);
0816E:  MOVLW  1A
08170:  MOVLB  E
08172:  MOVWF  x46
08174:  MOVLB  0
08176:  CALL   25F0
0817A:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
0817C:  BRA    8184
....................       else if(FaultType.B5 == 1) Ack.B5 = 0;
0817E:  BTFSS  xAD.4
08180:  BRA    8184
08182:  BCF    xBD.4
....................    }
08184:  BRA    824A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B5 ^ InputType.B5) == 1)
08186:  MOVLW  00
08188:  BTFSC  xA1.4
0818A:  MOVLW  01
0818C:  MOVLB  E
0818E:  MOVWF  x45
08190:  MOVLW  00
08192:  MOVLB  D
08194:  BTFSC  xA9.4
08196:  MOVLW  01
08198:  MOVLB  E
0819A:  XORWF  x45,W
0819C:  SUBLW  01
0819E:  BNZ   8242
....................       {
....................          Output.B5 = 0;
081A0:  MOVLB  D
081A2:  BCF    xA5.4
....................          // SMS Sending   
....................          if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
081A4:  BTFSC  xD5.4
081A6:  BRA    823E
081A8:  BTFSC  30.3
081AA:  BRA    823E
081AC:  BTFSC  xBD.4
081AE:  BRA    823E
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
081B0:  MOVLW  E6
081B2:  MOVWF  FF6
081B4:  MOVLW  06
081B6:  MOVWF  FF7
081B8:  MOVLB  0
081BA:  CALL   2636
....................             putc('\n',CH2);
081BE:  MOVLW  0A
081C0:  MOVLB  E
081C2:  MOVWF  x46
081C4:  MOVLB  0
081C6:  CALL   25F0
....................             delay_ms(10);
081CA:  MOVLW  0A
081CC:  MOVLB  E
081CE:  MOVWF  x45
081D0:  MOVLB  0
081D2:  CALL   0A24
....................             
....................             SendSMS.B5 =1;
081D6:  MOVLB  D
081D8:  BSF    xD5.4
....................             fprintf(CH2,"AT+CMGS=\"");
081DA:  MOVLW  F0
081DC:  MOVWF  FF6
081DE:  MOVLW  06
081E0:  MOVWF  FF7
081E2:  MOVLB  0
081E4:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
081E8:  MOVLW  0A
081EA:  MOVWF  FEA
081EC:  MOVLW  72
081EE:  MOVWF  FE9
081F0:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
081F4:  MOVLW  22
081F6:  MOVLB  E
081F8:  MOVWF  x46
081FA:  MOVLB  0
081FC:  CALL   25F0
....................             putc('\n',CH2);
08200:  MOVLW  0A
08202:  MOVLB  E
08204:  MOVWF  x46
08206:  MOVLB  0
08208:  CALL   25F0
....................             delay_ms(50);
0820C:  MOVLW  32
0820E:  MOVLB  E
08210:  MOVWF  x45
08212:  MOVLB  0
08214:  CALL   0A24
....................            
....................            fprintf(CH2,SMS_Massage5);
08218:  MOVLW  0B
0821A:  MOVWF  FEA
0821C:  MOVLW  01
0821E:  MOVWF  FE9
08220:  CALL   6C76
....................            putc('\n',CH2);
08224:  MOVLW  0A
08226:  MOVLB  E
08228:  MOVWF  x46
0822A:  MOVLB  0
0822C:  CALL   25F0
....................           putc(26,CH2);
08230:  MOVLW  1A
08232:  MOVLB  E
08234:  MOVWF  x46
08236:  MOVLB  0
08238:  CALL   25F0
0823C:  MOVLB  D
....................          }
....................       }
0823E:  BRA    824A
08240:  MOVLB  E
....................       else
....................       {
....................          Output.B5 = 1;
08242:  MOVLB  D
08244:  BSF    xA5.4
....................          SendSMS.B5 =0;
08246:  BCF    xD5.4
....................          functointest_f =0;
08248:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if(AlarmIndicator.B6 == 1)    // Alarm Function
0824A:  BTFSS  xB9.5
0824C:  BRA    835A
....................    {
....................       if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 1))|| In.B6 == 1)    // alarm1 occure and "Lock type"
0824E:  MOVLW  00
08250:  BTFSC  xA1.5
08252:  MOVLW  01
08254:  MOVLB  E
08256:  MOVWF  x45
08258:  MOVLW  00
0825A:  MOVLB  D
0825C:  BTFSC  xA9.5
0825E:  MOVLW  01
08260:  MOVLB  E
08262:  XORWF  x45,W
08264:  SUBLW  01
08266:  BNZ   826E
08268:  MOVLB  D
0826A:  BTFSC  xAD.5
0826C:  BRA    8274
0826E:  MOVLB  D
08270:  BTFSS  xC1.5
08272:  BRA    8352
....................       //if(Inputt.B6 == 0)
....................       {
....................          if(Ack.B6 == 0)
08274:  BTFSC  xBD.5
08276:  BRA    8350
....................          {
....................             if(In.B6 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08278:  BTFSC  xC1.5
0827A:  BRA    828A
0827C:  MOVF   53,W
0827E:  SUBLW  0F
08280:  BNZ   828A
....................             {
....................                TimeBase1s = 100 ;            //reload again
08282:  MOVLW  64
08284:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08286:  MOVFF  54,1D
....................             }
.................... 
....................             In.B6 = 1;                                 // setbit in1
0828A:  BSF    xC1.5
....................             if(FlashingFlag == 0)
0828C:  BTFSC  1A.1
0828E:  BRA    8294
....................             {
....................                Output.B6 = 0;           //Flash output1
08290:  BCF    xA5.5
....................             }
08292:  BRA    8296
....................             else
....................             {
....................                Output.B6 = 1;
08294:  BSF    xA5.5
....................             }
.................... 
....................             if (~AutoTestFlag)
08296:  BTFSC  1A.4
08298:  BRA    82B6
....................             {
....................                if(OutputBoth.B6 == 0)                  //Both output
0829A:  BTFSC  xB5.5
0829C:  BRA    82A8
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0829E:  BSF    F89.4
082A0:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
082A2:  BSF    F89.3
082A4:  BCF    F92.3
....................                }
082A6:  BRA    82B6
....................                else
....................                {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
082A8:  BTFSS  xB1.5
082AA:  BRA    82B2
082AC:  BSF    F89.4
082AE:  BCF    F92.4
082B0:  BRA    82B6
....................                   else output_bit(Pbell,OnRelay);                          //Bell
082B2:  BSF    F89.3
082B4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
082B6:  BTFSC  xD5.5
082B8:  BRA    8350
082BA:  BTFSC  30.3
082BC:  BRA    8350
082BE:  BTFSC  xBD.5
082C0:  BRA    8350
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
082C2:  MOVLW  FA
082C4:  MOVWF  FF6
082C6:  MOVLW  06
082C8:  MOVWF  FF7
082CA:  MOVLB  0
082CC:  CALL   2636
....................                putc('\n',CH2);
082D0:  MOVLW  0A
082D2:  MOVLB  E
082D4:  MOVWF  x46
082D6:  MOVLB  0
082D8:  CALL   25F0
....................                delay_ms(10);
082DC:  MOVLW  0A
082DE:  MOVLB  E
082E0:  MOVWF  x45
082E2:  MOVLB  0
082E4:  CALL   0A24
....................                
....................                SendSMS.B6 =1;
082E8:  MOVLB  D
082EA:  BSF    xD5.5
....................                fprintf(CH2,"AT+CMGS=\"");
082EC:  MOVLW  04
082EE:  MOVWF  FF6
082F0:  MOVLW  07
082F2:  MOVWF  FF7
082F4:  MOVLB  0
082F6:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
082FA:  MOVLW  0A
082FC:  MOVWF  FEA
082FE:  MOVLW  72
08300:  MOVWF  FE9
08302:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
08306:  MOVLW  22
08308:  MOVLB  E
0830A:  MOVWF  x46
0830C:  MOVLB  0
0830E:  CALL   25F0
....................                putc('\n',CH2);
08312:  MOVLW  0A
08314:  MOVLB  E
08316:  MOVWF  x46
08318:  MOVLB  0
0831A:  CALL   25F0
....................                delay_ms(50);
0831E:  MOVLW  32
08320:  MOVLB  E
08322:  MOVWF  x45
08324:  MOVLB  0
08326:  CALL   0A24
....................               
....................               fprintf(CH2,SMS_Massage6);
0832A:  MOVLW  0B
0832C:  MOVWF  FEA
0832E:  MOVLW  21
08330:  MOVWF  FE9
08332:  CALL   6C76
....................               putc('\n',CH2);
08336:  MOVLW  0A
08338:  MOVLB  E
0833A:  MOVWF  x46
0833C:  MOVLB  0
0833E:  CALL   25F0
....................               putc(26,CH2);
08342:  MOVLW  1A
08344:  MOVLB  E
08346:  MOVWF  x46
08348:  MOVLB  0
0834A:  CALL   25F0
0834E:  MOVLB  D
....................             }
....................           }
....................       }
08350:  BRA    8358
....................       else if(FaultType.B6 == 1) Ack.B6 = 0;
08352:  BTFSS  xAD.5
08354:  BRA    8358
08356:  BCF    xBD.5
....................    }
08358:  BRA    841E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B6 ^ InputType.B6) == 1)
0835A:  MOVLW  00
0835C:  BTFSC  xA1.5
0835E:  MOVLW  01
08360:  MOVLB  E
08362:  MOVWF  x45
08364:  MOVLW  00
08366:  MOVLB  D
08368:  BTFSC  xA9.5
0836A:  MOVLW  01
0836C:  MOVLB  E
0836E:  XORWF  x45,W
08370:  SUBLW  01
08372:  BNZ   8416
....................       {
....................          Output.B6 = 0;
08374:  MOVLB  D
08376:  BCF    xA5.5
....................          // SMS Sending   
....................          if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
08378:  BTFSC  xD5.5
0837A:  BRA    8412
0837C:  BTFSC  30.3
0837E:  BRA    8412
08380:  BTFSC  xBD.5
08382:  BRA    8412
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08384:  MOVLW  0E
08386:  MOVWF  FF6
08388:  MOVLW  07
0838A:  MOVWF  FF7
0838C:  MOVLB  0
0838E:  CALL   2636
....................             putc('\n',CH2);
08392:  MOVLW  0A
08394:  MOVLB  E
08396:  MOVWF  x46
08398:  MOVLB  0
0839A:  CALL   25F0
....................             delay_ms(10);
0839E:  MOVLW  0A
083A0:  MOVLB  E
083A2:  MOVWF  x45
083A4:  MOVLB  0
083A6:  CALL   0A24
....................             
....................             SendSMS.B6 =1;
083AA:  MOVLB  D
083AC:  BSF    xD5.5
....................             fprintf(CH2,"AT+CMGS=\"");
083AE:  MOVLW  18
083B0:  MOVWF  FF6
083B2:  MOVLW  07
083B4:  MOVWF  FF7
083B6:  MOVLB  0
083B8:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
083BC:  MOVLW  0A
083BE:  MOVWF  FEA
083C0:  MOVLW  72
083C2:  MOVWF  FE9
083C4:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
083C8:  MOVLW  22
083CA:  MOVLB  E
083CC:  MOVWF  x46
083CE:  MOVLB  0
083D0:  CALL   25F0
....................             putc('\n',CH2);
083D4:  MOVLW  0A
083D6:  MOVLB  E
083D8:  MOVWF  x46
083DA:  MOVLB  0
083DC:  CALL   25F0
....................             delay_ms(50);
083E0:  MOVLW  32
083E2:  MOVLB  E
083E4:  MOVWF  x45
083E6:  MOVLB  0
083E8:  CALL   0A24
....................            
....................            fprintf(CH2,SMS_Massage6);
083EC:  MOVLW  0B
083EE:  MOVWF  FEA
083F0:  MOVLW  21
083F2:  MOVWF  FE9
083F4:  CALL   6C76
....................            putc('\n',CH2);
083F8:  MOVLW  0A
083FA:  MOVLB  E
083FC:  MOVWF  x46
083FE:  MOVLB  0
08400:  CALL   25F0
....................            putc(26,CH2);
08404:  MOVLW  1A
08406:  MOVLB  E
08408:  MOVWF  x46
0840A:  MOVLB  0
0840C:  CALL   25F0
08410:  MOVLB  D
....................          }
....................       }
08412:  BRA    841E
08414:  MOVLB  E
....................       else
....................       {
....................          Output.B6 = 1;
08416:  MOVLB  D
08418:  BSF    xA5.5
....................          SendSMS.B6 =0;
0841A:  BCF    xD5.5
....................          functointest_f =0;
0841C:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if(AlarmIndicator.B7 == 1)    // Alarm Function
0841E:  BTFSS  xB9.6
08420:  BRA    852E
....................    {
....................       if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 1))|| In.B7 == 1)    // alarm1 occure and "Lock type"
08422:  MOVLW  00
08424:  BTFSC  xA1.6
08426:  MOVLW  01
08428:  MOVLB  E
0842A:  MOVWF  x45
0842C:  MOVLW  00
0842E:  MOVLB  D
08430:  BTFSC  xA9.6
08432:  MOVLW  01
08434:  MOVLB  E
08436:  XORWF  x45,W
08438:  SUBLW  01
0843A:  BNZ   8442
0843C:  MOVLB  D
0843E:  BTFSC  xAD.6
08440:  BRA    8448
08442:  MOVLB  D
08444:  BTFSS  xC1.6
08446:  BRA    8526
....................       //if(Inputt.B7 == 0)
....................       {
....................          if(Ack.B7 == 0)
08448:  BTFSC  xBD.6
0844A:  BRA    8524
....................          {
....................             if(In.B7 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
0844C:  BTFSC  xC1.6
0844E:  BRA    845E
08450:  MOVF   53,W
08452:  SUBLW  0F
08454:  BNZ   845E
....................             {
....................                TimeBase1s = 100 ;            //reload again
08456:  MOVLW  64
08458:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0845A:  MOVFF  54,1D
....................             }
.................... 
....................             In.B7 = 1;                                 // setbit in1
0845E:  BSF    xC1.6
....................             if(FlashingFlag == 0)
08460:  BTFSC  1A.1
08462:  BRA    8468
....................             {
....................                Output.B7 = 0;           //Flash output1
08464:  BCF    xA5.6
....................             }
08466:  BRA    846A
....................             else
....................             {
....................                Output.B7 = 1;
08468:  BSF    xA5.6
....................             }
.................... 
....................             if (~AutoTestFlag)
0846A:  BTFSC  1A.4
0846C:  BRA    848A
....................             {
....................                if(OutputBoth.B7 == 0)                  //Both output
0846E:  BTFSC  xB5.6
08470:  BRA    847C
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08472:  BSF    F89.4
08474:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08476:  BSF    F89.3
08478:  BCF    F92.3
....................                }
0847A:  BRA    848A
....................                else
....................                {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0847C:  BTFSS  xB1.6
0847E:  BRA    8486
08480:  BSF    F89.4
08482:  BCF    F92.4
08484:  BRA    848A
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08486:  BSF    F89.3
08488:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0848A:  BTFSC  xD5.6
0848C:  BRA    8524
0848E:  BTFSC  30.3
08490:  BRA    8524
08492:  BTFSC  xBD.6
08494:  BRA    8524
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08496:  MOVLW  22
08498:  MOVWF  FF6
0849A:  MOVLW  07
0849C:  MOVWF  FF7
0849E:  MOVLB  0
084A0:  CALL   2636
....................                putc('\n',CH2);
084A4:  MOVLW  0A
084A6:  MOVLB  E
084A8:  MOVWF  x46
084AA:  MOVLB  0
084AC:  CALL   25F0
....................                delay_ms(10);
084B0:  MOVLW  0A
084B2:  MOVLB  E
084B4:  MOVWF  x45
084B6:  MOVLB  0
084B8:  CALL   0A24
....................                
....................                SendSMS.B7 =1;
084BC:  MOVLB  D
084BE:  BSF    xD5.6
....................                fprintf(CH2,"AT+CMGS=\"");
084C0:  MOVLW  2C
084C2:  MOVWF  FF6
084C4:  MOVLW  07
084C6:  MOVWF  FF7
084C8:  MOVLB  0
084CA:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
084CE:  MOVLW  0A
084D0:  MOVWF  FEA
084D2:  MOVLW  72
084D4:  MOVWF  FE9
084D6:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
084DA:  MOVLW  22
084DC:  MOVLB  E
084DE:  MOVWF  x46
084E0:  MOVLB  0
084E2:  CALL   25F0
....................                putc('\n',CH2);
084E6:  MOVLW  0A
084E8:  MOVLB  E
084EA:  MOVWF  x46
084EC:  MOVLB  0
084EE:  CALL   25F0
....................                delay_ms(50);
084F2:  MOVLW  32
084F4:  MOVLB  E
084F6:  MOVWF  x45
084F8:  MOVLB  0
084FA:  CALL   0A24
....................               
....................               fprintf(CH2,SMS_Massage7);  
084FE:  MOVLW  0B
08500:  MOVWF  FEA
08502:  MOVLW  41
08504:  MOVWF  FE9
08506:  CALL   6C76
....................               putc('\n',CH2);
0850A:  MOVLW  0A
0850C:  MOVLB  E
0850E:  MOVWF  x46
08510:  MOVLB  0
08512:  CALL   25F0
....................              putc(26,CH2);
08516:  MOVLW  1A
08518:  MOVLB  E
0851A:  MOVWF  x46
0851C:  MOVLB  0
0851E:  CALL   25F0
08522:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
08524:  BRA    852C
....................       else if(FaultType.B7 == 1) Ack.B7 = 0;
08526:  BTFSS  xAD.6
08528:  BRA    852C
0852A:  BCF    xBD.6
....................    }
0852C:  BRA    85F2
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B7 ^ InputType.B7) == 1)
0852E:  MOVLW  00
08530:  BTFSC  xA1.6
08532:  MOVLW  01
08534:  MOVLB  E
08536:  MOVWF  x45
08538:  MOVLW  00
0853A:  MOVLB  D
0853C:  BTFSC  xA9.6
0853E:  MOVLW  01
08540:  MOVLB  E
08542:  XORWF  x45,W
08544:  SUBLW  01
08546:  BNZ   85EA
....................       {
....................          Output.B7 = 0;
08548:  MOVLB  D
0854A:  BCF    xA5.6
....................          // SMS Sending   
....................          if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0854C:  BTFSC  xD5.6
0854E:  BRA    85E6
08550:  BTFSC  30.3
08552:  BRA    85E6
08554:  BTFSC  xBD.6
08556:  BRA    85E6
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08558:  MOVLW  36
0855A:  MOVWF  FF6
0855C:  MOVLW  07
0855E:  MOVWF  FF7
08560:  MOVLB  0
08562:  CALL   2636
....................             putc('\n',CH2);
08566:  MOVLW  0A
08568:  MOVLB  E
0856A:  MOVWF  x46
0856C:  MOVLB  0
0856E:  CALL   25F0
....................             delay_ms(10);
08572:  MOVLW  0A
08574:  MOVLB  E
08576:  MOVWF  x45
08578:  MOVLB  0
0857A:  CALL   0A24
....................             
....................             SendSMS.B7 =1;
0857E:  MOVLB  D
08580:  BSF    xD5.6
....................             fprintf(CH2,"AT+CMGS=\"");
08582:  MOVLW  40
08584:  MOVWF  FF6
08586:  MOVLW  07
08588:  MOVWF  FF7
0858A:  MOVLB  0
0858C:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
08590:  MOVLW  0A
08592:  MOVWF  FEA
08594:  MOVLW  72
08596:  MOVWF  FE9
08598:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
0859C:  MOVLW  22
0859E:  MOVLB  E
085A0:  MOVWF  x46
085A2:  MOVLB  0
085A4:  CALL   25F0
....................             putc('\n',CH2);
085A8:  MOVLW  0A
085AA:  MOVLB  E
085AC:  MOVWF  x46
085AE:  MOVLB  0
085B0:  CALL   25F0
....................             delay_ms(50);
085B4:  MOVLW  32
085B6:  MOVLB  E
085B8:  MOVWF  x45
085BA:  MOVLB  0
085BC:  CALL   0A24
....................            
....................            fprintf(CH2,SMS_Massage7);  
085C0:  MOVLW  0B
085C2:  MOVWF  FEA
085C4:  MOVLW  41
085C6:  MOVWF  FE9
085C8:  CALL   6C76
....................            putc('\n',CH2);
085CC:  MOVLW  0A
085CE:  MOVLB  E
085D0:  MOVWF  x46
085D2:  MOVLB  0
085D4:  CALL   25F0
....................           putc(26,CH2);
085D8:  MOVLW  1A
085DA:  MOVLB  E
085DC:  MOVWF  x46
085DE:  MOVLB  0
085E0:  CALL   25F0
085E4:  MOVLB  D
....................          }
....................       }
085E6:  BRA    85F2
085E8:  MOVLB  E
....................       else
....................       {
....................          Output.B7 = 1;
085EA:  MOVLB  D
085EC:  BSF    xA5.6
....................          SendSMS.B7 =0;
085EE:  BCF    xD5.6
....................          functointest_f =0;
085F0:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if(AlarmIndicator.B8 == 1)    // Alarm Function
085F2:  BTFSS  xB9.7
085F4:  BRA    8702
....................    {
....................       if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 1))|| In.B8 == 1)    // alarm1 occure and "Lock type"
085F6:  MOVLW  00
085F8:  BTFSC  xA1.7
085FA:  MOVLW  01
085FC:  MOVLB  E
085FE:  MOVWF  x45
08600:  MOVLW  00
08602:  MOVLB  D
08604:  BTFSC  xA9.7
08606:  MOVLW  01
08608:  MOVLB  E
0860A:  XORWF  x45,W
0860C:  SUBLW  01
0860E:  BNZ   8616
08610:  MOVLB  D
08612:  BTFSC  xAD.7
08614:  BRA    861C
08616:  MOVLB  D
08618:  BTFSS  xC1.7
0861A:  BRA    86FA
....................       //if(Inputt.B8 == 0)
....................       {
....................          if(Ack.B8 == 0)
0861C:  BTFSC  xBD.7
0861E:  BRA    86F8
....................          {
....................             if(In.B8 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08620:  BTFSC  xC1.7
08622:  BRA    8632
08624:  MOVF   53,W
08626:  SUBLW  0F
08628:  BNZ   8632
....................             {
....................                TimeBase1s = 100 ;            //reload again
0862A:  MOVLW  64
0862C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
0862E:  MOVFF  54,1D
....................             }
.................... 
....................             In.B8 = 1;                                 // setbit in1
08632:  BSF    xC1.7
....................             if(FlashingFlag == 0)
08634:  BTFSC  1A.1
08636:  BRA    863C
....................             {
....................                Output.B8 = 0;           //Flash output1
08638:  BCF    xA5.7
....................             }
0863A:  BRA    863E
....................             else
....................             {
....................                Output.B8 = 1;
0863C:  BSF    xA5.7
....................             }
.................... 
....................             if (~AutoTestFlag)
0863E:  BTFSC  1A.4
08640:  BRA    865E
....................             {
....................                if(OutputBoth.B8 == 0)                  //Both output
08642:  BTFSC  xB5.7
08644:  BRA    8650
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08646:  BSF    F89.4
08648:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0864A:  BSF    F89.3
0864C:  BCF    F92.3
....................                }
0864E:  BRA    865E
....................                else
....................                {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08650:  BTFSS  xB1.7
08652:  BRA    865A
08654:  BSF    F89.4
08656:  BCF    F92.4
08658:  BRA    865E
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0865A:  BSF    F89.3
0865C:  BCF    F92.3
....................                }
....................             }
....................                   // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
0865E:  BTFSC  xD5.7
08660:  BRA    86F8
08662:  BTFSC  30.3
08664:  BRA    86F8
08666:  BTFSC  xBD.7
08668:  BRA    86F8
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0866A:  MOVLW  4A
0866C:  MOVWF  FF6
0866E:  MOVLW  07
08670:  MOVWF  FF7
08672:  MOVLB  0
08674:  CALL   2636
....................             putc('\n',CH2);
08678:  MOVLW  0A
0867A:  MOVLB  E
0867C:  MOVWF  x46
0867E:  MOVLB  0
08680:  CALL   25F0
....................             delay_ms(10);
08684:  MOVLW  0A
08686:  MOVLB  E
08688:  MOVWF  x45
0868A:  MOVLB  0
0868C:  CALL   0A24
....................             
....................             SendSMS.B8 =1;
08690:  MOVLB  D
08692:  BSF    xD5.7
....................             fprintf(CH2,"AT+CMGS=\"");
08694:  MOVLW  54
08696:  MOVWF  FF6
08698:  MOVLW  07
0869A:  MOVWF  FF7
0869C:  MOVLB  0
0869E:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
086A2:  MOVLW  0A
086A4:  MOVWF  FEA
086A6:  MOVLW  72
086A8:  MOVWF  FE9
086AA:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
086AE:  MOVLW  22
086B0:  MOVLB  E
086B2:  MOVWF  x46
086B4:  MOVLB  0
086B6:  CALL   25F0
....................             putc('\n',CH2);
086BA:  MOVLW  0A
086BC:  MOVLB  E
086BE:  MOVWF  x46
086C0:  MOVLB  0
086C2:  CALL   25F0
....................             delay_ms(50);
086C6:  MOVLW  32
086C8:  MOVLB  E
086CA:  MOVWF  x45
086CC:  MOVLB  0
086CE:  CALL   0A24
....................            
....................            printf(SMS_Massage8);  
086D2:  MOVLW  0B
086D4:  MOVWF  FEA
086D6:  MOVLW  61
086D8:  MOVWF  FE9
086DA:  CALL   6C76
....................            putc('\n',CH2);
086DE:  MOVLW  0A
086E0:  MOVLB  E
086E2:  MOVWF  x46
086E4:  MOVLB  0
086E6:  CALL   25F0
....................           putc(26,CH2);
086EA:  MOVLW  1A
086EC:  MOVLB  E
086EE:  MOVWF  x46
086F0:  MOVLB  0
086F2:  CALL   25F0
086F6:  MOVLB  D
....................          }
....................        }
.................... 
....................       }
086F8:  BRA    8700
....................       else if(FaultType.B8 == 1) Ack.B8 = 0;
086FA:  BTFSS  xAD.7
086FC:  BRA    8700
086FE:  BCF    xBD.7
....................    }
08700:  BRA    87C6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B8 ^ InputType.B8) == 1)
08702:  MOVLW  00
08704:  BTFSC  xA1.7
08706:  MOVLW  01
08708:  MOVLB  E
0870A:  MOVWF  x45
0870C:  MOVLW  00
0870E:  MOVLB  D
08710:  BTFSC  xA9.7
08712:  MOVLW  01
08714:  MOVLB  E
08716:  XORWF  x45,W
08718:  SUBLW  01
0871A:  BNZ   87BE
....................       {
....................          Output.B8 = 0;
0871C:  MOVLB  D
0871E:  BCF    xA5.7
....................                // SMS Sending   
....................          if((SendSMS.B8 ==0)&& (functointest_f ==0) && (Ack.B8 ==0))
08720:  BTFSC  xD5.7
08722:  BRA    87BA
08724:  BTFSC  30.3
08726:  BRA    87BA
08728:  BTFSC  xBD.7
0872A:  BRA    87BA
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
0872C:  MOVLW  5E
0872E:  MOVWF  FF6
08730:  MOVLW  07
08732:  MOVWF  FF7
08734:  MOVLB  0
08736:  CALL   2636
....................             putc('\n',CH2);
0873A:  MOVLW  0A
0873C:  MOVLB  E
0873E:  MOVWF  x46
08740:  MOVLB  0
08742:  CALL   25F0
....................             delay_ms(10);
08746:  MOVLW  0A
08748:  MOVLB  E
0874A:  MOVWF  x45
0874C:  MOVLB  0
0874E:  CALL   0A24
....................             
....................             SendSMS.B8 =1;
08752:  MOVLB  D
08754:  BSF    xD5.7
....................             fprintf(CH2,"AT+CMGS=\"");
08756:  MOVLW  68
08758:  MOVWF  FF6
0875A:  MOVLW  07
0875C:  MOVWF  FF7
0875E:  MOVLB  0
08760:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
08764:  MOVLW  0A
08766:  MOVWF  FEA
08768:  MOVLW  72
0876A:  MOVWF  FE9
0876C:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
08770:  MOVLW  22
08772:  MOVLB  E
08774:  MOVWF  x46
08776:  MOVLB  0
08778:  CALL   25F0
....................             putc('\n',CH2);
0877C:  MOVLW  0A
0877E:  MOVLB  E
08780:  MOVWF  x46
08782:  MOVLB  0
08784:  CALL   25F0
....................             delay_ms(50);
08788:  MOVLW  32
0878A:  MOVLB  E
0878C:  MOVWF  x45
0878E:  MOVLB  0
08790:  CALL   0A24
....................            
....................            printf(SMS_Massage8);  
08794:  MOVLW  0B
08796:  MOVWF  FEA
08798:  MOVLW  61
0879A:  MOVWF  FE9
0879C:  CALL   6C76
....................            putc('\n',CH2);
087A0:  MOVLW  0A
087A2:  MOVLB  E
087A4:  MOVWF  x46
087A6:  MOVLB  0
087A8:  CALL   25F0
....................           putc(26,CH2);
087AC:  MOVLW  1A
087AE:  MOVLB  E
087B0:  MOVWF  x46
087B2:  MOVLB  0
087B4:  CALL   25F0
087B8:  MOVLB  D
....................          }
....................       }
087BA:  BRA    87C6
087BC:  MOVLB  E
....................       else
....................       {
....................          Output.B8 = 1;
087BE:  MOVLB  D
087C0:  BSF    xA5.7
....................          SendSMS.B8 =0;
087C2:  BCF    xD5.7
....................          functointest_f =0;
087C4:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if(AlarmIndicator.B9 == 1)    // Alarm Function
087C6:  BTFSS  xBA.0
087C8:  BRA    88D6
....................    {
....................       if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 1))|| In.B9 == 1)    // alarm1 occure and "Lock type"
087CA:  MOVLW  00
087CC:  BTFSC  xA2.0
087CE:  MOVLW  01
087D0:  MOVLB  E
087D2:  MOVWF  x45
087D4:  MOVLW  00
087D6:  MOVLB  D
087D8:  BTFSC  xAA.0
087DA:  MOVLW  01
087DC:  MOVLB  E
087DE:  XORWF  x45,W
087E0:  SUBLW  01
087E2:  BNZ   87EA
087E4:  MOVLB  D
087E6:  BTFSC  xAE.0
087E8:  BRA    87F0
087EA:  MOVLB  D
087EC:  BTFSS  xC2.0
087EE:  BRA    88CE
....................       //if(Inputt.B9 == 0)
....................       {
....................          if(Ack.B9 == 0)
087F0:  BTFSC  xBE.0
087F2:  BRA    88CC
....................          {
....................             if(In.B9 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
087F4:  BTFSC  xC2.0
087F6:  BRA    8806
087F8:  MOVF   53,W
087FA:  SUBLW  0F
087FC:  BNZ   8806
....................             {
....................                TimeBase1s = 100 ;            //reload again
087FE:  MOVLW  64
08800:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08802:  MOVFF  54,1D
....................             }
.................... 
....................             In.B9 = 1;                                 // setbit in1
08806:  BSF    xC2.0
....................             if(FlashingFlag == 0)
08808:  BTFSC  1A.1
0880A:  BRA    8810
....................             {
....................                Output.B9 = 0;           //Flash output1
0880C:  BCF    xA6.0
....................             }
0880E:  BRA    8812
....................             else
....................             {
....................                Output.B9 = 1;
08810:  BSF    xA6.0
....................             }
.................... 
....................             if (~AutoTestFlag)
08812:  BTFSC  1A.4
08814:  BRA    8832
....................             {
....................                if(OutputBoth.B9 == 0)                  //Both output
08816:  BTFSC  xB6.0
08818:  BRA    8824
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0881A:  BSF    F89.4
0881C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0881E:  BSF    F89.3
08820:  BCF    F92.3
....................                }
08822:  BRA    8832
....................                else
....................                {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08824:  BTFSS  xB2.0
08826:  BRA    882E
08828:  BSF    F89.4
0882A:  BCF    F92.4
0882C:  BRA    8832
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0882E:  BSF    F89.3
08830:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
08832:  BTFSC  xD6.0
08834:  BRA    88CC
08836:  BTFSC  30.3
08838:  BRA    88CC
0883A:  BTFSC  xBE.0
0883C:  BRA    88CC
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0883E:  MOVLW  72
08840:  MOVWF  FF6
08842:  MOVLW  07
08844:  MOVWF  FF7
08846:  MOVLB  0
08848:  CALL   2636
....................                putc('\n',CH2);
0884C:  MOVLW  0A
0884E:  MOVLB  E
08850:  MOVWF  x46
08852:  MOVLB  0
08854:  CALL   25F0
....................                delay_ms(10);
08858:  MOVLW  0A
0885A:  MOVLB  E
0885C:  MOVWF  x45
0885E:  MOVLB  0
08860:  CALL   0A24
....................                
....................                SendSMS.B9 =1;
08864:  MOVLB  D
08866:  BSF    xD6.0
....................                fprintf(CH2,"AT+CMGS=\"");
08868:  MOVLW  7C
0886A:  MOVWF  FF6
0886C:  MOVLW  07
0886E:  MOVWF  FF7
08870:  MOVLB  0
08872:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
08876:  MOVLW  0A
08878:  MOVWF  FEA
0887A:  MOVLW  72
0887C:  MOVWF  FE9
0887E:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
08882:  MOVLW  22
08884:  MOVLB  E
08886:  MOVWF  x46
08888:  MOVLB  0
0888A:  CALL   25F0
....................                putc('\n',CH2);
0888E:  MOVLW  0A
08890:  MOVLB  E
08892:  MOVWF  x46
08894:  MOVLB  0
08896:  CALL   25F0
....................                delay_ms(50);
0889A:  MOVLW  32
0889C:  MOVLB  E
0889E:  MOVWF  x45
088A0:  MOVLB  0
088A2:  CALL   0A24
....................               
....................               printf(SMS_Massage9);  
088A6:  MOVLW  0B
088A8:  MOVWF  FEA
088AA:  MOVLW  81
088AC:  MOVWF  FE9
088AE:  CALL   6C76
....................               putc('\n',CH2);
088B2:  MOVLW  0A
088B4:  MOVLB  E
088B6:  MOVWF  x46
088B8:  MOVLB  0
088BA:  CALL   25F0
....................               putc(26,CH2);
088BE:  MOVLW  1A
088C0:  MOVLB  E
088C2:  MOVWF  x46
088C4:  MOVLB  0
088C6:  CALL   25F0
088CA:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
088CC:  BRA    88D4
....................       else if(FaultType.B9 == 1) Ack.B9 = 0;
088CE:  BTFSS  xAE.0
088D0:  BRA    88D4
088D2:  BCF    xBE.0
....................    }
088D4:  BRA    899A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B9 ^ InputType.B9) == 1)
088D6:  MOVLW  00
088D8:  BTFSC  xA2.0
088DA:  MOVLW  01
088DC:  MOVLB  E
088DE:  MOVWF  x45
088E0:  MOVLW  00
088E2:  MOVLB  D
088E4:  BTFSC  xAA.0
088E6:  MOVLW  01
088E8:  MOVLB  E
088EA:  XORWF  x45,W
088EC:  SUBLW  01
088EE:  BNZ   8992
....................       {
....................          Output.B9 = 0;
088F0:  MOVLB  D
088F2:  BCF    xA6.0
....................          // SMS Sending   
....................          if((SendSMS.B9 ==0)&& (functointest_f ==0) && (Ack.B9 ==0))
088F4:  BTFSC  xD6.0
088F6:  BRA    898E
088F8:  BTFSC  30.3
088FA:  BRA    898E
088FC:  BTFSC  xBE.0
088FE:  BRA    898E
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08900:  MOVLW  86
08902:  MOVWF  FF6
08904:  MOVLW  07
08906:  MOVWF  FF7
08908:  MOVLB  0
0890A:  CALL   2636
....................             putc('\n',CH2);
0890E:  MOVLW  0A
08910:  MOVLB  E
08912:  MOVWF  x46
08914:  MOVLB  0
08916:  CALL   25F0
....................             delay_ms(10);
0891A:  MOVLW  0A
0891C:  MOVLB  E
0891E:  MOVWF  x45
08920:  MOVLB  0
08922:  CALL   0A24
....................             
....................             SendSMS.B9 =1;
08926:  MOVLB  D
08928:  BSF    xD6.0
....................             fprintf(CH2,"AT+CMGS=\"");
0892A:  MOVLW  90
0892C:  MOVWF  FF6
0892E:  MOVLW  07
08930:  MOVWF  FF7
08932:  MOVLB  0
08934:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
08938:  MOVLW  0A
0893A:  MOVWF  FEA
0893C:  MOVLW  72
0893E:  MOVWF  FE9
08940:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
08944:  MOVLW  22
08946:  MOVLB  E
08948:  MOVWF  x46
0894A:  MOVLB  0
0894C:  CALL   25F0
....................             putc('\n',CH2);
08950:  MOVLW  0A
08952:  MOVLB  E
08954:  MOVWF  x46
08956:  MOVLB  0
08958:  CALL   25F0
....................             delay_ms(50);
0895C:  MOVLW  32
0895E:  MOVLB  E
08960:  MOVWF  x45
08962:  MOVLB  0
08964:  CALL   0A24
....................            
....................            printf(SMS_Massage9);  
08968:  MOVLW  0B
0896A:  MOVWF  FEA
0896C:  MOVLW  81
0896E:  MOVWF  FE9
08970:  CALL   6C76
....................            putc('\n',CH2);
08974:  MOVLW  0A
08976:  MOVLB  E
08978:  MOVWF  x46
0897A:  MOVLB  0
0897C:  CALL   25F0
....................            putc(26,CH2);
08980:  MOVLW  1A
08982:  MOVLB  E
08984:  MOVWF  x46
08986:  MOVLB  0
08988:  CALL   25F0
0898C:  MOVLB  D
....................          }
....................       }
0898E:  BRA    899A
08990:  MOVLB  E
....................       else
....................       {
....................          Output.B9 = 1;
08992:  MOVLB  D
08994:  BSF    xA6.0
....................          SendSMS.B9 =0;
08996:  BCF    xD6.0
....................          functointest_f =0;
08998:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if(AlarmIndicator.B10 == 1)    // Alarm Function
0899A:  BTFSS  xBA.1
0899C:  BRA    8AAA
....................    {
....................       if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 1))|| In.B10 == 1)    // alarm1 occure and "Lock type"
0899E:  MOVLW  00
089A0:  BTFSC  xA2.1
089A2:  MOVLW  01
089A4:  MOVLB  E
089A6:  MOVWF  x45
089A8:  MOVLW  00
089AA:  MOVLB  D
089AC:  BTFSC  xAA.1
089AE:  MOVLW  01
089B0:  MOVLB  E
089B2:  XORWF  x45,W
089B4:  SUBLW  01
089B6:  BNZ   89BE
089B8:  MOVLB  D
089BA:  BTFSC  xAE.1
089BC:  BRA    89C4
089BE:  MOVLB  D
089C0:  BTFSS  xC2.1
089C2:  BRA    8AA2
....................       //if(Inputt.B10 == 0)
....................       {
....................          if(Ack.B10 == 0)
089C4:  BTFSC  xBE.1
089C6:  BRA    8AA0
....................          {
....................             if(In.B10 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
089C8:  BTFSC  xC2.1
089CA:  BRA    89DA
089CC:  MOVF   53,W
089CE:  SUBLW  0F
089D0:  BNZ   89DA
....................             {
....................                TimeBase1s = 100 ;            //reload again
089D2:  MOVLW  64
089D4:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
089D6:  MOVFF  54,1D
....................             }
.................... 
....................             In.B10 = 1;                                 // setbit in1
089DA:  BSF    xC2.1
....................             if(FlashingFlag == 0)
089DC:  BTFSC  1A.1
089DE:  BRA    89E4
....................             {
....................                Output.B10 = 0;           //Flash output1
089E0:  BCF    xA6.1
....................             }
089E2:  BRA    89E6
....................             else
....................             {
....................                Output.B10 = 1;
089E4:  BSF    xA6.1
....................             }
.................... 
....................             if (~AutoTestFlag)
089E6:  BTFSC  1A.4
089E8:  BRA    8A06
....................             {
....................                if(OutputBoth.B10 == 0)                  //Both output
089EA:  BTFSC  xB6.1
089EC:  BRA    89F8
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
089EE:  BSF    F89.4
089F0:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
089F2:  BSF    F89.3
089F4:  BCF    F92.3
....................                }
089F6:  BRA    8A06
....................                else
....................                {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
089F8:  BTFSS  xB2.1
089FA:  BRA    8A02
089FC:  BSF    F89.4
089FE:  BCF    F92.4
08A00:  BRA    8A06
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08A02:  BSF    F89.3
08A04:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
08A06:  BTFSC  xD6.1
08A08:  BRA    8AA0
08A0A:  BTFSC  30.3
08A0C:  BRA    8AA0
08A0E:  BTFSC  xBE.1
08A10:  BRA    8AA0
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08A12:  MOVLW  9A
08A14:  MOVWF  FF6
08A16:  MOVLW  07
08A18:  MOVWF  FF7
08A1A:  MOVLB  0
08A1C:  CALL   2636
....................                putc('\n',CH2);
08A20:  MOVLW  0A
08A22:  MOVLB  E
08A24:  MOVWF  x46
08A26:  MOVLB  0
08A28:  CALL   25F0
....................                delay_ms(10);
08A2C:  MOVLW  0A
08A2E:  MOVLB  E
08A30:  MOVWF  x45
08A32:  MOVLB  0
08A34:  CALL   0A24
....................                
....................                SendSMS.B10 =1;
08A38:  MOVLB  D
08A3A:  BSF    xD6.1
....................                fprintf(CH2,"AT+CMGS=\"");
08A3C:  MOVLW  A4
08A3E:  MOVWF  FF6
08A40:  MOVLW  07
08A42:  MOVWF  FF7
08A44:  MOVLB  0
08A46:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
08A4A:  MOVLW  0A
08A4C:  MOVWF  FEA
08A4E:  MOVLW  72
08A50:  MOVWF  FE9
08A52:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
08A56:  MOVLW  22
08A58:  MOVLB  E
08A5A:  MOVWF  x46
08A5C:  MOVLB  0
08A5E:  CALL   25F0
....................                putc('\n',CH2);
08A62:  MOVLW  0A
08A64:  MOVLB  E
08A66:  MOVWF  x46
08A68:  MOVLB  0
08A6A:  CALL   25F0
....................                delay_ms(50);
08A6E:  MOVLW  32
08A70:  MOVLB  E
08A72:  MOVWF  x45
08A74:  MOVLB  0
08A76:  CALL   0A24
....................               
....................               printf(SMS_Massage10);  
08A7A:  MOVLW  0B
08A7C:  MOVWF  FEA
08A7E:  MOVLW  A1
08A80:  MOVWF  FE9
08A82:  CALL   6C76
....................               putc('\n',CH2);
08A86:  MOVLW  0A
08A88:  MOVLB  E
08A8A:  MOVWF  x46
08A8C:  MOVLB  0
08A8E:  CALL   25F0
....................               putc(26,CH2);
08A92:  MOVLW  1A
08A94:  MOVLB  E
08A96:  MOVWF  x46
08A98:  MOVLB  0
08A9A:  CALL   25F0
08A9E:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
08AA0:  BRA    8AA8
....................       else if(FaultType.B10 == 1) Ack.B10 = 0;
08AA2:  BTFSS  xAE.1
08AA4:  BRA    8AA8
08AA6:  BCF    xBE.1
....................    }
08AA8:  BRA    8B6E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B10 ^ InputType.B10) == 1)
08AAA:  MOVLW  00
08AAC:  BTFSC  xA2.1
08AAE:  MOVLW  01
08AB0:  MOVLB  E
08AB2:  MOVWF  x45
08AB4:  MOVLW  00
08AB6:  MOVLB  D
08AB8:  BTFSC  xAA.1
08ABA:  MOVLW  01
08ABC:  MOVLB  E
08ABE:  XORWF  x45,W
08AC0:  SUBLW  01
08AC2:  BNZ   8B66
....................       {
....................          Output.B10 = 0;
08AC4:  MOVLB  D
08AC6:  BCF    xA6.1
....................          // SMS Sending   
....................          if((SendSMS.B10 ==0)&& (functointest_f ==0) && (Ack.B10 ==0))
08AC8:  BTFSC  xD6.1
08ACA:  BRA    8B62
08ACC:  BTFSC  30.3
08ACE:  BRA    8B62
08AD0:  BTFSC  xBE.1
08AD2:  BRA    8B62
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08AD4:  MOVLW  AE
08AD6:  MOVWF  FF6
08AD8:  MOVLW  07
08ADA:  MOVWF  FF7
08ADC:  MOVLB  0
08ADE:  CALL   2636
....................             putc('\n',CH2);
08AE2:  MOVLW  0A
08AE4:  MOVLB  E
08AE6:  MOVWF  x46
08AE8:  MOVLB  0
08AEA:  CALL   25F0
....................             delay_ms(10);
08AEE:  MOVLW  0A
08AF0:  MOVLB  E
08AF2:  MOVWF  x45
08AF4:  MOVLB  0
08AF6:  CALL   0A24
....................             
....................             SendSMS.B10 =1;
08AFA:  MOVLB  D
08AFC:  BSF    xD6.1
....................             fprintf(CH2,"AT+CMGS=\"");
08AFE:  MOVLW  B8
08B00:  MOVWF  FF6
08B02:  MOVLW  07
08B04:  MOVWF  FF7
08B06:  MOVLB  0
08B08:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
08B0C:  MOVLW  0A
08B0E:  MOVWF  FEA
08B10:  MOVLW  72
08B12:  MOVWF  FE9
08B14:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
08B18:  MOVLW  22
08B1A:  MOVLB  E
08B1C:  MOVWF  x46
08B1E:  MOVLB  0
08B20:  CALL   25F0
....................             putc('\n',CH2);
08B24:  MOVLW  0A
08B26:  MOVLB  E
08B28:  MOVWF  x46
08B2A:  MOVLB  0
08B2C:  CALL   25F0
....................             delay_ms(50);
08B30:  MOVLW  32
08B32:  MOVLB  E
08B34:  MOVWF  x45
08B36:  MOVLB  0
08B38:  CALL   0A24
....................            
....................            printf(SMS_Massage10);  
08B3C:  MOVLW  0B
08B3E:  MOVWF  FEA
08B40:  MOVLW  A1
08B42:  MOVWF  FE9
08B44:  CALL   6C76
....................            putc('\n',CH2);
08B48:  MOVLW  0A
08B4A:  MOVLB  E
08B4C:  MOVWF  x46
08B4E:  MOVLB  0
08B50:  CALL   25F0
....................            putc(26,CH2);
08B54:  MOVLW  1A
08B56:  MOVLB  E
08B58:  MOVWF  x46
08B5A:  MOVLB  0
08B5C:  CALL   25F0
08B60:  MOVLB  D
....................          }
....................       }
08B62:  BRA    8B6E
08B64:  MOVLB  E
....................       else
....................       {
....................          Output.B10 = 1;
08B66:  MOVLB  D
08B68:  BSF    xA6.1
....................          SendSMS.B10 =0;
08B6A:  BCF    xD6.1
....................          functointest_f =0;
08B6C:  BCF    30.3
....................       }
....................    }
.................... //}
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if(AlarmIndicator.B11 == 1)    // Alarm Function
08B6E:  BTFSS  xBA.2
08B70:  BRA    8C7E
....................    {
....................       if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 1))|| In.B11 == 1)    // alarm1 occure and "Lock type"
08B72:  MOVLW  00
08B74:  BTFSC  xA2.2
08B76:  MOVLW  01
08B78:  MOVLB  E
08B7A:  MOVWF  x45
08B7C:  MOVLW  00
08B7E:  MOVLB  D
08B80:  BTFSC  xAA.2
08B82:  MOVLW  01
08B84:  MOVLB  E
08B86:  XORWF  x45,W
08B88:  SUBLW  01
08B8A:  BNZ   8B92
08B8C:  MOVLB  D
08B8E:  BTFSC  xAE.2
08B90:  BRA    8B98
08B92:  MOVLB  D
08B94:  BTFSS  xC2.2
08B96:  BRA    8C76
....................       //if(Inputt.B11 == 0)
....................       {
....................          if(Ack.B11 == 0)
08B98:  BTFSC  xBE.2
08B9A:  BRA    8C74
....................          {
....................             if(In.B11 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08B9C:  BTFSC  xC2.2
08B9E:  BRA    8BAE
08BA0:  MOVF   53,W
08BA2:  SUBLW  0F
08BA4:  BNZ   8BAE
....................             {
....................                TimeBase1s = 100 ;            //reload again
08BA6:  MOVLW  64
08BA8:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08BAA:  MOVFF  54,1D
....................             }
.................... 
....................             In.B11 = 1;                                 // setbit in1
08BAE:  BSF    xC2.2
....................             if(FlashingFlag == 0)
08BB0:  BTFSC  1A.1
08BB2:  BRA    8BB8
....................             {
....................                Output.B11 = 0;           //Flash output1
08BB4:  BCF    xA6.2
....................             }
08BB6:  BRA    8BBA
....................             else
....................             {
....................                Output.B11 = 1;
08BB8:  BSF    xA6.2
....................             }
.................... 
....................             if (~AutoTestFlag)
08BBA:  BTFSC  1A.4
08BBC:  BRA    8BDA
....................             {
....................                if(OutputBoth.B11 == 0)                  //Both output
08BBE:  BTFSC  xB6.2
08BC0:  BRA    8BCC
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08BC2:  BSF    F89.4
08BC4:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08BC6:  BSF    F89.3
08BC8:  BCF    F92.3
....................                }
08BCA:  BRA    8BDA
....................                else
....................                {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08BCC:  BTFSS  xB2.2
08BCE:  BRA    8BD6
08BD0:  BSF    F89.4
08BD2:  BCF    F92.4
08BD4:  BRA    8BDA
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08BD6:  BSF    F89.3
08BD8:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
08BDA:  BTFSC  xD6.2
08BDC:  BRA    8C74
08BDE:  BTFSC  30.3
08BE0:  BRA    8C74
08BE2:  BTFSC  xBE.2
08BE4:  BRA    8C74
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08BE6:  MOVLW  C2
08BE8:  MOVWF  FF6
08BEA:  MOVLW  07
08BEC:  MOVWF  FF7
08BEE:  MOVLB  0
08BF0:  CALL   2636
....................                putc('\n',CH2);
08BF4:  MOVLW  0A
08BF6:  MOVLB  E
08BF8:  MOVWF  x46
08BFA:  MOVLB  0
08BFC:  CALL   25F0
....................                delay_ms(10);
08C00:  MOVLW  0A
08C02:  MOVLB  E
08C04:  MOVWF  x45
08C06:  MOVLB  0
08C08:  CALL   0A24
....................                
....................                SendSMS.B11 =1;
08C0C:  MOVLB  D
08C0E:  BSF    xD6.2
....................                fprintf(CH2,"AT+CMGS=\"");
08C10:  MOVLW  CC
08C12:  MOVWF  FF6
08C14:  MOVLW  07
08C16:  MOVWF  FF7
08C18:  MOVLB  0
08C1A:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
08C1E:  MOVLW  0A
08C20:  MOVWF  FEA
08C22:  MOVLW  72
08C24:  MOVWF  FE9
08C26:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
08C2A:  MOVLW  22
08C2C:  MOVLB  E
08C2E:  MOVWF  x46
08C30:  MOVLB  0
08C32:  CALL   25F0
....................                putc('\n',CH2);
08C36:  MOVLW  0A
08C38:  MOVLB  E
08C3A:  MOVWF  x46
08C3C:  MOVLB  0
08C3E:  CALL   25F0
....................                delay_ms(50);
08C42:  MOVLW  32
08C44:  MOVLB  E
08C46:  MOVWF  x45
08C48:  MOVLB  0
08C4A:  CALL   0A24
....................               
....................               printf(SMS_Massage11);  
08C4E:  MOVLW  0B
08C50:  MOVWF  FEA
08C52:  MOVLW  C1
08C54:  MOVWF  FE9
08C56:  CALL   6C76
....................               putc('\n',CH2);
08C5A:  MOVLW  0A
08C5C:  MOVLB  E
08C5E:  MOVWF  x46
08C60:  MOVLB  0
08C62:  CALL   25F0
....................               putc(26,CH2);
08C66:  MOVLW  1A
08C68:  MOVLB  E
08C6A:  MOVWF  x46
08C6C:  MOVLB  0
08C6E:  CALL   25F0
08C72:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
08C74:  BRA    8C7C
....................       else if(FaultType.B11 == 1) Ack.B11 = 0;
08C76:  BTFSS  xAE.2
08C78:  BRA    8C7C
08C7A:  BCF    xBE.2
....................    }
08C7C:  BRA    8D42
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B11 ^ InputType.B11) == 1)
08C7E:  MOVLW  00
08C80:  BTFSC  xA2.2
08C82:  MOVLW  01
08C84:  MOVLB  E
08C86:  MOVWF  x45
08C88:  MOVLW  00
08C8A:  MOVLB  D
08C8C:  BTFSC  xAA.2
08C8E:  MOVLW  01
08C90:  MOVLB  E
08C92:  XORWF  x45,W
08C94:  SUBLW  01
08C96:  BNZ   8D3A
....................       {
....................          Output.B11 = 0;
08C98:  MOVLB  D
08C9A:  BCF    xA6.2
....................          // SMS Sending   
....................          if((SendSMS.B11 ==0)&& (functointest_f ==0) && (Ack.B11 ==0))
08C9C:  BTFSC  xD6.2
08C9E:  BRA    8D36
08CA0:  BTFSC  30.3
08CA2:  BRA    8D36
08CA4:  BTFSC  xBE.2
08CA6:  BRA    8D36
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08CA8:  MOVLW  D6
08CAA:  MOVWF  FF6
08CAC:  MOVLW  07
08CAE:  MOVWF  FF7
08CB0:  MOVLB  0
08CB2:  CALL   2636
....................             putc('\n',CH2);
08CB6:  MOVLW  0A
08CB8:  MOVLB  E
08CBA:  MOVWF  x46
08CBC:  MOVLB  0
08CBE:  CALL   25F0
....................             delay_ms(10);
08CC2:  MOVLW  0A
08CC4:  MOVLB  E
08CC6:  MOVWF  x45
08CC8:  MOVLB  0
08CCA:  CALL   0A24
....................             
....................             SendSMS.B11 =1;
08CCE:  MOVLB  D
08CD0:  BSF    xD6.2
....................             fprintf(CH2,"AT+CMGS=\"");
08CD2:  MOVLW  E0
08CD4:  MOVWF  FF6
08CD6:  MOVLW  07
08CD8:  MOVWF  FF7
08CDA:  MOVLB  0
08CDC:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
08CE0:  MOVLW  0A
08CE2:  MOVWF  FEA
08CE4:  MOVLW  72
08CE6:  MOVWF  FE9
08CE8:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
08CEC:  MOVLW  22
08CEE:  MOVLB  E
08CF0:  MOVWF  x46
08CF2:  MOVLB  0
08CF4:  CALL   25F0
....................             putc('\n',CH2);
08CF8:  MOVLW  0A
08CFA:  MOVLB  E
08CFC:  MOVWF  x46
08CFE:  MOVLB  0
08D00:  CALL   25F0
....................             delay_ms(50);
08D04:  MOVLW  32
08D06:  MOVLB  E
08D08:  MOVWF  x45
08D0A:  MOVLB  0
08D0C:  CALL   0A24
....................            
....................            printf(SMS_Massage11);  
08D10:  MOVLW  0B
08D12:  MOVWF  FEA
08D14:  MOVLW  C1
08D16:  MOVWF  FE9
08D18:  CALL   6C76
....................            putc('\n',CH2);
08D1C:  MOVLW  0A
08D1E:  MOVLB  E
08D20:  MOVWF  x46
08D22:  MOVLB  0
08D24:  CALL   25F0
....................            putc(26,CH2);
08D28:  MOVLW  1A
08D2A:  MOVLB  E
08D2C:  MOVWF  x46
08D2E:  MOVLB  0
08D30:  CALL   25F0
08D34:  MOVLB  D
....................          }
....................       }
08D36:  BRA    8D42
08D38:  MOVLB  E
....................       else
....................       {
....................          Output.B11 = 1;
08D3A:  MOVLB  D
08D3C:  BSF    xA6.2
....................          SendSMS.B11 =0;
08D3E:  BCF    xD6.2
....................          functointest_f =0;
08D40:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if(AlarmIndicator.B12 == 1)    // Alarm Function
08D42:  BTFSS  xBA.3
08D44:  BRA    8E52
....................    {
....................       if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 1))|| In.B12 == 1)    // alarm1 occure and "Lock type"
08D46:  MOVLW  00
08D48:  BTFSC  xA2.3
08D4A:  MOVLW  01
08D4C:  MOVLB  E
08D4E:  MOVWF  x45
08D50:  MOVLW  00
08D52:  MOVLB  D
08D54:  BTFSC  xAA.3
08D56:  MOVLW  01
08D58:  MOVLB  E
08D5A:  XORWF  x45,W
08D5C:  SUBLW  01
08D5E:  BNZ   8D66
08D60:  MOVLB  D
08D62:  BTFSC  xAE.3
08D64:  BRA    8D6C
08D66:  MOVLB  D
08D68:  BTFSS  xC2.3
08D6A:  BRA    8E4A
....................       //if(Inputt.B12 == 0)
....................       {
....................          if(Ack.B12 == 0)
08D6C:  BTFSC  xBE.3
08D6E:  BRA    8E48
....................          {
....................             if(In.B12 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08D70:  BTFSC  xC2.3
08D72:  BRA    8D82
08D74:  MOVF   53,W
08D76:  SUBLW  0F
08D78:  BNZ   8D82
....................             {
....................                TimeBase1s = 100 ;            //reload again
08D7A:  MOVLW  64
08D7C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08D7E:  MOVFF  54,1D
....................             }
.................... 
....................             In.B12 = 1;                                 // setbit in1
08D82:  BSF    xC2.3
....................             if(FlashingFlag == 0)
08D84:  BTFSC  1A.1
08D86:  BRA    8D8C
....................             {
....................                Output.B12 = 0;           //Flash output1
08D88:  BCF    xA6.3
....................             }
08D8A:  BRA    8D8E
....................             else
....................             {
....................                Output.B12 = 1;
08D8C:  BSF    xA6.3
....................             }
.................... 
....................             if (~AutoTestFlag)
08D8E:  BTFSC  1A.4
08D90:  BRA    8DAE
....................             {
....................                if(OutputBoth.B12 == 0)                  //Both output
08D92:  BTFSC  xB6.3
08D94:  BRA    8DA0
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08D96:  BSF    F89.4
08D98:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08D9A:  BSF    F89.3
08D9C:  BCF    F92.3
....................                }
08D9E:  BRA    8DAE
....................                else
....................                {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08DA0:  BTFSS  xB2.3
08DA2:  BRA    8DAA
08DA4:  BSF    F89.4
08DA6:  BCF    F92.4
08DA8:  BRA    8DAE
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08DAA:  BSF    F89.3
08DAC:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
08DAE:  BTFSC  xD6.3
08DB0:  BRA    8E48
08DB2:  BTFSC  30.3
08DB4:  BRA    8E48
08DB6:  BTFSC  xBE.3
08DB8:  BRA    8E48
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08DBA:  MOVLW  EA
08DBC:  MOVWF  FF6
08DBE:  MOVLW  07
08DC0:  MOVWF  FF7
08DC2:  MOVLB  0
08DC4:  CALL   2636
....................                putc('\n',CH2);
08DC8:  MOVLW  0A
08DCA:  MOVLB  E
08DCC:  MOVWF  x46
08DCE:  MOVLB  0
08DD0:  CALL   25F0
....................                delay_ms(10);
08DD4:  MOVLW  0A
08DD6:  MOVLB  E
08DD8:  MOVWF  x45
08DDA:  MOVLB  0
08DDC:  CALL   0A24
....................                
....................                SendSMS.B12 =1;
08DE0:  MOVLB  D
08DE2:  BSF    xD6.3
....................                fprintf(CH2,"AT+CMGS=\"");
08DE4:  MOVLW  F4
08DE6:  MOVWF  FF6
08DE8:  MOVLW  07
08DEA:  MOVWF  FF7
08DEC:  MOVLB  0
08DEE:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
08DF2:  MOVLW  0A
08DF4:  MOVWF  FEA
08DF6:  MOVLW  72
08DF8:  MOVWF  FE9
08DFA:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
08DFE:  MOVLW  22
08E00:  MOVLB  E
08E02:  MOVWF  x46
08E04:  MOVLB  0
08E06:  CALL   25F0
....................                putc('\n',CH2);
08E0A:  MOVLW  0A
08E0C:  MOVLB  E
08E0E:  MOVWF  x46
08E10:  MOVLB  0
08E12:  CALL   25F0
....................                delay_ms(50);
08E16:  MOVLW  32
08E18:  MOVLB  E
08E1A:  MOVWF  x45
08E1C:  MOVLB  0
08E1E:  CALL   0A24
....................               
....................               printf(SMS_Massage12);  
08E22:  MOVLW  0B
08E24:  MOVWF  FEA
08E26:  MOVLW  E1
08E28:  MOVWF  FE9
08E2A:  CALL   6C76
....................               putc('\n',CH2);
08E2E:  MOVLW  0A
08E30:  MOVLB  E
08E32:  MOVWF  x46
08E34:  MOVLB  0
08E36:  CALL   25F0
....................               putc(26,CH2);
08E3A:  MOVLW  1A
08E3C:  MOVLB  E
08E3E:  MOVWF  x46
08E40:  MOVLB  0
08E42:  CALL   25F0
08E46:  MOVLB  D
....................             }
....................         }
.................... 
....................       }
08E48:  BRA    8E50
....................       else if(FaultType.B12 == 1) Ack.B12 = 0;
08E4A:  BTFSS  xAE.3
08E4C:  BRA    8E50
08E4E:  BCF    xBE.3
....................    }
08E50:  BRA    8F16
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B12 ^ InputType.B12) == 1)
08E52:  MOVLW  00
08E54:  BTFSC  xA2.3
08E56:  MOVLW  01
08E58:  MOVLB  E
08E5A:  MOVWF  x45
08E5C:  MOVLW  00
08E5E:  MOVLB  D
08E60:  BTFSC  xAA.3
08E62:  MOVLW  01
08E64:  MOVLB  E
08E66:  XORWF  x45,W
08E68:  SUBLW  01
08E6A:  BNZ   8F0E
....................       {
....................          Output.B12 = 0;
08E6C:  MOVLB  D
08E6E:  BCF    xA6.3
....................          // SMS Sending   
....................          if((SendSMS.B12 ==0)&& (functointest_f ==0) && (Ack.B12 ==0))
08E70:  BTFSC  xD6.3
08E72:  BRA    8F0A
08E74:  BTFSC  30.3
08E76:  BRA    8F0A
08E78:  BTFSC  xBE.3
08E7A:  BRA    8F0A
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
08E7C:  MOVLW  FE
08E7E:  MOVWF  FF6
08E80:  MOVLW  07
08E82:  MOVWF  FF7
08E84:  MOVLB  0
08E86:  CALL   2636
....................             putc('\n',CH2);
08E8A:  MOVLW  0A
08E8C:  MOVLB  E
08E8E:  MOVWF  x46
08E90:  MOVLB  0
08E92:  CALL   25F0
....................             delay_ms(10);
08E96:  MOVLW  0A
08E98:  MOVLB  E
08E9A:  MOVWF  x45
08E9C:  MOVLB  0
08E9E:  CALL   0A24
....................             
....................             SendSMS.B12 =1;
08EA2:  MOVLB  D
08EA4:  BSF    xD6.3
....................             fprintf(CH2,"AT+CMGS=\"");
08EA6:  MOVLW  08
08EA8:  MOVWF  FF6
08EAA:  MOVLW  08
08EAC:  MOVWF  FF7
08EAE:  MOVLB  0
08EB0:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
08EB4:  MOVLW  0A
08EB6:  MOVWF  FEA
08EB8:  MOVLW  72
08EBA:  MOVWF  FE9
08EBC:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
08EC0:  MOVLW  22
08EC2:  MOVLB  E
08EC4:  MOVWF  x46
08EC6:  MOVLB  0
08EC8:  CALL   25F0
....................             putc('\n',CH2);
08ECC:  MOVLW  0A
08ECE:  MOVLB  E
08ED0:  MOVWF  x46
08ED2:  MOVLB  0
08ED4:  CALL   25F0
....................             delay_ms(50);
08ED8:  MOVLW  32
08EDA:  MOVLB  E
08EDC:  MOVWF  x45
08EDE:  MOVLB  0
08EE0:  CALL   0A24
....................            
....................            printf(SMS_Massage12);  
08EE4:  MOVLW  0B
08EE6:  MOVWF  FEA
08EE8:  MOVLW  E1
08EEA:  MOVWF  FE9
08EEC:  CALL   6C76
....................            putc('\n',CH2);
08EF0:  MOVLW  0A
08EF2:  MOVLB  E
08EF4:  MOVWF  x46
08EF6:  MOVLB  0
08EF8:  CALL   25F0
....................            putc(26,CH2);
08EFC:  MOVLW  1A
08EFE:  MOVLB  E
08F00:  MOVWF  x46
08F02:  MOVLB  0
08F04:  CALL   25F0
08F08:  MOVLB  D
....................          }
....................       }
08F0A:  BRA    8F16
08F0C:  MOVLB  E
....................       else
....................       {
....................          Output.B12 = 1;
08F0E:  MOVLB  D
08F10:  BSF    xA6.3
....................          SendSMS.B12 =0;
08F12:  BCF    xD6.3
....................          functointest_f =0;
08F14:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if(AlarmIndicator.B13 == 1)    // Alarm Function
08F16:  BTFSS  xBA.4
08F18:  BRA    9026
....................    {
....................       if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 1))|| In.B13 == 1)    // alarm1 occure and "Lock type"
08F1A:  MOVLW  00
08F1C:  BTFSC  xA2.4
08F1E:  MOVLW  01
08F20:  MOVLB  E
08F22:  MOVWF  x45
08F24:  MOVLW  00
08F26:  MOVLB  D
08F28:  BTFSC  xAA.4
08F2A:  MOVLW  01
08F2C:  MOVLB  E
08F2E:  XORWF  x45,W
08F30:  SUBLW  01
08F32:  BNZ   8F3A
08F34:  MOVLB  D
08F36:  BTFSC  xAE.4
08F38:  BRA    8F40
08F3A:  MOVLB  D
08F3C:  BTFSS  xC2.4
08F3E:  BRA    901E
....................       //if(Inputt.B13 == 0)
....................       {
....................          if(Ack.B13 == 0)
08F40:  BTFSC  xBE.4
08F42:  BRA    901C
....................          {
....................             if(In.B13 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
08F44:  BTFSC  xC2.4
08F46:  BRA    8F56
08F48:  MOVF   53,W
08F4A:  SUBLW  0F
08F4C:  BNZ   8F56
....................             {
....................                TimeBase1s = 100 ;            //reload again
08F4E:  MOVLW  64
08F50:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
08F52:  MOVFF  54,1D
....................             }
.................... 
....................             In.B13 = 1;                                 // setbit in1
08F56:  BSF    xC2.4
....................             if(FlashingFlag == 0)
08F58:  BTFSC  1A.1
08F5A:  BRA    8F60
....................             {
....................                Output.B13 = 0;           //Flash output1
08F5C:  BCF    xA6.4
....................             }
08F5E:  BRA    8F62
....................             else
....................             {
....................                Output.B13 = 1;
08F60:  BSF    xA6.4
....................             }
.................... 
....................             if (~AutoTestFlag)
08F62:  BTFSC  1A.4
08F64:  BRA    8F82
....................             {
....................                if(OutputBoth.B13 == 0)                  //Both output
08F66:  BTFSC  xB6.4
08F68:  BRA    8F74
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
08F6A:  BSF    F89.4
08F6C:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
08F6E:  BSF    F89.3
08F70:  BCF    F92.3
....................                }
08F72:  BRA    8F82
....................                else
....................                {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
08F74:  BTFSS  xB2.4
08F76:  BRA    8F7E
08F78:  BSF    F89.4
08F7A:  BCF    F92.4
08F7C:  BRA    8F82
....................                   else output_bit(Pbell,OnRelay);                          //Bell
08F7E:  BSF    F89.3
08F80:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
08F82:  BTFSC  xD6.4
08F84:  BRA    901C
08F86:  BTFSC  30.3
08F88:  BRA    901C
08F8A:  BTFSC  xBE.4
08F8C:  BRA    901C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
08F8E:  MOVLW  12
08F90:  MOVWF  FF6
08F92:  MOVLW  08
08F94:  MOVWF  FF7
08F96:  MOVLB  0
08F98:  CALL   2636
....................                putc('\n',CH2);
08F9C:  MOVLW  0A
08F9E:  MOVLB  E
08FA0:  MOVWF  x46
08FA2:  MOVLB  0
08FA4:  CALL   25F0
....................                delay_ms(10);
08FA8:  MOVLW  0A
08FAA:  MOVLB  E
08FAC:  MOVWF  x45
08FAE:  MOVLB  0
08FB0:  CALL   0A24
....................                
....................                SendSMS.B13 =1;
08FB4:  MOVLB  D
08FB6:  BSF    xD6.4
....................                fprintf(CH2,"AT+CMGS=\"");
08FB8:  MOVLW  1C
08FBA:  MOVWF  FF6
08FBC:  MOVLW  08
08FBE:  MOVWF  FF7
08FC0:  MOVLB  0
08FC2:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
08FC6:  MOVLW  0A
08FC8:  MOVWF  FEA
08FCA:  MOVLW  72
08FCC:  MOVWF  FE9
08FCE:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
08FD2:  MOVLW  22
08FD4:  MOVLB  E
08FD6:  MOVWF  x46
08FD8:  MOVLB  0
08FDA:  CALL   25F0
....................                putc('\n',CH2);
08FDE:  MOVLW  0A
08FE0:  MOVLB  E
08FE2:  MOVWF  x46
08FE4:  MOVLB  0
08FE6:  CALL   25F0
....................                delay_ms(50);
08FEA:  MOVLW  32
08FEC:  MOVLB  E
08FEE:  MOVWF  x45
08FF0:  MOVLB  0
08FF2:  CALL   0A24
....................               
....................               printf(SMS_Massage13);  
08FF6:  MOVLW  0C
08FF8:  MOVWF  FEA
08FFA:  MOVLW  01
08FFC:  MOVWF  FE9
08FFE:  CALL   6C76
....................               putc('\n',CH2);
09002:  MOVLW  0A
09004:  MOVLB  E
09006:  MOVWF  x46
09008:  MOVLB  0
0900A:  CALL   25F0
....................               putc(26,CH2);
0900E:  MOVLW  1A
09010:  MOVLB  E
09012:  MOVWF  x46
09014:  MOVLB  0
09016:  CALL   25F0
0901A:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
0901C:  BRA    9024
....................       else if(FaultType.B13 == 1) Ack.B13 = 0;
0901E:  BTFSS  xAE.4
09020:  BRA    9024
09022:  BCF    xBE.4
....................    }
09024:  BRA    90EA
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B13 ^ InputType.B13) == 1)
09026:  MOVLW  00
09028:  BTFSC  xA2.4
0902A:  MOVLW  01
0902C:  MOVLB  E
0902E:  MOVWF  x45
09030:  MOVLW  00
09032:  MOVLB  D
09034:  BTFSC  xAA.4
09036:  MOVLW  01
09038:  MOVLB  E
0903A:  XORWF  x45,W
0903C:  SUBLW  01
0903E:  BNZ   90E2
....................       {
....................          Output.B13 = 0;
09040:  MOVLB  D
09042:  BCF    xA6.4
....................          // SMS Sending   
....................          if((SendSMS.B13 ==0)&& (functointest_f ==0) && (Ack.B13 ==0))
09044:  BTFSC  xD6.4
09046:  BRA    90DE
09048:  BTFSC  30.3
0904A:  BRA    90DE
0904C:  BTFSC  xBE.4
0904E:  BRA    90DE
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
09050:  MOVLW  26
09052:  MOVWF  FF6
09054:  MOVLW  08
09056:  MOVWF  FF7
09058:  MOVLB  0
0905A:  CALL   2636
....................             putc('\n',CH2);
0905E:  MOVLW  0A
09060:  MOVLB  E
09062:  MOVWF  x46
09064:  MOVLB  0
09066:  CALL   25F0
....................             delay_ms(10);
0906A:  MOVLW  0A
0906C:  MOVLB  E
0906E:  MOVWF  x45
09070:  MOVLB  0
09072:  CALL   0A24
....................             
....................             SendSMS.B13 =1;
09076:  MOVLB  D
09078:  BSF    xD6.4
....................             fprintf(CH2,"AT+CMGS=\"");
0907A:  MOVLW  30
0907C:  MOVWF  FF6
0907E:  MOVLW  08
09080:  MOVWF  FF7
09082:  MOVLB  0
09084:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
09088:  MOVLW  0A
0908A:  MOVWF  FEA
0908C:  MOVLW  72
0908E:  MOVWF  FE9
09090:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
09094:  MOVLW  22
09096:  MOVLB  E
09098:  MOVWF  x46
0909A:  MOVLB  0
0909C:  CALL   25F0
....................             putc('\n',CH2);
090A0:  MOVLW  0A
090A2:  MOVLB  E
090A4:  MOVWF  x46
090A6:  MOVLB  0
090A8:  CALL   25F0
....................             delay_ms(50);
090AC:  MOVLW  32
090AE:  MOVLB  E
090B0:  MOVWF  x45
090B2:  MOVLB  0
090B4:  CALL   0A24
....................            
....................            printf(SMS_Massage13);  
090B8:  MOVLW  0C
090BA:  MOVWF  FEA
090BC:  MOVLW  01
090BE:  MOVWF  FE9
090C0:  CALL   6C76
....................            putc('\n',CH2);
090C4:  MOVLW  0A
090C6:  MOVLB  E
090C8:  MOVWF  x46
090CA:  MOVLB  0
090CC:  CALL   25F0
....................            putc(26,CH2);
090D0:  MOVLW  1A
090D2:  MOVLB  E
090D4:  MOVWF  x46
090D6:  MOVLB  0
090D8:  CALL   25F0
090DC:  MOVLB  D
....................          }
....................       }
090DE:  BRA    90EA
090E0:  MOVLB  E
....................       else
....................       {
....................          Output.B13 = 1;
090E2:  MOVLB  D
090E4:  BSF    xA6.4
....................          SendSMS.B13 =0;
090E6:  BCF    xD6.4
....................          functointest_f =0;
090E8:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if(AlarmIndicator.B14 == 1)    // Alarm Function
090EA:  BTFSS  xBA.5
090EC:  BRA    91FA
....................    {
....................       if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 1))|| In.B14 == 1)    // alarm1 occure and "Lock type"
090EE:  MOVLW  00
090F0:  BTFSC  xA2.5
090F2:  MOVLW  01
090F4:  MOVLB  E
090F6:  MOVWF  x45
090F8:  MOVLW  00
090FA:  MOVLB  D
090FC:  BTFSC  xAA.5
090FE:  MOVLW  01
09100:  MOVLB  E
09102:  XORWF  x45,W
09104:  SUBLW  01
09106:  BNZ   910E
09108:  MOVLB  D
0910A:  BTFSC  xAE.5
0910C:  BRA    9114
0910E:  MOVLB  D
09110:  BTFSS  xC2.5
09112:  BRA    91F2
....................       //if(Inputt.B14 == 0)
....................       {
....................          if(Ack.B14 == 0)
09114:  BTFSC  xBE.5
09116:  BRA    91F0
....................          {
....................             if(In.B14 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
09118:  BTFSC  xC2.5
0911A:  BRA    912A
0911C:  MOVF   53,W
0911E:  SUBLW  0F
09120:  BNZ   912A
....................             {
....................                TimeBase1s = 100 ;            //reload again
09122:  MOVLW  64
09124:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
09126:  MOVFF  54,1D
....................             }
.................... 
....................             In.B14 = 1;                                 // setbit in1
0912A:  BSF    xC2.5
....................             if(FlashingFlag == 0)
0912C:  BTFSC  1A.1
0912E:  BRA    9134
....................             {
....................                Output.B14 = 0;           //Flash output1
09130:  BCF    xA6.5
....................             }
09132:  BRA    9136
....................             else
....................             {
....................                Output.B14 = 1;
09134:  BSF    xA6.5
....................             }
.................... 
....................             if (~AutoTestFlag)
09136:  BTFSC  1A.4
09138:  BRA    9156
....................             {
....................                if(OutputBoth.B14 == 0)                  //Both output
0913A:  BTFSC  xB6.5
0913C:  BRA    9148
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0913E:  BSF    F89.4
09140:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09142:  BSF    F89.3
09144:  BCF    F92.3
....................                }
09146:  BRA    9156
....................                else
....................                {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09148:  BTFSS  xB2.5
0914A:  BRA    9152
0914C:  BSF    F89.4
0914E:  BCF    F92.4
09150:  BRA    9156
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09152:  BSF    F89.3
09154:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
09156:  BTFSC  xD6.5
09158:  BRA    91F0
0915A:  BTFSC  30.3
0915C:  BRA    91F0
0915E:  BTFSC  xBE.5
09160:  BRA    91F0
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
09162:  MOVLW  3A
09164:  MOVWF  FF6
09166:  MOVLW  08
09168:  MOVWF  FF7
0916A:  MOVLB  0
0916C:  CALL   2636
....................                putc('\n',CH2);
09170:  MOVLW  0A
09172:  MOVLB  E
09174:  MOVWF  x46
09176:  MOVLB  0
09178:  CALL   25F0
....................                delay_ms(10);
0917C:  MOVLW  0A
0917E:  MOVLB  E
09180:  MOVWF  x45
09182:  MOVLB  0
09184:  CALL   0A24
....................                
....................                SendSMS.B14 =1;
09188:  MOVLB  D
0918A:  BSF    xD6.5
....................                fprintf(CH2,"AT+CMGS=\"");
0918C:  MOVLW  44
0918E:  MOVWF  FF6
09190:  MOVLW  08
09192:  MOVWF  FF7
09194:  MOVLB  0
09196:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
0919A:  MOVLW  0A
0919C:  MOVWF  FEA
0919E:  MOVLW  72
091A0:  MOVWF  FE9
091A2:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
091A6:  MOVLW  22
091A8:  MOVLB  E
091AA:  MOVWF  x46
091AC:  MOVLB  0
091AE:  CALL   25F0
....................                putc('\n',CH2);
091B2:  MOVLW  0A
091B4:  MOVLB  E
091B6:  MOVWF  x46
091B8:  MOVLB  0
091BA:  CALL   25F0
....................                delay_ms(50);
091BE:  MOVLW  32
091C0:  MOVLB  E
091C2:  MOVWF  x45
091C4:  MOVLB  0
091C6:  CALL   0A24
....................               
....................               printf(SMS_Massage14);  
091CA:  MOVLW  0C
091CC:  MOVWF  FEA
091CE:  MOVLW  21
091D0:  MOVWF  FE9
091D2:  CALL   6C76
....................               putc('\n',CH2);
091D6:  MOVLW  0A
091D8:  MOVLB  E
091DA:  MOVWF  x46
091DC:  MOVLB  0
091DE:  CALL   25F0
....................               putc(26,CH2);
091E2:  MOVLW  1A
091E4:  MOVLB  E
091E6:  MOVWF  x46
091E8:  MOVLB  0
091EA:  CALL   25F0
091EE:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
091F0:  BRA    91F8
....................       else if(FaultType.B14 == 1) Ack.B14 = 0;
091F2:  BTFSS  xAE.5
091F4:  BRA    91F8
091F6:  BCF    xBE.5
....................    }
091F8:  BRA    92BE
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B14 ^ InputType.B14) == 1)
091FA:  MOVLW  00
091FC:  BTFSC  xA2.5
091FE:  MOVLW  01
09200:  MOVLB  E
09202:  MOVWF  x45
09204:  MOVLW  00
09206:  MOVLB  D
09208:  BTFSC  xAA.5
0920A:  MOVLW  01
0920C:  MOVLB  E
0920E:  XORWF  x45,W
09210:  SUBLW  01
09212:  BNZ   92B6
....................       {
....................          Output.B14 = 0;
09214:  MOVLB  D
09216:  BCF    xA6.5
....................          // SMS Sending   
....................          if((SendSMS.B14 ==0)&& (functointest_f ==0) && (Ack.B14 ==0))
09218:  BTFSC  xD6.5
0921A:  BRA    92B2
0921C:  BTFSC  30.3
0921E:  BRA    92B2
09220:  BTFSC  xBE.5
09222:  BRA    92B2
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
09224:  MOVLW  4E
09226:  MOVWF  FF6
09228:  MOVLW  08
0922A:  MOVWF  FF7
0922C:  MOVLB  0
0922E:  CALL   2636
....................             putc('\n',CH2);
09232:  MOVLW  0A
09234:  MOVLB  E
09236:  MOVWF  x46
09238:  MOVLB  0
0923A:  CALL   25F0
....................             delay_ms(10);
0923E:  MOVLW  0A
09240:  MOVLB  E
09242:  MOVWF  x45
09244:  MOVLB  0
09246:  CALL   0A24
....................             
....................             SendSMS.B14 =1;
0924A:  MOVLB  D
0924C:  BSF    xD6.5
....................             fprintf(CH2,"AT+CMGS=\"");
0924E:  MOVLW  58
09250:  MOVWF  FF6
09252:  MOVLW  08
09254:  MOVWF  FF7
09256:  MOVLB  0
09258:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
0925C:  MOVLW  0A
0925E:  MOVWF  FEA
09260:  MOVLW  72
09262:  MOVWF  FE9
09264:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
09268:  MOVLW  22
0926A:  MOVLB  E
0926C:  MOVWF  x46
0926E:  MOVLB  0
09270:  CALL   25F0
....................             putc('\n',CH2);
09274:  MOVLW  0A
09276:  MOVLB  E
09278:  MOVWF  x46
0927A:  MOVLB  0
0927C:  CALL   25F0
....................             delay_ms(50);
09280:  MOVLW  32
09282:  MOVLB  E
09284:  MOVWF  x45
09286:  MOVLB  0
09288:  CALL   0A24
....................            
....................            printf(SMS_Massage14);  
0928C:  MOVLW  0C
0928E:  MOVWF  FEA
09290:  MOVLW  21
09292:  MOVWF  FE9
09294:  CALL   6C76
....................            putc('\n',CH2);
09298:  MOVLW  0A
0929A:  MOVLB  E
0929C:  MOVWF  x46
0929E:  MOVLB  0
092A0:  CALL   25F0
....................            putc(26,CH2);
092A4:  MOVLW  1A
092A6:  MOVLB  E
092A8:  MOVWF  x46
092AA:  MOVLB  0
092AC:  CALL   25F0
092B0:  MOVLB  D
....................          }
....................       }
092B2:  BRA    92BE
092B4:  MOVLB  E
....................       else
....................       {
....................          Output.B14 = 1;
092B6:  MOVLB  D
092B8:  BSF    xA6.5
....................          SendSMS.B14 =0;
092BA:  BCF    xD6.5
....................          functointest_f =0;
092BC:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if(AlarmIndicator.B15 == 1)    // Alarm Function
092BE:  BTFSS  xBA.6
092C0:  BRA    93CE
....................    {
....................       if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 1))|| In.B15 == 1)    // alarm1 occure and "Lock type"
092C2:  MOVLW  00
092C4:  BTFSC  xA2.6
092C6:  MOVLW  01
092C8:  MOVLB  E
092CA:  MOVWF  x45
092CC:  MOVLW  00
092CE:  MOVLB  D
092D0:  BTFSC  xAA.6
092D2:  MOVLW  01
092D4:  MOVLB  E
092D6:  XORWF  x45,W
092D8:  SUBLW  01
092DA:  BNZ   92E2
092DC:  MOVLB  D
092DE:  BTFSC  xAE.6
092E0:  BRA    92E8
092E2:  MOVLB  D
092E4:  BTFSS  xC2.6
092E6:  BRA    93C6
....................       //if(Inputt.B15 == 0)
....................       {
....................          if(Ack.B15 == 0)
092E8:  BTFSC  xBE.6
092EA:  BRA    93C4
....................          {
....................             if(In.B15 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
092EC:  BTFSC  xC2.6
092EE:  BRA    92FE
092F0:  MOVF   53,W
092F2:  SUBLW  0F
092F4:  BNZ   92FE
....................             {
....................                TimeBase1s = 100 ;            //reload again
092F6:  MOVLW  64
092F8:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
092FA:  MOVFF  54,1D
....................             }
.................... 
....................             In.B15 = 1;                                 // setbit in1
092FE:  BSF    xC2.6
....................             if(FlashingFlag == 0)
09300:  BTFSC  1A.1
09302:  BRA    9308
....................             {
....................                Output.B15 = 0;           //Flash output1
09304:  BCF    xA6.6
....................             }
09306:  BRA    930A
....................             else
....................             {
....................                Output.B15 = 1;
09308:  BSF    xA6.6
....................             }
.................... 
....................             if (~AutoTestFlag)
0930A:  BTFSC  1A.4
0930C:  BRA    932A
....................             {
....................                if(OutputBoth.B15 == 0)                  //Both output
0930E:  BTFSC  xB6.6
09310:  BRA    931C
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09312:  BSF    F89.4
09314:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09316:  BSF    F89.3
09318:  BCF    F92.3
....................                }
0931A:  BRA    932A
....................                else
....................                {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0931C:  BTFSS  xB2.6
0931E:  BRA    9326
09320:  BSF    F89.4
09322:  BCF    F92.4
09324:  BRA    932A
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09326:  BSF    F89.3
09328:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
0932A:  BTFSC  xD6.6
0932C:  BRA    93C4
0932E:  BTFSC  30.3
09330:  BRA    93C4
09332:  BTFSC  xBE.6
09334:  BRA    93C4
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
09336:  MOVLW  62
09338:  MOVWF  FF6
0933A:  MOVLW  08
0933C:  MOVWF  FF7
0933E:  MOVLB  0
09340:  CALL   2636
....................                putc('\n',CH2);
09344:  MOVLW  0A
09346:  MOVLB  E
09348:  MOVWF  x46
0934A:  MOVLB  0
0934C:  CALL   25F0
....................                delay_ms(10);
09350:  MOVLW  0A
09352:  MOVLB  E
09354:  MOVWF  x45
09356:  MOVLB  0
09358:  CALL   0A24
....................                
....................                SendSMS.B15 =1;
0935C:  MOVLB  D
0935E:  BSF    xD6.6
....................                fprintf(CH2,"AT+CMGS=\"");
09360:  MOVLW  6C
09362:  MOVWF  FF6
09364:  MOVLW  08
09366:  MOVWF  FF7
09368:  MOVLB  0
0936A:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
0936E:  MOVLW  0A
09370:  MOVWF  FEA
09372:  MOVLW  72
09374:  MOVWF  FE9
09376:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
0937A:  MOVLW  22
0937C:  MOVLB  E
0937E:  MOVWF  x46
09380:  MOVLB  0
09382:  CALL   25F0
....................                putc('\n',CH2);
09386:  MOVLW  0A
09388:  MOVLB  E
0938A:  MOVWF  x46
0938C:  MOVLB  0
0938E:  CALL   25F0
....................                delay_ms(50);
09392:  MOVLW  32
09394:  MOVLB  E
09396:  MOVWF  x45
09398:  MOVLB  0
0939A:  CALL   0A24
....................               
....................               printf(SMS_Massage15);  
0939E:  MOVLW  0C
093A0:  MOVWF  FEA
093A2:  MOVLW  41
093A4:  MOVWF  FE9
093A6:  CALL   6C76
....................               putc('\n',CH2);
093AA:  MOVLW  0A
093AC:  MOVLB  E
093AE:  MOVWF  x46
093B0:  MOVLB  0
093B2:  CALL   25F0
....................               putc(26,CH2);
093B6:  MOVLW  1A
093B8:  MOVLB  E
093BA:  MOVWF  x46
093BC:  MOVLB  0
093BE:  CALL   25F0
093C2:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
093C4:  BRA    93CC
....................       else if(FaultType.B15 == 1) Ack.B15 = 0;
093C6:  BTFSS  xAE.6
093C8:  BRA    93CC
093CA:  BCF    xBE.6
....................    }
093CC:  BRA    9492
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B15 ^ InputType.B15) == 1)
093CE:  MOVLW  00
093D0:  BTFSC  xA2.6
093D2:  MOVLW  01
093D4:  MOVLB  E
093D6:  MOVWF  x45
093D8:  MOVLW  00
093DA:  MOVLB  D
093DC:  BTFSC  xAA.6
093DE:  MOVLW  01
093E0:  MOVLB  E
093E2:  XORWF  x45,W
093E4:  SUBLW  01
093E6:  BNZ   948A
....................       {
....................          Output.B15 = 0; 
093E8:  MOVLB  D
093EA:  BCF    xA6.6
....................          if((SendSMS.B15 ==0)&& (functointest_f ==0) && (Ack.B15 ==0))
093EC:  BTFSC  xD6.6
093EE:  BRA    9486
093F0:  BTFSC  30.3
093F2:  BRA    9486
093F4:  BTFSC  xBE.6
093F6:  BRA    9486
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
093F8:  MOVLW  76
093FA:  MOVWF  FF6
093FC:  MOVLW  08
093FE:  MOVWF  FF7
09400:  MOVLB  0
09402:  CALL   2636
....................             putc('\n',CH2);
09406:  MOVLW  0A
09408:  MOVLB  E
0940A:  MOVWF  x46
0940C:  MOVLB  0
0940E:  CALL   25F0
....................             delay_ms(10);
09412:  MOVLW  0A
09414:  MOVLB  E
09416:  MOVWF  x45
09418:  MOVLB  0
0941A:  CALL   0A24
....................             
....................             SendSMS.B15 =1;
0941E:  MOVLB  D
09420:  BSF    xD6.6
....................             fprintf(CH2,"AT+CMGS=\"");
09422:  MOVLW  80
09424:  MOVWF  FF6
09426:  MOVLW  08
09428:  MOVWF  FF7
0942A:  MOVLB  0
0942C:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
09430:  MOVLW  0A
09432:  MOVWF  FEA
09434:  MOVLW  72
09436:  MOVWF  FE9
09438:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
0943C:  MOVLW  22
0943E:  MOVLB  E
09440:  MOVWF  x46
09442:  MOVLB  0
09444:  CALL   25F0
....................             putc('\n',CH2);
09448:  MOVLW  0A
0944A:  MOVLB  E
0944C:  MOVWF  x46
0944E:  MOVLB  0
09450:  CALL   25F0
....................             delay_ms(50);
09454:  MOVLW  32
09456:  MOVLB  E
09458:  MOVWF  x45
0945A:  MOVLB  0
0945C:  CALL   0A24
....................            
....................            printf(SMS_Massage15);  
09460:  MOVLW  0C
09462:  MOVWF  FEA
09464:  MOVLW  41
09466:  MOVWF  FE9
09468:  CALL   6C76
....................            putc('\n',CH2);
0946C:  MOVLW  0A
0946E:  MOVLB  E
09470:  MOVWF  x46
09472:  MOVLB  0
09474:  CALL   25F0
....................            putc(26,CH2);
09478:  MOVLW  1A
0947A:  MOVLB  E
0947C:  MOVWF  x46
0947E:  MOVLB  0
09480:  CALL   25F0
09484:  MOVLB  D
....................          }
....................       }
09486:  BRA    9492
09488:  MOVLB  E
....................       else
....................       {
....................          Output.B15 = 1;
0948A:  MOVLB  D
0948C:  BSF    xA6.6
....................          SendSMS.B15 =0;
0948E:  BCF    xD6.6
....................          functointest_f =0;
09490:  BCF    30.3
....................       }
....................    }
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if(AlarmIndicator.B16 == 1)    // Alarm Function
09492:  BTFSS  xBA.7
09494:  BRA    95A2
....................    {
....................       if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 1))|| In.B16 == 1)    // alarm1 occure and "Lock type"
09496:  MOVLW  00
09498:  BTFSC  xA2.7
0949A:  MOVLW  01
0949C:  MOVLB  E
0949E:  MOVWF  x45
094A0:  MOVLW  00
094A2:  MOVLB  D
094A4:  BTFSC  xAA.7
094A6:  MOVLW  01
094A8:  MOVLB  E
094AA:  XORWF  x45,W
094AC:  SUBLW  01
094AE:  BNZ   94B6
094B0:  MOVLB  D
094B2:  BTFSC  xAE.7
094B4:  BRA    94BC
094B6:  MOVLB  D
094B8:  BTFSS  xC2.7
094BA:  BRA    959A
....................       //if(Inputt.B16 == 0)
....................       {
....................          if(Ack.B16 == 0)
094BC:  BTFSC  xBE.7
094BE:  BRA    9598
....................          {
....................             if(In.B16 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
094C0:  BTFSC  xC2.7
094C2:  BRA    94D2
094C4:  MOVF   53,W
094C6:  SUBLW  0F
094C8:  BNZ   94D2
....................             {
....................                TimeBase1s = 100 ;            //reload again
094CA:  MOVLW  64
094CC:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
094CE:  MOVFF  54,1D
....................             }
.................... 
....................             In.B16 = 1;                                 // setbit in1
094D2:  BSF    xC2.7
....................             if(FlashingFlag == 0)
094D4:  BTFSC  1A.1
094D6:  BRA    94DC
....................             {
....................                Output.B16 = 0;           //Flash output1
094D8:  BCF    xA6.7
....................             }
094DA:  BRA    94DE
....................             else
....................             {
....................                Output.B16 = 1;
094DC:  BSF    xA6.7
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
094DE:  BTFSC  1A.4
094E0:  BRA    94FE
....................             {
....................                if(OutputBoth.B16 == 0)                  //Both output
094E2:  BTFSC  xB6.7
094E4:  BRA    94F0
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
094E6:  BSF    F89.4
094E8:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
094EA:  BSF    F89.3
094EC:  BCF    F92.3
....................                }
094EE:  BRA    94FE
....................                else
....................                {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
094F0:  BTFSS  xB2.7
094F2:  BRA    94FA
094F4:  BSF    F89.4
094F6:  BCF    F92.4
094F8:  BRA    94FE
....................                   else output_bit(Pbell,OnRelay);                          //Bell
094FA:  BSF    F89.3
094FC:  BCF    F92.3
....................                }
....................             }
....................  
....................             if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
094FE:  BTFSC  xD6.7
09500:  BRA    9598
09502:  BTFSC  30.3
09504:  BRA    9598
09506:  BTFSC  xBE.7
09508:  BRA    9598
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
0950A:  MOVLW  8A
0950C:  MOVWF  FF6
0950E:  MOVLW  08
09510:  MOVWF  FF7
09512:  MOVLB  0
09514:  CALL   2636
....................                putc('\n',CH2);
09518:  MOVLW  0A
0951A:  MOVLB  E
0951C:  MOVWF  x46
0951E:  MOVLB  0
09520:  CALL   25F0
....................                delay_ms(10);
09524:  MOVLW  0A
09526:  MOVLB  E
09528:  MOVWF  x45
0952A:  MOVLB  0
0952C:  CALL   0A24
....................                
....................                SendSMS.B16 =1;
09530:  MOVLB  D
09532:  BSF    xD6.7
....................                fprintf(CH2,"AT+CMGS=\"");
09534:  MOVLW  94
09536:  MOVWF  FF6
09538:  MOVLW  08
0953A:  MOVWF  FF7
0953C:  MOVLB  0
0953E:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
09542:  MOVLW  0A
09544:  MOVWF  FEA
09546:  MOVLW  72
09548:  MOVWF  FE9
0954A:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
0954E:  MOVLW  22
09550:  MOVLB  E
09552:  MOVWF  x46
09554:  MOVLB  0
09556:  CALL   25F0
....................                putc('\n',CH2);
0955A:  MOVLW  0A
0955C:  MOVLB  E
0955E:  MOVWF  x46
09560:  MOVLB  0
09562:  CALL   25F0
....................                delay_ms(50);
09566:  MOVLW  32
09568:  MOVLB  E
0956A:  MOVWF  x45
0956C:  MOVLB  0
0956E:  CALL   0A24
....................               
....................               printf(SMS_Massage16);  
09572:  MOVLW  0C
09574:  MOVWF  FEA
09576:  MOVLW  61
09578:  MOVWF  FE9
0957A:  CALL   6C76
....................               putc('\n',CH2);
0957E:  MOVLW  0A
09580:  MOVLB  E
09582:  MOVWF  x46
09584:  MOVLB  0
09586:  CALL   25F0
....................               putc(26,CH2);
0958A:  MOVLW  1A
0958C:  MOVLB  E
0958E:  MOVWF  x46
09590:  MOVLB  0
09592:  CALL   25F0
09596:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
09598:  BRA    95A0
....................       else if(FaultType.B16 == 1) Ack.B16 = 0;
0959A:  BTFSS  xAE.7
0959C:  BRA    95A0
0959E:  BCF    xBE.7
....................    }
095A0:  BRA    9666
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B16 ^ InputType.B16) == 1)
095A2:  MOVLW  00
095A4:  BTFSC  xA2.7
095A6:  MOVLW  01
095A8:  MOVLB  E
095AA:  MOVWF  x45
095AC:  MOVLW  00
095AE:  MOVLB  D
095B0:  BTFSC  xAA.7
095B2:  MOVLW  01
095B4:  MOVLB  E
095B6:  XORWF  x45,W
095B8:  SUBLW  01
095BA:  BNZ   965E
....................       {
....................          Output.B16 = 0;  
095BC:  MOVLB  D
095BE:  BCF    xA6.7
....................          if((SendSMS.B16 ==0)&& (functointest_f ==0) && (Ack.B16 ==0))
095C0:  BTFSC  xD6.7
095C2:  BRA    965A
095C4:  BTFSC  30.3
095C6:  BRA    965A
095C8:  BTFSC  xBE.7
095CA:  BRA    965A
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
095CC:  MOVLW  9E
095CE:  MOVWF  FF6
095D0:  MOVLW  08
095D2:  MOVWF  FF7
095D4:  MOVLB  0
095D6:  CALL   2636
....................             putc('\n',CH2);
095DA:  MOVLW  0A
095DC:  MOVLB  E
095DE:  MOVWF  x46
095E0:  MOVLB  0
095E2:  CALL   25F0
....................             delay_ms(10);
095E6:  MOVLW  0A
095E8:  MOVLB  E
095EA:  MOVWF  x45
095EC:  MOVLB  0
095EE:  CALL   0A24
....................             
....................             SendSMS.B16 =1;
095F2:  MOVLB  D
095F4:  BSF    xD6.7
....................             fprintf(CH2,"AT+CMGS=\"");
095F6:  MOVLW  A8
095F8:  MOVWF  FF6
095FA:  MOVLW  08
095FC:  MOVWF  FF7
095FE:  MOVLB  0
09600:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
09604:  MOVLW  0A
09606:  MOVWF  FEA
09608:  MOVLW  72
0960A:  MOVWF  FE9
0960C:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
09610:  MOVLW  22
09612:  MOVLB  E
09614:  MOVWF  x46
09616:  MOVLB  0
09618:  CALL   25F0
....................             putc('\n',CH2);
0961C:  MOVLW  0A
0961E:  MOVLB  E
09620:  MOVWF  x46
09622:  MOVLB  0
09624:  CALL   25F0
....................             delay_ms(50);
09628:  MOVLW  32
0962A:  MOVLB  E
0962C:  MOVWF  x45
0962E:  MOVLB  0
09630:  CALL   0A24
....................            
....................            printf(SMS_Massage16);  
09634:  MOVLW  0C
09636:  MOVWF  FEA
09638:  MOVLW  61
0963A:  MOVWF  FE9
0963C:  CALL   6C76
....................            putc('\n',CH2);
09640:  MOVLW  0A
09642:  MOVLB  E
09644:  MOVWF  x46
09646:  MOVLB  0
09648:  CALL   25F0
....................            putc(26,CH2);
0964C:  MOVLW  1A
0964E:  MOVLB  E
09650:  MOVWF  x46
09652:  MOVLB  0
09654:  CALL   25F0
09658:  MOVLB  D
....................          }
....................       }
0965A:  BRA    9666
0965C:  MOVLB  E
....................       else
....................       {
....................          Output.B16 = 1;
0965E:  MOVLB  D
09660:  BSF    xA6.7
....................          SendSMS.B16 =0;
09662:  BCF    xD6.7
....................          functointest_f =0;
09664:  BCF    30.3
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input17
....................    
....................    if(AlarmIndicator.B17 == 1)    // Alarm Function
09666:  BTFSS  xBB.0
09668:  BRA    9776
....................    {
....................       if((((Inputt.B17 ^ InputType.B17) == 1) && (FaultType.B17 == 1))|| In.B17 == 1)    // alarm1 occure and "Lock type"
0966A:  MOVLW  00
0966C:  BTFSC  xA3.0
0966E:  MOVLW  01
09670:  MOVLB  E
09672:  MOVWF  x45
09674:  MOVLW  00
09676:  MOVLB  D
09678:  BTFSC  xAB.0
0967A:  MOVLW  01
0967C:  MOVLB  E
0967E:  XORWF  x45,W
09680:  SUBLW  01
09682:  BNZ   968A
09684:  MOVLB  D
09686:  BTFSC  xAF.0
09688:  BRA    9690
0968A:  MOVLB  D
0968C:  BTFSS  xC3.0
0968E:  BRA    976E
....................       {
....................          if(Ack.B17 == 0)
09690:  BTFSC  xBF.0
09692:  BRA    976C
....................          {
....................             if(In.B17 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
09694:  BTFSC  xC3.0
09696:  BRA    96A6
09698:  MOVF   53,W
0969A:  SUBLW  0F
0969C:  BNZ   96A6
....................             {
....................                TimeBase1s = 100 ;            //reload again
0969E:  MOVLW  64
096A0:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
096A2:  MOVFF  54,1D
....................             }
.................... 
....................             In.B17 = 1;                                 // setbit in1
096A6:  BSF    xC3.0
....................             if(FlashingFlag == 0)
096A8:  BTFSC  1A.1
096AA:  BRA    96B0
....................             {
....................                Output.B17 = 0;           //Flash output1
096AC:  BCF    xA7.0
....................             }
096AE:  BRA    96B2
....................             else
....................             {
....................                Output.B17 = 1;
096B0:  BSF    xA7.0
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
096B2:  BTFSC  1A.4
096B4:  BRA    96D2
....................             {
....................                if(OutputBoth.B17 == 0)                  //Both output
096B6:  BTFSC  xB7.0
096B8:  BRA    96C4
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
096BA:  BSF    F89.4
096BC:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
096BE:  BSF    F89.3
096C0:  BCF    F92.3
....................                }
096C2:  BRA    96D2
....................                else
....................                {
....................                   if(OutputType.B17 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
096C4:  BTFSS  xB3.0
096C6:  BRA    96CE
096C8:  BSF    F89.4
096CA:  BCF    F92.4
096CC:  BRA    96D2
....................                   else output_bit(Pbell,OnRelay);                          //Bell
096CE:  BSF    F89.3
096D0:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B17 ==0)&& (functointest_f ==0) && (Ack.B17 ==0))
096D2:  BTFSC  xD7.0
096D4:  BRA    976C
096D6:  BTFSC  30.3
096D8:  BRA    976C
096DA:  BTFSC  xBF.0
096DC:  BRA    976C
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
096DE:  MOVLW  B2
096E0:  MOVWF  FF6
096E2:  MOVLW  08
096E4:  MOVWF  FF7
096E6:  MOVLB  0
096E8:  CALL   2636
....................                putc('\n',CH2);
096EC:  MOVLW  0A
096EE:  MOVLB  E
096F0:  MOVWF  x46
096F2:  MOVLB  0
096F4:  CALL   25F0
....................                delay_ms(10);
096F8:  MOVLW  0A
096FA:  MOVLB  E
096FC:  MOVWF  x45
096FE:  MOVLB  0
09700:  CALL   0A24
....................                
....................                SendSMS.B17 =1;
09704:  MOVLB  D
09706:  BSF    xD7.0
....................                fprintf(CH2,"AT+CMGS=\"");
09708:  MOVLW  BC
0970A:  MOVWF  FF6
0970C:  MOVLW  08
0970E:  MOVWF  FF7
09710:  MOVLB  0
09712:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
09716:  MOVLW  0A
09718:  MOVWF  FEA
0971A:  MOVLW  72
0971C:  MOVWF  FE9
0971E:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
09722:  MOVLW  22
09724:  MOVLB  E
09726:  MOVWF  x46
09728:  MOVLB  0
0972A:  CALL   25F0
....................                putc('\n',CH2);
0972E:  MOVLW  0A
09730:  MOVLB  E
09732:  MOVWF  x46
09734:  MOVLB  0
09736:  CALL   25F0
....................                delay_ms(50);
0973A:  MOVLW  32
0973C:  MOVLB  E
0973E:  MOVWF  x45
09740:  MOVLB  0
09742:  CALL   0A24
....................               
....................               printf(SMS_Massage17);  
09746:  MOVLW  0C
09748:  MOVWF  FEA
0974A:  MOVLW  81
0974C:  MOVWF  FE9
0974E:  CALL   6C76
....................               putc('\n',CH2);
09752:  MOVLW  0A
09754:  MOVLB  E
09756:  MOVWF  x46
09758:  MOVLB  0
0975A:  CALL   25F0
....................               putc(26,CH2);
0975E:  MOVLW  1A
09760:  MOVLB  E
09762:  MOVWF  x46
09764:  MOVLB  0
09766:  CALL   25F0
0976A:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
0976C:  BRA    9774
....................       else if(FaultType.B17 == 1) Ack.B17 = 0;
0976E:  BTFSS  xAF.0
09770:  BRA    9774
09772:  BCF    xBF.0
....................    }
09774:  BRA    983A
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B17 ^ InputType.B17) == 1)
09776:  MOVLW  00
09778:  BTFSC  xA3.0
0977A:  MOVLW  01
0977C:  MOVLB  E
0977E:  MOVWF  x45
09780:  MOVLW  00
09782:  MOVLB  D
09784:  BTFSC  xAB.0
09786:  MOVLW  01
09788:  MOVLB  E
0978A:  XORWF  x45,W
0978C:  SUBLW  01
0978E:  BNZ   9832
....................       {
....................          Output.B17 = 0;
09790:  MOVLB  D
09792:  BCF    xA7.0
....................          if((SendSMS.B17 ==0)&& (functointest_f ==0) && (Ack.B17 ==0))
09794:  BTFSC  xD7.0
09796:  BRA    982E
09798:  BTFSC  30.3
0979A:  BRA    982E
0979C:  BTFSC  xBF.0
0979E:  BRA    982E
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
097A0:  MOVLW  C6
097A2:  MOVWF  FF6
097A4:  MOVLW  08
097A6:  MOVWF  FF7
097A8:  MOVLB  0
097AA:  CALL   2636
....................             putc('\n',CH2);
097AE:  MOVLW  0A
097B0:  MOVLB  E
097B2:  MOVWF  x46
097B4:  MOVLB  0
097B6:  CALL   25F0
....................             delay_ms(10);
097BA:  MOVLW  0A
097BC:  MOVLB  E
097BE:  MOVWF  x45
097C0:  MOVLB  0
097C2:  CALL   0A24
....................             
....................             SendSMS.B17 =1;
097C6:  MOVLB  D
097C8:  BSF    xD7.0
....................             fprintf(CH2,"AT+CMGS=\"");
097CA:  MOVLW  D0
097CC:  MOVWF  FF6
097CE:  MOVLW  08
097D0:  MOVWF  FF7
097D2:  MOVLB  0
097D4:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
097D8:  MOVLW  0A
097DA:  MOVWF  FEA
097DC:  MOVLW  72
097DE:  MOVWF  FE9
097E0:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
097E4:  MOVLW  22
097E6:  MOVLB  E
097E8:  MOVWF  x46
097EA:  MOVLB  0
097EC:  CALL   25F0
....................             putc('\n',CH2);
097F0:  MOVLW  0A
097F2:  MOVLB  E
097F4:  MOVWF  x46
097F6:  MOVLB  0
097F8:  CALL   25F0
....................             delay_ms(50);
097FC:  MOVLW  32
097FE:  MOVLB  E
09800:  MOVWF  x45
09802:  MOVLB  0
09804:  CALL   0A24
....................            
....................            printf(SMS_Massage17);  
09808:  MOVLW  0C
0980A:  MOVWF  FEA
0980C:  MOVLW  81
0980E:  MOVWF  FE9
09810:  CALL   6C76
....................            putc('\n',CH2);
09814:  MOVLW  0A
09816:  MOVLB  E
09818:  MOVWF  x46
0981A:  MOVLB  0
0981C:  CALL   25F0
....................            putc(26,CH2);
09820:  MOVLW  1A
09822:  MOVLB  E
09824:  MOVWF  x46
09826:  MOVLB  0
09828:  CALL   25F0
0982C:  MOVLB  D
....................          }
....................       }
0982E:  BRA    983A
09830:  MOVLB  E
....................       else
....................       {
....................          Output.B17 = 1;
09832:  MOVLB  D
09834:  BSF    xA7.0
....................          SendSMS.B17 =0;
09836:  BCF    xD7.0
....................          functointest_f =0;
09838:  BCF    30.3
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... //input18
....................    if(AlarmIndicator.B18 == 1)    // Alarm Function
0983A:  BTFSS  xBB.1
0983C:  BRA    994A
....................    {
....................       if((((Inputt.B18 ^ InputType.B18) == 1) && (FaultType.B18 == 1))|| In.B18 == 1)    // alarm1 occure and "Lock type"
0983E:  MOVLW  00
09840:  BTFSC  xA3.1
09842:  MOVLW  01
09844:  MOVLB  E
09846:  MOVWF  x45
09848:  MOVLW  00
0984A:  MOVLB  D
0984C:  BTFSC  xAB.1
0984E:  MOVLW  01
09850:  MOVLB  E
09852:  XORWF  x45,W
09854:  SUBLW  01
09856:  BNZ   985E
09858:  MOVLB  D
0985A:  BTFSC  xAF.1
0985C:  BRA    9864
0985E:  MOVLB  D
09860:  BTFSS  xC3.1
09862:  BRA    9942
....................       //if(Inputt.B18 == 0)
....................       {
....................          if(Ack.B18 == 0)
09864:  BTFSC  xBF.1
09866:  BRA    9940
....................          {
....................             if(In.B18 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
09868:  BTFSC  xC3.1
0986A:  BRA    987A
0986C:  MOVF   53,W
0986E:  SUBLW  0F
09870:  BNZ   987A
....................             {
....................                TimeBase1s = 100 ;            //reload again
09872:  MOVLW  64
09874:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
09876:  MOVFF  54,1D
....................             }
.................... 
....................             In.B18 = 1;                                 // setbit in1
0987A:  BSF    xC3.1
....................             if(FlashingFlag == 0)
0987C:  BTFSC  1A.1
0987E:  BRA    9884
....................             {
....................                Output.B18 = 0;           //Flash output1
09880:  BCF    xA7.1
....................             }
09882:  BRA    9886
....................             else
....................             {
....................                Output.B18 = 1;
09884:  BSF    xA7.1
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
09886:  BTFSC  1A.4
09888:  BRA    98A6
....................             {
....................                if(OutputBoth.B18 == 0)                  //Both output
0988A:  BTFSC  xB7.1
0988C:  BRA    9898
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0988E:  BSF    F89.4
09890:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09892:  BSF    F89.3
09894:  BCF    F92.3
....................                }
09896:  BRA    98A6
....................                else
....................                {
....................                   if(OutputType.B18 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09898:  BTFSS  xB3.1
0989A:  BRA    98A2
0989C:  BSF    F89.4
0989E:  BCF    F92.4
098A0:  BRA    98A6
....................                   else output_bit(Pbell,OnRelay);                          //Bell
098A2:  BSF    F89.3
098A4:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B18 ==0)&& (functointest_f ==0) && (Ack.B18 ==0))
098A6:  BTFSC  xD7.1
098A8:  BRA    9940
098AA:  BTFSC  30.3
098AC:  BRA    9940
098AE:  BTFSC  xBF.1
098B0:  BRA    9940
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
098B2:  MOVLW  DA
098B4:  MOVWF  FF6
098B6:  MOVLW  08
098B8:  MOVWF  FF7
098BA:  MOVLB  0
098BC:  CALL   2636
....................                putc('\n',CH2);
098C0:  MOVLW  0A
098C2:  MOVLB  E
098C4:  MOVWF  x46
098C6:  MOVLB  0
098C8:  CALL   25F0
....................                delay_ms(10);
098CC:  MOVLW  0A
098CE:  MOVLB  E
098D0:  MOVWF  x45
098D2:  MOVLB  0
098D4:  CALL   0A24
....................                
....................                SendSMS.B18 =1;
098D8:  MOVLB  D
098DA:  BSF    xD7.1
....................                fprintf(CH2,"AT+CMGS=\"");
098DC:  MOVLW  E4
098DE:  MOVWF  FF6
098E0:  MOVLW  08
098E2:  MOVWF  FF7
098E4:  MOVLB  0
098E6:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
098EA:  MOVLW  0A
098EC:  MOVWF  FEA
098EE:  MOVLW  72
098F0:  MOVWF  FE9
098F2:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
098F6:  MOVLW  22
098F8:  MOVLB  E
098FA:  MOVWF  x46
098FC:  MOVLB  0
098FE:  CALL   25F0
....................                putc('\n',CH2);
09902:  MOVLW  0A
09904:  MOVLB  E
09906:  MOVWF  x46
09908:  MOVLB  0
0990A:  CALL   25F0
....................                delay_ms(50);
0990E:  MOVLW  32
09910:  MOVLB  E
09912:  MOVWF  x45
09914:  MOVLB  0
09916:  CALL   0A24
....................               
....................               printf(SMS_Massage18);  
0991A:  MOVLW  0C
0991C:  MOVWF  FEA
0991E:  MOVLW  A1
09920:  MOVWF  FE9
09922:  CALL   6C76
....................               putc('\n',CH2);
09926:  MOVLW  0A
09928:  MOVLB  E
0992A:  MOVWF  x46
0992C:  MOVLB  0
0992E:  CALL   25F0
....................               putc(26,CH2);
09932:  MOVLW  1A
09934:  MOVLB  E
09936:  MOVWF  x46
09938:  MOVLB  0
0993A:  CALL   25F0
0993E:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
09940:  BRA    9948
....................       else if(FaultType.B18 == 1) Ack.B18 = 0;
09942:  BTFSS  xAF.1
09944:  BRA    9948
09946:  BCF    xBF.1
....................    }
09948:  BRA    9A0E
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B18 ^ InputType.B18) == 1)
0994A:  MOVLW  00
0994C:  BTFSC  xA3.1
0994E:  MOVLW  01
09950:  MOVLB  E
09952:  MOVWF  x45
09954:  MOVLW  00
09956:  MOVLB  D
09958:  BTFSC  xAB.1
0995A:  MOVLW  01
0995C:  MOVLB  E
0995E:  XORWF  x45,W
09960:  SUBLW  01
09962:  BNZ   9A06
....................       {
....................          Output.B18 = 0;
09964:  MOVLB  D
09966:  BCF    xA7.1
....................          // SMS Sending   
....................          if((SendSMS.B18 ==0)&& (functointest_f ==0) && (Ack.B18 ==0))
09968:  BTFSC  xD7.1
0996A:  BRA    9A02
0996C:  BTFSC  30.3
0996E:  BRA    9A02
09970:  BTFSC  xBF.1
09972:  BRA    9A02
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
09974:  MOVLW  EE
09976:  MOVWF  FF6
09978:  MOVLW  08
0997A:  MOVWF  FF7
0997C:  MOVLB  0
0997E:  CALL   2636
....................             putc('\n',CH2);
09982:  MOVLW  0A
09984:  MOVLB  E
09986:  MOVWF  x46
09988:  MOVLB  0
0998A:  CALL   25F0
....................             delay_ms(10);
0998E:  MOVLW  0A
09990:  MOVLB  E
09992:  MOVWF  x45
09994:  MOVLB  0
09996:  CALL   0A24
....................             
....................             SendSMS.B18 =1;
0999A:  MOVLB  D
0999C:  BSF    xD7.1
....................             fprintf(CH2,"AT+CMGS=\"");
0999E:  MOVLW  F8
099A0:  MOVWF  FF6
099A2:  MOVLW  08
099A4:  MOVWF  FF7
099A6:  MOVLB  0
099A8:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
099AC:  MOVLW  0A
099AE:  MOVWF  FEA
099B0:  MOVLW  72
099B2:  MOVWF  FE9
099B4:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
099B8:  MOVLW  22
099BA:  MOVLB  E
099BC:  MOVWF  x46
099BE:  MOVLB  0
099C0:  CALL   25F0
....................             putc('\n',CH2);
099C4:  MOVLW  0A
099C6:  MOVLB  E
099C8:  MOVWF  x46
099CA:  MOVLB  0
099CC:  CALL   25F0
....................             delay_ms(50);
099D0:  MOVLW  32
099D2:  MOVLB  E
099D4:  MOVWF  x45
099D6:  MOVLB  0
099D8:  CALL   0A24
....................            
....................            printf(SMS_Massage18);  
099DC:  MOVLW  0C
099DE:  MOVWF  FEA
099E0:  MOVLW  A1
099E2:  MOVWF  FE9
099E4:  CALL   6C76
....................            putc('\n',CH2);
099E8:  MOVLW  0A
099EA:  MOVLB  E
099EC:  MOVWF  x46
099EE:  MOVLB  0
099F0:  CALL   25F0
....................            putc(26,CH2);
099F4:  MOVLW  1A
099F6:  MOVLB  E
099F8:  MOVWF  x46
099FA:  MOVLB  0
099FC:  CALL   25F0
09A00:  MOVLB  D
....................          }
....................       }
09A02:  BRA    9A0E
09A04:  MOVLB  E
....................       else
....................       {
....................          Output.B18 = 1;
09A06:  MOVLB  D
09A08:  BSF    xA7.1
....................          SendSMS.B18 =0;
09A0A:  BCF    xD7.1
....................          functointest_f =0;
09A0C:  BCF    30.3
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input19
....................    if(AlarmIndicator.B19 == 1)    // Alarm Function
09A0E:  BTFSS  xBB.2
09A10:  BRA    9B1E
....................    {
....................       if((((Inputt.B19 ^ InputType.B19) == 1) && (FaultType.B19 == 1))|| In.B19 == 1)    // alarm1 occure and "Lock type"
09A12:  MOVLW  00
09A14:  BTFSC  xA3.2
09A16:  MOVLW  01
09A18:  MOVLB  E
09A1A:  MOVWF  x45
09A1C:  MOVLW  00
09A1E:  MOVLB  D
09A20:  BTFSC  xAB.2
09A22:  MOVLW  01
09A24:  MOVLB  E
09A26:  XORWF  x45,W
09A28:  SUBLW  01
09A2A:  BNZ   9A32
09A2C:  MOVLB  D
09A2E:  BTFSC  xAF.2
09A30:  BRA    9A38
09A32:  MOVLB  D
09A34:  BTFSS  xC3.2
09A36:  BRA    9B16
....................       //if(Inputt.B19 == 0)
....................       {
....................          if(Ack.B19 == 0)
09A38:  BTFSC  xBF.2
09A3A:  BRA    9B14
....................          {
....................             if(In.B19 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
09A3C:  BTFSC  xC3.2
09A3E:  BRA    9A4E
09A40:  MOVF   53,W
09A42:  SUBLW  0F
09A44:  BNZ   9A4E
....................             {
....................                TimeBase1s = 100 ;            //reload again
09A46:  MOVLW  64
09A48:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
09A4A:  MOVFF  54,1D
....................             }
.................... 
....................             In.B19 = 1;                                 // setbit in1
09A4E:  BSF    xC3.2
....................             if(FlashingFlag == 0)
09A50:  BTFSC  1A.1
09A52:  BRA    9A58
....................             {
....................                Output.B19 = 0;           //Flash output1
09A54:  BCF    xA7.2
....................             }
09A56:  BRA    9A5A
....................             else
....................             {
....................                Output.B19 = 1;
09A58:  BSF    xA7.2
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
09A5A:  BTFSC  1A.4
09A5C:  BRA    9A7A
....................             {
....................                if(OutputBoth.B19 == 0)                  //Both output
09A5E:  BTFSC  xB7.2
09A60:  BRA    9A6C
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09A62:  BSF    F89.4
09A64:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09A66:  BSF    F89.3
09A68:  BCF    F92.3
....................                }
09A6A:  BRA    9A7A
....................                else
....................                {
....................                   if(OutputType.B19 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09A6C:  BTFSS  xB3.2
09A6E:  BRA    9A76
09A70:  BSF    F89.4
09A72:  BCF    F92.4
09A74:  BRA    9A7A
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09A76:  BSF    F89.3
09A78:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B19 ==0)&& (functointest_f ==0) && (Ack.B19 ==0))
09A7A:  BTFSC  xD7.2
09A7C:  BRA    9B14
09A7E:  BTFSC  30.3
09A80:  BRA    9B14
09A82:  BTFSC  xBF.2
09A84:  BRA    9B14
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
09A86:  MOVLW  02
09A88:  MOVWF  FF6
09A8A:  MOVLW  09
09A8C:  MOVWF  FF7
09A8E:  MOVLB  0
09A90:  CALL   2636
....................                putc('\n',CH2);
09A94:  MOVLW  0A
09A96:  MOVLB  E
09A98:  MOVWF  x46
09A9A:  MOVLB  0
09A9C:  CALL   25F0
....................                delay_ms(10);
09AA0:  MOVLW  0A
09AA2:  MOVLB  E
09AA4:  MOVWF  x45
09AA6:  MOVLB  0
09AA8:  CALL   0A24
....................                
....................                SendSMS.B19 =1;
09AAC:  MOVLB  D
09AAE:  BSF    xD7.2
....................                fprintf(CH2,"AT+CMGS=\"");
09AB0:  MOVLW  0C
09AB2:  MOVWF  FF6
09AB4:  MOVLW  09
09AB6:  MOVWF  FF7
09AB8:  MOVLB  0
09ABA:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
09ABE:  MOVLW  0A
09AC0:  MOVWF  FEA
09AC2:  MOVLW  72
09AC4:  MOVWF  FE9
09AC6:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
09ACA:  MOVLW  22
09ACC:  MOVLB  E
09ACE:  MOVWF  x46
09AD0:  MOVLB  0
09AD2:  CALL   25F0
....................                putc('\n',CH2);
09AD6:  MOVLW  0A
09AD8:  MOVLB  E
09ADA:  MOVWF  x46
09ADC:  MOVLB  0
09ADE:  CALL   25F0
....................                delay_ms(50);
09AE2:  MOVLW  32
09AE4:  MOVLB  E
09AE6:  MOVWF  x45
09AE8:  MOVLB  0
09AEA:  CALL   0A24
....................               
....................               printf(SMS_Massage19);  
09AEE:  MOVLW  0C
09AF0:  MOVWF  FEA
09AF2:  MOVLW  C1
09AF4:  MOVWF  FE9
09AF6:  CALL   6C76
....................               putc('\n',CH2);
09AFA:  MOVLW  0A
09AFC:  MOVLB  E
09AFE:  MOVWF  x46
09B00:  MOVLB  0
09B02:  CALL   25F0
....................               putc(26,CH2);
09B06:  MOVLW  1A
09B08:  MOVLB  E
09B0A:  MOVWF  x46
09B0C:  MOVLB  0
09B0E:  CALL   25F0
09B12:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
09B14:  BRA    9B1C
....................       else if(FaultType.B19 == 1) Ack.B19 = 0;
09B16:  BTFSS  xAF.2
09B18:  BRA    9B1C
09B1A:  BCF    xBF.2
....................    }
09B1C:  BRA    9BE2
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B19 ^ InputType.B19) == 1)
09B1E:  MOVLW  00
09B20:  BTFSC  xA3.2
09B22:  MOVLW  01
09B24:  MOVLB  E
09B26:  MOVWF  x45
09B28:  MOVLW  00
09B2A:  MOVLB  D
09B2C:  BTFSC  xAB.2
09B2E:  MOVLW  01
09B30:  MOVLB  E
09B32:  XORWF  x45,W
09B34:  SUBLW  01
09B36:  BNZ   9BDA
....................       {
....................          Output.B19 = 0;
09B38:  MOVLB  D
09B3A:  BCF    xA7.2
....................          // SMS Sending   
....................          if((SendSMS.B19 ==0)&& (functointest_f ==0) && (Ack.B19 ==0))
09B3C:  BTFSC  xD7.2
09B3E:  BRA    9BD6
09B40:  BTFSC  30.3
09B42:  BRA    9BD6
09B44:  BTFSC  xBF.2
09B46:  BRA    9BD6
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
09B48:  MOVLW  16
09B4A:  MOVWF  FF6
09B4C:  MOVLW  09
09B4E:  MOVWF  FF7
09B50:  MOVLB  0
09B52:  CALL   2636
....................             putc('\n',CH2);
09B56:  MOVLW  0A
09B58:  MOVLB  E
09B5A:  MOVWF  x46
09B5C:  MOVLB  0
09B5E:  CALL   25F0
....................             delay_ms(10);
09B62:  MOVLW  0A
09B64:  MOVLB  E
09B66:  MOVWF  x45
09B68:  MOVLB  0
09B6A:  CALL   0A24
....................             
....................             SendSMS.B19 =1;
09B6E:  MOVLB  D
09B70:  BSF    xD7.2
....................             fprintf(CH2,"AT+CMGS=\"");
09B72:  MOVLW  20
09B74:  MOVWF  FF6
09B76:  MOVLW  09
09B78:  MOVWF  FF7
09B7A:  MOVLB  0
09B7C:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
09B80:  MOVLW  0A
09B82:  MOVWF  FEA
09B84:  MOVLW  72
09B86:  MOVWF  FE9
09B88:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
09B8C:  MOVLW  22
09B8E:  MOVLB  E
09B90:  MOVWF  x46
09B92:  MOVLB  0
09B94:  CALL   25F0
....................             putc('\n',CH2);
09B98:  MOVLW  0A
09B9A:  MOVLB  E
09B9C:  MOVWF  x46
09B9E:  MOVLB  0
09BA0:  CALL   25F0
....................             delay_ms(50);
09BA4:  MOVLW  32
09BA6:  MOVLB  E
09BA8:  MOVWF  x45
09BAA:  MOVLB  0
09BAC:  CALL   0A24
....................            
....................            printf(SMS_Massage19);  
09BB0:  MOVLW  0C
09BB2:  MOVWF  FEA
09BB4:  MOVLW  C1
09BB6:  MOVWF  FE9
09BB8:  CALL   6C76
....................            putc('\n',CH2);
09BBC:  MOVLW  0A
09BBE:  MOVLB  E
09BC0:  MOVWF  x46
09BC2:  MOVLB  0
09BC4:  CALL   25F0
....................            putc(26,CH2);
09BC8:  MOVLW  1A
09BCA:  MOVLB  E
09BCC:  MOVWF  x46
09BCE:  MOVLB  0
09BD0:  CALL   25F0
09BD4:  MOVLB  D
....................          }
....................       }
09BD6:  BRA    9BE2
09BD8:  MOVLB  E
....................       else
....................       {
....................          Output.B19 = 1;
09BDA:  MOVLB  D
09BDC:  BSF    xA7.2
....................          SendSMS.B19 =0;
09BDE:  BCF    xD7.2
....................          functointest_f =0;
09BE0:  BCF    30.3
....................       }
....................    }
.................... //}
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////
.................... //input20
....................    if(AlarmIndicator.B20 == 1)    // Alarm Function
09BE2:  BTFSS  xBB.3
09BE4:  BRA    9CF2
....................    {
....................       if((((Inputt.B20 ^ InputType.B20) == 1) && (FaultType.B20 == 1))|| In.B20 == 1)    // alarm1 occure and "Lock type"
09BE6:  MOVLW  00
09BE8:  BTFSC  xA3.3
09BEA:  MOVLW  01
09BEC:  MOVLB  E
09BEE:  MOVWF  x45
09BF0:  MOVLW  00
09BF2:  MOVLB  D
09BF4:  BTFSC  xAB.3
09BF6:  MOVLW  01
09BF8:  MOVLB  E
09BFA:  XORWF  x45,W
09BFC:  SUBLW  01
09BFE:  BNZ   9C06
09C00:  MOVLB  D
09C02:  BTFSC  xAF.3
09C04:  BRA    9C0C
09C06:  MOVLB  D
09C08:  BTFSS  xC3.3
09C0A:  BRA    9CEA
....................       //if(Inputt.B18 == 0)
....................       {
....................          if(Ack.B20 == 0)
09C0C:  BTFSC  xBF.3
09C0E:  BRA    9CE8
....................          {
....................             if(In.B20 == 0 && AutoAck == 0x0F)   //use auto acknowlegde
09C10:  BTFSC  xC3.3
09C12:  BRA    9C22
09C14:  MOVF   53,W
09C16:  SUBLW  0F
09C18:  BNZ   9C22
....................             {
....................                TimeBase1s = 100 ;            //reload again
09C1A:  MOVLW  64
09C1C:  MOVWF  1C
....................                AutoAckDelayTime = AutoAckTime ;
09C1E:  MOVFF  54,1D
....................             }
.................... 
....................             In.B20 = 1;                                 // setbit in1
09C22:  BSF    xC3.3
....................             if(FlashingFlag == 0)
09C24:  BTFSC  1A.1
09C26:  BRA    9C2C
....................             {
....................                Output.B20 = 0;           //Flash output1
09C28:  BCF    xA7.3
....................             }
09C2A:  BRA    9C2E
....................             else
....................             {
....................                Output.B20 = 1;
09C2C:  BSF    xA7.3
....................             }
.................... 
.................... 
....................             if (~AutoTestFlag)
09C2E:  BTFSC  1A.4
09C30:  BRA    9C4E
....................             {
....................                if(OutputBoth.B20 == 0)                  //Both output
09C32:  BTFSC  xB7.3
09C34:  BRA    9C40
....................                {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09C36:  BSF    F89.4
09C38:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09C3A:  BSF    F89.3
09C3C:  BCF    F92.3
....................                }
09C3E:  BRA    9C4E
....................                else
....................                {
....................                   if(OutputType.B20 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09C40:  BTFSS  xB3.3
09C42:  BRA    9C4A
09C44:  BSF    F89.4
09C46:  BCF    F92.4
09C48:  BRA    9C4E
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09C4A:  BSF    F89.3
09C4C:  BCF    F92.3
....................                }
....................             }
....................             // SMS Sending   
....................             if((SendSMS.B20 ==0)&& (functointest_f ==0) && (Ack.B20 ==0))
09C4E:  BTFSC  xD7.3
09C50:  BRA    9CE8
09C52:  BTFSC  30.3
09C54:  BRA    9CE8
09C56:  BTFSC  xBF.3
09C58:  BRA    9CE8
....................             {
....................                fprintf(CH2,"AT+CMGF=1"); 
09C5A:  MOVLW  2A
09C5C:  MOVWF  FF6
09C5E:  MOVLW  09
09C60:  MOVWF  FF7
09C62:  MOVLB  0
09C64:  CALL   2636
....................                putc('\n',CH2);
09C68:  MOVLW  0A
09C6A:  MOVLB  E
09C6C:  MOVWF  x46
09C6E:  MOVLB  0
09C70:  CALL   25F0
....................                delay_ms(10);
09C74:  MOVLW  0A
09C76:  MOVLB  E
09C78:  MOVWF  x45
09C7A:  MOVLB  0
09C7C:  CALL   0A24
....................                
....................                SendSMS.B20 =1;
09C80:  MOVLB  D
09C82:  BSF    xD7.3
....................                fprintf(CH2,"AT+CMGS=\"");
09C84:  MOVLW  34
09C86:  MOVWF  FF6
09C88:  MOVLW  09
09C8A:  MOVWF  FF7
09C8C:  MOVLB  0
09C8E:  CALL   2636
....................                fprintf(CH2,sms_phonenumber);
09C92:  MOVLW  0A
09C94:  MOVWF  FEA
09C96:  MOVLW  72
09C98:  MOVWF  FE9
09C9A:  CALL   6C76
....................                
....................                fprintf(CH2,"\"");
09C9E:  MOVLW  22
09CA0:  MOVLB  E
09CA2:  MOVWF  x46
09CA4:  MOVLB  0
09CA6:  CALL   25F0
....................                putc('\n',CH2);
09CAA:  MOVLW  0A
09CAC:  MOVLB  E
09CAE:  MOVWF  x46
09CB0:  MOVLB  0
09CB2:  CALL   25F0
....................                delay_ms(50);
09CB6:  MOVLW  32
09CB8:  MOVLB  E
09CBA:  MOVWF  x45
09CBC:  MOVLB  0
09CBE:  CALL   0A24
....................               
....................               printf(SMS_Massage20);  
09CC2:  MOVLW  0C
09CC4:  MOVWF  FEA
09CC6:  MOVLW  E1
09CC8:  MOVWF  FE9
09CCA:  CALL   6C76
....................               putc('\n',CH2);
09CCE:  MOVLW  0A
09CD0:  MOVLB  E
09CD2:  MOVWF  x46
09CD4:  MOVLB  0
09CD6:  CALL   25F0
....................               putc(26,CH2);
09CDA:  MOVLW  1A
09CDC:  MOVLB  E
09CDE:  MOVWF  x46
09CE0:  MOVLB  0
09CE2:  CALL   25F0
09CE6:  MOVLB  D
....................             }
....................           }
.................... 
....................       }
09CE8:  BRA    9CF0
....................       else if(FaultType.B20 == 1) Ack.B20 = 0;
09CEA:  BTFSS  xAF.3
09CEC:  BRA    9CF0
09CEE:  BCF    xBF.3
....................    }
09CF0:  BRA    9DB6
....................    else  //Indicator Function
....................    {
....................       if((Inputt.B20 ^ InputType.B20) == 1)
09CF2:  MOVLW  00
09CF4:  BTFSC  xA3.3
09CF6:  MOVLW  01
09CF8:  MOVLB  E
09CFA:  MOVWF  x45
09CFC:  MOVLW  00
09CFE:  MOVLB  D
09D00:  BTFSC  xAB.3
09D02:  MOVLW  01
09D04:  MOVLB  E
09D06:  XORWF  x45,W
09D08:  SUBLW  01
09D0A:  BNZ   9DAE
....................       {
....................          Output.B20 = 0;
09D0C:  MOVLB  D
09D0E:  BCF    xA7.3
....................          // SMS Sending   
....................          if((SendSMS.B20 ==0)&& (functointest_f ==0) && (Ack.B20 ==0))
09D10:  BTFSC  xD7.3
09D12:  BRA    9DAA
09D14:  BTFSC  30.3
09D16:  BRA    9DAA
09D18:  BTFSC  xBF.3
09D1A:  BRA    9DAA
....................          {
....................             fprintf(CH2,"AT+CMGF=1"); 
09D1C:  MOVLW  3E
09D1E:  MOVWF  FF6
09D20:  MOVLW  09
09D22:  MOVWF  FF7
09D24:  MOVLB  0
09D26:  CALL   2636
....................             putc('\n',CH2);
09D2A:  MOVLW  0A
09D2C:  MOVLB  E
09D2E:  MOVWF  x46
09D30:  MOVLB  0
09D32:  CALL   25F0
....................             delay_ms(10);
09D36:  MOVLW  0A
09D38:  MOVLB  E
09D3A:  MOVWF  x45
09D3C:  MOVLB  0
09D3E:  CALL   0A24
....................             
....................             SendSMS.B20 =1;
09D42:  MOVLB  D
09D44:  BSF    xD7.3
....................             fprintf(CH2,"AT+CMGS=\"");
09D46:  MOVLW  48
09D48:  MOVWF  FF6
09D4A:  MOVLW  09
09D4C:  MOVWF  FF7
09D4E:  MOVLB  0
09D50:  CALL   2636
....................             fprintf(CH2,sms_phonenumber);
09D54:  MOVLW  0A
09D56:  MOVWF  FEA
09D58:  MOVLW  72
09D5A:  MOVWF  FE9
09D5C:  CALL   6C76
....................             
....................             fprintf(CH2,"\"");
09D60:  MOVLW  22
09D62:  MOVLB  E
09D64:  MOVWF  x46
09D66:  MOVLB  0
09D68:  CALL   25F0
....................             putc('\n',CH2);
09D6C:  MOVLW  0A
09D6E:  MOVLB  E
09D70:  MOVWF  x46
09D72:  MOVLB  0
09D74:  CALL   25F0
....................             delay_ms(50);
09D78:  MOVLW  32
09D7A:  MOVLB  E
09D7C:  MOVWF  x45
09D7E:  MOVLB  0
09D80:  CALL   0A24
....................            
....................            printf(SMS_Massage20);  
09D84:  MOVLW  0C
09D86:  MOVWF  FEA
09D88:  MOVLW  E1
09D8A:  MOVWF  FE9
09D8C:  CALL   6C76
....................            putc('\n',CH2);
09D90:  MOVLW  0A
09D92:  MOVLB  E
09D94:  MOVWF  x46
09D96:  MOVLB  0
09D98:  CALL   25F0
....................            putc(26,CH2);
09D9C:  MOVLW  1A
09D9E:  MOVLB  E
09DA0:  MOVWF  x46
09DA2:  MOVLB  0
09DA4:  CALL   25F0
09DA8:  MOVLB  D
....................          }
....................       }
09DAA:  BRA    9DB6
09DAC:  MOVLB  E
....................       else
....................       {
....................          Output.B20 = 1;
09DAE:  MOVLB  D
09DB0:  BSF    xA7.3
....................          SendSMS.B20 =0;
09DB2:  BCF    xD7.3
....................          functointest_f =0;
09DB4:  BCF    30.3
....................       }
....................    }
....................     
.................... //}
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////
.................... /////////////////////////// END MANUAL RESET //////////////////////////////////////////
.................... 
.................... 
....................    /////////////////////////////////////////////////////////////////////////////
....................    ////////////////////////////// AUTO RESET ///////////////////////////////////
....................    /////////////////////////////////////////////////////////////////////////////
.................... 
.................... //if(NoOfPoint >= 10)
.................... //{
.................... static unsigned char inputflag = 0;
.................... 
.................... //input1
....................    if((((Inputt.B1 ^ InputType.B1) == 1) && (FaultType.B1 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
09DB6:  MOVLW  00
09DB8:  BTFSC  xA1.0
09DBA:  MOVLW  01
09DBC:  MOVLB  E
09DBE:  MOVWF  x45
09DC0:  MOVLW  00
09DC2:  MOVLB  D
09DC4:  BTFSC  xA9.0
09DC6:  MOVLW  01
09DC8:  MOVLB  E
09DCA:  XORWF  x45,W
09DCC:  SUBLW  01
09DCE:  BNZ   9DD8
09DD0:  MOVLB  D
09DD2:  BTFSS  xAD.0
09DD4:  BRA    9DDE
09DD6:  MOVLB  E
09DD8:  BTFSS  1A.5
09DDA:  BRA    9EA4
09DDC:  MOVLB  D
....................    {
....................       if(In2.B1 == 0 && AutoAck == 0x0F && Ack.B1 == 0)   //use auto acknowlegde
09DDE:  BTFSC  xC5.0
09DE0:  BRA    9DF4
09DE2:  MOVF   53,W
09DE4:  SUBLW  0F
09DE6:  BNZ   9DF4
09DE8:  BTFSC  xBD.0
09DEA:  BRA    9DF4
....................       {
....................             TimeBase1s = 100 ;            //reload again
09DEC:  MOVLW  64
09DEE:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09DF0:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B1 = 1;
09DF4:  BSF    xC5.0
....................       if(Ack.B1 == 0)
09DF6:  BTFSC  xBD.0
09DF8:  BRA    9E28
....................       {
....................          if(FlashingFlag == 0)
09DFA:  BTFSC  1A.1
09DFC:  BRA    9E02
....................             {
....................                Output.B1 = 0;           //Flash output1
09DFE:  BCF    xA5.0
....................             }
09E00:  BRA    9E04
....................             else
....................             {
....................                Output.B1 = 1;
09E02:  BSF    xA5.0
....................             }
....................          if (~AutoTestFlag)
09E04:  BTFSC  1A.4
09E06:  BRA    9E28
....................          {
....................             if(AlarmIndicator.B1 == 1){
09E08:  BTFSS  xB9.0
09E0A:  BRA    9E28
....................                 if(OutputBoth.B1 == 0)        //Both output
09E0C:  BTFSC  xB5.0
09E0E:  BRA    9E1A
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09E10:  BSF    F89.4
09E12:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09E14:  BSF    F89.3
09E16:  BCF    F92.3
....................                 }
09E18:  BRA    9E28
....................                 else
....................                 {
....................                   if(OutputType.B1 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09E1A:  BTFSS  xB1.0
09E1C:  BRA    9E24
09E1E:  BSF    F89.4
09E20:  BCF    F92.4
09E22:  BRA    9E28
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09E24:  BSF    F89.3
09E26:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................        inputflag =1;
09E28:  MOVLW  01
09E2A:  MOVLB  E
09E2C:  MOVWF  x38
....................        // SMS Sending   
....................       if((SendSMS.B1 ==0) && (functointest_f ==0) && (Ack.B1 ==0))
09E2E:  MOVLB  D
09E30:  BTFSC  xD5.0
09E32:  BRA    9EA2
09E34:  BTFSC  30.3
09E36:  BRA    9EA2
09E38:  BTFSC  xBD.0
09E3A:  BRA    9EA2
....................       {
....................          SendSMS.B1 =1;
09E3C:  BSF    xD5.0
....................          fprintf(CH2,"AT+CMGS=\"");
09E3E:  MOVLW  52
09E40:  MOVWF  FF6
09E42:  MOVLW  09
09E44:  MOVWF  FF7
09E46:  MOVLB  0
09E48:  CALL   2636
....................          fprintf(CH2,sms_phonenumber);
09E4C:  MOVLW  0A
09E4E:  MOVWF  FEA
09E50:  MOVLW  72
09E52:  MOVWF  FE9
09E54:  CALL   6C76
....................          
....................          fprintf(CH2,"\"");
09E58:  MOVLW  22
09E5A:  MOVLB  E
09E5C:  MOVWF  x46
09E5E:  MOVLB  0
09E60:  CALL   25F0
....................          putc('\n',CH2);
09E64:  MOVLW  0A
09E66:  MOVLB  E
09E68:  MOVWF  x46
09E6A:  MOVLB  0
09E6C:  CALL   25F0
....................          delay_ms(50);
09E70:  MOVLW  32
09E72:  MOVLB  E
09E74:  MOVWF  x45
09E76:  MOVLB  0
09E78:  CALL   0A24
....................         
....................         fprintf(CH2,SMS_Massage1);   
09E7C:  MOVLW  0A
09E7E:  MOVWF  FEA
09E80:  MOVLW  81
09E82:  MOVWF  FE9
09E84:  CALL   6C76
....................         putc('\n',CH2);
09E88:  MOVLW  0A
09E8A:  MOVLB  E
09E8C:  MOVWF  x46
09E8E:  MOVLB  0
09E90:  CALL   25F0
....................        putc(26,CH2);
09E94:  MOVLW  1A
09E96:  MOVLB  E
09E98:  MOVWF  x46
09E9A:  MOVLB  0
09E9C:  CALL   25F0
09EA0:  MOVLB  D
....................       }
....................    }
09EA2:  BRA    9F62
....................    
....................    else if(FaultType.B1 == 0)
09EA4:  MOVLB  D
09EA6:  BTFSC  xAD.0
09EA8:  BRA    9F62
....................    {
....................       In2.B1 = 0x00;
09EAA:  BCF    xC5.0
....................       Ack.B1 = 0;
09EAC:  BCF    xBD.0
....................       Output.B1 = 1;      //Off LED
09EAE:  BSF    xA5.0
....................       SendSMS.B1 =0;// Clear SMS
09EB0:  BCF    xD5.0
.................... 
....................       if((OutputType.B1 == 1 || OutputBoth.B1 == 0) && inputflag ==0)     //If Buzzer or Both
09EB2:  BTFSC  xB1.0
09EB4:  BRA    9EBA
09EB6:  BTFSC  xB5.0
09EB8:  BRA    9EDC
09EBA:  MOVLB  E
09EBC:  MOVF   x38,F
09EBE:  BTFSC  FD8.2
09EC0:  BRA    9EC6
09EC2:  MOVLB  D
09EC4:  BRA    9EDC
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
09EC6:  MOVLW  01
09EC8:  MOVWF  x44
09ECA:  MOVLB  0
09ECC:  CALL   6C9C
09ED0:  DECFSZ 01,W
09ED2:  BRA    9ED6
09ED4:  BRA    9EDA
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09ED6:  BCF    F89.4
09ED8:  BCF    F92.4
09EDA:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B1 == 0 || OutputBoth.B1 == 0) && inputflag ==0)  //If Bell or Both
09EDC:  BTFSS  xB1.0
09EDE:  BRA    9EE4
09EE0:  BTFSC  xB5.0
09EE2:  BRA    9F0A
09EE4:  MOVLB  E
09EE6:  MOVF   x38,F
09EE8:  BTFSC  FD8.2
09EEA:  BRA    9EF0
09EEC:  MOVLB  D
09EEE:  BRA    9F0A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
09EF0:  MOVLW  02
09EF2:  MOVWF  x44
09EF4:  MOVLB  0
09EF6:  CALL   6C9C
09EFA:  DECFSZ 01,W
09EFC:  BRA    9F00
09EFE:  BRA    9F08
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
09F00:  BCF    F89.3
09F02:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09F04:  BCF    F89.4
09F06:  BCF    F92.4
09F08:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
09F0A:  BTFSC  xC5.0
09F0C:  BRA    9F62
09F0E:  BTFSC  xC5.1
09F10:  BRA    9F62
09F12:  BTFSC  xC5.2
09F14:  BRA    9F62
09F16:  BTFSC  xC5.3
09F18:  BRA    9F62
09F1A:  BTFSC  xC5.4
09F1C:  BRA    9F62
09F1E:  BTFSC  xC5.5
09F20:  BRA    9F62
09F22:  BTFSC  xC5.6
09F24:  BRA    9F62
09F26:  BTFSC  xC5.7
09F28:  BRA    9F62
09F2A:  BTFSC  xC6.0
09F2C:  BRA    9F62
09F2E:  BTFSC  xC6.1
09F30:  BRA    9F62
09F32:  BTFSC  xC6.2
09F34:  BRA    9F62
09F36:  BTFSC  xC6.3
09F38:  BRA    9F62
09F3A:  BTFSC  xC6.4
09F3C:  BRA    9F62
09F3E:  BTFSC  xC6.5
09F40:  BRA    9F62
09F42:  BTFSC  xC6.6
09F44:  BRA    9F62
09F46:  BTFSC  xC6.7
09F48:  BRA    9F62
09F4A:  BTFSC  xC7.0
09F4C:  BRA    9F62
09F4E:  BTFSC  xC7.1
09F50:  BRA    9F62
09F52:  BTFSC  xC7.2
09F54:  BRA    9F62
09F56:  BTFSC  xC7.3
09F58:  BRA    9F62
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
09F5A:  BCF    F89.3
09F5C:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
09F5E:  BCF    F89.4
09F60:  BCF    F92.4
....................       }
....................    }
....................    
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input2
....................    if((((Inputt.B2 ^ InputType.B2) == 1) && (FaultType.B2 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
09F62:  MOVLW  00
09F64:  BTFSC  xA1.1
09F66:  MOVLW  01
09F68:  MOVLB  E
09F6A:  MOVWF  x45
09F6C:  MOVLW  00
09F6E:  MOVLB  D
09F70:  BTFSC  xA9.1
09F72:  MOVLW  01
09F74:  MOVLB  E
09F76:  XORWF  x45,W
09F78:  SUBLW  01
09F7A:  BNZ   9F84
09F7C:  MOVLB  D
09F7E:  BTFSS  xAD.1
09F80:  BRA    9F8A
09F82:  MOVLB  E
09F84:  BTFSS  1A.5
09F86:  BRA    A050
09F88:  MOVLB  D
....................    {
....................       if(In2.B2 == 0 && AutoAck == 0x0F && Ack.B2 == 0)   //use auto acknowlegde
09F8A:  BTFSC  xC5.1
09F8C:  BRA    9FA0
09F8E:  MOVF   53,W
09F90:  SUBLW  0F
09F92:  BNZ   9FA0
09F94:  BTFSC  xBD.1
09F96:  BRA    9FA0
....................       {
....................             TimeBase1s = 100 ;            //reload again
09F98:  MOVLW  64
09F9A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
09F9C:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B2 = 1;
09FA0:  BSF    xC5.1
....................       if(Ack.B2 == 0)
09FA2:  BTFSC  xBD.1
09FA4:  BRA    9FD4
....................       {
....................          if(FlashingFlag == 0)
09FA6:  BTFSC  1A.1
09FA8:  BRA    9FAE
....................             {
....................                Output.B2 = 0;           //Flash output1
09FAA:  BCF    xA5.1
....................             }
09FAC:  BRA    9FB0
....................             else
....................             {
....................                Output.B2 = 1;
09FAE:  BSF    xA5.1
....................             }
....................          if (~AutoTestFlag)
09FB0:  BTFSC  1A.4
09FB2:  BRA    9FD4
....................          {
....................             if(AlarmIndicator.B2 == 1){
09FB4:  BTFSS  xB9.1
09FB6:  BRA    9FD4
....................                 if(OutputBoth.B2 == 0)        //Both output
09FB8:  BTFSC  xB5.1
09FBA:  BRA    9FC6
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
09FBC:  BSF    F89.4
09FBE:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
09FC0:  BSF    F89.3
09FC2:  BCF    F92.3
....................                 }
09FC4:  BRA    9FD4
....................                 else
....................                 {
....................                   if(OutputType.B2 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
09FC6:  BTFSS  xB1.1
09FC8:  BRA    9FD0
09FCA:  BSF    F89.4
09FCC:  BCF    F92.4
09FCE:  BRA    9FD4
....................                   else output_bit(Pbell,OnRelay);                          //Bell
09FD0:  BSF    F89.3
09FD2:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
09FD4:  MOVLW  01
09FD6:  MOVLB  E
09FD8:  MOVWF  x38
....................       // SMS Sending   
....................       if((SendSMS.B2 ==0)&& (functointest_f ==0) && (Ack.B2 ==0))
09FDA:  MOVLB  D
09FDC:  BTFSC  xD5.1
09FDE:  BRA    A04E
09FE0:  BTFSC  30.3
09FE2:  BRA    A04E
09FE4:  BTFSC  xBD.1
09FE6:  BRA    A04E
....................       {
....................          SendSMS.B2 =1;
09FE8:  BSF    xD5.1
....................          fprintf(CH2,"AT+CMGS=\"");
09FEA:  MOVLW  5C
09FEC:  MOVWF  FF6
09FEE:  MOVLW  09
09FF0:  MOVWF  FF7
09FF2:  MOVLB  0
09FF4:  CALL   2636
....................          fprintf(CH2,sms_phonenumber);
09FF8:  MOVLW  0A
09FFA:  MOVWF  FEA
09FFC:  MOVLW  72
09FFE:  MOVWF  FE9
0A000:  CALL   6C76
....................          
....................          fprintf(CH2,"\"");
0A004:  MOVLW  22
0A006:  MOVLB  E
0A008:  MOVWF  x46
0A00A:  MOVLB  0
0A00C:  CALL   25F0
....................          putc('\n',CH2);
0A010:  MOVLW  0A
0A012:  MOVLB  E
0A014:  MOVWF  x46
0A016:  MOVLB  0
0A018:  CALL   25F0
....................          delay_ms(50);
0A01C:  MOVLW  32
0A01E:  MOVLB  E
0A020:  MOVWF  x45
0A022:  MOVLB  0
0A024:  CALL   0A24
....................         
....................         fprintf(CH2,SMS_Massage2); 
0A028:  MOVLW  0A
0A02A:  MOVWF  FEA
0A02C:  MOVLW  A1
0A02E:  MOVWF  FE9
0A030:  CALL   6C76
....................         putc('\n',CH2);
0A034:  MOVLW  0A
0A036:  MOVLB  E
0A038:  MOVWF  x46
0A03A:  MOVLB  0
0A03C:  CALL   25F0
....................        putc(26,CH2);
0A040:  MOVLW  1A
0A042:  MOVLB  E
0A044:  MOVWF  x46
0A046:  MOVLB  0
0A048:  CALL   25F0
0A04C:  MOVLB  D
....................       }
....................    }
0A04E:  BRA    A10E
....................    else if(FaultType.B2 == 0)
0A050:  MOVLB  D
0A052:  BTFSC  xAD.1
0A054:  BRA    A10E
....................    {
....................       In2.B2 = 0x00;
0A056:  BCF    xC5.1
....................       Ack.B2 = 0;
0A058:  BCF    xBD.1
....................       Output.B2 = 1;      //Off LED
0A05A:  BSF    xA5.1
....................       SendSMS.B2 =0;// Clear SMS
0A05C:  BCF    xD5.1
.................... 
....................       if((OutputType.B2 == 1 || OutputBoth.B2 == 0) && inputflag ==0)     //If Buzzer or Both
0A05E:  BTFSC  xB1.1
0A060:  BRA    A066
0A062:  BTFSC  xB5.1
0A064:  BRA    A088
0A066:  MOVLB  E
0A068:  MOVF   x38,F
0A06A:  BTFSC  FD8.2
0A06C:  BRA    A072
0A06E:  MOVLB  D
0A070:  BRA    A088
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A072:  MOVLW  01
0A074:  MOVWF  x44
0A076:  MOVLB  0
0A078:  CALL   6C9C
0A07C:  DECFSZ 01,W
0A07E:  BRA    A082
0A080:  BRA    A086
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A082:  BCF    F89.4
0A084:  BCF    F92.4
0A086:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B2 == 0 || OutputBoth.B2 == 0) && inputflag ==0) //If Bell or Both
0A088:  BTFSS  xB1.1
0A08A:  BRA    A090
0A08C:  BTFSC  xB5.1
0A08E:  BRA    A0B6
0A090:  MOVLB  E
0A092:  MOVF   x38,F
0A094:  BTFSC  FD8.2
0A096:  BRA    A09C
0A098:  MOVLB  D
0A09A:  BRA    A0B6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A09C:  MOVLW  02
0A09E:  MOVWF  x44
0A0A0:  MOVLB  0
0A0A2:  CALL   6C9C
0A0A6:  DECFSZ 01,W
0A0A8:  BRA    A0AC
0A0AA:  BRA    A0B4
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A0AC:  BCF    F89.3
0A0AE:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A0B0:  BCF    F89.4
0A0B2:  BCF    F92.4
0A0B4:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A0B6:  BTFSC  xC5.0
0A0B8:  BRA    A10E
0A0BA:  BTFSC  xC5.1
0A0BC:  BRA    A10E
0A0BE:  BTFSC  xC5.2
0A0C0:  BRA    A10E
0A0C2:  BTFSC  xC5.3
0A0C4:  BRA    A10E
0A0C6:  BTFSC  xC5.4
0A0C8:  BRA    A10E
0A0CA:  BTFSC  xC5.5
0A0CC:  BRA    A10E
0A0CE:  BTFSC  xC5.6
0A0D0:  BRA    A10E
0A0D2:  BTFSC  xC5.7
0A0D4:  BRA    A10E
0A0D6:  BTFSC  xC6.0
0A0D8:  BRA    A10E
0A0DA:  BTFSC  xC6.1
0A0DC:  BRA    A10E
0A0DE:  BTFSC  xC6.2
0A0E0:  BRA    A10E
0A0E2:  BTFSC  xC6.3
0A0E4:  BRA    A10E
0A0E6:  BTFSC  xC6.4
0A0E8:  BRA    A10E
0A0EA:  BTFSC  xC6.5
0A0EC:  BRA    A10E
0A0EE:  BTFSC  xC6.6
0A0F0:  BRA    A10E
0A0F2:  BTFSC  xC6.7
0A0F4:  BRA    A10E
0A0F6:  BTFSC  xC7.0
0A0F8:  BRA    A10E
0A0FA:  BTFSC  xC7.1
0A0FC:  BRA    A10E
0A0FE:  BTFSC  xC7.2
0A100:  BRA    A10E
0A102:  BTFSC  xC7.3
0A104:  BRA    A10E
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A106:  BCF    F89.3
0A108:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A10A:  BCF    F89.4
0A10C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input3
....................    if((((Inputt.B3 ^ InputType.B3) == 1) && (FaultType.B3 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A10E:  MOVLW  00
0A110:  BTFSC  xA1.2
0A112:  MOVLW  01
0A114:  MOVLB  E
0A116:  MOVWF  x45
0A118:  MOVLW  00
0A11A:  MOVLB  D
0A11C:  BTFSC  xA9.2
0A11E:  MOVLW  01
0A120:  MOVLB  E
0A122:  XORWF  x45,W
0A124:  SUBLW  01
0A126:  BNZ   A130
0A128:  MOVLB  D
0A12A:  BTFSS  xAD.2
0A12C:  BRA    A136
0A12E:  MOVLB  E
0A130:  BTFSS  1A.5
0A132:  BRA    A1FC
0A134:  MOVLB  D
....................    {
....................       if(In2.B3 == 0 && AutoAck == 0x0F && Ack.B3 == 0)   //use auto acknowlegde
0A136:  BTFSC  xC5.2
0A138:  BRA    A14C
0A13A:  MOVF   53,W
0A13C:  SUBLW  0F
0A13E:  BNZ   A14C
0A140:  BTFSC  xBD.2
0A142:  BRA    A14C
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A144:  MOVLW  64
0A146:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A148:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B3 = 1;
0A14C:  BSF    xC5.2
....................       if(Ack.B3 == 0)
0A14E:  BTFSC  xBD.2
0A150:  BRA    A180
....................       {
....................          if(FlashingFlag == 0)
0A152:  BTFSC  1A.1
0A154:  BRA    A15A
....................             {
....................                Output.B3 = 0;           //Flash output1
0A156:  BCF    xA5.2
....................             }
0A158:  BRA    A15C
....................             else
....................             {
....................                Output.B3 = 1;
0A15A:  BSF    xA5.2
....................             }
....................          if (~AutoTestFlag)
0A15C:  BTFSC  1A.4
0A15E:  BRA    A180
....................          {
....................             if(AlarmIndicator.B3 == 1){
0A160:  BTFSS  xB9.2
0A162:  BRA    A180
....................                 if(OutputBoth.B3 == 0)        //Both output
0A164:  BTFSC  xB5.2
0A166:  BRA    A172
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A168:  BSF    F89.4
0A16A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A16C:  BSF    F89.3
0A16E:  BCF    F92.3
....................                 }
0A170:  BRA    A180
....................                 else
....................                 {
....................                   if(OutputType.B3 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A172:  BTFSS  xB1.2
0A174:  BRA    A17C
0A176:  BSF    F89.4
0A178:  BCF    F92.4
0A17A:  BRA    A180
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A17C:  BSF    F89.3
0A17E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A180:  MOVLW  01
0A182:  MOVLB  E
0A184:  MOVWF  x38
....................       // SMS Sending   
....................       if((SendSMS.B3 ==0)&& (functointest_f ==0) && (Ack.B3 ==0))
0A186:  MOVLB  D
0A188:  BTFSC  xD5.2
0A18A:  BRA    A1FA
0A18C:  BTFSC  30.3
0A18E:  BRA    A1FA
0A190:  BTFSC  xBD.2
0A192:  BRA    A1FA
....................       {
....................          SendSMS.B3 =1;
0A194:  BSF    xD5.2
....................          fprintf(CH2,"AT+CMGS=\"");
0A196:  MOVLW  66
0A198:  MOVWF  FF6
0A19A:  MOVLW  09
0A19C:  MOVWF  FF7
0A19E:  MOVLB  0
0A1A0:  CALL   2636
....................          fprintf(CH2,sms_phonenumber);
0A1A4:  MOVLW  0A
0A1A6:  MOVWF  FEA
0A1A8:  MOVLW  72
0A1AA:  MOVWF  FE9
0A1AC:  CALL   6C76
....................          
....................          fprintf(CH2,"\"");
0A1B0:  MOVLW  22
0A1B2:  MOVLB  E
0A1B4:  MOVWF  x46
0A1B6:  MOVLB  0
0A1B8:  CALL   25F0
....................          putc('\n',CH2);
0A1BC:  MOVLW  0A
0A1BE:  MOVLB  E
0A1C0:  MOVWF  x46
0A1C2:  MOVLB  0
0A1C4:  CALL   25F0
....................          delay_ms(50);
0A1C8:  MOVLW  32
0A1CA:  MOVLB  E
0A1CC:  MOVWF  x45
0A1CE:  MOVLB  0
0A1D0:  CALL   0A24
....................         
....................         fprintf(CH2,SMS_Massage3); 
0A1D4:  MOVLW  0A
0A1D6:  MOVWF  FEA
0A1D8:  MOVLW  C1
0A1DA:  MOVWF  FE9
0A1DC:  CALL   6C76
....................         putc('\n',CH2);
0A1E0:  MOVLW  0A
0A1E2:  MOVLB  E
0A1E4:  MOVWF  x46
0A1E6:  MOVLB  0
0A1E8:  CALL   25F0
....................        putc(26,CH2);
0A1EC:  MOVLW  1A
0A1EE:  MOVLB  E
0A1F0:  MOVWF  x46
0A1F2:  MOVLB  0
0A1F4:  CALL   25F0
0A1F8:  MOVLB  D
....................       }
....................    }
0A1FA:  BRA    A2BA
....................    else if(FaultType.B3 == 0)
0A1FC:  MOVLB  D
0A1FE:  BTFSC  xAD.2
0A200:  BRA    A2BA
....................    {
....................       In2.B3 = 0x00;
0A202:  BCF    xC5.2
....................       Ack.B3 = 0;
0A204:  BCF    xBD.2
....................       Output.B3 = 1;      //Off LED
0A206:  BSF    xA5.2
....................       SendSMS.B3 =0;// Clear SMS
0A208:  BCF    xD5.2
.................... 
....................       if((OutputType.B3 == 1 || OutputBoth.B3 == 0) && inputflag ==0)     //If Buzzer or Both
0A20A:  BTFSC  xB1.2
0A20C:  BRA    A212
0A20E:  BTFSC  xB5.2
0A210:  BRA    A234
0A212:  MOVLB  E
0A214:  MOVF   x38,F
0A216:  BTFSC  FD8.2
0A218:  BRA    A21E
0A21A:  MOVLB  D
0A21C:  BRA    A234
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A21E:  MOVLW  01
0A220:  MOVWF  x44
0A222:  MOVLB  0
0A224:  CALL   6C9C
0A228:  DECFSZ 01,W
0A22A:  BRA    A22E
0A22C:  BRA    A232
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A22E:  BCF    F89.4
0A230:  BCF    F92.4
0A232:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B3 == 0 || OutputBoth.B3 == 0) && inputflag ==0) //If Bell or Both
0A234:  BTFSS  xB1.2
0A236:  BRA    A23C
0A238:  BTFSC  xB5.2
0A23A:  BRA    A262
0A23C:  MOVLB  E
0A23E:  MOVF   x38,F
0A240:  BTFSC  FD8.2
0A242:  BRA    A248
0A244:  MOVLB  D
0A246:  BRA    A262
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A248:  MOVLW  02
0A24A:  MOVWF  x44
0A24C:  MOVLB  0
0A24E:  CALL   6C9C
0A252:  DECFSZ 01,W
0A254:  BRA    A258
0A256:  BRA    A260
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A258:  BCF    F89.3
0A25A:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A25C:  BCF    F89.4
0A25E:  BCF    F92.4
0A260:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A262:  BTFSC  xC5.0
0A264:  BRA    A2BA
0A266:  BTFSC  xC5.1
0A268:  BRA    A2BA
0A26A:  BTFSC  xC5.2
0A26C:  BRA    A2BA
0A26E:  BTFSC  xC5.3
0A270:  BRA    A2BA
0A272:  BTFSC  xC5.4
0A274:  BRA    A2BA
0A276:  BTFSC  xC5.5
0A278:  BRA    A2BA
0A27A:  BTFSC  xC5.6
0A27C:  BRA    A2BA
0A27E:  BTFSC  xC5.7
0A280:  BRA    A2BA
0A282:  BTFSC  xC6.0
0A284:  BRA    A2BA
0A286:  BTFSC  xC6.1
0A288:  BRA    A2BA
0A28A:  BTFSC  xC6.2
0A28C:  BRA    A2BA
0A28E:  BTFSC  xC6.3
0A290:  BRA    A2BA
0A292:  BTFSC  xC6.4
0A294:  BRA    A2BA
0A296:  BTFSC  xC6.5
0A298:  BRA    A2BA
0A29A:  BTFSC  xC6.6
0A29C:  BRA    A2BA
0A29E:  BTFSC  xC6.7
0A2A0:  BRA    A2BA
0A2A2:  BTFSC  xC7.0
0A2A4:  BRA    A2BA
0A2A6:  BTFSC  xC7.1
0A2A8:  BRA    A2BA
0A2AA:  BTFSC  xC7.2
0A2AC:  BRA    A2BA
0A2AE:  BTFSC  xC7.3
0A2B0:  BRA    A2BA
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A2B2:  BCF    F89.3
0A2B4:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A2B6:  BCF    F89.4
0A2B8:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input4
....................    if((((Inputt.B4 ^ InputType.B4) == 1) && (FaultType.B4 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A2BA:  MOVLW  00
0A2BC:  BTFSC  xA1.3
0A2BE:  MOVLW  01
0A2C0:  MOVLB  E
0A2C2:  MOVWF  x45
0A2C4:  MOVLW  00
0A2C6:  MOVLB  D
0A2C8:  BTFSC  xA9.3
0A2CA:  MOVLW  01
0A2CC:  MOVLB  E
0A2CE:  XORWF  x45,W
0A2D0:  SUBLW  01
0A2D2:  BNZ   A2DC
0A2D4:  MOVLB  D
0A2D6:  BTFSS  xAD.3
0A2D8:  BRA    A2E2
0A2DA:  MOVLB  E
0A2DC:  BTFSS  1A.5
0A2DE:  BRA    A3A8
0A2E0:  MOVLB  D
....................    {
....................       if(In2.B4 == 0 && AutoAck == 0x0F && Ack.B4 == 0)   //use auto acknowlegde
0A2E2:  BTFSC  xC5.3
0A2E4:  BRA    A2F8
0A2E6:  MOVF   53,W
0A2E8:  SUBLW  0F
0A2EA:  BNZ   A2F8
0A2EC:  BTFSC  xBD.3
0A2EE:  BRA    A2F8
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A2F0:  MOVLW  64
0A2F2:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A2F4:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B4 = 1;
0A2F8:  BSF    xC5.3
....................       if(Ack.B4 == 0)
0A2FA:  BTFSC  xBD.3
0A2FC:  BRA    A32C
....................       {
....................          if(FlashingFlag == 0)
0A2FE:  BTFSC  1A.1
0A300:  BRA    A306
....................             {
....................                Output.B4 = 0;           //Flash output1
0A302:  BCF    xA5.3
....................             }
0A304:  BRA    A308
....................             else
....................             {
....................                Output.B4 = 1;
0A306:  BSF    xA5.3
....................             }
....................          if (~AutoTestFlag)
0A308:  BTFSC  1A.4
0A30A:  BRA    A32C
....................          {
....................             if(AlarmIndicator.B4 == 1){
0A30C:  BTFSS  xB9.3
0A30E:  BRA    A32C
....................                 if(OutputBoth.B4 == 0)        //Both output
0A310:  BTFSC  xB5.3
0A312:  BRA    A31E
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A314:  BSF    F89.4
0A316:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A318:  BSF    F89.3
0A31A:  BCF    F92.3
....................                 }
0A31C:  BRA    A32C
....................                 else
....................                 {
....................                   if(OutputType.B4 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A31E:  BTFSS  xB1.3
0A320:  BRA    A328
0A322:  BSF    F89.4
0A324:  BCF    F92.4
0A326:  BRA    A32C
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A328:  BSF    F89.3
0A32A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A32C:  MOVLW  01
0A32E:  MOVLB  E
0A330:  MOVWF  x38
....................       // SMS Sending   
....................       if((SendSMS.B4 ==0)&& (functointest_f ==0) && (Ack.B4 ==0))
0A332:  MOVLB  D
0A334:  BTFSC  xD5.3
0A336:  BRA    A3A6
0A338:  BTFSC  30.3
0A33A:  BRA    A3A6
0A33C:  BTFSC  xBD.3
0A33E:  BRA    A3A6
....................       {
....................          SendSMS.B4 =1;
0A340:  BSF    xD5.3
....................          fprintf(CH2,"AT+CMGS=\"");
0A342:  MOVLW  70
0A344:  MOVWF  FF6
0A346:  MOVLW  09
0A348:  MOVWF  FF7
0A34A:  MOVLB  0
0A34C:  CALL   2636
....................          fprintf(CH2,sms_phonenumber);
0A350:  MOVLW  0A
0A352:  MOVWF  FEA
0A354:  MOVLW  72
0A356:  MOVWF  FE9
0A358:  CALL   6C76
....................          
....................          fprintf(CH2,"\"");
0A35C:  MOVLW  22
0A35E:  MOVLB  E
0A360:  MOVWF  x46
0A362:  MOVLB  0
0A364:  CALL   25F0
....................          putc('\n',CH2);
0A368:  MOVLW  0A
0A36A:  MOVLB  E
0A36C:  MOVWF  x46
0A36E:  MOVLB  0
0A370:  CALL   25F0
....................          delay_ms(50);
0A374:  MOVLW  32
0A376:  MOVLB  E
0A378:  MOVWF  x45
0A37A:  MOVLB  0
0A37C:  CALL   0A24
....................         
....................         fprintf(CH2,SMS_Massage4); 
0A380:  MOVLW  0A
0A382:  MOVWF  FEA
0A384:  MOVLW  E1
0A386:  MOVWF  FE9
0A388:  CALL   6C76
....................         putc('\n',CH2);
0A38C:  MOVLW  0A
0A38E:  MOVLB  E
0A390:  MOVWF  x46
0A392:  MOVLB  0
0A394:  CALL   25F0
....................        putc(26,CH2);
0A398:  MOVLW  1A
0A39A:  MOVLB  E
0A39C:  MOVWF  x46
0A39E:  MOVLB  0
0A3A0:  CALL   25F0
0A3A4:  MOVLB  D
....................       }
....................    }
0A3A6:  BRA    A466
....................    else if(FaultType.B4 == 0)
0A3A8:  MOVLB  D
0A3AA:  BTFSC  xAD.3
0A3AC:  BRA    A466
....................    {
....................       In2.B4 = 0x00;
0A3AE:  BCF    xC5.3
....................       Ack.B4 = 0;
0A3B0:  BCF    xBD.3
....................       Output.B4 = 1;      //Off LED
0A3B2:  BSF    xA5.3
....................       SendSMS.B4 =0;// Clear SMS
0A3B4:  BCF    xD5.3
.................... 
....................       if((OutputType.B4 == 1 || OutputBoth.B4 == 0) && inputflag ==0)     //If Buzzer or Both
0A3B6:  BTFSC  xB1.3
0A3B8:  BRA    A3BE
0A3BA:  BTFSC  xB5.3
0A3BC:  BRA    A3E0
0A3BE:  MOVLB  E
0A3C0:  MOVF   x38,F
0A3C2:  BTFSC  FD8.2
0A3C4:  BRA    A3CA
0A3C6:  MOVLB  D
0A3C8:  BRA    A3E0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A3CA:  MOVLW  01
0A3CC:  MOVWF  x44
0A3CE:  MOVLB  0
0A3D0:  CALL   6C9C
0A3D4:  DECFSZ 01,W
0A3D6:  BRA    A3DA
0A3D8:  BRA    A3DE
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A3DA:  BCF    F89.4
0A3DC:  BCF    F92.4
0A3DE:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B4 == 0 || OutputBoth.B4 == 0) && inputflag ==0)  //If Bell or Both
0A3E0:  BTFSS  xB1.3
0A3E2:  BRA    A3E8
0A3E4:  BTFSC  xB5.3
0A3E6:  BRA    A40E
0A3E8:  MOVLB  E
0A3EA:  MOVF   x38,F
0A3EC:  BTFSC  FD8.2
0A3EE:  BRA    A3F4
0A3F0:  MOVLB  D
0A3F2:  BRA    A40E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A3F4:  MOVLW  02
0A3F6:  MOVWF  x44
0A3F8:  MOVLB  0
0A3FA:  CALL   6C9C
0A3FE:  DECFSZ 01,W
0A400:  BRA    A404
0A402:  BRA    A40C
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A404:  BCF    F89.3
0A406:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A408:  BCF    F89.4
0A40A:  BCF    F92.4
0A40C:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A40E:  BTFSC  xC5.0
0A410:  BRA    A466
0A412:  BTFSC  xC5.1
0A414:  BRA    A466
0A416:  BTFSC  xC5.2
0A418:  BRA    A466
0A41A:  BTFSC  xC5.3
0A41C:  BRA    A466
0A41E:  BTFSC  xC5.4
0A420:  BRA    A466
0A422:  BTFSC  xC5.5
0A424:  BRA    A466
0A426:  BTFSC  xC5.6
0A428:  BRA    A466
0A42A:  BTFSC  xC5.7
0A42C:  BRA    A466
0A42E:  BTFSC  xC6.0
0A430:  BRA    A466
0A432:  BTFSC  xC6.1
0A434:  BRA    A466
0A436:  BTFSC  xC6.2
0A438:  BRA    A466
0A43A:  BTFSC  xC6.3
0A43C:  BRA    A466
0A43E:  BTFSC  xC6.4
0A440:  BRA    A466
0A442:  BTFSC  xC6.5
0A444:  BRA    A466
0A446:  BTFSC  xC6.6
0A448:  BRA    A466
0A44A:  BTFSC  xC6.7
0A44C:  BRA    A466
0A44E:  BTFSC  xC7.0
0A450:  BRA    A466
0A452:  BTFSC  xC7.1
0A454:  BRA    A466
0A456:  BTFSC  xC7.2
0A458:  BRA    A466
0A45A:  BTFSC  xC7.3
0A45C:  BRA    A466
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A45E:  BCF    F89.3
0A460:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A462:  BCF    F89.4
0A464:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input5
....................    if((((Inputt.B5 ^ InputType.B5) == 1) && (FaultType.B5 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A466:  MOVLW  00
0A468:  BTFSC  xA1.4
0A46A:  MOVLW  01
0A46C:  MOVLB  E
0A46E:  MOVWF  x45
0A470:  MOVLW  00
0A472:  MOVLB  D
0A474:  BTFSC  xA9.4
0A476:  MOVLW  01
0A478:  MOVLB  E
0A47A:  XORWF  x45,W
0A47C:  SUBLW  01
0A47E:  BNZ   A488
0A480:  MOVLB  D
0A482:  BTFSS  xAD.4
0A484:  BRA    A48E
0A486:  MOVLB  E
0A488:  BTFSS  1A.5
0A48A:  BRA    A554
0A48C:  MOVLB  D
....................    {
....................       if(In2.B5 == 0 && AutoAck == 0x0F && Ack.B5 == 0)   //use auto acknowlegde
0A48E:  BTFSC  xC5.4
0A490:  BRA    A4A4
0A492:  MOVF   53,W
0A494:  SUBLW  0F
0A496:  BNZ   A4A4
0A498:  BTFSC  xBD.4
0A49A:  BRA    A4A4
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A49C:  MOVLW  64
0A49E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A4A0:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B5 = 1;
0A4A4:  BSF    xC5.4
....................       if(Ack.B5 == 0)
0A4A6:  BTFSC  xBD.4
0A4A8:  BRA    A4D8
....................       {
....................          if(FlashingFlag == 0)
0A4AA:  BTFSC  1A.1
0A4AC:  BRA    A4B2
....................             {
....................                Output.B5 = 0;           //Flash output1
0A4AE:  BCF    xA5.4
....................             }
0A4B0:  BRA    A4B4
....................             else
....................             {
....................                Output.B5 = 1;
0A4B2:  BSF    xA5.4
....................             }
....................          if (~AutoTestFlag)
0A4B4:  BTFSC  1A.4
0A4B6:  BRA    A4D8
....................          {
....................             if(AlarmIndicator.B5 == 1){
0A4B8:  BTFSS  xB9.4
0A4BA:  BRA    A4D8
....................                 if(OutputBoth.B5 == 0)        //Both output
0A4BC:  BTFSC  xB5.4
0A4BE:  BRA    A4CA
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A4C0:  BSF    F89.4
0A4C2:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A4C4:  BSF    F89.3
0A4C6:  BCF    F92.3
....................                 }
0A4C8:  BRA    A4D8
....................                 else
....................                 {
....................                   if(OutputType.B5 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A4CA:  BTFSS  xB1.4
0A4CC:  BRA    A4D4
0A4CE:  BSF    F89.4
0A4D0:  BCF    F92.4
0A4D2:  BRA    A4D8
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A4D4:  BSF    F89.3
0A4D6:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A4D8:  MOVLW  01
0A4DA:  MOVLB  E
0A4DC:  MOVWF  x38
....................       // SMS Sending   
....................       if((SendSMS.B5 ==0)&& (functointest_f ==0) && (Ack.B5 ==0))
0A4DE:  MOVLB  D
0A4E0:  BTFSC  xD5.4
0A4E2:  BRA    A552
0A4E4:  BTFSC  30.3
0A4E6:  BRA    A552
0A4E8:  BTFSC  xBD.4
0A4EA:  BRA    A552
....................       {
....................          SendSMS.B5 =1;
0A4EC:  BSF    xD5.4
....................          fprintf(CH2,"AT+CMGS=\"");
0A4EE:  MOVLW  7A
0A4F0:  MOVWF  FF6
0A4F2:  MOVLW  09
0A4F4:  MOVWF  FF7
0A4F6:  MOVLB  0
0A4F8:  CALL   2636
....................          fprintf(CH2,sms_phonenumber);
0A4FC:  MOVLW  0A
0A4FE:  MOVWF  FEA
0A500:  MOVLW  72
0A502:  MOVWF  FE9
0A504:  CALL   6C76
....................          
....................          fprintf(CH2,"\"");
0A508:  MOVLW  22
0A50A:  MOVLB  E
0A50C:  MOVWF  x46
0A50E:  MOVLB  0
0A510:  CALL   25F0
....................          putc('\n',CH2);
0A514:  MOVLW  0A
0A516:  MOVLB  E
0A518:  MOVWF  x46
0A51A:  MOVLB  0
0A51C:  CALL   25F0
....................          delay_ms(50);
0A520:  MOVLW  32
0A522:  MOVLB  E
0A524:  MOVWF  x45
0A526:  MOVLB  0
0A528:  CALL   0A24
....................         
....................         fprintf(CH2,SMS_Massage5); 
0A52C:  MOVLW  0B
0A52E:  MOVWF  FEA
0A530:  MOVLW  01
0A532:  MOVWF  FE9
0A534:  CALL   6C76
....................         putc('\n',CH2);
0A538:  MOVLW  0A
0A53A:  MOVLB  E
0A53C:  MOVWF  x46
0A53E:  MOVLB  0
0A540:  CALL   25F0
....................        putc(26,CH2);
0A544:  MOVLW  1A
0A546:  MOVLB  E
0A548:  MOVWF  x46
0A54A:  MOVLB  0
0A54C:  CALL   25F0
0A550:  MOVLB  D
....................       }
....................    }
0A552:  BRA    A612
....................    else if(FaultType.B5 == 0)
0A554:  MOVLB  D
0A556:  BTFSC  xAD.4
0A558:  BRA    A612
....................    {
....................       In2.B5 = 0x00;
0A55A:  BCF    xC5.4
....................       Ack.B5 = 0;
0A55C:  BCF    xBD.4
....................       Output.B5 = 1;      //Off LED
0A55E:  BSF    xA5.4
....................       SendSMS.B5 =0;// Clear SMS
0A560:  BCF    xD5.4
.................... 
....................       if((OutputType.B5 == 1 || OutputBoth.B5 == 0) && inputflag ==0)     //If Buzzer or Both
0A562:  BTFSC  xB1.4
0A564:  BRA    A56A
0A566:  BTFSC  xB5.4
0A568:  BRA    A58C
0A56A:  MOVLB  E
0A56C:  MOVF   x38,F
0A56E:  BTFSC  FD8.2
0A570:  BRA    A576
0A572:  MOVLB  D
0A574:  BRA    A58C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A576:  MOVLW  01
0A578:  MOVWF  x44
0A57A:  MOVLB  0
0A57C:  CALL   6C9C
0A580:  DECFSZ 01,W
0A582:  BRA    A586
0A584:  BRA    A58A
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A586:  BCF    F89.4
0A588:  BCF    F92.4
0A58A:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B5 == 0 || OutputBoth.B5 == 0) && inputflag ==0) //If Bell or Both
0A58C:  BTFSS  xB1.4
0A58E:  BRA    A594
0A590:  BTFSC  xB5.4
0A592:  BRA    A5BA
0A594:  MOVLB  E
0A596:  MOVF   x38,F
0A598:  BTFSC  FD8.2
0A59A:  BRA    A5A0
0A59C:  MOVLB  D
0A59E:  BRA    A5BA
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A5A0:  MOVLW  02
0A5A2:  MOVWF  x44
0A5A4:  MOVLB  0
0A5A6:  CALL   6C9C
0A5AA:  DECFSZ 01,W
0A5AC:  BRA    A5B0
0A5AE:  BRA    A5B8
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A5B0:  BCF    F89.3
0A5B2:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A5B4:  BCF    F89.4
0A5B6:  BCF    F92.4
0A5B8:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A5BA:  BTFSC  xC5.0
0A5BC:  BRA    A612
0A5BE:  BTFSC  xC5.1
0A5C0:  BRA    A612
0A5C2:  BTFSC  xC5.2
0A5C4:  BRA    A612
0A5C6:  BTFSC  xC5.3
0A5C8:  BRA    A612
0A5CA:  BTFSC  xC5.4
0A5CC:  BRA    A612
0A5CE:  BTFSC  xC5.5
0A5D0:  BRA    A612
0A5D2:  BTFSC  xC5.6
0A5D4:  BRA    A612
0A5D6:  BTFSC  xC5.7
0A5D8:  BRA    A612
0A5DA:  BTFSC  xC6.0
0A5DC:  BRA    A612
0A5DE:  BTFSC  xC6.1
0A5E0:  BRA    A612
0A5E2:  BTFSC  xC6.2
0A5E4:  BRA    A612
0A5E6:  BTFSC  xC6.3
0A5E8:  BRA    A612
0A5EA:  BTFSC  xC6.4
0A5EC:  BRA    A612
0A5EE:  BTFSC  xC6.5
0A5F0:  BRA    A612
0A5F2:  BTFSC  xC6.6
0A5F4:  BRA    A612
0A5F6:  BTFSC  xC6.7
0A5F8:  BRA    A612
0A5FA:  BTFSC  xC7.0
0A5FC:  BRA    A612
0A5FE:  BTFSC  xC7.1
0A600:  BRA    A612
0A602:  BTFSC  xC7.2
0A604:  BRA    A612
0A606:  BTFSC  xC7.3
0A608:  BRA    A612
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A60A:  BCF    F89.3
0A60C:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A60E:  BCF    F89.4
0A610:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input6
....................    if((((Inputt.B6 ^ InputType.B6) == 1) && (FaultType.B6 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A612:  MOVLW  00
0A614:  BTFSC  xA1.5
0A616:  MOVLW  01
0A618:  MOVLB  E
0A61A:  MOVWF  x45
0A61C:  MOVLW  00
0A61E:  MOVLB  D
0A620:  BTFSC  xA9.5
0A622:  MOVLW  01
0A624:  MOVLB  E
0A626:  XORWF  x45,W
0A628:  SUBLW  01
0A62A:  BNZ   A634
0A62C:  MOVLB  D
0A62E:  BTFSS  xAD.5
0A630:  BRA    A63A
0A632:  MOVLB  E
0A634:  BTFSS  1A.5
0A636:  BRA    A700
0A638:  MOVLB  D
....................    {
....................       if(In2.B6 == 0 && AutoAck == 0x0F && Ack.B6 == 0)   //use auto acknowlegde
0A63A:  BTFSC  xC5.5
0A63C:  BRA    A650
0A63E:  MOVF   53,W
0A640:  SUBLW  0F
0A642:  BNZ   A650
0A644:  BTFSC  xBD.5
0A646:  BRA    A650
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A648:  MOVLW  64
0A64A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A64C:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B6 = 1;
0A650:  BSF    xC5.5
....................       if(Ack.B6 == 0)
0A652:  BTFSC  xBD.5
0A654:  BRA    A684
....................       {
....................          if(FlashingFlag == 0)
0A656:  BTFSC  1A.1
0A658:  BRA    A65E
....................             {
....................                Output.B6 = 0;           //Flash output1
0A65A:  BCF    xA5.5
....................             }
0A65C:  BRA    A660
....................             else
....................             {
....................                Output.B6 = 1;
0A65E:  BSF    xA5.5
....................             }
....................          if (~AutoTestFlag)
0A660:  BTFSC  1A.4
0A662:  BRA    A684
....................          {
....................             if(AlarmIndicator.B6 == 1){
0A664:  BTFSS  xB9.5
0A666:  BRA    A684
....................                 if(OutputBoth.B6 == 0)        //Both output
0A668:  BTFSC  xB5.5
0A66A:  BRA    A676
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A66C:  BSF    F89.4
0A66E:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A670:  BSF    F89.3
0A672:  BCF    F92.3
....................                 }
0A674:  BRA    A684
....................                 else
....................                 {
....................                   if(OutputType.B6 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A676:  BTFSS  xB1.5
0A678:  BRA    A680
0A67A:  BSF    F89.4
0A67C:  BCF    F92.4
0A67E:  BRA    A684
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A680:  BSF    F89.3
0A682:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A684:  MOVLW  01
0A686:  MOVLB  E
0A688:  MOVWF  x38
....................       // SMS Sending   
....................       if((SendSMS.B6 ==0)&& (functointest_f ==0) && (Ack.B6 ==0))
0A68A:  MOVLB  D
0A68C:  BTFSC  xD5.5
0A68E:  BRA    A6FE
0A690:  BTFSC  30.3
0A692:  BRA    A6FE
0A694:  BTFSC  xBD.5
0A696:  BRA    A6FE
....................       {
....................          SendSMS.B6 =1;
0A698:  BSF    xD5.5
....................          fprintf(CH2,"AT+CMGS=\"");
0A69A:  MOVLW  84
0A69C:  MOVWF  FF6
0A69E:  MOVLW  09
0A6A0:  MOVWF  FF7
0A6A2:  MOVLB  0
0A6A4:  CALL   2636
....................          fprintf(CH2,sms_phonenumber);
0A6A8:  MOVLW  0A
0A6AA:  MOVWF  FEA
0A6AC:  MOVLW  72
0A6AE:  MOVWF  FE9
0A6B0:  CALL   6C76
....................          
....................          fprintf(CH2,"\"");
0A6B4:  MOVLW  22
0A6B6:  MOVLB  E
0A6B8:  MOVWF  x46
0A6BA:  MOVLB  0
0A6BC:  CALL   25F0
....................          putc('\n',CH2);
0A6C0:  MOVLW  0A
0A6C2:  MOVLB  E
0A6C4:  MOVWF  x46
0A6C6:  MOVLB  0
0A6C8:  CALL   25F0
....................          delay_ms(50);
0A6CC:  MOVLW  32
0A6CE:  MOVLB  E
0A6D0:  MOVWF  x45
0A6D2:  MOVLB  0
0A6D4:  CALL   0A24
....................         
....................         fprintf(CH2,SMS_Massage6);  
0A6D8:  MOVLW  0B
0A6DA:  MOVWF  FEA
0A6DC:  MOVLW  21
0A6DE:  MOVWF  FE9
0A6E0:  CALL   6C76
....................         putc('\n',CH2);
0A6E4:  MOVLW  0A
0A6E6:  MOVLB  E
0A6E8:  MOVWF  x46
0A6EA:  MOVLB  0
0A6EC:  CALL   25F0
....................        putc(26,CH2);
0A6F0:  MOVLW  1A
0A6F2:  MOVLB  E
0A6F4:  MOVWF  x46
0A6F6:  MOVLB  0
0A6F8:  CALL   25F0
0A6FC:  MOVLB  D
....................       }
....................    }
0A6FE:  BRA    A7BE
....................    else if(FaultType.B6 == 0)
0A700:  MOVLB  D
0A702:  BTFSC  xAD.5
0A704:  BRA    A7BE
....................    {
....................       In2.B6 = 0x00;
0A706:  BCF    xC5.5
....................       Ack.B6 = 0;
0A708:  BCF    xBD.5
....................       Output.B6 = 1;      //Off LED
0A70A:  BSF    xA5.5
....................       SendSMS.B6 =0;// Clear SMS
0A70C:  BCF    xD5.5
.................... 
....................       if((OutputType.B6 == 1 || OutputBoth.B6 == 0)&& inputflag ==0)      //If Buzzer or Both
0A70E:  BTFSC  xB1.5
0A710:  BRA    A716
0A712:  BTFSC  xB5.5
0A714:  BRA    A738
0A716:  MOVLB  E
0A718:  MOVF   x38,F
0A71A:  BTFSC  FD8.2
0A71C:  BRA    A722
0A71E:  MOVLB  D
0A720:  BRA    A738
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A722:  MOVLW  01
0A724:  MOVWF  x44
0A726:  MOVLB  0
0A728:  CALL   6C9C
0A72C:  DECFSZ 01,W
0A72E:  BRA    A732
0A730:  BRA    A736
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A732:  BCF    F89.4
0A734:  BCF    F92.4
0A736:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B6 == 0 || OutputBoth.B6 == 0)&& inputflag ==0)  //If Bell or Both
0A738:  BTFSS  xB1.5
0A73A:  BRA    A740
0A73C:  BTFSC  xB5.5
0A73E:  BRA    A766
0A740:  MOVLB  E
0A742:  MOVF   x38,F
0A744:  BTFSC  FD8.2
0A746:  BRA    A74C
0A748:  MOVLB  D
0A74A:  BRA    A766
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A74C:  MOVLW  02
0A74E:  MOVWF  x44
0A750:  MOVLB  0
0A752:  CALL   6C9C
0A756:  DECFSZ 01,W
0A758:  BRA    A75C
0A75A:  BRA    A764
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A75C:  BCF    F89.3
0A75E:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A760:  BCF    F89.4
0A762:  BCF    F92.4
0A764:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A766:  BTFSC  xC5.0
0A768:  BRA    A7BE
0A76A:  BTFSC  xC5.1
0A76C:  BRA    A7BE
0A76E:  BTFSC  xC5.2
0A770:  BRA    A7BE
0A772:  BTFSC  xC5.3
0A774:  BRA    A7BE
0A776:  BTFSC  xC5.4
0A778:  BRA    A7BE
0A77A:  BTFSC  xC5.5
0A77C:  BRA    A7BE
0A77E:  BTFSC  xC5.6
0A780:  BRA    A7BE
0A782:  BTFSC  xC5.7
0A784:  BRA    A7BE
0A786:  BTFSC  xC6.0
0A788:  BRA    A7BE
0A78A:  BTFSC  xC6.1
0A78C:  BRA    A7BE
0A78E:  BTFSC  xC6.2
0A790:  BRA    A7BE
0A792:  BTFSC  xC6.3
0A794:  BRA    A7BE
0A796:  BTFSC  xC6.4
0A798:  BRA    A7BE
0A79A:  BTFSC  xC6.5
0A79C:  BRA    A7BE
0A79E:  BTFSC  xC6.6
0A7A0:  BRA    A7BE
0A7A2:  BTFSC  xC6.7
0A7A4:  BRA    A7BE
0A7A6:  BTFSC  xC7.0
0A7A8:  BRA    A7BE
0A7AA:  BTFSC  xC7.1
0A7AC:  BRA    A7BE
0A7AE:  BTFSC  xC7.2
0A7B0:  BRA    A7BE
0A7B2:  BTFSC  xC7.3
0A7B4:  BRA    A7BE
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A7B6:  BCF    F89.3
0A7B8:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A7BA:  BCF    F89.4
0A7BC:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input7
....................    if((((Inputt.B7 ^ InputType.B7) == 1) && (FaultType.B7 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0A7BE:  MOVLW  00
0A7C0:  BTFSC  xA1.6
0A7C2:  MOVLW  01
0A7C4:  MOVLB  E
0A7C6:  MOVWF  x45
0A7C8:  MOVLW  00
0A7CA:  MOVLB  D
0A7CC:  BTFSC  xA9.6
0A7CE:  MOVLW  01
0A7D0:  MOVLB  E
0A7D2:  XORWF  x45,W
0A7D4:  SUBLW  01
0A7D6:  BNZ   A7E0
0A7D8:  MOVLB  D
0A7DA:  BTFSS  xAD.6
0A7DC:  BRA    A7E6
0A7DE:  MOVLB  E
0A7E0:  BTFSS  1A.5
0A7E2:  BRA    A8AC
0A7E4:  MOVLB  D
....................    {
....................       if(In2.B7 == 0 && AutoAck == 0x0F && Ack.B7 == 0)   //use auto acknowlegde
0A7E6:  BTFSC  xC5.6
0A7E8:  BRA    A7FC
0A7EA:  MOVF   53,W
0A7EC:  SUBLW  0F
0A7EE:  BNZ   A7FC
0A7F0:  BTFSC  xBD.6
0A7F2:  BRA    A7FC
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A7F4:  MOVLW  64
0A7F6:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A7F8:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B7 = 1;
0A7FC:  BSF    xC5.6
....................       if(Ack.B7 == 0)
0A7FE:  BTFSC  xBD.6
0A800:  BRA    A830
....................       {
....................          if(FlashingFlag == 0)
0A802:  BTFSC  1A.1
0A804:  BRA    A80A
....................             {
....................                Output.B7 = 0;           //Flash output1
0A806:  BCF    xA5.6
....................             }
0A808:  BRA    A80C
....................             else
....................             {
....................                Output.B7 = 1;
0A80A:  BSF    xA5.6
....................             }
....................          if (~AutoTestFlag)
0A80C:  BTFSC  1A.4
0A80E:  BRA    A830
....................          {
....................             if(AlarmIndicator.B7 == 1){
0A810:  BTFSS  xB9.6
0A812:  BRA    A830
....................                 if(OutputBoth.B7 == 0)        //Both output
0A814:  BTFSC  xB5.6
0A816:  BRA    A822
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A818:  BSF    F89.4
0A81A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A81C:  BSF    F89.3
0A81E:  BCF    F92.3
....................                 }
0A820:  BRA    A830
....................                 else
....................                 {
....................                   if(OutputType.B7 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A822:  BTFSS  xB1.6
0A824:  BRA    A82C
0A826:  BSF    F89.4
0A828:  BCF    F92.4
0A82A:  BRA    A830
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A82C:  BSF    F89.3
0A82E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A830:  MOVLW  01
0A832:  MOVLB  E
0A834:  MOVWF  x38
....................       // SMS Sending   
....................       if((SendSMS.B7 ==0)&& (functointest_f ==0) && (Ack.B7 ==0))
0A836:  MOVLB  D
0A838:  BTFSC  xD5.6
0A83A:  BRA    A8AA
0A83C:  BTFSC  30.3
0A83E:  BRA    A8AA
0A840:  BTFSC  xBD.6
0A842:  BRA    A8AA
....................       {
....................          SendSMS.B7 =1;
0A844:  BSF    xD5.6
....................          fprintf(CH2,"AT+CMGS=\"");
0A846:  MOVLW  8E
0A848:  MOVWF  FF6
0A84A:  MOVLW  09
0A84C:  MOVWF  FF7
0A84E:  MOVLB  0
0A850:  CALL   2636
....................          fprintf(CH2,sms_phonenumber);
0A854:  MOVLW  0A
0A856:  MOVWF  FEA
0A858:  MOVLW  72
0A85A:  MOVWF  FE9
0A85C:  CALL   6C76
....................          
....................          fprintf(CH2,"\"");
0A860:  MOVLW  22
0A862:  MOVLB  E
0A864:  MOVWF  x46
0A866:  MOVLB  0
0A868:  CALL   25F0
....................          putc('\n',CH2);
0A86C:  MOVLW  0A
0A86E:  MOVLB  E
0A870:  MOVWF  x46
0A872:  MOVLB  0
0A874:  CALL   25F0
....................          delay_ms(50);
0A878:  MOVLW  32
0A87A:  MOVLB  E
0A87C:  MOVWF  x45
0A87E:  MOVLB  0
0A880:  CALL   0A24
....................         
....................         fprintf(CH2,SMS_Massage7);  
0A884:  MOVLW  0B
0A886:  MOVWF  FEA
0A888:  MOVLW  41
0A88A:  MOVWF  FE9
0A88C:  CALL   6C76
....................         putc('\n',CH2);
0A890:  MOVLW  0A
0A892:  MOVLB  E
0A894:  MOVWF  x46
0A896:  MOVLB  0
0A898:  CALL   25F0
....................        putc(26,CH2);
0A89C:  MOVLW  1A
0A89E:  MOVLB  E
0A8A0:  MOVWF  x46
0A8A2:  MOVLB  0
0A8A4:  CALL   25F0
0A8A8:  MOVLB  D
....................       }
....................    }
0A8AA:  BRA    A96A
....................    else if(FaultType.B7 == 0)
0A8AC:  MOVLB  D
0A8AE:  BTFSC  xAD.6
0A8B0:  BRA    A96A
....................    {
....................       In2.B7 = 0x00;
0A8B2:  BCF    xC5.6
....................       Ack.B7 = 0;
0A8B4:  BCF    xBD.6
....................       Output.B7 = 1;      //Off LED
0A8B6:  BSF    xA5.6
....................       SendSMS.B7 =0;// Clear SMS
0A8B8:  BCF    xD5.6
.................... 
....................       if((OutputType.B7 == 1 || OutputBoth.B7 == 0)&& inputflag ==0)      //If Buzzer or Both
0A8BA:  BTFSC  xB1.6
0A8BC:  BRA    A8C2
0A8BE:  BTFSC  xB5.6
0A8C0:  BRA    A8E4
0A8C2:  MOVLB  E
0A8C4:  MOVF   x38,F
0A8C6:  BTFSC  FD8.2
0A8C8:  BRA    A8CE
0A8CA:  MOVLB  D
0A8CC:  BRA    A8E4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0A8CE:  MOVLW  01
0A8D0:  MOVWF  x44
0A8D2:  MOVLB  0
0A8D4:  CALL   6C9C
0A8D8:  DECFSZ 01,W
0A8DA:  BRA    A8DE
0A8DC:  BRA    A8E2
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A8DE:  BCF    F89.4
0A8E0:  BCF    F92.4
0A8E2:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B7 == 0 || OutputBoth.B7 == 0)&& inputflag ==0)  //If Bell or Both
0A8E4:  BTFSS  xB1.6
0A8E6:  BRA    A8EC
0A8E8:  BTFSC  xB5.6
0A8EA:  BRA    A912
0A8EC:  MOVLB  E
0A8EE:  MOVF   x38,F
0A8F0:  BTFSC  FD8.2
0A8F2:  BRA    A8F8
0A8F4:  MOVLB  D
0A8F6:  BRA    A912
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0A8F8:  MOVLW  02
0A8FA:  MOVWF  x44
0A8FC:  MOVLB  0
0A8FE:  CALL   6C9C
0A902:  DECFSZ 01,W
0A904:  BRA    A908
0A906:  BRA    A910
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0A908:  BCF    F89.3
0A90A:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A90C:  BCF    F89.4
0A90E:  BCF    F92.4
0A910:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0A912:  BTFSC  xC5.0
0A914:  BRA    A96A
0A916:  BTFSC  xC5.1
0A918:  BRA    A96A
0A91A:  BTFSC  xC5.2
0A91C:  BRA    A96A
0A91E:  BTFSC  xC5.3
0A920:  BRA    A96A
0A922:  BTFSC  xC5.4
0A924:  BRA    A96A
0A926:  BTFSC  xC5.5
0A928:  BRA    A96A
0A92A:  BTFSC  xC5.6
0A92C:  BRA    A96A
0A92E:  BTFSC  xC5.7
0A930:  BRA    A96A
0A932:  BTFSC  xC6.0
0A934:  BRA    A96A
0A936:  BTFSC  xC6.1
0A938:  BRA    A96A
0A93A:  BTFSC  xC6.2
0A93C:  BRA    A96A
0A93E:  BTFSC  xC6.3
0A940:  BRA    A96A
0A942:  BTFSC  xC6.4
0A944:  BRA    A96A
0A946:  BTFSC  xC6.5
0A948:  BRA    A96A
0A94A:  BTFSC  xC6.6
0A94C:  BRA    A96A
0A94E:  BTFSC  xC6.7
0A950:  BRA    A96A
0A952:  BTFSC  xC7.0
0A954:  BRA    A96A
0A956:  BTFSC  xC7.1
0A958:  BRA    A96A
0A95A:  BTFSC  xC7.2
0A95C:  BRA    A96A
0A95E:  BTFSC  xC7.3
0A960:  BRA    A96A
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0A962:  BCF    F89.3
0A964:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0A966:  BCF    F89.4
0A968:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input8
....................    if((((Inputt.B8 ^ InputType.B8) == 1) && (FaultType.B8 == 0)) ||Test_fault==1)   // alarm1 occure and " Non Lock type"
0A96A:  MOVLW  00
0A96C:  BTFSC  xA1.7
0A96E:  MOVLW  01
0A970:  MOVLB  E
0A972:  MOVWF  x45
0A974:  MOVLW  00
0A976:  MOVLB  D
0A978:  BTFSC  xA9.7
0A97A:  MOVLW  01
0A97C:  MOVLB  E
0A97E:  XORWF  x45,W
0A980:  SUBLW  01
0A982:  BNZ   A98C
0A984:  MOVLB  D
0A986:  BTFSS  xAD.7
0A988:  BRA    A992
0A98A:  MOVLB  E
0A98C:  BTFSS  1A.5
0A98E:  BRA    AA58
0A990:  MOVLB  D
....................    {
....................       if(In2.B8 == 0 && AutoAck == 0x0F && Ack.B8 == 0)   //use auto acknowlegde
0A992:  BTFSC  xC5.7
0A994:  BRA    A9A8
0A996:  MOVF   53,W
0A998:  SUBLW  0F
0A99A:  BNZ   A9A8
0A99C:  BTFSC  xBD.7
0A99E:  BRA    A9A8
....................       {
....................             TimeBase1s = 100 ;            //reload again
0A9A0:  MOVLW  64
0A9A2:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0A9A4:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B8 = 1;
0A9A8:  BSF    xC5.7
....................       if(Ack.B8 == 0)
0A9AA:  BTFSC  xBD.7
0A9AC:  BRA    A9DC
....................       {
....................          if(FlashingFlag == 0)
0A9AE:  BTFSC  1A.1
0A9B0:  BRA    A9B6
....................             {
....................                Output.B8 = 0;           //Flash output1
0A9B2:  BCF    xA5.7
....................             }
0A9B4:  BRA    A9B8
....................             else
....................             {
....................                Output.B8 = 1;
0A9B6:  BSF    xA5.7
....................             }
....................          if (~AutoTestFlag)
0A9B8:  BTFSC  1A.4
0A9BA:  BRA    A9DC
....................          {
....................             if(AlarmIndicator.B8 == 1){
0A9BC:  BTFSS  xB9.7
0A9BE:  BRA    A9DC
....................                 if(OutputBoth.B8 == 0)        //Both output
0A9C0:  BTFSC  xB5.7
0A9C2:  BRA    A9CE
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0A9C4:  BSF    F89.4
0A9C6:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0A9C8:  BSF    F89.3
0A9CA:  BCF    F92.3
....................                 }
0A9CC:  BRA    A9DC
....................                 else
....................                 {
....................                   if(OutputType.B8 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0A9CE:  BTFSS  xB1.7
0A9D0:  BRA    A9D8
0A9D2:  BSF    F89.4
0A9D4:  BCF    F92.4
0A9D6:  BRA    A9DC
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0A9D8:  BSF    F89.3
0A9DA:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0A9DC:  MOVLW  01
0A9DE:  MOVLB  E
0A9E0:  MOVWF  x38
....................       // SMS Sending   
....................       if((SendSMS.B8 ==0) && (functointest_f ==0) && (Ack.B8 ==0))
0A9E2:  MOVLB  D
0A9E4:  BTFSC  xD5.7
0A9E6:  BRA    AA56
0A9E8:  BTFSC  30.3
0A9EA:  BRA    AA56
0A9EC:  BTFSC  xBD.7
0A9EE:  BRA    AA56
....................       {
....................          SendSMS.B8 =1;
0A9F0:  BSF    xD5.7
....................          fprintf(CH2,"AT+CMGS=\"");
0A9F2:  MOVLW  98
0A9F4:  MOVWF  FF6
0A9F6:  MOVLW  09
0A9F8:  MOVWF  FF7
0A9FA:  MOVLB  0
0A9FC:  CALL   2636
....................          fprintf(CH2,sms_phonenumber);
0AA00:  MOVLW  0A
0AA02:  MOVWF  FEA
0AA04:  MOVLW  72
0AA06:  MOVWF  FE9
0AA08:  CALL   6C76
....................          
....................          fprintf(CH2,"\"");
0AA0C:  MOVLW  22
0AA0E:  MOVLB  E
0AA10:  MOVWF  x46
0AA12:  MOVLB  0
0AA14:  CALL   25F0
....................          putc('\n',CH2);
0AA18:  MOVLW  0A
0AA1A:  MOVLB  E
0AA1C:  MOVWF  x46
0AA1E:  MOVLB  0
0AA20:  CALL   25F0
....................          delay_ms(50);
0AA24:  MOVLW  32
0AA26:  MOVLB  E
0AA28:  MOVWF  x45
0AA2A:  MOVLB  0
0AA2C:  CALL   0A24
....................         
....................         fprintf(CH2,SMS_Massage8);   
0AA30:  MOVLW  0B
0AA32:  MOVWF  FEA
0AA34:  MOVLW  61
0AA36:  MOVWF  FE9
0AA38:  CALL   6C76
....................         putc('\n',CH2);
0AA3C:  MOVLW  0A
0AA3E:  MOVLB  E
0AA40:  MOVWF  x46
0AA42:  MOVLB  0
0AA44:  CALL   25F0
....................         putc(26,CH2);
0AA48:  MOVLW  1A
0AA4A:  MOVLB  E
0AA4C:  MOVWF  x46
0AA4E:  MOVLB  0
0AA50:  CALL   25F0
0AA54:  MOVLB  D
....................       }
....................    }
0AA56:  BRA    AB16
....................    else if(FaultType.B8 == 0)
0AA58:  MOVLB  D
0AA5A:  BTFSC  xAD.7
0AA5C:  BRA    AB16
....................    {
....................       In2.B8 = 0x00;
0AA5E:  BCF    xC5.7
....................       Ack.B8 = 0;
0AA60:  BCF    xBD.7
....................       Output.B8 = 1;      //Off LED
0AA62:  BSF    xA5.7
....................       SendSMS.B8 =0;// Clear SMS
0AA64:  BCF    xD5.7
.................... 
....................       if((OutputType.B8 == 1 || OutputBoth.B8 == 0)&& inputflag ==0)      //If Buzzer or Both
0AA66:  BTFSC  xB1.7
0AA68:  BRA    AA6E
0AA6A:  BTFSC  xB5.7
0AA6C:  BRA    AA90
0AA6E:  MOVLB  E
0AA70:  MOVF   x38,F
0AA72:  BTFSC  FD8.2
0AA74:  BRA    AA7A
0AA76:  MOVLB  D
0AA78:  BRA    AA90
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0AA7A:  MOVLW  01
0AA7C:  MOVWF  x44
0AA7E:  MOVLB  0
0AA80:  CALL   6C9C
0AA84:  DECFSZ 01,W
0AA86:  BRA    AA8A
0AA88:  BRA    AA8E
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AA8A:  BCF    F89.4
0AA8C:  BCF    F92.4
0AA8E:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B8 == 0 || OutputBoth.B8 == 0)&& inputflag ==0)  //If Bell or Both
0AA90:  BTFSS  xB1.7
0AA92:  BRA    AA98
0AA94:  BTFSC  xB5.7
0AA96:  BRA    AABE
0AA98:  MOVLB  E
0AA9A:  MOVF   x38,F
0AA9C:  BTFSC  FD8.2
0AA9E:  BRA    AAA4
0AAA0:  MOVLB  D
0AAA2:  BRA    AABE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AAA4:  MOVLW  02
0AAA6:  MOVWF  x44
0AAA8:  MOVLB  0
0AAAA:  CALL   6C9C
0AAAE:  DECFSZ 01,W
0AAB0:  BRA    AAB4
0AAB2:  BRA    AABC
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AAB4:  BCF    F89.3
0AAB6:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AAB8:  BCF    F89.4
0AABA:  BCF    F92.4
0AABC:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0AABE:  BTFSC  xC5.0
0AAC0:  BRA    AB16
0AAC2:  BTFSC  xC5.1
0AAC4:  BRA    AB16
0AAC6:  BTFSC  xC5.2
0AAC8:  BRA    AB16
0AACA:  BTFSC  xC5.3
0AACC:  BRA    AB16
0AACE:  BTFSC  xC5.4
0AAD0:  BRA    AB16
0AAD2:  BTFSC  xC5.5
0AAD4:  BRA    AB16
0AAD6:  BTFSC  xC5.6
0AAD8:  BRA    AB16
0AADA:  BTFSC  xC5.7
0AADC:  BRA    AB16
0AADE:  BTFSC  xC6.0
0AAE0:  BRA    AB16
0AAE2:  BTFSC  xC6.1
0AAE4:  BRA    AB16
0AAE6:  BTFSC  xC6.2
0AAE8:  BRA    AB16
0AAEA:  BTFSC  xC6.3
0AAEC:  BRA    AB16
0AAEE:  BTFSC  xC6.4
0AAF0:  BRA    AB16
0AAF2:  BTFSC  xC6.5
0AAF4:  BRA    AB16
0AAF6:  BTFSC  xC6.6
0AAF8:  BRA    AB16
0AAFA:  BTFSC  xC6.7
0AAFC:  BRA    AB16
0AAFE:  BTFSC  xC7.0
0AB00:  BRA    AB16
0AB02:  BTFSC  xC7.1
0AB04:  BRA    AB16
0AB06:  BTFSC  xC7.2
0AB08:  BRA    AB16
0AB0A:  BTFSC  xC7.3
0AB0C:  BRA    AB16
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0AB0E:  BCF    F89.3
0AB10:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AB12:  BCF    F89.4
0AB14:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input9
....................    if((((Inputt.B9 ^ InputType.B9) == 1) && (FaultType.B9 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0AB16:  MOVLW  00
0AB18:  BTFSC  xA2.0
0AB1A:  MOVLW  01
0AB1C:  MOVLB  E
0AB1E:  MOVWF  x45
0AB20:  MOVLW  00
0AB22:  MOVLB  D
0AB24:  BTFSC  xAA.0
0AB26:  MOVLW  01
0AB28:  MOVLB  E
0AB2A:  XORWF  x45,W
0AB2C:  SUBLW  01
0AB2E:  BNZ   AB38
0AB30:  MOVLB  D
0AB32:  BTFSS  xAE.0
0AB34:  BRA    AB3E
0AB36:  MOVLB  E
0AB38:  BTFSS  1A.5
0AB3A:  BRA    AC04
0AB3C:  MOVLB  D
....................    {
....................       if(In2.B9 == 0 && AutoAck == 0x0F && Ack.B9 == 0)   //use auto acknowlegde
0AB3E:  BTFSC  xC6.0
0AB40:  BRA    AB54
0AB42:  MOVF   53,W
0AB44:  SUBLW  0F
0AB46:  BNZ   AB54
0AB48:  BTFSC  xBE.0
0AB4A:  BRA    AB54
....................       {
....................             TimeBase1s = 100 ;            //reload again
0AB4C:  MOVLW  64
0AB4E:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0AB50:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B9 = 1;
0AB54:  BSF    xC6.0
....................       if(Ack.B9 == 0)
0AB56:  BTFSC  xBE.0
0AB58:  BRA    AB88
....................       {
....................          if(FlashingFlag == 0)
0AB5A:  BTFSC  1A.1
0AB5C:  BRA    AB62
....................             {
....................                Output.B9 = 0;           //Flash output1
0AB5E:  BCF    xA6.0
....................             }
0AB60:  BRA    AB64
....................             else
....................             {
....................                Output.B9 = 1;
0AB62:  BSF    xA6.0
....................             }
....................          if (~AutoTestFlag)
0AB64:  BTFSC  1A.4
0AB66:  BRA    AB88
....................          {
....................             if(AlarmIndicator.B9 == 1){
0AB68:  BTFSS  xBA.0
0AB6A:  BRA    AB88
....................                 if(OutputBoth.B9 == 0)        //Both output
0AB6C:  BTFSC  xB6.0
0AB6E:  BRA    AB7A
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0AB70:  BSF    F89.4
0AB72:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0AB74:  BSF    F89.3
0AB76:  BCF    F92.3
....................                 }
0AB78:  BRA    AB88
....................                 else
....................                 {
....................                   if(OutputType.B9 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0AB7A:  BTFSS  xB2.0
0AB7C:  BRA    AB84
0AB7E:  BSF    F89.4
0AB80:  BCF    F92.4
0AB82:  BRA    AB88
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0AB84:  BSF    F89.3
0AB86:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0AB88:  MOVLW  01
0AB8A:  MOVLB  E
0AB8C:  MOVWF  x38
....................       // SMS Sending   
....................       if((SendSMS.B9 ==0) && (functointest_f ==0) && (Ack.B9 ==0))
0AB8E:  MOVLB  D
0AB90:  BTFSC  xD6.0
0AB92:  BRA    AC02
0AB94:  BTFSC  30.3
0AB96:  BRA    AC02
0AB98:  BTFSC  xBE.0
0AB9A:  BRA    AC02
....................       {
....................          SendSMS.B9 =1;
0AB9C:  BSF    xD6.0
....................          fprintf(CH2,"AT+CMGS=\"");
0AB9E:  MOVLW  A2
0ABA0:  MOVWF  FF6
0ABA2:  MOVLW  09
0ABA4:  MOVWF  FF7
0ABA6:  MOVLB  0
0ABA8:  CALL   2636
....................          fprintf(CH2,sms_phonenumber);
0ABAC:  MOVLW  0A
0ABAE:  MOVWF  FEA
0ABB0:  MOVLW  72
0ABB2:  MOVWF  FE9
0ABB4:  CALL   6C76
....................          
....................          fprintf(CH2,"\"");
0ABB8:  MOVLW  22
0ABBA:  MOVLB  E
0ABBC:  MOVWF  x46
0ABBE:  MOVLB  0
0ABC0:  CALL   25F0
....................          putc('\n',CH2);
0ABC4:  MOVLW  0A
0ABC6:  MOVLB  E
0ABC8:  MOVWF  x46
0ABCA:  MOVLB  0
0ABCC:  CALL   25F0
....................          delay_ms(50);
0ABD0:  MOVLW  32
0ABD2:  MOVLB  E
0ABD4:  MOVWF  x45
0ABD6:  MOVLB  0
0ABD8:  CALL   0A24
....................         
....................         fprintf(CH2,SMS_Massage9);   
0ABDC:  MOVLW  0B
0ABDE:  MOVWF  FEA
0ABE0:  MOVLW  81
0ABE2:  MOVWF  FE9
0ABE4:  CALL   6C76
....................         putc('\n',CH2);
0ABE8:  MOVLW  0A
0ABEA:  MOVLB  E
0ABEC:  MOVWF  x46
0ABEE:  MOVLB  0
0ABF0:  CALL   25F0
....................         putc(26,CH2);
0ABF4:  MOVLW  1A
0ABF6:  MOVLB  E
0ABF8:  MOVWF  x46
0ABFA:  MOVLB  0
0ABFC:  CALL   25F0
0AC00:  MOVLB  D
....................       }
....................    }
0AC02:  BRA    ACC2
....................    else if(FaultType.B9 == 0)
0AC04:  MOVLB  D
0AC06:  BTFSC  xAE.0
0AC08:  BRA    ACC2
....................    {
....................       In2.B9 = 0x00;
0AC0A:  BCF    xC6.0
....................       Ack.B9 = 0;
0AC0C:  BCF    xBE.0
....................       Output.B9 = 1;      //Off LED
0AC0E:  BSF    xA6.0
....................       SendSMS.B9 =0;// Clear SMS
0AC10:  BCF    xD6.0
....................       
....................       if((OutputType.B9 == 1 || OutputBoth.B9 == 0)&& inputflag ==0)      //If Buzzer or Both
0AC12:  BTFSC  xB2.0
0AC14:  BRA    AC1A
0AC16:  BTFSC  xB6.0
0AC18:  BRA    AC3C
0AC1A:  MOVLB  E
0AC1C:  MOVF   x38,F
0AC1E:  BTFSC  FD8.2
0AC20:  BRA    AC26
0AC22:  MOVLB  D
0AC24:  BRA    AC3C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0AC26:  MOVLW  01
0AC28:  MOVWF  x44
0AC2A:  MOVLB  0
0AC2C:  CALL   6C9C
0AC30:  DECFSZ 01,W
0AC32:  BRA    AC36
0AC34:  BRA    AC3A
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AC36:  BCF    F89.4
0AC38:  BCF    F92.4
0AC3A:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B9 == 0 || OutputBoth.B9 == 0)&& inputflag ==0)  //If Bell or Both
0AC3C:  BTFSS  xB2.0
0AC3E:  BRA    AC44
0AC40:  BTFSC  xB6.0
0AC42:  BRA    AC6A
0AC44:  MOVLB  E
0AC46:  MOVF   x38,F
0AC48:  BTFSC  FD8.2
0AC4A:  BRA    AC50
0AC4C:  MOVLB  D
0AC4E:  BRA    AC6A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AC50:  MOVLW  02
0AC52:  MOVWF  x44
0AC54:  MOVLB  0
0AC56:  CALL   6C9C
0AC5A:  DECFSZ 01,W
0AC5C:  BRA    AC60
0AC5E:  BRA    AC68
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AC60:  BCF    F89.3
0AC62:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AC64:  BCF    F89.4
0AC66:  BCF    F92.4
0AC68:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0AC6A:  BTFSC  xC5.0
0AC6C:  BRA    ACC2
0AC6E:  BTFSC  xC5.1
0AC70:  BRA    ACC2
0AC72:  BTFSC  xC5.2
0AC74:  BRA    ACC2
0AC76:  BTFSC  xC5.3
0AC78:  BRA    ACC2
0AC7A:  BTFSC  xC5.4
0AC7C:  BRA    ACC2
0AC7E:  BTFSC  xC5.5
0AC80:  BRA    ACC2
0AC82:  BTFSC  xC5.6
0AC84:  BRA    ACC2
0AC86:  BTFSC  xC5.7
0AC88:  BRA    ACC2
0AC8A:  BTFSC  xC6.0
0AC8C:  BRA    ACC2
0AC8E:  BTFSC  xC6.1
0AC90:  BRA    ACC2
0AC92:  BTFSC  xC6.2
0AC94:  BRA    ACC2
0AC96:  BTFSC  xC6.3
0AC98:  BRA    ACC2
0AC9A:  BTFSC  xC6.4
0AC9C:  BRA    ACC2
0AC9E:  BTFSC  xC6.5
0ACA0:  BRA    ACC2
0ACA2:  BTFSC  xC6.6
0ACA4:  BRA    ACC2
0ACA6:  BTFSC  xC6.7
0ACA8:  BRA    ACC2
0ACAA:  BTFSC  xC7.0
0ACAC:  BRA    ACC2
0ACAE:  BTFSC  xC7.1
0ACB0:  BRA    ACC2
0ACB2:  BTFSC  xC7.2
0ACB4:  BRA    ACC2
0ACB6:  BTFSC  xC7.3
0ACB8:  BRA    ACC2
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0ACBA:  BCF    F89.3
0ACBC:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0ACBE:  BCF    F89.4
0ACC0:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input10
....................    if((((Inputt.B10 ^ InputType.B10) == 1) && (FaultType.B10 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0ACC2:  MOVLW  00
0ACC4:  BTFSC  xA2.1
0ACC6:  MOVLW  01
0ACC8:  MOVLB  E
0ACCA:  MOVWF  x45
0ACCC:  MOVLW  00
0ACCE:  MOVLB  D
0ACD0:  BTFSC  xAA.1
0ACD2:  MOVLW  01
0ACD4:  MOVLB  E
0ACD6:  XORWF  x45,W
0ACD8:  SUBLW  01
0ACDA:  BNZ   ACE4
0ACDC:  MOVLB  D
0ACDE:  BTFSS  xAE.1
0ACE0:  BRA    ACEA
0ACE2:  MOVLB  E
0ACE4:  BTFSS  1A.5
0ACE6:  BRA    ADB0
0ACE8:  MOVLB  D
....................    {
....................       if(In2.B10 == 0 && AutoAck == 0x0F && Ack.B10 == 0)   //use auto acknowlegde
0ACEA:  BTFSC  xC6.1
0ACEC:  BRA    AD00
0ACEE:  MOVF   53,W
0ACF0:  SUBLW  0F
0ACF2:  BNZ   AD00
0ACF4:  BTFSC  xBE.1
0ACF6:  BRA    AD00
....................       {
....................             TimeBase1s = 100 ;            //reload again
0ACF8:  MOVLW  64
0ACFA:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0ACFC:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B10 = 1;
0AD00:  BSF    xC6.1
....................       if(Ack.B10 == 0)
0AD02:  BTFSC  xBE.1
0AD04:  BRA    AD34
....................       {
....................          if(FlashingFlag == 0)
0AD06:  BTFSC  1A.1
0AD08:  BRA    AD0E
....................             {
....................                Output.B10 = 0;           //Flash output1
0AD0A:  BCF    xA6.1
....................             }
0AD0C:  BRA    AD10
....................             else
....................             {
....................                Output.B10 = 1;
0AD0E:  BSF    xA6.1
....................             }
....................          if (~AutoTestFlag)
0AD10:  BTFSC  1A.4
0AD12:  BRA    AD34
....................          {
....................             if(AlarmIndicator.B10 == 1){
0AD14:  BTFSS  xBA.1
0AD16:  BRA    AD34
....................                 if(OutputBoth.B10 == 0)        //Both output
0AD18:  BTFSC  xB6.1
0AD1A:  BRA    AD26
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0AD1C:  BSF    F89.4
0AD1E:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0AD20:  BSF    F89.3
0AD22:  BCF    F92.3
....................                 }
0AD24:  BRA    AD34
....................                 else
....................                 {
....................                   if(OutputType.B10 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0AD26:  BTFSS  xB2.1
0AD28:  BRA    AD30
0AD2A:  BSF    F89.4
0AD2C:  BCF    F92.4
0AD2E:  BRA    AD34
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0AD30:  BSF    F89.3
0AD32:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0AD34:  MOVLW  01
0AD36:  MOVLB  E
0AD38:  MOVWF  x38
....................       // SMS Sending   
....................       if((SendSMS.B10 ==0) && (functointest_f ==0) && (Ack.B10 ==0))
0AD3A:  MOVLB  D
0AD3C:  BTFSC  xD6.1
0AD3E:  BRA    ADAE
0AD40:  BTFSC  30.3
0AD42:  BRA    ADAE
0AD44:  BTFSC  xBE.1
0AD46:  BRA    ADAE
....................       {
....................          SendSMS.B10 =1;
0AD48:  BSF    xD6.1
....................          fprintf(CH2,"AT+CMGS=\"");
0AD4A:  MOVLW  AC
0AD4C:  MOVWF  FF6
0AD4E:  MOVLW  09
0AD50:  MOVWF  FF7
0AD52:  MOVLB  0
0AD54:  CALL   2636
....................          fprintf(CH2,sms_phonenumber);
0AD58:  MOVLW  0A
0AD5A:  MOVWF  FEA
0AD5C:  MOVLW  72
0AD5E:  MOVWF  FE9
0AD60:  CALL   6C76
....................          
....................          fprintf(CH2,"\"");
0AD64:  MOVLW  22
0AD66:  MOVLB  E
0AD68:  MOVWF  x46
0AD6A:  MOVLB  0
0AD6C:  CALL   25F0
....................          putc('\n',CH2);
0AD70:  MOVLW  0A
0AD72:  MOVLB  E
0AD74:  MOVWF  x46
0AD76:  MOVLB  0
0AD78:  CALL   25F0
....................          delay_ms(50);
0AD7C:  MOVLW  32
0AD7E:  MOVLB  E
0AD80:  MOVWF  x45
0AD82:  MOVLB  0
0AD84:  CALL   0A24
....................         
....................         fprintf(CH2,SMS_Massage10);   
0AD88:  MOVLW  0B
0AD8A:  MOVWF  FEA
0AD8C:  MOVLW  A1
0AD8E:  MOVWF  FE9
0AD90:  CALL   6C76
....................         putc('\n',CH2);
0AD94:  MOVLW  0A
0AD96:  MOVLB  E
0AD98:  MOVWF  x46
0AD9A:  MOVLB  0
0AD9C:  CALL   25F0
....................         putc(26,CH2);
0ADA0:  MOVLW  1A
0ADA2:  MOVLB  E
0ADA4:  MOVWF  x46
0ADA6:  MOVLB  0
0ADA8:  CALL   25F0
0ADAC:  MOVLB  D
....................       }
....................    }
0ADAE:  BRA    AE6E
....................    else if(FaultType.B10 == 0)
0ADB0:  MOVLB  D
0ADB2:  BTFSC  xAE.1
0ADB4:  BRA    AE6E
....................    {
....................       In2.B10 = 0x00;
0ADB6:  BCF    xC6.1
....................       Ack.B10 = 0;
0ADB8:  BCF    xBE.1
....................       Output.B10 = 1;      //Off LED
0ADBA:  BSF    xA6.1
....................       SendSMS.B10 =0;// Clear SMS
0ADBC:  BCF    xD6.1
.................... 
....................       if((OutputType.B10 == 1 || OutputBoth.B10 == 0)&& inputflag ==0)      //If Buzzer or Both
0ADBE:  BTFSC  xB2.1
0ADC0:  BRA    ADC6
0ADC2:  BTFSC  xB6.1
0ADC4:  BRA    ADE8
0ADC6:  MOVLB  E
0ADC8:  MOVF   x38,F
0ADCA:  BTFSC  FD8.2
0ADCC:  BRA    ADD2
0ADCE:  MOVLB  D
0ADD0:  BRA    ADE8
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0ADD2:  MOVLW  01
0ADD4:  MOVWF  x44
0ADD6:  MOVLB  0
0ADD8:  CALL   6C9C
0ADDC:  DECFSZ 01,W
0ADDE:  BRA    ADE2
0ADE0:  BRA    ADE6
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0ADE2:  BCF    F89.4
0ADE4:  BCF    F92.4
0ADE6:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B10 == 0 || OutputBoth.B10 == 0)&& inputflag ==0)  //If Bell or Both
0ADE8:  BTFSS  xB2.1
0ADEA:  BRA    ADF0
0ADEC:  BTFSC  xB6.1
0ADEE:  BRA    AE16
0ADF0:  MOVLB  E
0ADF2:  MOVF   x38,F
0ADF4:  BTFSC  FD8.2
0ADF6:  BRA    ADFC
0ADF8:  MOVLB  D
0ADFA:  BRA    AE16
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0ADFC:  MOVLW  02
0ADFE:  MOVWF  x44
0AE00:  MOVLB  0
0AE02:  CALL   6C9C
0AE06:  DECFSZ 01,W
0AE08:  BRA    AE0C
0AE0A:  BRA    AE14
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AE0C:  BCF    F89.3
0AE0E:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AE10:  BCF    F89.4
0AE12:  BCF    F92.4
0AE14:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0AE16:  BTFSC  xC5.0
0AE18:  BRA    AE6E
0AE1A:  BTFSC  xC5.1
0AE1C:  BRA    AE6E
0AE1E:  BTFSC  xC5.2
0AE20:  BRA    AE6E
0AE22:  BTFSC  xC5.3
0AE24:  BRA    AE6E
0AE26:  BTFSC  xC5.4
0AE28:  BRA    AE6E
0AE2A:  BTFSC  xC5.5
0AE2C:  BRA    AE6E
0AE2E:  BTFSC  xC5.6
0AE30:  BRA    AE6E
0AE32:  BTFSC  xC5.7
0AE34:  BRA    AE6E
0AE36:  BTFSC  xC6.0
0AE38:  BRA    AE6E
0AE3A:  BTFSC  xC6.1
0AE3C:  BRA    AE6E
0AE3E:  BTFSC  xC6.2
0AE40:  BRA    AE6E
0AE42:  BTFSC  xC6.3
0AE44:  BRA    AE6E
0AE46:  BTFSC  xC6.4
0AE48:  BRA    AE6E
0AE4A:  BTFSC  xC6.5
0AE4C:  BRA    AE6E
0AE4E:  BTFSC  xC6.6
0AE50:  BRA    AE6E
0AE52:  BTFSC  xC6.7
0AE54:  BRA    AE6E
0AE56:  BTFSC  xC7.0
0AE58:  BRA    AE6E
0AE5A:  BTFSC  xC7.1
0AE5C:  BRA    AE6E
0AE5E:  BTFSC  xC7.2
0AE60:  BRA    AE6E
0AE62:  BTFSC  xC7.3
0AE64:  BRA    AE6E
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0AE66:  BCF    F89.3
0AE68:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AE6A:  BCF    F89.4
0AE6C:  BCF    F92.4
....................       }
....................    }
....................    
.................... //}
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////
.................... //if(NoOfPoint >= 20)
.................... //{
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input11
....................    if((((Inputt.B11 ^ InputType.B11) == 1) && (FaultType.B11 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0AE6E:  MOVLW  00
0AE70:  BTFSC  xA2.2
0AE72:  MOVLW  01
0AE74:  MOVLB  E
0AE76:  MOVWF  x45
0AE78:  MOVLW  00
0AE7A:  MOVLB  D
0AE7C:  BTFSC  xAA.2
0AE7E:  MOVLW  01
0AE80:  MOVLB  E
0AE82:  XORWF  x45,W
0AE84:  SUBLW  01
0AE86:  BNZ   AE90
0AE88:  MOVLB  D
0AE8A:  BTFSS  xAE.2
0AE8C:  BRA    AE96
0AE8E:  MOVLB  E
0AE90:  BTFSS  1A.5
0AE92:  BRA    AF5C
0AE94:  MOVLB  D
....................    {
....................       if(In2.B11 == 0 && AutoAck == 0x0F && Ack.B11 == 0)   //use auto acknowlegde
0AE96:  BTFSC  xC6.2
0AE98:  BRA    AEAC
0AE9A:  MOVF   53,W
0AE9C:  SUBLW  0F
0AE9E:  BNZ   AEAC
0AEA0:  BTFSC  xBE.2
0AEA2:  BRA    AEAC
....................       {
....................             TimeBase1s = 100 ;            //reload again
0AEA4:  MOVLW  64
0AEA6:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0AEA8:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B11 = 1;
0AEAC:  BSF    xC6.2
....................       if(Ack.B11 == 0)
0AEAE:  BTFSC  xBE.2
0AEB0:  BRA    AEE0
....................       {
....................          if(FlashingFlag == 0)
0AEB2:  BTFSC  1A.1
0AEB4:  BRA    AEBA
....................             {
....................                Output.B11 = 0;           //Flash output1
0AEB6:  BCF    xA6.2
....................             }
0AEB8:  BRA    AEBC
....................             else
....................             {
....................                Output.B11 = 1;
0AEBA:  BSF    xA6.2
....................             }
....................          if (~AutoTestFlag)
0AEBC:  BTFSC  1A.4
0AEBE:  BRA    AEE0
....................          {
....................             if(AlarmIndicator.B11 == 1){
0AEC0:  BTFSS  xBA.2
0AEC2:  BRA    AEE0
....................                 if(OutputBoth.B11 == 0)        //Both output
0AEC4:  BTFSC  xB6.2
0AEC6:  BRA    AED2
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0AEC8:  BSF    F89.4
0AECA:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0AECC:  BSF    F89.3
0AECE:  BCF    F92.3
....................                 }
0AED0:  BRA    AEE0
....................                 else
....................                 {
....................                   if(OutputType.B11 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0AED2:  BTFSS  xB2.2
0AED4:  BRA    AEDC
0AED6:  BSF    F89.4
0AED8:  BCF    F92.4
0AEDA:  BRA    AEE0
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0AEDC:  BSF    F89.3
0AEDE:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0AEE0:  MOVLW  01
0AEE2:  MOVLB  E
0AEE4:  MOVWF  x38
....................       // SMS Sending   
....................      if((SendSMS.B11 ==0) && (functointest_f ==0) && (Ack.B11 ==0))
0AEE6:  MOVLB  D
0AEE8:  BTFSC  xD6.2
0AEEA:  BRA    AF5A
0AEEC:  BTFSC  30.3
0AEEE:  BRA    AF5A
0AEF0:  BTFSC  xBE.2
0AEF2:  BRA    AF5A
....................      {
....................        SendSMS.B11 =1;
0AEF4:  BSF    xD6.2
....................        fprintf(CH2,"AT+CMGS=\"");
0AEF6:  MOVLW  B6
0AEF8:  MOVWF  FF6
0AEFA:  MOVLW  09
0AEFC:  MOVWF  FF7
0AEFE:  MOVLB  0
0AF00:  CALL   2636
....................        fprintf(CH2,sms_phonenumber);
0AF04:  MOVLW  0A
0AF06:  MOVWF  FEA
0AF08:  MOVLW  72
0AF0A:  MOVWF  FE9
0AF0C:  CALL   6C76
....................        
....................        fprintf(CH2,"\"");
0AF10:  MOVLW  22
0AF12:  MOVLB  E
0AF14:  MOVWF  x46
0AF16:  MOVLB  0
0AF18:  CALL   25F0
....................        putc('\n',CH2);
0AF1C:  MOVLW  0A
0AF1E:  MOVLB  E
0AF20:  MOVWF  x46
0AF22:  MOVLB  0
0AF24:  CALL   25F0
....................        delay_ms(50);
0AF28:  MOVLW  32
0AF2A:  MOVLB  E
0AF2C:  MOVWF  x45
0AF2E:  MOVLB  0
0AF30:  CALL   0A24
....................       
....................       fprintf(CH2,SMS_Massage11);   
0AF34:  MOVLW  0B
0AF36:  MOVWF  FEA
0AF38:  MOVLW  C1
0AF3A:  MOVWF  FE9
0AF3C:  CALL   6C76
....................       putc('\n',CH2);
0AF40:  MOVLW  0A
0AF42:  MOVLB  E
0AF44:  MOVWF  x46
0AF46:  MOVLB  0
0AF48:  CALL   25F0
....................       putc(26,CH2);
0AF4C:  MOVLW  1A
0AF4E:  MOVLB  E
0AF50:  MOVWF  x46
0AF52:  MOVLB  0
0AF54:  CALL   25F0
0AF58:  MOVLB  D
....................      }
....................    }
0AF5A:  BRA    B01A
....................    else if(FaultType.B11 == 0)
0AF5C:  MOVLB  D
0AF5E:  BTFSC  xAE.2
0AF60:  BRA    B01A
....................    {
....................       In2.B11 = 0x00;
0AF62:  BCF    xC6.2
....................       Ack.B11 = 0;
0AF64:  BCF    xBE.2
....................       Output.B11 = 1;      //Off LED
0AF66:  BSF    xA6.2
....................       SendSMS.B11 =0;// Clear SMS
0AF68:  BCF    xD6.2
.................... 
....................       if((OutputType.B11 == 1 || OutputBoth.B11 == 0)&& inputflag ==0)      //If Buzzer or Both
0AF6A:  BTFSC  xB2.2
0AF6C:  BRA    AF72
0AF6E:  BTFSC  xB6.2
0AF70:  BRA    AF94
0AF72:  MOVLB  E
0AF74:  MOVF   x38,F
0AF76:  BTFSC  FD8.2
0AF78:  BRA    AF7E
0AF7A:  MOVLB  D
0AF7C:  BRA    AF94
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0AF7E:  MOVLW  01
0AF80:  MOVWF  x44
0AF82:  MOVLB  0
0AF84:  CALL   6C9C
0AF88:  DECFSZ 01,W
0AF8A:  BRA    AF8E
0AF8C:  BRA    AF92
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AF8E:  BCF    F89.4
0AF90:  BCF    F92.4
0AF92:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B11 == 0 || OutputBoth.B11 == 0)&& inputflag ==0)  //If Bell or Both
0AF94:  BTFSS  xB2.2
0AF96:  BRA    AF9C
0AF98:  BTFSC  xB6.2
0AF9A:  BRA    AFC2
0AF9C:  MOVLB  E
0AF9E:  MOVF   x38,F
0AFA0:  BTFSC  FD8.2
0AFA2:  BRA    AFA8
0AFA4:  MOVLB  D
0AFA6:  BRA    AFC2
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0AFA8:  MOVLW  02
0AFAA:  MOVWF  x44
0AFAC:  MOVLB  0
0AFAE:  CALL   6C9C
0AFB2:  DECFSZ 01,W
0AFB4:  BRA    AFB8
0AFB6:  BRA    AFC0
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0AFB8:  BCF    F89.3
0AFBA:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0AFBC:  BCF    F89.4
0AFBE:  BCF    F92.4
0AFC0:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0AFC2:  BTFSC  xC5.0
0AFC4:  BRA    B01A
0AFC6:  BTFSC  xC5.1
0AFC8:  BRA    B01A
0AFCA:  BTFSC  xC5.2
0AFCC:  BRA    B01A
0AFCE:  BTFSC  xC5.3
0AFD0:  BRA    B01A
0AFD2:  BTFSC  xC5.4
0AFD4:  BRA    B01A
0AFD6:  BTFSC  xC5.5
0AFD8:  BRA    B01A
0AFDA:  BTFSC  xC5.6
0AFDC:  BRA    B01A
0AFDE:  BTFSC  xC5.7
0AFE0:  BRA    B01A
0AFE2:  BTFSC  xC6.0
0AFE4:  BRA    B01A
0AFE6:  BTFSC  xC6.1
0AFE8:  BRA    B01A
0AFEA:  BTFSC  xC6.2
0AFEC:  BRA    B01A
0AFEE:  BTFSC  xC6.3
0AFF0:  BRA    B01A
0AFF2:  BTFSC  xC6.4
0AFF4:  BRA    B01A
0AFF6:  BTFSC  xC6.5
0AFF8:  BRA    B01A
0AFFA:  BTFSC  xC6.6
0AFFC:  BRA    B01A
0AFFE:  BTFSC  xC6.7
0B000:  BRA    B01A
0B002:  BTFSC  xC7.0
0B004:  BRA    B01A
0B006:  BTFSC  xC7.1
0B008:  BRA    B01A
0B00A:  BTFSC  xC7.2
0B00C:  BRA    B01A
0B00E:  BTFSC  xC7.3
0B010:  BRA    B01A
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0B012:  BCF    F89.3
0B014:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B016:  BCF    F89.4
0B018:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input12
....................    if((((Inputt.B12 ^ InputType.B12) == 1) && (FaultType.B12 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0B01A:  MOVLW  00
0B01C:  BTFSC  xA2.3
0B01E:  MOVLW  01
0B020:  MOVLB  E
0B022:  MOVWF  x45
0B024:  MOVLW  00
0B026:  MOVLB  D
0B028:  BTFSC  xAA.3
0B02A:  MOVLW  01
0B02C:  MOVLB  E
0B02E:  XORWF  x45,W
0B030:  SUBLW  01
0B032:  BNZ   B03C
0B034:  MOVLB  D
0B036:  BTFSS  xAE.3
0B038:  BRA    B042
0B03A:  MOVLB  E
0B03C:  BTFSS  1A.5
0B03E:  BRA    B108
0B040:  MOVLB  D
....................    {
....................       if(In2.B12 == 0 && AutoAck == 0x0F && Ack.B12 == 0)   //use auto acknowlegde
0B042:  BTFSC  xC6.3
0B044:  BRA    B058
0B046:  MOVF   53,W
0B048:  SUBLW  0F
0B04A:  BNZ   B058
0B04C:  BTFSC  xBE.3
0B04E:  BRA    B058
....................       {
....................             TimeBase1s = 100 ;            //reload again
0B050:  MOVLW  64
0B052:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0B054:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B12 = 1;
0B058:  BSF    xC6.3
....................       if(Ack.B12 == 0)
0B05A:  BTFSC  xBE.3
0B05C:  BRA    B08C
....................       {
....................          if(FlashingFlag == 0)
0B05E:  BTFSC  1A.1
0B060:  BRA    B066
....................             {
....................                Output.B12 = 0;           //Flash output1
0B062:  BCF    xA6.3
....................             }
0B064:  BRA    B068
....................             else
....................             {
....................                Output.B12 = 1;
0B066:  BSF    xA6.3
....................             }
....................          if (~AutoTestFlag)
0B068:  BTFSC  1A.4
0B06A:  BRA    B08C
....................          {
....................             if(AlarmIndicator.B12 == 1){
0B06C:  BTFSS  xBA.3
0B06E:  BRA    B08C
....................                 if(OutputBoth.B12 == 0)        //Both output
0B070:  BTFSC  xB6.3
0B072:  BRA    B07E
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0B074:  BSF    F89.4
0B076:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0B078:  BSF    F89.3
0B07A:  BCF    F92.3
....................                 }
0B07C:  BRA    B08C
....................                 else
....................                 {
....................                   if(OutputType.B12 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0B07E:  BTFSS  xB2.3
0B080:  BRA    B088
0B082:  BSF    F89.4
0B084:  BCF    F92.4
0B086:  BRA    B08C
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0B088:  BSF    F89.3
0B08A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0B08C:  MOVLW  01
0B08E:  MOVLB  E
0B090:  MOVWF  x38
....................          // SMS Sending   
....................       if((SendSMS.B12 ==0) && (functointest_f ==0) && (Ack.B12 ==0))
0B092:  MOVLB  D
0B094:  BTFSC  xD6.3
0B096:  BRA    B106
0B098:  BTFSC  30.3
0B09A:  BRA    B106
0B09C:  BTFSC  xBE.3
0B09E:  BRA    B106
....................       {
....................         SendSMS.B12 =1;
0B0A0:  BSF    xD6.3
....................         fprintf(CH2,"AT+CMGS=\"");
0B0A2:  MOVLW  C0
0B0A4:  MOVWF  FF6
0B0A6:  MOVLW  09
0B0A8:  MOVWF  FF7
0B0AA:  MOVLB  0
0B0AC:  CALL   2636
....................         fprintf(CH2,sms_phonenumber);
0B0B0:  MOVLW  0A
0B0B2:  MOVWF  FEA
0B0B4:  MOVLW  72
0B0B6:  MOVWF  FE9
0B0B8:  CALL   6C76
....................         
....................         fprintf(CH2,"\"");
0B0BC:  MOVLW  22
0B0BE:  MOVLB  E
0B0C0:  MOVWF  x46
0B0C2:  MOVLB  0
0B0C4:  CALL   25F0
....................         putc('\n',CH2);
0B0C8:  MOVLW  0A
0B0CA:  MOVLB  E
0B0CC:  MOVWF  x46
0B0CE:  MOVLB  0
0B0D0:  CALL   25F0
....................         delay_ms(50);
0B0D4:  MOVLW  32
0B0D6:  MOVLB  E
0B0D8:  MOVWF  x45
0B0DA:  MOVLB  0
0B0DC:  CALL   0A24
....................        
....................        fprintf(CH2,SMS_Massage12);   
0B0E0:  MOVLW  0B
0B0E2:  MOVWF  FEA
0B0E4:  MOVLW  E1
0B0E6:  MOVWF  FE9
0B0E8:  CALL   6C76
....................        putc('\n',CH2);
0B0EC:  MOVLW  0A
0B0EE:  MOVLB  E
0B0F0:  MOVWF  x46
0B0F2:  MOVLB  0
0B0F4:  CALL   25F0
....................        putc(26,CH2);
0B0F8:  MOVLW  1A
0B0FA:  MOVLB  E
0B0FC:  MOVWF  x46
0B0FE:  MOVLB  0
0B100:  CALL   25F0
0B104:  MOVLB  D
....................       }
.................... 
....................    }
0B106:  BRA    B1C6
....................    else if(FaultType.B12 == 0)
0B108:  MOVLB  D
0B10A:  BTFSC  xAE.3
0B10C:  BRA    B1C6
....................    {
....................       In2.B12 = 0x00;
0B10E:  BCF    xC6.3
....................       Ack.B12 = 0;
0B110:  BCF    xBE.3
....................       Output.B12 = 1;      //Off LED
0B112:  BSF    xA6.3
....................       SendSMS.B12 =0;// Clear SMS
0B114:  BCF    xD6.3
.................... 
....................       if((OutputType.B12 == 1 || OutputBoth.B12 == 0)&& inputflag ==0)      //If Buzzer or Both
0B116:  BTFSC  xB2.3
0B118:  BRA    B11E
0B11A:  BTFSC  xB6.3
0B11C:  BRA    B140
0B11E:  MOVLB  E
0B120:  MOVF   x38,F
0B122:  BTFSC  FD8.2
0B124:  BRA    B12A
0B126:  MOVLB  D
0B128:  BRA    B140
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0B12A:  MOVLW  01
0B12C:  MOVWF  x44
0B12E:  MOVLB  0
0B130:  CALL   6C9C
0B134:  DECFSZ 01,W
0B136:  BRA    B13A
0B138:  BRA    B13E
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B13A:  BCF    F89.4
0B13C:  BCF    F92.4
0B13E:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B12 == 0 || OutputBoth.B12 == 0)&& inputflag ==0)  //If Bell or Both
0B140:  BTFSS  xB2.3
0B142:  BRA    B148
0B144:  BTFSC  xB6.3
0B146:  BRA    B16E
0B148:  MOVLB  E
0B14A:  MOVF   x38,F
0B14C:  BTFSC  FD8.2
0B14E:  BRA    B154
0B150:  MOVLB  D
0B152:  BRA    B16E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0B154:  MOVLW  02
0B156:  MOVWF  x44
0B158:  MOVLB  0
0B15A:  CALL   6C9C
0B15E:  DECFSZ 01,W
0B160:  BRA    B164
0B162:  BRA    B16C
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0B164:  BCF    F89.3
0B166:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B168:  BCF    F89.4
0B16A:  BCF    F92.4
0B16C:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0B16E:  BTFSC  xC5.0
0B170:  BRA    B1C6
0B172:  BTFSC  xC5.1
0B174:  BRA    B1C6
0B176:  BTFSC  xC5.2
0B178:  BRA    B1C6
0B17A:  BTFSC  xC5.3
0B17C:  BRA    B1C6
0B17E:  BTFSC  xC5.4
0B180:  BRA    B1C6
0B182:  BTFSC  xC5.5
0B184:  BRA    B1C6
0B186:  BTFSC  xC5.6
0B188:  BRA    B1C6
0B18A:  BTFSC  xC5.7
0B18C:  BRA    B1C6
0B18E:  BTFSC  xC6.0
0B190:  BRA    B1C6
0B192:  BTFSC  xC6.1
0B194:  BRA    B1C6
0B196:  BTFSC  xC6.2
0B198:  BRA    B1C6
0B19A:  BTFSC  xC6.3
0B19C:  BRA    B1C6
0B19E:  BTFSC  xC6.4
0B1A0:  BRA    B1C6
0B1A2:  BTFSC  xC6.5
0B1A4:  BRA    B1C6
0B1A6:  BTFSC  xC6.6
0B1A8:  BRA    B1C6
0B1AA:  BTFSC  xC6.7
0B1AC:  BRA    B1C6
0B1AE:  BTFSC  xC7.0
0B1B0:  BRA    B1C6
0B1B2:  BTFSC  xC7.1
0B1B4:  BRA    B1C6
0B1B6:  BTFSC  xC7.2
0B1B8:  BRA    B1C6
0B1BA:  BTFSC  xC7.3
0B1BC:  BRA    B1C6
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0B1BE:  BCF    F89.3
0B1C0:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B1C2:  BCF    F89.4
0B1C4:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input13
....................    if((((Inputt.B13 ^ InputType.B13) == 1) && (FaultType.B13 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0B1C6:  MOVLW  00
0B1C8:  BTFSC  xA2.4
0B1CA:  MOVLW  01
0B1CC:  MOVLB  E
0B1CE:  MOVWF  x45
0B1D0:  MOVLW  00
0B1D2:  MOVLB  D
0B1D4:  BTFSC  xAA.4
0B1D6:  MOVLW  01
0B1D8:  MOVLB  E
0B1DA:  XORWF  x45,W
0B1DC:  SUBLW  01
0B1DE:  BNZ   B1E8
0B1E0:  MOVLB  D
0B1E2:  BTFSS  xAE.4
0B1E4:  BRA    B1EE
0B1E6:  MOVLB  E
0B1E8:  BTFSS  1A.5
0B1EA:  BRA    B2B4
0B1EC:  MOVLB  D
....................    {
....................       if(In2.B13 == 0 && AutoAck == 0x0F && Ack.B13 == 0)   //use auto acknowlegde
0B1EE:  BTFSC  xC6.4
0B1F0:  BRA    B204
0B1F2:  MOVF   53,W
0B1F4:  SUBLW  0F
0B1F6:  BNZ   B204
0B1F8:  BTFSC  xBE.4
0B1FA:  BRA    B204
....................       {
....................             TimeBase1s = 100 ;            //reload again
0B1FC:  MOVLW  64
0B1FE:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0B200:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B13 = 1;
0B204:  BSF    xC6.4
....................       if(Ack.B13 == 0)
0B206:  BTFSC  xBE.4
0B208:  BRA    B238
....................       {
....................          if(FlashingFlag == 0)
0B20A:  BTFSC  1A.1
0B20C:  BRA    B212
....................             {
....................                Output.B13 = 0;           //Flash output1
0B20E:  BCF    xA6.4
....................             }
0B210:  BRA    B214
....................             else
....................             {
....................                Output.B13 = 1;
0B212:  BSF    xA6.4
....................             }
....................          if (~AutoTestFlag)
0B214:  BTFSC  1A.4
0B216:  BRA    B238
....................          {
....................             if(AlarmIndicator.B13 == 1){
0B218:  BTFSS  xBA.4
0B21A:  BRA    B238
....................                 if(OutputBoth.B13 == 0)        //Both output
0B21C:  BTFSC  xB6.4
0B21E:  BRA    B22A
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0B220:  BSF    F89.4
0B222:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0B224:  BSF    F89.3
0B226:  BCF    F92.3
....................                 }
0B228:  BRA    B238
....................                 else
....................                 {
....................                   if(OutputType.B13 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0B22A:  BTFSS  xB2.4
0B22C:  BRA    B234
0B22E:  BSF    F89.4
0B230:  BCF    F92.4
0B232:  BRA    B238
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0B234:  BSF    F89.3
0B236:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0B238:  MOVLW  01
0B23A:  MOVLB  E
0B23C:  MOVWF  x38
....................       // SMS Sending   
....................         if((SendSMS.B13 ==0) && (functointest_f ==0) && (Ack.B13 ==0))
0B23E:  MOVLB  D
0B240:  BTFSC  xD6.4
0B242:  BRA    B2B2
0B244:  BTFSC  30.3
0B246:  BRA    B2B2
0B248:  BTFSC  xBE.4
0B24A:  BRA    B2B2
....................         {
....................           SendSMS.B13 =1;
0B24C:  BSF    xD6.4
....................           fprintf(CH2,"AT+CMGS=\"");
0B24E:  MOVLW  CA
0B250:  MOVWF  FF6
0B252:  MOVLW  09
0B254:  MOVWF  FF7
0B256:  MOVLB  0
0B258:  CALL   2636
....................           fprintf(CH2,sms_phonenumber);
0B25C:  MOVLW  0A
0B25E:  MOVWF  FEA
0B260:  MOVLW  72
0B262:  MOVWF  FE9
0B264:  CALL   6C76
....................           
....................           fprintf(CH2,"\"");
0B268:  MOVLW  22
0B26A:  MOVLB  E
0B26C:  MOVWF  x46
0B26E:  MOVLB  0
0B270:  CALL   25F0
....................           putc('\n',CH2);
0B274:  MOVLW  0A
0B276:  MOVLB  E
0B278:  MOVWF  x46
0B27A:  MOVLB  0
0B27C:  CALL   25F0
....................           delay_ms(50);
0B280:  MOVLW  32
0B282:  MOVLB  E
0B284:  MOVWF  x45
0B286:  MOVLB  0
0B288:  CALL   0A24
....................          
....................          fprintf(CH2,SMS_Massage13);   
0B28C:  MOVLW  0C
0B28E:  MOVWF  FEA
0B290:  MOVLW  01
0B292:  MOVWF  FE9
0B294:  CALL   6C76
....................          putc('\n',CH2);
0B298:  MOVLW  0A
0B29A:  MOVLB  E
0B29C:  MOVWF  x46
0B29E:  MOVLB  0
0B2A0:  CALL   25F0
....................          putc(26,CH2);
0B2A4:  MOVLW  1A
0B2A6:  MOVLB  E
0B2A8:  MOVWF  x46
0B2AA:  MOVLB  0
0B2AC:  CALL   25F0
0B2B0:  MOVLB  D
....................         }
....................    }
0B2B2:  BRA    B372
....................    else if(FaultType.B13 == 0)
0B2B4:  MOVLB  D
0B2B6:  BTFSC  xAE.4
0B2B8:  BRA    B372
....................    {
....................       In2.B13 = 0x00;
0B2BA:  BCF    xC6.4
....................       Ack.B13 = 0;
0B2BC:  BCF    xBE.4
....................       Output.B13 = 1;      //Off LED
0B2BE:  BSF    xA6.4
....................       SendSMS.B13 =0;// Clear SMS
0B2C0:  BCF    xD6.4
.................... 
....................       if((OutputType.B13 == 1 || OutputBoth.B13 == 0)&& inputflag ==0)      //If Buzzer or Both
0B2C2:  BTFSC  xB2.4
0B2C4:  BRA    B2CA
0B2C6:  BTFSC  xB6.4
0B2C8:  BRA    B2EC
0B2CA:  MOVLB  E
0B2CC:  MOVF   x38,F
0B2CE:  BTFSC  FD8.2
0B2D0:  BRA    B2D6
0B2D2:  MOVLB  D
0B2D4:  BRA    B2EC
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0B2D6:  MOVLW  01
0B2D8:  MOVWF  x44
0B2DA:  MOVLB  0
0B2DC:  CALL   6C9C
0B2E0:  DECFSZ 01,W
0B2E2:  BRA    B2E6
0B2E4:  BRA    B2EA
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B2E6:  BCF    F89.4
0B2E8:  BCF    F92.4
0B2EA:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B13 == 0 || OutputBoth.B13 == 0)&& inputflag ==0)  //If Bell or Both
0B2EC:  BTFSS  xB2.4
0B2EE:  BRA    B2F4
0B2F0:  BTFSC  xB6.4
0B2F2:  BRA    B31A
0B2F4:  MOVLB  E
0B2F6:  MOVF   x38,F
0B2F8:  BTFSC  FD8.2
0B2FA:  BRA    B300
0B2FC:  MOVLB  D
0B2FE:  BRA    B31A
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0B300:  MOVLW  02
0B302:  MOVWF  x44
0B304:  MOVLB  0
0B306:  CALL   6C9C
0B30A:  DECFSZ 01,W
0B30C:  BRA    B310
0B30E:  BRA    B318
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0B310:  BCF    F89.3
0B312:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B314:  BCF    F89.4
0B316:  BCF    F92.4
0B318:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0B31A:  BTFSC  xC5.0
0B31C:  BRA    B372
0B31E:  BTFSC  xC5.1
0B320:  BRA    B372
0B322:  BTFSC  xC5.2
0B324:  BRA    B372
0B326:  BTFSC  xC5.3
0B328:  BRA    B372
0B32A:  BTFSC  xC5.4
0B32C:  BRA    B372
0B32E:  BTFSC  xC5.5
0B330:  BRA    B372
0B332:  BTFSC  xC5.6
0B334:  BRA    B372
0B336:  BTFSC  xC5.7
0B338:  BRA    B372
0B33A:  BTFSC  xC6.0
0B33C:  BRA    B372
0B33E:  BTFSC  xC6.1
0B340:  BRA    B372
0B342:  BTFSC  xC6.2
0B344:  BRA    B372
0B346:  BTFSC  xC6.3
0B348:  BRA    B372
0B34A:  BTFSC  xC6.4
0B34C:  BRA    B372
0B34E:  BTFSC  xC6.5
0B350:  BRA    B372
0B352:  BTFSC  xC6.6
0B354:  BRA    B372
0B356:  BTFSC  xC6.7
0B358:  BRA    B372
0B35A:  BTFSC  xC7.0
0B35C:  BRA    B372
0B35E:  BTFSC  xC7.1
0B360:  BRA    B372
0B362:  BTFSC  xC7.2
0B364:  BRA    B372
0B366:  BTFSC  xC7.3
0B368:  BRA    B372
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0B36A:  BCF    F89.3
0B36C:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B36E:  BCF    F89.4
0B370:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input14
....................    if((((Inputt.B14 ^ InputType.B14) == 1) && (FaultType.B14 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0B372:  MOVLW  00
0B374:  BTFSC  xA2.5
0B376:  MOVLW  01
0B378:  MOVLB  E
0B37A:  MOVWF  x45
0B37C:  MOVLW  00
0B37E:  MOVLB  D
0B380:  BTFSC  xAA.5
0B382:  MOVLW  01
0B384:  MOVLB  E
0B386:  XORWF  x45,W
0B388:  SUBLW  01
0B38A:  BNZ   B394
0B38C:  MOVLB  D
0B38E:  BTFSS  xAE.5
0B390:  BRA    B39A
0B392:  MOVLB  E
0B394:  BTFSS  1A.5
0B396:  BRA    B460
0B398:  MOVLB  D
....................    {
....................       if(In2.B14 == 0 && AutoAck == 0x0F && Ack.B14 == 0)   //use auto acknowlegde
0B39A:  BTFSC  xC6.5
0B39C:  BRA    B3B0
0B39E:  MOVF   53,W
0B3A0:  SUBLW  0F
0B3A2:  BNZ   B3B0
0B3A4:  BTFSC  xBE.5
0B3A6:  BRA    B3B0
....................       {
....................             TimeBase1s = 100 ;            //reload again
0B3A8:  MOVLW  64
0B3AA:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0B3AC:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B14 = 1;
0B3B0:  BSF    xC6.5
....................       if(Ack.B14 == 0)
0B3B2:  BTFSC  xBE.5
0B3B4:  BRA    B3E4
....................       {
....................          if(FlashingFlag == 0)
0B3B6:  BTFSC  1A.1
0B3B8:  BRA    B3BE
....................             {
....................                Output.B14 = 0;           //Flash output1
0B3BA:  BCF    xA6.5
....................             }
0B3BC:  BRA    B3C0
....................             else
....................             {
....................                Output.B14 = 1;
0B3BE:  BSF    xA6.5
....................             }
....................          if (~AutoTestFlag)
0B3C0:  BTFSC  1A.4
0B3C2:  BRA    B3E4
....................          {
....................             if(AlarmIndicator.B14 == 1){
0B3C4:  BTFSS  xBA.5
0B3C6:  BRA    B3E4
....................                 if(OutputBoth.B14 == 0)        //Both output
0B3C8:  BTFSC  xB6.5
0B3CA:  BRA    B3D6
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0B3CC:  BSF    F89.4
0B3CE:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0B3D0:  BSF    F89.3
0B3D2:  BCF    F92.3
....................                 }
0B3D4:  BRA    B3E4
....................                 else
....................                 {
....................                   if(OutputType.B14 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0B3D6:  BTFSS  xB2.5
0B3D8:  BRA    B3E0
0B3DA:  BSF    F89.4
0B3DC:  BCF    F92.4
0B3DE:  BRA    B3E4
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0B3E0:  BSF    F89.3
0B3E2:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0B3E4:  MOVLW  01
0B3E6:  MOVLB  E
0B3E8:  MOVWF  x38
....................       // SMS Sending   
....................         if((SendSMS.B14 ==0) && (functointest_f ==0) && (Ack.B14 ==0))
0B3EA:  MOVLB  D
0B3EC:  BTFSC  xD6.5
0B3EE:  BRA    B45E
0B3F0:  BTFSC  30.3
0B3F2:  BRA    B45E
0B3F4:  BTFSC  xBE.5
0B3F6:  BRA    B45E
....................         {
....................           SendSMS.B14 =1;
0B3F8:  BSF    xD6.5
....................           fprintf(CH2,"AT+CMGS=\"");
0B3FA:  MOVLW  D4
0B3FC:  MOVWF  FF6
0B3FE:  MOVLW  09
0B400:  MOVWF  FF7
0B402:  MOVLB  0
0B404:  CALL   2636
....................           fprintf(CH2,sms_phonenumber);
0B408:  MOVLW  0A
0B40A:  MOVWF  FEA
0B40C:  MOVLW  72
0B40E:  MOVWF  FE9
0B410:  CALL   6C76
....................           
....................           fprintf(CH2,"\"");
0B414:  MOVLW  22
0B416:  MOVLB  E
0B418:  MOVWF  x46
0B41A:  MOVLB  0
0B41C:  CALL   25F0
....................           putc('\n',CH2);
0B420:  MOVLW  0A
0B422:  MOVLB  E
0B424:  MOVWF  x46
0B426:  MOVLB  0
0B428:  CALL   25F0
....................           delay_ms(50);
0B42C:  MOVLW  32
0B42E:  MOVLB  E
0B430:  MOVWF  x45
0B432:  MOVLB  0
0B434:  CALL   0A24
....................          
....................          fprintf(CH2,SMS_Massage14);   
0B438:  MOVLW  0C
0B43A:  MOVWF  FEA
0B43C:  MOVLW  21
0B43E:  MOVWF  FE9
0B440:  CALL   6C76
....................          putc('\n',CH2);
0B444:  MOVLW  0A
0B446:  MOVLB  E
0B448:  MOVWF  x46
0B44A:  MOVLB  0
0B44C:  CALL   25F0
....................          putc(26,CH2);
0B450:  MOVLW  1A
0B452:  MOVLB  E
0B454:  MOVWF  x46
0B456:  MOVLB  0
0B458:  CALL   25F0
0B45C:  MOVLB  D
....................         }
....................    }
0B45E:  BRA    B51E
....................    else if(FaultType.B14 == 0)
0B460:  MOVLB  D
0B462:  BTFSC  xAE.5
0B464:  BRA    B51E
....................    {
....................       In2.B14 = 0x00;
0B466:  BCF    xC6.5
....................       Ack.B14 = 0;
0B468:  BCF    xBE.5
....................       Output.B14 = 1;      //Off LED
0B46A:  BSF    xA6.5
....................       SendSMS.B14 =0;// Clear SMS
0B46C:  BCF    xD6.5
.................... 
....................       if((OutputType.B14 == 1 || OutputBoth.B14 == 0)&& inputflag ==0)      //If Buzzer or Both
0B46E:  BTFSC  xB2.5
0B470:  BRA    B476
0B472:  BTFSC  xB6.5
0B474:  BRA    B498
0B476:  MOVLB  E
0B478:  MOVF   x38,F
0B47A:  BTFSC  FD8.2
0B47C:  BRA    B482
0B47E:  MOVLB  D
0B480:  BRA    B498
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0B482:  MOVLW  01
0B484:  MOVWF  x44
0B486:  MOVLB  0
0B488:  CALL   6C9C
0B48C:  DECFSZ 01,W
0B48E:  BRA    B492
0B490:  BRA    B496
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B492:  BCF    F89.4
0B494:  BCF    F92.4
0B496:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B14 == 0 || OutputBoth.B14 == 0)&& inputflag ==0)  //If Bell or Both
0B498:  BTFSS  xB2.5
0B49A:  BRA    B4A0
0B49C:  BTFSC  xB6.5
0B49E:  BRA    B4C6
0B4A0:  MOVLB  E
0B4A2:  MOVF   x38,F
0B4A4:  BTFSC  FD8.2
0B4A6:  BRA    B4AC
0B4A8:  MOVLB  D
0B4AA:  BRA    B4C6
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0B4AC:  MOVLW  02
0B4AE:  MOVWF  x44
0B4B0:  MOVLB  0
0B4B2:  CALL   6C9C
0B4B6:  DECFSZ 01,W
0B4B8:  BRA    B4BC
0B4BA:  BRA    B4C4
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0B4BC:  BCF    F89.3
0B4BE:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B4C0:  BCF    F89.4
0B4C2:  BCF    F92.4
0B4C4:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0B4C6:  BTFSC  xC5.0
0B4C8:  BRA    B51E
0B4CA:  BTFSC  xC5.1
0B4CC:  BRA    B51E
0B4CE:  BTFSC  xC5.2
0B4D0:  BRA    B51E
0B4D2:  BTFSC  xC5.3
0B4D4:  BRA    B51E
0B4D6:  BTFSC  xC5.4
0B4D8:  BRA    B51E
0B4DA:  BTFSC  xC5.5
0B4DC:  BRA    B51E
0B4DE:  BTFSC  xC5.6
0B4E0:  BRA    B51E
0B4E2:  BTFSC  xC5.7
0B4E4:  BRA    B51E
0B4E6:  BTFSC  xC6.0
0B4E8:  BRA    B51E
0B4EA:  BTFSC  xC6.1
0B4EC:  BRA    B51E
0B4EE:  BTFSC  xC6.2
0B4F0:  BRA    B51E
0B4F2:  BTFSC  xC6.3
0B4F4:  BRA    B51E
0B4F6:  BTFSC  xC6.4
0B4F8:  BRA    B51E
0B4FA:  BTFSC  xC6.5
0B4FC:  BRA    B51E
0B4FE:  BTFSC  xC6.6
0B500:  BRA    B51E
0B502:  BTFSC  xC6.7
0B504:  BRA    B51E
0B506:  BTFSC  xC7.0
0B508:  BRA    B51E
0B50A:  BTFSC  xC7.1
0B50C:  BRA    B51E
0B50E:  BTFSC  xC7.2
0B510:  BRA    B51E
0B512:  BTFSC  xC7.3
0B514:  BRA    B51E
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0B516:  BCF    F89.3
0B518:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B51A:  BCF    F89.4
0B51C:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input15
....................    if((((Inputt.B15 ^ InputType.B15) == 1) && (FaultType.B15 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0B51E:  MOVLW  00
0B520:  BTFSC  xA2.6
0B522:  MOVLW  01
0B524:  MOVLB  E
0B526:  MOVWF  x45
0B528:  MOVLW  00
0B52A:  MOVLB  D
0B52C:  BTFSC  xAA.6
0B52E:  MOVLW  01
0B530:  MOVLB  E
0B532:  XORWF  x45,W
0B534:  SUBLW  01
0B536:  BNZ   B540
0B538:  MOVLB  D
0B53A:  BTFSS  xAE.6
0B53C:  BRA    B546
0B53E:  MOVLB  E
0B540:  BTFSS  1A.5
0B542:  BRA    B60C
0B544:  MOVLB  D
....................    {
....................       if(In2.B15 == 0 && AutoAck == 0x0F && Ack.B15 == 0)   //use auto acknowlegde
0B546:  BTFSC  xC6.6
0B548:  BRA    B55C
0B54A:  MOVF   53,W
0B54C:  SUBLW  0F
0B54E:  BNZ   B55C
0B550:  BTFSC  xBE.6
0B552:  BRA    B55C
....................       {
....................             TimeBase1s = 100 ;            //reload again
0B554:  MOVLW  64
0B556:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0B558:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B15 = 1;
0B55C:  BSF    xC6.6
....................       if(Ack.B15 == 0)
0B55E:  BTFSC  xBE.6
0B560:  BRA    B590
....................       {
....................          if(FlashingFlag == 0)
0B562:  BTFSC  1A.1
0B564:  BRA    B56A
....................             {
....................                Output.B15 = 0;           //Flash output1
0B566:  BCF    xA6.6
....................             }
0B568:  BRA    B56C
....................             else
....................             {
....................                Output.B15 = 1;
0B56A:  BSF    xA6.6
....................             }
....................          if (~AutoTestFlag)
0B56C:  BTFSC  1A.4
0B56E:  BRA    B590
....................          {
....................             if(AlarmIndicator.B15 == 1){
0B570:  BTFSS  xBA.6
0B572:  BRA    B590
....................                 if(OutputBoth.B15 == 0)        //Both output
0B574:  BTFSC  xB6.6
0B576:  BRA    B582
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0B578:  BSF    F89.4
0B57A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0B57C:  BSF    F89.3
0B57E:  BCF    F92.3
....................                 }
0B580:  BRA    B590
....................                 else
....................                 {
....................                   if(OutputType.B15 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0B582:  BTFSS  xB2.6
0B584:  BRA    B58C
0B586:  BSF    F89.4
0B588:  BCF    F92.4
0B58A:  BRA    B590
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0B58C:  BSF    F89.3
0B58E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0B590:  MOVLW  01
0B592:  MOVLB  E
0B594:  MOVWF  x38
....................       // SMS Sending   
....................         if((SendSMS.B15 ==0) && (functointest_f ==0) && (Ack.B15 ==0))
0B596:  MOVLB  D
0B598:  BTFSC  xD6.6
0B59A:  BRA    B60A
0B59C:  BTFSC  30.3
0B59E:  BRA    B60A
0B5A0:  BTFSC  xBE.6
0B5A2:  BRA    B60A
....................         {
....................           SendSMS.B15 =1;
0B5A4:  BSF    xD6.6
....................           fprintf(CH2,"AT+CMGS=\"");
0B5A6:  MOVLW  DE
0B5A8:  MOVWF  FF6
0B5AA:  MOVLW  09
0B5AC:  MOVWF  FF7
0B5AE:  MOVLB  0
0B5B0:  CALL   2636
....................           fprintf(CH2,sms_phonenumber);
0B5B4:  MOVLW  0A
0B5B6:  MOVWF  FEA
0B5B8:  MOVLW  72
0B5BA:  MOVWF  FE9
0B5BC:  CALL   6C76
....................           
....................           fprintf(CH2,"\"");
0B5C0:  MOVLW  22
0B5C2:  MOVLB  E
0B5C4:  MOVWF  x46
0B5C6:  MOVLB  0
0B5C8:  CALL   25F0
....................           putc('\n',CH2);
0B5CC:  MOVLW  0A
0B5CE:  MOVLB  E
0B5D0:  MOVWF  x46
0B5D2:  MOVLB  0
0B5D4:  CALL   25F0
....................           delay_ms(50);
0B5D8:  MOVLW  32
0B5DA:  MOVLB  E
0B5DC:  MOVWF  x45
0B5DE:  MOVLB  0
0B5E0:  CALL   0A24
....................          
....................          fprintf(CH2,SMS_Massage15);   
0B5E4:  MOVLW  0C
0B5E6:  MOVWF  FEA
0B5E8:  MOVLW  41
0B5EA:  MOVWF  FE9
0B5EC:  CALL   6C76
....................          putc('\n',CH2);
0B5F0:  MOVLW  0A
0B5F2:  MOVLB  E
0B5F4:  MOVWF  x46
0B5F6:  MOVLB  0
0B5F8:  CALL   25F0
....................          putc(26,CH2);
0B5FC:  MOVLW  1A
0B5FE:  MOVLB  E
0B600:  MOVWF  x46
0B602:  MOVLB  0
0B604:  CALL   25F0
0B608:  MOVLB  D
....................         }
....................    }
0B60A:  BRA    B6CA
....................    else if(FaultType.B15 == 0)
0B60C:  MOVLB  D
0B60E:  BTFSC  xAE.6
0B610:  BRA    B6CA
....................    {
....................       In2.B15 = 0x00;
0B612:  BCF    xC6.6
....................       Ack.B15 = 0;
0B614:  BCF    xBE.6
....................       Output.B15 = 1;      //Off LED
0B616:  BSF    xA6.6
....................       SendSMS.B15 =0;// Clear SMS
0B618:  BCF    xD6.6
.................... 
....................       if((OutputType.B15 == 1 || OutputBoth.B15 == 0)&& inputflag ==0)      //If Buzzer or Both
0B61A:  BTFSC  xB2.6
0B61C:  BRA    B622
0B61E:  BTFSC  xB6.6
0B620:  BRA    B644
0B622:  MOVLB  E
0B624:  MOVF   x38,F
0B626:  BTFSC  FD8.2
0B628:  BRA    B62E
0B62A:  MOVLB  D
0B62C:  BRA    B644
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0B62E:  MOVLW  01
0B630:  MOVWF  x44
0B632:  MOVLB  0
0B634:  CALL   6C9C
0B638:  DECFSZ 01,W
0B63A:  BRA    B63E
0B63C:  BRA    B642
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B63E:  BCF    F89.4
0B640:  BCF    F92.4
0B642:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B15 == 0 || OutputBoth.B15 == 0)&& inputflag ==0)  //If Bell or Both
0B644:  BTFSS  xB2.6
0B646:  BRA    B64C
0B648:  BTFSC  xB6.6
0B64A:  BRA    B672
0B64C:  MOVLB  E
0B64E:  MOVF   x38,F
0B650:  BTFSC  FD8.2
0B652:  BRA    B658
0B654:  MOVLB  D
0B656:  BRA    B672
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0B658:  MOVLW  02
0B65A:  MOVWF  x44
0B65C:  MOVLB  0
0B65E:  CALL   6C9C
0B662:  DECFSZ 01,W
0B664:  BRA    B668
0B666:  BRA    B670
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0B668:  BCF    F89.3
0B66A:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B66C:  BCF    F89.4
0B66E:  BCF    F92.4
0B670:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0B672:  BTFSC  xC5.0
0B674:  BRA    B6CA
0B676:  BTFSC  xC5.1
0B678:  BRA    B6CA
0B67A:  BTFSC  xC5.2
0B67C:  BRA    B6CA
0B67E:  BTFSC  xC5.3
0B680:  BRA    B6CA
0B682:  BTFSC  xC5.4
0B684:  BRA    B6CA
0B686:  BTFSC  xC5.5
0B688:  BRA    B6CA
0B68A:  BTFSC  xC5.6
0B68C:  BRA    B6CA
0B68E:  BTFSC  xC5.7
0B690:  BRA    B6CA
0B692:  BTFSC  xC6.0
0B694:  BRA    B6CA
0B696:  BTFSC  xC6.1
0B698:  BRA    B6CA
0B69A:  BTFSC  xC6.2
0B69C:  BRA    B6CA
0B69E:  BTFSC  xC6.3
0B6A0:  BRA    B6CA
0B6A2:  BTFSC  xC6.4
0B6A4:  BRA    B6CA
0B6A6:  BTFSC  xC6.5
0B6A8:  BRA    B6CA
0B6AA:  BTFSC  xC6.6
0B6AC:  BRA    B6CA
0B6AE:  BTFSC  xC6.7
0B6B0:  BRA    B6CA
0B6B2:  BTFSC  xC7.0
0B6B4:  BRA    B6CA
0B6B6:  BTFSC  xC7.1
0B6B8:  BRA    B6CA
0B6BA:  BTFSC  xC7.2
0B6BC:  BRA    B6CA
0B6BE:  BTFSC  xC7.3
0B6C0:  BRA    B6CA
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0B6C2:  BCF    F89.3
0B6C4:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B6C6:  BCF    F89.4
0B6C8:  BCF    F92.4
....................       }
....................    }
....................    ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //input16
....................    if((((Inputt.B16 ^ InputType.B16) == 1) && (FaultType.B16 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0B6CA:  MOVLW  00
0B6CC:  BTFSC  xA2.7
0B6CE:  MOVLW  01
0B6D0:  MOVLB  E
0B6D2:  MOVWF  x45
0B6D4:  MOVLW  00
0B6D6:  MOVLB  D
0B6D8:  BTFSC  xAA.7
0B6DA:  MOVLW  01
0B6DC:  MOVLB  E
0B6DE:  XORWF  x45,W
0B6E0:  SUBLW  01
0B6E2:  BNZ   B6EC
0B6E4:  MOVLB  D
0B6E6:  BTFSS  xAE.7
0B6E8:  BRA    B6F2
0B6EA:  MOVLB  E
0B6EC:  BTFSS  1A.5
0B6EE:  BRA    B7B8
0B6F0:  MOVLB  D
....................    {
....................       if(In2.B16 == 0 && AutoAck == 0x0F && Ack.B16 == 0)   //use auto acknowlegde
0B6F2:  BTFSC  xC6.7
0B6F4:  BRA    B708
0B6F6:  MOVF   53,W
0B6F8:  SUBLW  0F
0B6FA:  BNZ   B708
0B6FC:  BTFSC  xBE.7
0B6FE:  BRA    B708
....................       {
....................             TimeBase1s = 100 ;            //reload again
0B700:  MOVLW  64
0B702:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0B704:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B16 = 1;
0B708:  BSF    xC6.7
....................       if(Ack.B16 == 0)
0B70A:  BTFSC  xBE.7
0B70C:  BRA    B73C
....................       {
....................          if(FlashingFlag == 0)
0B70E:  BTFSC  1A.1
0B710:  BRA    B716
....................             {
....................                Output.B16 = 0;         //Flash output1
0B712:  BCF    xA6.7
....................             }
0B714:  BRA    B718
....................             else
....................             {
....................                Output.B16 = 1;
0B716:  BSF    xA6.7
....................             }
....................          if (~AutoTestFlag)
0B718:  BTFSC  1A.4
0B71A:  BRA    B73C
....................          {
....................             if(AlarmIndicator.B16 == 1){
0B71C:  BTFSS  xBA.7
0B71E:  BRA    B73C
....................                 if(OutputBoth.B16 == 0)        //Both output
0B720:  BTFSC  xB6.7
0B722:  BRA    B72E
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0B724:  BSF    F89.4
0B726:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0B728:  BSF    F89.3
0B72A:  BCF    F92.3
....................                 }
0B72C:  BRA    B73C
....................                 else
....................                 {
....................                   if(OutputType.B16 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0B72E:  BTFSS  xB2.7
0B730:  BRA    B738
0B732:  BSF    F89.4
0B734:  BCF    F92.4
0B736:  BRA    B73C
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0B738:  BSF    F89.3
0B73A:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0B73C:  MOVLW  01
0B73E:  MOVLB  E
0B740:  MOVWF  x38
....................        // SMS Sending   
....................      if((SendSMS.B16 ==0) && (functointest_f ==0) && (Ack.B16 ==0))
0B742:  MOVLB  D
0B744:  BTFSC  xD6.7
0B746:  BRA    B7B6
0B748:  BTFSC  30.3
0B74A:  BRA    B7B6
0B74C:  BTFSC  xBE.7
0B74E:  BRA    B7B6
....................      {
....................        SendSMS.B16 =1;
0B750:  BSF    xD6.7
....................        fprintf(CH2,"AT+CMGS=\"");
0B752:  MOVLW  E8
0B754:  MOVWF  FF6
0B756:  MOVLW  09
0B758:  MOVWF  FF7
0B75A:  MOVLB  0
0B75C:  CALL   2636
....................        fprintf(CH2,sms_phonenumber);
0B760:  MOVLW  0A
0B762:  MOVWF  FEA
0B764:  MOVLW  72
0B766:  MOVWF  FE9
0B768:  CALL   6C76
....................        
....................        fprintf(CH2,"\"");
0B76C:  MOVLW  22
0B76E:  MOVLB  E
0B770:  MOVWF  x46
0B772:  MOVLB  0
0B774:  CALL   25F0
....................        putc('\n',CH2);
0B778:  MOVLW  0A
0B77A:  MOVLB  E
0B77C:  MOVWF  x46
0B77E:  MOVLB  0
0B780:  CALL   25F0
....................        delay_ms(50);
0B784:  MOVLW  32
0B786:  MOVLB  E
0B788:  MOVWF  x45
0B78A:  MOVLB  0
0B78C:  CALL   0A24
....................       
....................       fprintf(CH2,SMS_Massage16);   
0B790:  MOVLW  0C
0B792:  MOVWF  FEA
0B794:  MOVLW  61
0B796:  MOVWF  FE9
0B798:  CALL   6C76
....................       putc('\n',CH2);
0B79C:  MOVLW  0A
0B79E:  MOVLB  E
0B7A0:  MOVWF  x46
0B7A2:  MOVLB  0
0B7A4:  CALL   25F0
....................       putc(26,CH2);
0B7A8:  MOVLW  1A
0B7AA:  MOVLB  E
0B7AC:  MOVWF  x46
0B7AE:  MOVLB  0
0B7B0:  CALL   25F0
0B7B4:  MOVLB  D
....................      }
....................    }
0B7B6:  BRA    B876
....................    else if(FaultType.B16 == 0)
0B7B8:  MOVLB  D
0B7BA:  BTFSC  xAE.7
0B7BC:  BRA    B876
....................    {
....................       In2.B16 = 0x00;
0B7BE:  BCF    xC6.7
....................       Ack.B16 = 0;
0B7C0:  BCF    xBE.7
....................       Output.B16 = 1;      //Off LED
0B7C2:  BSF    xA6.7
....................       SendSMS.B16 =0;// Clear SMS
0B7C4:  BCF    xD6.7
.................... 
....................       if((OutputType.B16 == 1 || OutputBoth.B16 == 0)&& inputflag ==0)      //If Buzzer or Both
0B7C6:  BTFSC  xB2.7
0B7C8:  BRA    B7CE
0B7CA:  BTFSC  xB6.7
0B7CC:  BRA    B7F0
0B7CE:  MOVLB  E
0B7D0:  MOVF   x38,F
0B7D2:  BTFSC  FD8.2
0B7D4:  BRA    B7DA
0B7D6:  MOVLB  D
0B7D8:  BRA    B7F0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0B7DA:  MOVLW  01
0B7DC:  MOVWF  x44
0B7DE:  MOVLB  0
0B7E0:  CALL   6C9C
0B7E4:  DECFSZ 01,W
0B7E6:  BRA    B7EA
0B7E8:  BRA    B7EE
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B7EA:  BCF    F89.4
0B7EC:  BCF    F92.4
0B7EE:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B16 == 0 || OutputBoth.B16 == 0)&& inputflag ==0)  //If Bell or Both
0B7F0:  BTFSS  xB2.7
0B7F2:  BRA    B7F8
0B7F4:  BTFSC  xB6.7
0B7F6:  BRA    B81E
0B7F8:  MOVLB  E
0B7FA:  MOVF   x38,F
0B7FC:  BTFSC  FD8.2
0B7FE:  BRA    B804
0B800:  MOVLB  D
0B802:  BRA    B81E
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0B804:  MOVLW  02
0B806:  MOVWF  x44
0B808:  MOVLB  0
0B80A:  CALL   6C9C
0B80E:  DECFSZ 01,W
0B810:  BRA    B814
0B812:  BRA    B81C
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0B814:  BCF    F89.3
0B816:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B818:  BCF    F89.4
0B81A:  BCF    F92.4
0B81C:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0B81E:  BTFSC  xC5.0
0B820:  BRA    B876
0B822:  BTFSC  xC5.1
0B824:  BRA    B876
0B826:  BTFSC  xC5.2
0B828:  BRA    B876
0B82A:  BTFSC  xC5.3
0B82C:  BRA    B876
0B82E:  BTFSC  xC5.4
0B830:  BRA    B876
0B832:  BTFSC  xC5.5
0B834:  BRA    B876
0B836:  BTFSC  xC5.6
0B838:  BRA    B876
0B83A:  BTFSC  xC5.7
0B83C:  BRA    B876
0B83E:  BTFSC  xC6.0
0B840:  BRA    B876
0B842:  BTFSC  xC6.1
0B844:  BRA    B876
0B846:  BTFSC  xC6.2
0B848:  BRA    B876
0B84A:  BTFSC  xC6.3
0B84C:  BRA    B876
0B84E:  BTFSC  xC6.4
0B850:  BRA    B876
0B852:  BTFSC  xC6.5
0B854:  BRA    B876
0B856:  BTFSC  xC6.6
0B858:  BRA    B876
0B85A:  BTFSC  xC6.7
0B85C:  BRA    B876
0B85E:  BTFSC  xC7.0
0B860:  BRA    B876
0B862:  BTFSC  xC7.1
0B864:  BRA    B876
0B866:  BTFSC  xC7.2
0B868:  BRA    B876
0B86A:  BTFSC  xC7.3
0B86C:  BRA    B876
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0B86E:  BCF    F89.3
0B870:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B872:  BCF    F89.4
0B874:  BCF    F92.4
....................       }
....................    }
.................... //input17
....................    if((((Inputt.B17 ^ InputType.B17) == 1) && (FaultType.B17 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0B876:  MOVLW  00
0B878:  BTFSC  xA3.0
0B87A:  MOVLW  01
0B87C:  MOVLB  E
0B87E:  MOVWF  x45
0B880:  MOVLW  00
0B882:  MOVLB  D
0B884:  BTFSC  xAB.0
0B886:  MOVLW  01
0B888:  MOVLB  E
0B88A:  XORWF  x45,W
0B88C:  SUBLW  01
0B88E:  BNZ   B898
0B890:  MOVLB  D
0B892:  BTFSS  xAF.0
0B894:  BRA    B89E
0B896:  MOVLB  E
0B898:  BTFSS  1A.5
0B89A:  BRA    B964
0B89C:  MOVLB  D
....................    {
....................       if(In2.B17 == 0 && AutoAck == 0x0F && Ack.B17 == 0)   //use auto acknowlegde
0B89E:  BTFSC  xC7.0
0B8A0:  BRA    B8B4
0B8A2:  MOVF   53,W
0B8A4:  SUBLW  0F
0B8A6:  BNZ   B8B4
0B8A8:  BTFSC  xBF.0
0B8AA:  BRA    B8B4
....................       {
....................             TimeBase1s = 100 ;            //reload again
0B8AC:  MOVLW  64
0B8AE:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0B8B0:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B17 = 1;
0B8B4:  BSF    xC7.0
....................       if(Ack.B17 == 0)
0B8B6:  BTFSC  xBF.0
0B8B8:  BRA    B8E8
....................       {
....................          if(FlashingFlag == 0)
0B8BA:  BTFSC  1A.1
0B8BC:  BRA    B8C2
....................             {
....................                Output.B17 = 0;           //Flash output1
0B8BE:  BCF    xA7.0
....................             }
0B8C0:  BRA    B8C4
....................             else
....................             {
....................                Output.B17 = 1;
0B8C2:  BSF    xA7.0
....................             }
....................          if (~AutoTestFlag)
0B8C4:  BTFSC  1A.4
0B8C6:  BRA    B8E8
....................          {
....................             if(AlarmIndicator.B17 == 1){
0B8C8:  BTFSS  xBB.0
0B8CA:  BRA    B8E8
....................                 if(OutputBoth.B17 == 0)        //Both output
0B8CC:  BTFSC  xB7.0
0B8CE:  BRA    B8DA
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0B8D0:  BSF    F89.4
0B8D2:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0B8D4:  BSF    F89.3
0B8D6:  BCF    F92.3
....................                 }
0B8D8:  BRA    B8E8
....................                 else
....................                 {
....................                   if(OutputType.B17 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0B8DA:  BTFSS  xB3.0
0B8DC:  BRA    B8E4
0B8DE:  BSF    F89.4
0B8E0:  BCF    F92.4
0B8E2:  BRA    B8E8
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0B8E4:  BSF    F89.3
0B8E6:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0B8E8:  MOVLW  01
0B8EA:  MOVLB  E
0B8EC:  MOVWF  x38
....................        // SMS Sending   
....................      if((SendSMS.B17 ==0) && (functointest_f ==0) && (Ack.B16 ==0))
0B8EE:  MOVLB  D
0B8F0:  BTFSC  xD7.0
0B8F2:  BRA    B962
0B8F4:  BTFSC  30.3
0B8F6:  BRA    B962
0B8F8:  BTFSC  xBE.7
0B8FA:  BRA    B962
....................      {
....................        SendSMS.B17 =1;
0B8FC:  BSF    xD7.0
....................        fprintf(CH2,"AT+CMGS=\"");
0B8FE:  MOVLW  F2
0B900:  MOVWF  FF6
0B902:  MOVLW  09
0B904:  MOVWF  FF7
0B906:  MOVLB  0
0B908:  CALL   2636
....................        fprintf(CH2,sms_phonenumber);
0B90C:  MOVLW  0A
0B90E:  MOVWF  FEA
0B910:  MOVLW  72
0B912:  MOVWF  FE9
0B914:  CALL   6C76
....................        
....................        fprintf(CH2,"\"");
0B918:  MOVLW  22
0B91A:  MOVLB  E
0B91C:  MOVWF  x46
0B91E:  MOVLB  0
0B920:  CALL   25F0
....................        putc('\n',CH2);
0B924:  MOVLW  0A
0B926:  MOVLB  E
0B928:  MOVWF  x46
0B92A:  MOVLB  0
0B92C:  CALL   25F0
....................        delay_ms(50);
0B930:  MOVLW  32
0B932:  MOVLB  E
0B934:  MOVWF  x45
0B936:  MOVLB  0
0B938:  CALL   0A24
....................       
....................       fprintf(CH2,SMS_Massage17);   
0B93C:  MOVLW  0C
0B93E:  MOVWF  FEA
0B940:  MOVLW  81
0B942:  MOVWF  FE9
0B944:  CALL   6C76
....................       putc('\n',CH2);
0B948:  MOVLW  0A
0B94A:  MOVLB  E
0B94C:  MOVWF  x46
0B94E:  MOVLB  0
0B950:  CALL   25F0
....................       putc(26,CH2);
0B954:  MOVLW  1A
0B956:  MOVLB  E
0B958:  MOVWF  x46
0B95A:  MOVLB  0
0B95C:  CALL   25F0
0B960:  MOVLB  D
....................      }
....................    }
0B962:  BRA    BA22
....................    else if(FaultType.B17 == 0)
0B964:  MOVLB  D
0B966:  BTFSC  xAF.0
0B968:  BRA    BA22
....................    {
....................       In2.B17 = 0x00;
0B96A:  BCF    xC7.0
....................       Ack.B17 = 0;
0B96C:  BCF    xBF.0
....................       Output.B17 = 1;      //Off LED
0B96E:  BSF    xA7.0
....................       SendSMS.B17 =0;// Clear SMS
0B970:  BCF    xD7.0
.................... 
....................       if((OutputType.B17 == 1 || OutputBoth.B17 == 0)&& inputflag ==0)      //If Buzzer or Both
0B972:  BTFSC  xB3.0
0B974:  BRA    B97A
0B976:  BTFSC  xB7.0
0B978:  BRA    B99C
0B97A:  MOVLB  E
0B97C:  MOVF   x38,F
0B97E:  BTFSC  FD8.2
0B980:  BRA    B986
0B982:  MOVLB  D
0B984:  BRA    B99C
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0B986:  MOVLW  01
0B988:  MOVWF  x44
0B98A:  MOVLB  0
0B98C:  CALL   6C9C
0B990:  DECFSZ 01,W
0B992:  BRA    B996
0B994:  BRA    B99A
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B996:  BCF    F89.4
0B998:  BCF    F92.4
0B99A:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B17 == 0 || OutputBoth.B17 == 0)&& inputflag ==0)  //If Bell or Both
0B99C:  BTFSS  xB3.0
0B99E:  BRA    B9A4
0B9A0:  BTFSC  xB7.0
0B9A2:  BRA    B9CA
0B9A4:  MOVLB  E
0B9A6:  MOVF   x38,F
0B9A8:  BTFSC  FD8.2
0B9AA:  BRA    B9B0
0B9AC:  MOVLB  D
0B9AE:  BRA    B9CA
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0B9B0:  MOVLW  02
0B9B2:  MOVWF  x44
0B9B4:  MOVLB  0
0B9B6:  CALL   6C9C
0B9BA:  DECFSZ 01,W
0B9BC:  BRA    B9C0
0B9BE:  BRA    B9C8
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0B9C0:  BCF    F89.3
0B9C2:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0B9C4:  BCF    F89.4
0B9C6:  BCF    F92.4
0B9C8:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0B9CA:  BTFSC  xC5.0
0B9CC:  BRA    BA22
0B9CE:  BTFSC  xC5.1
0B9D0:  BRA    BA22
0B9D2:  BTFSC  xC5.2
0B9D4:  BRA    BA22
0B9D6:  BTFSC  xC5.3
0B9D8:  BRA    BA22
0B9DA:  BTFSC  xC5.4
0B9DC:  BRA    BA22
0B9DE:  BTFSC  xC5.5
0B9E0:  BRA    BA22
0B9E2:  BTFSC  xC5.6
0B9E4:  BRA    BA22
0B9E6:  BTFSC  xC5.7
0B9E8:  BRA    BA22
0B9EA:  BTFSC  xC6.0
0B9EC:  BRA    BA22
0B9EE:  BTFSC  xC6.1
0B9F0:  BRA    BA22
0B9F2:  BTFSC  xC6.2
0B9F4:  BRA    BA22
0B9F6:  BTFSC  xC6.3
0B9F8:  BRA    BA22
0B9FA:  BTFSC  xC6.4
0B9FC:  BRA    BA22
0B9FE:  BTFSC  xC6.5
0BA00:  BRA    BA22
0BA02:  BTFSC  xC6.6
0BA04:  BRA    BA22
0BA06:  BTFSC  xC6.7
0BA08:  BRA    BA22
0BA0A:  BTFSC  xC7.0
0BA0C:  BRA    BA22
0BA0E:  BTFSC  xC7.1
0BA10:  BRA    BA22
0BA12:  BTFSC  xC7.2
0BA14:  BRA    BA22
0BA16:  BTFSC  xC7.3
0BA18:  BRA    BA22
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0BA1A:  BCF    F89.3
0BA1C:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0BA1E:  BCF    F89.4
0BA20:  BCF    F92.4
....................       }
....................    }
.................... //input18
....................    if((((Inputt.B18 ^ InputType.B18) == 1) && (FaultType.B18 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0BA22:  MOVLW  00
0BA24:  BTFSC  xA3.1
0BA26:  MOVLW  01
0BA28:  MOVLB  E
0BA2A:  MOVWF  x45
0BA2C:  MOVLW  00
0BA2E:  MOVLB  D
0BA30:  BTFSC  xAB.1
0BA32:  MOVLW  01
0BA34:  MOVLB  E
0BA36:  XORWF  x45,W
0BA38:  SUBLW  01
0BA3A:  BNZ   BA44
0BA3C:  MOVLB  D
0BA3E:  BTFSS  xAF.1
0BA40:  BRA    BA4A
0BA42:  MOVLB  E
0BA44:  BTFSS  1A.5
0BA46:  BRA    BB10
0BA48:  MOVLB  D
....................    {
....................       if(In2.B18 == 0 && AutoAck == 0x0F && Ack.B18 == 0)   //use auto acknowlegde
0BA4A:  BTFSC  xC7.1
0BA4C:  BRA    BA60
0BA4E:  MOVF   53,W
0BA50:  SUBLW  0F
0BA52:  BNZ   BA60
0BA54:  BTFSC  xBF.1
0BA56:  BRA    BA60
....................       {
....................             TimeBase1s = 100 ;            //reload again
0BA58:  MOVLW  64
0BA5A:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0BA5C:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B18 = 1;
0BA60:  BSF    xC7.1
....................       if(Ack.B18 == 0)
0BA62:  BTFSC  xBF.1
0BA64:  BRA    BA94
....................       {
....................          if(FlashingFlag == 0)
0BA66:  BTFSC  1A.1
0BA68:  BRA    BA6E
....................             {
....................                Output.B18 = 0;           //Flash output1
0BA6A:  BCF    xA7.1
....................             }
0BA6C:  BRA    BA70
....................             else
....................             {
....................                Output.B18 = 1;
0BA6E:  BSF    xA7.1
....................             }
....................          if (~AutoTestFlag)
0BA70:  BTFSC  1A.4
0BA72:  BRA    BA94
....................          {
....................             if(AlarmIndicator.B18 == 1){
0BA74:  BTFSS  xBB.1
0BA76:  BRA    BA94
....................                 if(OutputBoth.B18 == 0)        //Both output
0BA78:  BTFSC  xB7.1
0BA7A:  BRA    BA86
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0BA7C:  BSF    F89.4
0BA7E:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0BA80:  BSF    F89.3
0BA82:  BCF    F92.3
....................                 }
0BA84:  BRA    BA94
....................                 else
....................                 {
....................                   if(OutputType.B18 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0BA86:  BTFSS  xB3.1
0BA88:  BRA    BA90
0BA8A:  BSF    F89.4
0BA8C:  BCF    F92.4
0BA8E:  BRA    BA94
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0BA90:  BSF    F89.3
0BA92:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0BA94:  MOVLW  01
0BA96:  MOVLB  E
0BA98:  MOVWF  x38
....................        // SMS Sending   
....................      if((SendSMS.B18 ==0) && (functointest_f ==0) && (Ack.B18 ==0))
0BA9A:  MOVLB  D
0BA9C:  BTFSC  xD7.1
0BA9E:  BRA    BB0E
0BAA0:  BTFSC  30.3
0BAA2:  BRA    BB0E
0BAA4:  BTFSC  xBF.1
0BAA6:  BRA    BB0E
....................      {
....................        SendSMS.B18 =1;
0BAA8:  BSF    xD7.1
....................        fprintf(CH2,"AT+CMGS=\"");
0BAAA:  MOVLW  FC
0BAAC:  MOVWF  FF6
0BAAE:  MOVLW  09
0BAB0:  MOVWF  FF7
0BAB2:  MOVLB  0
0BAB4:  CALL   2636
....................        fprintf(CH2,sms_phonenumber);
0BAB8:  MOVLW  0A
0BABA:  MOVWF  FEA
0BABC:  MOVLW  72
0BABE:  MOVWF  FE9
0BAC0:  CALL   6C76
....................        
....................        fprintf(CH2,"\"");
0BAC4:  MOVLW  22
0BAC6:  MOVLB  E
0BAC8:  MOVWF  x46
0BACA:  MOVLB  0
0BACC:  CALL   25F0
....................        putc('\n',CH2);
0BAD0:  MOVLW  0A
0BAD2:  MOVLB  E
0BAD4:  MOVWF  x46
0BAD6:  MOVLB  0
0BAD8:  CALL   25F0
....................        delay_ms(50);
0BADC:  MOVLW  32
0BADE:  MOVLB  E
0BAE0:  MOVWF  x45
0BAE2:  MOVLB  0
0BAE4:  CALL   0A24
....................       
....................       fprintf(CH2,SMS_Massage18);   
0BAE8:  MOVLW  0C
0BAEA:  MOVWF  FEA
0BAEC:  MOVLW  A1
0BAEE:  MOVWF  FE9
0BAF0:  CALL   6C76
....................       putc('\n',CH2);
0BAF4:  MOVLW  0A
0BAF6:  MOVLB  E
0BAF8:  MOVWF  x46
0BAFA:  MOVLB  0
0BAFC:  CALL   25F0
....................       putc(26,CH2);
0BB00:  MOVLW  1A
0BB02:  MOVLB  E
0BB04:  MOVWF  x46
0BB06:  MOVLB  0
0BB08:  CALL   25F0
0BB0C:  MOVLB  D
....................      }
....................    }
0BB0E:  BRA    BBCE
....................    else if(FaultType.B18 == 0)
0BB10:  MOVLB  D
0BB12:  BTFSC  xAF.1
0BB14:  BRA    BBCE
....................    {
....................       In2.B18 = 0x00;
0BB16:  BCF    xC7.1
....................       Ack.B18 = 0;
0BB18:  BCF    xBF.1
....................       Output.B18 = 1;      //Off LED
0BB1A:  BSF    xA7.1
....................       SendSMS.B18 =0;// Clear SMS
0BB1C:  BCF    xD7.1
.................... 
....................       if((OutputType.B18== 1 || OutputBoth.B18 == 0)&& inputflag ==0)      //If Buzzer or Both
0BB1E:  BTFSC  xB3.1
0BB20:  BRA    BB26
0BB22:  BTFSC  xB7.1
0BB24:  BRA    BB48
0BB26:  MOVLB  E
0BB28:  MOVF   x38,F
0BB2A:  BTFSC  FD8.2
0BB2C:  BRA    BB32
0BB2E:  MOVLB  D
0BB30:  BRA    BB48
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0BB32:  MOVLW  01
0BB34:  MOVWF  x44
0BB36:  MOVLB  0
0BB38:  CALL   6C9C
0BB3C:  DECFSZ 01,W
0BB3E:  BRA    BB42
0BB40:  BRA    BB46
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0BB42:  BCF    F89.4
0BB44:  BCF    F92.4
0BB46:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B18 == 0 || OutputBoth.B18 == 0)&& inputflag ==0)  //If Bell or Both
0BB48:  BTFSS  xB3.1
0BB4A:  BRA    BB50
0BB4C:  BTFSC  xB7.1
0BB4E:  BRA    BB76
0BB50:  MOVLB  E
0BB52:  MOVF   x38,F
0BB54:  BTFSC  FD8.2
0BB56:  BRA    BB5C
0BB58:  MOVLB  D
0BB5A:  BRA    BB76
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0BB5C:  MOVLW  02
0BB5E:  MOVWF  x44
0BB60:  MOVLB  0
0BB62:  CALL   6C9C
0BB66:  DECFSZ 01,W
0BB68:  BRA    BB6C
0BB6A:  BRA    BB74
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0BB6C:  BCF    F89.3
0BB6E:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0BB70:  BCF    F89.4
0BB72:  BCF    F92.4
0BB74:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0BB76:  BTFSC  xC5.0
0BB78:  BRA    BBCE
0BB7A:  BTFSC  xC5.1
0BB7C:  BRA    BBCE
0BB7E:  BTFSC  xC5.2
0BB80:  BRA    BBCE
0BB82:  BTFSC  xC5.3
0BB84:  BRA    BBCE
0BB86:  BTFSC  xC5.4
0BB88:  BRA    BBCE
0BB8A:  BTFSC  xC5.5
0BB8C:  BRA    BBCE
0BB8E:  BTFSC  xC5.6
0BB90:  BRA    BBCE
0BB92:  BTFSC  xC5.7
0BB94:  BRA    BBCE
0BB96:  BTFSC  xC6.0
0BB98:  BRA    BBCE
0BB9A:  BTFSC  xC6.1
0BB9C:  BRA    BBCE
0BB9E:  BTFSC  xC6.2
0BBA0:  BRA    BBCE
0BBA2:  BTFSC  xC6.3
0BBA4:  BRA    BBCE
0BBA6:  BTFSC  xC6.4
0BBA8:  BRA    BBCE
0BBAA:  BTFSC  xC6.5
0BBAC:  BRA    BBCE
0BBAE:  BTFSC  xC6.6
0BBB0:  BRA    BBCE
0BBB2:  BTFSC  xC6.7
0BBB4:  BRA    BBCE
0BBB6:  BTFSC  xC7.0
0BBB8:  BRA    BBCE
0BBBA:  BTFSC  xC7.1
0BBBC:  BRA    BBCE
0BBBE:  BTFSC  xC7.2
0BBC0:  BRA    BBCE
0BBC2:  BTFSC  xC7.3
0BBC4:  BRA    BBCE
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0BBC6:  BCF    F89.3
0BBC8:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0BBCA:  BCF    F89.4
0BBCC:  BCF    F92.4
....................       }
....................    }
.................... //input19
....................    if((((Inputt.B19 ^ InputType.B19) == 1) && (FaultType.B19 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0BBCE:  MOVLW  00
0BBD0:  BTFSC  xA3.2
0BBD2:  MOVLW  01
0BBD4:  MOVLB  E
0BBD6:  MOVWF  x45
0BBD8:  MOVLW  00
0BBDA:  MOVLB  D
0BBDC:  BTFSC  xAB.2
0BBDE:  MOVLW  01
0BBE0:  MOVLB  E
0BBE2:  XORWF  x45,W
0BBE4:  SUBLW  01
0BBE6:  BNZ   BBF0
0BBE8:  MOVLB  D
0BBEA:  BTFSS  xAF.2
0BBEC:  BRA    BBF6
0BBEE:  MOVLB  E
0BBF0:  BTFSS  1A.5
0BBF2:  BRA    BCBC
0BBF4:  MOVLB  D
....................    {
....................       if(In2.B19 == 0 && AutoAck == 0x0F && Ack.B19 == 0)   //use auto acknowlegde
0BBF6:  BTFSC  xC7.2
0BBF8:  BRA    BC0C
0BBFA:  MOVF   53,W
0BBFC:  SUBLW  0F
0BBFE:  BNZ   BC0C
0BC00:  BTFSC  xBF.2
0BC02:  BRA    BC0C
....................       {
....................             TimeBase1s = 100 ;            //reload again
0BC04:  MOVLW  64
0BC06:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0BC08:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B19 = 1;
0BC0C:  BSF    xC7.2
....................       if(Ack.B19 == 0)
0BC0E:  BTFSC  xBF.2
0BC10:  BRA    BC40
....................       {
....................          if(FlashingFlag == 0)
0BC12:  BTFSC  1A.1
0BC14:  BRA    BC1A
....................             {
....................                Output.B19 = 0;           //Flash output1
0BC16:  BCF    xA7.2
....................             }
0BC18:  BRA    BC1C
....................             else
....................             {
....................                Output.B19 = 1;
0BC1A:  BSF    xA7.2
....................             }
....................          if (~AutoTestFlag)
0BC1C:  BTFSC  1A.4
0BC1E:  BRA    BC40
....................          {
....................             if(AlarmIndicator.B19 == 1){
0BC20:  BTFSS  xBB.2
0BC22:  BRA    BC40
....................                 if(OutputBoth.B19 == 0)        //Both output
0BC24:  BTFSC  xB7.2
0BC26:  BRA    BC32
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0BC28:  BSF    F89.4
0BC2A:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0BC2C:  BSF    F89.3
0BC2E:  BCF    F92.3
....................                 }
0BC30:  BRA    BC40
....................                 else
....................                 {
....................                   if(OutputType.B19 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0BC32:  BTFSS  xB3.2
0BC34:  BRA    BC3C
0BC36:  BSF    F89.4
0BC38:  BCF    F92.4
0BC3A:  BRA    BC40
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0BC3C:  BSF    F89.3
0BC3E:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................       inputflag =1;
0BC40:  MOVLW  01
0BC42:  MOVLB  E
0BC44:  MOVWF  x38
....................        // SMS Sending   
....................      if((SendSMS.B19 ==0) && (functointest_f ==0) && (Ack.B19 ==0))
0BC46:  MOVLB  D
0BC48:  BTFSC  xD7.2
0BC4A:  BRA    BCBA
0BC4C:  BTFSC  30.3
0BC4E:  BRA    BCBA
0BC50:  BTFSC  xBF.2
0BC52:  BRA    BCBA
....................      {
....................        SendSMS.B19 =1;
0BC54:  BSF    xD7.2
....................        fprintf(CH2,"AT+CMGS=\"");
0BC56:  MOVLW  06
0BC58:  MOVWF  FF6
0BC5A:  MOVLW  0A
0BC5C:  MOVWF  FF7
0BC5E:  MOVLB  0
0BC60:  CALL   2636
....................        fprintf(CH2,sms_phonenumber);
0BC64:  MOVLW  0A
0BC66:  MOVWF  FEA
0BC68:  MOVLW  72
0BC6A:  MOVWF  FE9
0BC6C:  CALL   6C76
....................        
....................        fprintf(CH2,"\"");
0BC70:  MOVLW  22
0BC72:  MOVLB  E
0BC74:  MOVWF  x46
0BC76:  MOVLB  0
0BC78:  CALL   25F0
....................        putc('\n',CH2);
0BC7C:  MOVLW  0A
0BC7E:  MOVLB  E
0BC80:  MOVWF  x46
0BC82:  MOVLB  0
0BC84:  CALL   25F0
....................        delay_ms(50);
0BC88:  MOVLW  32
0BC8A:  MOVLB  E
0BC8C:  MOVWF  x45
0BC8E:  MOVLB  0
0BC90:  CALL   0A24
....................       
....................       fprintf(CH2,SMS_Massage19);   
0BC94:  MOVLW  0C
0BC96:  MOVWF  FEA
0BC98:  MOVLW  C1
0BC9A:  MOVWF  FE9
0BC9C:  CALL   6C76
....................       putc('\n',CH2);
0BCA0:  MOVLW  0A
0BCA2:  MOVLB  E
0BCA4:  MOVWF  x46
0BCA6:  MOVLB  0
0BCA8:  CALL   25F0
....................       putc(26,CH2);
0BCAC:  MOVLW  1A
0BCAE:  MOVLB  E
0BCB0:  MOVWF  x46
0BCB2:  MOVLB  0
0BCB4:  CALL   25F0
0BCB8:  MOVLB  D
....................      }
....................    }
0BCBA:  BRA    BD7A
....................    else if(FaultType.B19 == 0)
0BCBC:  MOVLB  D
0BCBE:  BTFSC  xAF.2
0BCC0:  BRA    BD7A
....................    {
....................       In2.B19 = 0x00;
0BCC2:  BCF    xC7.2
....................       Ack.B19 = 0;
0BCC4:  BCF    xBF.2
....................       Output.B19 = 1;      //Off LED
0BCC6:  BSF    xA7.2
....................       SendSMS.B19 =0;// Clear SMS
0BCC8:  BCF    xD7.2
.................... 
....................       if((OutputType.B19== 1 || OutputBoth.B19 == 0)&& inputflag ==0)      //If Buzzer or Both
0BCCA:  BTFSC  xB3.2
0BCCC:  BRA    BCD2
0BCCE:  BTFSC  xB7.2
0BCD0:  BRA    BCF4
0BCD2:  MOVLB  E
0BCD4:  MOVF   x38,F
0BCD6:  BTFSC  FD8.2
0BCD8:  BRA    BCDE
0BCDA:  MOVLB  D
0BCDC:  BRA    BCF4
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0BCDE:  MOVLW  01
0BCE0:  MOVWF  x44
0BCE2:  MOVLB  0
0BCE4:  CALL   6C9C
0BCE8:  DECFSZ 01,W
0BCEA:  BRA    BCEE
0BCEC:  BRA    BCF2
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0BCEE:  BCF    F89.4
0BCF0:  BCF    F92.4
0BCF2:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B19 == 0 || OutputBoth.B19== 0)&& inputflag ==0)  //If Bell or Both
0BCF4:  BTFSS  xB3.2
0BCF6:  BRA    BCFC
0BCF8:  BTFSC  xB7.2
0BCFA:  BRA    BD22
0BCFC:  MOVLB  E
0BCFE:  MOVF   x38,F
0BD00:  BTFSC  FD8.2
0BD02:  BRA    BD08
0BD04:  MOVLB  D
0BD06:  BRA    BD22
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0BD08:  MOVLW  02
0BD0A:  MOVWF  x44
0BD0C:  MOVLB  0
0BD0E:  CALL   6C9C
0BD12:  DECFSZ 01,W
0BD14:  BRA    BD18
0BD16:  BRA    BD20
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0BD18:  BCF    F89.3
0BD1A:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0BD1C:  BCF    F89.4
0BD1E:  BCF    F92.4
0BD20:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0BD22:  BTFSC  xC5.0
0BD24:  BRA    BD7A
0BD26:  BTFSC  xC5.1
0BD28:  BRA    BD7A
0BD2A:  BTFSC  xC5.2
0BD2C:  BRA    BD7A
0BD2E:  BTFSC  xC5.3
0BD30:  BRA    BD7A
0BD32:  BTFSC  xC5.4
0BD34:  BRA    BD7A
0BD36:  BTFSC  xC5.5
0BD38:  BRA    BD7A
0BD3A:  BTFSC  xC5.6
0BD3C:  BRA    BD7A
0BD3E:  BTFSC  xC5.7
0BD40:  BRA    BD7A
0BD42:  BTFSC  xC6.0
0BD44:  BRA    BD7A
0BD46:  BTFSC  xC6.1
0BD48:  BRA    BD7A
0BD4A:  BTFSC  xC6.2
0BD4C:  BRA    BD7A
0BD4E:  BTFSC  xC6.3
0BD50:  BRA    BD7A
0BD52:  BTFSC  xC6.4
0BD54:  BRA    BD7A
0BD56:  BTFSC  xC6.5
0BD58:  BRA    BD7A
0BD5A:  BTFSC  xC6.6
0BD5C:  BRA    BD7A
0BD5E:  BTFSC  xC6.7
0BD60:  BRA    BD7A
0BD62:  BTFSC  xC7.0
0BD64:  BRA    BD7A
0BD66:  BTFSC  xC7.1
0BD68:  BRA    BD7A
0BD6A:  BTFSC  xC7.2
0BD6C:  BRA    BD7A
0BD6E:  BTFSC  xC7.3
0BD70:  BRA    BD7A
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0BD72:  BCF    F89.3
0BD74:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0BD76:  BCF    F89.4
0BD78:  BCF    F92.4
....................       }
....................    }
....................       
....................    //input20
....................    if((((Inputt.B20 ^ InputType.B20) == 1) && (FaultType.B20 == 0))||Test_fault==1)    // alarm1 occure and " Non Lock type"
0BD7A:  MOVLW  00
0BD7C:  BTFSC  xA3.3
0BD7E:  MOVLW  01
0BD80:  MOVLB  E
0BD82:  MOVWF  x45
0BD84:  MOVLW  00
0BD86:  MOVLB  D
0BD88:  BTFSC  xAB.3
0BD8A:  MOVLW  01
0BD8C:  MOVLB  E
0BD8E:  XORWF  x45,W
0BD90:  SUBLW  01
0BD92:  BNZ   BD9C
0BD94:  MOVLB  D
0BD96:  BTFSS  xAF.3
0BD98:  BRA    BDA2
0BD9A:  MOVLB  E
0BD9C:  BTFSS  1A.5
0BD9E:  BRA    BE68
0BDA0:  MOVLB  D
....................    {
....................       if(In2.B20 == 0 && AutoAck == 0x0F && Ack.B20 == 0)   //use auto acknowlegde
0BDA2:  BTFSC  xC7.3
0BDA4:  BRA    BDB8
0BDA6:  MOVF   53,W
0BDA8:  SUBLW  0F
0BDAA:  BNZ   BDB8
0BDAC:  BTFSC  xBF.3
0BDAE:  BRA    BDB8
....................       {
....................             TimeBase1s = 100 ;            //reload again
0BDB0:  MOVLW  64
0BDB2:  MOVWF  1C
....................             AutoAckDelayTime = AutoAckTime ;
0BDB4:  MOVFF  54,1D
....................       }
.................... 
....................       In2.B20 = 1;
0BDB8:  BSF    xC7.3
....................       if(Ack.B20 == 0)
0BDBA:  BTFSC  xBF.3
0BDBC:  BRA    BDEC
....................       {
....................          if(FlashingFlag == 0)
0BDBE:  BTFSC  1A.1
0BDC0:  BRA    BDC6
....................             {
....................                Output.B20 = 0;           //Flash output1
0BDC2:  BCF    xA7.3
....................             }
0BDC4:  BRA    BDC8
....................             else
....................             {
....................                Output.B20 = 1;
0BDC6:  BSF    xA7.3
....................             }
....................          if (~AutoTestFlag)
0BDC8:  BTFSC  1A.4
0BDCA:  BRA    BDEC
....................          {
....................             if(AlarmIndicator.B20 == 1){
0BDCC:  BTFSS  xBB.3
0BDCE:  BRA    BDEC
....................                 if(OutputBoth.B20 == 0)        //Both output
0BDD0:  BTFSC  xB7.3
0BDD2:  BRA    BDDE
....................                 {
....................                   output_bit(Pbuzzer,OnRelay);   //Buzzer
0BDD4:  BSF    F89.4
0BDD6:  BCF    F92.4
....................                   output_bit(Pbell,OnRelay);     //Bell
0BDD8:  BSF    F89.3
0BDDA:  BCF    F92.3
....................                 }
0BDDC:  BRA    BDEC
....................                 else
....................                 {
....................                   if(OutputType.B20 == 1) output_bit(Pbuzzer,OnRelay);     //Buzzer
0BDDE:  BTFSS  xB3.3
0BDE0:  BRA    BDE8
0BDE2:  BSF    F89.4
0BDE4:  BCF    F92.4
0BDE6:  BRA    BDEC
....................                   else output_bit(Pbell,OnRelay);                          //Bell
0BDE8:  BSF    F89.3
0BDEA:  BCF    F92.3
....................                 }
....................             }
....................          }
....................        }
....................     inputflag =1;
0BDEC:  MOVLW  01
0BDEE:  MOVLB  E
0BDF0:  MOVWF  x38
....................      // SMS Sending   
....................      if((SendSMS.B20 ==0) && (functointest_f ==0) && (Ack.B20 ==0))
0BDF2:  MOVLB  D
0BDF4:  BTFSC  xD7.3
0BDF6:  BRA    BE66
0BDF8:  BTFSC  30.3
0BDFA:  BRA    BE66
0BDFC:  BTFSC  xBF.3
0BDFE:  BRA    BE66
....................      {
....................        SendSMS.B20 =1;
0BE00:  BSF    xD7.3
....................        fprintf(CH2,"AT+CMGS=\"");
0BE02:  MOVLW  10
0BE04:  MOVWF  FF6
0BE06:  MOVLW  0A
0BE08:  MOVWF  FF7
0BE0A:  MOVLB  0
0BE0C:  CALL   2636
....................        fprintf(CH2,sms_phonenumber);
0BE10:  MOVLW  0A
0BE12:  MOVWF  FEA
0BE14:  MOVLW  72
0BE16:  MOVWF  FE9
0BE18:  CALL   6C76
....................        
....................        fprintf(CH2,"\"");
0BE1C:  MOVLW  22
0BE1E:  MOVLB  E
0BE20:  MOVWF  x46
0BE22:  MOVLB  0
0BE24:  CALL   25F0
....................        putc('\n',CH2);
0BE28:  MOVLW  0A
0BE2A:  MOVLB  E
0BE2C:  MOVWF  x46
0BE2E:  MOVLB  0
0BE30:  CALL   25F0
....................        delay_ms(50);
0BE34:  MOVLW  32
0BE36:  MOVLB  E
0BE38:  MOVWF  x45
0BE3A:  MOVLB  0
0BE3C:  CALL   0A24
....................       
....................       fprintf(CH2,SMS_Massage20);   
0BE40:  MOVLW  0C
0BE42:  MOVWF  FEA
0BE44:  MOVLW  E1
0BE46:  MOVWF  FE9
0BE48:  CALL   6C76
....................       putc('\n',CH2);
0BE4C:  MOVLW  0A
0BE4E:  MOVLB  E
0BE50:  MOVWF  x46
0BE52:  MOVLB  0
0BE54:  CALL   25F0
....................       putc(26,CH2);
0BE58:  MOVLW  1A
0BE5A:  MOVLB  E
0BE5C:  MOVWF  x46
0BE5E:  MOVLB  0
0BE60:  CALL   25F0
0BE64:  MOVLB  D
....................      }
....................    }
0BE66:  BRA    BF26
....................    else if(FaultType.B20 == 0)
0BE68:  MOVLB  D
0BE6A:  BTFSC  xAF.3
0BE6C:  BRA    BF26
....................    {
....................       In2.B20 = 0x00;
0BE6E:  BCF    xC7.3
....................       Ack.B20 = 0;
0BE70:  BCF    xBF.3
....................       Output.B20 = 1;      //Off LED
0BE72:  BSF    xA7.3
....................       SendSMS.B20 =0;// Clear SMS
0BE74:  BCF    xD7.3
.................... 
....................       if((OutputType.B20== 1 || OutputBoth.B20 == 0)&& inputflag ==0)      //If Buzzer or Both
0BE76:  BTFSC  xB3.3
0BE78:  BRA    BE7E
0BE7A:  BTFSC  xB7.3
0BE7C:  BRA    BEA0
0BE7E:  MOVLB  E
0BE80:  MOVF   x38,F
0BE82:  BTFSC  FD8.2
0BE84:  BRA    BE8A
0BE86:  MOVLB  D
0BE88:  BRA    BEA0
....................       {
....................          if(CheckAutoReset(0x01) == 1);   //Check other Inputt "Ack" or not if not,do nothing
0BE8A:  MOVLW  01
0BE8C:  MOVWF  x44
0BE8E:  MOVLB  0
0BE90:  CALL   6C9C
0BE94:  DECFSZ 01,W
0BE96:  BRA    BE9A
0BE98:  BRA    BE9E
....................          else
....................          {
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0BE9A:  BCF    F89.4
0BE9C:  BCF    F92.4
0BE9E:  MOVLB  D
....................          }
....................       }
.................... 
.................... 
....................       if((OutputType.B20 == 0 || OutputBoth.B20 == 0)&& inputflag ==0)  //If Bell or Both
0BEA0:  BTFSS  xB3.3
0BEA2:  BRA    BEA8
0BEA4:  BTFSC  xB7.3
0BEA6:  BRA    BECE
0BEA8:  MOVLB  E
0BEAA:  MOVF   x38,F
0BEAC:  BTFSC  FD8.2
0BEAE:  BRA    BEB4
0BEB0:  MOVLB  D
0BEB2:  BRA    BECE
....................       {
....................          if(CheckAutoReset(0x02) == 1);
0BEB4:  MOVLW  02
0BEB6:  MOVWF  x44
0BEB8:  MOVLB  0
0BEBA:  CALL   6C9C
0BEBE:  DECFSZ 01,W
0BEC0:  BRA    BEC4
0BEC2:  BRA    BECC
....................          else
....................          {
....................             output_bit(Pbell,OffRelay);      //Clear Bell
0BEC4:  BCF    F89.3
0BEC6:  BCF    F92.3
....................             output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0BEC8:  BCF    F89.4
0BECA:  BCF    F92.4
0BECC:  MOVLB  D
....................          }
....................       }
....................       // jj modify
....................       if(In2.B1 ==0 && In2.B2 ==0 && In2.B3 ==0 && In2.B4 ==0 && In2.B5 ==0 && In2.B6 ==0 && In2.B7 ==0 && In2.B8 ==0 && In2.B9 ==0 && In2.B10 ==0 && In2.B11 ==0 && In2.B12 ==0 && In2.B13 ==0 && In2.B14 ==0 && In2.B15 ==0 && In2.B16 ==0 && In2.B17 ==0 && In2.B18 ==0 && In2.B19 ==0 && In2.B20 ==0 )
0BECE:  BTFSC  xC5.0
0BED0:  BRA    BF26
0BED2:  BTFSC  xC5.1
0BED4:  BRA    BF26
0BED6:  BTFSC  xC5.2
0BED8:  BRA    BF26
0BEDA:  BTFSC  xC5.3
0BEDC:  BRA    BF26
0BEDE:  BTFSC  xC5.4
0BEE0:  BRA    BF26
0BEE2:  BTFSC  xC5.5
0BEE4:  BRA    BF26
0BEE6:  BTFSC  xC5.6
0BEE8:  BRA    BF26
0BEEA:  BTFSC  xC5.7
0BEEC:  BRA    BF26
0BEEE:  BTFSC  xC6.0
0BEF0:  BRA    BF26
0BEF2:  BTFSC  xC6.1
0BEF4:  BRA    BF26
0BEF6:  BTFSC  xC6.2
0BEF8:  BRA    BF26
0BEFA:  BTFSC  xC6.3
0BEFC:  BRA    BF26
0BEFE:  BTFSC  xC6.4
0BF00:  BRA    BF26
0BF02:  BTFSC  xC6.5
0BF04:  BRA    BF26
0BF06:  BTFSC  xC6.6
0BF08:  BRA    BF26
0BF0A:  BTFSC  xC6.7
0BF0C:  BRA    BF26
0BF0E:  BTFSC  xC7.0
0BF10:  BRA    BF26
0BF12:  BTFSC  xC7.1
0BF14:  BRA    BF26
0BF16:  BTFSC  xC7.2
0BF18:  BRA    BF26
0BF1A:  BTFSC  xC7.3
0BF1C:  BRA    BF26
....................       {
....................          output_bit(Pbell,OffRelay);      //Clear Bell
0BF1E:  BCF    F89.3
0BF20:  BCF    F92.3
....................          output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0BF22:  BCF    F89.4
0BF24:  BCF    F92.4
....................       }
....................    }
0BF26:  MOVLB  0
0BF28:  RETURN 0
....................    
....................    
....................  //}
.................... }
.................... 
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////
.................... 
.................... void Send_Ouput(void)
.................... {
.................... 
....................    if(T_test == 0x00)
*
0C026:  MOVF   2F,F
0C028:  BTFSS  FD8.2
0C02A:  BRA    C4C8
....................    {
....................       //if(NoOfPoint >= 10)
....................       //{
....................       
....................      
....................            if(Output.B1)//++++++++++++B1+++++++++++++++++++++
0C02C:  MOVLB  D
0C02E:  BTFSS  xA5.0
0C030:  BRA    C038
....................            {
....................              bit_clear(Green1_8,0); bit_clear(Red1_8,0);
0C032:  BCF    4F.0
0C034:  BCF    4B.0
....................            }
0C036:  BRA    C060
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B1 )&&(GREEN_Colour.B1 ==0 ))//Red
0C038:  BTFSS  xCD.0
0C03A:  BRA    C046
0C03C:  BTFSC  xD1.0
0C03E:  BRA    C046
....................              {
....................                bit_set(Red1_8,0); bit_clear(Green1_8,0);
0C040:  BSF    4B.0
0C042:  BCF    4F.0
....................              }
0C044:  BRA    C060
....................              else if((RED_Colour.B1==0 )&&(GREEN_Colour.B1))//Green
0C046:  BTFSC  xCD.0
0C048:  BRA    C054
0C04A:  BTFSS  xD1.0
0C04C:  BRA    C054
....................              {
....................                bit_clear(Red1_8,0); bit_set(Green1_8,0); 
0C04E:  BCF    4B.0
0C050:  BSF    4F.0
....................              }
0C052:  BRA    C060
....................              else if((RED_Colour.B1)&&(GREEN_Colour.B1))//Ambian
0C054:  BTFSS  xCD.0
0C056:  BRA    C060
0C058:  BTFSS  xD1.0
0C05A:  BRA    C060
....................              {
....................                bit_set(Red1_8,0); bit_set(Green1_8,0) ; 
0C05C:  BSF    4B.0
0C05E:  BSF    4F.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B2)//++++++++++++B2+++++++++++++++++++++
0C060:  BTFSS  xA5.1
0C062:  BRA    C06A
....................            {
....................              bit_clear(Green1_8,1); bit_clear(Red1_8,1);
0C064:  BCF    4F.1
0C066:  BCF    4B.1
....................            }
0C068:  BRA    C092
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B2 )&&(GREEN_Colour.B2 ==0 ))//Red
0C06A:  BTFSS  xCD.1
0C06C:  BRA    C078
0C06E:  BTFSC  xD1.1
0C070:  BRA    C078
....................              {
....................                bit_set(Red1_8,1); bit_clear(Green1_8,1);
0C072:  BSF    4B.1
0C074:  BCF    4F.1
....................              }
0C076:  BRA    C092
....................              else if((RED_Colour.B2==0 )&&(GREEN_Colour.B2))//Green
0C078:  BTFSC  xCD.1
0C07A:  BRA    C086
0C07C:  BTFSS  xD1.1
0C07E:  BRA    C086
....................              {
....................                bit_clear(Red1_8,1); bit_set(Green1_8,1); 
0C080:  BCF    4B.1
0C082:  BSF    4F.1
....................              }
0C084:  BRA    C092
....................              else if((RED_Colour.B2)&&(GREEN_Colour.B2))//Ambian
0C086:  BTFSS  xCD.1
0C088:  BRA    C092
0C08A:  BTFSS  xD1.1
0C08C:  BRA    C092
....................              {
....................                bit_set(Red1_8,1); bit_set(Green1_8,1) ; 
0C08E:  BSF    4B.1
0C090:  BSF    4F.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B3)//++++++++++++B3+++++++++++++++++++++
0C092:  BTFSS  xA5.2
0C094:  BRA    C09C
....................            {
....................              bit_clear(Green1_8,2); bit_clear(Red1_8,2);
0C096:  BCF    4F.2
0C098:  BCF    4B.2
....................            }
0C09A:  BRA    C0C4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B3 )&&(GREEN_Colour.B3 ==0 ))//Red
0C09C:  BTFSS  xCD.2
0C09E:  BRA    C0AA
0C0A0:  BTFSC  xD1.2
0C0A2:  BRA    C0AA
....................              {
....................                bit_set(Red1_8,2); bit_clear(Green1_8,2);
0C0A4:  BSF    4B.2
0C0A6:  BCF    4F.2
....................              }
0C0A8:  BRA    C0C4
....................              else if((RED_Colour.B3==0 )&&(GREEN_Colour.B3))//Green
0C0AA:  BTFSC  xCD.2
0C0AC:  BRA    C0B8
0C0AE:  BTFSS  xD1.2
0C0B0:  BRA    C0B8
....................              {
....................                bit_clear(Red1_8,2); bit_set(Green1_8,2); 
0C0B2:  BCF    4B.2
0C0B4:  BSF    4F.2
....................              }
0C0B6:  BRA    C0C4
....................              else if((RED_Colour.B3)&&(GREEN_Colour.B3))//Ambian
0C0B8:  BTFSS  xCD.2
0C0BA:  BRA    C0C4
0C0BC:  BTFSS  xD1.2
0C0BE:  BRA    C0C4
....................              {
....................                bit_set(Red1_8,2); bit_set(Green1_8,2) ; 
0C0C0:  BSF    4B.2
0C0C2:  BSF    4F.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B4)//++++++++++++B4+++++++++++++++++++++
0C0C4:  BTFSS  xA5.3
0C0C6:  BRA    C0CE
....................            {
....................              bit_clear(Green1_8,3); bit_clear(Red1_8,3);
0C0C8:  BCF    4F.3
0C0CA:  BCF    4B.3
....................            }
0C0CC:  BRA    C0F6
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B4 )&&(GREEN_Colour.B4 ==0 ))//Red
0C0CE:  BTFSS  xCD.3
0C0D0:  BRA    C0DC
0C0D2:  BTFSC  xD1.3
0C0D4:  BRA    C0DC
....................              {
....................                bit_set(Red1_8,3); bit_clear(Green1_8,3);
0C0D6:  BSF    4B.3
0C0D8:  BCF    4F.3
....................              }
0C0DA:  BRA    C0F6
....................              else if((RED_Colour.B4==0 )&&(GREEN_Colour.B4))//Green
0C0DC:  BTFSC  xCD.3
0C0DE:  BRA    C0EA
0C0E0:  BTFSS  xD1.3
0C0E2:  BRA    C0EA
....................              {
....................                bit_clear(Red1_8,3); bit_set(Green1_8,3); 
0C0E4:  BCF    4B.3
0C0E6:  BSF    4F.3
....................              }
0C0E8:  BRA    C0F6
....................              else if((RED_Colour.B4)&&(GREEN_Colour.B4))//Ambian
0C0EA:  BTFSS  xCD.3
0C0EC:  BRA    C0F6
0C0EE:  BTFSS  xD1.3
0C0F0:  BRA    C0F6
....................              {
....................                bit_set(Red1_8,3); bit_set(Green1_8,3) ; 
0C0F2:  BSF    4B.3
0C0F4:  BSF    4F.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B5)//++++++++++++B5+++++++++++++++++++++
0C0F6:  BTFSS  xA5.4
0C0F8:  BRA    C100
....................            {
....................              bit_clear(Green1_8,4); bit_clear(Red1_8,4);
0C0FA:  BCF    4F.4
0C0FC:  BCF    4B.4
....................            }
0C0FE:  BRA    C128
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B5 )&&(GREEN_Colour.B5 ==0 ))//Red
0C100:  BTFSS  xCD.4
0C102:  BRA    C10E
0C104:  BTFSC  xD1.4
0C106:  BRA    C10E
....................              {
....................                bit_set(Red1_8,4); bit_clear(Green1_8,4);
0C108:  BSF    4B.4
0C10A:  BCF    4F.4
....................              }
0C10C:  BRA    C128
....................              else if((RED_Colour.B5==0 )&&(GREEN_Colour.B5))//Green
0C10E:  BTFSC  xCD.4
0C110:  BRA    C11C
0C112:  BTFSS  xD1.4
0C114:  BRA    C11C
....................              {
....................                bit_clear(Red1_8,4); bit_set(Green1_8,4); 
0C116:  BCF    4B.4
0C118:  BSF    4F.4
....................              }
0C11A:  BRA    C128
....................              else if((RED_Colour.B5)&&(GREEN_Colour.B5))//Ambian
0C11C:  BTFSS  xCD.4
0C11E:  BRA    C128
0C120:  BTFSS  xD1.4
0C122:  BRA    C128
....................              {
....................                bit_set(Red1_8,4); bit_set(Green1_8,4) ; 
0C124:  BSF    4B.4
0C126:  BSF    4F.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B6)//++++++++++++B6+++++++++++++++++++++
0C128:  BTFSS  xA5.5
0C12A:  BRA    C132
....................            {
....................              bit_clear(Green1_8,5); bit_clear(Red1_8,5);
0C12C:  BCF    4F.5
0C12E:  BCF    4B.5
....................            }
0C130:  BRA    C15A
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B6 )&&(GREEN_Colour.B6 ==0 ))//Red
0C132:  BTFSS  xCD.5
0C134:  BRA    C140
0C136:  BTFSC  xD1.5
0C138:  BRA    C140
....................              {
....................                bit_set(Red1_8,5); bit_clear(Green1_8,5);
0C13A:  BSF    4B.5
0C13C:  BCF    4F.5
....................              }
0C13E:  BRA    C15A
....................              else if((RED_Colour.B6==0 )&&(GREEN_Colour.B6))//Green
0C140:  BTFSC  xCD.5
0C142:  BRA    C14E
0C144:  BTFSS  xD1.5
0C146:  BRA    C14E
....................              {
....................                bit_clear(Red1_8,5); bit_set(Green1_8,5); 
0C148:  BCF    4B.5
0C14A:  BSF    4F.5
....................              }
0C14C:  BRA    C15A
....................              else if((RED_Colour.B6)&&(GREEN_Colour.B6))//Ambian
0C14E:  BTFSS  xCD.5
0C150:  BRA    C15A
0C152:  BTFSS  xD1.5
0C154:  BRA    C15A
....................              {
....................                bit_set(Red1_8,5); bit_set(Green1_8,5) ; 
0C156:  BSF    4B.5
0C158:  BSF    4F.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B7)//++++++++++++B7+++++++++++++++++++++
0C15A:  BTFSS  xA5.6
0C15C:  BRA    C164
....................            {
....................              bit_clear(Green1_8,6); bit_clear(Red1_8,6);
0C15E:  BCF    4F.6
0C160:  BCF    4B.6
....................            }
0C162:  BRA    C18C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B7 )&&(GREEN_Colour.B7 ==0 ))//Red
0C164:  BTFSS  xCD.6
0C166:  BRA    C172
0C168:  BTFSC  xD1.6
0C16A:  BRA    C172
....................              {
....................                bit_set(Red1_8,6); bit_clear(Green1_8,6);
0C16C:  BSF    4B.6
0C16E:  BCF    4F.6
....................              }
0C170:  BRA    C18C
....................              else if((RED_Colour.B7==0 )&&(GREEN_Colour.B7))//Green
0C172:  BTFSC  xCD.6
0C174:  BRA    C180
0C176:  BTFSS  xD1.6
0C178:  BRA    C180
....................              {
....................                bit_clear(Red1_8,6); bit_set(Green1_8,6); 
0C17A:  BCF    4B.6
0C17C:  BSF    4F.6
....................              }
0C17E:  BRA    C18C
....................              else if((RED_Colour.B7)&&(GREEN_Colour.B7))//Ambian
0C180:  BTFSS  xCD.6
0C182:  BRA    C18C
0C184:  BTFSS  xD1.6
0C186:  BRA    C18C
....................              {
....................                bit_set(Red1_8,6); bit_set(Green
0C188:  BSF    4B.6
0C18A:  BSF    4F.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B8)//++++++++++++B8+++++++++++++++++++++
0C18C:  BTFSS  xA5.7
0C18E:  BRA    C196
....................            {
....................              bit_clear(Green1_8,7); bit_clear(Red1_8,7);
0C190:  BCF    4F.7
0C192:  BCF    4B.7
....................            }
0C194:  BRA    C1BE
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B8 )&&(GREEN_Colour.B8 ==0 ))//Red
0C196:  BTFSS  xCD.7
0C198:  BRA    C1A4
0C19A:  BTFSC  xD1.7
0C19C:  BRA    C1A4
....................              {
....................                bit_set(Red1_8,7); bit_clear(Green1_8,7);
0C19E:  BSF    4B.7
0C1A0:  BCF    4F.7
....................              }
0C1A2:  BRA    C1BE
....................              else if((RED_Colour.B8==0 )&&(GREEN_Colour.B8))//Green
0C1A4:  BTFSC  xCD.7
0C1A6:  BRA    C1B2
0C1A8:  BTFSS  xD1.7
0C1AA:  BRA    C1B2
....................              {
....................                bit_clear(Red1_8,7); bit_set(Green1_8,7); 
0C1AC:  BCF    4B.7
0C1AE:  BSF    4F.7
....................              }
0C1B0:  BRA    C1BE
....................              else if((RED_Colour.B8)&&(GREEN_Colour.B8))//Ambian
0C1B2:  BTFSS  xCD.7
0C1B4:  BRA    C1BE
0C1B6:  BTFSS  xD1.7
0C1B8:  BRA    C1BE
....................              {
....................                bit_set(Red1_8,7); bit_set(Green1_8,7) ; 
0C1BA:  BSF    4B.7
0C1BC:  BSF    4F.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            ////////////////////////////////////////////////////////
....................            if(Output.B9)//++++++++++++B9+++++++++++++++++++++
0C1BE:  BTFSS  xA6.0
0C1C0:  BRA    C1C8
....................            {
....................              bit_clear(Green9_10,0); bit_clear(Red9_10,0);
0C1C2:  BCF    50.0
0C1C4:  BCF    4C.0
....................            }
0C1C6:  BRA    C1F0
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B9 )&&(GREEN_Colour.B9 ==0 ))//Red
0C1C8:  BTFSS  xCE.0
0C1CA:  BRA    C1D6
0C1CC:  BTFSC  xD2.0
0C1CE:  BRA    C1D6
....................              {
....................                bit_set(Red9_10,0); bit_clear(Green9_10,0);
0C1D0:  BSF    4C.0
0C1D2:  BCF    50.0
....................              }
0C1D4:  BRA    C1F0
....................              else if((RED_Colour.B9==0 )&&(GREEN_Colour.B9))//Green
0C1D6:  BTFSC  xCE.0
0C1D8:  BRA    C1E4
0C1DA:  BTFSS  xD2.0
0C1DC:  BRA    C1E4
....................              {
....................                bit_clear(Red9_10,0); bit_set(Green9_10,0); 
0C1DE:  BCF    4C.0
0C1E0:  BSF    50.0
....................              }
0C1E2:  BRA    C1F0
....................              else if((RED_Colour.B9)&&(GREEN_Colour.B9))//Ambian
0C1E4:  BTFSS  xCE.0
0C1E6:  BRA    C1F0
0C1E8:  BTFSS  xD2.0
0C1EA:  BRA    C1F0
....................              {
....................                bit_set(Red9_10,0); bit_set(Green9_10,0) ; 
0C1EC:  BSF    4C.0
0C1EE:  BSF    50.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B10)//++++++++++++B10+++++++++++++++++++++
0C1F0:  BTFSS  xA6.1
0C1F2:  BRA    C1FA
....................            {
....................              bit_clear(Green9_10,1); bit_clear(Red9_10,1);
0C1F4:  BCF    50.1
0C1F6:  BCF    4C.1
....................            }
0C1F8:  BRA    C222
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B10 )&&(GREEN_Colour.B10 ==0 ))//Red
0C1FA:  BTFSS  xCE.1
0C1FC:  BRA    C208
0C1FE:  BTFSC  xD2.1
0C200:  BRA    C208
....................              {
....................                bit_set(Red9_10,1); bit_clear(Green9_10,1);
0C202:  BSF    4C.1
0C204:  BCF    50.1
....................              }
0C206:  BRA    C222
....................              else if((RED_Colour.B10==0 )&&(GREEN_Colour.B10))//Green
0C208:  BTFSC  xCE.1
0C20A:  BRA    C216
0C20C:  BTFSS  xD2.1
0C20E:  BRA    C216
....................              {
....................                bit_clear(Red9_10,1); bit_set(Green9_10,1); 
0C210:  BCF    4C.1
0C212:  BSF    50.1
....................              }
0C214:  BRA    C222
....................              else if((RED_Colour.B10)&&(GREEN_Colour.B10))//Ambian
0C216:  BTFSS  xCE.1
0C218:  BRA    C222
0C21A:  BTFSS  xD2.1
0C21C:  BRA    C222
....................              {
....................                bit_set(Red9_10,1); bit_set(Green9_10,1) ; 
0C21E:  BSF    4C.1
0C220:  BSF    50.1
....................              }  
....................            }
....................            
....................        // }
....................         
....................        // if(NoOfPoint >= 20)
....................       //{   
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
0C222:  BTFSS  xA6.2
0C224:  BRA    C22C
....................            {
....................              bit_clear(Green11_18,0); bit_clear(Red11_18,0);
0C226:  BCF    51.0
0C228:  BCF    4D.0
....................            }
0C22A:  BRA    C254
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
0C22C:  BTFSS  xCE.2
0C22E:  BRA    C23A
0C230:  BTFSC  xD2.2
0C232:  BRA    C23A
....................              {
....................                bit_set(Red11_18,0); bit_clear(Green11_18,0);
0C234:  BSF    4D.0
0C236:  BCF    51.0
....................              }
0C238:  BRA    C254
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
0C23A:  BTFSC  xCE.2
0C23C:  BRA    C248
0C23E:  BTFSS  xD2.2
0C240:  BRA    C248
....................              {
....................                bit_clear(Red11_18,0); bit_set(Green11_18,0); 
0C242:  BCF    4D.0
0C244:  BSF    51.0
....................              }
0C246:  BRA    C254
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
0C248:  BTFSS  xCE.2
0C24A:  BRA    C254
0C24C:  BTFSS  xD2.2
0C24E:  BRA    C254
....................              {
....................                bit_set(Red11_18,0); bit_set(Green11_18,0) ; 
0C250:  BSF    4D.0
0C252:  BSF    51.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................             if(Output.B11)//++++++++++++B11+++++++++++++++++++++
0C254:  BTFSS  xA6.2
0C256:  BRA    C25E
....................            {
....................              bit_clear(Green11_18,0); bit_clear(Red11_18,0);
0C258:  BCF    51.0
0C25A:  BCF    4D.0
....................            }
0C25C:  BRA    C286
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B11 )&&(GREEN_Colour.B11 ==0 ))//Red
0C25E:  BTFSS  xCE.2
0C260:  BRA    C26C
0C262:  BTFSC  xD2.2
0C264:  BRA    C26C
....................              {
....................                bit_set(Red11_18,0); bit_clear(Green11_18,0);
0C266:  BSF    4D.0
0C268:  BCF    51.0
....................              }
0C26A:  BRA    C286
....................              else if((RED_Colour.B11==0 )&&(GREEN_Colour.B11))//Green
0C26C:  BTFSC  xCE.2
0C26E:  BRA    C27A
0C270:  BTFSS  xD2.2
0C272:  BRA    C27A
....................              {
....................                bit_clear(Red11_18,0); bit_set(Green11_18,0); 
0C274:  BCF    4D.0
0C276:  BSF    51.0
....................              }
0C278:  BRA    C286
....................              else if((RED_Colour.B11)&&(GREEN_Colour.B11))//Ambian
0C27A:  BTFSS  xCE.2
0C27C:  BRA    C286
0C27E:  BTFSS  xD2.2
0C280:  BRA    C286
....................              {
....................                bit_set(Red11_18,0); bit_set(Green11_18,0) ; 
0C282:  BSF    4D.0
0C284:  BSF    51.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B12)//++++++++++++B12+++++++++++++++++++++
0C286:  BTFSS  xA6.3
0C288:  BRA    C290
....................            {
....................              bit_clear(Green11_18,1); bit_clear(Red11_18,1);
0C28A:  BCF    51.1
0C28C:  BCF    4D.1
....................            }
0C28E:  BRA    C2B8
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B12 )&&(GREEN_Colour.B12 ==0 ))//Red
0C290:  BTFSS  xCE.3
0C292:  BRA    C29E
0C294:  BTFSC  xD2.3
0C296:  BRA    C29E
....................              {
....................                bit_set(Red11_18,1); bit_clear(Green11_18,1);
0C298:  BSF    4D.1
0C29A:  BCF    51.1
....................              }
0C29C:  BRA    C2B8
....................              else if((RED_Colour.B12==0 )&&(GREEN_Colour.B12))//Green
0C29E:  BTFSC  xCE.3
0C2A0:  BRA    C2AC
0C2A2:  BTFSS  xD2.3
0C2A4:  BRA    C2AC
....................              {
....................                bit_clear(Red11_18,1); bit_set(Green11_18,1); 
0C2A6:  BCF    4D.1
0C2A8:  BSF    51.1
....................              }
0C2AA:  BRA    C2B8
....................              else if((RED_Colour.B12)&&(GREEN_Colour.B12))//Ambian
0C2AC:  BTFSS  xCE.3
0C2AE:  BRA    C2B8
0C2B0:  BTFSS  xD2.3
0C2B2:  BRA    C2B8
....................              {
....................                bit_set(Red11_18,1); bit_set(Green11_18,1) ; 
0C2B4:  BSF    4D.1
0C2B6:  BSF    51.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B13)//++++++++++++B13+++++++++++++++++++++
0C2B8:  BTFSS  xA6.4
0C2BA:  BRA    C2C2
....................            {
....................              bit_clear(Green11_18,2); bit_clear(Red11_18,2);
0C2BC:  BCF    51.2
0C2BE:  BCF    4D.2
....................            }
0C2C0:  BRA    C2EA
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B13 )&&(GREEN_Colour.B13 ==0 ))//Red
0C2C2:  BTFSS  xCE.4
0C2C4:  BRA    C2D0
0C2C6:  BTFSC  xD2.4
0C2C8:  BRA    C2D0
....................              {
....................                bit_set(Red11_18,2); bit_clear(Green11_18,2);
0C2CA:  BSF    4D.2
0C2CC:  BCF    51.2
....................              }
0C2CE:  BRA    C2EA
....................              else if((RED_Colour.B13==0 )&&(GREEN_Colour.B13))//Green
0C2D0:  BTFSC  xCE.4
0C2D2:  BRA    C2DE
0C2D4:  BTFSS  xD2.4
0C2D6:  BRA    C2DE
....................              {
....................                bit_clear(Red11_18,2); bit_set(Green11_18,2); 
0C2D8:  BCF    4D.2
0C2DA:  BSF    51.2
....................              }
0C2DC:  BRA    C2EA
....................              else if((RED_Colour.B13)&&(GREEN_Colour.B13))//Ambian
0C2DE:  BTFSS  xCE.4
0C2E0:  BRA    C2EA
0C2E2:  BTFSS  xD2.4
0C2E4:  BRA    C2EA
....................              {
....................                bit_set(Red11_18,2); bit_set(Green11_18,2) ; 
0C2E6:  BSF    4D.2
0C2E8:  BSF    51.2
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B14)//++++++++++++B14+++++++++++++++++++++
0C2EA:  BTFSS  xA6.5
0C2EC:  BRA    C2F4
....................            {
....................              bit_clear(Green11_18,3); bit_clear(Red11_18,3);
0C2EE:  BCF    51.3
0C2F0:  BCF    4D.3
....................            }
0C2F2:  BRA    C31C
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B14 )&&(GREEN_Colour.B14 ==0 ))//Red
0C2F4:  BTFSS  xCE.5
0C2F6:  BRA    C302
0C2F8:  BTFSC  xD2.5
0C2FA:  BRA    C302
....................              {
....................                bit_set(Red11_18,3); bit_clear(Green11_18,3);
0C2FC:  BSF    4D.3
0C2FE:  BCF    51.3
....................              }
0C300:  BRA    C31C
....................              else if((RED_Colour.B14==0 )&&(GREEN_Colour.B14))//Green
0C302:  BTFSC  xCE.5
0C304:  BRA    C310
0C306:  BTFSS  xD2.5
0C308:  BRA    C310
....................              {
....................                bit_clear(Red11_18,3); bit_set(Green11_18,3); 
0C30A:  BCF    4D.3
0C30C:  BSF    51.3
....................              }
0C30E:  BRA    C31C
....................              else if((RED_Colour.B14)&&(GREEN_Colour.B14))//Ambian
0C310:  BTFSS  xCE.5
0C312:  BRA    C31C
0C314:  BTFSS  xD2.5
0C316:  BRA    C31C
....................              {
....................                bit_set(Red11_18,3); bit_set(Green11_18,3) ; 
0C318:  BSF    4D.3
0C31A:  BSF    51.3
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B15)//++++++++++++B15+++++++++++++++++++++
0C31C:  BTFSS  xA6.6
0C31E:  BRA    C326
....................            {
....................              bit_clear(Green11_18,4); bit_clear(Red11_18,4);
0C320:  BCF    51.4
0C322:  BCF    4D.4
....................            }
0C324:  BRA    C34E
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B15 )&&(GREEN_Colour.B15 ==0 ))//Red
0C326:  BTFSS  xCE.6
0C328:  BRA    C334
0C32A:  BTFSC  xD2.6
0C32C:  BRA    C334
....................              {
....................                bit_set(Red11_18,4); bit_clear(Green11_18,4);
0C32E:  BSF    4D.4
0C330:  BCF    51.4
....................              }
0C332:  BRA    C34E
....................              else if((RED_Colour.B15==0 )&&(GREEN_Colour.B15))//Green
0C334:  BTFSC  xCE.6
0C336:  BRA    C342
0C338:  BTFSS  xD2.6
0C33A:  BRA    C342
....................              {
....................                bit_clear(Red11_18,4); bit_set(Green11_18,4); 
0C33C:  BCF    4D.4
0C33E:  BSF    51.4
....................              }
0C340:  BRA    C34E
....................              else if((RED_Colour.B15)&&(GREEN_Colour.B15))//Ambian
0C342:  BTFSS  xCE.6
0C344:  BRA    C34E
0C346:  BTFSS  xD2.6
0C348:  BRA    C34E
....................              {
....................                bit_set(Red11_18,4); bit_set(Green11_18,4) ; 
0C34A:  BSF    4D.4
0C34C:  BSF    51.4
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B16)//++++++++++++B16+++++++++++++++++++++
0C34E:  BTFSS  xA6.7
0C350:  BRA    C358
....................            {
....................              bit_clear(Green11_18,5); bit_clear(Red11_18,5);
0C352:  BCF    51.5
0C354:  BCF    4D.5
....................            }
0C356:  BRA    C380
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B16 )&&(GREEN_Colour.B16 ==0 ))//Red
0C358:  BTFSS  xCE.7
0C35A:  BRA    C366
0C35C:  BTFSC  xD2.7
0C35E:  BRA    C366
....................              {
....................                bit_set(Red11_18,5); bit_clear(Green11_18,5);
0C360:  BSF    4D.5
0C362:  BCF    51.5
....................              }
0C364:  BRA    C380
....................              else if((RED_Colour.B16==0 )&&(GREEN_Colour.B16))//Green
0C366:  BTFSC  xCE.7
0C368:  BRA    C374
0C36A:  BTFSS  xD2.7
0C36C:  BRA    C374
....................              {
....................                bit_clear(Red11_18,5); bit_set(Green11_18,5); 
0C36E:  BCF    4D.5
0C370:  BSF    51.5
....................              }
0C372:  BRA    C380
....................              else if((RED_Colour.B16)&&(GREEN_Colour.B16))//Ambian
0C374:  BTFSS  xCE.7
0C376:  BRA    C380
0C378:  BTFSS  xD2.7
0C37A:  BRA    C380
....................              {
....................                bit_set(Red11_18,5); bit_set(Green11_18,5) ; 
0C37C:  BSF    4D.5
0C37E:  BSF    51.5
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B17)//++++++++++++B17+++++++++++++++++++++
0C380:  BTFSS  xA7.0
0C382:  BRA    C38A
....................            {
....................              bit_clear(Green11_18,6); bit_clear(Red11_18,6);
0C384:  BCF    51.6
0C386:  BCF    4D.6
....................            }
0C388:  BRA    C3B2
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B17 )&&(GREEN_Colour.B17 ==0 ))//Red
0C38A:  BTFSS  xCF.0
0C38C:  BRA    C398
0C38E:  BTFSC  xD3.0
0C390:  BRA    C398
....................              {
....................                bit_set(Red11_18,6); bit_clear(Green11_18,6);
0C392:  BSF    4D.6
0C394:  BCF    51.6
....................              }
0C396:  BRA    C3B2
....................              else if((RED_Colour.B17==0 )&&(GREEN_Colour.B17))//Green
0C398:  BTFSC  xCF.0
0C39A:  BRA    C3A6
0C39C:  BTFSS  xD3.0
0C39E:  BRA    C3A6
....................              {
....................                bit_clear(Red11_18,6); bit_set(Green11_18,6); 
0C3A0:  BCF    4D.6
0C3A2:  BSF    51.6
....................              }
0C3A4:  BRA    C3B2
....................              else if((RED_Colour.B17)&&(GREEN_Colour.B17))//Ambian
0C3A6:  BTFSS  xCF.0
0C3A8:  BRA    C3B2
0C3AA:  BTFSS  xD3.0
0C3AC:  BRA    C3B2
....................              {
....................                bit_set(Red11_18,6); bit_set(Green11_18,6) ; 
0C3AE:  BSF    4D.6
0C3B0:  BSF    51.6
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B18)//++++++++++++B18+++++++++++++++++++++
0C3B2:  BTFSS  xA7.1
0C3B4:  BRA    C3BC
....................            {
....................              bit_clear(Green11_18,7); bit_clear(Red11_18,7);
0C3B6:  BCF    51.7
0C3B8:  BCF    4D.7
....................            }
0C3BA:  BRA    C3E4
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B18 )&&(GREEN_Colour.B18 ==0 ))//Red
0C3BC:  BTFSS  xCF.1
0C3BE:  BRA    C3CA
0C3C0:  BTFSC  xD3.1
0C3C2:  BRA    C3CA
....................              {
....................                bit_set(Red11_18,7); bit_clear(Green11_18,7);
0C3C4:  BSF    4D.7
0C3C6:  BCF    51.7
....................              }
0C3C8:  BRA    C3E4
....................              else if((RED_Colour.B18==0 )&&(GREEN_Colour.B18))//Green
0C3CA:  BTFSC  xCF.1
0C3CC:  BRA    C3D8
0C3CE:  BTFSS  xD3.1
0C3D0:  BRA    C3D8
....................              {
....................                bit_clear(Red11_18,7); bit_set(Green11_18,7); 
0C3D2:  BCF    4D.7
0C3D4:  BSF    51.7
....................              }
0C3D6:  BRA    C3E4
....................              else if((RED_Colour.B18)&&(GREEN_Colour.B18))//Ambian
0C3D8:  BTFSS  xCF.1
0C3DA:  BRA    C3E4
0C3DC:  BTFSS  xD3.1
0C3DE:  BRA    C3E4
....................              {
....................                bit_set(Red11_18,7); bit_set(Green11_18,7) ; 
0C3E0:  BSF    4D.7
0C3E2:  BSF    51.7
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B19)//++++++++++++B19+++++++++++++++++++++
0C3E4:  BTFSS  xA7.2
0C3E6:  BRA    C3EE
....................            {
....................              bit_clear(Green19_20,0); bit_clear(Red19_20,0);
0C3E8:  BCF    52.0
0C3EA:  BCF    4E.0
....................            }
0C3EC:  BRA    C416
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B19 )&&(GREEN_Colour.B19 ==0 ))//Red
0C3EE:  BTFSS  xCF.2
0C3F0:  BRA    C3FC
0C3F2:  BTFSC  xD3.2
0C3F4:  BRA    C3FC
....................              {
....................                bit_set(Red19_20,0); bit_clear(Green19_20,0);
0C3F6:  BSF    4E.0
0C3F8:  BCF    52.0
....................              }
0C3FA:  BRA    C416
....................              else if((RED_Colour.B19==0 )&&(GREEN_Colour.B19))//Green
0C3FC:  BTFSC  xCF.2
0C3FE:  BRA    C40A
0C400:  BTFSS  xD3.2
0C402:  BRA    C40A
....................              {
....................                bit_clear(Red19_20,0); bit_set(Green19_20,0); 
0C404:  BCF    4E.0
0C406:  BSF    52.0
....................              }
0C408:  BRA    C416
....................              else if((RED_Colour.B19)&&(GREEN_Colour.B19))//Ambian
0C40A:  BTFSS  xCF.2
0C40C:  BRA    C416
0C40E:  BTFSS  xD3.2
0C410:  BRA    C416
....................              {
....................                bit_set(Red19_20,0); bit_set(Green19_20,0) ; 
0C412:  BSF    4E.0
0C414:  BSF    52.0
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................            if(Output.B20)//++++++++++++B20+++++++++++++++++++++
0C416:  BTFSS  xA7.3
0C418:  BRA    C420
....................            {
....................              bit_clear(Green19_20,1); bit_clear(Red19_20,1);
0C41A:  BCF    52.1
0C41C:  BCF    4E.1
....................            }
0C41E:  BRA    C448
....................            else
....................            {
....................              //bit_set(OUTRed1_8,0); bit_clear(OUTGreen1_8,0);
....................              if((RED_Colour.B20 )&&(GREEN_Colour.B20 ==0 ))//Red
0C420:  BTFSS  xCF.3
0C422:  BRA    C42E
0C424:  BTFSC  xD3.3
0C426:  BRA    C42E
....................              {
....................                bit_set(Red19_20,1); bit_clear(Green19_20,1);
0C428:  BSF    4E.1
0C42A:  BCF    52.1
....................              }
0C42C:  BRA    C448
....................              else if((RED_Colour.B20==0 )&&(GREEN_Colour.B20))//Green
0C42E:  BTFSC  xCF.3
0C430:  BRA    C43C
0C432:  BTFSS  xD3.3
0C434:  BRA    C43C
....................              {
....................                bit_clear(Red19_20,1); bit_set(Green19_20,1); 
0C436:  BCF    4E.1
0C438:  BSF    52.1
....................              }
0C43A:  BRA    C448
....................              else if((RED_Colour.B20)&&(GREEN_Colour.B20))//Ambian
0C43C:  BTFSS  xCF.3
0C43E:  BRA    C448
0C440:  BTFSS  xD3.3
0C442:  BRA    C448
....................              {
....................                bit_set(Red19_20,1); bit_set(Green19_20,1) ; 
0C444:  BSF    4E.1
0C446:  BSF    52.1
....................              }  
....................            }
....................            ////////////////////////////////////////////////////////
....................          
....................       //} 
....................           
....................         
....................            IO_OUTPUT_A(IO_DEVICE_2, Red1_8);
0C448:  MOVLW  04
0C44A:  MOVLB  E
0C44C:  MOVWF  x44
0C44E:  MOVFF  4B,E45
0C452:  MOVLB  0
0C454:  CALL   254C
....................            IO_OUTPUT_B(IO_DEVICE_2, Red9_10);
0C458:  MOVLW  04
0C45A:  MOVLB  E
0C45C:  MOVWF  x44
0C45E:  MOVFF  4C,E45
0C462:  MOVLB  0
0C464:  CALL   2562
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_3, Green1_8);
0C468:  MOVLW  06
0C46A:  MOVLB  E
0C46C:  MOVWF  x44
0C46E:  MOVFF  4F,E45
0C472:  MOVLB  0
0C474:  CALL   254C
....................            IO_OUTPUT_B(IO_DEVICE_3, Green9_10);
0C478:  MOVLW  06
0C47A:  MOVLB  E
0C47C:  MOVWF  x44
0C47E:  MOVFF  50,E45
0C482:  MOVLB  0
0C484:  CALL   2562
....................            
....................            IO_OUTPUT_A(IO_DEVICE_5, Red11_18);  
0C488:  MOVLW  0A
0C48A:  MOVLB  E
0C48C:  MOVWF  x44
0C48E:  MOVFF  4D,E45
0C492:  MOVLB  0
0C494:  CALL   254C
....................            IO_OUTPUT_B(IO_DEVICE_5, Red19_20);
0C498:  MOVLW  0A
0C49A:  MOVLB  E
0C49C:  MOVWF  x44
0C49E:  MOVFF  4E,E45
0C4A2:  MOVLB  0
0C4A4:  CALL   2562
....................                      
....................            IO_OUTPUT_A(IO_DEVICE_4, Green11_18);
0C4A8:  MOVLW  08
0C4AA:  MOVLB  E
0C4AC:  MOVWF  x44
0C4AE:  MOVFF  51,E45
0C4B2:  MOVLB  0
0C4B4:  CALL   254C
....................            IO_OUTPUT_B(IO_DEVICE_4, Green19_20);
0C4B8:  MOVLW  08
0C4BA:  MOVLB  E
0C4BC:  MOVWF  x44
0C4BE:  MOVFF  52,E45
0C4C2:  MOVLB  0
0C4C4:  CALL   2562
....................            
....................                                 
....................            //IO_OUTPUT_A(IO_DEVICE_4, Red1_8); //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_4, Red9_10); //jj test
....................            
....................            //IO_OUTPUT_A(IO_DEVICE_5, Green1_8);  //jj test
....................            //IO_OUTPUT_B(IO_DEVICE_5, Green9_10); //jj test
....................                                            
....................            
....................    }
0C4C8:  GOTO   CF3E (RETURN)
.................... 
.................... }
.................... //////////////////////////////////////////////////////////////////
.................... void ForceAllAlarm(void)
.................... {
....................    if(NoOfPoint >= 10)
*
06BBA:  MOVF   56,W
06BBC:  SUBLW  09
06BBE:  BC    6C00
....................    {
....................       Inputt.B1 = ~InputType.B1;
06BC0:  MOVLB  D
06BC2:  BCF    xA1.0
06BC4:  BTFSS  xA9.0
06BC6:  BSF    xA1.0
....................       Inputt.B2 = ~InputType.B2;
06BC8:  BCF    xA1.1
06BCA:  BTFSS  xA9.1
06BCC:  BSF    xA1.1
....................       Inputt.B3 = ~InputType.B3;
06BCE:  BCF    xA1.2
06BD0:  BTFSS  xA9.2
06BD2:  BSF    xA1.2
....................       Inputt.B4 = ~InputType.B4;
06BD4:  BCF    xA1.3
06BD6:  BTFSS  xA9.3
06BD8:  BSF    xA1.3
....................       Inputt.B5 = ~InputType.B5;
06BDA:  BCF    xA1.4
06BDC:  BTFSS  xA9.4
06BDE:  BSF    xA1.4
....................       Inputt.B6 = ~InputType.B6;
06BE0:  BCF    xA1.5
06BE2:  BTFSS  xA9.5
06BE4:  BSF    xA1.5
....................       Inputt.B7 = ~InputType.B7;
06BE6:  BCF    xA1.6
06BE8:  BTFSS  xA9.6
06BEA:  BSF    xA1.6
....................       Inputt.B8 = ~InputType.B8;
06BEC:  BCF    xA1.7
06BEE:  BTFSS  xA9.7
06BF0:  BSF    xA1.7
....................       Inputt.B9 = ~InputType.B9;
06BF2:  BCF    xA2.0
06BF4:  BTFSS  xAA.0
06BF6:  BSF    xA2.0
....................       Inputt.B10 = ~InputType.B10;
06BF8:  BCF    xA2.1
06BFA:  BTFSS  xAA.1
06BFC:  BSF    xA2.1
06BFE:  MOVLB  0
....................    }
....................    if(NoOfPoint >= 20)
06C00:  MOVF   56,W
06C02:  SUBLW  13
06C04:  BC    6C46
....................    {
....................       Inputt.B11 = ~InputType.B11;
06C06:  MOVLB  D
06C08:  BCF    xA2.2
06C0A:  BTFSS  xAA.2
06C0C:  BSF    xA2.2
....................       Inputt.B12 = ~InputType.B12;
06C0E:  BCF    xA2.3
06C10:  BTFSS  xAA.3
06C12:  BSF    xA2.3
....................       Inputt.B13 = ~InputType.B13;
06C14:  BCF    xA2.4
06C16:  BTFSS  xAA.4
06C18:  BSF    xA2.4
....................       Inputt.B14 = ~InputType.B14;
06C1A:  BCF    xA2.5
06C1C:  BTFSS  xAA.5
06C1E:  BSF    xA2.5
....................       Inputt.B15 = ~InputType.B15;
06C20:  BCF    xA2.6
06C22:  BTFSS  xAA.6
06C24:  BSF    xA2.6
....................       Inputt.B16 = ~InputType.B16;
06C26:  BCF    xA2.7
06C28:  BTFSS  xAA.7
06C2A:  BSF    xA2.7
....................       Inputt.B17 = ~InputType.B11;
06C2C:  BCF    xA3.0
06C2E:  BTFSS  xAA.2
06C30:  BSF    xA3.0
....................       Inputt.B18 = ~InputType.B12;
06C32:  BCF    xA3.1
06C34:  BTFSS  xAA.3
06C36:  BSF    xA3.1
....................       Inputt.B19 = ~InputType.B13;
06C38:  BCF    xA3.2
06C3A:  BTFSS  xAA.4
06C3C:  BSF    xA3.2
....................       Inputt.B20 = ~InputType.B14;
06C3E:  BCF    xA3.3
06C40:  BTFSS  xAA.5
06C42:  BSF    xA3.3
06C44:  MOVLB  0
....................    }
....................       
.................... 
....................    Ack.B1 = 0;
06C46:  MOVLB  D
06C48:  BCF    xBD.0
....................    Ack.B2 = 0;
06C4A:  BCF    xBD.1
....................    Ack.B3 = 0;
06C4C:  BCF    xBD.2
....................    Ack.B4 = 0;
06C4E:  BCF    xBD.3
....................    Ack.B5 = 0;
06C50:  BCF    xBD.4
....................    Ack.B6 = 0;
06C52:  BCF    xBD.5
....................    Ack.B7 = 0;
06C54:  BCF    xBD.6
....................    Ack.B8 = 0;
06C56:  BCF    xBD.7
....................    Ack.B9 = 0;
06C58:  BCF    xBE.0
....................    Ack.B10 = 0;
06C5A:  BCF    xBE.1
....................    Ack.B11 = 0;
06C5C:  BCF    xBE.2
....................    Ack.B12 = 0;
06C5E:  BCF    xBE.3
....................    Ack.B13 = 0;
06C60:  BCF    xBE.4
....................    Ack.B14 = 0;
06C62:  BCF    xBE.5
....................    Ack.B15 = 0;
06C64:  BCF    xBE.6
....................    Ack.B16 = 0;
06C66:  BCF    xBE.7
....................    Ack.B17 = 0;
06C68:  BCF    xBF.0
....................    Ack.B18 = 0;
06C6A:  BCF    xBF.1
....................    Ack.B19 = 0;
06C6C:  BCF    xBF.2
....................    Ack.B20 = 0;  
06C6E:  BCF    xBF.3
06C70:  MOVLB  0
06C72:  GOTO   BFFE (RETURN)
....................    
....................    // Debug  
....................     
.................... }
.................... 
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
....................  ////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ///////////// Check Test ////////////////
.................... void check_test(void)
.................... {
....................    int8 output_temp[8];
....................    
....................    output_temp[0] = Output1_8;
*
0BF2A:  MOVFF  32,E3C
....................    output_temp[1] = output9_16;
0BF2E:  MOVFF  33,E3D
.................... 
.................... 
....................        if((Input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1) delay_ms(50);
0BF32:  BSF    F94.2
0BF34:  BTFSC  F82.2
0BF36:  BRA    BF3C
0BF38:  BTFSS  1A.6
0BF3A:  BRA    BF40
0BF3C:  BTFSS  1A.4
0BF3E:  BRA    BF4C
0BF40:  MOVLW  32
0BF42:  MOVLB  E
0BF44:  MOVWF  x45
0BF46:  MOVLB  0
0BF48:  CALL   0A24
....................        if((Input(Ptest) == 0 && Test == 0)|| AutoTestFlag == 1)
0BF4C:  BSF    F94.2
0BF4E:  BTFSC  F82.2
0BF50:  BRA    BF56
0BF52:  BTFSS  1A.6
0BF54:  BRA    BF5A
0BF56:  BTFSS  1A.4
0BF58:  BRA    BFE6
....................        {
....................            if((Input(Ptest) == 0 && Test == 0)|| AutoTestFlag ==1)
0BF5A:  BSF    F94.2
0BF5C:  BTFSC  F82.2
0BF5E:  BRA    BF64
0BF60:  BTFSS  1A.6
0BF62:  BRA    BF68
0BF64:  BTFSS  1A.4
0BF66:  BRA    BFE4
....................            {
....................              restart_wdt();
0BF68:  CLRWDT
....................              if(T_test == 0) T_test = 0x06;    //3 second for time base 500 ms
0BF6A:  MOVF   2F,F
0BF6C:  BNZ   BF72
0BF6E:  MOVLW  06
0BF70:  MOVWF  2F
....................               Test = 1;
0BF72:  BSF    1A.6
....................               //if(NoOfPoint >= 16)
....................              // {
....................              
....................                  IO_OUTPUT_A(IO_DEVICE_2, 0xFF);
0BF74:  MOVLW  04
0BF76:  MOVLB  E
0BF78:  MOVWF  x44
0BF7A:  SETF   x45
0BF7C:  MOVLB  0
0BF7E:  CALL   254C
....................                  IO_OUTPUT_B(IO_DEVICE_2, 0xFF);
0BF82:  MOVLW  04
0BF84:  MOVLB  E
0BF86:  MOVWF  x44
0BF88:  SETF   x45
0BF8A:  MOVLB  0
0BF8C:  CALL   2562
....................                             
....................                  IO_OUTPUT_A(IO_DEVICE_3, 0xFF);
0BF90:  MOVLW  06
0BF92:  MOVLB  E
0BF94:  MOVWF  x44
0BF96:  SETF   x45
0BF98:  MOVLB  0
0BF9A:  CALL   254C
....................                  IO_OUTPUT_B(IO_DEVICE_3, 0xFF);
0BF9E:  MOVLW  06
0BFA0:  MOVLB  E
0BFA2:  MOVWF  x44
0BFA4:  SETF   x45
0BFA6:  MOVLB  0
0BFA8:  CALL   2562
....................                  
....................                  IO_OUTPUT_A(IO_DEVICE_4, 0xFF);
0BFAC:  MOVLW  08
0BFAE:  MOVLB  E
0BFB0:  MOVWF  x44
0BFB2:  SETF   x45
0BFB4:  MOVLB  0
0BFB6:  CALL   254C
....................                  IO_OUTPUT_B(IO_DEVICE_4, 0xFF);
0BFBA:  MOVLW  08
0BFBC:  MOVLB  E
0BFBE:  MOVWF  x44
0BFC0:  SETF   x45
0BFC2:  MOVLB  0
0BFC4:  CALL   2562
....................                            
....................                  IO_OUTPUT_A(IO_DEVICE_5, 0xFF);
0BFC8:  MOVLW  0A
0BFCA:  MOVLB  E
0BFCC:  MOVWF  x44
0BFCE:  SETF   x45
0BFD0:  MOVLB  0
0BFD2:  CALL   254C
....................                  IO_OUTPUT_B(IO_DEVICE_5, 0xFF);
0BFD6:  MOVLW  0A
0BFD8:  MOVLB  E
0BFDA:  MOVWF  x44
0BFDC:  SETF   x45
0BFDE:  MOVLB  0
0BFE0:  CALL   2562
....................                  //PCF8575_write(0xFF,0x00,Input1_8_Wr_addr);
....................                  //PCF8575_write(0xFF,0x00,Input9_16_Wr_addr);
....................                  //IO_OUTPUT_B(IO_DEVICE_0, 0x00);
....................                  //IO_OUTPUT_B(IO_DEVICE_1, 0x00);
....................              // }
....................              
....................            }
....................        }
0BFE4:  BRA    BFF6
....................        else if(Input(Ptest) == 1 && Test == 1)
0BFE6:  BSF    F94.2
0BFE8:  BTFSS  F82.2
0BFEA:  BRA    BFF6
0BFEC:  BTFSS  1A.6
0BFEE:  BRA    BFF6
....................        {
....................            T_test = 0x00;
0BFF0:  CLRF   2F
....................            Test = 0;
0BFF2:  BCF    1A.6
....................            Test_fault = 0;
0BFF4:  BCF    1A.5
....................        }
.................... 
....................        if(Test_fault == 1)
0BFF6:  BTFSS  1A.5
0BFF8:  BRA    C00C
....................        {
....................           ForceAllAlarm();
0BFFA:  GOTO   6BBA
....................           Anal_Function();
0BFFE:  CALL   7924
....................           // jj 26/7/60
....................           if(Input(Ptest) == 1)
0C002:  BSF    F94.2
0C004:  BTFSS  F82.2
0C006:  BRA    C00A
....................           {
....................             Test_fault = 0;
0C008:  BCF    1A.5
....................           }
....................        }
0C00A:  BRA    C022
....................        else if(Input(Ptest) == 1 && Test == 1)
0C00C:  BSF    F94.2
0C00E:  BTFSS  F82.2
0C010:  BRA    C022
0C012:  BTFSS  1A.6
0C014:  BRA    C022
....................        {
....................           if(NoOfPoint >= 16)
0C016:  MOVF   56,W
0C018:  SUBLW  0F
0C01A:  BC    C01C
....................           {
....................              //PCF8575_write(0xFF,output_temp[0],Input1_8_Wr_addr);
....................              //PCF8575_write(0xFF,output_temp[1],Input9_16_Wr_addr);
....................              //IO_OUTPUT_B(IO_DEVICE_0, output_temp[0]);
....................              //IO_OUTPUT_B(IO_DEVICE_1, output_temp[1]); 
....................           }
....................           
.................... 
....................           T_test = 0x00;
0C01C:  CLRF   2F
....................           Test = 0;
0C01E:  BCF    1A.6
....................           Test_fault = 0;
0C020:  BCF    1A.5
....................        }
0C022:  GOTO   CF28 (RETURN)
.................... }
.................... 
.................... 
.................... /////////////// Check acknowledge ////////////////////////////
.................... 
.................... void check_ack(void)
.................... {
.................... 
....................    if((Input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1) delay_ms(50); //Acknowledge function
*
03866:  BSF    F94.0
03868:  BTFSC  F82.0
0386A:  BRA    3870
0386C:  BTFSS  1A.7
0386E:  BRA    3874
03870:  BTFSS  1A.2
03872:  BRA    3880
03874:  MOVLW  32
03876:  MOVLB  E
03878:  MOVWF  x45
0387A:  MOVLB  0
0387C:  CALL   0A24
....................    if((Input(Pack) == 0 && Ack_F == 0) || AutoAckFlag == 1)
03880:  BSF    F94.0
03882:  BTFSC  F82.0
03884:  BRA    388A
03886:  BTFSS  1A.7
03888:  BRA    388E
0388A:  BTFSS  1A.2
0388C:  BRA    39E2
....................    {
....................             AutoAckFlag = 0;
0388E:  BCF    1A.2
....................             AutoAckDelayTime = 0x00;
03890:  CLRF   1D
....................       
....................                //if(In.B1 == 1 || ((Inputt.B1 ^ InputType.B1) == 1))
....................            if((In.B1 == 1 )||(In2.B1 == 1 ))
03892:  MOVLB  D
03894:  BTFSC  xC1.0
03896:  BRA    389C
03898:  BTFSS  xC5.0
0389A:  BRA    38A4
....................            {
....................              Ack.B1 = 1;
0389C:  BSF    xBD.0
....................              In.B1 = 0;
0389E:  BCF    xC1.0
....................              In2.B1 = 0;      //for auto reset
038A0:  BCF    xC5.0
....................              Output.B1 = 0;
038A2:  BCF    xA5.0
....................            }
....................            //if(In.B2 == 1 || ((Inputt.B2 ^ InputType.B2) == 1))
....................            if((In.B2 == 1)||(In2.B2 == 1))
038A4:  BTFSC  xC1.1
038A6:  BRA    38AC
038A8:  BTFSS  xC5.1
038AA:  BRA    38B4
....................            {
....................              Ack.B2 = 1;
038AC:  BSF    xBD.1
....................              In.B2 = 0;
038AE:  BCF    xC1.1
....................              In2.B2 = 0;      //for auto reset
038B0:  BCF    xC5.1
....................              Output.B2 = 0;
038B2:  BCF    xA5.1
....................            }
....................            //if(In.B3 == 1 || ((Inputt.B3 ^ InputType.B3) == 1))
....................            if((In.B3 == 1)||(In2.B3 == 1))
038B4:  BTFSC  xC1.2
038B6:  BRA    38BC
038B8:  BTFSS  xC5.2
038BA:  BRA    38C4
....................            {
....................              Ack.B3 = 1;
038BC:  BSF    xBD.2
....................              In.B3 = 0;
038BE:  BCF    xC1.2
....................              In2.B3 = 0;      //for auto reset
038C0:  BCF    xC5.2
....................              Output.B3 = 0;
038C2:  BCF    xA5.2
....................            }
....................            //if(In.B4 == 1 || ((Inputt.B4 ^ InputType.B4) == 1))
....................            if((In.B4 == 1)||(In2.B4 == 1))
038C4:  BTFSC  xC1.3
038C6:  BRA    38CC
038C8:  BTFSS  xC5.3
038CA:  BRA    38D4
....................            {
....................              Ack.B4 = 1;
038CC:  BSF    xBD.3
....................              In.B4 = 0;
038CE:  BCF    xC1.3
....................              In2.B4 = 0;      //for auto reset
038D0:  BCF    xC5.3
....................              Output.B4 = 0;
038D2:  BCF    xA5.3
....................            }
....................            //if(In.B5 == 1 || ((Inputt.B5 ^ InputType.B5) == 1))
....................            if((In.B5 == 1)||(In2.B5 == 1))
038D4:  BTFSC  xC1.4
038D6:  BRA    38DC
038D8:  BTFSS  xC5.4
038DA:  BRA    38E4
....................            {
....................              Ack.B5 = 1;
038DC:  BSF    xBD.4
....................              In.B5 = 0;
038DE:  BCF    xC1.4
....................              In2.B5 = 0;      //for auto reset
038E0:  BCF    xC5.4
....................              Output.B5 = 0;
038E2:  BCF    xA5.4
....................            }
....................            //if(In.B6 == 1 || ((Inputt.B6 ^ InputType.B6) == 1))
....................            if((In.B6 == 1 )||(In2.B6 == 1 ))
038E4:  BTFSC  xC1.5
038E6:  BRA    38EC
038E8:  BTFSS  xC5.5
038EA:  BRA    38F4
....................            {
....................              Ack.B6 = 1;
038EC:  BSF    xBD.5
....................              In.B6 = 0;
038EE:  BCF    xC1.5
....................              In2.B6 = 0;      //for auto reset
038F0:  BCF    xC5.5
....................              Output.B6 = 0;
038F2:  BCF    xA5.5
....................            }
....................            //if(In.B7 == 1 || ((Inputt.B7 ^ InputType.B7) == 1))
....................            if((In.B7 == 1 )||(In2.B7 == 1 ))
038F4:  BTFSC  xC1.6
038F6:  BRA    38FC
038F8:  BTFSS  xC5.6
038FA:  BRA    3904
....................            {
....................              Ack.B7 = 1;
038FC:  BSF    xBD.6
....................              In.B7 = 0;
038FE:  BCF    xC1.6
....................              In2.B7 = 0;      //for auto reset
03900:  BCF    xC5.6
....................              Output.B7 = 0;
03902:  BCF    xA5.6
....................            }
....................            //if(In.B8 == 1 || ((Inputt.B8 ^ InputType.B8) == 1))
....................            if((In.B8 == 1 )||(In2.B8 == 1 ))
03904:  BTFSC  xC1.7
03906:  BRA    390C
03908:  BTFSS  xC5.7
0390A:  BRA    3914
....................            {
....................              Ack.B8 = 1;
0390C:  BSF    xBD.7
....................              In.B8 = 0;
0390E:  BCF    xC1.7
....................              In2.B8 = 0;      //for auto reset
03910:  BCF    xC5.7
....................              Output.B8 = 0;
03912:  BCF    xA5.7
....................            }
....................           // if(In.B9 == 1 || ((Inputt.B9 ^ InputType.B9) == 1))
....................            if((In.B9 == 1 )||(In2.B9 == 1 ))
03914:  BTFSC  xC2.0
03916:  BRA    391C
03918:  BTFSS  xC6.0
0391A:  BRA    3924
....................            {
....................              Ack.B9 = 1;
0391C:  BSF    xBE.0
....................              In.B9 = 0;
0391E:  BCF    xC2.0
....................              In2.B9 = 0;      //for auto reset
03920:  BCF    xC6.0
....................              Output.B9 = 0;
03922:  BCF    xA6.0
....................            }
....................            //if(In.B10 == 1 || ((Inputt.B10 ^ InputType.B10) == 1))
....................            if((In.B10 == 1)||(In2.B10 == 1))
03924:  BTFSC  xC2.1
03926:  BRA    392C
03928:  BTFSS  xC6.1
0392A:  BRA    3934
....................            {
....................              Ack.B10 = 1;
0392C:  BSF    xBE.1
....................              In.B10 = 0;
0392E:  BCF    xC2.1
....................              In2.B10 = 0;      //for auto reset
03930:  BCF    xC6.1
....................              Output.B10 = 0;
03932:  BCF    xA6.1
....................            }
....................            //if(In.B11 == 1 || ((Inputt.B11 ^ InputType.B11) == 1))
....................            if((In.B11 == 1)||(In2.B11 == 1))
03934:  BTFSC  xC2.2
03936:  BRA    393C
03938:  BTFSS  xC6.2
0393A:  BRA    3944
....................            {
....................              Ack.B11 = 1;
0393C:  BSF    xBE.2
....................              In.B11 = 0;
0393E:  BCF    xC2.2
....................              In2.B11 = 0;      //for auto reset
03940:  BCF    xC6.2
....................              Output.B11 = 0;
03942:  BCF    xA6.2
....................            }
....................            //if(In.B12 == 1 || ((Inputt.B12 ^ InputType.B12) == 1))
....................            if((In.B12 == 1)||(In2.B12 == 1))
03944:  BTFSC  xC2.3
03946:  BRA    394C
03948:  BTFSS  xC6.3
0394A:  BRA    3954
....................            {
....................              Ack.B12 = 1;
0394C:  BSF    xBE.3
....................              In.B12 = 0;
0394E:  BCF    xC2.3
....................              In2.B12 = 0;      //for auto reset
03950:  BCF    xC6.3
....................              Output.B12 = 0;
03952:  BCF    xA6.3
....................            }
....................            //if(In.B13 == 1 || ((Inputt.B13 ^ InputType.B13) == 1))
....................            if((In.B13 == 1 )||(In2.B13 == 1 ))
03954:  BTFSC  xC2.4
03956:  BRA    395C
03958:  BTFSS  xC6.4
0395A:  BRA    3964
....................            {
....................              Ack.B13 = 1;
0395C:  BSF    xBE.4
....................              In.B13 = 0;
0395E:  BCF    xC2.4
....................              In2.B13 = 0;      //for auto reset
03960:  BCF    xC6.4
....................              Output.B13 = 0;
03962:  BCF    xA6.4
....................            }
....................            //if(In.B14 == 1 || ((Inputt.B14 ^ InputType.B14) == 1))
....................            if((In.B14 == 1)||(In2.B14 == 1))
03964:  BTFSC  xC2.5
03966:  BRA    396C
03968:  BTFSS  xC6.5
0396A:  BRA    3974
....................            {
....................              Ack.B14 = 1;
0396C:  BSF    xBE.5
....................              In.B14 = 0;
0396E:  BCF    xC2.5
....................              In2.B14 = 0;      //for auto reset
03970:  BCF    xC6.5
....................              Output.B14 = 0;
03972:  BCF    xA6.5
....................            }
....................            //if(In.B15 == 1 || ((Inputt.B15 ^ InputType.B15) == 1))
....................            if((In.B15 == 1)||(In2.B15 == 1))
03974:  BTFSC  xC2.6
03976:  BRA    397C
03978:  BTFSS  xC6.6
0397A:  BRA    3984
....................            {
....................              Ack.B15 = 1;
0397C:  BSF    xBE.6
....................              In.B15 = 0;
0397E:  BCF    xC2.6
....................              In2.B15 = 0;      //for auto reset
03980:  BCF    xC6.6
....................              Output.B15 = 0;
03982:  BCF    xA6.6
....................            }
....................            //if(In.B16 == 1 || ((Inputt.B16 ^ InputType.B16) == 1))
....................            if((In.B16 == 1)||(In2.B16 == 1))
03984:  BTFSC  xC2.7
03986:  BRA    398C
03988:  BTFSS  xC6.7
0398A:  BRA    3994
....................            {
....................              Ack.B16 = 1;
0398C:  BSF    xBE.7
....................              In.B16 = 0;
0398E:  BCF    xC2.7
....................              In2.B16 = 0;      //for auto reset
03990:  BCF    xC6.7
....................              Output.B16 = 0;
03992:  BCF    xA6.7
....................            }
....................         
....................            //if(In.B17 == 1 || ((Inputt.B17 ^ InputType.B17) == 1))
....................            if((In.B17 == 1)||(In2.B17 == 1))
03994:  BTFSC  xC3.0
03996:  BRA    399C
03998:  BTFSS  xC7.0
0399A:  BRA    39A4
....................            {
....................              Ack.B17 = 1;
0399C:  BSF    xBF.0
....................              In.B17 = 0;
0399E:  BCF    xC3.0
....................              In2.B17 = 0;      //for auto reset
039A0:  BCF    xC7.0
....................              Output.B17 = 0;
039A2:  BCF    xA7.0
....................            }
....................            //if(In.B18 == 1 || ((Inputt.B18 ^ InputType.B18) == 1))
....................            if((In.B18 == 1)||(In2.B18 == 1))
039A4:  BTFSC  xC3.1
039A6:  BRA    39AC
039A8:  BTFSS  xC7.1
039AA:  BRA    39B4
....................            {
....................              Ack.B18 = 1;
039AC:  BSF    xBF.1
....................              In.B18 = 0;
039AE:  BCF    xC3.1
....................              In2.B18 = 0;      //for auto reset
039B0:  BCF    xC7.1
....................              Output.B18 = 0;
039B2:  BCF    xA7.1
....................            }
....................            //if(In.B19 == 1 || ((Inputt.B19 ^ InputType.B19) == 1))
....................            if((In.B19 == 1)||(In2.B19 == 1))
039B4:  BTFSC  xC3.2
039B6:  BRA    39BC
039B8:  BTFSS  xC7.2
039BA:  BRA    39C4
....................            {
....................              Ack.B19 = 1;
039BC:  BSF    xBF.2
....................              In.B19 = 0;
039BE:  BCF    xC3.2
....................              In2.B19 = 0;      //for auto reset
039C0:  BCF    xC7.2
....................              Output.B19 = 0;
039C2:  BCF    xA7.2
....................            }
....................            if((In.B20 == 1)||(In2.B20 == 1))
039C4:  BTFSC  xC3.3
039C6:  BRA    39CC
039C8:  BTFSS  xC7.3
039CA:  BRA    39D4
....................            {
....................              Ack.B20 = 1;
039CC:  BSF    xBF.3
....................              In.B20 = 0;
039CE:  BCF    xC3.3
....................              In2.B20 = 0;      //for auto reset
039D0:  BCF    xC7.3
....................              Output.B20 = 0;
039D2:  BCF    xA7.3
....................            }
....................            ///////////////////////////////////////////////////////////
....................           
....................       
....................       
....................             Ack_F = 1;
039D4:  BSF    1A.7
....................             output_bit(Pbuzzer,OffRelay);   //Buzzer
039D6:  BCF    F89.4
039D8:  BCF    F92.4
....................             output_bit(Pbell,OffRelay);     //Bell
039DA:  BCF    F89.3
039DC:  BCF    F92.3
....................    }
039DE:  BRA    39F0
039E0:  MOVLB  0
....................    else if(Input(Pack) == 1 && Ack_F == 1)
039E2:  BSF    F94.0
039E4:  BTFSS  F82.0
039E6:  BRA    39EE
039E8:  BTFSS  1A.7
039EA:  BRA    39EE
....................    {
....................       Ack_F = 0;
039EC:  BCF    1A.7
039EE:  MOVLB  D
....................    }
039F0:  MOVLB  0
039F2:  RETURN 0
.................... 
.................... }
.................... 
.................... 
.................... ///////////////////// Check Reset ///////////////////////////////////
.................... void check_reset(void)
.................... {
....................     if((Input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1) delay_ms(50);
039F4:  BSF    F94.1
039F6:  BTFSC  F82.1
039F8:  BRA    39FE
039FA:  BTFSS  30.0
039FC:  BRA    3A02
039FE:  BTFSS  1A.3
03A00:  BRA    3A0E
03A02:  MOVLW  32
03A04:  MOVLB  E
03A06:  MOVWF  x45
03A08:  MOVLB  0
03A0A:  CALL   0A24
....................     if((Input(Preset) == 0 && Reset_F == 0)|| AutoResetFlag ==1)
03A0E:  BSF    F94.1
03A10:  BTFSC  F82.1
03A12:  BRA    3A18
03A14:  BTFSS  30.0
03A16:  BRA    3A1C
03A18:  BTFSS  1A.3
03A1A:  BRA    3D44
....................     {
....................        AutoResetFlag = 0;
03A1C:  BCF    1A.3
....................        
....................        if((Inputt.B1 ^ InputType.B1) == 0 && In.B1 == 0) Output.B1 = 1;
03A1E:  MOVLW  00
03A20:  MOVLB  D
03A22:  BTFSC  xA1.0
03A24:  MOVLW  01
03A26:  MOVLB  E
03A28:  MOVWF  x46
03A2A:  MOVLW  00
03A2C:  MOVLB  D
03A2E:  BTFSC  xA9.0
03A30:  MOVLW  01
03A32:  MOVLB  E
03A34:  XORWF  x46,W
03A36:  BNZ   3A46
03A38:  MOVLB  D
03A3A:  BTFSS  xC1.0
03A3C:  BRA    3A42
03A3E:  MOVLB  E
03A40:  BRA    3A46
03A42:  BSF    xA5.0
03A44:  MOVLB  E
....................        if((Inputt.B2 ^ InputType.B2) == 0 && In.B2 == 0) Output.B2 = 1;
03A46:  MOVLW  00
03A48:  MOVLB  D
03A4A:  BTFSC  xA1.1
03A4C:  MOVLW  01
03A4E:  MOVLB  E
03A50:  MOVWF  x46
03A52:  MOVLW  00
03A54:  MOVLB  D
03A56:  BTFSC  xA9.1
03A58:  MOVLW  01
03A5A:  MOVLB  E
03A5C:  XORWF  x46,W
03A5E:  BNZ   3A6E
03A60:  MOVLB  D
03A62:  BTFSS  xC1.1
03A64:  BRA    3A6A
03A66:  MOVLB  E
03A68:  BRA    3A6E
03A6A:  BSF    xA5.1
03A6C:  MOVLB  E
....................        if((Inputt.B3 ^ InputType.B3) == 0 && In.B3 == 0) Output.B3 = 1;
03A6E:  MOVLW  00
03A70:  MOVLB  D
03A72:  BTFSC  xA1.2
03A74:  MOVLW  01
03A76:  MOVLB  E
03A78:  MOVWF  x46
03A7A:  MOVLW  00
03A7C:  MOVLB  D
03A7E:  BTFSC  xA9.2
03A80:  MOVLW  01
03A82:  MOVLB  E
03A84:  XORWF  x46,W
03A86:  BNZ   3A96
03A88:  MOVLB  D
03A8A:  BTFSS  xC1.2
03A8C:  BRA    3A92
03A8E:  MOVLB  E
03A90:  BRA    3A96
03A92:  BSF    xA5.2
03A94:  MOVLB  E
....................        if((Inputt.B4 ^ InputType.B4) == 0 && In.B4 == 0) Output.B4 = 1;
03A96:  MOVLW  00
03A98:  MOVLB  D
03A9A:  BTFSC  xA1.3
03A9C:  MOVLW  01
03A9E:  MOVLB  E
03AA0:  MOVWF  x46
03AA2:  MOVLW  00
03AA4:  MOVLB  D
03AA6:  BTFSC  xA9.3
03AA8:  MOVLW  01
03AAA:  MOVLB  E
03AAC:  XORWF  x46,W
03AAE:  BNZ   3ABE
03AB0:  MOVLB  D
03AB2:  BTFSS  xC1.3
03AB4:  BRA    3ABA
03AB6:  MOVLB  E
03AB8:  BRA    3ABE
03ABA:  BSF    xA5.3
03ABC:  MOVLB  E
....................        if((Inputt.B5 ^ InputType.B5) == 0 && In.B5 == 0) Output.B5 = 1;
03ABE:  MOVLW  00
03AC0:  MOVLB  D
03AC2:  BTFSC  xA1.4
03AC4:  MOVLW  01
03AC6:  MOVLB  E
03AC8:  MOVWF  x46
03ACA:  MOVLW  00
03ACC:  MOVLB  D
03ACE:  BTFSC  xA9.4
03AD0:  MOVLW  01
03AD2:  MOVLB  E
03AD4:  XORWF  x46,W
03AD6:  BNZ   3AE6
03AD8:  MOVLB  D
03ADA:  BTFSS  xC1.4
03ADC:  BRA    3AE2
03ADE:  MOVLB  E
03AE0:  BRA    3AE6
03AE2:  BSF    xA5.4
03AE4:  MOVLB  E
....................        if((Inputt.B6 ^ InputType.B6) == 0 && In.B6 == 0) Output.B6 = 1;
03AE6:  MOVLW  00
03AE8:  MOVLB  D
03AEA:  BTFSC  xA1.5
03AEC:  MOVLW  01
03AEE:  MOVLB  E
03AF0:  MOVWF  x46
03AF2:  MOVLW  00
03AF4:  MOVLB  D
03AF6:  BTFSC  xA9.5
03AF8:  MOVLW  01
03AFA:  MOVLB  E
03AFC:  XORWF  x46,W
03AFE:  BNZ   3B0E
03B00:  MOVLB  D
03B02:  BTFSS  xC1.5
03B04:  BRA    3B0A
03B06:  MOVLB  E
03B08:  BRA    3B0E
03B0A:  BSF    xA5.5
03B0C:  MOVLB  E
....................        if((Inputt.B7 ^ InputType.B7) == 0 && In.B7 == 0) Output.B7 = 1;
03B0E:  MOVLW  00
03B10:  MOVLB  D
03B12:  BTFSC  xA1.6
03B14:  MOVLW  01
03B16:  MOVLB  E
03B18:  MOVWF  x46
03B1A:  MOVLW  00
03B1C:  MOVLB  D
03B1E:  BTFSC  xA9.6
03B20:  MOVLW  01
03B22:  MOVLB  E
03B24:  XORWF  x46,W
03B26:  BNZ   3B36
03B28:  MOVLB  D
03B2A:  BTFSS  xC1.6
03B2C:  BRA    3B32
03B2E:  MOVLB  E
03B30:  BRA    3B36
03B32:  BSF    xA5.6
03B34:  MOVLB  E
....................        if((Inputt.B8 ^ InputType.B8) == 0 && In.B8 == 0) Output.B8 = 1;
03B36:  MOVLW  00
03B38:  MOVLB  D
03B3A:  BTFSC  xA1.7
03B3C:  MOVLW  01
03B3E:  MOVLB  E
03B40:  MOVWF  x46
03B42:  MOVLW  00
03B44:  MOVLB  D
03B46:  BTFSC  xA9.7
03B48:  MOVLW  01
03B4A:  MOVLB  E
03B4C:  XORWF  x46,W
03B4E:  BNZ   3B5E
03B50:  MOVLB  D
03B52:  BTFSS  xC1.7
03B54:  BRA    3B5A
03B56:  MOVLB  E
03B58:  BRA    3B5E
03B5A:  BSF    xA5.7
03B5C:  MOVLB  E
....................        if((Inputt.B9 ^ InputType.B9) == 0 && In.B9 == 0) Output.B9 = 1;
03B5E:  MOVLW  00
03B60:  MOVLB  D
03B62:  BTFSC  xA2.0
03B64:  MOVLW  01
03B66:  MOVLB  E
03B68:  MOVWF  x46
03B6A:  MOVLW  00
03B6C:  MOVLB  D
03B6E:  BTFSC  xAA.0
03B70:  MOVLW  01
03B72:  MOVLB  E
03B74:  XORWF  x46,W
03B76:  BNZ   3B86
03B78:  MOVLB  D
03B7A:  BTFSS  xC2.0
03B7C:  BRA    3B82
03B7E:  MOVLB  E
03B80:  BRA    3B86
03B82:  BSF    xA6.0
03B84:  MOVLB  E
....................        if((Inputt.B10 ^ InputType.B10) == 0 && In.B10 == 0) Output.B10 = 1;
03B86:  MOVLW  00
03B88:  MOVLB  D
03B8A:  BTFSC  xA2.1
03B8C:  MOVLW  01
03B8E:  MOVLB  E
03B90:  MOVWF  x46
03B92:  MOVLW  00
03B94:  MOVLB  D
03B96:  BTFSC  xAA.1
03B98:  MOVLW  01
03B9A:  MOVLB  E
03B9C:  XORWF  x46,W
03B9E:  BNZ   3BAE
03BA0:  MOVLB  D
03BA2:  BTFSS  xC2.1
03BA4:  BRA    3BAA
03BA6:  MOVLB  E
03BA8:  BRA    3BAE
03BAA:  BSF    xA6.1
03BAC:  MOVLB  E
....................        if((Inputt.B11 ^ InputType.B11) == 0 && In.B11 == 0) Output.B11 = 1;
03BAE:  MOVLW  00
03BB0:  MOVLB  D
03BB2:  BTFSC  xA2.2
03BB4:  MOVLW  01
03BB6:  MOVLB  E
03BB8:  MOVWF  x46
03BBA:  MOVLW  00
03BBC:  MOVLB  D
03BBE:  BTFSC  xAA.2
03BC0:  MOVLW  01
03BC2:  MOVLB  E
03BC4:  XORWF  x46,W
03BC6:  BNZ   3BD6
03BC8:  MOVLB  D
03BCA:  BTFSS  xC2.2
03BCC:  BRA    3BD2
03BCE:  MOVLB  E
03BD0:  BRA    3BD6
03BD2:  BSF    xA6.2
03BD4:  MOVLB  E
....................        if((Inputt.B12 ^ InputType.B12) == 0 && In.B12 == 0) Output.B12 = 1;
03BD6:  MOVLW  00
03BD8:  MOVLB  D
03BDA:  BTFSC  xA2.3
03BDC:  MOVLW  01
03BDE:  MOVLB  E
03BE0:  MOVWF  x46
03BE2:  MOVLW  00
03BE4:  MOVLB  D
03BE6:  BTFSC  xAA.3
03BE8:  MOVLW  01
03BEA:  MOVLB  E
03BEC:  XORWF  x46,W
03BEE:  BNZ   3BFE
03BF0:  MOVLB  D
03BF2:  BTFSS  xC2.3
03BF4:  BRA    3BFA
03BF6:  MOVLB  E
03BF8:  BRA    3BFE
03BFA:  BSF    xA6.3
03BFC:  MOVLB  E
....................        if((Inputt.B13 ^ InputType.B13) == 0 && In.B13 == 0) Output.B13 = 1;
03BFE:  MOVLW  00
03C00:  MOVLB  D
03C02:  BTFSC  xA2.4
03C04:  MOVLW  01
03C06:  MOVLB  E
03C08:  MOVWF  x46
03C0A:  MOVLW  00
03C0C:  MOVLB  D
03C0E:  BTFSC  xAA.4
03C10:  MOVLW  01
03C12:  MOVLB  E
03C14:  XORWF  x46,W
03C16:  BNZ   3C26
03C18:  MOVLB  D
03C1A:  BTFSS  xC2.4
03C1C:  BRA    3C22
03C1E:  MOVLB  E
03C20:  BRA    3C26
03C22:  BSF    xA6.4
03C24:  MOVLB  E
....................        if((Inputt.B14 ^ InputType.B14) == 0 && In.B14 == 0) Output.B14 = 1;
03C26:  MOVLW  00
03C28:  MOVLB  D
03C2A:  BTFSC  xA2.5
03C2C:  MOVLW  01
03C2E:  MOVLB  E
03C30:  MOVWF  x46
03C32:  MOVLW  00
03C34:  MOVLB  D
03C36:  BTFSC  xAA.5
03C38:  MOVLW  01
03C3A:  MOVLB  E
03C3C:  XORWF  x46,W
03C3E:  BNZ   3C4E
03C40:  MOVLB  D
03C42:  BTFSS  xC2.5
03C44:  BRA    3C4A
03C46:  MOVLB  E
03C48:  BRA    3C4E
03C4A:  BSF    xA6.5
03C4C:  MOVLB  E
....................        if((Inputt.B15 ^ InputType.B15) == 0 && In.B15 == 0) Output.B15 = 1;
03C4E:  MOVLW  00
03C50:  MOVLB  D
03C52:  BTFSC  xA2.6
03C54:  MOVLW  01
03C56:  MOVLB  E
03C58:  MOVWF  x46
03C5A:  MOVLW  00
03C5C:  MOVLB  D
03C5E:  BTFSC  xAA.6
03C60:  MOVLW  01
03C62:  MOVLB  E
03C64:  XORWF  x46,W
03C66:  BNZ   3C76
03C68:  MOVLB  D
03C6A:  BTFSS  xC2.6
03C6C:  BRA    3C72
03C6E:  MOVLB  E
03C70:  BRA    3C76
03C72:  BSF    xA6.6
03C74:  MOVLB  E
....................        if((Inputt.B16 ^ InputType.B16) == 0 && In.B16 == 0) Output.B16 = 1;
03C76:  MOVLW  00
03C78:  MOVLB  D
03C7A:  BTFSC  xA2.7
03C7C:  MOVLW  01
03C7E:  MOVLB  E
03C80:  MOVWF  x46
03C82:  MOVLW  00
03C84:  MOVLB  D
03C86:  BTFSC  xAA.7
03C88:  MOVLW  01
03C8A:  MOVLB  E
03C8C:  XORWF  x46,W
03C8E:  BNZ   3C9E
03C90:  MOVLB  D
03C92:  BTFSS  xC2.7
03C94:  BRA    3C9A
03C96:  MOVLB  E
03C98:  BRA    3C9E
03C9A:  BSF    xA6.7
03C9C:  MOVLB  E
....................        if((Inputt.B17 ^ InputType.B17) == 0 && In.B17 == 0) Output.B17 = 1;
03C9E:  MOVLW  00
03CA0:  MOVLB  D
03CA2:  BTFSC  xA3.0
03CA4:  MOVLW  01
03CA6:  MOVLB  E
03CA8:  MOVWF  x46
03CAA:  MOVLW  00
03CAC:  MOVLB  D
03CAE:  BTFSC  xAB.0
03CB0:  MOVLW  01
03CB2:  MOVLB  E
03CB4:  XORWF  x46,W
03CB6:  BNZ   3CC6
03CB8:  MOVLB  D
03CBA:  BTFSS  xC3.0
03CBC:  BRA    3CC2
03CBE:  MOVLB  E
03CC0:  BRA    3CC6
03CC2:  BSF    xA7.0
03CC4:  MOVLB  E
....................        if((Inputt.B18 ^ InputType.B18) == 0 && In.B18 == 0) Output.B18 = 1;
03CC6:  MOVLW  00
03CC8:  MOVLB  D
03CCA:  BTFSC  xA3.1
03CCC:  MOVLW  01
03CCE:  MOVLB  E
03CD0:  MOVWF  x46
03CD2:  MOVLW  00
03CD4:  MOVLB  D
03CD6:  BTFSC  xAB.1
03CD8:  MOVLW  01
03CDA:  MOVLB  E
03CDC:  XORWF  x46,W
03CDE:  BNZ   3CEE
03CE0:  MOVLB  D
03CE2:  BTFSS  xC3.1
03CE4:  BRA    3CEA
03CE6:  MOVLB  E
03CE8:  BRA    3CEE
03CEA:  BSF    xA7.1
03CEC:  MOVLB  E
....................        if((Inputt.B19 ^ InputType.B19) == 0 && In.B19 == 0) Output.B19 = 1;
03CEE:  MOVLW  00
03CF0:  MOVLB  D
03CF2:  BTFSC  xA3.2
03CF4:  MOVLW  01
03CF6:  MOVLB  E
03CF8:  MOVWF  x46
03CFA:  MOVLW  00
03CFC:  MOVLB  D
03CFE:  BTFSC  xAB.2
03D00:  MOVLW  01
03D02:  MOVLB  E
03D04:  XORWF  x46,W
03D06:  BNZ   3D16
03D08:  MOVLB  D
03D0A:  BTFSS  xC3.2
03D0C:  BRA    3D12
03D0E:  MOVLB  E
03D10:  BRA    3D16
03D12:  BSF    xA7.2
03D14:  MOVLB  E
....................        if((Inputt.B20 ^ InputType.B20) == 0 && In.B20 == 0) Output.B20 = 1;
03D16:  MOVLW  00
03D18:  MOVLB  D
03D1A:  BTFSC  xA3.3
03D1C:  MOVLW  01
03D1E:  MOVLB  E
03D20:  MOVWF  x46
03D22:  MOVLW  00
03D24:  MOVLB  D
03D26:  BTFSC  xAB.3
03D28:  MOVLW  01
03D2A:  MOVLB  E
03D2C:  XORWF  x46,W
03D2E:  BNZ   3D3E
03D30:  MOVLB  D
03D32:  BTFSS  xC3.3
03D34:  BRA    3D3A
03D36:  MOVLB  E
03D38:  BRA    3D3E
03D3A:  BSF    xA7.3
03D3C:  MOVLB  E
....................        
.................... 
....................        Reset_F = 1;
03D3E:  BSF    30.0
....................     }
03D40:  BRA    3D52
03D42:  MOVLB  0
....................     else if(Input(Preset) == 1 && Reset_F == 1)
03D44:  BSF    F94.1
03D46:  BTFSS  F82.1
03D48:  BRA    3D50
03D4A:  BTFSS  30.0
03D4C:  BRA    3D50
....................     {
....................        Reset_F = 0;
03D4E:  BCF    30.0
03D50:  MOVLB  E
....................     }
03D52:  MOVLB  0
03D54:  RETURN 0
.................... }
.................... //////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////
.................... ///////////////////////Check Auto Reset function ///////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////
.................... int1 CheckAutoReset(unsigned char DatType)
.................... {
....................    int1 check;     /// "1" = true  //Other Alarm active or not "ACK"
.................... 
....................    if(DatType == 0x01) // Buzzer
*
06C9C:  MOVLB  E
06C9E:  DECFSZ x44,W
06CA0:  BRA    72DA
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (OutputType.B1 | OutputBoth.B1);
06CA2:  MOVLW  00
06CA4:  MOVLB  D
06CA6:  BTFSC  xC1.0
06CA8:  MOVLW  01
06CAA:  MOVLB  E
06CAC:  MOVWF  x47
06CAE:  MOVLW  00
06CB0:  MOVLB  D
06CB2:  BTFSC  xC5.0
06CB4:  MOVLW  01
06CB6:  MOVLB  E
06CB8:  IORWF  x47,W
06CBA:  MOVWF  x46
06CBC:  MOVLW  00
06CBE:  MOVLB  D
06CC0:  BTFSS  xBD.0
06CC2:  MOVLW  01
06CC4:  MOVLB  E
06CC6:  ANDWF  x46,F
06CC8:  MOVLW  00
06CCA:  MOVLB  D
06CCC:  BTFSC  xB1.0
06CCE:  MOVLW  01
06CD0:  MOVLB  E
06CD2:  MOVWF  x49
06CD4:  MOVLW  00
06CD6:  MOVLB  D
06CD8:  BTFSC  xB5.0
06CDA:  MOVLW  01
06CDC:  MOVLB  E
06CDE:  IORWF  x49,W
06CE0:  ANDWF  x46,W
06CE2:  BCF    x45.0
06CE4:  BTFSC  FE8.0
06CE6:  BSF    x45.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (OutputType.B2 | OutputBoth.B2));
06CE8:  MOVLW  00
06CEA:  BTFSC  x45.0
06CEC:  MOVLW  01
06CEE:  MOVWF  x46
06CF0:  MOVLW  00
06CF2:  MOVLB  D
06CF4:  BTFSC  xC1.1
06CF6:  MOVLW  01
06CF8:  MOVLB  E
06CFA:  MOVWF  x48
06CFC:  MOVLW  00
06CFE:  MOVLB  D
06D00:  BTFSC  xC5.1
06D02:  MOVLW  01
06D04:  MOVLB  E
06D06:  IORWF  x48,W
06D08:  MOVWF  x47
06D0A:  MOVLW  00
06D0C:  MOVLB  D
06D0E:  BTFSS  xBD.1
06D10:  MOVLW  01
06D12:  MOVLB  E
06D14:  ANDWF  x47,F
06D16:  MOVLW  00
06D18:  MOVLB  D
06D1A:  BTFSC  xB1.1
06D1C:  MOVLW  01
06D1E:  MOVLB  E
06D20:  MOVWF  x4A
06D22:  MOVLW  00
06D24:  MOVLB  D
06D26:  BTFSC  xB5.1
06D28:  MOVLW  01
06D2A:  MOVLB  E
06D2C:  IORWF  x4A,W
06D2E:  ANDWF  x47,W
06D30:  IORWF  x46,W
06D32:  BCF    x45.0
06D34:  BTFSC  FE8.0
06D36:  BSF    x45.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (OutputType.B3 | OutputBoth.B3));
06D38:  MOVLW  00
06D3A:  BTFSC  x45.0
06D3C:  MOVLW  01
06D3E:  MOVWF  x46
06D40:  MOVLW  00
06D42:  MOVLB  D
06D44:  BTFSC  xC1.2
06D46:  MOVLW  01
06D48:  MOVLB  E
06D4A:  MOVWF  x48
06D4C:  MOVLW  00
06D4E:  MOVLB  D
06D50:  BTFSC  xC5.2
06D52:  MOVLW  01
06D54:  MOVLB  E
06D56:  IORWF  x48,W
06D58:  MOVWF  x47
06D5A:  MOVLW  00
06D5C:  MOVLB  D
06D5E:  BTFSS  xBD.2
06D60:  MOVLW  01
06D62:  MOVLB  E
06D64:  ANDWF  x47,F
06D66:  MOVLW  00
06D68:  MOVLB  D
06D6A:  BTFSC  xB1.2
06D6C:  MOVLW  01
06D6E:  MOVLB  E
06D70:  MOVWF  x4A
06D72:  MOVLW  00
06D74:  MOVLB  D
06D76:  BTFSC  xB5.2
06D78:  MOVLW  01
06D7A:  MOVLB  E
06D7C:  IORWF  x4A,W
06D7E:  ANDWF  x47,W
06D80:  IORWF  x46,W
06D82:  BCF    x45.0
06D84:  BTFSC  FE8.0
06D86:  BSF    x45.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (OutputType.B4 | OutputBoth.B4));
06D88:  MOVLW  00
06D8A:  BTFSC  x45.0
06D8C:  MOVLW  01
06D8E:  MOVWF  x46
06D90:  MOVLW  00
06D92:  MOVLB  D
06D94:  BTFSC  xC1.3
06D96:  MOVLW  01
06D98:  MOVLB  E
06D9A:  MOVWF  x48
06D9C:  MOVLW  00
06D9E:  MOVLB  D
06DA0:  BTFSC  xC5.3
06DA2:  MOVLW  01
06DA4:  MOVLB  E
06DA6:  IORWF  x48,W
06DA8:  MOVWF  x47
06DAA:  MOVLW  00
06DAC:  MOVLB  D
06DAE:  BTFSS  xBD.3
06DB0:  MOVLW  01
06DB2:  MOVLB  E
06DB4:  ANDWF  x47,F
06DB6:  MOVLW  00
06DB8:  MOVLB  D
06DBA:  BTFSC  xB1.3
06DBC:  MOVLW  01
06DBE:  MOVLB  E
06DC0:  MOVWF  x4A
06DC2:  MOVLW  00
06DC4:  MOVLB  D
06DC6:  BTFSC  xB5.3
06DC8:  MOVLW  01
06DCA:  MOVLB  E
06DCC:  IORWF  x4A,W
06DCE:  ANDWF  x47,W
06DD0:  IORWF  x46,W
06DD2:  BCF    x45.0
06DD4:  BTFSC  FE8.0
06DD6:  BSF    x45.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (OutputType.B5 | OutputBoth.B5));
06DD8:  MOVLW  00
06DDA:  BTFSC  x45.0
06DDC:  MOVLW  01
06DDE:  MOVWF  x46
06DE0:  MOVLW  00
06DE2:  MOVLB  D
06DE4:  BTFSC  xC1.4
06DE6:  MOVLW  01
06DE8:  MOVLB  E
06DEA:  MOVWF  x48
06DEC:  MOVLW  00
06DEE:  MOVLB  D
06DF0:  BTFSC  xC5.4
06DF2:  MOVLW  01
06DF4:  MOVLB  E
06DF6:  IORWF  x48,W
06DF8:  MOVWF  x47
06DFA:  MOVLW  00
06DFC:  MOVLB  D
06DFE:  BTFSS  xBD.4
06E00:  MOVLW  01
06E02:  MOVLB  E
06E04:  ANDWF  x47,F
06E06:  MOVLW  00
06E08:  MOVLB  D
06E0A:  BTFSC  xB1.4
06E0C:  MOVLW  01
06E0E:  MOVLB  E
06E10:  MOVWF  x4A
06E12:  MOVLW  00
06E14:  MOVLB  D
06E16:  BTFSC  xB5.4
06E18:  MOVLW  01
06E1A:  MOVLB  E
06E1C:  IORWF  x4A,W
06E1E:  ANDWF  x47,W
06E20:  IORWF  x46,W
06E22:  BCF    x45.0
06E24:  BTFSC  FE8.0
06E26:  BSF    x45.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (OutputType.B6 | OutputBoth.B6));
06E28:  MOVLW  00
06E2A:  BTFSC  x45.0
06E2C:  MOVLW  01
06E2E:  MOVWF  x46
06E30:  MOVLW  00
06E32:  MOVLB  D
06E34:  BTFSC  xC1.5
06E36:  MOVLW  01
06E38:  MOVLB  E
06E3A:  MOVWF  x48
06E3C:  MOVLW  00
06E3E:  MOVLB  D
06E40:  BTFSC  xC5.5
06E42:  MOVLW  01
06E44:  MOVLB  E
06E46:  IORWF  x48,W
06E48:  MOVWF  x47
06E4A:  MOVLW  00
06E4C:  MOVLB  D
06E4E:  BTFSS  xBD.5
06E50:  MOVLW  01
06E52:  MOVLB  E
06E54:  ANDWF  x47,F
06E56:  MOVLW  00
06E58:  MOVLB  D
06E5A:  BTFSC  xB1.5
06E5C:  MOVLW  01
06E5E:  MOVLB  E
06E60:  MOVWF  x4A
06E62:  MOVLW  00
06E64:  MOVLB  D
06E66:  BTFSC  xB5.5
06E68:  MOVLW  01
06E6A:  MOVLB  E
06E6C:  IORWF  x4A,W
06E6E:  ANDWF  x47,W
06E70:  IORWF  x46,W
06E72:  BCF    x45.0
06E74:  BTFSC  FE8.0
06E76:  BSF    x45.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (OutputType.B7 | OutputBoth.B7));
06E78:  MOVLW  00
06E7A:  BTFSC  x45.0
06E7C:  MOVLW  01
06E7E:  MOVWF  x46
06E80:  MOVLW  00
06E82:  MOVLB  D
06E84:  BTFSC  xC1.6
06E86:  MOVLW  01
06E88:  MOVLB  E
06E8A:  MOVWF  x48
06E8C:  MOVLW  00
06E8E:  MOVLB  D
06E90:  BTFSC  xC5.6
06E92:  MOVLW  01
06E94:  MOVLB  E
06E96:  IORWF  x48,W
06E98:  MOVWF  x47
06E9A:  MOVLW  00
06E9C:  MOVLB  D
06E9E:  BTFSS  xBD.6
06EA0:  MOVLW  01
06EA2:  MOVLB  E
06EA4:  ANDWF  x47,F
06EA6:  MOVLW  00
06EA8:  MOVLB  D
06EAA:  BTFSC  xB1.6
06EAC:  MOVLW  01
06EAE:  MOVLB  E
06EB0:  MOVWF  x4A
06EB2:  MOVLW  00
06EB4:  MOVLB  D
06EB6:  BTFSC  xB5.6
06EB8:  MOVLW  01
06EBA:  MOVLB  E
06EBC:  IORWF  x4A,W
06EBE:  ANDWF  x47,W
06EC0:  IORWF  x46,W
06EC2:  BCF    x45.0
06EC4:  BTFSC  FE8.0
06EC6:  BSF    x45.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (OutputType.B8 | OutputBoth.B8));
06EC8:  MOVLW  00
06ECA:  BTFSC  x45.0
06ECC:  MOVLW  01
06ECE:  MOVWF  x46
06ED0:  MOVLW  00
06ED2:  MOVLB  D
06ED4:  BTFSC  xC1.7
06ED6:  MOVLW  01
06ED8:  MOVLB  E
06EDA:  MOVWF  x48
06EDC:  MOVLW  00
06EDE:  MOVLB  D
06EE0:  BTFSC  xC5.7
06EE2:  MOVLW  01
06EE4:  MOVLB  E
06EE6:  IORWF  x48,W
06EE8:  MOVWF  x47
06EEA:  MOVLW  00
06EEC:  MOVLB  D
06EEE:  BTFSS  xBD.7
06EF0:  MOVLW  01
06EF2:  MOVLB  E
06EF4:  ANDWF  x47,F
06EF6:  MOVLW  00
06EF8:  MOVLB  D
06EFA:  BTFSC  xB1.7
06EFC:  MOVLW  01
06EFE:  MOVLB  E
06F00:  MOVWF  x4A
06F02:  MOVLW  00
06F04:  MOVLB  D
06F06:  BTFSC  xB5.7
06F08:  MOVLW  01
06F0A:  MOVLB  E
06F0C:  IORWF  x4A,W
06F0E:  ANDWF  x47,W
06F10:  IORWF  x46,W
06F12:  BCF    x45.0
06F14:  BTFSC  FE8.0
06F16:  BSF    x45.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (OutputType.B9 | OutputBoth.B9));
06F18:  MOVLW  00
06F1A:  BTFSC  x45.0
06F1C:  MOVLW  01
06F1E:  MOVWF  x46
06F20:  MOVLW  00
06F22:  MOVLB  D
06F24:  BTFSC  xC2.0
06F26:  MOVLW  01
06F28:  MOVLB  E
06F2A:  MOVWF  x48
06F2C:  MOVLW  00
06F2E:  MOVLB  D
06F30:  BTFSC  xC6.0
06F32:  MOVLW  01
06F34:  MOVLB  E
06F36:  IORWF  x48,W
06F38:  MOVWF  x47
06F3A:  MOVLW  00
06F3C:  MOVLB  D
06F3E:  BTFSS  xBE.0
06F40:  MOVLW  01
06F42:  MOVLB  E
06F44:  ANDWF  x47,F
06F46:  MOVLW  00
06F48:  MOVLB  D
06F4A:  BTFSC  xB2.0
06F4C:  MOVLW  01
06F4E:  MOVLB  E
06F50:  MOVWF  x4A
06F52:  MOVLW  00
06F54:  MOVLB  D
06F56:  BTFSC  xB6.0
06F58:  MOVLW  01
06F5A:  MOVLB  E
06F5C:  IORWF  x4A,W
06F5E:  ANDWF  x47,W
06F60:  IORWF  x46,W
06F62:  BCF    x45.0
06F64:  BTFSC  FE8.0
06F66:  BSF    x45.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (OutputType.B10 | OutputBoth.B10));
06F68:  MOVLW  00
06F6A:  BTFSC  x45.0
06F6C:  MOVLW  01
06F6E:  MOVWF  x46
06F70:  MOVLW  00
06F72:  MOVLB  D
06F74:  BTFSC  xC2.1
06F76:  MOVLW  01
06F78:  MOVLB  E
06F7A:  MOVWF  x48
06F7C:  MOVLW  00
06F7E:  MOVLB  D
06F80:  BTFSC  xC6.1
06F82:  MOVLW  01
06F84:  MOVLB  E
06F86:  IORWF  x48,W
06F88:  MOVWF  x47
06F8A:  MOVLW  00
06F8C:  MOVLB  D
06F8E:  BTFSS  xBE.1
06F90:  MOVLW  01
06F92:  MOVLB  E
06F94:  ANDWF  x47,F
06F96:  MOVLW  00
06F98:  MOVLB  D
06F9A:  BTFSC  xB2.1
06F9C:  MOVLW  01
06F9E:  MOVLB  E
06FA0:  MOVWF  x4A
06FA2:  MOVLW  00
06FA4:  MOVLB  D
06FA6:  BTFSC  xB6.1
06FA8:  MOVLW  01
06FAA:  MOVLB  E
06FAC:  IORWF  x4A,W
06FAE:  ANDWF  x47,W
06FB0:  IORWF  x46,W
06FB2:  BCF    x45.0
06FB4:  BTFSC  FE8.0
06FB6:  BSF    x45.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (OutputType.B11 | OutputBoth.B11));
06FB8:  MOVLW  00
06FBA:  BTFSC  x45.0
06FBC:  MOVLW  01
06FBE:  MOVWF  x46
06FC0:  MOVLW  00
06FC2:  MOVLB  D
06FC4:  BTFSC  xC2.2
06FC6:  MOVLW  01
06FC8:  MOVLB  E
06FCA:  MOVWF  x48
06FCC:  MOVLW  00
06FCE:  MOVLB  D
06FD0:  BTFSC  xC6.2
06FD2:  MOVLW  01
06FD4:  MOVLB  E
06FD6:  IORWF  x48,W
06FD8:  MOVWF  x47
06FDA:  MOVLW  00
06FDC:  MOVLB  D
06FDE:  BTFSS  xBE.2
06FE0:  MOVLW  01
06FE2:  MOVLB  E
06FE4:  ANDWF  x47,F
06FE6:  MOVLW  00
06FE8:  MOVLB  D
06FEA:  BTFSC  xB2.2
06FEC:  MOVLW  01
06FEE:  MOVLB  E
06FF0:  MOVWF  x4A
06FF2:  MOVLW  00
06FF4:  MOVLB  D
06FF6:  BTFSC  xB6.2
06FF8:  MOVLW  01
06FFA:  MOVLB  E
06FFC:  IORWF  x4A,W
06FFE:  ANDWF  x47,W
07000:  IORWF  x46,W
07002:  BCF    x45.0
07004:  BTFSC  FE8.0
07006:  BSF    x45.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (OutputType.B12 | OutputBoth.B12));
07008:  MOVLW  00
0700A:  BTFSC  x45.0
0700C:  MOVLW  01
0700E:  MOVWF  x46
07010:  MOVLW  00
07012:  MOVLB  D
07014:  BTFSC  xC2.3
07016:  MOVLW  01
07018:  MOVLB  E
0701A:  MOVWF  x48
0701C:  MOVLW  00
0701E:  MOVLB  D
07020:  BTFSC  xC6.3
07022:  MOVLW  01
07024:  MOVLB  E
07026:  IORWF  x48,W
07028:  MOVWF  x47
0702A:  MOVLW  00
0702C:  MOVLB  D
0702E:  BTFSS  xBE.3
07030:  MOVLW  01
07032:  MOVLB  E
07034:  ANDWF  x47,F
07036:  MOVLW  00
07038:  MOVLB  D
0703A:  BTFSC  xB2.3
0703C:  MOVLW  01
0703E:  MOVLB  E
07040:  MOVWF  x4A
07042:  MOVLW  00
07044:  MOVLB  D
07046:  BTFSC  xB6.3
07048:  MOVLW  01
0704A:  MOVLB  E
0704C:  IORWF  x4A,W
0704E:  ANDWF  x47,W
07050:  IORWF  x46,W
07052:  BCF    x45.0
07054:  BTFSC  FE8.0
07056:  BSF    x45.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (OutputType.B13 | OutputBoth.B13));
07058:  MOVLW  00
0705A:  BTFSC  x45.0
0705C:  MOVLW  01
0705E:  MOVWF  x46
07060:  MOVLW  00
07062:  MOVLB  D
07064:  BTFSC  xC2.4
07066:  MOVLW  01
07068:  MOVLB  E
0706A:  MOVWF  x48
0706C:  MOVLW  00
0706E:  MOVLB  D
07070:  BTFSC  xC6.4
07072:  MOVLW  01
07074:  MOVLB  E
07076:  IORWF  x48,W
07078:  MOVWF  x47
0707A:  MOVLW  00
0707C:  MOVLB  D
0707E:  BTFSS  xBE.4
07080:  MOVLW  01
07082:  MOVLB  E
07084:  ANDWF  x47,F
07086:  MOVLW  00
07088:  MOVLB  D
0708A:  BTFSC  xB2.4
0708C:  MOVLW  01
0708E:  MOVLB  E
07090:  MOVWF  x4A
07092:  MOVLW  00
07094:  MOVLB  D
07096:  BTFSC  xB6.4
07098:  MOVLW  01
0709A:  MOVLB  E
0709C:  IORWF  x4A,W
0709E:  ANDWF  x47,W
070A0:  IORWF  x46,W
070A2:  BCF    x45.0
070A4:  BTFSC  FE8.0
070A6:  BSF    x45.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (OutputType.B14 | OutputBoth.B14));
070A8:  MOVLW  00
070AA:  BTFSC  x45.0
070AC:  MOVLW  01
070AE:  MOVWF  x46
070B0:  MOVLW  00
070B2:  MOVLB  D
070B4:  BTFSC  xC2.5
070B6:  MOVLW  01
070B8:  MOVLB  E
070BA:  MOVWF  x48
070BC:  MOVLW  00
070BE:  MOVLB  D
070C0:  BTFSC  xC6.5
070C2:  MOVLW  01
070C4:  MOVLB  E
070C6:  IORWF  x48,W
070C8:  MOVWF  x47
070CA:  MOVLW  00
070CC:  MOVLB  D
070CE:  BTFSS  xBE.5
070D0:  MOVLW  01
070D2:  MOVLB  E
070D4:  ANDWF  x47,F
070D6:  MOVLW  00
070D8:  MOVLB  D
070DA:  BTFSC  xB2.5
070DC:  MOVLW  01
070DE:  MOVLB  E
070E0:  MOVWF  x4A
070E2:  MOVLW  00
070E4:  MOVLB  D
070E6:  BTFSC  xB6.5
070E8:  MOVLW  01
070EA:  MOVLB  E
070EC:  IORWF  x4A,W
070EE:  ANDWF  x47,W
070F0:  IORWF  x46,W
070F2:  BCF    x45.0
070F4:  BTFSC  FE8.0
070F6:  BSF    x45.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (OutputType.B15 | OutputBoth.B15));
070F8:  MOVLW  00
070FA:  BTFSC  x45.0
070FC:  MOVLW  01
070FE:  MOVWF  x46
07100:  MOVLW  00
07102:  MOVLB  D
07104:  BTFSC  xC2.6
07106:  MOVLW  01
07108:  MOVLB  E
0710A:  MOVWF  x48
0710C:  MOVLW  00
0710E:  MOVLB  D
07110:  BTFSC  xC6.6
07112:  MOVLW  01
07114:  MOVLB  E
07116:  IORWF  x48,W
07118:  MOVWF  x47
0711A:  MOVLW  00
0711C:  MOVLB  D
0711E:  BTFSS  xBE.6
07120:  MOVLW  01
07122:  MOVLB  E
07124:  ANDWF  x47,F
07126:  MOVLW  00
07128:  MOVLB  D
0712A:  BTFSC  xB2.6
0712C:  MOVLW  01
0712E:  MOVLB  E
07130:  MOVWF  x4A
07132:  MOVLW  00
07134:  MOVLB  D
07136:  BTFSC  xB6.6
07138:  MOVLW  01
0713A:  MOVLB  E
0713C:  IORWF  x4A,W
0713E:  ANDWF  x47,W
07140:  IORWF  x46,W
07142:  BCF    x45.0
07144:  BTFSC  FE8.0
07146:  BSF    x45.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (OutputType.B16 | OutputBoth.B16));
07148:  MOVLW  00
0714A:  BTFSC  x45.0
0714C:  MOVLW  01
0714E:  MOVWF  x46
07150:  MOVLW  00
07152:  MOVLB  D
07154:  BTFSC  xC2.7
07156:  MOVLW  01
07158:  MOVLB  E
0715A:  MOVWF  x48
0715C:  MOVLW  00
0715E:  MOVLB  D
07160:  BTFSC  xC6.7
07162:  MOVLW  01
07164:  MOVLB  E
07166:  IORWF  x48,W
07168:  MOVWF  x47
0716A:  MOVLW  00
0716C:  MOVLB  D
0716E:  BTFSS  xBE.7
07170:  MOVLW  01
07172:  MOVLB  E
07174:  ANDWF  x47,F
07176:  MOVLW  00
07178:  MOVLB  D
0717A:  BTFSC  xB2.7
0717C:  MOVLW  01
0717E:  MOVLB  E
07180:  MOVWF  x4A
07182:  MOVLW  00
07184:  MOVLB  D
07186:  BTFSC  xB6.7
07188:  MOVLW  01
0718A:  MOVLB  E
0718C:  IORWF  x4A,W
0718E:  ANDWF  x47,W
07190:  IORWF  x46,W
07192:  BCF    x45.0
07194:  BTFSC  FE8.0
07196:  BSF    x45.0
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (OutputType.B17 | OutputBoth.B17));
07198:  MOVLW  00
0719A:  BTFSC  x45.0
0719C:  MOVLW  01
0719E:  MOVWF  x46
071A0:  MOVLW  00
071A2:  MOVLB  D
071A4:  BTFSC  xC3.0
071A6:  MOVLW  01
071A8:  MOVLB  E
071AA:  MOVWF  x48
071AC:  MOVLW  00
071AE:  MOVLB  D
071B0:  BTFSC  xC7.0
071B2:  MOVLW  01
071B4:  MOVLB  E
071B6:  IORWF  x48,W
071B8:  MOVWF  x47
071BA:  MOVLW  00
071BC:  MOVLB  D
071BE:  BTFSS  xBF.0
071C0:  MOVLW  01
071C2:  MOVLB  E
071C4:  ANDWF  x47,F
071C6:  MOVLW  00
071C8:  MOVLB  D
071CA:  BTFSC  xB3.0
071CC:  MOVLW  01
071CE:  MOVLB  E
071D0:  MOVWF  x4A
071D2:  MOVLW  00
071D4:  MOVLB  D
071D6:  BTFSC  xB7.0
071D8:  MOVLW  01
071DA:  MOVLB  E
071DC:  IORWF  x4A,W
071DE:  ANDWF  x47,W
071E0:  IORWF  x46,W
071E2:  BCF    x45.0
071E4:  BTFSC  FE8.0
071E6:  BSF    x45.0
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (OutputType.B18 | OutputBoth.B18));
071E8:  MOVLW  00
071EA:  BTFSC  x45.0
071EC:  MOVLW  01
071EE:  MOVWF  x46
071F0:  MOVLW  00
071F2:  MOVLB  D
071F4:  BTFSC  xC3.1
071F6:  MOVLW  01
071F8:  MOVLB  E
071FA:  MOVWF  x48
071FC:  MOVLW  00
071FE:  MOVLB  D
07200:  BTFSC  xC7.1
07202:  MOVLW  01
07204:  MOVLB  E
07206:  IORWF  x48,W
07208:  MOVWF  x47
0720A:  MOVLW  00
0720C:  MOVLB  D
0720E:  BTFSS  xBF.1
07210:  MOVLW  01
07212:  MOVLB  E
07214:  ANDWF  x47,F
07216:  MOVLW  00
07218:  MOVLB  D
0721A:  BTFSC  xB3.1
0721C:  MOVLW  01
0721E:  MOVLB  E
07220:  MOVWF  x4A
07222:  MOVLW  00
07224:  MOVLB  D
07226:  BTFSC  xB7.1
07228:  MOVLW  01
0722A:  MOVLB  E
0722C:  IORWF  x4A,W
0722E:  ANDWF  x47,W
07230:  IORWF  x46,W
07232:  BCF    x45.0
07234:  BTFSC  FE8.0
07236:  BSF    x45.0
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (OutputType.B19 | OutputBoth.B19));
07238:  MOVLW  00
0723A:  BTFSC  x45.0
0723C:  MOVLW  01
0723E:  MOVWF  x46
07240:  MOVLW  00
07242:  MOVLB  D
07244:  BTFSC  xC3.2
07246:  MOVLW  01
07248:  MOVLB  E
0724A:  MOVWF  x48
0724C:  MOVLW  00
0724E:  MOVLB  D
07250:  BTFSC  xC7.2
07252:  MOVLW  01
07254:  MOVLB  E
07256:  IORWF  x48,W
07258:  MOVWF  x47
0725A:  MOVLW  00
0725C:  MOVLB  D
0725E:  BTFSS  xBF.2
07260:  MOVLW  01
07262:  MOVLB  E
07264:  ANDWF  x47,F
07266:  MOVLW  00
07268:  MOVLB  D
0726A:  BTFSC  xB3.2
0726C:  MOVLW  01
0726E:  MOVLB  E
07270:  MOVWF  x4A
07272:  MOVLW  00
07274:  MOVLB  D
07276:  BTFSC  xB7.2
07278:  MOVLW  01
0727A:  MOVLB  E
0727C:  IORWF  x4A,W
0727E:  ANDWF  x47,W
07280:  IORWF  x46,W
07282:  BCF    x45.0
07284:  BTFSC  FE8.0
07286:  BSF    x45.0
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (OutputType.B20 | OutputBoth.B20));
07288:  MOVLW  00
0728A:  BTFSC  x45.0
0728C:  MOVLW  01
0728E:  MOVWF  x46
07290:  MOVLW  00
07292:  MOVLB  D
07294:  BTFSC  xC3.3
07296:  MOVLW  01
07298:  MOVLB  E
0729A:  MOVWF  x48
0729C:  MOVLW  00
0729E:  MOVLB  D
072A0:  BTFSC  xC7.3
072A2:  MOVLW  01
072A4:  MOVLB  E
072A6:  IORWF  x48,W
072A8:  MOVWF  x47
072AA:  MOVLW  00
072AC:  MOVLB  D
072AE:  BTFSS  xBF.3
072B0:  MOVLW  01
072B2:  MOVLB  E
072B4:  ANDWF  x47,F
072B6:  MOVLW  00
072B8:  MOVLB  D
072BA:  BTFSC  xB3.3
072BC:  MOVLW  01
072BE:  MOVLB  E
072C0:  MOVWF  x4A
072C2:  MOVLW  00
072C4:  MOVLB  D
072C6:  BTFSC  xB7.3
072C8:  MOVLW  01
072CA:  MOVLB  E
072CC:  IORWF  x4A,W
072CE:  ANDWF  x47,W
072D0:  IORWF  x46,W
072D2:  BCF    x45.0
072D4:  BTFSC  FE8.0
072D6:  BSF    x45.0
....................      
....................    }
072D8:  BRA    7918
....................    else if(DatType == 0x02)             //Bell
072DA:  MOVF   x44,W
072DC:  SUBLW  02
072DE:  BTFSS  FD8.2
072E0:  BRA    7918
....................    {
....................       check = (In.B1 | In2.B1) & ~Ack.B1 & (~OutputType.B1 | OutputBoth.B1);
072E2:  MOVLW  00
072E4:  MOVLB  D
072E6:  BTFSC  xC1.0
072E8:  MOVLW  01
072EA:  MOVLB  E
072EC:  MOVWF  x47
072EE:  MOVLW  00
072F0:  MOVLB  D
072F2:  BTFSC  xC5.0
072F4:  MOVLW  01
072F6:  MOVLB  E
072F8:  IORWF  x47,W
072FA:  MOVWF  x46
072FC:  MOVLW  00
072FE:  MOVLB  D
07300:  BTFSS  xBD.0
07302:  MOVLW  01
07304:  MOVLB  E
07306:  ANDWF  x46,F
07308:  MOVLW  00
0730A:  MOVLB  D
0730C:  BTFSS  xB1.0
0730E:  MOVLW  01
07310:  MOVLB  E
07312:  MOVWF  x49
07314:  MOVLW  00
07316:  MOVLB  D
07318:  BTFSC  xB5.0
0731A:  MOVLW  01
0731C:  MOVLB  E
0731E:  IORWF  x49,W
07320:  ANDWF  x46,W
07322:  BCF    x45.0
07324:  BTFSC  FE8.0
07326:  BSF    x45.0
....................       check = check | ((In.B2 | In2.B2) & ~Ack.B2 & (~OutputType.B2 | OutputBoth.B2));
07328:  MOVLW  00
0732A:  BTFSC  x45.0
0732C:  MOVLW  01
0732E:  MOVWF  x46
07330:  MOVLW  00
07332:  MOVLB  D
07334:  BTFSC  xC1.1
07336:  MOVLW  01
07338:  MOVLB  E
0733A:  MOVWF  x48
0733C:  MOVLW  00
0733E:  MOVLB  D
07340:  BTFSC  xC5.1
07342:  MOVLW  01
07344:  MOVLB  E
07346:  IORWF  x48,W
07348:  MOVWF  x47
0734A:  MOVLW  00
0734C:  MOVLB  D
0734E:  BTFSS  xBD.1
07350:  MOVLW  01
07352:  MOVLB  E
07354:  ANDWF  x47,F
07356:  MOVLW  00
07358:  MOVLB  D
0735A:  BTFSS  xB1.1
0735C:  MOVLW  01
0735E:  MOVLB  E
07360:  MOVWF  x4A
07362:  MOVLW  00
07364:  MOVLB  D
07366:  BTFSC  xB5.1
07368:  MOVLW  01
0736A:  MOVLB  E
0736C:  IORWF  x4A,W
0736E:  ANDWF  x47,W
07370:  IORWF  x46,W
07372:  BCF    x45.0
07374:  BTFSC  FE8.0
07376:  BSF    x45.0
....................       check = check | ((In.B3 | In2.B3) & ~Ack.B3 & (~OutputType.B3 | OutputBoth.B3));
07378:  MOVLW  00
0737A:  BTFSC  x45.0
0737C:  MOVLW  01
0737E:  MOVWF  x46
07380:  MOVLW  00
07382:  MOVLB  D
07384:  BTFSC  xC1.2
07386:  MOVLW  01
07388:  MOVLB  E
0738A:  MOVWF  x48
0738C:  MOVLW  00
0738E:  MOVLB  D
07390:  BTFSC  xC5.2
07392:  MOVLW  01
07394:  MOVLB  E
07396:  IORWF  x48,W
07398:  MOVWF  x47
0739A:  MOVLW  00
0739C:  MOVLB  D
0739E:  BTFSS  xBD.2
073A0:  MOVLW  01
073A2:  MOVLB  E
073A4:  ANDWF  x47,F
073A6:  MOVLW  00
073A8:  MOVLB  D
073AA:  BTFSS  xB1.2
073AC:  MOVLW  01
073AE:  MOVLB  E
073B0:  MOVWF  x4A
073B2:  MOVLW  00
073B4:  MOVLB  D
073B6:  BTFSC  xB5.2
073B8:  MOVLW  01
073BA:  MOVLB  E
073BC:  IORWF  x4A,W
073BE:  ANDWF  x47,W
073C0:  IORWF  x46,W
073C2:  BCF    x45.0
073C4:  BTFSC  FE8.0
073C6:  BSF    x45.0
....................       check = check | ((In.B4 | In2.B4) & ~Ack.B4 & (~OutputType.B4 | OutputBoth.B4));
073C8:  MOVLW  00
073CA:  BTFSC  x45.0
073CC:  MOVLW  01
073CE:  MOVWF  x46
073D0:  MOVLW  00
073D2:  MOVLB  D
073D4:  BTFSC  xC1.3
073D6:  MOVLW  01
073D8:  MOVLB  E
073DA:  MOVWF  x48
073DC:  MOVLW  00
073DE:  MOVLB  D
073E0:  BTFSC  xC5.3
073E2:  MOVLW  01
073E4:  MOVLB  E
073E6:  IORWF  x48,W
073E8:  MOVWF  x47
073EA:  MOVLW  00
073EC:  MOVLB  D
073EE:  BTFSS  xBD.3
073F0:  MOVLW  01
073F2:  MOVLB  E
073F4:  ANDWF  x47,F
073F6:  MOVLW  00
073F8:  MOVLB  D
073FA:  BTFSS  xB1.3
073FC:  MOVLW  01
073FE:  MOVLB  E
07400:  MOVWF  x4A
07402:  MOVLW  00
07404:  MOVLB  D
07406:  BTFSC  xB5.3
07408:  MOVLW  01
0740A:  MOVLB  E
0740C:  IORWF  x4A,W
0740E:  ANDWF  x47,W
07410:  IORWF  x46,W
07412:  BCF    x45.0
07414:  BTFSC  FE8.0
07416:  BSF    x45.0
....................       check = check | ((In.B5 | In2.B5) & ~Ack.B5 & (~OutputType.B5 | OutputBoth.B5));
07418:  MOVLW  00
0741A:  BTFSC  x45.0
0741C:  MOVLW  01
0741E:  MOVWF  x46
07420:  MOVLW  00
07422:  MOVLB  D
07424:  BTFSC  xC1.4
07426:  MOVLW  01
07428:  MOVLB  E
0742A:  MOVWF  x48
0742C:  MOVLW  00
0742E:  MOVLB  D
07430:  BTFSC  xC5.4
07432:  MOVLW  01
07434:  MOVLB  E
07436:  IORWF  x48,W
07438:  MOVWF  x47
0743A:  MOVLW  00
0743C:  MOVLB  D
0743E:  BTFSS  xBD.4
07440:  MOVLW  01
07442:  MOVLB  E
07444:  ANDWF  x47,F
07446:  MOVLW  00
07448:  MOVLB  D
0744A:  BTFSS  xB1.4
0744C:  MOVLW  01
0744E:  MOVLB  E
07450:  MOVWF  x4A
07452:  MOVLW  00
07454:  MOVLB  D
07456:  BTFSC  xB5.4
07458:  MOVLW  01
0745A:  MOVLB  E
0745C:  IORWF  x4A,W
0745E:  ANDWF  x47,W
07460:  IORWF  x46,W
07462:  BCF    x45.0
07464:  BTFSC  FE8.0
07466:  BSF    x45.0
....................       check = check | ((In.B6 | In2.B6) & ~Ack.B6 & (~OutputType.B6 | OutputBoth.B6));
07468:  MOVLW  00
0746A:  BTFSC  x45.0
0746C:  MOVLW  01
0746E:  MOVWF  x46
07470:  MOVLW  00
07472:  MOVLB  D
07474:  BTFSC  xC1.5
07476:  MOVLW  01
07478:  MOVLB  E
0747A:  MOVWF  x48
0747C:  MOVLW  00
0747E:  MOVLB  D
07480:  BTFSC  xC5.5
07482:  MOVLW  01
07484:  MOVLB  E
07486:  IORWF  x48,W
07488:  MOVWF  x47
0748A:  MOVLW  00
0748C:  MOVLB  D
0748E:  BTFSS  xBD.5
07490:  MOVLW  01
07492:  MOVLB  E
07494:  ANDWF  x47,F
07496:  MOVLW  00
07498:  MOVLB  D
0749A:  BTFSS  xB1.5
0749C:  MOVLW  01
0749E:  MOVLB  E
074A0:  MOVWF  x4A
074A2:  MOVLW  00
074A4:  MOVLB  D
074A6:  BTFSC  xB5.5
074A8:  MOVLW  01
074AA:  MOVLB  E
074AC:  IORWF  x4A,W
074AE:  ANDWF  x47,W
074B0:  IORWF  x46,W
074B2:  BCF    x45.0
074B4:  BTFSC  FE8.0
074B6:  BSF    x45.0
....................       check = check | ((In.B7 | In2.B7) & ~Ack.B7 & (~OutputType.B7 | OutputBoth.B7));
074B8:  MOVLW  00
074BA:  BTFSC  x45.0
074BC:  MOVLW  01
074BE:  MOVWF  x46
074C0:  MOVLW  00
074C2:  MOVLB  D
074C4:  BTFSC  xC1.6
074C6:  MOVLW  01
074C8:  MOVLB  E
074CA:  MOVWF  x48
074CC:  MOVLW  00
074CE:  MOVLB  D
074D0:  BTFSC  xC5.6
074D2:  MOVLW  01
074D4:  MOVLB  E
074D6:  IORWF  x48,W
074D8:  MOVWF  x47
074DA:  MOVLW  00
074DC:  MOVLB  D
074DE:  BTFSS  xBD.6
074E0:  MOVLW  01
074E2:  MOVLB  E
074E4:  ANDWF  x47,F
074E6:  MOVLW  00
074E8:  MOVLB  D
074EA:  BTFSS  xB1.6
074EC:  MOVLW  01
074EE:  MOVLB  E
074F0:  MOVWF  x4A
074F2:  MOVLW  00
074F4:  MOVLB  D
074F6:  BTFSC  xB5.6
074F8:  MOVLW  01
074FA:  MOVLB  E
074FC:  IORWF  x4A,W
074FE:  ANDWF  x47,W
07500:  IORWF  x46,W
07502:  BCF    x45.0
07504:  BTFSC  FE8.0
07506:  BSF    x45.0
....................       check = check | ((In.B8 | In2.B8) & ~Ack.B8 & (~OutputType.B8 | OutputBoth.B8));
07508:  MOVLW  00
0750A:  BTFSC  x45.0
0750C:  MOVLW  01
0750E:  MOVWF  x46
07510:  MOVLW  00
07512:  MOVLB  D
07514:  BTFSC  xC1.7
07516:  MOVLW  01
07518:  MOVLB  E
0751A:  MOVWF  x48
0751C:  MOVLW  00
0751E:  MOVLB  D
07520:  BTFSC  xC5.7
07522:  MOVLW  01
07524:  MOVLB  E
07526:  IORWF  x48,W
07528:  MOVWF  x47
0752A:  MOVLW  00
0752C:  MOVLB  D
0752E:  BTFSS  xBD.7
07530:  MOVLW  01
07532:  MOVLB  E
07534:  ANDWF  x47,F
07536:  MOVLW  00
07538:  MOVLB  D
0753A:  BTFSS  xB1.7
0753C:  MOVLW  01
0753E:  MOVLB  E
07540:  MOVWF  x4A
07542:  MOVLW  00
07544:  MOVLB  D
07546:  BTFSC  xB5.7
07548:  MOVLW  01
0754A:  MOVLB  E
0754C:  IORWF  x4A,W
0754E:  ANDWF  x47,W
07550:  IORWF  x46,W
07552:  BCF    x45.0
07554:  BTFSC  FE8.0
07556:  BSF    x45.0
....................       check = check | ((In.B9 | In2.B9) & ~Ack.B9 & (~OutputType.B9 | OutputBoth.B9));
07558:  MOVLW  00
0755A:  BTFSC  x45.0
0755C:  MOVLW  01
0755E:  MOVWF  x46
07560:  MOVLW  00
07562:  MOVLB  D
07564:  BTFSC  xC2.0
07566:  MOVLW  01
07568:  MOVLB  E
0756A:  MOVWF  x48
0756C:  MOVLW  00
0756E:  MOVLB  D
07570:  BTFSC  xC6.0
07572:  MOVLW  01
07574:  MOVLB  E
07576:  IORWF  x48,W
07578:  MOVWF  x47
0757A:  MOVLW  00
0757C:  MOVLB  D
0757E:  BTFSS  xBE.0
07580:  MOVLW  01
07582:  MOVLB  E
07584:  ANDWF  x47,F
07586:  MOVLW  00
07588:  MOVLB  D
0758A:  BTFSS  xB2.0
0758C:  MOVLW  01
0758E:  MOVLB  E
07590:  MOVWF  x4A
07592:  MOVLW  00
07594:  MOVLB  D
07596:  BTFSC  xB6.0
07598:  MOVLW  01
0759A:  MOVLB  E
0759C:  IORWF  x4A,W
0759E:  ANDWF  x47,W
075A0:  IORWF  x46,W
075A2:  BCF    x45.0
075A4:  BTFSC  FE8.0
075A6:  BSF    x45.0
....................       check = check | ((In.B10 | In2.B10) & ~Ack.B10 & (~OutputType.B10 | OutputBoth.B10));
075A8:  MOVLW  00
075AA:  BTFSC  x45.0
075AC:  MOVLW  01
075AE:  MOVWF  x46
075B0:  MOVLW  00
075B2:  MOVLB  D
075B4:  BTFSC  xC2.1
075B6:  MOVLW  01
075B8:  MOVLB  E
075BA:  MOVWF  x48
075BC:  MOVLW  00
075BE:  MOVLB  D
075C0:  BTFSC  xC6.1
075C2:  MOVLW  01
075C4:  MOVLB  E
075C6:  IORWF  x48,W
075C8:  MOVWF  x47
075CA:  MOVLW  00
075CC:  MOVLB  D
075CE:  BTFSS  xBE.1
075D0:  MOVLW  01
075D2:  MOVLB  E
075D4:  ANDWF  x47,F
075D6:  MOVLW  00
075D8:  MOVLB  D
075DA:  BTFSS  xB2.1
075DC:  MOVLW  01
075DE:  MOVLB  E
075E0:  MOVWF  x4A
075E2:  MOVLW  00
075E4:  MOVLB  D
075E6:  BTFSC  xB6.1
075E8:  MOVLW  01
075EA:  MOVLB  E
075EC:  IORWF  x4A,W
075EE:  ANDWF  x47,W
075F0:  IORWF  x46,W
075F2:  BCF    x45.0
075F4:  BTFSC  FE8.0
075F6:  BSF    x45.0
....................       check = check | ((In.B11 | In2.B11) & ~Ack.B11 & (~OutputType.B11 | OutputBoth.B11));
075F8:  MOVLW  00
075FA:  BTFSC  x45.0
075FC:  MOVLW  01
075FE:  MOVWF  x46
07600:  MOVLW  00
07602:  MOVLB  D
07604:  BTFSC  xC2.2
07606:  MOVLW  01
07608:  MOVLB  E
0760A:  MOVWF  x48
0760C:  MOVLW  00
0760E:  MOVLB  D
07610:  BTFSC  xC6.2
07612:  MOVLW  01
07614:  MOVLB  E
07616:  IORWF  x48,W
07618:  MOVWF  x47
0761A:  MOVLW  00
0761C:  MOVLB  D
0761E:  BTFSS  xBE.2
07620:  MOVLW  01
07622:  MOVLB  E
07624:  ANDWF  x47,F
07626:  MOVLW  00
07628:  MOVLB  D
0762A:  BTFSS  xB2.2
0762C:  MOVLW  01
0762E:  MOVLB  E
07630:  MOVWF  x4A
07632:  MOVLW  00
07634:  MOVLB  D
07636:  BTFSC  xB6.2
07638:  MOVLW  01
0763A:  MOVLB  E
0763C:  IORWF  x4A,W
0763E:  ANDWF  x47,W
07640:  IORWF  x46,W
07642:  BCF    x45.0
07644:  BTFSC  FE8.0
07646:  BSF    x45.0
....................       check = check | ((In.B12 | In2.B12) & ~Ack.B12 & (~OutputType.B12 | OutputBoth.B12));
07648:  MOVLW  00
0764A:  BTFSC  x45.0
0764C:  MOVLW  01
0764E:  MOVWF  x46
07650:  MOVLW  00
07652:  MOVLB  D
07654:  BTFSC  xC2.3
07656:  MOVLW  01
07658:  MOVLB  E
0765A:  MOVWF  x48
0765C:  MOVLW  00
0765E:  MOVLB  D
07660:  BTFSC  xC6.3
07662:  MOVLW  01
07664:  MOVLB  E
07666:  IORWF  x48,W
07668:  MOVWF  x47
0766A:  MOVLW  00
0766C:  MOVLB  D
0766E:  BTFSS  xBE.3
07670:  MOVLW  01
07672:  MOVLB  E
07674:  ANDWF  x47,F
07676:  MOVLW  00
07678:  MOVLB  D
0767A:  BTFSS  xB2.3
0767C:  MOVLW  01
0767E:  MOVLB  E
07680:  MOVWF  x4A
07682:  MOVLW  00
07684:  MOVLB  D
07686:  BTFSC  xB6.3
07688:  MOVLW  01
0768A:  MOVLB  E
0768C:  IORWF  x4A,W
0768E:  ANDWF  x47,W
07690:  IORWF  x46,W
07692:  BCF    x45.0
07694:  BTFSC  FE8.0
07696:  BSF    x45.0
....................       check = check | ((In.B13 | In2.B13) & ~Ack.B13 & (~OutputType.B13 | OutputBoth.B13));
07698:  MOVLW  00
0769A:  BTFSC  x45.0
0769C:  MOVLW  01
0769E:  MOVWF  x46
076A0:  MOVLW  00
076A2:  MOVLB  D
076A4:  BTFSC  xC2.4
076A6:  MOVLW  01
076A8:  MOVLB  E
076AA:  MOVWF  x48
076AC:  MOVLW  00
076AE:  MOVLB  D
076B0:  BTFSC  xC6.4
076B2:  MOVLW  01
076B4:  MOVLB  E
076B6:  IORWF  x48,W
076B8:  MOVWF  x47
076BA:  MOVLW  00
076BC:  MOVLB  D
076BE:  BTFSS  xBE.4
076C0:  MOVLW  01
076C2:  MOVLB  E
076C4:  ANDWF  x47,F
076C6:  MOVLW  00
076C8:  MOVLB  D
076CA:  BTFSS  xB2.4
076CC:  MOVLW  01
076CE:  MOVLB  E
076D0:  MOVWF  x4A
076D2:  MOVLW  00
076D4:  MOVLB  D
076D6:  BTFSC  xB6.4
076D8:  MOVLW  01
076DA:  MOVLB  E
076DC:  IORWF  x4A,W
076DE:  ANDWF  x47,W
076E0:  IORWF  x46,W
076E2:  BCF    x45.0
076E4:  BTFSC  FE8.0
076E6:  BSF    x45.0
....................       check = check | ((In.B14 | In2.B14) & ~Ack.B14 & (~OutputType.B14 | OutputBoth.B14));
076E8:  MOVLW  00
076EA:  BTFSC  x45.0
076EC:  MOVLW  01
076EE:  MOVWF  x46
076F0:  MOVLW  00
076F2:  MOVLB  D
076F4:  BTFSC  xC2.5
076F6:  MOVLW  01
076F8:  MOVLB  E
076FA:  MOVWF  x48
076FC:  MOVLW  00
076FE:  MOVLB  D
07700:  BTFSC  xC6.5
07702:  MOVLW  01
07704:  MOVLB  E
07706:  IORWF  x48,W
07708:  MOVWF  x47
0770A:  MOVLW  00
0770C:  MOVLB  D
0770E:  BTFSS  xBE.5
07710:  MOVLW  01
07712:  MOVLB  E
07714:  ANDWF  x47,F
07716:  MOVLW  00
07718:  MOVLB  D
0771A:  BTFSS  xB2.5
0771C:  MOVLW  01
0771E:  MOVLB  E
07720:  MOVWF  x4A
07722:  MOVLW  00
07724:  MOVLB  D
07726:  BTFSC  xB6.5
07728:  MOVLW  01
0772A:  MOVLB  E
0772C:  IORWF  x4A,W
0772E:  ANDWF  x47,W
07730:  IORWF  x46,W
07732:  BCF    x45.0
07734:  BTFSC  FE8.0
07736:  BSF    x45.0
....................       check = check | ((In.B15 | In2.B15) & ~Ack.B15 & (~OutputType.B15 | OutputBoth.B15));
07738:  MOVLW  00
0773A:  BTFSC  x45.0
0773C:  MOVLW  01
0773E:  MOVWF  x46
07740:  MOVLW  00
07742:  MOVLB  D
07744:  BTFSC  xC2.6
07746:  MOVLW  01
07748:  MOVLB  E
0774A:  MOVWF  x48
0774C:  MOVLW  00
0774E:  MOVLB  D
07750:  BTFSC  xC6.6
07752:  MOVLW  01
07754:  MOVLB  E
07756:  IORWF  x48,W
07758:  MOVWF  x47
0775A:  MOVLW  00
0775C:  MOVLB  D
0775E:  BTFSS  xBE.6
07760:  MOVLW  01
07762:  MOVLB  E
07764:  ANDWF  x47,F
07766:  MOVLW  00
07768:  MOVLB  D
0776A:  BTFSS  xB2.6
0776C:  MOVLW  01
0776E:  MOVLB  E
07770:  MOVWF  x4A
07772:  MOVLW  00
07774:  MOVLB  D
07776:  BTFSC  xB6.6
07778:  MOVLW  01
0777A:  MOVLB  E
0777C:  IORWF  x4A,W
0777E:  ANDWF  x47,W
07780:  IORWF  x46,W
07782:  BCF    x45.0
07784:  BTFSC  FE8.0
07786:  BSF    x45.0
....................       check = check | ((In.B16 | In2.B16) & ~Ack.B16 & (~OutputType.B16 | OutputBoth.B16));
07788:  MOVLW  00
0778A:  BTFSC  x45.0
0778C:  MOVLW  01
0778E:  MOVWF  x46
07790:  MOVLW  00
07792:  MOVLB  D
07794:  BTFSC  xC2.7
07796:  MOVLW  01
07798:  MOVLB  E
0779A:  MOVWF  x48
0779C:  MOVLW  00
0779E:  MOVLB  D
077A0:  BTFSC  xC6.7
077A2:  MOVLW  01
077A4:  MOVLB  E
077A6:  IORWF  x48,W
077A8:  MOVWF  x47
077AA:  MOVLW  00
077AC:  MOVLB  D
077AE:  BTFSS  xBE.7
077B0:  MOVLW  01
077B2:  MOVLB  E
077B4:  ANDWF  x47,F
077B6:  MOVLW  00
077B8:  MOVLB  D
077BA:  BTFSS  xB2.7
077BC:  MOVLW  01
077BE:  MOVLB  E
077C0:  MOVWF  x4A
077C2:  MOVLW  00
077C4:  MOVLB  D
077C6:  BTFSC  xB6.7
077C8:  MOVLW  01
077CA:  MOVLB  E
077CC:  IORWF  x4A,W
077CE:  ANDWF  x47,W
077D0:  IORWF  x46,W
077D2:  BCF    x45.0
077D4:  BTFSC  FE8.0
077D6:  BSF    x45.0
....................       check = check | ((In.B17 | In2.B17) & ~Ack.B17 & (~OutputType.B17 | OutputBoth.B17));
077D8:  MOVLW  00
077DA:  BTFSC  x45.0
077DC:  MOVLW  01
077DE:  MOVWF  x46
077E0:  MOVLW  00
077E2:  MOVLB  D
077E4:  BTFSC  xC3.0
077E6:  MOVLW  01
077E8:  MOVLB  E
077EA:  MOVWF  x48
077EC:  MOVLW  00
077EE:  MOVLB  D
077F0:  BTFSC  xC7.0
077F2:  MOVLW  01
077F4:  MOVLB  E
077F6:  IORWF  x48,W
077F8:  MOVWF  x47
077FA:  MOVLW  00
077FC:  MOVLB  D
077FE:  BTFSS  xBF.0
07800:  MOVLW  01
07802:  MOVLB  E
07804:  ANDWF  x47,F
07806:  MOVLW  00
07808:  MOVLB  D
0780A:  BTFSS  xB3.0
0780C:  MOVLW  01
0780E:  MOVLB  E
07810:  MOVWF  x4A
07812:  MOVLW  00
07814:  MOVLB  D
07816:  BTFSC  xB7.0
07818:  MOVLW  01
0781A:  MOVLB  E
0781C:  IORWF  x4A,W
0781E:  ANDWF  x47,W
07820:  IORWF  x46,W
07822:  BCF    x45.0
07824:  BTFSC  FE8.0
07826:  BSF    x45.0
....................       check = check | ((In.B18 | In2.B18) & ~Ack.B18 & (~OutputType.B18 | OutputBoth.B18));
07828:  MOVLW  00
0782A:  BTFSC  x45.0
0782C:  MOVLW  01
0782E:  MOVWF  x46
07830:  MOVLW  00
07832:  MOVLB  D
07834:  BTFSC  xC3.1
07836:  MOVLW  01
07838:  MOVLB  E
0783A:  MOVWF  x48
0783C:  MOVLW  00
0783E:  MOVLB  D
07840:  BTFSC  xC7.1
07842:  MOVLW  01
07844:  MOVLB  E
07846:  IORWF  x48,W
07848:  MOVWF  x47
0784A:  MOVLW  00
0784C:  MOVLB  D
0784E:  BTFSS  xBF.1
07850:  MOVLW  01
07852:  MOVLB  E
07854:  ANDWF  x47,F
07856:  MOVLW  00
07858:  MOVLB  D
0785A:  BTFSS  xB3.1
0785C:  MOVLW  01
0785E:  MOVLB  E
07860:  MOVWF  x4A
07862:  MOVLW  00
07864:  MOVLB  D
07866:  BTFSC  xB7.1
07868:  MOVLW  01
0786A:  MOVLB  E
0786C:  IORWF  x4A,W
0786E:  ANDWF  x47,W
07870:  IORWF  x46,W
07872:  BCF    x45.0
07874:  BTFSC  FE8.0
07876:  BSF    x45.0
....................       check = check | ((In.B19 | In2.B19) & ~Ack.B19 & (~OutputType.B19 | OutputBoth.B19));
07878:  MOVLW  00
0787A:  BTFSC  x45.0
0787C:  MOVLW  01
0787E:  MOVWF  x46
07880:  MOVLW  00
07882:  MOVLB  D
07884:  BTFSC  xC3.2
07886:  MOVLW  01
07888:  MOVLB  E
0788A:  MOVWF  x48
0788C:  MOVLW  00
0788E:  MOVLB  D
07890:  BTFSC  xC7.2
07892:  MOVLW  01
07894:  MOVLB  E
07896:  IORWF  x48,W
07898:  MOVWF  x47
0789A:  MOVLW  00
0789C:  MOVLB  D
0789E:  BTFSS  xBF.2
078A0:  MOVLW  01
078A2:  MOVLB  E
078A4:  ANDWF  x47,F
078A6:  MOVLW  00
078A8:  MOVLB  D
078AA:  BTFSS  xB3.2
078AC:  MOVLW  01
078AE:  MOVLB  E
078B0:  MOVWF  x4A
078B2:  MOVLW  00
078B4:  MOVLB  D
078B6:  BTFSC  xB7.2
078B8:  MOVLW  01
078BA:  MOVLB  E
078BC:  IORWF  x4A,W
078BE:  ANDWF  x47,W
078C0:  IORWF  x46,W
078C2:  BCF    x45.0
078C4:  BTFSC  FE8.0
078C6:  BSF    x45.0
....................       check = check | ((In.B20 | In2.B20) & ~Ack.B20 & (~OutputType.B20 | OutputBoth.B20));
078C8:  MOVLW  00
078CA:  BTFSC  x45.0
078CC:  MOVLW  01
078CE:  MOVWF  x46
078D0:  MOVLW  00
078D2:  MOVLB  D
078D4:  BTFSC  xC3.3
078D6:  MOVLW  01
078D8:  MOVLB  E
078DA:  MOVWF  x48
078DC:  MOVLW  00
078DE:  MOVLB  D
078E0:  BTFSC  xC7.3
078E2:  MOVLW  01
078E4:  MOVLB  E
078E6:  IORWF  x48,W
078E8:  MOVWF  x47
078EA:  MOVLW  00
078EC:  MOVLB  D
078EE:  BTFSS  xBF.3
078F0:  MOVLW  01
078F2:  MOVLB  E
078F4:  ANDWF  x47,F
078F6:  MOVLW  00
078F8:  MOVLB  D
078FA:  BTFSS  xB3.3
078FC:  MOVLW  01
078FE:  MOVLB  E
07900:  MOVWF  x4A
07902:  MOVLW  00
07904:  MOVLB  D
07906:  BTFSC  xB7.3
07908:  MOVLW  01
0790A:  MOVLB  E
0790C:  IORWF  x4A,W
0790E:  ANDWF  x47,W
07910:  IORWF  x46,W
07912:  BCF    x45.0
07914:  BTFSC  FE8.0
07916:  BSF    x45.0
.................... 
....................    }
....................    return(check);
07918:  MOVLW  00
0791A:  BTFSC  x45.0
0791C:  MOVLW  01
0791E:  MOVWF  01
07920:  MOVLB  0
07922:  RETURN 0
.................... }
.................... 
.................... 
.................... ///////////////////////////////////////////////////////////////////////////////////////////
.................... //////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... 
.................... void main()
*
0C4CC:  CLRF   FF8
0C4CE:  BCF    FD0.7
0C4D0:  BSF    07.7
0C4D2:  MOVLW  70
0C4D4:  MOVWF  FD3
0C4D6:  BCF    F9B.6
0C4D8:  BCF    F9B.7
0C4DA:  BSF    FB8.3
0C4DC:  MOVLW  A0
0C4DE:  MOVWF  FAF
0C4E0:  MOVLW  01
0C4E2:  MOVWF  FB0
0C4E4:  MOVLW  A6
0C4E6:  MOVWF  FAC
0C4E8:  MOVLW  90
0C4EA:  MOVWF  FAB
0C4EC:  BCF    F93.0
0C4EE:  BSF    F8A.0
0C4F0:  CLRF   19
0C4F2:  BCF    1A.0
0C4F4:  MOVLW  19
0C4F6:  MOVWF  1B
0C4F8:  BCF    1A.1
0C4FA:  MOVLW  64
0C4FC:  MOVWF  1C
0C4FE:  CLRF   1D
0C500:  BCF    1A.2
0C502:  BCF    1A.3
0C504:  BCF    1A.4
0C506:  CLRF   2E
0C508:  BCF    1A.5
0C50A:  CLRF   2F
0C50C:  BCF    1A.6
0C50E:  BCF    1A.7
0C510:  BCF    30.0
0C512:  BCF    30.1
0C514:  CLRF   31
0C516:  BCF    30.2
0C518:  BCF    30.3
0C51A:  BCF    30.4
0C51C:  MOVLW  11
0C51E:  MOVWF  58
0C520:  MOVLW  12
0C522:  MOVWF  59
0C524:  MOVLW  13
0C526:  MOVWF  5A
0C528:  MOVLW  14
0C52A:  MOVWF  5B
0C52C:  MOVLW  16
0C52E:  MOVWF  5C
0C530:  MOVLW  17
0C532:  MOVWF  5D
0C534:  MOVLW  18
0C536:  MOVWF  5E
0C538:  MOVLW  19
0C53A:  MOVWF  5F
0C53C:  MOVLW  20
0C53E:  MOVWF  x60
0C540:  BCF    30.5
0C542:  CLRF   x63
0C544:  MOVLW  01
0C546:  MOVLB  6
0C548:  MOVWF  x67
0C54A:  MOVLW  F4
0C54C:  MOVWF  x66
0C54E:  CLRF   x69
0C550:  CLRF   x68
0C552:  CLRF   x6B
0C554:  CLRF   x6A
0C556:  CLRF   x6C
0C558:  MOVLB  A
0C55A:  CLRF   x70
0C55C:  CLRF   x6F
0C55E:  CLRF   x71
0C560:  MOVLB  E
0C562:  CLRF   x37
0C564:  CLRF   x36
0C566:  MOVLB  F
0C568:  CLRF   x38
0C56A:  CLRF   x39
0C56C:  CLRF   x3A
0C56E:  CLRF   F77
0C570:  CLRF   F78
0C572:  CLRF   F79
0C574:  MOVLB  E
0C576:  CLRF   x38
.................... {  
....................    delay_ms(50);
0C578:  MOVLW  32
0C57A:  MOVWF  x45
0C57C:  MOVLB  0
0C57E:  CALL   0A24
....................    output_bit(Pled,0);   //power on watchdog signal
0C582:  BCF    F8A.5
0C584:  BCF    F93.5
....................    
....................    //jj
....................    //setup_adc_ports(NO_ANALOGS|VSS_VDD);
....................    //setup_adc(ADC_OFF|ADC_TAD_MUL_0);
....................    
....................    //setup_spi(FALSE);
....................    
....................    setup_timer_0(RTCC_INTERNAL);
0C586:  MOVLW  80
0C588:  MOVWF  FD5
....................    //setup_timer_1(T1_DISABLED);
....................    setup_timer_2(T2_DIV_BY_16,196,16);         //10ms
0C58A:  MOVLW  78
0C58C:  IORLW  06
0C58E:  MOVWF  FBA
0C590:  MOVLW  C4
0C592:  MOVWF  FBB
....................    //setup_timer_1(T1_INTERNAL|T1_DIV_BY_8);    //104ms
....................    //setup_timer_3(T3_DISABLED|T3_DIV_BY_1);
....................    //setup_comparator(NC_NC_NC_NC);
....................    //setup_vref(FALSE);
....................    // enable_interrupts(INT_TIMER1);
....................    enable_interrupts(INT_TIMER2);
0C594:  BSF    F9D.1
....................    enable_interrupts(INT_RDA);
0C596:  BSF    F9D.5
....................    
....................    //setup_oscillator(False);
....................    
....................    //  set_tris_c (0b01010111);
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H |SPI_SS_DISABLED|SPI_H_TO_L  | SPI_CLK_DIV_4  );
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L  | SPI_CLK_DIV_4 |SPI_SS_DISABLED); // Initial SPI
....................    //setup_spi(SPI_MASTER|SPI_H_TO_L|SPI_SS_DISABLED|SPI_CLK_DIV_16);
....................    //setup_spi2( FALSE );
....................    //setup_spi( FALSE );
....................    
....................    // setup_spi(SPI_MASTER |SPI_SS_DISABLED | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //masterOK
....................    
....................    //setup_spi(SPI_MASTER  | SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_16 ); //master1 jj
....................    //setup_spi(SPI_MASTER  |SPI_SS_DISABLED| SPI_L_TO_H | SPI_XMIT_L_TO_H| SPI_CLK_DIV_16 );
....................    setup_spi(SPI_MASTER  | SPI_L_TO_H |SPI_SS_DISABLED | SPI_XMIT_L_TO_H| SPI_CLK_DIV_16 ); //master1 jj
0C598:  BCF    FC6.5
0C59A:  BCF    F94.5
0C59C:  BSF    F94.4
0C59E:  BCF    F94.3
0C5A0:  MOVLW  21
0C5A2:  MOVWF  FC6
0C5A4:  MOVLW  40
0C5A6:  MOVWF  FC7
.................... 
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 ); //master2
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED |SPI_SAMPLE_AT_END | SPI_H_TO_L | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 ); //master1.1
....................    //spi_init(SPI1_MODE0, TRUE);
....................    //spi_init(250000);
....................    //setup_spi(SPI_MASTER | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_SS_DISABLED  | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_T2 | SPI_XMIT_L_TO_H);
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L| SPI_SAMPLE_AT_END | SPI_CLK_DIV_64);//master3
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED| SPI_L_TO_H | SPI_SAMPLE_AT_END | SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_XMIT_L_TO_H | SPI_CLK_DIV_4);
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED | SPI_XMIT_L_TO_H| SPI_CLK_DIV_4 );
....................    //setup_spi(SPI_MASTER | SPI_L_TO_H | SPI_CLK_DIV_4);
....................    //setup_spi(SPI_MASTER | SPI_H_TO_L | SPI_CLK_DIV_16);
....................    //setup_spi(SPI_MASTER |SPI_SS_DISABLED| spi_L_to_H| SPI_XMIT_L_TO_H|SPI_CLK_DIV_4 );
....................   
....................    IO_INIT();   //initializes the MCP23S17 chip.//----------jj
0C5A8:  GOTO   0A86
....................   
....................    IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Inputt
0C5AC:  MOVLB  E
0C5AE:  CLRF   x3C
0C5B0:  SETF   x3D
0C5B2:  MOVLB  0
0C5B4:  CALL   0B1C
....................    IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Inputt
0C5B8:  MOVLB  E
0C5BA:  CLRF   x3C
0C5BC:  SETF   x3D
0C5BE:  MOVLB  0
0C5C0:  CALL   0B2E
....................    IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Inputt 
0C5C4:  MOVLW  02
0C5C6:  MOVLB  E
0C5C8:  MOVWF  x3C
0C5CA:  SETF   x3D
0C5CC:  MOVLB  0
0C5CE:  CALL   0B1C
....................    IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Inputt
0C5D2:  MOVLW  02
0C5D4:  MOVLB  E
0C5D6:  MOVWF  x3C
0C5D8:  SETF   x3D
0C5DA:  MOVLB  0
0C5DC:  CALL   0B2E
....................    //  jj
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0C5E0:  MOVLB  E
0C5E2:  CLRF   x46
0C5E4:  MOVLW  06
0C5E6:  MOVWF  x47
0C5E8:  SETF   x48
0C5EA:  MOVLB  0
0C5EC:  CALL   0A54
....................    IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0C5F0:  MOVLB  E
0C5F2:  CLRF   x46
0C5F4:  MOVLW  16
0C5F6:  MOVWF  x47
0C5F8:  SETF   x48
0C5FA:  MOVLB  0
0C5FC:  CALL   0A54
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0C600:  MOVLW  02
0C602:  MOVLB  E
0C604:  MOVWF  x46
0C606:  MOVLW  06
0C608:  MOVWF  x47
0C60A:  SETF   x48
0C60C:  MOVLB  0
0C60E:  CALL   0A54
....................    IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0C612:  MOVLW  02
0C614:  MOVLB  E
0C616:  MOVWF  x46
0C618:  MOVLW  16
0C61A:  MOVWF  x47
0C61C:  SETF   x48
0C61E:  MOVLB  0
0C620:  CALL   0A54
....................    //  jj
....................    IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0C624:  MOVLW  04
0C626:  MOVLB  E
0C628:  MOVWF  x3C
0C62A:  CLRF   x3D
0C62C:  MOVLB  0
0C62E:  CALL   0B1C
....................    IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0C632:  MOVLW  04
0C634:  MOVLB  E
0C636:  MOVWF  x3C
0C638:  CLRF   x3D
0C63A:  MOVLB  0
0C63C:  CALL   0B2E
....................    IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0C640:  MOVLW  06
0C642:  MOVLB  E
0C644:  MOVWF  x3C
0C646:  CLRF   x3D
0C648:  MOVLB  0
0C64A:  CALL   0B1C
....................    IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0C64E:  MOVLW  06
0C650:  MOVLB  E
0C652:  MOVWF  x3C
0C654:  CLRF   x3D
0C656:  MOVLB  0
0C658:  CALL   0B2E
....................    IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0C65C:  MOVLW  08
0C65E:  MOVLB  E
0C660:  MOVWF  x3C
0C662:  CLRF   x3D
0C664:  MOVLB  0
0C666:  CALL   0B1C
....................    IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0C66A:  MOVLW  08
0C66C:  MOVLB  E
0C66E:  MOVWF  x3C
0C670:  CLRF   x3D
0C672:  MOVLB  0
0C674:  CALL   0B2E
....................    IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0C678:  MOVLW  0A
0C67A:  MOVLB  E
0C67C:  MOVWF  x3C
0C67E:  CLRF   x3D
0C680:  MOVLB  0
0C682:  CALL   0B1C
....................    IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0C686:  MOVLW  0A
0C688:  MOVLB  E
0C68A:  MOVWF  x3C
0C68C:  CLRF   x3D
0C68E:  MOVLB  0
0C690:  CALL   0B2E
....................    
....................    FlashingFlag = 1;
0C694:  BSF    1A.1
....................    //output_bit(P485ctrl,0);
....................    sequence = end_sq;
0C696:  MOVFF  58,61
....................    Address = 1;
0C69A:  MOVLW  01
0C69C:  MOVWF  x62
.................... 
....................    Output.B1 = 1;
0C69E:  MOVLB  D
0C6A0:  BSF    xA5.0
....................    Output.B2 = 1;
0C6A2:  BSF    xA5.1
....................    Output.B3 = 1;
0C6A4:  BSF    xA5.2
....................    Output.B4 = 1;
0C6A6:  BSF    xA5.3
....................    Output.B5 = 1;
0C6A8:  BSF    xA5.4
....................    Output.B6 = 1;
0C6AA:  BSF    xA5.5
....................    Output.B7 = 1;
0C6AC:  BSF    xA5.6
....................    Output.B8 = 1;
0C6AE:  BSF    xA5.7
....................    Output.B9 = 1;
0C6B0:  BSF    xA6.0
....................    Output.B10 = 1;
0C6B2:  BSF    xA6.1
....................    Output.B11 = 1;
0C6B4:  BSF    xA6.2
....................    Output.B12 = 1;
0C6B6:  BSF    xA6.3
....................    Output.B13 = 1;
0C6B8:  BSF    xA6.4
....................    Output.B14 = 1;
0C6BA:  BSF    xA6.5
....................    Output.B15 = 1;
0C6BC:  BSF    xA6.6
....................    Output.B16 = 1;
0C6BE:  BSF    xA6.7
....................    Output.B17 = 1;
0C6C0:  BSF    xA7.0
....................    Output.B18 = 1;
0C6C2:  BSF    xA7.1
....................    Output.B19 = 1;
0C6C4:  BSF    xA7.2
....................    Output.B20 = 1;
0C6C6:  BSF    xA7.3
....................    
....................    ////////////////////
....................    In.B1 = 0;
0C6C8:  BCF    xC1.0
....................    In.B2 = 0;
0C6CA:  BCF    xC1.1
....................    In.B3 = 0;
0C6CC:  BCF    xC1.2
....................    In.B4 = 0;
0C6CE:  BCF    xC1.3
....................    In.B5 = 0;
0C6D0:  BCF    xC1.4
....................    In.B6 = 0;
0C6D2:  BCF    xC1.5
....................    In.B7 = 0;
0C6D4:  BCF    xC1.6
....................    In.B8 = 0;
0C6D6:  BCF    xC1.7
....................    In.B9 = 0;
0C6D8:  BCF    xC2.0
....................    In.B10 = 0;
0C6DA:  BCF    xC2.1
....................    In.B11 = 0;
0C6DC:  BCF    xC2.2
....................    In.B12 = 0;
0C6DE:  BCF    xC2.3
....................    In.B13 = 0;
0C6E0:  BCF    xC2.4
....................    In.B14 = 0;
0C6E2:  BCF    xC2.5
....................    In.B15 = 0;
0C6E4:  BCF    xC2.6
....................    In.B16 = 0;
0C6E6:  BCF    xC2.7
....................    In.B17 = 0;
0C6E8:  BCF    xC3.0
....................    In.B18 = 0;
0C6EA:  BCF    xC3.1
....................    In.B19 = 0;
0C6EC:  BCF    xC3.2
....................    In.B20 = 0;
0C6EE:  BCF    xC3.3
....................    
....................    ////////////////////
....................    In2.B1 = 0;
0C6F0:  BCF    xC5.0
....................    In2.B2 = 0;
0C6F2:  BCF    xC5.1
....................    In2.B3 = 0;
0C6F4:  BCF    xC5.2
....................    In2.B4 = 0;
0C6F6:  BCF    xC5.3
....................    In2.B5 = 0;
0C6F8:  BCF    xC5.4
....................    In2.B6 = 0;
0C6FA:  BCF    xC5.5
....................    In2.B7 = 0;
0C6FC:  BCF    xC5.6
....................    In2.B8 = 0;
0C6FE:  BCF    xC5.7
....................    In2.B9 = 0;
0C700:  BCF    xC6.0
....................    In2.B10 = 0;
0C702:  BCF    xC6.1
....................    In2.B11 = 0;
0C704:  BCF    xC6.2
....................    In2.B12 = 0;
0C706:  BCF    xC6.3
....................    In2.B13 = 0;
0C708:  BCF    xC6.4
....................    In2.B14 = 0;
0C70A:  BCF    xC6.5
....................    In2.B15 = 0;
0C70C:  BCF    xC6.6
....................    In2.B16 = 0;
0C70E:  BCF    xC6.7
....................    In2.B17 = 0;
0C710:  BCF    xC7.0
....................    In2.B18 = 0;
0C712:  BCF    xC7.1
....................    In2.B19 = 0;
0C714:  BCF    xC7.2
....................    In2.B20 = 0;
0C716:  BCF    xC7.3
....................    
....................    ////////////////////////
....................    Ack.B1 = 0;
0C718:  BCF    xBD.0
....................    Ack.B2 = 0;
0C71A:  BCF    xBD.1
....................    Ack.B3 = 0;
0C71C:  BCF    xBD.2
....................    Ack.B4 = 0;
0C71E:  BCF    xBD.3
....................    Ack.B5 = 0;
0C720:  BCF    xBD.4
....................    Ack.B6 = 0;
0C722:  BCF    xBD.5
....................    Ack.B7 = 0;
0C724:  BCF    xBD.6
....................    Ack.B8 = 0;
0C726:  BCF    xBD.7
....................    Ack.B9 = 0;
0C728:  BCF    xBE.0
....................    Ack.B10 = 0;
0C72A:  BCF    xBE.1
....................    Ack.B11 = 0;
0C72C:  BCF    xBE.2
....................    Ack.B12 = 0;
0C72E:  BCF    xBE.3
....................    Ack.B13 = 0;
0C730:  BCF    xBE.4
....................    Ack.B14 = 0;
0C732:  BCF    xBE.5
....................    Ack.B15 = 0;
0C734:  BCF    xBE.6
....................    Ack.B16 = 0;
0C736:  BCF    xBE.7
....................    Ack.B17 = 0;
0C738:  BCF    xBF.0
....................    Ack.B18 = 0;
0C73A:  BCF    xBF.1
....................    Ack.B19 = 0;
0C73C:  BCF    xBF.2
....................    Ack.B20 = 0;
0C73E:  BCF    xBF.3
....................  
....................    Inputt.B1 = 0;
0C740:  BCF    xA1.0
....................    Inputt.B2 = 0;
0C742:  BCF    xA1.1
....................    Inputt.B3 = 0;
0C744:  BCF    xA1.2
....................    Inputt.B4 = 0;
0C746:  BCF    xA1.3
....................    Inputt.B5 = 0;
0C748:  BCF    xA1.4
....................    Inputt.B6 = 0;
0C74A:  BCF    xA1.5
....................    Inputt.B7 = 0;
0C74C:  BCF    xA1.6
....................    Inputt.B8 = 0;
0C74E:  BCF    xA1.7
....................    Inputt.B9 = 0;
0C750:  BCF    xA2.0
....................    Inputt.B10 = 0;
0C752:  BCF    xA2.1
....................    Inputt.B11 = 0;
0C754:  BCF    xA2.2
....................    Inputt.B12 = 0;
0C756:  BCF    xA2.3
....................    Inputt.B13 = 0;
0C758:  BCF    xA2.4
....................    Inputt.B14 = 0;
0C75A:  BCF    xA2.5
....................    Inputt.B15 = 0;
0C75C:  BCF    xA2.6
....................    Inputt.B16 = 0;
0C75E:  BCF    xA2.7
....................    Inputt.B17 = 0;
0C760:  BCF    xA3.0
....................    Inputt.B18 = 0;
0C762:  BCF    xA3.1
....................    Inputt.B19 = 0;
0C764:  BCF    xA3.2
....................    Inputt.B20 = 0;
0C766:  BCF    xA3.3
....................   
....................     /////// read setting //////////
.................... 
....................    if(read_eeprom(0x00) == 0x0F)
0C768:  MOVFF  FF2,E3C
0C76C:  BCF    FF2.7
0C76E:  CLRF   FAA
0C770:  CLRF   FA9
0C772:  BCF    FA6.6
0C774:  BCF    FA6.7
0C776:  BSF    FA6.0
0C778:  MOVF   FA8,W
0C77A:  MOVLB  E
0C77C:  BTFSC  x3C.7
0C77E:  BSF    FF2.7
0C780:  SUBLW  0F
0C782:  BNZ   C78E
....................    {
....................       Read_Config();
0C784:  MOVLB  0
0C786:  CALL   0B42
....................    }
0C78A:  BRA    CBAC
0C78C:  MOVLB  E
....................    else
....................    {
....................       FlashingRateTime = 25;
0C78E:  MOVLW  19
0C790:  MOVWF  1B
....................       AutoAck = 0xF0; //not use auto ack
0C792:  MOVLW  F0
0C794:  MOVWF  53
....................       Address = 0x01;
0C796:  MOVLW  01
0C798:  MOVLB  0
0C79A:  MOVWF  x62
.................... 
....................       AutoAckTime = 5;
0C79C:  MOVLW  05
0C79E:  MOVWF  54
....................       FlashingRate = 25;
0C7A0:  MOVLW  19
0C7A2:  MOVWF  55
....................       NoOfPoint = 20;
0C7A4:  MOVLW  14
0C7A6:  MOVWF  56
....................       char i;
....................       for(i =0; i<=NoOfPoint; i++)
0C7A8:  MOVLB  E
0C7AA:  CLRF   x39
0C7AC:  MOVF   x39,W
0C7AE:  SUBWF  56,W
0C7B0:  BNC   C7CC
....................       {
....................          FaultDelayTime[i] = 0;
0C7B2:  BCF    FD8.0
0C7B4:  RLCF   x39,W
0C7B6:  CLRF   03
0C7B8:  ADDLW  09
0C7BA:  MOVWF  FE9
0C7BC:  MOVLW  0E
0C7BE:  ADDWFC 03,W
0C7C0:  MOVWF  FEA
0C7C2:  CLRF   FEC
0C7C4:  MOVF   FED,F
0C7C6:  CLRF   FEF
0C7C8:  INCF   x39,F
0C7CA:  BRA    C7AC
....................       }
.................... 
.................... 
....................       InputType.B1 = 1;
0C7CC:  MOVLB  D
0C7CE:  BSF    xA9.0
....................       InputType.B2 = 1;
0C7D0:  BSF    xA9.1
....................       InputType.B3 = 1;
0C7D2:  BSF    xA9.2
....................       InputType.B4 = 1;
0C7D4:  BSF    xA9.3
....................       InputType.B5 = 1;
0C7D6:  BSF    xA9.4
....................       InputType.B6 = 1;
0C7D8:  BSF    xA9.5
....................       InputType.B7 = 1;
0C7DA:  BSF    xA9.6
....................       InputType.B8 = 1;
0C7DC:  BSF    xA9.7
....................       InputType.B9 = 1;
0C7DE:  BSF    xAA.0
....................       InputType.B10 = 1;
0C7E0:  BSF    xAA.1
....................       InputType.B11 = 1;
0C7E2:  BSF    xAA.2
....................       InputType.B12 = 1;
0C7E4:  BSF    xAA.3
....................       InputType.B13 = 1;
0C7E6:  BSF    xAA.4
....................       InputType.B14 = 1;
0C7E8:  BSF    xAA.5
....................       InputType.B15 = 1;
0C7EA:  BSF    xAA.6
....................       InputType.B16 = 1;
0C7EC:  BSF    xAA.7
....................       InputType.B17 = 1;
0C7EE:  BSF    xAB.0
....................       InputType.B18 = 1;
0C7F0:  BSF    xAB.1
....................       InputType.B19 = 1;
0C7F2:  BSF    xAB.2
....................       InputType.B20 = 1;
0C7F4:  BSF    xAB.3
....................       
....................       FaultNCNO[1] = 1;
0C7F6:  MOVLB  E
0C7F8:  BSF    x33.1
....................       FaultNCNO[2] = 1;
0C7FA:  BSF    x33.2
....................       FaultNCNO[3] = 1;
0C7FC:  BSF    x33.3
....................       FaultNCNO[4] = 1;
0C7FE:  BSF    x33.4
....................       FaultNCNO[5] = 1;
0C800:  BSF    x33.5
....................       FaultNCNO[6] = 1;
0C802:  BSF    x33.6
....................       FaultNCNO[7] = 1;
0C804:  BSF    x33.7
....................       FaultNCNO[8] = 1;
0C806:  BSF    x34.0
....................       FaultNCNO[9] = 1;
0C808:  BSF    x34.1
....................       FaultNCNO[10] = 1;
0C80A:  BSF    x34.2
....................       FaultNCNO[11] = 1;
0C80C:  BSF    x34.3
....................       FaultNCNO[12] = 1;
0C80E:  BSF    x34.4
....................       FaultNCNO[13] = 1;
0C810:  BSF    x34.5
....................       FaultNCNO[14] = 1;
0C812:  BSF    x34.6
....................       FaultNCNO[15] = 1;
0C814:  BSF    x34.7
....................       FaultNCNO[16] = 1;
0C816:  BSF    x35.0
....................       FaultNCNO[17] = 1;
0C818:  BSF    x35.1
....................       FaultNCNO[18] = 1;
0C81A:  BSF    x35.2
....................       FaultNCNO[19] = 1;
0C81C:  BSF    x35.3
....................       FaultNCNO[20] = 1;
0C81E:  BSF    x35.4
....................       /////////////////////////////
....................       FaultType.B1 = 1;
0C820:  MOVLB  D
0C822:  BSF    xAD.0
....................       FaultType.B2= 1;
0C824:  BSF    xAD.1
....................       FaultType.B3 = 1;
0C826:  BSF    xAD.2
....................       FaultType.B4 = 1;
0C828:  BSF    xAD.3
....................       FaultType.B5 = 1;
0C82A:  BSF    xAD.4
....................       FaultType.B6 = 1;
0C82C:  BSF    xAD.5
....................       FaultType.B7 = 1;
0C82E:  BSF    xAD.6
....................       FaultType.B8 = 1;
0C830:  BSF    xAD.7
....................       FaultType.B9 = 1;
0C832:  BSF    xAE.0
....................       FaultType.B10 = 1;
0C834:  BSF    xAE.1
....................       FaultType.B11 = 1;
0C836:  BSF    xAE.2
....................       FaultType.B12 = 1;
0C838:  BSF    xAE.3
....................       FaultType.B13 = 1;
0C83A:  BSF    xAE.4
....................       FaultType.B14 = 1;
0C83C:  BSF    xAE.5
....................       FaultType.B15 = 1;
0C83E:  BSF    xAE.6
....................       FaultType.B16 = 1;
0C840:  BSF    xAE.7
....................       FaultType.B17 = 1;
0C842:  BSF    xAF.0
....................       FaultType.B18 = 1;
0C844:  BSF    xAF.1
....................       FaultType.B19 = 1;
0C846:  BSF    xAF.2
....................       FaultType.B20 = 1;
0C848:  BSF    xAF.3
....................       
....................       ////////////////////////////
....................       OutputType.B1 = 1;
0C84A:  BSF    xB1.0
....................       OutputType.B2 = 1;
0C84C:  BSF    xB1.1
....................       OutputType.B3 = 1;
0C84E:  BSF    xB1.2
....................       OutputType.B4 = 1;
0C850:  BSF    xB1.3
....................       OutputType.B5 = 1;
0C852:  BSF    xB1.4
....................       OutputType.B6 = 1;
0C854:  BSF    xB1.5
....................       OutputType.B7 = 1;
0C856:  BSF    xB1.6
....................       OutputType.B8 = 1;
0C858:  BSF    xB1.7
....................       OutputType.B9 = 1;
0C85A:  BSF    xB2.0
....................       OutputType.B10 = 1;
0C85C:  BSF    xB2.1
....................       OutputType.B11 = 1;
0C85E:  BSF    xB2.2
....................       OutputType.B12 = 1;
0C860:  BSF    xB2.3
....................       OutputType.B13 = 1;
0C862:  BSF    xB2.4
....................       OutputType.B14 = 1;
0C864:  BSF    xB2.5
....................       OutputType.B15 = 1;
0C866:  BSF    xB2.6
....................       OutputType.B16 = 1;
0C868:  BSF    xB2.7
....................       OutputType.B17 = 1;
0C86A:  BSF    xB3.0
....................       OutputType.B18 = 1;
0C86C:  BSF    xB3.1
....................       OutputType.B19 = 1;
0C86E:  BSF    xB3.2
....................       OutputType.B20 = 1;
0C870:  BSF    xB3.3
....................  
....................       /////////////////////////////
....................       OutputBoth.B1 = 1;
0C872:  BSF    xB5.0
....................       OutputBoth.B2 = 1;
0C874:  BSF    xB5.1
....................       OutputBoth.B3 = 1;
0C876:  BSF    xB5.2
....................       OutputBoth.B4 = 1;
0C878:  BSF    xB5.3
....................       OutputBoth.B5 = 1;
0C87A:  BSF    xB5.4
....................       OutputBoth.B6 = 1;
0C87C:  BSF    xB5.5
....................       OutputBoth.B7 = 1;
0C87E:  BSF    xB5.6
....................       OutputBoth.B8 = 1;
0C880:  BSF    xB5.7
....................       OutputBoth.B9 = 1;
0C882:  BSF    xB6.0
....................       OutputBoth.B10 = 1;
0C884:  BSF    xB6.1
....................       OutputBoth.B11 = 1;
0C886:  BSF    xB6.2
....................       OutputBoth.B12 = 1;
0C888:  BSF    xB6.3
....................       OutputBoth.B13 = 1;
0C88A:  BSF    xB6.4
....................       OutputBoth.B14 = 1;
0C88C:  BSF    xB6.5
....................       OutputBoth.B15 = 1;
0C88E:  BSF    xB6.6
....................       OutputBoth.B16 = 1;
0C890:  BSF    xB6.7
....................       OutputBoth.B17 = 1;
0C892:  BSF    xB7.0
....................       OutputBoth.B18 = 1;
0C894:  BSF    xB7.1
....................       OutputBoth.B19 = 1;
0C896:  BSF    xB7.2
....................       OutputBoth.B20 = 1;
0C898:  BSF    xB7.3
....................       
....................       //////////////////////////////////////////////
....................       AlarmIndicator.B1 = 1;
0C89A:  BSF    xB9.0
....................       AlarmIndicator.B2 = 1;
0C89C:  BSF    xB9.1
....................       AlarmIndicator.B3 = 1;
0C89E:  BSF    xB9.2
....................       AlarmIndicator.B4 = 1;
0C8A0:  BSF    xB9.3
....................       AlarmIndicator.B5 = 1;
0C8A2:  BSF    xB9.4
....................       AlarmIndicator.B6 = 1;
0C8A4:  BSF    xB9.5
....................       AlarmIndicator.B7 = 1;
0C8A6:  BSF    xB9.6
....................       AlarmIndicator.B8 = 1;
0C8A8:  BSF    xB9.7
....................       AlarmIndicator.B9 = 1;
0C8AA:  BSF    xBA.0
....................       AlarmIndicator.B10 = 1;
0C8AC:  BSF    xBA.1
....................       AlarmIndicator.B11 = 1;
0C8AE:  BSF    xBA.2
....................       AlarmIndicator.B12 = 1;
0C8B0:  BSF    xBA.3
....................       AlarmIndicator.B13 = 1;
0C8B2:  BSF    xBA.4
....................       AlarmIndicator.B14 = 1;
0C8B4:  BSF    xBA.5
....................       AlarmIndicator.B15 = 1;
0C8B6:  BSF    xBA.6
....................       AlarmIndicator.B16 = 1;
0C8B8:  BSF    xBA.7
....................       AlarmIndicator.B17 = 1;
0C8BA:  BSF    xBB.0
....................       AlarmIndicator.B18 = 1;
0C8BC:  BSF    xBB.1
....................       AlarmIndicator.B19 = 1;
0C8BE:  BSF    xBB.2
....................       AlarmIndicator.B20 = 1;
0C8C0:  BSF    xBB.3
....................       
....................       ///////////// JACK///////////////////
....................    EEpDat = read_eeprom(0x10);
0C8C2:  MOVFF  FF2,E3C
0C8C6:  BCF    FF2.7
0C8C8:  CLRF   FAA
0C8CA:  MOVLW  10
0C8CC:  MOVWF  FA9
0C8CE:  BCF    FA6.6
0C8D0:  BCF    FA6.7
0C8D2:  BSF    FA6.0
0C8D4:  MOVF   FA8,W
0C8D6:  MOVLB  E
0C8D8:  BTFSC  x3C.7
0C8DA:  BSF    FF2.7
0C8DC:  MOVWF  34
....................    //Red1_8 = EEpDat;
....................    RED_Colour.B1 = EEpDat;
0C8DE:  MOVLB  D
0C8E0:  BCF    xCD.0
0C8E2:  BTFSC  34.0
0C8E4:  BSF    xCD.0
....................    RED_Colour.B2 = EEpDat >> 1;
0C8E6:  BCF    FD8.0
0C8E8:  RRCF   34,W
0C8EA:  BCF    xCD.1
0C8EC:  BTFSC  FE8.0
0C8EE:  BSF    xCD.1
....................    RED_Colour.B3 = EEpDat >> 2;
0C8F0:  RRCF   34,W
0C8F2:  MOVWF  00
0C8F4:  RRCF   00,F
0C8F6:  MOVLW  3F
0C8F8:  ANDWF  00,F
0C8FA:  BCF    xCD.2
0C8FC:  BTFSC  00.0
0C8FE:  BSF    xCD.2
....................    RED_Colour.B4 = EEpDat >> 3;
0C900:  RRCF   34,W
0C902:  MOVWF  00
0C904:  RRCF   00,F
0C906:  RRCF   00,F
0C908:  MOVLW  1F
0C90A:  ANDWF  00,F
0C90C:  BCF    xCD.3
0C90E:  BTFSC  00.0
0C910:  BSF    xCD.3
....................    RED_Colour.B5 = EEpDat >> 4;
0C912:  SWAPF  34,W
0C914:  MOVWF  00
0C916:  MOVLW  0F
0C918:  ANDWF  00,F
0C91A:  BCF    xCD.4
0C91C:  BTFSC  00.0
0C91E:  BSF    xCD.4
....................    RED_Colour.B6 = EEpDat >> 5;
0C920:  SWAPF  34,W
0C922:  MOVWF  00
0C924:  RRCF   00,F
0C926:  MOVLW  07
0C928:  ANDWF  00,F
0C92A:  BCF    xCD.5
0C92C:  BTFSC  00.0
0C92E:  BSF    xCD.5
....................    RED_Colour.B7 = EEpDat >> 6;
0C930:  SWAPF  34,W
0C932:  MOVWF  00
0C934:  RRCF   00,F
0C936:  RRCF   00,F
0C938:  MOVLW  03
0C93A:  ANDWF  00,F
0C93C:  BCF    xCD.6
0C93E:  BTFSC  00.0
0C940:  BSF    xCD.6
....................    RED_Colour.B8 = EEpDat >> 7;
0C942:  CLRF   00
0C944:  BTFSC  34.7
0C946:  BSF    00.0
0C948:  BCF    xCD.7
0C94A:  BTFSC  00.0
0C94C:  BSF    xCD.7
....................    
....................    EEpDat = read_eeprom(0x11);
0C94E:  MOVFF  FF2,E3C
0C952:  BCF    FF2.7
0C954:  CLRF   FAA
0C956:  MOVLW  11
0C958:  MOVWF  FA9
0C95A:  BCF    FA6.6
0C95C:  BCF    FA6.7
0C95E:  BSF    FA6.0
0C960:  MOVF   FA8,W
0C962:  MOVLB  E
0C964:  BTFSC  x3C.7
0C966:  BSF    FF2.7
0C968:  MOVWF  34
....................    //Green9_10 = EEpDat;
....................    RED_Colour.B9 = EEpDat;
0C96A:  MOVLB  D
0C96C:  BCF    xCE.0
0C96E:  BTFSC  34.0
0C970:  BSF    xCE.0
....................    RED_Colour.B10 = EEpDat >> 1;
0C972:  BCF    FD8.0
0C974:  RRCF   34,W
0C976:  BCF    xCE.1
0C978:  BTFSC  FE8.0
0C97A:  BSF    xCE.1
....................    
....................    
....................    EEpDat = read_eeprom(0x12);
0C97C:  MOVFF  FF2,E3C
0C980:  BCF    FF2.7
0C982:  CLRF   FAA
0C984:  MOVLW  12
0C986:  MOVWF  FA9
0C988:  BCF    FA6.6
0C98A:  BCF    FA6.7
0C98C:  BSF    FA6.0
0C98E:  MOVF   FA8,W
0C990:  MOVLB  E
0C992:  BTFSC  x3C.7
0C994:  BSF    FF2.7
0C996:  MOVWF  34
....................    //Red11_18 = EEpDat;
....................    RED_Colour.B11 = EEpDat;
0C998:  MOVLB  D
0C99A:  BCF    xCE.2
0C99C:  BTFSC  34.0
0C99E:  BSF    xCE.2
....................    RED_Colour.B12 = EEpDat >> 1;
0C9A0:  BCF    FD8.0
0C9A2:  RRCF   34,W
0C9A4:  BCF    xCE.3
0C9A6:  BTFSC  FE8.0
0C9A8:  BSF    xCE.3
....................    RED_Colour.B13 = EEpDat >> 2;
0C9AA:  RRCF   34,W
0C9AC:  MOVWF  00
0C9AE:  RRCF   00,F
0C9B0:  MOVLW  3F
0C9B2:  ANDWF  00,F
0C9B4:  BCF    xCE.4
0C9B6:  BTFSC  00.0
0C9B8:  BSF    xCE.4
....................    RED_Colour.B14 = EEpDat >> 3;
0C9BA:  RRCF   34,W
0C9BC:  MOVWF  00
0C9BE:  RRCF   00,F
0C9C0:  RRCF   00,F
0C9C2:  MOVLW  1F
0C9C4:  ANDWF  00,F
0C9C6:  BCF    xCE.5
0C9C8:  BTFSC  00.0
0C9CA:  BSF    xCE.5
....................    RED_Colour.B15 = EEpDat >> 4;
0C9CC:  SWAPF  34,W
0C9CE:  MOVWF  00
0C9D0:  MOVLW  0F
0C9D2:  ANDWF  00,F
0C9D4:  BCF    xCE.6
0C9D6:  BTFSC  00.0
0C9D8:  BSF    xCE.6
....................    RED_Colour.B16 = EEpDat >> 5;
0C9DA:  SWAPF  34,W
0C9DC:  MOVWF  00
0C9DE:  RRCF   00,F
0C9E0:  MOVLW  07
0C9E2:  ANDWF  00,F
0C9E4:  BCF    xCE.7
0C9E6:  BTFSC  00.0
0C9E8:  BSF    xCE.7
....................    RED_Colour.B17 = EEpDat >> 6;
0C9EA:  SWAPF  34,W
0C9EC:  MOVWF  00
0C9EE:  RRCF   00,F
0C9F0:  RRCF   00,F
0C9F2:  MOVLW  03
0C9F4:  ANDWF  00,F
0C9F6:  BCF    xCF.0
0C9F8:  BTFSC  00.0
0C9FA:  BSF    xCF.0
....................    RED_Colour.B18 = EEpDat >> 7;
0C9FC:  CLRF   00
0C9FE:  BTFSC  34.7
0CA00:  BSF    00.0
0CA02:  BCF    xCF.1
0CA04:  BTFSC  00.0
0CA06:  BSF    xCF.1
....................    
....................    EEpDat = read_eeprom(0x13);
0CA08:  MOVFF  FF2,E3C
0CA0C:  BCF    FF2.7
0CA0E:  CLRF   FAA
0CA10:  MOVLW  13
0CA12:  MOVWF  FA9
0CA14:  BCF    FA6.6
0CA16:  BCF    FA6.7
0CA18:  BSF    FA6.0
0CA1A:  MOVF   FA8,W
0CA1C:  MOVLB  E
0CA1E:  BTFSC  x3C.7
0CA20:  BSF    FF2.7
0CA22:  MOVWF  34
....................    //Red19_20 = EEpDat;
....................    RED_Colour.B19 = EEpDat;
0CA24:  MOVLB  D
0CA26:  BCF    xCF.2
0CA28:  BTFSC  34.0
0CA2A:  BSF    xCF.2
....................    RED_Colour.B20 = EEpDat >> 1;
0CA2C:  BCF    FD8.0
0CA2E:  RRCF   34,W
0CA30:  BCF    xCF.3
0CA32:  BTFSC  FE8.0
0CA34:  BSF    xCF.3
....................    
....................    
....................    EEpDat = read_eeprom(0x14);
0CA36:  MOVFF  FF2,E3C
0CA3A:  BCF    FF2.7
0CA3C:  CLRF   FAA
0CA3E:  MOVLW  14
0CA40:  MOVWF  FA9
0CA42:  BCF    FA6.6
0CA44:  BCF    FA6.7
0CA46:  BSF    FA6.0
0CA48:  MOVF   FA8,W
0CA4A:  MOVLB  E
0CA4C:  BTFSC  x3C.7
0CA4E:  BSF    FF2.7
0CA50:  MOVWF  34
....................    //Green1_8 = EEpDat;
....................    GREEN_Colour.B1 = EEpDat;
0CA52:  MOVLB  D
0CA54:  BCF    xD1.0
0CA56:  BTFSC  34.0
0CA58:  BSF    xD1.0
....................    GREEN_Colour.B2 = EEpDat >> 1;
0CA5A:  BCF    FD8.0
0CA5C:  RRCF   34,W
0CA5E:  BCF    xD1.1
0CA60:  BTFSC  FE8.0
0CA62:  BSF    xD1.1
....................    GREEN_Colour.B3 = EEpDat >> 2;
0CA64:  RRCF   34,W
0CA66:  MOVWF  00
0CA68:  RRCF   00,F
0CA6A:  MOVLW  3F
0CA6C:  ANDWF  00,F
0CA6E:  BCF    xD1.2
0CA70:  BTFSC  00.0
0CA72:  BSF    xD1.2
....................    GREEN_Colour.B4 = EEpDat >> 3;
0CA74:  RRCF   34,W
0CA76:  MOVWF  00
0CA78:  RRCF   00,F
0CA7A:  RRCF   00,F
0CA7C:  MOVLW  1F
0CA7E:  ANDWF  00,F
0CA80:  BCF    xD1.3
0CA82:  BTFSC  00.0
0CA84:  BSF    xD1.3
....................    GREEN_Colour.B5 = EEpDat >> 4;
0CA86:  SWAPF  34,W
0CA88:  MOVWF  00
0CA8A:  MOVLW  0F
0CA8C:  ANDWF  00,F
0CA8E:  BCF    xD1.4
0CA90:  BTFSC  00.0
0CA92:  BSF    xD1.4
....................    GREEN_Colour.B6 = EEpDat >> 5;
0CA94:  SWAPF  34,W
0CA96:  MOVWF  00
0CA98:  RRCF   00,F
0CA9A:  MOVLW  07
0CA9C:  ANDWF  00,F
0CA9E:  BCF    xD1.5
0CAA0:  BTFSC  00.0
0CAA2:  BSF    xD1.5
....................    GREEN_Colour.B7 = EEpDat >> 6;
0CAA4:  SWAPF  34,W
0CAA6:  MOVWF  00
0CAA8:  RRCF   00,F
0CAAA:  RRCF   00,F
0CAAC:  MOVLW  03
0CAAE:  ANDWF  00,F
0CAB0:  BCF    xD1.6
0CAB2:  BTFSC  00.0
0CAB4:  BSF    xD1.6
....................    GREEN_Colour.B8 = EEpDat >> 7;
0CAB6:  CLRF   00
0CAB8:  BTFSC  34.7
0CABA:  BSF    00.0
0CABC:  BCF    xD1.7
0CABE:  BTFSC  00.0
0CAC0:  BSF    xD1.7
....................    
....................    EEpDat = read_eeprom(0x15);
0CAC2:  MOVFF  FF2,E3C
0CAC6:  BCF    FF2.7
0CAC8:  CLRF   FAA
0CACA:  MOVLW  15
0CACC:  MOVWF  FA9
0CACE:  BCF    FA6.6
0CAD0:  BCF    FA6.7
0CAD2:  BSF    FA6.0
0CAD4:  MOVF   FA8,W
0CAD6:  MOVLB  E
0CAD8:  BTFSC  x3C.7
0CADA:  BSF    FF2.7
0CADC:  MOVWF  34
....................    //Green9_10 = EEpDat;
....................    GREEN_Colour.B9 = EEpDat;
0CADE:  MOVLB  D
0CAE0:  BCF    xD2.0
0CAE2:  BTFSC  34.0
0CAE4:  BSF    xD2.0
....................    GREEN_Colour.B10 = EEpDat >> 1;
0CAE6:  BCF    FD8.0
0CAE8:  RRCF   34,W
0CAEA:  BCF    xD2.1
0CAEC:  BTFSC  FE8.0
0CAEE:  BSF    xD2.1
....................   
....................    EEpDat = read_eeprom(0x16);
0CAF0:  MOVFF  FF2,E3C
0CAF4:  BCF    FF2.7
0CAF6:  CLRF   FAA
0CAF8:  MOVLW  16
0CAFA:  MOVWF  FA9
0CAFC:  BCF    FA6.6
0CAFE:  BCF    FA6.7
0CB00:  BSF    FA6.0
0CB02:  MOVF   FA8,W
0CB04:  MOVLB  E
0CB06:  BTFSC  x3C.7
0CB08:  BSF    FF2.7
0CB0A:  MOVWF  34
....................    //Green11_18 = EEpDat;
....................    GREEN_Colour.B11 = EEpDat;
0CB0C:  MOVLB  D
0CB0E:  BCF    xD2.2
0CB10:  BTFSC  34.0
0CB12:  BSF    xD2.2
....................    GREEN_Colour.B12 = EEpDat >> 1;
0CB14:  BCF    FD8.0
0CB16:  RRCF   34,W
0CB18:  BCF    xD2.3
0CB1A:  BTFSC  FE8.0
0CB1C:  BSF    xD2.3
....................    GREEN_Colour.B13 = EEpDat >> 2;
0CB1E:  RRCF   34,W
0CB20:  MOVWF  00
0CB22:  RRCF   00,F
0CB24:  MOVLW  3F
0CB26:  ANDWF  00,F
0CB28:  BCF    xD2.4
0CB2A:  BTFSC  00.0
0CB2C:  BSF    xD2.4
....................    GREEN_Colour.B14 = EEpDat >> 3;
0CB2E:  RRCF   34,W
0CB30:  MOVWF  00
0CB32:  RRCF   00,F
0CB34:  RRCF   00,F
0CB36:  MOVLW  1F
0CB38:  ANDWF  00,F
0CB3A:  BCF    xD2.5
0CB3C:  BTFSC  00.0
0CB3E:  BSF    xD2.5
....................    GREEN_Colour.B15 = EEpDat >> 4;
0CB40:  SWAPF  34,W
0CB42:  MOVWF  00
0CB44:  MOVLW  0F
0CB46:  ANDWF  00,F
0CB48:  BCF    xD2.6
0CB4A:  BTFSC  00.0
0CB4C:  BSF    xD2.6
....................    GREEN_Colour.B16 = EEpDat >> 5;
0CB4E:  SWAPF  34,W
0CB50:  MOVWF  00
0CB52:  RRCF   00,F
0CB54:  MOVLW  07
0CB56:  ANDWF  00,F
0CB58:  BCF    xD2.7
0CB5A:  BTFSC  00.0
0CB5C:  BSF    xD2.7
....................    GREEN_Colour.B17 = EEpDat >> 6;
0CB5E:  SWAPF  34,W
0CB60:  MOVWF  00
0CB62:  RRCF   00,F
0CB64:  RRCF   00,F
0CB66:  MOVLW  03
0CB68:  ANDWF  00,F
0CB6A:  BCF    xD3.0
0CB6C:  BTFSC  00.0
0CB6E:  BSF    xD3.0
....................    GREEN_Colour.B18 = EEpDat >> 7;
0CB70:  CLRF   00
0CB72:  BTFSC  34.7
0CB74:  BSF    00.0
0CB76:  BCF    xD3.1
0CB78:  BTFSC  00.0
0CB7A:  BSF    xD3.1
....................    
....................    EEpDat = read_eeprom(0x17);
0CB7C:  MOVFF  FF2,E3C
0CB80:  BCF    FF2.7
0CB82:  CLRF   FAA
0CB84:  MOVLW  17
0CB86:  MOVWF  FA9
0CB88:  BCF    FA6.6
0CB8A:  BCF    FA6.7
0CB8C:  BSF    FA6.0
0CB8E:  MOVF   FA8,W
0CB90:  MOVLB  E
0CB92:  BTFSC  x3C.7
0CB94:  BSF    FF2.7
0CB96:  MOVWF  34
....................    //Green19_20 = EEpDat;
....................    GREEN_Colour.B19 = EEpDat;
0CB98:  MOVLB  D
0CB9A:  BCF    xD3.2
0CB9C:  BTFSC  34.0
0CB9E:  BSF    xD3.2
....................    GREEN_Colour.B20 = EEpDat >> 1;
0CBA0:  BCF    FD8.0
0CBA2:  RRCF   34,W
0CBA4:  BCF    xD3.3
0CBA6:  BTFSC  FE8.0
0CBA8:  BSF    xD3.3
0CBAA:  MOVLB  0
....................    
....................    ///////////// JACK/////////////////////////////////////
....................       
....................    }
.................... 
....................    
....................    set_tris_a (0b00000000); //PORTA SET TO OUTPUT
0CBAC:  MOVLW  00
0CBAE:  MOVWF  F92
....................    set_tris_b (0b00000000); //PORTA SET TO OUTPUT
0CBB0:  MOVWF  F93
....................    //set_tris_c (0b11111111); //PORTA SET TO OUTPUT
....................    enable_interrupts(GLOBAL);
0CBB2:  MOVLW  C0
0CBB4:  IORWF  FF2,F
....................    setup_wdt(WDT_ON);
0CBB6:  BSF    FD1.0
....................    //Read_input(); restart_wdt();
....................    output_bit(Pbuzzer,OffRelay);   //Clear Buzzer
0CBB8:  BCF    F89.4
0CBBA:  BCF    F92.4
....................    output_bit(Pbell,OffRelay);     //Clear Bell
0CBBC:  BCF    F89.3
0CBBE:  BCF    F92.3
....................    output_bit(P485ctrl,0);
0CBC0:  BCF    F8A.3
0CBC2:  BCF    F93.3
.................... 
....................    IO_OUTPUT_A(IO_DEVICE_2, 0xff);
0CBC4:  MOVLW  04
0CBC6:  MOVLB  E
0CBC8:  MOVWF  x44
0CBCA:  SETF   x45
0CBCC:  MOVLB  0
0CBCE:  CALL   254C
....................    IO_OUTPUT_B(IO_DEVICE_2, 0xff);
0CBD2:  MOVLW  04
0CBD4:  MOVLB  E
0CBD6:  MOVWF  x44
0CBD8:  SETF   x45
0CBDA:  MOVLB  0
0CBDC:  CALL   2562
....................             
....................    IO_OUTPUT_A(IO_DEVICE_3, 0xff);
0CBE0:  MOVLW  06
0CBE2:  MOVLB  E
0CBE4:  MOVWF  x44
0CBE6:  SETF   x45
0CBE8:  MOVLB  0
0CBEA:  CALL   254C
....................    IO_OUTPUT_B(IO_DEVICE_3, 0xff);
0CBEE:  MOVLW  06
0CBF0:  MOVLB  E
0CBF2:  MOVWF  x44
0CBF4:  SETF   x45
0CBF6:  MOVLB  0
0CBF8:  CALL   2562
....................   
....................    IO_OUTPUT_A(IO_DEVICE_5, 0xff);  
0CBFC:  MOVLW  0A
0CBFE:  MOVLB  E
0CC00:  MOVWF  x44
0CC02:  SETF   x45
0CC04:  MOVLB  0
0CC06:  CALL   254C
....................    IO_OUTPUT_B(IO_DEVICE_5, 0xff);
0CC0A:  MOVLW  0A
0CC0C:  MOVLB  E
0CC0E:  MOVWF  x44
0CC10:  SETF   x45
0CC12:  MOVLB  0
0CC14:  CALL   2562
....................             
....................    IO_OUTPUT_A(IO_DEVICE_4, 0xff);
0CC18:  MOVLW  08
0CC1A:  MOVLB  E
0CC1C:  MOVWF  x44
0CC1E:  SETF   x45
0CC20:  MOVLB  0
0CC22:  CALL   254C
....................    IO_OUTPUT_B(IO_DEVICE_4, 0xff);
0CC26:  MOVLW  08
0CC28:  MOVLB  E
0CC2A:  MOVWF  x44
0CC2C:  SETF   x45
0CC2E:  MOVLB  0
0CC30:  CALL   2562
....................    
....................    delay_ms(500);
0CC34:  MOVLW  02
0CC36:  MOVLB  E
0CC38:  MOVWF  x3C
0CC3A:  MOVLW  FA
0CC3C:  MOVWF  x45
0CC3E:  MOVLB  0
0CC40:  CALL   0A24
0CC44:  MOVLB  E
0CC46:  DECFSZ x3C,F
0CC48:  BRA    CC3A
....................    
....................    // jj
....................    char i;
....................    for(i=1;i<=20;i++)
0CC4A:  MOVLW  01
0CC4C:  MOVWF  x3A
0CC4E:  MOVF   x3A,W
0CC50:  SUBLW  14
0CC52:  BTFSS  FD8.0
0CC54:  BRA    CE22
....................    {
....................       FaultAgo[i] = 0;
0CC56:  MOVFF  E3A,E49
0CC5A:  CLRF   x4A
0CC5C:  MOVLW  0D
0CC5E:  MOVWF  x4C
0CC60:  MOVLW  D9
0CC62:  MOVWF  x4B
0CC64:  MOVLB  0
0CC66:  CALL   2578
....................       FaultNow[i] = 0;
0CC6A:  MOVFF  E3A,E49
0CC6E:  MOVLB  E
0CC70:  CLRF   x4A
0CC72:  MOVLW  0D
0CC74:  MOVWF  x4C
0CC76:  MOVLW  DC
0CC78:  MOVWF  x4B
0CC7A:  MOVLB  0
0CC7C:  CALL   2578
....................       ReleaseTime[i] = 0;
0CC80:  BCF    FD8.0
0CC82:  MOVLB  E
0CC84:  RLCF   x3A,W
0CC86:  CLRF   03
0CC88:  ADDLW  DF
0CC8A:  MOVWF  FE9
0CC8C:  MOVLW  0D
0CC8E:  ADDWFC 03,W
0CC90:  MOVWF  FEA
0CC92:  CLRF   FEC
0CC94:  MOVF   FED,F
0CC96:  CLRF   FEF
....................       if(FaultNCNO[i] ==NO)
0CC98:  MOVFF  E3A,E49
0CC9C:  MOVLW  0E
0CC9E:  MOVWF  x4B
0CCA0:  MOVLW  33
0CCA2:  MOVWF  x4A
0CCA4:  MOVLB  0
0CCA6:  CALL   25BA
0CCAA:  MOVF   01,W
0CCAC:  ANDLW  01
0CCAE:  SUBLW  01
0CCB0:  BNZ   CD6A
....................       {
....................          switch(i)
0CCB2:  MOVLW  01
0CCB4:  MOVLB  E
0CCB6:  SUBWF  x3A,W
0CCB8:  ADDLW  EC
0CCBA:  BC    CD66
0CCBC:  ADDLW  14
0CCBE:  MOVLB  0
0CCC0:  GOTO   D038
....................          {
....................             case 1:
....................                Inputt.B1 = 1; 
0CCC4:  MOVLB  D
0CCC6:  BSF    xA1.0
....................             break;
0CCC8:  MOVLB  E
0CCCA:  BRA    CD66
....................             case 2:
....................                Inputt.B2 = 1; 
0CCCC:  MOVLB  D
0CCCE:  BSF    xA1.1
....................             break;
0CCD0:  MOVLB  E
0CCD2:  BRA    CD66
....................             case 3:
....................                Inputt.B3 = 1; 
0CCD4:  MOVLB  D
0CCD6:  BSF    xA1.2
....................             break;
0CCD8:  MOVLB  E
0CCDA:  BRA    CD66
....................             case 4:
....................                Inputt.B4 = 1; 
0CCDC:  MOVLB  D
0CCDE:  BSF    xA1.3
....................             break;
0CCE0:  MOVLB  E
0CCE2:  BRA    CD66
....................             case 5:
....................                Inputt.B5 = 1; 
0CCE4:  MOVLB  D
0CCE6:  BSF    xA1.4
....................             break;
0CCE8:  MOVLB  E
0CCEA:  BRA    CD66
....................             case 6:
....................                Inputt.B6 = 1; 
0CCEC:  MOVLB  D
0CCEE:  BSF    xA1.5
....................             break;
0CCF0:  MOVLB  E
0CCF2:  BRA    CD66
....................             case 7:
....................                Inputt.B7 = 1; 
0CCF4:  MOVLB  D
0CCF6:  BSF    xA1.6
....................              break;
0CCF8:  MOVLB  E
0CCFA:  BRA    CD66
....................              case 8:
....................                Inputt.B8 = 1; 
0CCFC:  MOVLB  D
0CCFE:  BSF    xA1.7
....................             break;
0CD00:  MOVLB  E
0CD02:  BRA    CD66
....................             case 9:
....................                Inputt.B9 = 1; 
0CD04:  MOVLB  D
0CD06:  BSF    xA2.0
....................             break;
0CD08:  MOVLB  E
0CD0A:  BRA    CD66
....................             case 10:
....................                Inputt.B10 = 1; 
0CD0C:  MOVLB  D
0CD0E:  BSF    xA2.1
....................             break;
0CD10:  MOVLB  E
0CD12:  BRA    CD66
....................             case 11:
....................                Inputt.B11 = 1; 
0CD14:  MOVLB  D
0CD16:  BSF    xA2.2
....................             break;
0CD18:  MOVLB  E
0CD1A:  BRA    CD66
....................             case 12:
....................                Inputt.B12 = 1; 
0CD1C:  MOVLB  D
0CD1E:  BSF    xA2.3
....................             break;
0CD20:  MOVLB  E
0CD22:  BRA    CD66
....................             case 13:
....................                Inputt.B13 = 1; 
0CD24:  MOVLB  D
0CD26:  BSF    xA2.4
....................             break;
0CD28:  MOVLB  E
0CD2A:  BRA    CD66
....................             case 14:
....................                Inputt.B14 = 1; 
0CD2C:  MOVLB  D
0CD2E:  BSF    xA2.5
....................             break;
0CD30:  MOVLB  E
0CD32:  BRA    CD66
....................             case 15:
....................                Inputt.B15 = 1; 
0CD34:  MOVLB  D
0CD36:  BSF    xA2.6
....................             break;
0CD38:  MOVLB  E
0CD3A:  BRA    CD66
....................             case 16:
....................                 Inputt.B16 = 1;
0CD3C:  MOVLB  D
0CD3E:  BSF    xA2.7
....................              break;
0CD40:  MOVLB  E
0CD42:  BRA    CD66
....................              case 17:
....................                Inputt.B17 = 1; 
0CD44:  MOVLB  D
0CD46:  BSF    xA3.0
....................              break;
0CD48:  MOVLB  E
0CD4A:  BRA    CD66
....................              case 18:
....................                Inputt.B18 = 1; 
0CD4C:  MOVLB  D
0CD4E:  BSF    xA3.1
....................             break;
0CD50:  MOVLB  E
0CD52:  BRA    CD66
....................             case 19:
....................                Inputt.B19 = 1; 
0CD54:  MOVLB  D
0CD56:  BSF    xA3.2
....................             break;
0CD58:  MOVLB  E
0CD5A:  BRA    CD66
....................             case 20:
....................                Inputt.B20 = 1; 
0CD5C:  MOVLB  D
0CD5E:  BSF    xA3.3
....................             break;
0CD60:  MOVLB  E
0CD62:  BRA    CD66
0CD64:  MOVLB  E
....................                        
....................          }                 
....................       }
0CD66:  BRA    CE1E
0CD68:  MOVLB  0
....................       else
....................       {
....................          switch(i)
0CD6A:  MOVLW  01
0CD6C:  MOVLB  E
0CD6E:  SUBWF  x3A,W
0CD70:  ADDLW  EC
0CD72:  BC    CE1E
0CD74:  ADDLW  14
0CD76:  MOVLB  0
0CD78:  GOTO   D07A
....................          {
....................             case 1:
....................                Inputt.B1 = 0; 
0CD7C:  MOVLB  D
0CD7E:  BCF    xA1.0
....................             break;
0CD80:  MOVLB  E
0CD82:  BRA    CE1E
....................             case 2:
....................                Inputt.B2 = 0; 
0CD84:  MOVLB  D
0CD86:  BCF    xA1.1
....................             break;
0CD88:  MOVLB  E
0CD8A:  BRA    CE1E
....................             case 3:
....................                Inputt.B3 = 0; 
0CD8C:  MOVLB  D
0CD8E:  BCF    xA1.2
....................             break;
0CD90:  MOVLB  E
0CD92:  BRA    CE1E
....................             case 4:
....................                Inputt.B4 = 0; 
0CD94:  MOVLB  D
0CD96:  BCF    xA1.3
....................             break;
0CD98:  MOVLB  E
0CD9A:  BRA    CE1E
....................             case 5:
....................                Inputt.B5 = 0; 
0CD9C:  MOVLB  D
0CD9E:  BCF    xA1.4
....................             break;
0CDA0:  MOVLB  E
0CDA2:  BRA    CE1E
....................             case 6:
....................                Inputt.B6 = 0; 
0CDA4:  MOVLB  D
0CDA6:  BCF    xA1.5
....................             break;
0CDA8:  MOVLB  E
0CDAA:  BRA    CE1E
....................             case 7:
....................                Inputt.B7 = 0; 
0CDAC:  MOVLB  D
0CDAE:  BCF    xA1.6
....................              break;
0CDB0:  MOVLB  E
0CDB2:  BRA    CE1E
....................              case 8:
....................                Inputt.B8 = 0; 
0CDB4:  MOVLB  D
0CDB6:  BCF    xA1.7
....................             break;
0CDB8:  MOVLB  E
0CDBA:  BRA    CE1E
....................             case 9:
....................                Inputt.B9 = 0; 
0CDBC:  MOVLB  D
0CDBE:  BCF    xA2.0
....................             break;
0CDC0:  MOVLB  E
0CDC2:  BRA    CE1E
....................             case 10:
....................                Inputt.B10 = 0; 
0CDC4:  MOVLB  D
0CDC6:  BCF    xA2.1
....................             break;
0CDC8:  MOVLB  E
0CDCA:  BRA    CE1E
....................             case 11:
....................                Inputt.B11 = 0; 
0CDCC:  MOVLB  D
0CDCE:  BCF    xA2.2
....................             break;
0CDD0:  MOVLB  E
0CDD2:  BRA    CE1E
....................             case 12:
....................                Inputt.B12 = 0; 
0CDD4:  MOVLB  D
0CDD6:  BCF    xA2.3
....................             break;
0CDD8:  MOVLB  E
0CDDA:  BRA    CE1E
....................             case 13:
....................                Inputt.B13 = 0; 
0CDDC:  MOVLB  D
0CDDE:  BCF    xA2.4
....................             break;
0CDE0:  MOVLB  E
0CDE2:  BRA    CE1E
....................             case 14:
....................                Inputt.B14 = 0; 
0CDE4:  MOVLB  D
0CDE6:  BCF    xA2.5
....................             break;
0CDE8:  MOVLB  E
0CDEA:  BRA    CE1E
....................             case 15:
....................                Inputt.B15 = 0; 
0CDEC:  MOVLB  D
0CDEE:  BCF    xA2.6
....................             break;
0CDF0:  MOVLB  E
0CDF2:  BRA    CE1E
....................             case 16:
....................                 Inputt.B16 = 0;
0CDF4:  MOVLB  D
0CDF6:  BCF    xA2.7
....................              break;
0CDF8:  MOVLB  E
0CDFA:  BRA    CE1E
....................              case 17:
....................                Inputt.B17 = 0; 
0CDFC:  MOVLB  D
0CDFE:  BCF    xA3.0
....................              break;
0CE00:  MOVLB  E
0CE02:  BRA    CE1E
....................              case 18:
....................                Inputt.B18 = 0; 
0CE04:  MOVLB  D
0CE06:  BCF    xA3.1
....................             break;
0CE08:  MOVLB  E
0CE0A:  BRA    CE1E
....................             case 19:
....................                Inputt.B19 = 0; 
0CE0C:  MOVLB  D
0CE0E:  BCF    xA3.2
....................             break;
0CE10:  MOVLB  E
0CE12:  BRA    CE1E
....................             case 20:
....................                Inputt.B20 = 0; 
0CE14:  MOVLB  D
0CE16:  BCF    xA3.3
....................             break;
0CE18:  MOVLB  E
0CE1A:  BRA    CE1E
0CE1C:  MOVLB  E
....................                        
....................          }                 
....................       }   
0CE1E:  INCF   x3A,F
0CE20:  BRA    CC4E
....................    }
....................    
....................    //GSM SIM900 Init
....................    delay_ms(1000);
0CE22:  MOVLW  04
0CE24:  MOVWF  x3C
0CE26:  MOVLW  FA
0CE28:  MOVWF  x45
0CE2A:  MOVLB  0
0CE2C:  CALL   0A24
0CE30:  MOVLB  E
0CE32:  DECFSZ x3C,F
0CE34:  BRA    CE26
....................    fprintf(CH2,"AT+CMGF=1"); 
0CE36:  MOVLW  1A
0CE38:  MOVWF  FF6
0CE3A:  MOVLW  0A
0CE3C:  MOVWF  FF7
0CE3E:  MOVLB  0
0CE40:  CALL   2636
....................    putc('\n',CH2);
0CE44:  MOVLW  0A
0CE46:  MOVLB  E
0CE48:  MOVWF  x46
0CE4A:  MOVLB  0
0CE4C:  CALL   25F0
....................    delay_ms(50);
0CE50:  MOVLW  32
0CE52:  MOVLB  E
0CE54:  MOVWF  x45
0CE56:  MOVLB  0
0CE58:  CALL   0A24
....................    
....................    SendSMS.B1 =0;
0CE5C:  MOVLB  D
0CE5E:  BCF    xD5.0
....................    SendSMS.B2 =0;
0CE60:  BCF    xD5.1
....................    SendSMS.B3 =0;
0CE62:  BCF    xD5.2
....................    SendSMS.B4 =0;
0CE64:  BCF    xD5.3
....................    SendSMS.B5 =0;
0CE66:  BCF    xD5.4
....................    SendSMS.B6 =0;
0CE68:  BCF    xD5.5
....................    SendSMS.B7 =0;
0CE6A:  BCF    xD5.6
....................    SendSMS.B8 =0;
0CE6C:  BCF    xD5.7
....................    SendSMS.B9 =0;
0CE6E:  BCF    xD6.0
....................    SendSMS.B10 =0;
0CE70:  BCF    xD6.1
....................    SendSMS.B11 =0;
0CE72:  BCF    xD6.2
....................    SendSMS.B12 =0;
0CE74:  BCF    xD6.3
....................    SendSMS.B13 =0;
0CE76:  BCF    xD6.4
....................    SendSMS.B14 =0;
0CE78:  BCF    xD6.5
....................    SendSMS.B15 =0;
0CE7A:  BCF    xD6.6
....................    SendSMS.B16 =0;
0CE7C:  BCF    xD6.7
....................    
....................    char m;
....................    for(m=0; m<10; m++)
0CE7E:  MOVLB  E
0CE80:  CLRF   x3B
0CE82:  MOVF   x3B,W
0CE84:  SUBLW  09
0CE86:  BNC   CEBA
....................    {
....................       sms_phonenumber[m] = read_eeprom(0x32 + m);
0CE88:  CLRF   03
0CE8A:  MOVF   x3B,W
0CE8C:  ADDLW  72
0CE8E:  MOVWF  FE9
0CE90:  MOVLW  0A
0CE92:  ADDWFC 03,W
0CE94:  MOVWF  FEA
0CE96:  MOVLW  32
0CE98:  ADDWF  x3B,W
0CE9A:  MOVWF  x3E
0CE9C:  MOVFF  FF2,E3F
0CEA0:  BCF    FF2.7
0CEA2:  CLRF   FAA
0CEA4:  MOVFF  E3E,FA9
0CEA8:  BCF    FA6.6
0CEAA:  BCF    FA6.7
0CEAC:  BSF    FA6.0
0CEAE:  MOVF   FA8,W
0CEB0:  BTFSC  x3F.7
0CEB2:  BSF    FF2.7
0CEB4:  MOVWF  FEF
0CEB6:  INCF   x3B,F
0CEB8:  BRA    CE82
....................    }
....................    sms_phonenumber[m] = '\0' ; // end string
0CEBA:  CLRF   03
0CEBC:  MOVF   x3B,W
0CEBE:  ADDLW  72
0CEC0:  MOVWF  FE9
0CEC2:  MOVLW  0A
0CEC4:  ADDWFC 03,W
0CEC6:  MOVWF  FEA
0CEC8:  CLRF   FEF
....................    delay_ms(500);
0CECA:  MOVLW  02
0CECC:  MOVWF  x3C
0CECE:  MOVLW  FA
0CED0:  MOVWF  x45
0CED2:  MOVLB  0
0CED4:  CALL   0A24
0CED8:  MOVLB  E
0CEDA:  DECFSZ x3C,F
0CEDC:  BRA    CECE
....................  
....................    
....................    while(TRUE)
....................    {
....................   
....................       IO_OUTPUT_A(IO_DEVICE_0, 0xFF); //jj 
0CEDE:  CLRF   x44
0CEE0:  SETF   x45
0CEE2:  MOVLB  0
0CEE4:  CALL   254C
....................       IO_OUTPUT_B(IO_DEVICE_0, 0xFF); //jj 
0CEE8:  MOVLB  E
0CEEA:  CLRF   x44
0CEEC:  SETF   x45
0CEEE:  MOVLB  0
0CEF0:  CALL   2562
....................       IO_OUTPUT_A(IO_DEVICE_1, 0xFF); //jj 
0CEF4:  MOVLW  02
0CEF6:  MOVLB  E
0CEF8:  MOVWF  x44
0CEFA:  SETF   x45
0CEFC:  MOVLB  0
0CEFE:  CALL   254C
....................       IO_OUTPUT_B(IO_DEVICE_1, 0xFF); //jj 
0CF02:  MOVLW  02
0CF04:  MOVLB  E
0CF06:  MOVWF  x44
0CF08:  SETF   x45
0CF0A:  MOVLB  0
0CF0C:  CALL   2562
....................       restart_wdt();   
0CF10:  CLRWDT
....................       if(recieve_completed == 1)
0CF12:  BTFSS  30.5
0CF14:  BRA    CF1C
....................       {
....................          Modbus_Function();
0CF16:  GOTO   3D56
....................          recieve_completed = 0 ;
0CF1A:  BCF    30.5
....................       }
.................... 
....................       check_ack();
0CF1C:  CALL   3866
....................       check_reset();
0CF20:  CALL   39F4
....................       check_test();      
0CF24:  GOTO   BF2A
....................       restart_wdt();
0CF28:  CLRWDT
....................       
....................       if(StartRead)
0CF2A:  BTFSS  30.4
0CF2C:  BRA    D032
....................       {
....................          //initialIC();
....................          Read_input(); restart_wdt(); //Must be first
0CF2E:  CALL   2C5C
0CF32:  CLRWDT
....................          Anal_Function(); restart_wdt();
0CF34:  CALL   7924
0CF38:  CLRWDT
....................          Send_Ouput(); restart_wdt();
0CF3A:  GOTO   C026
0CF3E:  CLRWDT
....................         // Driver595(); restart_wdt();      
....................         // output_toggle(PIN_A0);
....................          
....................          if(RefreshConfigData)
0CF40:  BTFSS  30.2
0CF42:  BRA    D032
....................          {
....................             RefreshConfigData =0;
0CF44:  BCF    30.2
....................             Read_Config();
0CF46:  CALL   0B42
....................             //IO_INIT();   //initializes the MCP23S17 chip.//----------jj
....................      
....................             IO_SET_TRIS_A(IO_DEVICE_0, 0xFF); //addr.0 Set PortA As Input
0CF4A:  MOVLB  E
0CF4C:  CLRF   x3C
0CF4E:  SETF   x3D
0CF50:  MOVLB  0
0CF52:  CALL   0B1C
....................             IO_SET_TRIS_B(IO_DEVICE_0, 0xFF); //addr.0 Set PortB As Input
0CF56:  MOVLB  E
0CF58:  CLRF   x3C
0CF5A:  SETF   x3D
0CF5C:  MOVLB  0
0CF5E:  CALL   0B2E
....................             IO_SET_TRIS_A(IO_DEVICE_1, 0xFF); //addr.1 Set PortA As Input 
0CF62:  MOVLW  02
0CF64:  MOVLB  E
0CF66:  MOVWF  x3C
0CF68:  SETF   x3D
0CF6A:  MOVLB  0
0CF6C:  CALL   0B1C
....................             IO_SET_TRIS_B(IO_DEVICE_1, 0xFF); //addr.1 Set PortB As Input
0CF70:  MOVLW  02
0CF72:  MOVLB  E
0CF74:  MOVWF  x3C
0CF76:  SETF   x3D
0CF78:  MOVLB  0
0CF7A:  CALL   0B2E
....................             //  jj
....................             IO_WRITE_REGISTER(IO_DEVICE_0, GPPUA, 0xFF); // Input Pullup
0CF7E:  MOVLB  E
0CF80:  CLRF   x46
0CF82:  MOVLW  06
0CF84:  MOVWF  x47
0CF86:  SETF   x48
0CF88:  MOVLB  0
0CF8A:  CALL   0A54
....................             IO_WRITE_REGISTER(IO_DEVICE_0, GPPUB, 0xFF); // Input Pullup
0CF8E:  MOVLB  E
0CF90:  CLRF   x46
0CF92:  MOVLW  16
0CF94:  MOVWF  x47
0CF96:  SETF   x48
0CF98:  MOVLB  0
0CF9A:  CALL   0A54
....................             IO_WRITE_REGISTER(IO_DEVICE_1, GPPUA, 0xFF); // Input Pullup
0CF9E:  MOVLW  02
0CFA0:  MOVLB  E
0CFA2:  MOVWF  x46
0CFA4:  MOVLW  06
0CFA6:  MOVWF  x47
0CFA8:  SETF   x48
0CFAA:  MOVLB  0
0CFAC:  CALL   0A54
....................             IO_WRITE_REGISTER(IO_DEVICE_1, GPPUB, 0xFF); // Input Pullup
0CFB0:  MOVLW  02
0CFB2:  MOVLB  E
0CFB4:  MOVWF  x46
0CFB6:  MOVLW  16
0CFB8:  MOVWF  x47
0CFBA:  SETF   x48
0CFBC:  MOVLB  0
0CFBE:  CALL   0A54
....................             //  jj
....................             IO_SET_TRIS_A(IO_DEVICE_2, 0x00); //addr.2 Set PortA As Output 
0CFC2:  MOVLW  04
0CFC4:  MOVLB  E
0CFC6:  MOVWF  x3C
0CFC8:  CLRF   x3D
0CFCA:  MOVLB  0
0CFCC:  CALL   0B1C
....................             IO_SET_TRIS_B(IO_DEVICE_2, 0x00); //addr.2 Set PortB As Output
0CFD0:  MOVLW  04
0CFD2:  MOVLB  E
0CFD4:  MOVWF  x3C
0CFD6:  CLRF   x3D
0CFD8:  MOVLB  0
0CFDA:  CALL   0B2E
....................             IO_SET_TRIS_A(IO_DEVICE_3, 0x00); //addr.3 Set PortA As Output 
0CFDE:  MOVLW  06
0CFE0:  MOVLB  E
0CFE2:  MOVWF  x3C
0CFE4:  CLRF   x3D
0CFE6:  MOVLB  0
0CFE8:  CALL   0B1C
....................             IO_SET_TRIS_B(IO_DEVICE_3, 0x00); //addr.3 Set PortB As Output
0CFEC:  MOVLW  06
0CFEE:  MOVLB  E
0CFF0:  MOVWF  x3C
0CFF2:  CLRF   x3D
0CFF4:  MOVLB  0
0CFF6:  CALL   0B2E
....................             IO_SET_TRIS_A(IO_DEVICE_4, 0x00); //addr.4 Set PortA As Output 
0CFFA:  MOVLW  08
0CFFC:  MOVLB  E
0CFFE:  MOVWF  x3C
0D000:  CLRF   x3D
0D002:  MOVLB  0
0D004:  CALL   0B1C
....................             IO_SET_TRIS_B(IO_DEVICE_4, 0x00); //addr.4 Set PortB As Output 
0D008:  MOVLW  08
0D00A:  MOVLB  E
0D00C:  MOVWF  x3C
0D00E:  CLRF   x3D
0D010:  MOVLB  0
0D012:  CALL   0B2E
....................             IO_SET_TRIS_A(IO_DEVICE_5, 0x00); //addr.5 Set PortA As Output 
0D016:  MOVLW  0A
0D018:  MOVLB  E
0D01A:  MOVWF  x3C
0D01C:  CLRF   x3D
0D01E:  MOVLB  0
0D020:  CALL   0B1C
....................             IO_SET_TRIS_B(IO_DEVICE_5, 0x00); //addr.5 Set PortB As Output
0D024:  MOVLW  0A
0D026:  MOVLB  E
0D028:  MOVWF  x3C
0D02A:  CLRF   x3D
0D02C:  MOVLB  0
0D02E:  CALL   0B2E
....................          }
....................          
....................       }     
0D032:  MOVLB  E
0D034:  BRA    CEDE
.................... 
....................    }
....................    
.................... }
0D036:  SLEEP 

Configuration Fuses:
   Word  1: E800   INTRC_IO NOPLLEN PRIMARY FCMEN IESO
   Word  2: 1B1F   NOPUT BROWNOUT BORV19 WDT WDT64
   Word  3: BF00   CCP2C1 PBADEN CCP3B5 HFOFST TIMER3C0 CCP2B5 MCLR
   Word  4: 0081   STVREN NOLVP NOXINST NODEBUG
   Word  5: C00F   NOPROTECT NOCPB NOCPD
   Word  6: E00F   NOWRT NOWRTC NOWRTB NOWRTD
   Word  7: 400F   NOEBTR NOEBTRB
